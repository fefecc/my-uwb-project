
UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000110c  0801a760  0801a760  0001b760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b86c  0801b86c  0001c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b874  0801b874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b878  0801b878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  0801b87c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00022ab8  24000078  0801b8f4  0001d078  2**3
                  ALLOC
  8 ._user_heap_stack 00003000  24022b30  0801b8f4  0001db30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039f95  00000000  00000000  0001d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000075ab  00000000  00000000  0005703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bb8  00000000  00000000  0005e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000219b  00000000  00000000  000611a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000427c9  00000000  00000000  0006333b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f27d  00000000  00000000  000a5b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018131e  00000000  00000000  000e4d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026609f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd80  00000000  00000000  002660e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  00271e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a748 	.word	0x0801a748

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0801a748 	.word	0x0801a748

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <HAL_GPIO_EXTI_Callback>:
#include "FreeRTOS.h"
#include "imusamplingtask.h"
#include "main.h"
#include "task.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4) {
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2b10      	cmp	r3, #16
 80006ba:	d118      	bne.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
    if (imusamplingTaskNotifyHandle != NULL) {
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d014      	beq.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
      vTaskNotifyGiveFromISR(imusamplingTaskNotifyHandle,
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f017 fcfa 	bl	80180cc <vTaskNotifyGiveFromISR>
                             &xHigherPriorityTaskWoken);
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
 80006de:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <HAL_GPIO_EXTI_Callback+0x50>)
 80006e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	f3bf 8f6f 	isb	sy
  else if (GPIO_Pin == GPIO_PIN_0) {
  }

  else {
  }
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400139c 	.word	0x2400139c
 80006fc:	e000ed04 	.word	0xe000ed04

08000700 <SPI_CS_Control>:

extern SPI_HandleTypeDef hspi1;

stmdev_ctx_t dev_ctx;  // imu设备

static void SPI_CS_Control(uint8_t state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if (state == 0)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d105      	bne.n	800071c <SPI_CS_Control+0x1c>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <SPI_CS_Control+0x30>)
 8000716:	f005 fba3 	bl	8005e60 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
}
 800071a:	e004      	b.n	8000726 <SPI_CS_Control+0x26>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <SPI_CS_Control+0x30>)
 8000722:	f005 fb9d 	bl	8005e60 <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020800 	.word	0x58020800

08000734 <Asm330_write>:

static int32_t Asm330_write(void *handle, uint8_t reg, const uint8_t *bufp,
                            uint16_t len) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	461a      	mov	r2, r3
 8000740:	460b      	mov	r3, r1
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	4613      	mov	r3, r2
 8000746:	813b      	strh	r3, [r7, #8]
  if (bufp == NULL || len == 0) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <Asm330_write+0x20>
 800074e:	893b      	ldrh	r3, [r7, #8]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <Asm330_write+0x26>
    return -1;
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	e02e      	b.n	80007b8 <Asm330_write+0x84>
  }
  SPI_CS_Control(0);  // 拉低cs
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd0 	bl	8000700 <SPI_CS_Control>
  uint8_t temp = reg;
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	75fb      	strb	r3, [r7, #23]
  temp &= 0x7F;  // 确保最高位为0，表示写操作
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 800076e:	f107 0117 	add.w	r1, r7, #23
 8000772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000776:	2201      	movs	r2, #1
 8000778:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <Asm330_write+0x8c>)
 800077a:	f00a fea7 	bl	800b4cc <HAL_SPI_Transmit>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <Asm330_write+0x5c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ffbb 	bl	8000700 <SPI_CS_Control>
    return -2;          // 地址发送失败
 800078a:	f06f 0301 	mvn.w	r3, #1
 800078e:	e013      	b.n	80007b8 <Asm330_write+0x84>
  }
  // 发送要写入的数据（长度为len）
  if (HAL_SPI_Transmit(&hspi1, bufp, len, 1000) != HAL_OK) {
 8000790:	893a      	ldrh	r2, [r7, #8]
 8000792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <Asm330_write+0x8c>)
 800079a:	f00a fe97 	bl	800b4cc <HAL_SPI_Transmit>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <Asm330_write+0x7c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ffab 	bl	8000700 <SPI_CS_Control>
    return -3;          // 数据发送失败
 80007aa:	f06f 0302 	mvn.w	r3, #2
 80007ae:	e003      	b.n	80007b8 <Asm330_write+0x84>
  }

  SPI_CS_Control(1);  // 拉高cs
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffa5 	bl	8000700 <SPI_CS_Control>
  return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	24001444 	.word	0x24001444

080007c4 <Asm330_read>:

static int32_t Asm330_read(void *handle, uint8_t reg, uint8_t *bufp,
                           uint16_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	72fb      	strb	r3, [r7, #11]
 80007d4:	4613      	mov	r3, r2
 80007d6:	813b      	strh	r3, [r7, #8]
  if (len == 0) {
 80007d8:	893b      	ldrh	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <Asm330_read+0x20>
    return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e02e      	b.n	8000842 <Asm330_read+0x7e>
  }
  SPI_CS_Control(0);  // 拉低cs
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff8b 	bl	8000700 <SPI_CS_Control>

  uint8_t temp = reg;
 80007ea:	7afb      	ldrb	r3, [r7, #11]
 80007ec:	75fb      	strb	r3, [r7, #23]
  temp |= 0x80;  // 确保最高位为1，表示读操作
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 80007f8:	f107 0117 	add.w	r1, r7, #23
 80007fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000800:	2201      	movs	r2, #1
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <Asm330_read+0x88>)
 8000804:	f00a fe62 	bl	800b4cc <HAL_SPI_Transmit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <Asm330_read+0x56>
    SPI_CS_Control(1);  // 出错时及时释放片选
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ff76 	bl	8000700 <SPI_CS_Control>
    return -2;          // 地址发送失败
 8000814:	f06f 0301 	mvn.w	r3, #1
 8000818:	e013      	b.n	8000842 <Asm330_read+0x7e>
  }

  // 读出数据（长度为len）
  if (HAL_SPI_Receive(&hspi1, bufp, len, 1000) != HAL_OK) {
 800081a:	893a      	ldrh	r2, [r7, #8]
 800081c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	480a      	ldr	r0, [pc, #40]	@ (800084c <Asm330_read+0x88>)
 8000824:	f00b f840 	bl	800b8a8 <HAL_SPI_Receive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <Asm330_read+0x76>
    SPI_CS_Control(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff66 	bl	8000700 <SPI_CS_Control>
    return -3;
 8000834:	f06f 0302 	mvn.w	r3, #2
 8000838:	e003      	b.n	8000842 <Asm330_read+0x7e>
  }
  SPI_CS_Control(1);  // 拉高cs
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff60 	bl	8000700 <SPI_CS_Control>

  return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24001444 	.word	0x24001444

08000850 <Asm330_Drive_Init>:

int32_t Asm330_Drive_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  SPI_CS_Control(1);  // CS high
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff53 	bl	8000700 <SPI_CS_Control>
  dev_ctx.write_reg = Asm330_write;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <Asm330_Drive_Init+0x24>)
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <Asm330_Drive_Init+0x28>)
 800085e:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = Asm330_read;
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <Asm330_Drive_Init+0x24>)
 8000862:	4a06      	ldr	r2, [pc, #24]	@ (800087c <Asm330_Drive_Init+0x2c>)
 8000864:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = HAL_Delay;
 8000866:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <Asm330_Drive_Init+0x24>)
 8000868:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <Asm330_Drive_Init+0x30>)
 800086a:	609a      	str	r2, [r3, #8]

  return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	24000094 	.word	0x24000094
 8000878:	08000735 	.word	0x08000735
 800087c:	080007c5 	.word	0x080007c5
 8000880:	08002c39 	.word	0x08002c39

08000884 <RB_Init>:
#include "DoubleRingBuffer.h"

#include "string.h"

int RB_Init(RingBuffer *rb, uint8_t *memPool, size_t bufSize) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	80fb      	strh	r3, [r7, #6]
  if (!rb || !memPool || bufSize == 0) return -1;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d005      	beq.n	80008a4 <RB_Init+0x20>
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <RB_Init+0x20>
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <RB_Init+0x26>
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e034      	b.n	8000914 <RB_Init+0x90>

  rb->bufferSize = bufSize;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	811a      	strh	r2, [r3, #8]
  rb->activeBuf = 0;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	749a      	strb	r2, [r3, #18]

  rb->buffers[0] = memPool;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
  rb->buffers[1] = memPool + bufSize;
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	441a      	add	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]

  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e01f      	b.n	800090c <RB_Init+0x88>
    rb->writePos[i] = 0;
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3304      	adds	r3, #4
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	805a      	strh	r2, [r3, #2]
    rb->readPos[i] = 0;
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3304      	adds	r3, #4
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	80da      	strh	r2, [r3, #6]
    rb->bufFullFlag[i] = 0;
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	3313      	adds	r3, #19
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    memset(rb->buffers[i], 0, bufSize);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fc:	88fa      	ldrh	r2, [r7, #6]
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f019 f933 	bl	8019b6c <memset>
  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b01      	cmp	r3, #1
 8000910:	dddc      	ble.n	80008cc <RB_Init+0x48>
  }
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <RB_Write>:

int RB_Write(RingBuffer *rb, const uint8_t *data, size_t len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]
  if (!rb || !data || len == 0) return -1;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <RB_Write+0x20>
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <RB_Write+0x20>
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <RB_Write+0x26>
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	e065      	b.n	8000a0e <RB_Write+0xf2>

  size_t remaining = len;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	83fb      	strh	r3, [r7, #30]
  size_t offset = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	83bb      	strh	r3, [r7, #28]

  while (remaining > 0) {
 800094a:	e05c      	b.n	8000a06 <RB_Write+0xea>
    uint8_t bufIdx = rb->activeBuf;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	7c9b      	ldrb	r3, [r3, #18]
 8000950:	76fb      	strb	r3, [r7, #27]
    size_t spaceLeft = rb->bufferSize - rb->writePos[bufIdx];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	891a      	ldrh	r2, [r3, #8]
 8000956:	7efb      	ldrb	r3, [r7, #27]
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	3304      	adds	r3, #4
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	440b      	add	r3, r1
 8000960:	885b      	ldrh	r3, [r3, #2]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	833b      	strh	r3, [r7, #24]

    if (spaceLeft == 0) {
 8000966:	8b3b      	ldrh	r3, [r7, #24]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10d      	bne.n	8000988 <RB_Write+0x6c>
      // 当前缓冲区已满 -> 标志置位
      rb->bufFullFlag[bufIdx] = 1;
 800096c:	7efb      	ldrb	r3, [r7, #27]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	2201      	movs	r2, #1
 8000974:	74da      	strb	r2, [r3, #19]
      // 切换到另一缓冲区
      RB_SwitchBuffer(rb);
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f8c2 	bl	8000b00 <RB_SwitchBuffer>
      bufIdx = rb->activeBuf;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	7c9b      	ldrb	r3, [r3, #18]
 8000980:	76fb      	strb	r3, [r7, #27]
      spaceLeft = rb->bufferSize;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	891b      	ldrh	r3, [r3, #8]
 8000986:	833b      	strh	r3, [r7, #24]
    }

    size_t toWrite = (remaining < spaceLeft) ? remaining : spaceLeft;
 8000988:	8b3a      	ldrh	r2, [r7, #24]
 800098a:	8bfb      	ldrh	r3, [r7, #30]
 800098c:	4293      	cmp	r3, r2
 800098e:	bf28      	it	cs
 8000990:	4613      	movcs	r3, r2
 8000992:	82fb      	strh	r3, [r7, #22]
    memcpy(rb->buffers[bufIdx] + rb->writePos[bufIdx], data + offset, toWrite);
 8000994:	7efa      	ldrb	r2, [r7, #27]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800099c:	7efb      	ldrb	r3, [r7, #27]
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	3304      	adds	r3, #4
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	440b      	add	r3, r1
 80009a6:	885b      	ldrh	r3, [r3, #2]
 80009a8:	18d0      	adds	r0, r2, r3
 80009aa:	8bbb      	ldrh	r3, [r7, #28]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	8afa      	ldrh	r2, [r7, #22]
 80009b2:	4619      	mov	r1, r3
 80009b4:	f019 f9b3 	bl	8019d1e <memcpy>
    rb->writePos[bufIdx] += toWrite;
 80009b8:	7efb      	ldrb	r3, [r7, #27]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	8859      	ldrh	r1, [r3, #2]
 80009c4:	7efb      	ldrb	r3, [r7, #27]
 80009c6:	8afa      	ldrh	r2, [r7, #22]
 80009c8:	440a      	add	r2, r1
 80009ca:	b291      	uxth	r1, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	3304      	adds	r3, #4
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	460a      	mov	r2, r1
 80009d6:	805a      	strh	r2, [r3, #2]
    offset += toWrite;
 80009d8:	8bba      	ldrh	r2, [r7, #28]
 80009da:	8afb      	ldrh	r3, [r7, #22]
 80009dc:	4413      	add	r3, r2
 80009de:	83bb      	strh	r3, [r7, #28]
    remaining -= toWrite;
 80009e0:	8bfa      	ldrh	r2, [r7, #30]
 80009e2:	8afb      	ldrh	r3, [r7, #22]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	83fb      	strh	r3, [r7, #30]

    // 如果正好写满，则置标志可用
    if (rb->writePos[bufIdx] >= rb->bufferSize) {
 80009e8:	7efb      	ldrb	r3, [r7, #27]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	3304      	adds	r3, #4
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	885a      	ldrh	r2, [r3, #2]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	891b      	ldrh	r3, [r3, #8]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d304      	bcc.n	8000a06 <RB_Write+0xea>
      rb->bufFullFlag[bufIdx] = 1;
 80009fc:	7efb      	ldrb	r3, [r7, #27]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	74da      	strb	r2, [r3, #19]
  while (remaining > 0) {
 8000a06:	8bfb      	ldrh	r3, [r7, #30]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d19f      	bne.n	800094c <RB_Write+0x30>
    }
  }

  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <RB_Read>:

size_t RB_Read(RingBuffer *rb, uint8_t *outBuf, size_t len) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80fb      	strh	r3, [r7, #6]
  if (!rb || !outBuf || len == 0) return 0;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <RB_Read+0x20>
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <RB_Read+0x20>
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <RB_Read+0x24>
 8000a36:	2300      	movs	r3, #0
 8000a38:	e05e      	b.n	8000af8 <RB_Read+0xe2>

  uint8_t bufIdx = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	7c9b      	ldrb	r3, [r3, #18]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	bfb8      	it	lt
 8000a48:	425b      	neglt	r3, r3
 8000a4a:	75fb      	strb	r3, [r7, #23]
  size_t available = rb->writePos[bufIdx] - rb->readPos[bufIdx];
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	885a      	ldrh	r2, [r3, #2]
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	68f9      	ldr	r1, [r7, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	440b      	add	r3, r1
 8000a62:	88db      	ldrh	r3, [r3, #6]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	82bb      	strh	r3, [r7, #20]
  size_t toRead = (len < available) ? len : available;
 8000a68:	8aba      	ldrh	r2, [r7, #20]
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	bf28      	it	cs
 8000a70:	4613      	movcs	r3, r2
 8000a72:	827b      	strh	r3, [r7, #18]

  memcpy(outBuf, rb->buffers[bufIdx] + rb->readPos[bufIdx], toRead);
 8000a74:	7dfa      	ldrb	r2, [r7, #23]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	3304      	adds	r3, #4
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	440b      	add	r3, r1
 8000a86:	88db      	ldrh	r3, [r3, #6]
 8000a88:	4413      	add	r3, r2
 8000a8a:	8a7a      	ldrh	r2, [r7, #18]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	68b8      	ldr	r0, [r7, #8]
 8000a90:	f019 f945 	bl	8019d1e <memcpy>
  rb->readPos[bufIdx] += toRead;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	88d9      	ldrh	r1, [r3, #6]
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
 8000aa2:	8a7a      	ldrh	r2, [r7, #18]
 8000aa4:	440a      	add	r2, r1
 8000aa6:	b291      	uxth	r1, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	80da      	strh	r2, [r3, #6]

  if (rb->readPos[bufIdx] >= rb->writePos[bufIdx]) {
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	88da      	ldrh	r2, [r3, #6]
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	68f9      	ldr	r1, [r7, #12]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	440b      	add	r3, r1
 8000aca:	885b      	ldrh	r3, [r3, #2]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d312      	bcc.n	8000af6 <RB_Read+0xe0>
    rb->readPos[bufIdx] = 0;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	80da      	strh	r2, [r3, #6]
    rb->writePos[bufIdx] = 0;
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	805a      	strh	r2, [r3, #2]
    rb->bufFullFlag[bufIdx] = 0;  // 清除满标志
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	74da      	strb	r2, [r3, #19]
  }

  return toRead;
 8000af6:	8a7b      	ldrh	r3, [r7, #18]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <RB_SwitchBuffer>:

void RB_SwitchBuffer(RingBuffer *rb) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  rb->activeBuf = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7c9b      	ldrb	r3, [r3, #18]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	bfb8      	it	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	749a      	strb	r2, [r3, #18]
  rb->writePos[rb->activeBuf] = 0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7c9b      	ldrb	r3, [r3, #18]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	3304      	adds	r3, #4
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	805a      	strh	r2, [r3, #2]
  rb->readPos[rb->activeBuf] = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7c9b      	ldrb	r3, [r3, #18]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	80da      	strh	r2, [r3, #6]
  rb->bufFullFlag[rb->activeBuf] = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7c9b      	ldrb	r3, [r3, #18]
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	74da      	strb	r2, [r3, #19]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <RB_IsBufferFull>:
size_t RB_GetDataLength(const RingBuffer *rb, uint8_t bufIndex) {
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
  return rb->writePos[bufIndex] - rb->readPos[bufIndex];
}

int RB_IsBufferFull(const RingBuffer *rb, uint8_t bufIndex) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <RB_IsBufferFull+0x18>
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d901      	bls.n	8000b74 <RB_IsBufferFull+0x1c>
 8000b70:	2300      	movs	r3, #0
 8000b72:	e003      	b.n	8000b7c <RB_IsBufferFull+0x24>
  return rb->bufFullFlag[bufIndex];
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	7cdb      	ldrb	r3, [r3, #19]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <RB_ClearBufferFlag>:

void RB_ClearBufferFlag(RingBuffer *rb, uint8_t bufIndex) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <RB_ClearBufferFlag+0x24>
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d805      	bhi.n	8000bac <RB_ClearBufferFlag+0x24>
  rb->bufFullFlag[bufIndex] = 0;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	74da      	strb	r2, [r3, #19]
 8000baa:	e000      	b.n	8000bae <RB_ClearBufferFlag+0x26>
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8000bac:	bf00      	nop
}
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <rb_init>:

#include "gnss_parser.h"

// --- 循环缓冲区实现 ---

void rb_init(ring_buffer_t *rb, uint8_t *buffer, size_t size) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
  rb->head = 0;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  rb->tail = 0;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <rb_read_byte>:
  rb->head = next_head;
  return true;
}

// 供解析器任务调用，从缓冲区读取数据
bool rb_read_byte(ring_buffer_t *rb, uint8_t *byte) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  if (rb->head == rb->tail) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d101      	bne.n	8000c02 <rb_read_byte+0x1a>
    // 缓冲区为空
    return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e014      	b.n	8000c2c <rb_read_byte+0x44>
  }
  *byte = rb->buffer[rb->tail];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
  rb->tail = (rb->tail + 1) % rb->size;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	6852      	ldr	r2, [r2, #4]
 8000c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c20:	fb01 f202 	mul.w	r2, r1, r2
 8000c24:	1a9a      	subs	r2, r3, r2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60da      	str	r2, [r3, #12]
  return true;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <calculate_crc32>:
    0x2d02ef8dUL};



uint32_t calculate_crc32(uint8_t *szBuf, uint16_t iSize)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
 int iIndex;
 uint32_t ulCRC = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 for (iIndex=0; iIndex<iSize; iIndex++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e011      	b.n	8000c72 <calculate_crc32+0x3a>
 {
 ulCRC = CrcTable32[(ulCRC ^ szBuf[iIndex]) & 0xff] ^ (ulCRC >> 8);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <calculate_crc32+0x50>)
 8000c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	4053      	eors	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
 for (iIndex=0; iIndex<iSize; iIndex++)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dbe9      	blt.n	8000c4e <calculate_crc32+0x16>
 }
 return ulCRC;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	0801aaac 	.word	0x0801aaac

08000c8c <gnss_parser_init>:

// --- 解析器实现 ---
// g_gnss_rb

void gnss_parser_init(gnss_parser_t *parser, ring_buffer_t *rb,
                      gnss_message_handler_t handler) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  parser->rb = rb;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	601a      	str	r2, [r3, #0]
  parser->handler = handler;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
  parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	711a      	strb	r2, [r3, #4]
  parser->bytes_read = 0;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
  parser->payload_length = 0;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <gnss_parser_process>:

// 这是解析器的核心，在后台任务中被循环调用
void gnss_parser_process(gnss_parser_t *parser) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint8_t byte;

  // 持续处理缓冲区中的所有数据，直到为空
  while (rb_read_byte(parser->rb, &byte)) {
 8000cd0:	e109      	b.n	8000ee6 <gnss_parser_process+0x21e>
    switch (parser->state) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	f200 8105 	bhi.w	8000ee6 <gnss_parser_process+0x21e>
 8000cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <gnss_parser_process+0x1c>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000d01 	.word	0x08000d01
 8000ce8:	08000d1f 	.word	0x08000d1f
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d67 	.word	0x08000d67
 8000cf4:	08000db1 	.word	0x08000db1
 8000cf8:	08000e0f 	.word	0x08000e0f
 8000cfc:	08000e45 	.word	0x08000e45
      case PARSER_STATE_WAIT_SYNC_1:
        if (byte == GNSS_SYNC_BYTE_1) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2baa      	cmp	r3, #170	@ 0xaa
 8000d04:	f040 80e6 	bne.w	8000ed4 <gnss_parser_process+0x20c>
          parser->msg_buffer[0] = byte;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	731a      	strb	r2, [r3, #12]
          parser->bytes_read = 1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_2;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000d1c:	e0da      	b.n	8000ed4 <gnss_parser_process+0x20c>

      case PARSER_STATE_WAIT_SYNC_2:
        if (byte == GNSS_SYNC_BYTE_2) {
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2b44      	cmp	r3, #68	@ 0x44
 8000d22:	d10a      	bne.n	8000d3a <gnss_parser_process+0x72>
          parser->msg_buffer[1] = byte;
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	735a      	strb	r2, [r3, #13]
          parser->bytes_read = 2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_3;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2202      	movs	r2, #2
 8000d36:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 8000d38:	e0d5      	b.n	8000ee6 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	711a      	strb	r2, [r3, #4]
        break;
 8000d40:	e0d1      	b.n	8000ee6 <gnss_parser_process+0x21e>

      case PARSER_STATE_WAIT_SYNC_3:
        if (byte == GNSS_SYNC_BYTE_3) {
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2bb5      	cmp	r3, #181	@ 0xb5
 8000d46:	d10a      	bne.n	8000d5e <gnss_parser_process+0x96>
          parser->msg_buffer[2] = byte;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	739a      	strb	r2, [r3, #14]
          parser->bytes_read = 3;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_READ_MSG_ID;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 8000d5c:	e0c3      	b.n	8000ee6 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	711a      	strb	r2, [r3, #4]
        break;
 8000d64:	e0bf      	b.n	8000ee6 <gnss_parser_process+0x21e>

      case PARSER_STATE_READ_MSG_ID:

        parser->msg_buffer[parser->bytes_read++] = byte;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	b291      	uxth	r1, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000d76:	4619      	mov	r1, r3
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_MSG_ID_OFFSET + GNSS_MSG_ID_SIZE) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	f040 80a6 	bne.w	8000ed8 <gnss_parser_process+0x210>
          // 消息ID是小端格式
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7c5b      	ldrb	r3, [r3, #17]
                               << 8 |
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
                           parser->msg_buffer[GNSS_MSG_ID_OFFSET];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7c1b      	ldrb	r3, [r3, #16]
 8000d9a:	b21b      	sxth	r3, r3
                               << 8 |
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	b29a      	uxth	r2, r3
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          parser->state = PARSER_STATE_READ_LENGTH;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000dae:	e093      	b.n	8000ed8 <gnss_parser_process+0x210>

      case PARSER_STATE_READ_LENGTH:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	b291      	uxth	r1, r2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	440b      	add	r3, r1
 8000dc8:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_LENGTH_OFFSET + GNSS_LENGTH_SIZE) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	f040 8083 	bne.w	8000edc <gnss_parser_process+0x214>
          // 长度是小端格式
          parser->payload_length =
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7cdb      	ldrb	r3, [r3, #19]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
              parser->msg_buffer[GNSS_LENGTH_OFFSET];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7c9b      	ldrb	r3, [r3, #18]
 8000de4:	b21b      	sxth	r3, r3
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
          parser->payload_length =
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
          if (parser->payload_length > GNSS_MAX_PAYLOAD_SIZE) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dfc:	d903      	bls.n	8000e06 <gnss_parser_process+0x13e>
            // 载荷过长，可能是错误的数据帧，复位状态机
            parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	711a      	strb	r2, [r3, #4]
          } else {
            parser->state = PARSER_STATE_READ_PAYLOAD;
          }
        }
        break;
 8000e04:	e06a      	b.n	8000edc <gnss_parser_process+0x214>
            parser->state = PARSER_STATE_READ_PAYLOAD;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	711a      	strb	r2, [r3, #4]
        break;
 8000e0c:	e066      	b.n	8000edc <gnss_parser_process+0x214>

      case PARSER_STATE_READ_PAYLOAD:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	b291      	uxth	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000e1e:	4619      	mov	r1, r3
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	440b      	add	r3, r1
 8000e26:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e2e:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e36:	3318      	adds	r3, #24
        if (parser->bytes_read ==
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d151      	bne.n	8000ee0 <gnss_parser_process+0x218>
          parser->state = PARSER_STATE_READ_CRC;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2206      	movs	r2, #6
 8000e40:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000e42:	e04d      	b.n	8000ee0 <gnss_parser_process+0x218>

      case PARSER_STATE_READ_CRC:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	b291      	uxth	r1, r2
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000e54:	4619      	mov	r1, r3
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e64:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length + GNSS_CRC_SIZE) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e6c:	331c      	adds	r3, #28
        if (parser->bytes_read ==
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d138      	bne.n	8000ee4 <gnss_parser_process+0x21c>
          // --- 消息接收完整，开始校验 ---
          uint32_t received_crc =
              *(uint32_t *)&parser
                   ->msg_buffer[parser->bytes_read - GNSS_CRC_SIZE];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e78:	3b04      	subs	r3, #4
              *(uint32_t *)&parser
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	3304      	adds	r3, #4
          uint32_t received_crc =
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61fb      	str	r3, [r7, #28]

          // CRC校验的范围是从消息ID开始，到Payload结束
          size_t crc_check_len =
              GNSS_MESSAGE_OFFSET  + parser->payload_length;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e8c:	3318      	adds	r3, #24
          size_t crc_check_len =
 8000e8e:	61bb      	str	r3, [r7, #24]
          uint32_t calculated_crc = calculate_crc32(
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	330c      	adds	r3, #12
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	b292      	uxth	r2, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fecc 	bl	8000c38 <calculate_crc32>
 8000ea0:	6178      	str	r0, [r7, #20]
              &parser->msg_buffer[0], crc_check_len);

          if (received_crc == calculated_crc) {
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d110      	bne.n	8000ecc <gnss_parser_process+0x204>
            // CRC校验成功！调用回调函数处理数据
            if (parser->handler) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00c      	beq.n	8000ecc <gnss_parser_process+0x204>
              const uint8_t *payload_ptr =
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3324      	adds	r3, #36	@ 0x24
 8000eb6:	613b      	str	r3, [r7, #16]
                  &parser->msg_buffer[GNSS_MESSAGE_OFFSET];
              parser->handler(parser->msg_id, payload_ptr,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	f8b2 240e 	ldrh.w	r2, [r2, #1038]	@ 0x40e
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	4798      	blx	r3
                              parser->payload_length);
            }
          }

          // 不论校验成功与否，一帧处理完毕，复位状态机寻找下一帧
          parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000ed2:	e007      	b.n	8000ee4 <gnss_parser_process+0x21c>
        break;
 8000ed4:	bf00      	nop
 8000ed6:	e006      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ee4:	bf00      	nop
  while (rb_read_byte(parser->rb, &byte)) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f107 020f 	add.w	r2, r7, #15
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fe79 	bl	8000be8 <rb_read_byte>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f aeea 	bne.w	8000cd2 <gnss_parser_process+0xa>
    }
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <FatFs_Check>:

//	函数：FatFs_Check
//	功能：进行FatFs文件系统的挂载

void FatFs_Check(void)  // 判断FatFs是否挂载成功，若没有创建FatFs则格式化SD卡
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f0e:	af02      	add	r7, sp, #8
  BYTE work[_MAX_SS];
  uint8_t MyFile_Res;
  //	FATFS_LinkDriver(&SD_Driver, SDPath);	  // 初始化驱动
  MyFile_Res = f_mount(&SDFatFS, (const TCHAR *)SDPath, 1);  //	挂载SD卡
 8000f10:	2201      	movs	r2, #1
 8000f12:	4917      	ldr	r1, [pc, #92]	@ (8000f70 <FatFs_Check+0x68>)
 8000f14:	4817      	ldr	r0, [pc, #92]	@ (8000f74 <FatFs_Check+0x6c>)
 8000f16:	f012 f9a3 	bl	8013260 <f_mount>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207

  if (MyFile_Res == FR_OK)  // 判断是否挂载成功
 8000f20:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <FatFs_Check+0x28>
  {
    // f_setlabel("UFO");
    printf("\r\nSD文件系统挂载成功\r\n");
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <FatFs_Check+0x70>)
 8000f2a:	f018 fd3f 	bl	80199ac <puts>
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
      printf("SD卡格式化成功！\r\n");
    else
      printf("格式化失败，请检查或更换SD卡！\r\n");
  }
}
 8000f2e:	e019      	b.n	8000f64 <FatFs_Check+0x5c>
    printf("SD卡还未创建文件系统，即将格式化\r\n");
 8000f30:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <FatFs_Check+0x74>)
 8000f32:	f018 fd3b 	bl	80199ac <puts>
    MyFile_Res = f_mkfs("0:", FM_FAT32, 0, work,
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2102      	movs	r1, #2
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <FatFs_Check+0x78>)
 8000f44:	f012 fffc 	bl	8013f40 <f_mkfs>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
 8000f4e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <FatFs_Check+0x56>
      printf("SD卡格式化成功！\r\n");
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <FatFs_Check+0x7c>)
 8000f58:	f018 fd28 	bl	80199ac <puts>
}
 8000f5c:	e002      	b.n	8000f64 <FatFs_Check+0x5c>
      printf("格式化失败，请检查或更换SD卡！\r\n");
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <FatFs_Check+0x80>)
 8000f60:	f018 fd24 	bl	80199ac <puts>
}
 8000f64:	bf00      	nop
 8000f66:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	24001984 	.word	0x24001984
 8000f74:	24001988 	.word	0x24001988
 8000f78:	0801a760 	.word	0x0801a760
 8000f7c:	0801a780 	.word	0x0801a780
 8000f80:	0801a7b4 	.word	0x0801a7b4
 8000f84:	0801a7b8 	.word	0x0801a7b8
 8000f88:	0801a7d4 	.word	0x0801a7d4

08000f8c <SDCardTaskFunc>:
    return -1;
  }
  return 0;
}

int16_t SDCardTaskFunc(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8000f92:	af00      	add	r7, sp, #0
  static uint8_t FullBufferIndex = 0;  // 0表示都不满，1-2分别表示两段满
  static uint8_t WriteToSdData[SDLength];
  static uint16_t bufferDataLength;

  // 初始化内存池
  if (RB_Init(&rb, ToSDdataPool, SDLength) != 0) {
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	4940      	ldr	r1, [pc, #256]	@ (800109c <SDCardTaskFunc+0x110>)
 8000f9a:	4841      	ldr	r0, [pc, #260]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000f9c:	f7ff fc72 	bl	8000884 <RB_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <SDCardTaskFunc+0x26>
    printf("RingBuffer 初始化失败！\n");
 8000fa6:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <SDCardTaskFunc+0x118>)
 8000fa8:	f018 fd00 	bl	80199ac <puts>
    return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	e06e      	b.n	8001090 <SDCardTaskFunc+0x104>
  }

  MyFile_Res = f_open(
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	493b      	ldr	r1, [pc, #236]	@ (80010a8 <SDCardTaskFunc+0x11c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f012 f9b4 	bl	8013328 <f_open>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
      &MyFile, "IMUNewData.txt",
      FA_CREATE_ALWAYS | FA_WRITE);  // 打开文件，若不存在,则在sd卡中，创建文件

  if (MyFile_Res == FR_OK) {
 8000fc6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d15b      	bne.n	8001086 <SDCardTaskFunc+0xfa>
    printf("文件打开/创建成功，准备写入数据...\r\n");
 8000fce:	4837      	ldr	r0, [pc, #220]	@ (80010ac <SDCardTaskFunc+0x120>)
 8000fd0:	f018 fcec 	bl	80199ac <puts>

    while (1) {
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 8000fd4:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <SDCardTaskFunc+0x124>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	4935      	ldr	r1, [pc, #212]	@ (80010b4 <SDCardTaskFunc+0x128>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f015 fafc 	bl	80165dc <xQueueReceive>
      FileWriteBufferPoint = (uint8_t *)&MsgSD;
 8000fe4:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <SDCardTaskFunc+0x128>)
 8000fe6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
      RB_Write(&rb, FileWriteBufferPoint, sizeof(MsgIMU_t));
 8000fea:	2231      	movs	r2, #49	@ 0x31
 8000fec:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8000ff0:	482b      	ldr	r0, [pc, #172]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000ff2:	f7ff fc93 	bl	800091c <RB_Write>

      if (RB_IsBufferFull(&rb, 0)) {
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4829      	ldr	r0, [pc, #164]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000ffa:	f7ff fdad 	bl	8000b58 <RB_IsBufferFull>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <SDCardTaskFunc+0x80>
        FullBufferIndex = 1;
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e009      	b.n	8001020 <SDCardTaskFunc+0x94>
      }

      else if (RB_IsBufferFull(&rb, 1)) {
 800100c:	2101      	movs	r1, #1
 800100e:	4824      	ldr	r0, [pc, #144]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8001010:	f7ff fda2 	bl	8000b58 <RB_IsBufferFull>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SDCardTaskFunc+0x94>
        FullBufferIndex = 2;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
      }

      else {
      }

      if (FullBufferIndex) {
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0d5      	beq.n	8000fd4 <SDCardTaskFunc+0x48>
        bufferDataLength = RB_Read(&rb, WriteToSdData, SDLength);
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	4923      	ldr	r1, [pc, #140]	@ (80010bc <SDCardTaskFunc+0x130>)
 800102e:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8001030:	f7ff fcf1 	bl	8000a16 <RB_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <SDCardTaskFunc+0x134>)
 800103a:	801a      	strh	r2, [r3, #0]
        if (bufferDataLength > 0) {
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <SDCardTaskFunc+0x134>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <SDCardTaskFunc+0xe2>
          MyFile_Res =
              f_write(&MyFile, WriteToSdData, bufferDataLength, &MyFile_Num);
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <SDCardTaskFunc+0x134>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	f107 0008 	add.w	r0, r7, #8
 8001050:	491a      	ldr	r1, [pc, #104]	@ (80010bc <SDCardTaskFunc+0x130>)
 8001052:	f012 fc4f 	bl	80138f4 <f_write>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267

          f_sync(&MyFile);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4618      	mov	r0, r3
 8001062:	f012 fe2a 	bl	8013cba <f_sync>
          HAL_GPIO_TogglePin(SDLEDGPIOx, SDLEDPINx);
 8001066:	2110      	movs	r1, #16
 8001068:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <SDCardTaskFunc+0x138>)
 800106a:	f004 ff12 	bl	8005e92 <HAL_GPIO_TogglePin>
        } else {
        }

        RB_ClearBufferFlag(&rb, FullBufferIndex - 1);  // 清除标志
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <SDCardTaskFunc+0x114>)
 800107a:	f7ff fd85 	bl	8000b88 <RB_ClearBufferFlag>
        FullBufferIndex = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 8001084:	e7a6      	b.n	8000fd4 <SDCardTaskFunc+0x48>

    f_close(&MyFile);  // 关闭文件
  }

  else {
    printf("文件打开/创建失败...\r\n");
 8001086:	4810      	ldr	r0, [pc, #64]	@ (80010c8 <SDCardTaskFunc+0x13c>)
 8001088:	f018 fc90 	bl	80199ac <puts>
    return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
  }
  return 0;
}
 8001090:	4618      	mov	r0, r3
 8001092:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240000c0 	.word	0x240000c0
 80010a0:	240000a8 	.word	0x240000a8
 80010a4:	0801a8cc 	.word	0x0801a8cc
 80010a8:	0801a8ec 	.word	0x0801a8ec
 80010ac:	0801a878 	.word	0x0801a878
 80010b0:	24001324 	.word	0x24001324
 80010b4:	240004c0 	.word	0x240004c0
 80010b8:	240004f1 	.word	0x240004f1
 80010bc:	240004f4 	.word	0x240004f4
 80010c0:	240006f4 	.word	0x240006f4
 80010c4:	58021000 	.word	0x58021000
 80010c8:	0801a8ac 	.word	0x0801a8ac

080010cc <UM960SamplingTaskFunc>:
TaskHandle_t UM960samplingTaskNotifyHandle = NULL;

// 2. 定义队列句柄
QueueHandle_t gnss_data_queue = NULL;

void UM960SamplingTaskFunc(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  UM960samplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 80010d0:	f016 fe12 	bl	8017cf8 <xTaskGetCurrentTaskHandle>
 80010d4:	4603      	mov	r3, r0
  UM960samplingTaskNotifyHandle =
 80010d6:	4a38      	ldr	r2, [pc, #224]	@ (80011b8 <UM960SamplingTaskFunc+0xec>)
 80010d8:	6013      	str	r3, [r2, #0]

  rb_init(&g_gnss_rb, gnss_rx_buffer, RING_BUFFER_SIZE);
 80010da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010de:	4937      	ldr	r1, [pc, #220]	@ (80011bc <UM960SamplingTaskFunc+0xf0>)
 80010e0:	4837      	ldr	r0, [pc, #220]	@ (80011c0 <UM960SamplingTaskFunc+0xf4>)
 80010e2:	f7ff fd69 	bl	8000bb8 <rb_init>
  gnss_parser_init(&g_gnss_parser, &g_gnss_rb, my_gnss_message_handler);
 80010e6:	4a37      	ldr	r2, [pc, #220]	@ (80011c4 <UM960SamplingTaskFunc+0xf8>)
 80010e8:	4935      	ldr	r1, [pc, #212]	@ (80011c0 <UM960SamplingTaskFunc+0xf4>)
 80010ea:	4837      	ldr	r0, [pc, #220]	@ (80011c8 <UM960SamplingTaskFunc+0xfc>)
 80010ec:	f7ff fdce 	bl	8000c8c <gnss_parser_init>

  // b. 任务主循环
  for (;;) {
    // 调用解析器，它会处理缓冲区中所有的新数据
    g_gnss_rb.head =
        g_gnss_rb.size - __HAL_DMA_GET_COUNTER(&GNSSUSART_RX);  // 更新头指针
 80010f0:	4b33      	ldr	r3, [pc, #204]	@ (80011c0 <UM960SamplingTaskFunc+0xf4>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4935      	ldr	r1, [pc, #212]	@ (80011d0 <UM960SamplingTaskFunc+0x104>)
 80010fa:	428b      	cmp	r3, r1
 80010fc:	d04a      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4934      	ldr	r1, [pc, #208]	@ (80011d4 <UM960SamplingTaskFunc+0x108>)
 8001104:	428b      	cmp	r3, r1
 8001106:	d045      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4932      	ldr	r1, [pc, #200]	@ (80011d8 <UM960SamplingTaskFunc+0x10c>)
 800110e:	428b      	cmp	r3, r1
 8001110:	d040      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001112:	4b2e      	ldr	r3, [pc, #184]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4931      	ldr	r1, [pc, #196]	@ (80011dc <UM960SamplingTaskFunc+0x110>)
 8001118:	428b      	cmp	r3, r1
 800111a:	d03b      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	492f      	ldr	r1, [pc, #188]	@ (80011e0 <UM960SamplingTaskFunc+0x114>)
 8001122:	428b      	cmp	r3, r1
 8001124:	d036      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	492e      	ldr	r1, [pc, #184]	@ (80011e4 <UM960SamplingTaskFunc+0x118>)
 800112c:	428b      	cmp	r3, r1
 800112e:	d031      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	492c      	ldr	r1, [pc, #176]	@ (80011e8 <UM960SamplingTaskFunc+0x11c>)
 8001136:	428b      	cmp	r3, r1
 8001138:	d02c      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	492b      	ldr	r1, [pc, #172]	@ (80011ec <UM960SamplingTaskFunc+0x120>)
 8001140:	428b      	cmp	r3, r1
 8001142:	d027      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4929      	ldr	r1, [pc, #164]	@ (80011f0 <UM960SamplingTaskFunc+0x124>)
 800114a:	428b      	cmp	r3, r1
 800114c:	d022      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4928      	ldr	r1, [pc, #160]	@ (80011f4 <UM960SamplingTaskFunc+0x128>)
 8001154:	428b      	cmp	r3, r1
 8001156:	d01d      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4926      	ldr	r1, [pc, #152]	@ (80011f8 <UM960SamplingTaskFunc+0x12c>)
 800115e:	428b      	cmp	r3, r1
 8001160:	d018      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4925      	ldr	r1, [pc, #148]	@ (80011fc <UM960SamplingTaskFunc+0x130>)
 8001168:	428b      	cmp	r3, r1
 800116a:	d013      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4923      	ldr	r1, [pc, #140]	@ (8001200 <UM960SamplingTaskFunc+0x134>)
 8001172:	428b      	cmp	r3, r1
 8001174:	d00e      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4922      	ldr	r1, [pc, #136]	@ (8001204 <UM960SamplingTaskFunc+0x138>)
 800117c:	428b      	cmp	r3, r1
 800117e:	d009      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4920      	ldr	r1, [pc, #128]	@ (8001208 <UM960SamplingTaskFunc+0x13c>)
 8001186:	428b      	cmp	r3, r1
 8001188:	d004      	beq.n	8001194 <UM960SamplingTaskFunc+0xc8>
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	491f      	ldr	r1, [pc, #124]	@ (800120c <UM960SamplingTaskFunc+0x140>)
 8001190:	428b      	cmp	r3, r1
 8001192:	d103      	bne.n	800119c <UM960SamplingTaskFunc+0xd0>
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	e002      	b.n	80011a2 <UM960SamplingTaskFunc+0xd6>
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <UM960SamplingTaskFunc+0x100>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	1ad3      	subs	r3, r2, r3
    g_gnss_rb.head =
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <UM960SamplingTaskFunc+0xf4>)
 80011a6:	6093      	str	r3, [r2, #8]
    gnss_parser_process(&g_gnss_parser);
 80011a8:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <UM960SamplingTaskFunc+0xfc>)
 80011aa:	f7ff fd8d 	bl	8000cc8 <gnss_parser_process>

    // 让出CPU，避免空转。
    // 10ms的延时意味着任务每秒最多轮询100次。
    osDelay(10);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f014 fab7 	bl	8015722 <osDelay>
    g_gnss_rb.head =
 80011b4:	e79c      	b.n	80010f0 <UM960SamplingTaskFunc+0x24>
 80011b6:	bf00      	nop
 80011b8:	2400131c 	.word	0x2400131c
 80011bc:	240006f8 	.word	0x240006f8
 80011c0:	24000ef8 	.word	0x24000ef8
 80011c4:	08001211 	.word	0x08001211
 80011c8:	24000f08 	.word	0x24000f08
 80011cc:	2400188c 	.word	0x2400188c
 80011d0:	40020010 	.word	0x40020010
 80011d4:	40020028 	.word	0x40020028
 80011d8:	40020040 	.word	0x40020040
 80011dc:	40020058 	.word	0x40020058
 80011e0:	40020070 	.word	0x40020070
 80011e4:	40020088 	.word	0x40020088
 80011e8:	400200a0 	.word	0x400200a0
 80011ec:	400200b8 	.word	0x400200b8
 80011f0:	40020410 	.word	0x40020410
 80011f4:	40020428 	.word	0x40020428
 80011f8:	40020440 	.word	0x40020440
 80011fc:	40020458 	.word	0x40020458
 8001200:	40020470 	.word	0x40020470
 8001204:	40020488 	.word	0x40020488
 8001208:	400204a0 	.word	0x400204a0
 800120c:	400204b8 	.word	0x400204b8

08001210 <my_gnss_message_handler>:
  }
}

// length 数据长度
void my_gnss_message_handler(uint16_t msg_id, const uint8_t* payload,
                             uint16_t length) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	80bb      	strh	r3, [r7, #4]
  // 根据消息ID来解析不同的消息
  switch (msg_id) {
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	f640 0246 	movw	r2, #2118	@ 0x846
 8001226:	4293      	cmp	r3, r2
 8001228:	d132      	bne.n	8001290 <my_gnss_message_handler+0x80>
    case 0x0846:  // 假设这是BESTPOSA消息的ID
      if (length == sizeof(bestnav_t)) {
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	2b78      	cmp	r3, #120	@ 0x78
 800122e:	d131      	bne.n	8001294 <my_gnss_message_handler+0x84>
        const bestnav_t* nav = (const bestnav_t*)payload;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	60fb      	str	r3, [r7, #12]
        // 在这里使用解析出的数据，例如打印或更新全局变量
        // 打印一些关键信息进行验证
        HAL_GPIO_TogglePin(gnss_parser_LEDGPIOx, gnss_parser_LEDGPINx);
 8001234:	2120      	movs	r1, #32
 8001236:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <my_gnss_message_handler+0x90>)
 8001238:	f004 fe2b 	bl	8005e92 <HAL_GPIO_TogglePin>
        printf("--- BESTNAV Received ---\n");
 800123c:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <my_gnss_message_handler+0x94>)
 800123e:	f018 fbb5 	bl	80199ac <puts>
        printf("  Position Type: %u\n", (unsigned int)nav->pos_type);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4619      	mov	r1, r3
 8001248:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <my_gnss_message_handler+0x98>)
 800124a:	f018 fb47 	bl	80198dc <iprintf>
        printf("  Latitude:  %.8f\n", nav->lat);
 800124e:	68f9      	ldr	r1, [r7, #12]
 8001250:	688a      	ldr	r2, [r1, #8]
 8001252:	68cb      	ldr	r3, [r1, #12]
 8001254:	4815      	ldr	r0, [pc, #84]	@ (80012ac <my_gnss_message_handler+0x9c>)
 8001256:	f018 fb41 	bl	80198dc <iprintf>
        printf("  Longitude: %.8f\n", nav->lon);
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	690a      	ldr	r2, [r1, #16]
 800125e:	694b      	ldr	r3, [r1, #20]
 8001260:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <my_gnss_message_handler+0xa0>)
 8001262:	f018 fb3b 	bl	80198dc <iprintf>
        printf("  Height:    %.4f m\n", nav->hgt);
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	698a      	ldr	r2, [r1, #24]
 800126a:	69cb      	ldr	r3, [r1, #28]
 800126c:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <my_gnss_message_handler+0xa4>)
 800126e:	f018 fb35 	bl	80198dc <iprintf>
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001278:	4619      	mov	r1, r3
               nav->svs_in_sol);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 8001280:	461a      	mov	r2, r3
 8001282:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <my_gnss_message_handler+0xa8>)
 8001284:	f018 fb2a 	bl	80198dc <iprintf>
        printf("--------------------------\n\n");
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <my_gnss_message_handler+0xac>)
 800128a:	f018 fb8f 	bl	80199ac <puts>
      }
      break;
 800128e:	e001      	b.n	8001294 <my_gnss_message_handler+0x84>
      // case 0x...: // 处理其他您关心的消息
      //     break;

    default:
      // 不关心的消息可以忽略
      break;
 8001290:	bf00      	nop
 8001292:	e000      	b.n	8001296 <my_gnss_message_handler+0x86>
      break;
 8001294:	bf00      	nop
  }
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	58021000 	.word	0x58021000
 80012a4:	0801a8fc 	.word	0x0801a8fc
 80012a8:	0801a918 	.word	0x0801a918
 80012ac:	0801a930 	.word	0x0801a930
 80012b0:	0801a944 	.word	0x0801a944
 80012b4:	0801a958 	.word	0x0801a958
 80012b8:	0801a970 	.word	0x0801a970
 80012bc:	0801a998 	.word	0x0801a998

080012c0 <GNSSInit>:

int16_t GNSSInit(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&GNSSUartFx, gnss_rx_buffer,
 80012c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012c8:	4903      	ldr	r1, [pc, #12]	@ (80012d8 <GNSSInit+0x18>)
 80012ca:	4804      	ldr	r0, [pc, #16]	@ (80012dc <GNSSInit+0x1c>)
 80012cc:	f00b fd82 	bl	800cdd4 <HAL_UART_Receive_DMA>
                       RING_BUFFER_SIZE);  // 启动 DMA 循环接收
  //__HAL_UART_ENABLE_IT(&GNSSUartFx, UART_IT_IDLE);
  // 开启空闲中断,循环解析的，中断不需要了

  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	240006f8 	.word	0x240006f8
 80012dc:	24001690 	.word	0x24001690

080012e0 <imuDataDealTaskFunc>:

QueueHandle_t IMUDataToSDTaskQueue = NULL;  // 创建队列来完成数据的传输;

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size);

void imuDataDealTaskFunc(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
  IMUOrigData_t IMU_DatatoSD;

  /* Infinite loop */
  for (;;) {
    static MsgIMU_t msg = {0};
    xQueueReceive(xIMUDataQueue, &IMU_DatatoSD, portMAX_DELAY);
 80012e6:	4b3e      	ldr	r3, [pc, #248]	@ (80013e0 <imuDataDealTaskFunc+0x100>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4639      	mov	r1, r7
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	4618      	mov	r0, r3
 80012f2:	f015 f973 	bl	80165dc <xQueueReceive>
    msg.hdr.sync1 = 0xAA;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80012f8:	22aa      	movs	r2, #170	@ 0xaa
 80012fa:	701a      	strb	r2, [r3, #0]
    msg.hdr.sync2 = 0x44;
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80012fe:	2244      	movs	r2, #68	@ 0x44
 8001300:	705a      	strb	r2, [r3, #1]
    msg.hdr.sync3 = 0x55;
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001304:	2255      	movs	r2, #85	@ 0x55
 8001306:	709a      	strb	r2, [r3, #2]
    msg.hdr.cpuIdle = 0;
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800130a:	2200      	movs	r2, #0
 800130c:	70da      	strb	r2, [r3, #3]
    msg.hdr.msgID = 1;
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001310:	2201      	movs	r2, #1
 8001312:	809a      	strh	r2, [r3, #4]
    msg.hdr.msgLen = sizeof(MsgIMU_t);
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001316:	2231      	movs	r2, #49	@ 0x31
 8001318:	80da      	strh	r2, [r3, #6]
    msg.hdr.timeRef = 0;
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800131c:	2200      	movs	r2, #0
 800131e:	721a      	strb	r2, [r3, #8]

    msg.hdr.timeStatus = 0;
 8001320:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001322:	2200      	movs	r2, #0
 8001324:	725a      	strb	r2, [r3, #9]
    msg.hdr.time = IMU_DatatoSD.sec;
 8001326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800132a:	492e      	ldr	r1, [pc, #184]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800132c:	3110      	adds	r1, #16
 800132e:	3906      	subs	r1, #6
 8001330:	600a      	str	r2, [r1, #0]
 8001332:	604b      	str	r3, [r1, #4]
    msg.hdr.sec = IMU_DatatoSD._50us;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001338:	f8c3 2012 	str.w	r2, [r3, #18]
    msg.hdr.version = 0;
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800133e:	2200      	movs	r2, #0
 8001340:	769a      	strb	r2, [r3, #26]
    msg.hdr.leapSec = 0;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001344:	2200      	movs	r2, #0
 8001346:	76da      	strb	r2, [r3, #27]
    msg.hdr.delayMs = 0;
 8001348:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800134a:	2200      	movs	r2, #0
 800134c:	839a      	strh	r2, [r3, #28]

    msg.body.sensor = 0;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001350:	2200      	movs	r2, #0
 8001352:	779a      	strb	r2, [r3, #30]
    msg.body.sensitivity = (asm_config.g_fs << 8) | asm_config.xl_fs;
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <imuDataDealTaskFunc+0x108>)
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	b21b      	sxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <imuDataDealTaskFunc+0x108>)
 8001360:	789b      	ldrb	r3, [r3, #2]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800136c:	f8a3 201f 	strh.w	r2, [r3, #31]

    msg.body.gyro[0] = IMU_DatatoSD.gyro[0];
 8001370:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001376:	f8a3 2021 	strh.w	r2, [r3, #33]	@ 0x21
    msg.body.gyro[1] = IMU_DatatoSD.gyro[1];
 800137a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001380:	f8a3 2023 	strh.w	r2, [r3, #35]	@ 0x23
    msg.body.gyro[2] = IMU_DatatoSD.gyro[2];
 8001384:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800138a:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25

    msg.body.accel[0] = IMU_DatatoSD.accel[0];
 800138e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 8001394:	f8a3 2027 	strh.w	r2, [r3, #39]	@ 0x27
    msg.body.accel[1] = IMU_DatatoSD.accel[1];
 8001398:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 800139e:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29
    msg.body.accel[2] = IMU_DatatoSD.accel[2];
 80013a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80013a8:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b

    msg.body.crc =
        CalculateCRC32((uint8_t *)&msg, sizeof(msg) - sizeof(msg.body.crc));
 80013ac:	212d      	movs	r1, #45	@ 0x2d
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80013b0:	f000 f820 	bl	80013f4 <CalculateCRC32>
 80013b4:	4603      	mov	r3, r0
    msg.body.crc =
 80013b6:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80013b8:	f8c2 302d 	str.w	r3, [r2, #45]	@ 0x2d

    BaseType_t Xsendresult = xQueueSend(IMUDataToSDTaskQueue, &msg, 0);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <imuDataDealTaskFunc+0x10c>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	2200      	movs	r2, #0
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <imuDataDealTaskFunc+0x104>)
 80013c6:	f014 fed9 	bl	801617c <xQueueGenericSend>
 80013ca:	6278      	str	r0, [r7, #36]	@ 0x24

    if (Xsendresult != pdPASS) {
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <imuDataDealTaskFunc+0xf8>
      printf("datadeal queue full\r\n");
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <imuDataDealTaskFunc+0x110>)
 80013d4:	f018 faea 	bl	80199ac <puts>
    }

    osDelay(5);
 80013d8:	2005      	movs	r0, #5
 80013da:	f014 f9a2 	bl	8015722 <osDelay>
  for (;;) {
 80013de:	e782      	b.n	80012e6 <imuDataDealTaskFunc+0x6>
 80013e0:	24001398 	.word	0x24001398
 80013e4:	24001328 	.word	0x24001328
 80013e8:	24000000 	.word	0x24000000
 80013ec:	24001324 	.word	0x24001324
 80013f0:	0801a9b4 	.word	0x0801a9b4

080013f4 <CalculateCRC32>:
    0xbdbdf21cUL, 0xcabac28aUL, 0x53b39330UL, 0x24b4a3a6UL, 0xbad03605UL,
    0xcdd70693UL, 0x54de5729UL, 0x23d967bfUL, 0xb3667a2eUL, 0xc4614ab8UL,
    0x5d681b02UL, 0x2a6f2b94UL, 0xb40bbe37UL, 0xc30c8ea1UL, 0x5a05df1bUL,
    0x2d02ef8dUL};

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  uint32_t crc = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	e011      	b.n	800142e <CalculateCRC32+0x3a>
    crc = aulCrcTable[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4053      	eors	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <CalculateCRC32+0x50>)
 800141c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	4053      	eors	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	dbe9      	blt.n	800140a <CalculateCRC32+0x16>
  }
  return crc;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	0801aeac 	.word	0x0801aeac

08001448 <IMUSamplingTaskFunc>:
static timestamp_def timestampOrig;  // 时间戳原始数据

QueueHandle_t xIMUDataQueue = NULL;               // 创建队列来完成数据的传输
TaskHandle_t imusamplingTaskNotifyHandle = NULL;  // 创建imu采样线程句柄

int16_t IMUSamplingTaskFunc(void *argument) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6178      	str	r0, [r7, #20]
  imusamplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 8001450:	f016 fc52 	bl	8017cf8 <xTaskGetCurrentTaskHandle>
 8001454:	4603      	mov	r3, r0
  imusamplingTaskNotifyHandle =
 8001456:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <IMUSamplingTaskFunc+0xac>)
 8001458:	6013      	str	r3, [r2, #0]

  static int16_t IMUInitResult;

  IMUInitResult = Imu_Init();
 800145a:	f000 f85f 	bl	800151c <Imu_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <IMUSamplingTaskFunc+0xb0>)
 8001464:	801a      	strh	r2, [r3, #0]

  while (!IMUInitResult) {
 8001466:	e03e      	b.n	80014e6 <IMUSamplingTaskFunc+0x9e>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	2001      	movs	r0, #1
 800146e:	f016 fde1 	bl	8018034 <ulTaskNotifyTake>
    asm330lhh_acceleration_raw_get(&dev_ctx,
 8001472:	4922      	ldr	r1, [pc, #136]	@ (80014fc <IMUSamplingTaskFunc+0xb4>)
 8001474:	4822      	ldr	r0, [pc, #136]	@ (8001500 <IMUSamplingTaskFunc+0xb8>)
 8001476:	f017 ffff 	bl	8019478 <asm330lhh_acceleration_raw_get>
                                   (int16_t *)dmaBuffer);  // 读取加速度计
    asm330lhh_angular_rate_raw_get(&dev_ctx,
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <IMUSamplingTaskFunc+0xbc>)
 800147c:	4619      	mov	r1, r3
 800147e:	4820      	ldr	r0, [pc, #128]	@ (8001500 <IMUSamplingTaskFunc+0xb8>)
 8001480:	f017 ffb2 	bl	80193e8 <asm330lhh_angular_rate_raw_get>
                                   (int16_t *)(dmaBuffer + 6));  // 读取陀螺仪

    memcpy(imuData.accel, dmaBuffer, 6);
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <IMUSamplingTaskFunc+0xc0>)
 8001486:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <IMUSamplingTaskFunc+0xb4>)
 8001488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148c:	6018      	str	r0, [r3, #0]
 800148e:	3304      	adds	r3, #4
 8001490:	8019      	strh	r1, [r3, #0]
    memcpy(imuData.gyro, dmaBuffer + 6, 6);
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <IMUSamplingTaskFunc+0xbc>)
 8001494:	2206      	movs	r2, #6
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	@ (800150c <IMUSamplingTaskFunc+0xc4>)
 800149a:	f018 fc40 	bl	8019d1e <memcpy>

    timestampOrig = GetCurrentTimestamp();
 800149e:	4c1c      	ldr	r4, [pc, #112]	@ (8001510 <IMUSamplingTaskFunc+0xc8>)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f8b4 	bl	8001610 <GetCurrentTimestamp>
 80014a8:	463b      	mov	r3, r7
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    imuData.sec = timestampOrig.sec;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <IMUSamplingTaskFunc+0xc8>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	4914      	ldr	r1, [pc, #80]	@ (8001508 <IMUSamplingTaskFunc+0xc0>)
 80014b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imuData._50us = timestampOrig._50us;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <IMUSamplingTaskFunc+0xc8>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <IMUSamplingTaskFunc+0xc0>)
 80014c2:	6193      	str	r3, [r2, #24]

    BaseType_t Xsendresult = xQueueSend(xIMUDataQueue, &imuData, 0);
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <IMUSamplingTaskFunc+0xcc>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	2200      	movs	r2, #0
 80014cc:	490e      	ldr	r1, [pc, #56]	@ (8001508 <IMUSamplingTaskFunc+0xc0>)
 80014ce:	f014 fe55 	bl	801617c <xQueueGenericSend>
 80014d2:	61f8      	str	r0, [r7, #28]
    if (Xsendresult != pdPASS) {
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d002      	beq.n	80014e0 <IMUSamplingTaskFunc+0x98>
      printf("sampling queue full\r\n");
 80014da:	480f      	ldr	r0, [pc, #60]	@ (8001518 <IMUSamplingTaskFunc+0xd0>)
 80014dc:	f018 fa66 	bl	80199ac <puts>
    }
    osDelay(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f014 f91e 	bl	8015722 <osDelay>
  while (!IMUInitResult) {
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <IMUSamplingTaskFunc+0xb0>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0bb      	beq.n	8001468 <IMUSamplingTaskFunc+0x20>
  }

  for (;;) {
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <IMUSamplingTaskFunc+0xa8>
 80014f4:	2400139c 	.word	0x2400139c
 80014f8:	240013a0 	.word	0x240013a0
 80014fc:	2400135c 	.word	0x2400135c
 8001500:	24000094 	.word	0x24000094
 8001504:	24001362 	.word	0x24001362
 8001508:	24001368 	.word	0x24001368
 800150c:	2400136e 	.word	0x2400136e
 8001510:	24001388 	.word	0x24001388
 8001514:	24001398 	.word	0x24001398
 8001518:	0801a9cc 	.word	0x0801a9cc

0800151c <Imu_Init>:

  return 0;
}

// 初始化，如果有系统的存在，请在系统初始化之前完成初始化
int16_t Imu_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  Asm330_Drive_Init();  // 驱动库初始化代码
 8001522:	f7ff f995 	bl	8000850 <Asm330_Drive_Init>

  // 软件复位
  static uint8_t rst;
  asm330lhh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001526:	2101      	movs	r1, #1
 8001528:	482a      	ldr	r0, [pc, #168]	@ (80015d4 <Imu_Init+0xb8>)
 800152a:	f018 f84a 	bl	80195c2 <asm330lhh_reset_set>
  do {
    asm330lhh_reset_get(&dev_ctx, &rst);
 800152e:	492a      	ldr	r1, [pc, #168]	@ (80015d8 <Imu_Init+0xbc>)
 8001530:	4828      	ldr	r0, [pc, #160]	@ (80015d4 <Imu_Init+0xb8>)
 8001532:	f018 f86c 	bl	801960e <asm330lhh_reset_get>
  } while (rst);
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <Imu_Init+0xbc>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f7      	bne.n	800152e <Imu_Init+0x12>

  /* Start device configuration. */
  asm330lhh_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 800153e:	2101      	movs	r1, #1
 8001540:	4824      	ldr	r0, [pc, #144]	@ (80015d4 <Imu_Init+0xb8>)
 8001542:	f017 ffe1 	bl	8019508 <asm330lhh_device_conf_set>
  /* Enable Block Data Update */
  asm330lhh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001546:	2101      	movs	r1, #1
 8001548:	4822      	ldr	r0, [pc, #136]	@ (80015d4 <Imu_Init+0xb8>)
 800154a:	f017 ff27 	bl	801939c <asm330lhh_block_data_update_set>
  /* Set Output Data Rate */
  asm330lhh_xl_data_rate_set(&dev_ctx, asm_config.xl_odr);
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <Imu_Init+0xc0>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	481f      	ldr	r0, [pc, #124]	@ (80015d4 <Imu_Init+0xb8>)
 8001556:	f017 fea1 	bl	801929c <asm330lhh_xl_data_rate_set>
  asm330lhh_gy_data_rate_set(&dev_ctx, asm_config.g_odr);
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <Imu_Init+0xc0>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	4619      	mov	r1, r3
 8001560:	481c      	ldr	r0, [pc, #112]	@ (80015d4 <Imu_Init+0xb8>)
 8001562:	f017 feee 	bl	8019342 <asm330lhh_gy_data_rate_set>
  /* Set full scale */
  asm330lhh_xl_full_scale_set(&dev_ctx, asm_config.xl_fs);
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <Imu_Init+0xc0>)
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	4619      	mov	r1, r3
 800156c:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <Imu_Init+0xb8>)
 800156e:	f017 fe6f 	bl	8019250 <asm330lhh_xl_full_scale_set>
  asm330lhh_gy_full_scale_set(&dev_ctx, asm_config.g_fs);
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <Imu_Init+0xc0>)
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	4619      	mov	r1, r3
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <Imu_Init+0xb8>)
 800157a:	f017 febc 	bl	80192f6 <asm330lhh_gy_full_scale_set>

  asm330lhh_data_ready_mode_set(&dev_ctx, asm_config.dr_p);
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <Imu_Init+0xc0>)
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	4619      	mov	r1, r3
 8001584:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <Imu_Init+0xb8>)
 8001586:	f017 ffe5 	bl	8019554 <asm330lhh_data_ready_mode_set>

  asm330lhh_pin_int1_route_t route_val = {0};
 800158a:	2300      	movs	r3, #0
 800158c:	80bb      	strh	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_xl = 1;
 800158e:	793b      	ldrb	r3, [r7, #4]
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	713b      	strb	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_g = 1;
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	713b      	strb	r3, [r7, #4]
  asm330lhh_pin_int1_route_set(&dev_ctx, &route_val);
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <Imu_Init+0xb8>)
 80015a4:	f018 f84c 	bl	8019640 <asm330lhh_pin_int1_route_set>

  uint8_t IDdata;
  asm330lhh_device_id_get(&dev_ctx, &IDdata);
 80015a8:	1cfb      	adds	r3, r7, #3
 80015aa:	4619      	mov	r1, r3
 80015ac:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <Imu_Init+0xb8>)
 80015ae:	f017 fff7 	bl	80195a0 <asm330lhh_device_id_get>

  if (IDdata != 0x6B) {
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	2b6b      	cmp	r3, #107	@ 0x6b
 80015b6:	d005      	beq.n	80015c4 <Imu_Init+0xa8>
    printf("ASM330 Init error\r\n");
 80015b8:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <Imu_Init+0xc4>)
 80015ba:	f018 f9f7 	bl	80199ac <puts>
    return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e003      	b.n	80015cc <Imu_Init+0xb0>
  }
  printf("ASM330 Init succeed\r\n");
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <Imu_Init+0xc8>)
 80015c6:	f018 f9f1 	bl	80199ac <puts>

  return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000094 	.word	0x24000094
 80015d8:	240013a2 	.word	0x240013a2
 80015dc:	24000000 	.word	0x24000000
 80015e0:	0801a9e4 	.word	0x0801a9e4
 80015e4:	0801a9f8 	.word	0x0801a9f8

080015e8 <TIM_Call_Callback>:

// 时间戳变量
static volatile uint64_t system_seconds = 0;

// 定时器中断回调函数，每1s触发一次
void TIM_Call_Callback(void) { system_seconds++; }
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <TIM_Call_Callback+0x20>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	1c50      	adds	r0, r2, #1
 80015f4:	f143 0100 	adc.w	r1, r3, #0
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <TIM_Call_Callback+0x20>)
 80015fa:	e9c3 0100 	strd	r0, r1, [r3]
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	240013a8 	.word	0x240013a8
 800160c:	00000000 	.word	0x00000000

08001610 <GetCurrentTimestamp>:

// 获取当前时间戳
timestamp_def GetCurrentTimestamp(void) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  timestamp_def time;

  // 关中断或使用临界区确保读取的一致性
  taskENTER_CRITICAL();
 8001618:	f017 face 	bl	8018bb8 <vPortEnterCritical>

  time.sec = system_seconds;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <GetCurrentTimestamp+0x58>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	e9c7 2302 	strd	r2, r3, [r7, #8]

  time._50us = __HAL_TIM_GET_COUNTER(&htim16) * 0.00005;  // 0.05ms为单位
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <GetCurrentTimestamp+0x5c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001634:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001660 <GetCurrentTimestamp+0x50>
 8001638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800163c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001640:	edc7 7a04 	vstr	s15, [r7, #16]

  taskEXIT_CRITICAL();
 8001644:	f017 faea 	bl	8018c1c <vPortExitCritical>

  return time;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	461c      	mov	r4, r3
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	eb1c432d 	.word	0xeb1c432d
 8001664:	3f0a36e2 	.word	0x3f0a36e2
 8001668:	240013a8 	.word	0x240013a8
 800166c:	2400151c 	.word	0x2400151c

08001670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_DMA_Init+0x7c>)
 8001678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <MX_DMA_Init+0x7c>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_DMA_Init+0x7c>)
 8001688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	200b      	movs	r0, #11
 800169a:	f001 fbb5 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800169e:	200b      	movs	r0, #11
 80016a0:	f001 fbcc 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2105      	movs	r1, #5
 80016a8:	200c      	movs	r0, #12
 80016aa:	f001 fbad 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016ae:	200c      	movs	r0, #12
 80016b0:	f001 fbc4 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	200d      	movs	r0, #13
 80016ba:	f001 fba5 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016be:	200d      	movs	r0, #13
 80016c0:	f001 fbbc 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2105      	movs	r1, #5
 80016c8:	200e      	movs	r0, #14
 80016ca:	f001 fb9d 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016ce:	200e      	movs	r0, #14
 80016d0:	f001 fbb4 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2105      	movs	r1, #5
 80016d8:	200f      	movs	r0, #15
 80016da:	f001 fb95 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016de:	200f      	movs	r0, #15
 80016e0:	f001 fbac 	bl	8002e3c <HAL_NVIC_EnableIRQ>

}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58024400 	.word	0x58024400

080016f0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  gnss_data_queue = xQueueCreate(10, sizeof(GNSS_Message_t));
 80016f4:	2200      	movs	r2, #0
 80016f6:	2108      	movs	r1, #8
 80016f8:	200a      	movs	r0, #10
 80016fa:	f014 fc72 	bl	8015fe2 <xQueueGenericCreate>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <MX_FREERTOS_Init+0x98>)
 8001702:	6013      	str	r3, [r2, #0]

  xIMUDataQueue = xQueueCreate(128, sizeof(IMUOrigData_t));  // 128 帧
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	2080      	movs	r0, #128	@ 0x80
 800170a:	f014 fc6a 	bl	8015fe2 <xQueueGenericCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <MX_FREERTOS_Init+0x9c>)
 8001712:	6013      	str	r3, [r2, #0]

  IMUDataToSDTaskQueue =
      xQueueCreate(64, sizeof(MsgIMU_t));  // 64 帧 一帧 49字节
 8001714:	2200      	movs	r2, #0
 8001716:	2131      	movs	r1, #49	@ 0x31
 8001718:	2040      	movs	r0, #64	@ 0x40
 800171a:	f014 fc62 	bl	8015fe2 <xQueueGenericCreate>
 800171e:	4603      	mov	r3, r0
  IMUDataToSDTaskQueue =
 8001720:	4a1b      	ldr	r2, [pc, #108]	@ (8001790 <MX_FREERTOS_Init+0xa0>)
 8001722:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle =
      osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <MX_FREERTOS_Init+0xa4>)
 8001726:	2100      	movs	r1, #0
 8001728:	481b      	ldr	r0, [pc, #108]	@ (8001798 <MX_FREERTOS_Init+0xa8>)
 800172a:	f013 ff30 	bl	801558e <osThreadNew>
 800172e:	4603      	mov	r3, r0
  defaultTaskHandle =
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <MX_FREERTOS_Init+0xac>)
 8001732:	6013      	str	r3, [r2, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(IMUTask, NULL, &IMU_attributes);
 8001734:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <MX_FREERTOS_Init+0xb0>)
 8001736:	2100      	movs	r1, #0
 8001738:	481a      	ldr	r0, [pc, #104]	@ (80017a4 <MX_FREERTOS_Init+0xb4>)
 800173a:	f013 ff28 	bl	801558e <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <MX_FREERTOS_Init+0xb8>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of SDMMC */
  SDMMCHandle = osThreadNew(SDMMCTask, NULL, &SDMMC_attributes);
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <MX_FREERTOS_Init+0xbc>)
 8001746:	2100      	movs	r1, #0
 8001748:	4819      	ldr	r0, [pc, #100]	@ (80017b0 <MX_FREERTOS_Init+0xc0>)
 800174a:	f013 ff20 	bl	801558e <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <MX_FREERTOS_Init+0xc4>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of GNSS */
  GNSSHandle = osThreadNew(GNSSTask, NULL, &GNSS_attributes);
 8001754:	4a18      	ldr	r2, [pc, #96]	@ (80017b8 <MX_FREERTOS_Init+0xc8>)
 8001756:	2100      	movs	r1, #0
 8001758:	4818      	ldr	r0, [pc, #96]	@ (80017bc <MX_FREERTOS_Init+0xcc>)
 800175a:	f013 ff18 	bl	801558e <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <MX_FREERTOS_Init+0xd0>)
 8001762:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  IMUDealHandle = osThreadNew(IMUDataDealTask, NULL, &IMuUDeal_attributes);
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <MX_FREERTOS_Init+0xd4>)
 8001766:	2100      	movs	r1, #0
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <MX_FREERTOS_Init+0xd8>)
 800176a:	f013 ff10 	bl	801558e <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <MX_FREERTOS_Init+0xdc>)
 8001772:	6013      	str	r3, [r2, #0]
  InitHandle = osThreadNew(InitTask, NULL, &Init_attributes);
 8001774:	4a16      	ldr	r2, [pc, #88]	@ (80017d0 <MX_FREERTOS_Init+0xe0>)
 8001776:	2100      	movs	r1, #0
 8001778:	4816      	ldr	r0, [pc, #88]	@ (80017d4 <MX_FREERTOS_Init+0xe4>)
 800177a:	f013 ff08 	bl	801558e <osThreadNew>
 800177e:	4603      	mov	r3, r0
 8001780:	4a15      	ldr	r2, [pc, #84]	@ (80017d8 <MX_FREERTOS_Init+0xe8>)
 8001782:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	24001320 	.word	0x24001320
 800178c:	24001398 	.word	0x24001398
 8001790:	24001324 	.word	0x24001324
 8001794:	0801b2ac 	.word	0x0801b2ac
 8001798:	080017dd 	.word	0x080017dd
 800179c:	240013b0 	.word	0x240013b0
 80017a0:	0801b2d0 	.word	0x0801b2d0
 80017a4:	080017ed 	.word	0x080017ed
 80017a8:	240013b4 	.word	0x240013b4
 80017ac:	0801b2f4 	.word	0x0801b2f4
 80017b0:	08001803 	.word	0x08001803
 80017b4:	240013b8 	.word	0x240013b8
 80017b8:	0801b318 	.word	0x0801b318
 80017bc:	0800181b 	.word	0x0800181b
 80017c0:	240013bc 	.word	0x240013bc
 80017c4:	0801b33c 	.word	0x0801b33c
 80017c8:	0800182f 	.word	0x0800182f
 80017cc:	240013c0 	.word	0x240013c0
 80017d0:	0801b360 	.word	0x0801b360
 80017d4:	08001845 	.word	0x08001845
 80017d8:	240013c4 	.word	0x240013c4

080017dc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for (;;) {
    osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f013 ff9c 	bl	8015722 <osDelay>
 80017ea:	e7fb      	b.n	80017e4 <StartDefaultTask+0x8>

080017ec <IMUTask>:
 * @brief Function implementing the IMU thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IMUTask */
void IMUTask(void *argument) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMUTask */

  IMUSamplingTaskFunc(argument);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe27 	bl	8001448 <IMUSamplingTaskFunc>
  /* Infinite loop */
  for (;;) {
    osDelay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f013 ff91 	bl	8015722 <osDelay>
 8001800:	e7fb      	b.n	80017fa <IMUTask+0xe>

08001802 <SDMMCTask>:
 * @brief Function implementing the SDMMC thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDMMCTask */
void SDMMCTask(void *argument) {
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDMMCTask */
  /* Infinite loop */
  FatFs_Check();
 800180a:	f7ff fb7d 	bl	8000f08 <FatFs_Check>
  SDCardTaskFunc();
 800180e:	f7ff fbbd 	bl	8000f8c <SDCardTaskFunc>
  // FatFs_FileTest();
  // sd_wirte_IMU();

  for (;;) {
    osDelay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f013 ff85 	bl	8015722 <osDelay>
 8001818:	e7fb      	b.n	8001812 <SDMMCTask+0x10>

0800181a <GNSSTask>:
 * @brief Function implementing the GNSS thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GNSSTask */
void GNSSTask(void *argument) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GNSSTask */

  UM960SamplingTaskFunc();
 8001822:	f7ff fc53 	bl	80010cc <UM960SamplingTaskFunc>

    // UartRx_CopyToRB();

    // ParseFrames();

    osDelay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f013 ff7b 	bl	8015722 <osDelay>
 800182c:	e7fb      	b.n	8001826 <GNSSTask+0xc>

0800182e <IMUDataDealTask>:
  /* USER CODE END GNSSTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMUDataDealTask(void *argument) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  imuDataDealTaskFunc();
 8001836:	f7ff fd53 	bl	80012e0 <imuDataDealTaskFunc>
  for (;;) {
    osDelay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f013 ff71 	bl	8015722 <osDelay>
 8001840:	e7fb      	b.n	800183a <IMUDataDealTask+0xc>
	...

08001844 <InitTask>:
  }
}

void InitTask(void *argument) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  // 此线程优先级极高，在线程中完成各个中断的初始化，然后删除该线程
  //  中断初始化代码，禁止在main函数中初始化
  GNSSInit();
 800184c:	f7ff fd38 	bl	80012c0 <GNSSInit>
  HAL_TIM_Base_Start_IT(&htim16);
 8001850:	4812      	ldr	r0, [pc, #72]	@ (800189c <InitTask+0x58>)
 8001852:	f00a fbdb 	bl	800c00c <HAL_TIM_Base_Start_IT>

  // 2. 在所有准备工作都完成后，最后再使能中断
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	2008      	movs	r0, #8
 800185c:	f001 fad4 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001860:	2008      	movs	r0, #8
 8001862:	f001 faeb 	bl	8002e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	200a      	movs	r0, #10
 800186c:	f001 facc 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001870:	200a      	movs	r0, #10
 8001872:	f001 fae3 	bl	8002e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	2006      	movs	r0, #6
 800187c:	f001 fac4 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001880:	2006      	movs	r0, #6
 8001882:	f001 fadb 	bl	8002e3c <HAL_NVIC_EnableIRQ>

  // 3. 删除任务
  osThreadTerminate(osThreadGetId());
 8001886:	f013 ff14 	bl	80156b2 <osThreadGetId>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f013 ff1b 	bl	80156c8 <osThreadTerminate>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2400151c 	.word	0x2400151c

080018a0 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c6:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	4b54      	ldr	r3, [pc, #336]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018da:	4a53      	ldr	r2, [pc, #332]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e4:	4b50      	ldr	r3, [pc, #320]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a28 <MX_GPIO_Init+0x188>)
 80018fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001902:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001916:	4a44      	ldr	r2, [pc, #272]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001920:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001934:	4a3c      	ldr	r2, [pc, #240]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <MX_GPIO_Init+0x188>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001952:	4a35      	ldr	r2, [pc, #212]	@ (8001a28 <MX_GPIO_Init+0x188>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800195c:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <MX_GPIO_Init+0x188>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	2170      	movs	r1, #112	@ 0x70
 800196e:	482f      	ldr	r0, [pc, #188]	@ (8001a2c <MX_GPIO_Init+0x18c>)
 8001970:	f004 fa76 	bl	8005e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f242 0110 	movw	r1, #8208	@ 0x2010
 800197a:	482d      	ldr	r0, [pc, #180]	@ (8001a30 <MX_GPIO_Init+0x190>)
 800197c:	f004 fa70 	bl	8005e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001980:	2304      	movs	r3, #4
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4825      	ldr	r0, [pc, #148]	@ (8001a2c <MX_GPIO_Init+0x18c>)
 8001996:	f004 f89b 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800199a:	2370      	movs	r3, #112	@ 0x70
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <MX_GPIO_Init+0x18c>)
 80019b2:	f004 f88d 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 80019b6:	f242 0310 	movw	r3, #8208	@ 0x2010
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	4818      	ldr	r0, [pc, #96]	@ (8001a30 <MX_GPIO_Init+0x190>)
 80019d0:	f004 f87e 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4811      	ldr	r0, [pc, #68]	@ (8001a30 <MX_GPIO_Init+0x190>)
 80019ea:	f004 f871 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ee:	2310      	movs	r3, #16
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_GPIO_Init+0x194>)
 8001a04:	f004 f864 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_GPIO_Init+0x198>)
 8001a1c:	f004 f858 	bl	8005ad0 <HAL_GPIO_Init>


}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	@ 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	58021000 	.word	0x58021000
 8001a30:	58020800 	.word	0x58020800
 8001a34:	58020000 	.word	0x58020000
 8001a38:	58020400 	.word	0x58020400

08001a3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001a40:	f001 f89e 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a44:	f000 f81c 	bl	8001a80 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a48:	f000 f896 	bl	8001b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f7ff ff28 	bl	80018a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a50:	f7ff fe0e 	bl	8001670 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a54:	f000 f988 	bl	8001d68 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a58:	f000 fdac 	bl	80025b4 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8001a5c:	f000 f8ca 	bl	8001bf4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001a60:	f00d fe9a 	bl	800f798 <MX_FATFS_Init>
  MX_TIM16_Init();
 8001a64:	f000 fcba 	bl	80023dc <MX_TIM16_Init>
  MX_USART3_UART_Init();
 8001a68:	f000 fdf0 	bl	800264c <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001a6c:	f000 fd56 	bl	800251c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize(); /* Call init function for freertos objects (in
 8001a70:	f013 fd0c 	bl	801548c <osKernelInitialize>
                           cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a74:	f7ff fe3c 	bl	80016f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a78:	f013 fd4e 	bl	8015518 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <main+0x40>

08001a80 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09c      	sub	sp, #112	@ 0x70
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	224c      	movs	r2, #76	@ 0x4c
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f018 f86c 	bl	8019b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2220      	movs	r2, #32
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f018 f866 	bl	8019b6c <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f004 fa2b 	bl	8005efc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <SystemClock_Config+0xf0>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <SystemClock_Config+0xf0>)
 8001ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <SystemClock_Config+0xf0>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <SystemClock_Config+0xf4>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <SystemClock_Config+0xf4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001acc:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <SystemClock_Config+0xf4>)
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001ad8:	bf00      	nop
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <SystemClock_Config+0xf0>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae6:	d1f8      	bne.n	8001ada <SystemClock_Config+0x5a>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af0:	2340      	movs	r3, #64	@ 0x40
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001afc:	2304      	movs	r3, #4
 8001afe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b00:	233c      	movs	r3, #60	@ 0x3c
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b10:	230c      	movs	r3, #12
 8001b12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fa25 	bl	8005f70 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0xb0>
    Error_Handler();
 8001b2c:	f000 f85c 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001b30:	233f      	movs	r3, #63	@ 0x3f
 8001b32:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2303      	movs	r3, #3
 8001b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b40:	2340      	movs	r3, #64	@ 0x40
 8001b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b44:	2340      	movs	r3, #64	@ 0x40
 8001b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b4e:	2340      	movs	r3, #64	@ 0x40
 8001b50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2104      	movs	r1, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fe64 	bl	8006824 <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xe6>
    Error_Handler();
 8001b62:	f000 f841 	bl	8001be8 <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3770      	adds	r7, #112	@ 0x70
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58024800 	.word	0x58024800
 8001b74:	58000400 	.word	0x58000400

08001b78 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0b0      	sub	sp, #192	@ 0xc0
 8001b7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7e:	463b      	mov	r3, r7
 8001b80:	22c0      	movs	r2, #192	@ 0xc0
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f017 fff1 	bl	8019b6c <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001b96:	2300      	movs	r3, #0
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fa0f 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <PeriphCommonClock_Config+0x34>
    Error_Handler();
 8001ba8:	f000 f81e 	bl	8001be8 <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	37c0      	adds	r7, #192	@ 0xc0
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc6:	f001 f817 	bl	8002bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM16) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x24>
    TIM_Call_Callback();
 8001bd4:	f7ff fd08 	bl	80015e8 <TIM_Call_Callback>
  }

  /* USER CODE END Callback 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40014800 	.word	0x40014800
 8001be4:	40014400 	.word	0x40014400

08001be8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <Error_Handler+0x8>

08001bf4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <MX_SDMMC1_SD_Init+0x44>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c10:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_SDMMC1_SD_Init+0x40>)
 8001c20:	f007 fecc 	bl	80099bc <HAL_SD_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001c2a:	f7ff ffdd 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	240013c8 	.word	0x240013c8
 8001c38:	52007000 	.word	0x52007000

08001c3c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0bc      	sub	sp, #240	@ 0xf0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	22c0      	movs	r2, #192	@ 0xc0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f017 ff85 	bl	8019b6c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a3c      	ldr	r2, [pc, #240]	@ (8001d58 <HAL_SD_MspInit+0x11c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d171      	bne.n	8001d50 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001c6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f99d 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001c8c:	f7ff ffac 	bl	8001be8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001c92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb4:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cbe:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_SD_MspInit+0x120>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cea:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001d04:	230c      	movs	r3, #12
 8001d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4813      	ldr	r0, [pc, #76]	@ (8001d60 <HAL_SD_MspInit+0x124>)
 8001d12:	f003 fedd 	bl	8005ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d16:	2304      	movs	r3, #4
 8001d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480a      	ldr	r0, [pc, #40]	@ (8001d64 <HAL_SD_MspInit+0x128>)
 8001d3c:	f003 fec8 	bl	8005ad0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2105      	movs	r1, #5
 8001d44:	2031      	movs	r0, #49	@ 0x31
 8001d46:	f001 f85f 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001d4a:	2031      	movs	r0, #49	@ 0x31
 8001d4c:	f001 f876 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001d50:	bf00      	nop
 8001d52:	37f0      	adds	r7, #240	@ 0xf0
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	52007000 	.word	0x52007000
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	58020800 	.word	0x58020800
 8001d64:	58020c00 	.word	0x58020c00

08001d68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d6e:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <MX_SPI1_Init+0xac>)
 8001d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d72:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d82:	2207      	movs	r2, #7
 8001d84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001d98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001da0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001da4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dac:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_SPI1_Init+0xa8>)
 8001dfe:	f009 fa41 	bl	800b284 <HAL_SPI_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001e08:	f7ff feee 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	24001444 	.word	0x24001444
 8001e14:	40013000 	.word	0x40013000

08001e18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	22c0      	movs	r2, #192	@ 0xc0
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f017 fe97 	bl	8019b6c <memset>
  if(spiHandle->Instance==SPI1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_SPI_MspInit+0xc4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d145      	bne.n	8001ed4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001e54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e58:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f005 f8ae 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001e6a:	f7ff febd 	bl	8001be8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e92:	4a13      	ldr	r2, [pc, #76]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_SPI_MspInit+0xc8>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eaa:	23e0      	movs	r3, #224	@ 0xe0
 8001eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_SPI_MspInit+0xcc>)
 8001ed0:	f003 fdfe 	bl	8005ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	37e8      	adds	r7, #232	@ 0xe8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40013000 	.word	0x40013000
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020000 	.word	0x58020000

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_MspInit+0x38>)
 8001ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_MspInit+0x38>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_MspInit+0x38>)
 8001f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f06f 0001 	mvn.w	r0, #1
 8001f14:	f000 ff78 	bl	8002e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	@ 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	d844      	bhi.n	8001fbc <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	2076      	movs	r0, #118	@ 0x76
 8001f38:	f000 ff66 	bl	8002e08 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001f3c:	2076      	movs	r0, #118	@ 0x76
 8001f3e:	f000 ff7d 	bl	8002e3c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001f42:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <HAL_InitTick+0xb0>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_InitTick+0xb4>)
 8001f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f4e:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_InitTick+0xb4>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <HAL_InitTick+0xb4>)
 8001f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 ffe3 	bl	8006f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f76:	f004 ffcb 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f82:	4a16      	ldr	r2, [pc, #88]	@ (8001fdc <HAL_InitTick+0xb8>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001f90:	4a14      	ldr	r2, [pc, #80]	@ (8001fe4 <HAL_InitTick+0xc0>)
 8001f92:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001f96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f9a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001f9c:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001fae:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001fb0:	f009 ffd5 	bl	800bf5e <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_InitTick+0xa6>
 8001fba:	e001      	b.n	8001fc0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e005      	b.n	8001fcc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <HAL_InitTick+0xbc>)
 8001fc2:	f00a f823 	bl	800c00c <HAL_TIM_Base_Start_IT>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3738      	adds	r7, #56	@ 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	24000010 	.word	0x24000010
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	240014cc 	.word	0x240014cc
 8001fe4:	40014800 	.word	0x40014800

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <NMI_Handler+0x4>

08001ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <MemManage_Handler+0x4>

08002000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <UsageFault_Handler+0x4>

08002010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002022:	2001      	movs	r0, #1
 8002024:	f003 ff4f 	bl	8005ec6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002030:	2004      	movs	r0, #4
 8002032:	f003 ff48 	bl	8005ec6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}

0800203a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800203e:	2010      	movs	r0, #16
 8002040:	f003 ff41 	bl	8005ec6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <DMA1_Stream0_IRQHandler+0x10>)
 800204e:	f002 fa2d 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	24001814 	.word	0x24001814

0800205c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <DMA1_Stream1_IRQHandler+0x10>)
 8002062:	f002 fa23 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2400188c 	.word	0x2400188c

08002070 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <DMA1_Stream2_IRQHandler+0x10>)
 8002076:	f002 fa19 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	24001904 	.word	0x24001904

08002084 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA1_Stream3_IRQHandler+0x10>)
 800208a:	f002 fa0f 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	24001724 	.word	0x24001724

08002098 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <DMA1_Stream4_IRQHandler+0x10>)
 800209e:	f002 fa05 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2400179c 	.word	0x2400179c

080020ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <USART1_IRQHandler+0x10>)
 80020b2:	f00a fedb 	bl	800ce6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	240015fc 	.word	0x240015fc

080020c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <USART3_IRQHandler+0x10>)
 80020c6:	f00a fed1 	bl	800ce6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24001690 	.word	0x24001690

080020d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <SDMMC1_IRQHandler+0x10>)
 80020da:	f007 fedf 	bl	8009e9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	240013c8 	.word	0x240013c8

080020e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <UART4_IRQHandler+0x10>)
 80020ee:	f00a febd 	bl	800ce6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24001568 	.word	0x24001568

080020fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <TIM16_IRQHandler+0x10>)
 8002102:	f00a f85c 	bl	800c1be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2400151c 	.word	0x2400151c

08002110 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <TIM17_IRQHandler+0x10>)
 8002116:	f00a f852 	bl	800c1be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240014cc 	.word	0x240014cc

08002124 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e00a      	b.n	800214c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002136:	f3af 8000 	nop.w
 800213a:	4601      	mov	r1, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbf0      	blt.n	8002136 <_read+0x12>
  }

  return len;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e009      	b.n	8002184 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf1      	blt.n	8002170 <_write+0x12>
  }
  return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_close>:

int _close(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021be:	605a      	str	r2, [r3, #4]
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_isatty>:

int _isatty(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f017 fd48 	bl	8019cc4 <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	24080000 	.word	0x24080000
 8002260:	00002000 	.word	0x00002000
 8002264:	24001518 	.word	0x24001518
 8002268:	24022b30 	.word	0x24022b30

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002270:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <SystemInit+0x114>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	4a42      	ldr	r2, [pc, #264]	@ (8002380 <SystemInit+0x114>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002280:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <SystemInit+0x118>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	2b06      	cmp	r3, #6
 800228a:	d807      	bhi.n	800229c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800228c:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <SystemInit+0x118>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 030f 	bic.w	r3, r3, #15
 8002294:	4a3b      	ldr	r2, [pc, #236]	@ (8002384 <SystemInit+0x118>)
 8002296:	f043 0307 	orr.w	r3, r3, #7
 800229a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800229c:	4b3a      	ldr	r3, [pc, #232]	@ (8002388 <SystemInit+0x11c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a39      	ldr	r2, [pc, #228]	@ (8002388 <SystemInit+0x11c>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022a8:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <SystemInit+0x11c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022ae:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <SystemInit+0x11c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4935      	ldr	r1, [pc, #212]	@ (8002388 <SystemInit+0x11c>)
 80022b4:	4b35      	ldr	r3, [pc, #212]	@ (800238c <SystemInit+0x120>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ba:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <SystemInit+0x118>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <SystemInit+0x118>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 030f 	bic.w	r3, r3, #15
 80022ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002384 <SystemInit+0x118>)
 80022d0:	f043 0307 	orr.w	r3, r3, #7
 80022d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <SystemInit+0x11c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <SystemInit+0x11c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <SystemInit+0x11c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <SystemInit+0x11c>)
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <SystemInit+0x124>)
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <SystemInit+0x11c>)
 80022f0:	4a28      	ldr	r2, [pc, #160]	@ (8002394 <SystemInit+0x128>)
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022f4:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <SystemInit+0x11c>)
 80022f6:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <SystemInit+0x12c>)
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <SystemInit+0x11c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <SystemInit+0x11c>)
 8002302:	4a25      	ldr	r2, [pc, #148]	@ (8002398 <SystemInit+0x12c>)
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <SystemInit+0x11c>)
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <SystemInit+0x11c>)
 800230e:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <SystemInit+0x12c>)
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <SystemInit+0x11c>)
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <SystemInit+0x11c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	@ (8002388 <SystemInit+0x11c>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <SystemInit+0x11c>)
 8002326:	2200      	movs	r2, #0
 8002328:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800232a:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <SystemInit+0x130>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <SystemInit+0x134>)
 8002330:	4013      	ands	r3, r2
 8002332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002336:	d202      	bcs.n	800233e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <SystemInit+0x138>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <SystemInit+0x11c>)
 8002340:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800234c:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <SystemInit+0x11c>)
 800234e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002352:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <SystemInit+0x11c>)
 8002354:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002358:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <SystemInit+0x13c>)
 800235e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002362:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <SystemInit+0x11c>)
 8002366:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800236a:	4a07      	ldr	r2, [pc, #28]	@ (8002388 <SystemInit+0x11c>)
 800236c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002370:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00
 8002384:	52002000 	.word	0x52002000
 8002388:	58024400 	.word	0x58024400
 800238c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002390:	02020200 	.word	0x02020200
 8002394:	01ff0000 	.word	0x01ff0000
 8002398:	01010280 	.word	0x01010280
 800239c:	5c001000 	.word	0x5c001000
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	51008108 	.word	0x51008108
 80023a8:	52004000 	.word	0x52004000

080023ac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <ExitRun0Mode+0x2c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <ExitRun0Mode+0x2c>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80023bc:	bf00      	nop
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <ExitRun0Mode+0x2c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f9      	beq.n	80023be <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	58024800 	.word	0x58024800

080023dc <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b092      	sub	sp, #72	@ 0x48
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	222c      	movs	r2, #44	@ 0x2c
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f017 fbb5 	bl	8019b6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002402:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002404:	4a30      	ldr	r2, [pc, #192]	@ (80024c8 <MX_TIM16_Init+0xec>)
 8002406:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 11999;
 8002408:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 800240a:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800240e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002410:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8002416:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002418:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800241c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002424:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242a:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002430:	4824      	ldr	r0, [pc, #144]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002432:	f009 fd94 	bl	800bf5e <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800243c:	f7ff fbd4 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002440:	4820      	ldr	r0, [pc, #128]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002442:	f009 fe5b 	bl	800c0fc <HAL_TIM_OC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800244c:	f7ff fbcc 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800245c:	2300      	movs	r3, #0
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002470:	2200      	movs	r2, #0
 8002472:	4619      	mov	r1, r3
 8002474:	4813      	ldr	r0, [pc, #76]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 8002476:	f009 ffa9 	bl	800c3cc <HAL_TIM_OC_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002480:	f7ff fbb2 	bl	8001be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <MX_TIM16_Init+0xe8>)
 80024ac:	f00a fba6 	bl	800cbfc <HAL_TIMEx_ConfigBreakDeadTime>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80024b6:	f7ff fb97 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3748      	adds	r7, #72	@ 0x48
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2400151c 	.word	0x2400151c
 80024c8:	40014400 	.word	0x40014400

080024cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <HAL_TIM_Base_MspInit+0x48>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d116      	bne.n	800250c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_TIM_Base_MspInit+0x4c>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_TIM_Base_MspInit+0x4c>)
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_TIM_Base_MspInit+0x4c>)
 80024f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2105      	movs	r1, #5
 8002500:	2075      	movs	r0, #117	@ 0x75
 8002502:	f000 fc81 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002506:	2075      	movs	r0, #117	@ 0x75
 8002508:	f000 fc98 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40014400 	.word	0x40014400
 8002518:	58024400 	.word	0x58024400

0800251c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <MX_UART4_Init+0x90>)
 8002522:	4a23      	ldr	r2, [pc, #140]	@ (80025b0 <MX_UART4_Init+0x94>)
 8002524:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <MX_UART4_Init+0x90>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <MX_UART4_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <MX_UART4_Init+0x90>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <MX_UART4_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <MX_UART4_Init+0x90>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <MX_UART4_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <MX_UART4_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002552:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <MX_UART4_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <MX_UART4_Init+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <MX_UART4_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002564:	4811      	ldr	r0, [pc, #68]	@ (80025ac <MX_UART4_Init+0x90>)
 8002566:	f00a fbe5 	bl	800cd34 <HAL_UART_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_UART4_Init+0x58>
    Error_Handler();
 8002570:	f7ff fb3a 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) !=
 8002574:	2100      	movs	r1, #0
 8002576:	480d      	ldr	r0, [pc, #52]	@ (80025ac <MX_UART4_Init+0x90>)
 8002578:	f00c fa79 	bl	800ea6e <HAL_UARTEx_SetTxFifoThreshold>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_UART4_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8002582:	f7ff fb31 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) !=
 8002586:	2100      	movs	r1, #0
 8002588:	4808      	ldr	r0, [pc, #32]	@ (80025ac <MX_UART4_Init+0x90>)
 800258a:	f00c faae 	bl	800eaea <HAL_UARTEx_SetRxFifoThreshold>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_UART4_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8002594:	f7ff fb28 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002598:	4804      	ldr	r0, [pc, #16]	@ (80025ac <MX_UART4_Init+0x90>)
 800259a:	f00c fa2f 	bl	800e9fc <HAL_UARTEx_DisableFifoMode>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_UART4_Init+0x8c>
    Error_Handler();
 80025a4:	f7ff fb20 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	24001568 	.word	0x24001568
 80025b0:	40004c00 	.word	0x40004c00

080025b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b8:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <MX_USART1_UART_Init+0x94>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025be:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80025fc:	4811      	ldr	r0, [pc, #68]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 80025fe:	f00a fb99 	bl	800cd34 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_USART1_UART_Init+0x58>
    Error_Handler();
 8002608:	f7ff faee 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) !=
 800260c:	2100      	movs	r1, #0
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 8002610:	f00c fa2d 	bl	800ea6e <HAL_UARTEx_SetTxFifoThreshold>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800261a:	f7ff fae5 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) !=
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 8002622:	f00c fa62 	bl	800eaea <HAL_UARTEx_SetRxFifoThreshold>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_USART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 800262c:	f7ff fadc 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <MX_USART1_UART_Init+0x90>)
 8002632:	f00c f9e3 	bl	800e9fc <HAL_UARTEx_DisableFifoMode>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_USART1_UART_Init+0x8c>
    Error_Handler();
 800263c:	f7ff fad4 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	240015fc 	.word	0x240015fc
 8002648:	40011000 	.word	0x40011000

0800264c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002652:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <MX_USART3_UART_Init+0x94>)
 8002654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002656:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002658:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800265c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002694:	4811      	ldr	r0, [pc, #68]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 8002696:	f00a fb4d 	bl	800cd34 <HAL_UART_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 80026a0:	f7ff faa2 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 80026a4:	2100      	movs	r1, #0
 80026a6:	480d      	ldr	r0, [pc, #52]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 80026a8:	f00c f9e1 	bl	800ea6e <HAL_UARTEx_SetTxFifoThreshold>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 80026b2:	f7ff fa99 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 80026b6:	2100      	movs	r1, #0
 80026b8:	4808      	ldr	r0, [pc, #32]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 80026ba:	f00c fa16 	bl	800eaea <HAL_UARTEx_SetRxFifoThreshold>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 80026c4:	f7ff fa90 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 80026c8:	4804      	ldr	r0, [pc, #16]	@ (80026dc <MX_USART3_UART_Init+0x90>)
 80026ca:	f00c f997 	bl	800e9fc <HAL_UARTEx_DisableFifoMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 80026d4:	f7ff fa88 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	24001690 	.word	0x24001690
 80026e0:	40004800 	.word	0x40004800

080026e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0be      	sub	sp, #248	@ 0xf8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	22c0      	movs	r2, #192	@ 0xc0
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f017 fa31 	bl	8019b6c <memset>
  if (uartHandle->Instance == UART4) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a9a      	ldr	r2, [pc, #616]	@ (8002978 <HAL_UART_MspInit+0x294>)
 8002710:	4293      	cmp	r3, r2
 8002712:	f040 80ab 	bne.w	800286c <HAL_UART_MspInit+0x188>

    /* USER CODE END UART4_MspInit 0 */

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002716:	f04f 0202 	mov.w	r2, #2
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection =
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fc47 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_UART_MspInit+0x58>
      Error_Handler();
 8002738:	f7ff fa56 	bl	8001be8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800273c:	4b8f      	ldr	r3, [pc, #572]	@ (800297c <HAL_UART_MspInit+0x298>)
 800273e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002742:	4a8e      	ldr	r2, [pc, #568]	@ (800297c <HAL_UART_MspInit+0x298>)
 8002744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002748:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800274c:	4b8b      	ldr	r3, [pc, #556]	@ (800297c <HAL_UART_MspInit+0x298>)
 800274e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_UART_MspInit+0x298>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002760:	4a86      	ldr	r2, [pc, #536]	@ (800297c <HAL_UART_MspInit+0x298>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800276a:	4b84      	ldr	r3, [pc, #528]	@ (800297c <HAL_UART_MspInit+0x298>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002778:	2303      	movs	r3, #3
 800277a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002790:	2308      	movs	r3, #8
 8002792:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800279a:	4619      	mov	r1, r3
 800279c:	4878      	ldr	r0, [pc, #480]	@ (8002980 <HAL_UART_MspInit+0x29c>)
 800279e:	f003 f997 	bl	8005ad0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80027a2:	4b78      	ldr	r3, [pc, #480]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027a4:	4a78      	ldr	r2, [pc, #480]	@ (8002988 <HAL_UART_MspInit+0x2a4>)
 80027a6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80027a8:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027aa:	223f      	movs	r2, #63	@ 0x3f
 80027ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ae:	4b75      	ldr	r3, [pc, #468]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b4:	4b73      	ldr	r3, [pc, #460]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027ba:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c2:	4b70      	ldr	r3, [pc, #448]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80027ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027dc:	4b69      	ldr	r3, [pc, #420]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK) {
 80027e2:	4868      	ldr	r0, [pc, #416]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027e4:	f000 fb38 	bl	8002e58 <HAL_DMA_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_UART_MspInit+0x10e>
      Error_Handler();
 80027ee:	f7ff f9fb 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a63      	ldr	r2, [pc, #396]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80027fa:	4a62      	ldr	r2, [pc, #392]	@ (8002984 <HAL_UART_MspInit+0x2a0>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002800:	4b62      	ldr	r3, [pc, #392]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002802:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_UART_MspInit+0x2ac>)
 8002804:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002806:	4b61      	ldr	r3, [pc, #388]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002808:	2240      	movs	r2, #64	@ 0x40
 800280a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800280c:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002812:	4b5e      	ldr	r3, [pc, #376]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002818:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 800281a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800281e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002820:	4b5a      	ldr	r3, [pc, #360]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002826:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800282c:	4b57      	ldr	r3, [pc, #348]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002832:	4b56      	ldr	r3, [pc, #344]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002838:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 800283a:	2200      	movs	r2, #0
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK) {
 800283e:	4853      	ldr	r0, [pc, #332]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002840:	f000 fb0a 	bl	8002e58 <HAL_DMA_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_MspInit+0x16a>
      Error_Handler();
 800284a:	f7ff f9cd 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, hdma_uart4_tx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002852:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002854:	4a4d      	ldr	r2, [pc, #308]	@ (800298c <HAL_UART_MspInit+0x2a8>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2105      	movs	r1, #5
 800285e:	2034      	movs	r0, #52	@ 0x34
 8002860:	f000 fad2 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002864:	2034      	movs	r0, #52	@ 0x34
 8002866:	f000 fae9 	bl	8002e3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 800286a:	e14a      	b.n	8002b02 <HAL_UART_MspInit+0x41e>
  } else if (uartHandle->Instance == USART1) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a48      	ldr	r2, [pc, #288]	@ (8002994 <HAL_UART_MspInit+0x2b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	f040 8094 	bne.w	80029a0 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002878:	f04f 0201 	mov.w	r2, #1
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800288a:	f107 0320 	add.w	r3, r7, #32
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fb96 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800289a:	f7ff f9a5 	bl	8001be8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800289e:	4b37      	ldr	r3, [pc, #220]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a4:	4a35      	ldr	r2, [pc, #212]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028a6:	f043 0310 	orr.w	r3, r3, #16
 80028aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ae:	4b33      	ldr	r3, [pc, #204]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c2:	4a2e      	ldr	r2, [pc, #184]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_UART_MspInit+0x298>)
 80028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80028da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028f4:	2307      	movs	r3, #7
 80028f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028fe:	4619      	mov	r1, r3
 8002900:	481f      	ldr	r0, [pc, #124]	@ (8002980 <HAL_UART_MspInit+0x29c>)
 8002902:	f003 f8e5 	bl	8005ad0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002906:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002908:	4a24      	ldr	r2, [pc, #144]	@ (800299c <HAL_UART_MspInit+0x2b8>)
 800290a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800290c:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 800290e:	2229      	movs	r2, #41	@ 0x29
 8002910:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002912:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002918:	4b1f      	ldr	r3, [pc, #124]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800291e:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002920:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002924:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002938:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002942:	2200      	movs	r2, #0
 8002944:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002946:	4814      	ldr	r0, [pc, #80]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002948:	f000 fa86 	bl	8002e58 <HAL_DMA_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8002952:	f7ff f949 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0f      	ldr	r2, [pc, #60]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 800295a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800295e:	4a0e      	ldr	r2, [pc, #56]	@ (8002998 <HAL_UART_MspInit+0x2b4>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2105      	movs	r1, #5
 8002968:	2025      	movs	r0, #37	@ 0x25
 800296a:	f000 fa4d 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800296e:	2025      	movs	r0, #37	@ 0x25
 8002970:	f000 fa64 	bl	8002e3c <HAL_NVIC_EnableIRQ>
}
 8002974:	e0c5      	b.n	8002b02 <HAL_UART_MspInit+0x41e>
 8002976:	bf00      	nop
 8002978:	40004c00 	.word	0x40004c00
 800297c:	58024400 	.word	0x58024400
 8002980:	58020000 	.word	0x58020000
 8002984:	24001724 	.word	0x24001724
 8002988:	40020058 	.word	0x40020058
 800298c:	2400179c 	.word	0x2400179c
 8002990:	40020070 	.word	0x40020070
 8002994:	40011000 	.word	0x40011000
 8002998:	24001814 	.word	0x24001814
 800299c:	40020010 	.word	0x40020010
  } else if (uartHandle->Instance == USART3) {
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a59      	ldr	r2, [pc, #356]	@ (8002b0c <HAL_UART_MspInit+0x428>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 80ab 	bne.w	8002b02 <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029ac:	f04f 0202 	mov.w	r2, #2
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection =
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80029be:	f107 0320 	add.w	r3, r7, #32
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fafc 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80029ce:	f7ff f90b 	bl	8001be8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 80029d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 80029da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 80029e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f6:	4a46      	ldr	r2, [pc, #280]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a00:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_UART_MspInit+0x42c>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8002a0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002a32:	4619      	mov	r1, r3
 8002a34:	4837      	ldr	r0, [pc, #220]	@ (8002b14 <HAL_UART_MspInit+0x430>)
 8002a36:	f003 f84b 	bl	8005ad0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a3c:	4a37      	ldr	r2, [pc, #220]	@ (8002b1c <HAL_UART_MspInit+0x438>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a40:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a42:	222d      	movs	r2, #45	@ 0x2d
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a46:	4b34      	ldr	r3, [pc, #208]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a60:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002a66:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a6c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 8002a7a:	4827      	ldr	r0, [pc, #156]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a7c:	f000 f9ec 	bl	8002e58 <HAL_DMA_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002a86:	f7ff f8af 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart3_rx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a92:	4a21      	ldr	r2, [pc, #132]	@ (8002b18 <HAL_UART_MspInit+0x434>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002a9a:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <HAL_UART_MspInit+0x440>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aa0:	222e      	movs	r2, #46	@ 0x2e
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aa6:	2240      	movs	r2, #64	@ 0x40
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 8002ad6:	4812      	ldr	r0, [pc, #72]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002ad8:	f000 f9be 	bl	8002e58 <HAL_DMA_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_UART_MspInit+0x402>
      Error_Handler();
 8002ae2:	f7ff f881 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart3_tx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aea:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002aec:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <HAL_UART_MspInit+0x43c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2105      	movs	r1, #5
 8002af6:	2027      	movs	r0, #39	@ 0x27
 8002af8:	f000 f986 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002afc:	2027      	movs	r0, #39	@ 0x27
 8002afe:	f000 f99d 	bl	8002e3c <HAL_NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	37f8      	adds	r7, #248	@ 0xf8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40004800 	.word	0x40004800
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58020400 	.word	0x58020400
 8002b18:	2400188c 	.word	0x2400188c
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	24001904 	.word	0x24001904
 8002b24:	40020040 	.word	0x40020040

08002b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b28:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002b64 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002b2c:	f7ff fc3e 	bl	80023ac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b30:	f7ff fb9c 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b34:	480c      	ldr	r0, [pc, #48]	@ (8002b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b36:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f017 f8b9 	bl	8019cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe ff6d 	bl	8001a3c <main>
  bx  lr
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b6c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002b70:	0801b87c 	.word	0x0801b87c
  ldr r2, =_sbss
 8002b74:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002b78:	24022b30 	.word	0x24022b30

08002b7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC3_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b86:	2003      	movs	r0, #3
 8002b88:	f000 f933 	bl	8002df2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b8c:	f004 f800 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_Init+0x68>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	4913      	ldr	r1, [pc, #76]	@ (8002bec <HAL_Init+0x6c>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002baa:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <HAL_Init+0x68>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <HAL_Init+0x6c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <HAL_Init+0x70>)
 8002bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <HAL_Init+0x74>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	200f      	movs	r0, #15
 8002bcc:	f7ff f9aa 	bl	8001f24 <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e002      	b.n	8002be0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bda:	f7ff f985 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	58024400 	.word	0x58024400
 8002bec:	0801b384 	.word	0x0801b384
 8002bf0:	2400000c 	.word	0x2400000c
 8002bf4:	24000008 	.word	0x24000008

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	24000014 	.word	0x24000014
 8002c1c:	2400197c 	.word	0x2400197c

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2400197c 	.word	0x2400197c

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	24000014 	.word	0x24000014

08002c80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_GetREVID+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0c1b      	lsrs	r3, r3, #16
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	5c001000 	.word	0x5c001000

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	05fa0000 	.word	0x05fa0000

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	@ (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db0a      	blt.n	8002d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	490c      	ldr	r1, [pc, #48]	@ (8002d84 <__NVIC_SetPriority+0x4c>)
 8002d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d60:	e00a      	b.n	8002d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4908      	ldr	r1, [pc, #32]	@ (8002d88 <__NVIC_SetPriority+0x50>)
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	440b      	add	r3, r1
 8002d76:	761a      	strb	r2, [r3, #24]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	@ 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf28      	it	cs
 8002daa:	2304      	movcs	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d902      	bls.n	8002dbc <NVIC_EncodePriority+0x30>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b03      	subs	r3, #3
 8002dba:	e000      	b.n	8002dbe <NVIC_EncodePriority+0x32>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	4313      	orrs	r3, r2
         );
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	@ 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff4c 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e16:	f7ff ff63 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	6978      	ldr	r0, [r7, #20]
 8002e22:	f7ff ffb3 	bl	8002d8c <NVIC_EncodePriority>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff82 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff56 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff fede 	bl	8002c20 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e316      	b.n	800349e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a66      	ldr	r2, [pc, #408]	@ (8003010 <HAL_DMA_Init+0x1b8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d04a      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a65      	ldr	r2, [pc, #404]	@ (8003014 <HAL_DMA_Init+0x1bc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d045      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a63      	ldr	r2, [pc, #396]	@ (8003018 <HAL_DMA_Init+0x1c0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d040      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a62      	ldr	r2, [pc, #392]	@ (800301c <HAL_DMA_Init+0x1c4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d03b      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a60      	ldr	r2, [pc, #384]	@ (8003020 <HAL_DMA_Init+0x1c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d036      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8003024 <HAL_DMA_Init+0x1cc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d031      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <HAL_DMA_Init+0x1d0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02c      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a5c      	ldr	r2, [pc, #368]	@ (800302c <HAL_DMA_Init+0x1d4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d027      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8003030 <HAL_DMA_Init+0x1d8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a59      	ldr	r2, [pc, #356]	@ (8003034 <HAL_DMA_Init+0x1dc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d01d      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <HAL_DMA_Init+0x1e0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a56      	ldr	r2, [pc, #344]	@ (800303c <HAL_DMA_Init+0x1e4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a54      	ldr	r2, [pc, #336]	@ (8003040 <HAL_DMA_Init+0x1e8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a53      	ldr	r2, [pc, #332]	@ (8003044 <HAL_DMA_Init+0x1ec>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a51      	ldr	r2, [pc, #324]	@ (8003048 <HAL_DMA_Init+0x1f0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_DMA_Init+0xb8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a50      	ldr	r2, [pc, #320]	@ (800304c <HAL_DMA_Init+0x1f4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Init+0xbc>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_DMA_Init+0xbe>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 813b 	beq.w	8003192 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_DMA_Init+0x1b8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04a      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a36      	ldr	r2, [pc, #216]	@ (8003014 <HAL_DMA_Init+0x1bc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d045      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a34      	ldr	r2, [pc, #208]	@ (8003018 <HAL_DMA_Init+0x1c0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a33      	ldr	r2, [pc, #204]	@ (800301c <HAL_DMA_Init+0x1c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d03b      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <HAL_DMA_Init+0x1c8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d036      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <HAL_DMA_Init+0x1cc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_DMA_Init+0x1d0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02c      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <HAL_DMA_Init+0x1d4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d027      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2b      	ldr	r2, [pc, #172]	@ (8003030 <HAL_DMA_Init+0x1d8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_DMA_Init+0x1dc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d01d      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a28      	ldr	r2, [pc, #160]	@ (8003038 <HAL_DMA_Init+0x1e0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a27      	ldr	r2, [pc, #156]	@ (800303c <HAL_DMA_Init+0x1e4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <HAL_DMA_Init+0x1e8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <HAL_DMA_Init+0x1ec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	@ (8003048 <HAL_DMA_Init+0x1f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_Init+0x174>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a21      	ldr	r2, [pc, #132]	@ (800304c <HAL_DMA_Init+0x1f4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_Init+0x186>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e007      	b.n	8002fee <HAL_DMA_Init+0x196>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fee:	e02f      	b.n	8003050 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff0:	f7ff fe16 	bl	8002c20 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d928      	bls.n	8003050 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2203      	movs	r2, #3
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e246      	b.n	800349e <HAL_DMA_Init+0x646>
 8003010:	40020010 	.word	0x40020010
 8003014:	40020028 	.word	0x40020028
 8003018:	40020040 	.word	0x40020040
 800301c:	40020058 	.word	0x40020058
 8003020:	40020070 	.word	0x40020070
 8003024:	40020088 	.word	0x40020088
 8003028:	400200a0 	.word	0x400200a0
 800302c:	400200b8 	.word	0x400200b8
 8003030:	40020410 	.word	0x40020410
 8003034:	40020428 	.word	0x40020428
 8003038:	40020440 	.word	0x40020440
 800303c:	40020458 	.word	0x40020458
 8003040:	40020470 	.word	0x40020470
 8003044:	40020488 	.word	0x40020488
 8003048:	400204a0 	.word	0x400204a0
 800304c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1c8      	bne.n	8002ff0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4b83      	ldr	r3, [pc, #524]	@ (8003278 <HAL_DMA_Init+0x420>)
 800306a:	4013      	ands	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003076:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003082:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d107      	bne.n	80030b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	4313      	orrs	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030b4:	4b71      	ldr	r3, [pc, #452]	@ (800327c <HAL_DMA_Init+0x424>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b71      	ldr	r3, [pc, #452]	@ (8003280 <HAL_DMA_Init+0x428>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c0:	d328      	bcc.n	8003114 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b28      	cmp	r3, #40	@ 0x28
 80030c8:	d903      	bls.n	80030d2 <HAL_DMA_Init+0x27a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80030d0:	d917      	bls.n	8003102 <HAL_DMA_Init+0x2aa>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80030d8:	d903      	bls.n	80030e2 <HAL_DMA_Init+0x28a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b42      	cmp	r3, #66	@ 0x42
 80030e0:	d90f      	bls.n	8003102 <HAL_DMA_Init+0x2aa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b46      	cmp	r3, #70	@ 0x46
 80030e8:	d903      	bls.n	80030f2 <HAL_DMA_Init+0x29a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b48      	cmp	r3, #72	@ 0x48
 80030f0:	d907      	bls.n	8003102 <HAL_DMA_Init+0x2aa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80030f8:	d905      	bls.n	8003106 <HAL_DMA_Init+0x2ae>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b52      	cmp	r3, #82	@ 0x52
 8003100:	d801      	bhi.n	8003106 <HAL_DMA_Init+0x2ae>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_DMA_Init+0x2b0>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003112:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2b04      	cmp	r3, #4
 800313c:	d117      	bne.n	800316e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f002 fb33 	bl	80057bc <DMA_CheckFifoParam>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2240      	movs	r2, #64	@ 0x40
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e197      	b.n	800349e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f002 fa6e 	bl	8005658 <DMA_CalcBaseAndBitshift>
 800317c:	4603      	mov	r3, r0
 800317e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	223f      	movs	r2, #63	@ 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	e0cd      	b.n	800332e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <HAL_DMA_Init+0x42c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <HAL_DMA_Init+0x430>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a38      	ldr	r2, [pc, #224]	@ (800328c <HAL_DMA_Init+0x434>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a36      	ldr	r2, [pc, #216]	@ (8003290 <HAL_DMA_Init+0x438>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <HAL_DMA_Init+0x43c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_DMA_Init+0x440>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_DMA_Init+0x444>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_Init+0x38a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <HAL_DMA_Init+0x448>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_DMA_Init+0x38e>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_Init+0x390>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8097 	beq.w	800331c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	@ (8003284 <HAL_DMA_Init+0x42c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d021      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_DMA_Init+0x430>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01c      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	@ (800328c <HAL_DMA_Init+0x434>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d017      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <HAL_DMA_Init+0x438>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d012      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <HAL_DMA_Init+0x43c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_DMA_Init+0x440>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d008      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <HAL_DMA_Init+0x444>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <HAL_DMA_Init+0x3e4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_DMA_Init+0x448>)
 800323a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_DMA_Init+0x44c>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d021      	beq.n	80032a8 <HAL_DMA_Init+0x450>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b80      	cmp	r3, #128	@ 0x80
 800326a:	d102      	bne.n	8003272 <HAL_DMA_Init+0x41a>
 800326c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003270:	e01b      	b.n	80032aa <HAL_DMA_Init+0x452>
 8003272:	2300      	movs	r3, #0
 8003274:	e019      	b.n	80032aa <HAL_DMA_Init+0x452>
 8003276:	bf00      	nop
 8003278:	fe10803f 	.word	0xfe10803f
 800327c:	5c001000 	.word	0x5c001000
 8003280:	ffff0000 	.word	0xffff0000
 8003284:	58025408 	.word	0x58025408
 8003288:	5802541c 	.word	0x5802541c
 800328c:	58025430 	.word	0x58025430
 8003290:	58025444 	.word	0x58025444
 8003294:	58025458 	.word	0x58025458
 8003298:	5802546c 	.word	0x5802546c
 800329c:	58025480 	.word	0x58025480
 80032a0:	58025494 	.word	0x58025494
 80032a4:	fffe000f 	.word	0xfffe000f
 80032a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b6e      	ldr	r3, [pc, #440]	@ (80034a8 <HAL_DMA_Init+0x650>)
 80032f0:	4413      	add	r3, r2
 80032f2:	4a6e      	ldr	r2, [pc, #440]	@ (80034ac <HAL_DMA_Init+0x654>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f002 f9a9 	bl	8005658 <DMA_CalcBaseAndBitshift>
 8003306:	4603      	mov	r3, r0
 8003308:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2201      	movs	r2, #1
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e008      	b.n	800332e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	@ 0x40
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0b7      	b.n	800349e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5f      	ldr	r2, [pc, #380]	@ (80034b0 <HAL_DMA_Init+0x658>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d072      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5d      	ldr	r2, [pc, #372]	@ (80034b4 <HAL_DMA_Init+0x65c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d06d      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5c      	ldr	r2, [pc, #368]	@ (80034b8 <HAL_DMA_Init+0x660>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d068      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5a      	ldr	r2, [pc, #360]	@ (80034bc <HAL_DMA_Init+0x664>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d063      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a59      	ldr	r2, [pc, #356]	@ (80034c0 <HAL_DMA_Init+0x668>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d05e      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a57      	ldr	r2, [pc, #348]	@ (80034c4 <HAL_DMA_Init+0x66c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d059      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a56      	ldr	r2, [pc, #344]	@ (80034c8 <HAL_DMA_Init+0x670>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d054      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_DMA_Init+0x674>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d04f      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a53      	ldr	r2, [pc, #332]	@ (80034d0 <HAL_DMA_Init+0x678>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04a      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a51      	ldr	r2, [pc, #324]	@ (80034d4 <HAL_DMA_Init+0x67c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d045      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_DMA_Init+0x680>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d040      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4e      	ldr	r2, [pc, #312]	@ (80034dc <HAL_DMA_Init+0x684>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03b      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4d      	ldr	r2, [pc, #308]	@ (80034e0 <HAL_DMA_Init+0x688>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d036      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4b      	ldr	r2, [pc, #300]	@ (80034e4 <HAL_DMA_Init+0x68c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4a      	ldr	r2, [pc, #296]	@ (80034e8 <HAL_DMA_Init+0x690>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a48      	ldr	r2, [pc, #288]	@ (80034ec <HAL_DMA_Init+0x694>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d027      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a47      	ldr	r2, [pc, #284]	@ (80034f0 <HAL_DMA_Init+0x698>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a45      	ldr	r2, [pc, #276]	@ (80034f4 <HAL_DMA_Init+0x69c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a44      	ldr	r2, [pc, #272]	@ (80034f8 <HAL_DMA_Init+0x6a0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a42      	ldr	r2, [pc, #264]	@ (80034fc <HAL_DMA_Init+0x6a4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a41      	ldr	r2, [pc, #260]	@ (8003500 <HAL_DMA_Init+0x6a8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3f      	ldr	r2, [pc, #252]	@ (8003504 <HAL_DMA_Init+0x6ac>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3e      	ldr	r2, [pc, #248]	@ (8003508 <HAL_DMA_Init+0x6b0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_DMA_Init+0x5c6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_DMA_Init+0x6b4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_DMA_Init+0x5ca>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_DMA_Init+0x5cc>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d032      	beq.n	800348e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f002 fa43 	bl	80058b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b80      	cmp	r3, #128	@ 0x80
 8003434:	d102      	bne.n	800343c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003450:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_DMA_Init+0x624>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b08      	cmp	r3, #8
 8003460:	d80c      	bhi.n	800347c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f002 fac0 	bl	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e008      	b.n	800348e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	a7fdabf8 	.word	0xa7fdabf8
 80034ac:	cccccccd 	.word	0xcccccccd
 80034b0:	40020010 	.word	0x40020010
 80034b4:	40020028 	.word	0x40020028
 80034b8:	40020040 	.word	0x40020040
 80034bc:	40020058 	.word	0x40020058
 80034c0:	40020070 	.word	0x40020070
 80034c4:	40020088 	.word	0x40020088
 80034c8:	400200a0 	.word	0x400200a0
 80034cc:	400200b8 	.word	0x400200b8
 80034d0:	40020410 	.word	0x40020410
 80034d4:	40020428 	.word	0x40020428
 80034d8:	40020440 	.word	0x40020440
 80034dc:	40020458 	.word	0x40020458
 80034e0:	40020470 	.word	0x40020470
 80034e4:	40020488 	.word	0x40020488
 80034e8:	400204a0 	.word	0x400204a0
 80034ec:	400204b8 	.word	0x400204b8
 80034f0:	58025408 	.word	0x58025408
 80034f4:	5802541c 	.word	0x5802541c
 80034f8:	58025430 	.word	0x58025430
 80034fc:	58025444 	.word	0x58025444
 8003500:	58025458 	.word	0x58025458
 8003504:	5802546c 	.word	0x5802546c
 8003508:	58025480 	.word	0x58025480
 800350c:	58025494 	.word	0x58025494

08003510 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e226      	b.n	800397a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DMA_Start_IT+0x2a>
 8003536:	2302      	movs	r3, #2
 8003538:	e21f      	b.n	800397a <HAL_DMA_Start_IT+0x46a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	f040 820a 	bne.w	8003964 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a68      	ldr	r2, [pc, #416]	@ (8003704 <HAL_DMA_Start_IT+0x1f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d04a      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a66      	ldr	r2, [pc, #408]	@ (8003708 <HAL_DMA_Start_IT+0x1f8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d045      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_DMA_Start_IT+0x1fc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d040      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a63      	ldr	r2, [pc, #396]	@ (8003710 <HAL_DMA_Start_IT+0x200>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d03b      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a62      	ldr	r2, [pc, #392]	@ (8003714 <HAL_DMA_Start_IT+0x204>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d036      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <HAL_DMA_Start_IT+0x208>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d031      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5f      	ldr	r2, [pc, #380]	@ (800371c <HAL_DMA_Start_IT+0x20c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d02c      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_DMA_Start_IT+0x210>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d027      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003724 <HAL_DMA_Start_IT+0x214>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003728 <HAL_DMA_Start_IT+0x218>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a59      	ldr	r2, [pc, #356]	@ (800372c <HAL_DMA_Start_IT+0x21c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_DMA_Start_IT+0x220>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_DMA_Start_IT+0x224>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a54      	ldr	r2, [pc, #336]	@ (8003738 <HAL_DMA_Start_IT+0x228>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_DMA_Start_IT+0x22c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a51      	ldr	r2, [pc, #324]	@ (8003740 <HAL_DMA_Start_IT+0x230>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_Start_IT+0x100>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_DMA_Start_IT+0x110>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f001 fe6a 	bl	8005300 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a34      	ldr	r2, [pc, #208]	@ (8003704 <HAL_DMA_Start_IT+0x1f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a33      	ldr	r2, [pc, #204]	@ (8003708 <HAL_DMA_Start_IT+0x1f8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a31      	ldr	r2, [pc, #196]	@ (800370c <HAL_DMA_Start_IT+0x1fc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a30      	ldr	r2, [pc, #192]	@ (8003710 <HAL_DMA_Start_IT+0x200>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2e      	ldr	r2, [pc, #184]	@ (8003714 <HAL_DMA_Start_IT+0x204>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2d      	ldr	r2, [pc, #180]	@ (8003718 <HAL_DMA_Start_IT+0x208>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <HAL_DMA_Start_IT+0x20c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <HAL_DMA_Start_IT+0x210>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a28      	ldr	r2, [pc, #160]	@ (8003724 <HAL_DMA_Start_IT+0x214>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <HAL_DMA_Start_IT+0x218>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a25      	ldr	r2, [pc, #148]	@ (800372c <HAL_DMA_Start_IT+0x21c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a24      	ldr	r2, [pc, #144]	@ (8003730 <HAL_DMA_Start_IT+0x220>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <HAL_DMA_Start_IT+0x224>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <HAL_DMA_Start_IT+0x228>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <HAL_DMA_Start_IT+0x22c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003740 <HAL_DMA_Start_IT+0x230>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Start_IT+0x1c0>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Start_IT+0x1c2>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 021e 	bic.w	r2, r3, #30
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0216 	orr.w	r2, r2, #22
 80036e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03e      	beq.n	8003770 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e035      	b.n	8003770 <HAL_DMA_Start_IT+0x260>
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 020e 	bic.w	r2, r3, #14
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 020a 	orr.w	r2, r2, #10
 8003756:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0204 	orr.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a83      	ldr	r2, [pc, #524]	@ (8003984 <HAL_DMA_Start_IT+0x474>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d072      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a82      	ldr	r2, [pc, #520]	@ (8003988 <HAL_DMA_Start_IT+0x478>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d06d      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a80      	ldr	r2, [pc, #512]	@ (800398c <HAL_DMA_Start_IT+0x47c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d068      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_DMA_Start_IT+0x480>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d063      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7d      	ldr	r2, [pc, #500]	@ (8003994 <HAL_DMA_Start_IT+0x484>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d05e      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003998 <HAL_DMA_Start_IT+0x488>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d059      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7a      	ldr	r2, [pc, #488]	@ (800399c <HAL_DMA_Start_IT+0x48c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d054      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a79      	ldr	r2, [pc, #484]	@ (80039a0 <HAL_DMA_Start_IT+0x490>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04f      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a77      	ldr	r2, [pc, #476]	@ (80039a4 <HAL_DMA_Start_IT+0x494>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04a      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a76      	ldr	r2, [pc, #472]	@ (80039a8 <HAL_DMA_Start_IT+0x498>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d045      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a74      	ldr	r2, [pc, #464]	@ (80039ac <HAL_DMA_Start_IT+0x49c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d040      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a73      	ldr	r2, [pc, #460]	@ (80039b0 <HAL_DMA_Start_IT+0x4a0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d03b      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a71      	ldr	r2, [pc, #452]	@ (80039b4 <HAL_DMA_Start_IT+0x4a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d036      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a70      	ldr	r2, [pc, #448]	@ (80039b8 <HAL_DMA_Start_IT+0x4a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d031      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_DMA_Start_IT+0x4ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02c      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6d      	ldr	r2, [pc, #436]	@ (80039c0 <HAL_DMA_Start_IT+0x4b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d027      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6b      	ldr	r2, [pc, #428]	@ (80039c4 <HAL_DMA_Start_IT+0x4b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6a      	ldr	r2, [pc, #424]	@ (80039c8 <HAL_DMA_Start_IT+0x4b8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d01d      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_DMA_Start_IT+0x4bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a67      	ldr	r2, [pc, #412]	@ (80039d0 <HAL_DMA_Start_IT+0x4c0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	@ (80039d4 <HAL_DMA_Start_IT+0x4c4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a64      	ldr	r2, [pc, #400]	@ (80039d8 <HAL_DMA_Start_IT+0x4c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a62      	ldr	r2, [pc, #392]	@ (80039dc <HAL_DMA_Start_IT+0x4cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a61      	ldr	r2, [pc, #388]	@ (80039e0 <HAL_DMA_Start_IT+0x4d0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Start_IT+0x354>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_DMA_Start_IT+0x356>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003886:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a37      	ldr	r2, [pc, #220]	@ (8003984 <HAL_DMA_Start_IT+0x474>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d04a      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a36      	ldr	r2, [pc, #216]	@ (8003988 <HAL_DMA_Start_IT+0x478>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d045      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a34      	ldr	r2, [pc, #208]	@ (800398c <HAL_DMA_Start_IT+0x47c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d040      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a33      	ldr	r2, [pc, #204]	@ (8003990 <HAL_DMA_Start_IT+0x480>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d03b      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <HAL_DMA_Start_IT+0x484>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d036      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a30      	ldr	r2, [pc, #192]	@ (8003998 <HAL_DMA_Start_IT+0x488>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d031      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2e      	ldr	r2, [pc, #184]	@ (800399c <HAL_DMA_Start_IT+0x48c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02c      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2d      	ldr	r2, [pc, #180]	@ (80039a0 <HAL_DMA_Start_IT+0x490>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d027      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2b      	ldr	r2, [pc, #172]	@ (80039a4 <HAL_DMA_Start_IT+0x494>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d022      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_DMA_Start_IT+0x498>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <HAL_DMA_Start_IT+0x49c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d018      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <HAL_DMA_Start_IT+0x4a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a25      	ldr	r2, [pc, #148]	@ (80039b4 <HAL_DMA_Start_IT+0x4a4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <HAL_DMA_Start_IT+0x4a8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <HAL_DMA_Start_IT+0x4ac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a21      	ldr	r2, [pc, #132]	@ (80039c0 <HAL_DMA_Start_IT+0x4b0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <HAL_DMA_Start_IT+0x442>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e012      	b.n	8003978 <HAL_DMA_Start_IT+0x468>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e009      	b.n	8003978 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003978:	7dfb      	ldrb	r3, [r7, #23]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
 80039c4:	58025408 	.word	0x58025408
 80039c8:	5802541c 	.word	0x5802541c
 80039cc:	58025430 	.word	0x58025430
 80039d0:	58025444 	.word	0x58025444
 80039d4:	58025458 	.word	0x58025458
 80039d8:	5802546c 	.word	0x5802546c
 80039dc:	58025480 	.word	0x58025480
 80039e0:	58025494 	.word	0x58025494

080039e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff f918 	bl	8002c20 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2dc      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e2cd      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a76      	ldr	r2, [pc, #472]	@ (8003bf8 <HAL_DMA_Abort+0x214>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d04a      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	@ (8003bfc <HAL_DMA_Abort+0x218>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d045      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	@ (8003c00 <HAL_DMA_Abort+0x21c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d040      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a71      	ldr	r2, [pc, #452]	@ (8003c04 <HAL_DMA_Abort+0x220>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d03b      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a70      	ldr	r2, [pc, #448]	@ (8003c08 <HAL_DMA_Abort+0x224>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d036      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <HAL_DMA_Abort+0x228>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d031      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c10 <HAL_DMA_Abort+0x22c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d02c      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6b      	ldr	r2, [pc, #428]	@ (8003c14 <HAL_DMA_Abort+0x230>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d027      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c18 <HAL_DMA_Abort+0x234>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d022      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a68      	ldr	r2, [pc, #416]	@ (8003c1c <HAL_DMA_Abort+0x238>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a67      	ldr	r2, [pc, #412]	@ (8003c20 <HAL_DMA_Abort+0x23c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d018      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_DMA_Abort+0x240>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a64      	ldr	r2, [pc, #400]	@ (8003c28 <HAL_DMA_Abort+0x244>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a62      	ldr	r2, [pc, #392]	@ (8003c2c <HAL_DMA_Abort+0x248>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a61      	ldr	r2, [pc, #388]	@ (8003c30 <HAL_DMA_Abort+0x24c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5f      	ldr	r2, [pc, #380]	@ (8003c34 <HAL_DMA_Abort+0x250>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_DMA_Abort+0xda>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_DMA_Abort+0xdc>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 021e 	bic.w	r2, r2, #30
 8003ad2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ae2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e00a      	b.n	8003b02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 020e 	bic.w	r2, r2, #14
 8003afa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf8 <HAL_DMA_Abort+0x214>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d072      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3a      	ldr	r2, [pc, #232]	@ (8003bfc <HAL_DMA_Abort+0x218>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d06d      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a39      	ldr	r2, [pc, #228]	@ (8003c00 <HAL_DMA_Abort+0x21c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d068      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a37      	ldr	r2, [pc, #220]	@ (8003c04 <HAL_DMA_Abort+0x220>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d063      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	@ (8003c08 <HAL_DMA_Abort+0x224>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d05e      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a34      	ldr	r2, [pc, #208]	@ (8003c0c <HAL_DMA_Abort+0x228>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d059      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	@ (8003c10 <HAL_DMA_Abort+0x22c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d054      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	@ (8003c14 <HAL_DMA_Abort+0x230>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04f      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <HAL_DMA_Abort+0x234>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2e      	ldr	r2, [pc, #184]	@ (8003c1c <HAL_DMA_Abort+0x238>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c20 <HAL_DMA_Abort+0x23c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	@ (8003c24 <HAL_DMA_Abort+0x240>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c28 <HAL_DMA_Abort+0x244>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a28      	ldr	r2, [pc, #160]	@ (8003c2c <HAL_DMA_Abort+0x248>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <HAL_DMA_Abort+0x24c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	@ (8003c34 <HAL_DMA_Abort+0x250>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	@ (8003c38 <HAL_DMA_Abort+0x254>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_DMA_Abort+0x258>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	@ (8003c40 <HAL_DMA_Abort+0x25c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <HAL_DMA_Abort+0x260>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <HAL_DMA_Abort+0x264>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_DMA_Abort+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_DMA_Abort+0x26c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a19      	ldr	r2, [pc, #100]	@ (8003c54 <HAL_DMA_Abort+0x270>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d132      	bne.n	8003c58 <HAL_DMA_Abort+0x274>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e031      	b.n	8003c5a <HAL_DMA_Abort+0x276>
 8003bf6:	bf00      	nop
 8003bf8:	40020010 	.word	0x40020010
 8003bfc:	40020028 	.word	0x40020028
 8003c00:	40020040 	.word	0x40020040
 8003c04:	40020058 	.word	0x40020058
 8003c08:	40020070 	.word	0x40020070
 8003c0c:	40020088 	.word	0x40020088
 8003c10:	400200a0 	.word	0x400200a0
 8003c14:	400200b8 	.word	0x400200b8
 8003c18:	40020410 	.word	0x40020410
 8003c1c:	40020428 	.word	0x40020428
 8003c20:	40020440 	.word	0x40020440
 8003c24:	40020458 	.word	0x40020458
 8003c28:	40020470 	.word	0x40020470
 8003c2c:	40020488 	.word	0x40020488
 8003c30:	400204a0 	.word	0x400204a0
 8003c34:	400204b8 	.word	0x400204b8
 8003c38:	58025408 	.word	0x58025408
 8003c3c:	5802541c 	.word	0x5802541c
 8003c40:	58025430 	.word	0x58025430
 8003c44:	58025444 	.word	0x58025444
 8003c48:	58025458 	.word	0x58025458
 8003c4c:	5802546c 	.word	0x5802546c
 8003c50:	58025480 	.word	0x58025480
 8003c54:	58025494 	.word	0x58025494
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6d      	ldr	r2, [pc, #436]	@ (8003e28 <HAL_DMA_Abort+0x444>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04a      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e2c <HAL_DMA_Abort+0x448>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d045      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6a      	ldr	r2, [pc, #424]	@ (8003e30 <HAL_DMA_Abort+0x44c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	@ (8003e34 <HAL_DMA_Abort+0x450>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03b      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a67      	ldr	r2, [pc, #412]	@ (8003e38 <HAL_DMA_Abort+0x454>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d036      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a65      	ldr	r2, [pc, #404]	@ (8003e3c <HAL_DMA_Abort+0x458>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a64      	ldr	r2, [pc, #400]	@ (8003e40 <HAL_DMA_Abort+0x45c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d02c      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a62      	ldr	r2, [pc, #392]	@ (8003e44 <HAL_DMA_Abort+0x460>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d027      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a61      	ldr	r2, [pc, #388]	@ (8003e48 <HAL_DMA_Abort+0x464>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5f      	ldr	r2, [pc, #380]	@ (8003e4c <HAL_DMA_Abort+0x468>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e50 <HAL_DMA_Abort+0x46c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e54 <HAL_DMA_Abort+0x470>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5b      	ldr	r2, [pc, #364]	@ (8003e58 <HAL_DMA_Abort+0x474>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a59      	ldr	r2, [pc, #356]	@ (8003e5c <HAL_DMA_Abort+0x478>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a58      	ldr	r2, [pc, #352]	@ (8003e60 <HAL_DMA_Abort+0x47c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a56      	ldr	r2, [pc, #344]	@ (8003e64 <HAL_DMA_Abort+0x480>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_Abort+0x33c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <HAL_DMA_Abort+0x34c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d30:	e013      	b.n	8003d5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7fe ff75 	bl	8002c20 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d90c      	bls.n	8003d5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12d      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e28 <HAL_DMA_Abort+0x444>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	@ (8003e2c <HAL_DMA_Abort+0x448>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <HAL_DMA_Abort+0x44c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	@ (8003e34 <HAL_DMA_Abort+0x450>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <HAL_DMA_Abort+0x454>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a27      	ldr	r2, [pc, #156]	@ (8003e3c <HAL_DMA_Abort+0x458>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a26      	ldr	r2, [pc, #152]	@ (8003e40 <HAL_DMA_Abort+0x45c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <HAL_DMA_Abort+0x460>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a23      	ldr	r2, [pc, #140]	@ (8003e48 <HAL_DMA_Abort+0x464>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <HAL_DMA_Abort+0x468>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a20      	ldr	r2, [pc, #128]	@ (8003e50 <HAL_DMA_Abort+0x46c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <HAL_DMA_Abort+0x470>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <HAL_DMA_Abort+0x474>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <HAL_DMA_Abort+0x478>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_DMA_Abort+0x47c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_DMA_Abort+0x480>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Abort+0x426>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_DMA_Abort+0x428>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d02b      	beq.n	8003e68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	223f      	movs	r2, #63	@ 0x3f
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	e02a      	b.n	8003e7e <HAL_DMA_Abort+0x49a>
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc0 <HAL_DMA_Abort+0x5dc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d072      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc4 <HAL_DMA_Abort+0x5e0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d06d      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4c      	ldr	r2, [pc, #304]	@ (8003fc8 <HAL_DMA_Abort+0x5e4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d068      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <HAL_DMA_Abort+0x5e8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d063      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a49      	ldr	r2, [pc, #292]	@ (8003fd0 <HAL_DMA_Abort+0x5ec>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d05e      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a47      	ldr	r2, [pc, #284]	@ (8003fd4 <HAL_DMA_Abort+0x5f0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d059      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a46      	ldr	r2, [pc, #280]	@ (8003fd8 <HAL_DMA_Abort+0x5f4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d054      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a44      	ldr	r2, [pc, #272]	@ (8003fdc <HAL_DMA_Abort+0x5f8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04f      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a43      	ldr	r2, [pc, #268]	@ (8003fe0 <HAL_DMA_Abort+0x5fc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a41      	ldr	r2, [pc, #260]	@ (8003fe4 <HAL_DMA_Abort+0x600>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	@ (8003fe8 <HAL_DMA_Abort+0x604>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fec <HAL_DMA_Abort+0x608>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_DMA_Abort+0x60c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff4 <HAL_DMA_Abort+0x610>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff8 <HAL_DMA_Abort+0x614>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a38      	ldr	r2, [pc, #224]	@ (8003ffc <HAL_DMA_Abort+0x618>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a37      	ldr	r2, [pc, #220]	@ (8004000 <HAL_DMA_Abort+0x61c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a35      	ldr	r2, [pc, #212]	@ (8004004 <HAL_DMA_Abort+0x620>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a34      	ldr	r2, [pc, #208]	@ (8004008 <HAL_DMA_Abort+0x624>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a32      	ldr	r2, [pc, #200]	@ (800400c <HAL_DMA_Abort+0x628>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a31      	ldr	r2, [pc, #196]	@ (8004010 <HAL_DMA_Abort+0x62c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	@ (8004014 <HAL_DMA_Abort+0x630>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8004018 <HAL_DMA_Abort+0x634>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	@ (800401c <HAL_DMA_Abort+0x638>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Abort+0x58e>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_DMA_Abort+0x590>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	58025408 	.word	0x58025408
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025444 	.word	0x58025444
 8004010:	58025458 	.word	0x58025458
 8004014:	5802546c 	.word	0x5802546c
 8004018:	58025480 	.word	0x58025480
 800401c:	58025494 	.word	0x58025494

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e237      	b.n	80044a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2280      	movs	r2, #128	@ 0x80
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e22c      	b.n	80044a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5c      	ldr	r2, [pc, #368]	@ (80041c0 <HAL_DMA_Abort_IT+0x1a0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d04a      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5b      	ldr	r2, [pc, #364]	@ (80041c4 <HAL_DMA_Abort_IT+0x1a4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d045      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a59      	ldr	r2, [pc, #356]	@ (80041c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d040      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a58      	ldr	r2, [pc, #352]	@ (80041cc <HAL_DMA_Abort_IT+0x1ac>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d03b      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a56      	ldr	r2, [pc, #344]	@ (80041d0 <HAL_DMA_Abort_IT+0x1b0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d036      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a55      	ldr	r2, [pc, #340]	@ (80041d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d031      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a53      	ldr	r2, [pc, #332]	@ (80041d8 <HAL_DMA_Abort_IT+0x1b8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d02c      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_DMA_Abort_IT+0x1bc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d027      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a50      	ldr	r2, [pc, #320]	@ (80041e0 <HAL_DMA_Abort_IT+0x1c0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4f      	ldr	r2, [pc, #316]	@ (80041e4 <HAL_DMA_Abort_IT+0x1c4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a4d      	ldr	r2, [pc, #308]	@ (80041e8 <HAL_DMA_Abort_IT+0x1c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a4c      	ldr	r2, [pc, #304]	@ (80041ec <HAL_DMA_Abort_IT+0x1cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4a      	ldr	r2, [pc, #296]	@ (80041f0 <HAL_DMA_Abort_IT+0x1d0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a49      	ldr	r2, [pc, #292]	@ (80041f4 <HAL_DMA_Abort_IT+0x1d4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a47      	ldr	r2, [pc, #284]	@ (80041f8 <HAL_DMA_Abort_IT+0x1d8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a46      	ldr	r2, [pc, #280]	@ (80041fc <HAL_DMA_Abort_IT+0x1dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Abort_IT+0xcc>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_DMA_Abort_IT+0xce>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8086 	beq.w	8004200 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2f      	ldr	r2, [pc, #188]	@ (80041c0 <HAL_DMA_Abort_IT+0x1a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2e      	ldr	r2, [pc, #184]	@ (80041c4 <HAL_DMA_Abort_IT+0x1a4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2c      	ldr	r2, [pc, #176]	@ (80041c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2b      	ldr	r2, [pc, #172]	@ (80041cc <HAL_DMA_Abort_IT+0x1ac>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a29      	ldr	r2, [pc, #164]	@ (80041d0 <HAL_DMA_Abort_IT+0x1b0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a28      	ldr	r2, [pc, #160]	@ (80041d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	@ (80041d8 <HAL_DMA_Abort_IT+0x1b8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a25      	ldr	r2, [pc, #148]	@ (80041dc <HAL_DMA_Abort_IT+0x1bc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a23      	ldr	r2, [pc, #140]	@ (80041e0 <HAL_DMA_Abort_IT+0x1c0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a22      	ldr	r2, [pc, #136]	@ (80041e4 <HAL_DMA_Abort_IT+0x1c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	@ (80041e8 <HAL_DMA_Abort_IT+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ec <HAL_DMA_Abort_IT+0x1cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <HAL_DMA_Abort_IT+0x1d0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <HAL_DMA_Abort_IT+0x1d4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1a      	ldr	r2, [pc, #104]	@ (80041f8 <HAL_DMA_Abort_IT+0x1d8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <HAL_DMA_Abort_IT+0x1dc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <HAL_DMA_Abort_IT+0x18e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e178      	b.n	80044a0 <HAL_DMA_Abort_IT+0x480>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e16f      	b.n	80044a0 <HAL_DMA_Abort_IT+0x480>
 80041c0:	40020010 	.word	0x40020010
 80041c4:	40020028 	.word	0x40020028
 80041c8:	40020040 	.word	0x40020040
 80041cc:	40020058 	.word	0x40020058
 80041d0:	40020070 	.word	0x40020070
 80041d4:	40020088 	.word	0x40020088
 80041d8:	400200a0 	.word	0x400200a0
 80041dc:	400200b8 	.word	0x400200b8
 80041e0:	40020410 	.word	0x40020410
 80041e4:	40020428 	.word	0x40020428
 80041e8:	40020440 	.word	0x40020440
 80041ec:	40020458 	.word	0x40020458
 80041f0:	40020470 	.word	0x40020470
 80041f4:	40020488 	.word	0x40020488
 80041f8:	400204a0 	.word	0x400204a0
 80041fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 020e 	bic.w	r2, r2, #14
 800420e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6c      	ldr	r2, [pc, #432]	@ (80043c8 <HAL_DMA_Abort_IT+0x3a8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d04a      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6b      	ldr	r2, [pc, #428]	@ (80043cc <HAL_DMA_Abort_IT+0x3ac>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d045      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a69      	ldr	r2, [pc, #420]	@ (80043d0 <HAL_DMA_Abort_IT+0x3b0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d040      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a68      	ldr	r2, [pc, #416]	@ (80043d4 <HAL_DMA_Abort_IT+0x3b4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d03b      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a66      	ldr	r2, [pc, #408]	@ (80043d8 <HAL_DMA_Abort_IT+0x3b8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d036      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a65      	ldr	r2, [pc, #404]	@ (80043dc <HAL_DMA_Abort_IT+0x3bc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d031      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a63      	ldr	r2, [pc, #396]	@ (80043e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d02c      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a62      	ldr	r2, [pc, #392]	@ (80043e4 <HAL_DMA_Abort_IT+0x3c4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d027      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a60      	ldr	r2, [pc, #384]	@ (80043e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d022      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5f      	ldr	r2, [pc, #380]	@ (80043ec <HAL_DMA_Abort_IT+0x3cc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01d      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5d      	ldr	r2, [pc, #372]	@ (80043f0 <HAL_DMA_Abort_IT+0x3d0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5c      	ldr	r2, [pc, #368]	@ (80043f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5a      	ldr	r2, [pc, #360]	@ (80043f8 <HAL_DMA_Abort_IT+0x3d8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a59      	ldr	r2, [pc, #356]	@ (80043fc <HAL_DMA_Abort_IT+0x3dc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a57      	ldr	r2, [pc, #348]	@ (8004400 <HAL_DMA_Abort_IT+0x3e0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a56      	ldr	r2, [pc, #344]	@ (8004404 <HAL_DMA_Abort_IT+0x3e4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d108      	bne.n	80042c2 <HAL_DMA_Abort_IT+0x2a2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e007      	b.n	80042d2 <HAL_DMA_Abort_IT+0x2b2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	@ (80043c8 <HAL_DMA_Abort_IT+0x3a8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d072      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3a      	ldr	r2, [pc, #232]	@ (80043cc <HAL_DMA_Abort_IT+0x3ac>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d06d      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a39      	ldr	r2, [pc, #228]	@ (80043d0 <HAL_DMA_Abort_IT+0x3b0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d068      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a37      	ldr	r2, [pc, #220]	@ (80043d4 <HAL_DMA_Abort_IT+0x3b4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d063      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a36      	ldr	r2, [pc, #216]	@ (80043d8 <HAL_DMA_Abort_IT+0x3b8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d05e      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a34      	ldr	r2, [pc, #208]	@ (80043dc <HAL_DMA_Abort_IT+0x3bc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d059      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d054      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a31      	ldr	r2, [pc, #196]	@ (80043e4 <HAL_DMA_Abort_IT+0x3c4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04f      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a30      	ldr	r2, [pc, #192]	@ (80043e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2e      	ldr	r2, [pc, #184]	@ (80043ec <HAL_DMA_Abort_IT+0x3cc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2d      	ldr	r2, [pc, #180]	@ (80043f0 <HAL_DMA_Abort_IT+0x3d0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2b      	ldr	r2, [pc, #172]	@ (80043f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	@ (80043f8 <HAL_DMA_Abort_IT+0x3d8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <HAL_DMA_Abort_IT+0x3dc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a27      	ldr	r2, [pc, #156]	@ (8004400 <HAL_DMA_Abort_IT+0x3e0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a25      	ldr	r2, [pc, #148]	@ (8004404 <HAL_DMA_Abort_IT+0x3e4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <HAL_DMA_Abort_IT+0x3e8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a22      	ldr	r2, [pc, #136]	@ (800440c <HAL_DMA_Abort_IT+0x3ec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <HAL_DMA_Abort_IT+0x3f0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	@ (8004414 <HAL_DMA_Abort_IT+0x3f4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <HAL_DMA_Abort_IT+0x3f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	@ (800441c <HAL_DMA_Abort_IT+0x3fc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <HAL_DMA_Abort_IT+0x400>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	@ (8004424 <HAL_DMA_Abort_IT+0x404>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d132      	bne.n	8004428 <HAL_DMA_Abort_IT+0x408>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e031      	b.n	800442a <HAL_DMA_Abort_IT+0x40a>
 80043c6:	bf00      	nop
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d028      	beq.n	8004480 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800443c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800445c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004474:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800447e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044b8:	4b67      	ldr	r3, [pc, #412]	@ (8004658 <HAL_DMA_IRQHandler+0x1ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a67      	ldr	r2, [pc, #412]	@ (800465c <HAL_DMA_IRQHandler+0x1b0>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004660 <HAL_DMA_IRQHandler+0x1b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_DMA_IRQHandler+0x1b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004668 <HAL_DMA_IRQHandler+0x1bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5a      	ldr	r2, [pc, #360]	@ (800466c <HAL_DMA_IRQHandler+0x1c0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a59      	ldr	r2, [pc, #356]	@ (8004670 <HAL_DMA_IRQHandler+0x1c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a57      	ldr	r2, [pc, #348]	@ (8004674 <HAL_DMA_IRQHandler+0x1c8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_DMA_IRQHandler+0x1cc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a54      	ldr	r2, [pc, #336]	@ (800467c <HAL_DMA_IRQHandler+0x1d0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a53      	ldr	r2, [pc, #332]	@ (8004680 <HAL_DMA_IRQHandler+0x1d4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a51      	ldr	r2, [pc, #324]	@ (8004684 <HAL_DMA_IRQHandler+0x1d8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a50      	ldr	r2, [pc, #320]	@ (8004688 <HAL_DMA_IRQHandler+0x1dc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4e      	ldr	r2, [pc, #312]	@ (800468c <HAL_DMA_IRQHandler+0x1e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4d      	ldr	r2, [pc, #308]	@ (8004690 <HAL_DMA_IRQHandler+0x1e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4b      	ldr	r2, [pc, #300]	@ (8004694 <HAL_DMA_IRQHandler+0x1e8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a4a      	ldr	r2, [pc, #296]	@ (8004698 <HAL_DMA_IRQHandler+0x1ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a48      	ldr	r2, [pc, #288]	@ (800469c <HAL_DMA_IRQHandler+0x1f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_DMA_IRQHandler+0xd6>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_DMA_IRQHandler+0xd8>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 842b 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2208      	movs	r2, #8
 8004594:	409a      	lsls	r2, r3
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80a2 	beq.w	80046e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004660 <HAL_DMA_IRQHandler+0x1b4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004664 <HAL_DMA_IRQHandler+0x1b8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004668 <HAL_DMA_IRQHandler+0x1bc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2a      	ldr	r2, [pc, #168]	@ (800466c <HAL_DMA_IRQHandler+0x1c0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a28      	ldr	r2, [pc, #160]	@ (8004670 <HAL_DMA_IRQHandler+0x1c4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <HAL_DMA_IRQHandler+0x1c8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a25      	ldr	r2, [pc, #148]	@ (8004678 <HAL_DMA_IRQHandler+0x1cc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a24      	ldr	r2, [pc, #144]	@ (800467c <HAL_DMA_IRQHandler+0x1d0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a22      	ldr	r2, [pc, #136]	@ (8004680 <HAL_DMA_IRQHandler+0x1d4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	@ (8004684 <HAL_DMA_IRQHandler+0x1d8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_DMA_IRQHandler+0x1dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	@ (800468c <HAL_DMA_IRQHandler+0x1e0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_DMA_IRQHandler+0x1e4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_DMA_IRQHandler+0x1e8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_DMA_IRQHandler+0x1ec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	@ (800469c <HAL_DMA_IRQHandler+0x1f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d12f      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x1f4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e02e      	b.n	80046b4 <HAL_DMA_IRQHandler+0x208>
 8004656:	bf00      	nop
 8004658:	24000008 	.word	0x24000008
 800465c:	1b4e81b5 	.word	0x1b4e81b5
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2208      	movs	r2, #8
 80046d2:	409a      	lsls	r2, r3
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	fa22 f303 	lsr.w	r3, r2, r3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06e      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a69      	ldr	r2, [pc, #420]	@ (80048a4 <HAL_DMA_IRQHandler+0x3f8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a67      	ldr	r2, [pc, #412]	@ (80048a8 <HAL_DMA_IRQHandler+0x3fc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a66      	ldr	r2, [pc, #408]	@ (80048ac <HAL_DMA_IRQHandler+0x400>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a64      	ldr	r2, [pc, #400]	@ (80048b0 <HAL_DMA_IRQHandler+0x404>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a63      	ldr	r2, [pc, #396]	@ (80048b4 <HAL_DMA_IRQHandler+0x408>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a61      	ldr	r2, [pc, #388]	@ (80048b8 <HAL_DMA_IRQHandler+0x40c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a60      	ldr	r2, [pc, #384]	@ (80048bc <HAL_DMA_IRQHandler+0x410>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5e      	ldr	r2, [pc, #376]	@ (80048c0 <HAL_DMA_IRQHandler+0x414>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5d      	ldr	r2, [pc, #372]	@ (80048c4 <HAL_DMA_IRQHandler+0x418>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5b      	ldr	r2, [pc, #364]	@ (80048c8 <HAL_DMA_IRQHandler+0x41c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a5a      	ldr	r2, [pc, #360]	@ (80048cc <HAL_DMA_IRQHandler+0x420>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a58      	ldr	r2, [pc, #352]	@ (80048d0 <HAL_DMA_IRQHandler+0x424>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a57      	ldr	r2, [pc, #348]	@ (80048d4 <HAL_DMA_IRQHandler+0x428>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a55      	ldr	r2, [pc, #340]	@ (80048d8 <HAL_DMA_IRQHandler+0x42c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a54      	ldr	r2, [pc, #336]	@ (80048dc <HAL_DMA_IRQHandler+0x430>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a52      	ldr	r2, [pc, #328]	@ (80048e0 <HAL_DMA_IRQHandler+0x434>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10a      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x304>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e003      	b.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f043 0202 	orr.w	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2204      	movs	r2, #4
 80047e2:	409a      	lsls	r2, r3
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 808f 	beq.w	800490c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2c      	ldr	r2, [pc, #176]	@ (80048a4 <HAL_DMA_IRQHandler+0x3f8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	@ (80048a8 <HAL_DMA_IRQHandler+0x3fc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a29      	ldr	r2, [pc, #164]	@ (80048ac <HAL_DMA_IRQHandler+0x400>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <HAL_DMA_IRQHandler+0x404>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_DMA_IRQHandler+0x408>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a24      	ldr	r2, [pc, #144]	@ (80048b8 <HAL_DMA_IRQHandler+0x40c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_DMA_IRQHandler+0x410>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a21      	ldr	r2, [pc, #132]	@ (80048c0 <HAL_DMA_IRQHandler+0x414>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_DMA_IRQHandler+0x418>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_DMA_IRQHandler+0x41c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <HAL_DMA_IRQHandler+0x420>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1b      	ldr	r2, [pc, #108]	@ (80048d0 <HAL_DMA_IRQHandler+0x424>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1a      	ldr	r2, [pc, #104]	@ (80048d4 <HAL_DMA_IRQHandler+0x428>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a18      	ldr	r2, [pc, #96]	@ (80048d8 <HAL_DMA_IRQHandler+0x42c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a17      	ldr	r2, [pc, #92]	@ (80048dc <HAL_DMA_IRQHandler+0x430>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <HAL_DMA_IRQHandler+0x434>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d12a      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x438>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e023      	b.n	80048ec <HAL_DMA_IRQHandler+0x440>
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2204      	movs	r2, #4
 80048fa:	409a      	lsls	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2210      	movs	r2, #16
 8004916:	409a      	lsls	r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a6 	beq.w	8004a6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a85      	ldr	r2, [pc, #532]	@ (8004b3c <HAL_DMA_IRQHandler+0x690>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a83      	ldr	r2, [pc, #524]	@ (8004b40 <HAL_DMA_IRQHandler+0x694>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a82      	ldr	r2, [pc, #520]	@ (8004b44 <HAL_DMA_IRQHandler+0x698>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a80      	ldr	r2, [pc, #512]	@ (8004b48 <HAL_DMA_IRQHandler+0x69c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b4c <HAL_DMA_IRQHandler+0x6a0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7d      	ldr	r2, [pc, #500]	@ (8004b50 <HAL_DMA_IRQHandler+0x6a4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7c      	ldr	r2, [pc, #496]	@ (8004b54 <HAL_DMA_IRQHandler+0x6a8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b58 <HAL_DMA_IRQHandler+0x6ac>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a79      	ldr	r2, [pc, #484]	@ (8004b5c <HAL_DMA_IRQHandler+0x6b0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a77      	ldr	r2, [pc, #476]	@ (8004b60 <HAL_DMA_IRQHandler+0x6b4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a76      	ldr	r2, [pc, #472]	@ (8004b64 <HAL_DMA_IRQHandler+0x6b8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a74      	ldr	r2, [pc, #464]	@ (8004b68 <HAL_DMA_IRQHandler+0x6bc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a73      	ldr	r2, [pc, #460]	@ (8004b6c <HAL_DMA_IRQHandler+0x6c0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a71      	ldr	r2, [pc, #452]	@ (8004b70 <HAL_DMA_IRQHandler+0x6c4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	@ (8004b74 <HAL_DMA_IRQHandler+0x6c8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b78 <HAL_DMA_IRQHandler+0x6cc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10a      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x52c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e009      	b.n	80049ec <HAL_DMA_IRQHandler+0x540>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03e      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2210      	movs	r2, #16
 80049fa:	409a      	lsls	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d024      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
 8004a2c:	e01f      	b.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01b      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
 8004a3e:	e016      	b.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2220      	movs	r2, #32
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8110 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <HAL_DMA_IRQHandler+0x690>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <HAL_DMA_IRQHandler+0x694>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	@ (8004b44 <HAL_DMA_IRQHandler+0x698>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a28      	ldr	r2, [pc, #160]	@ (8004b48 <HAL_DMA_IRQHandler+0x69c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	@ (8004b4c <HAL_DMA_IRQHandler+0x6a0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	@ (8004b50 <HAL_DMA_IRQHandler+0x6a4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	@ (8004b54 <HAL_DMA_IRQHandler+0x6a8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_DMA_IRQHandler+0x6ac>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <HAL_DMA_IRQHandler+0x6b0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <HAL_DMA_IRQHandler+0x6b4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	@ (8004b64 <HAL_DMA_IRQHandler+0x6b8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b68 <HAL_DMA_IRQHandler+0x6bc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1a      	ldr	r2, [pc, #104]	@ (8004b6c <HAL_DMA_IRQHandler+0x6c0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <HAL_DMA_IRQHandler+0x6c4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <HAL_DMA_IRQHandler+0x6c8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <HAL_DMA_IRQHandler+0x6cc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d12b      	bne.n	8004b7c <HAL_DMA_IRQHandler+0x6d0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e02a      	b.n	8004b90 <HAL_DMA_IRQHandler+0x6e4>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8087 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d139      	bne.n	8004c26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0216 	bic.w	r2, r2, #22
 8004bc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x736>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0208 	bic.w	r2, r2, #8
 8004bf0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	223f      	movs	r2, #63	@ 0x3f
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 834a 	beq.w	80052b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
          }
          return;
 8004c24:	e344      	b.n	80052b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d018      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02c      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
 8004c52:	e027      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
 8004c64:	e01e      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0210 	bic.w	r2, r2, #16
 8004c82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8306 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8088 	beq.w	8004dcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa08>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a79      	ldr	r2, [pc, #484]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa0c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	@ (8004ebc <HAL_DMA_IRQHandler+0xa10>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a76      	ldr	r2, [pc, #472]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa14>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a74      	ldr	r2, [pc, #464]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa18>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	@ (8004ec8 <HAL_DMA_IRQHandler+0xa1c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a71      	ldr	r2, [pc, #452]	@ (8004ecc <HAL_DMA_IRQHandler+0xa20>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	@ (8004ed0 <HAL_DMA_IRQHandler+0xa24>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed4 <HAL_DMA_IRQHandler+0xa28>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	@ (8004ed8 <HAL_DMA_IRQHandler+0xa2c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004edc <HAL_DMA_IRQHandler+0xa30>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee0 <HAL_DMA_IRQHandler+0xa34>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	@ (8004ee4 <HAL_DMA_IRQHandler+0xa38>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a67      	ldr	r2, [pc, #412]	@ (8004ee8 <HAL_DMA_IRQHandler+0xa3c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a65      	ldr	r2, [pc, #404]	@ (8004eec <HAL_DMA_IRQHandler+0xa40>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a64      	ldr	r2, [pc, #400]	@ (8004ef0 <HAL_DMA_IRQHandler+0xa44>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x8ca>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e007      	b.n	8004d86 <HAL_DMA_IRQHandler+0x8da>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d307      	bcc.n	8004da2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f2      	bne.n	8004d86 <HAL_DMA_IRQHandler+0x8da>
 8004da0:	e000      	b.n	8004da4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004da2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004dba:	e003      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8272 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
 8004dde:	e26c      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a43      	ldr	r2, [pc, #268]	@ (8004ef4 <HAL_DMA_IRQHandler+0xa48>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a42      	ldr	r2, [pc, #264]	@ (8004ef8 <HAL_DMA_IRQHandler+0xa4c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01d      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a40      	ldr	r2, [pc, #256]	@ (8004efc <HAL_DMA_IRQHandler+0xa50>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	@ (8004f00 <HAL_DMA_IRQHandler+0xa54>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f04 <HAL_DMA_IRQHandler+0xa58>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a3c      	ldr	r2, [pc, #240]	@ (8004f08 <HAL_DMA_IRQHandler+0xa5c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3a      	ldr	r2, [pc, #232]	@ (8004f0c <HAL_DMA_IRQHandler+0xa60>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a39      	ldr	r2, [pc, #228]	@ (8004f10 <HAL_DMA_IRQHandler+0xa64>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x988>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_DMA_IRQHandler+0x98a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 823f 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80cd 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0xb48>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80c7 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2204      	movs	r2, #4
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d049      	beq.n	8004f14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8210 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e20a      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8206 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e200      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
 8004eb2:	bf00      	nop
 8004eb4:	40020010 	.word	0x40020010
 8004eb8:	40020028 	.word	0x40020028
 8004ebc:	40020040 	.word	0x40020040
 8004ec0:	40020058 	.word	0x40020058
 8004ec4:	40020070 	.word	0x40020070
 8004ec8:	40020088 	.word	0x40020088
 8004ecc:	400200a0 	.word	0x400200a0
 8004ed0:	400200b8 	.word	0x400200b8
 8004ed4:	40020410 	.word	0x40020410
 8004ed8:	40020428 	.word	0x40020428
 8004edc:	40020440 	.word	0x40020440
 8004ee0:	40020458 	.word	0x40020458
 8004ee4:	40020470 	.word	0x40020470
 8004ee8:	40020488 	.word	0x40020488
 8004eec:	400204a0 	.word	0x400204a0
 8004ef0:	400204b8 	.word	0x400204b8
 8004ef4:	58025408 	.word	0x58025408
 8004ef8:	5802541c 	.word	0x5802541c
 8004efc:	58025430 	.word	0x58025430
 8004f00:	58025444 	.word	0x58025444
 8004f04:	58025458 	.word	0x58025458
 8004f08:	5802546c 	.word	0x5802546c
 8004f0c:	58025480 	.word	0x58025480
 8004f10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d160      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a7f      	ldr	r2, [pc, #508]	@ (8005120 <HAL_DMA_IRQHandler+0xc74>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d04a      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7d      	ldr	r2, [pc, #500]	@ (8005124 <HAL_DMA_IRQHandler+0xc78>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d045      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7c      	ldr	r2, [pc, #496]	@ (8005128 <HAL_DMA_IRQHandler+0xc7c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d040      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a7a      	ldr	r2, [pc, #488]	@ (800512c <HAL_DMA_IRQHandler+0xc80>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d03b      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a79      	ldr	r2, [pc, #484]	@ (8005130 <HAL_DMA_IRQHandler+0xc84>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d036      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a77      	ldr	r2, [pc, #476]	@ (8005134 <HAL_DMA_IRQHandler+0xc88>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a76      	ldr	r2, [pc, #472]	@ (8005138 <HAL_DMA_IRQHandler+0xc8c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d02c      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a74      	ldr	r2, [pc, #464]	@ (800513c <HAL_DMA_IRQHandler+0xc90>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d027      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a73      	ldr	r2, [pc, #460]	@ (8005140 <HAL_DMA_IRQHandler+0xc94>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a71      	ldr	r2, [pc, #452]	@ (8005144 <HAL_DMA_IRQHandler+0xc98>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a70      	ldr	r2, [pc, #448]	@ (8005148 <HAL_DMA_IRQHandler+0xc9c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_DMA_IRQHandler+0xca0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6d      	ldr	r2, [pc, #436]	@ (8005150 <HAL_DMA_IRQHandler+0xca4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8005154 <HAL_DMA_IRQHandler+0xca8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6a      	ldr	r2, [pc, #424]	@ (8005158 <HAL_DMA_IRQHandler+0xcac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a68      	ldr	r2, [pc, #416]	@ (800515c <HAL_DMA_IRQHandler+0xcb0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0xb24>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0208 	bic.w	r2, r2, #8
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e007      	b.n	8004fe0 <HAL_DMA_IRQHandler+0xb34>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0204 	bic.w	r2, r2, #4
 8004fde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8165 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff2:	e15f      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	409a      	lsls	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80c5 	beq.w	8005194 <HAL_DMA_IRQHandler+0xce8>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80bf 	beq.w	8005194 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	2202      	movs	r2, #2
 8005020:	409a      	lsls	r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d018      	beq.n	8005062 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 813a 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800504c:	e134      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8130 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005060:	e12a      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 8089 	bne.w	8005180 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	@ (8005120 <HAL_DMA_IRQHandler+0xc74>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d04a      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <HAL_DMA_IRQHandler+0xc78>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d045      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <HAL_DMA_IRQHandler+0xc7c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d040      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	@ (800512c <HAL_DMA_IRQHandler+0xc80>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d03b      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	@ (8005130 <HAL_DMA_IRQHandler+0xc84>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d036      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	@ (8005134 <HAL_DMA_IRQHandler+0xc88>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d031      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <HAL_DMA_IRQHandler+0xc8c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d02c      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a20      	ldr	r2, [pc, #128]	@ (800513c <HAL_DMA_IRQHandler+0xc90>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d027      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005140 <HAL_DMA_IRQHandler+0xc94>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005144 <HAL_DMA_IRQHandler+0xc98>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01d      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005148 <HAL_DMA_IRQHandler+0xc9c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	@ (800514c <HAL_DMA_IRQHandler+0xca0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <HAL_DMA_IRQHandler+0xca4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <HAL_DMA_IRQHandler+0xca8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <HAL_DMA_IRQHandler+0xcac>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a14      	ldr	r2, [pc, #80]	@ (800515c <HAL_DMA_IRQHandler+0xcb0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d128      	bne.n	8005160 <HAL_DMA_IRQHandler+0xcb4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0214 	bic.w	r2, r2, #20
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e027      	b.n	8005170 <HAL_DMA_IRQHandler+0xcc4>
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 020a 	bic.w	r2, r2, #10
 800516e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8097 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005192:	e091      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2208      	movs	r2, #8
 800519e:	409a      	lsls	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8088 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8082 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a41      	ldr	r2, [pc, #260]	@ (80052c0 <HAL_DMA_IRQHandler+0xe14>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3f      	ldr	r2, [pc, #252]	@ (80052c4 <HAL_DMA_IRQHandler+0xe18>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3e      	ldr	r2, [pc, #248]	@ (80052c8 <HAL_DMA_IRQHandler+0xe1c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3c      	ldr	r2, [pc, #240]	@ (80052cc <HAL_DMA_IRQHandler+0xe20>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3b      	ldr	r2, [pc, #236]	@ (80052d0 <HAL_DMA_IRQHandler+0xe24>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a39      	ldr	r2, [pc, #228]	@ (80052d4 <HAL_DMA_IRQHandler+0xe28>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a38      	ldr	r2, [pc, #224]	@ (80052d8 <HAL_DMA_IRQHandler+0xe2c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a36      	ldr	r2, [pc, #216]	@ (80052dc <HAL_DMA_IRQHandler+0xe30>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a35      	ldr	r2, [pc, #212]	@ (80052e0 <HAL_DMA_IRQHandler+0xe34>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <HAL_DMA_IRQHandler+0xe38>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a32      	ldr	r2, [pc, #200]	@ (80052e8 <HAL_DMA_IRQHandler+0xe3c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a30      	ldr	r2, [pc, #192]	@ (80052ec <HAL_DMA_IRQHandler+0xe40>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <HAL_DMA_IRQHandler+0xe44>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <HAL_DMA_IRQHandler+0xe48>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <HAL_DMA_IRQHandler+0xe4c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2a      	ldr	r2, [pc, #168]	@ (80052fc <HAL_DMA_IRQHandler+0xe50>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <HAL_DMA_IRQHandler+0xdbc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 021c 	bic.w	r2, r2, #28
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e007      	b.n	8005278 <HAL_DMA_IRQHandler+0xdcc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 020e 	bic.w	r2, r2, #14
 8005276:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2201      	movs	r2, #1
 8005282:	409a      	lsls	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e004      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052ba:	3728      	adds	r7, #40	@ 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8

08005300 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7f      	ldr	r2, [pc, #508]	@ (800551c <DMA_SetConfig+0x21c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d072      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a7d      	ldr	r2, [pc, #500]	@ (8005520 <DMA_SetConfig+0x220>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d06d      	beq.n	800540a <DMA_SetConfig+0x10a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7c      	ldr	r2, [pc, #496]	@ (8005524 <DMA_SetConfig+0x224>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d068      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a7a      	ldr	r2, [pc, #488]	@ (8005528 <DMA_SetConfig+0x228>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d063      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a79      	ldr	r2, [pc, #484]	@ (800552c <DMA_SetConfig+0x22c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d05e      	beq.n	800540a <DMA_SetConfig+0x10a>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a77      	ldr	r2, [pc, #476]	@ (8005530 <DMA_SetConfig+0x230>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d059      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	@ (8005534 <DMA_SetConfig+0x234>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d054      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a74      	ldr	r2, [pc, #464]	@ (8005538 <DMA_SetConfig+0x238>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04f      	beq.n	800540a <DMA_SetConfig+0x10a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	@ (800553c <DMA_SetConfig+0x23c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a71      	ldr	r2, [pc, #452]	@ (8005540 <DMA_SetConfig+0x240>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <DMA_SetConfig+0x10a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a70      	ldr	r2, [pc, #448]	@ (8005544 <DMA_SetConfig+0x244>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6e      	ldr	r2, [pc, #440]	@ (8005548 <DMA_SetConfig+0x248>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6d      	ldr	r2, [pc, #436]	@ (800554c <DMA_SetConfig+0x24c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <DMA_SetConfig+0x10a>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005550 <DMA_SetConfig+0x250>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005554 <DMA_SetConfig+0x254>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a68      	ldr	r2, [pc, #416]	@ (8005558 <DMA_SetConfig+0x258>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a67      	ldr	r2, [pc, #412]	@ (800555c <DMA_SetConfig+0x25c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	@ (8005560 <DMA_SetConfig+0x260>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a64      	ldr	r2, [pc, #400]	@ (8005564 <DMA_SetConfig+0x264>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a62      	ldr	r2, [pc, #392]	@ (8005568 <DMA_SetConfig+0x268>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a61      	ldr	r2, [pc, #388]	@ (800556c <DMA_SetConfig+0x26c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005570 <DMA_SetConfig+0x270>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005574 <DMA_SetConfig+0x274>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5c      	ldr	r2, [pc, #368]	@ (8005578 <DMA_SetConfig+0x278>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <DMA_SetConfig+0x10e>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <DMA_SetConfig+0x110>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800541c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800542e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a39      	ldr	r2, [pc, #228]	@ (800551c <DMA_SetConfig+0x21c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d04a      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	@ (8005520 <DMA_SetConfig+0x220>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d045      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a36      	ldr	r2, [pc, #216]	@ (8005524 <DMA_SetConfig+0x224>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d040      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a35      	ldr	r2, [pc, #212]	@ (8005528 <DMA_SetConfig+0x228>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d03b      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a33      	ldr	r2, [pc, #204]	@ (800552c <DMA_SetConfig+0x22c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d036      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a32      	ldr	r2, [pc, #200]	@ (8005530 <DMA_SetConfig+0x230>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d031      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a30      	ldr	r2, [pc, #192]	@ (8005534 <DMA_SetConfig+0x234>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02c      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2f      	ldr	r2, [pc, #188]	@ (8005538 <DMA_SetConfig+0x238>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d027      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <DMA_SetConfig+0x23c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <DMA_SetConfig+0x240>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d01d      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <DMA_SetConfig+0x244>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <DMA_SetConfig+0x248>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a27      	ldr	r2, [pc, #156]	@ (800554c <DMA_SetConfig+0x24c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a26      	ldr	r2, [pc, #152]	@ (8005550 <DMA_SetConfig+0x250>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a24      	ldr	r2, [pc, #144]	@ (8005554 <DMA_SetConfig+0x254>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <DMA_SetConfig+0x258>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <DMA_SetConfig+0x1d4>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <DMA_SetConfig+0x1d6>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d059      	beq.n	800558e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	223f      	movs	r2, #63	@ 0x3f
 80054e4:	409a      	lsls	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d138      	bne.n	800557c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800551a:	e086      	b.n	800562a <DMA_SetConfig+0x32a>
 800551c:	40020010 	.word	0x40020010
 8005520:	40020028 	.word	0x40020028
 8005524:	40020040 	.word	0x40020040
 8005528:	40020058 	.word	0x40020058
 800552c:	40020070 	.word	0x40020070
 8005530:	40020088 	.word	0x40020088
 8005534:	400200a0 	.word	0x400200a0
 8005538:	400200b8 	.word	0x400200b8
 800553c:	40020410 	.word	0x40020410
 8005540:	40020428 	.word	0x40020428
 8005544:	40020440 	.word	0x40020440
 8005548:	40020458 	.word	0x40020458
 800554c:	40020470 	.word	0x40020470
 8005550:	40020488 	.word	0x40020488
 8005554:	400204a0 	.word	0x400204a0
 8005558:	400204b8 	.word	0x400204b8
 800555c:	58025408 	.word	0x58025408
 8005560:	5802541c 	.word	0x5802541c
 8005564:	58025430 	.word	0x58025430
 8005568:	58025444 	.word	0x58025444
 800556c:	58025458 	.word	0x58025458
 8005570:	5802546c 	.word	0x5802546c
 8005574:	58025480 	.word	0x58025480
 8005578:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
}
 800558c:	e04d      	b.n	800562a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a29      	ldr	r2, [pc, #164]	@ (8005638 <DMA_SetConfig+0x338>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <DMA_SetConfig+0x2de>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a27      	ldr	r2, [pc, #156]	@ (800563c <DMA_SetConfig+0x33c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <DMA_SetConfig+0x340>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <DMA_SetConfig+0x344>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a23      	ldr	r2, [pc, #140]	@ (8005648 <DMA_SetConfig+0x348>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a21      	ldr	r2, [pc, #132]	@ (800564c <DMA_SetConfig+0x34c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a20      	ldr	r2, [pc, #128]	@ (8005650 <DMA_SetConfig+0x350>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <DMA_SetConfig+0x354>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <DMA_SetConfig+0x2e2>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <DMA_SetConfig+0x2e4>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d108      	bne.n	800561a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	60da      	str	r2, [r3, #12]
}
 8005618:	e007      	b.n	800562a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	58025408 	.word	0x58025408
 800563c:	5802541c 	.word	0x5802541c
 8005640:	58025430 	.word	0x58025430
 8005644:	58025444 	.word	0x58025444
 8005648:	58025458 	.word	0x58025458
 800564c:	5802546c 	.word	0x5802546c
 8005650:	58025480 	.word	0x58025480
 8005654:	58025494 	.word	0x58025494

08005658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a42      	ldr	r2, [pc, #264]	@ (8005770 <DMA_CalcBaseAndBitshift+0x118>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d04a      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a41      	ldr	r2, [pc, #260]	@ (8005774 <DMA_CalcBaseAndBitshift+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d045      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a3f      	ldr	r2, [pc, #252]	@ (8005778 <DMA_CalcBaseAndBitshift+0x120>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d040      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a3e      	ldr	r2, [pc, #248]	@ (800577c <DMA_CalcBaseAndBitshift+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d03b      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a3c      	ldr	r2, [pc, #240]	@ (8005780 <DMA_CalcBaseAndBitshift+0x128>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d036      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3b      	ldr	r2, [pc, #236]	@ (8005784 <DMA_CalcBaseAndBitshift+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d031      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a39      	ldr	r2, [pc, #228]	@ (8005788 <DMA_CalcBaseAndBitshift+0x130>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02c      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a38      	ldr	r2, [pc, #224]	@ (800578c <DMA_CalcBaseAndBitshift+0x134>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d027      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a36      	ldr	r2, [pc, #216]	@ (8005790 <DMA_CalcBaseAndBitshift+0x138>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d022      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a35      	ldr	r2, [pc, #212]	@ (8005794 <DMA_CalcBaseAndBitshift+0x13c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d01d      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a33      	ldr	r2, [pc, #204]	@ (8005798 <DMA_CalcBaseAndBitshift+0x140>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a32      	ldr	r2, [pc, #200]	@ (800579c <DMA_CalcBaseAndBitshift+0x144>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x148>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x150>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2c      	ldr	r2, [pc, #176]	@ (80057ac <DMA_CalcBaseAndBitshift+0x154>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <DMA_CalcBaseAndBitshift+0xac>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <DMA_CalcBaseAndBitshift+0xae>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d024      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3b10      	subs	r3, #16
 8005712:	4a27      	ldr	r2, [pc, #156]	@ (80057b0 <DMA_CalcBaseAndBitshift+0x158>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	4a24      	ldr	r2, [pc, #144]	@ (80057b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005724:	5cd3      	ldrb	r3, [r2, r3]
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d908      	bls.n	8005744 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <DMA_CalcBaseAndBitshift+0x160>)
 800573a:	4013      	ands	r3, r2
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	659a      	str	r2, [r3, #88]	@ 0x58
 8005742:	e00d      	b.n	8005760 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <DMA_CalcBaseAndBitshift+0x160>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6593      	str	r3, [r2, #88]	@ 0x58
 8005752:	e005      	b.n	8005760 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
 80057b0:	aaaaaaab 	.word	0xaaaaaaab
 80057b4:	0801b394 	.word	0x0801b394
 80057b8:	fffffc00 	.word	0xfffffc00

080057bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d120      	bne.n	8005812 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d858      	bhi.n	800588a <DMA_CheckFifoParam+0xce>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <DMA_CheckFifoParam+0x24>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005803 	.word	0x08005803
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	0800588b 	.word	0x0800588b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d048      	beq.n	800588e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005800:	e045      	b.n	800588e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800580a:	d142      	bne.n	8005892 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005810:	e03f      	b.n	8005892 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581a:	d123      	bne.n	8005864 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b03      	cmp	r3, #3
 8005822:	d838      	bhi.n	8005896 <DMA_CheckFifoParam+0xda>
 8005824:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <DMA_CheckFifoParam+0x70>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	0800583d 	.word	0x0800583d
 8005830:	08005843 	.word	0x08005843
 8005834:	0800583d 	.word	0x0800583d
 8005838:	08005855 	.word	0x08005855
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
        break;
 8005840:	e030      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d025      	beq.n	800589a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005852:	e022      	b.n	800589a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800585c:	d11f      	bne.n	800589e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005862:	e01c      	b.n	800589e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	2b02      	cmp	r3, #2
 800586a:	d902      	bls.n	8005872 <DMA_CheckFifoParam+0xb6>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005870:	e018      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
        break;
 8005876:	e015      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
    break;
 8005888:	e00b      	b.n	80058a2 <DMA_CheckFifoParam+0xe6>
        break;
 800588a:	bf00      	nop
 800588c:	e00a      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800588e:	bf00      	nop
 8005890:	e008      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005892:	bf00      	nop
 8005894:	e006      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
    break;
 80058a2:	bf00      	nop
    }
  }

  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a38      	ldr	r2, [pc, #224]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a36      	ldr	r2, [pc, #216]	@ (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a33      	ldr	r2, [pc, #204]	@ (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a32      	ldr	r2, [pc, #200]	@ (80059b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a30      	ldr	r2, [pc, #192]	@ (80059bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2f      	ldr	r2, [pc, #188]	@ (80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2d      	ldr	r2, [pc, #180]	@ (80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01a      	beq.n	8005952 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3b08      	subs	r3, #8
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a24      	ldr	r2, [pc, #144]	@ (80059d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005940:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2201      	movs	r2, #1
 800594a:	409a      	lsls	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005950:	e024      	b.n	800599c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3b10      	subs	r3, #16
 800595a:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d806      	bhi.n	800597a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d902      	bls.n	800597a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3308      	adds	r3, #8
 8005978:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800598c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2201      	movs	r2, #1
 8005996:	409a      	lsls	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	cccccccd 	.word	0xcccccccd
 80059cc:	16009600 	.word	0x16009600
 80059d0:	58025880 	.word	0x58025880
 80059d4:	aaaaaaab 	.word	0xaaaaaaab
 80059d8:	400204b8 	.word	0x400204b8
 80059dc:	4002040f 	.word	0x4002040f
 80059e0:	10008200 	.word	0x10008200
 80059e4:	40020880 	.word	0x40020880

080059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04a      	beq.n	8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d847      	bhi.n	8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a25      	ldr	r2, [pc, #148]	@ (8005aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a24      	ldr	r2, [pc, #144]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a70:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a72:	e009      	b.n	8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b14      	ldr	r3, [pc, #80]	@ (8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a11      	ldr	r2, [pc, #68]	@ (8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	58025408 	.word	0x58025408
 8005aa4:	5802541c 	.word	0x5802541c
 8005aa8:	58025430 	.word	0x58025430
 8005aac:	58025444 	.word	0x58025444
 8005ab0:	58025458 	.word	0x58025458
 8005ab4:	5802546c 	.word	0x5802546c
 8005ab8:	58025480 	.word	0x58025480
 8005abc:	58025494 	.word	0x58025494
 8005ac0:	1600963f 	.word	0x1600963f
 8005ac4:	58025940 	.word	0x58025940
 8005ac8:	1000823f 	.word	0x1000823f
 8005acc:	40020940 	.word	0x40020940

08005ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	@ 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ade:	4b89      	ldr	r3, [pc, #548]	@ (8005d04 <HAL_GPIO_Init+0x234>)
 8005ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ae2:	e194      	b.n	8005e0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	4013      	ands	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8186 	beq.w	8005e08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d005      	beq.n	8005b14 <HAL_GPIO_Init+0x44>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d130      	bne.n	8005b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	2203      	movs	r2, #3
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0201 	and.w	r2, r3, #1
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d017      	beq.n	8005bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d123      	bne.n	8005c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	08da      	lsrs	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	08da      	lsrs	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3208      	adds	r2, #8
 8005c00:	69b9      	ldr	r1, [r7, #24]
 8005c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2203      	movs	r2, #3
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0203 	and.w	r2, r3, #3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80e0 	beq.w	8005e08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c48:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <HAL_GPIO_Init+0x238>)
 8005c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005d08 <HAL_GPIO_Init+0x238>)
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c58:	4b2b      	ldr	r3, [pc, #172]	@ (8005d08 <HAL_GPIO_Init+0x238>)
 8005c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c66:	4a29      	ldr	r2, [pc, #164]	@ (8005d0c <HAL_GPIO_Init+0x23c>)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	220f      	movs	r2, #15
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	@ (8005d10 <HAL_GPIO_Init+0x240>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d052      	beq.n	8005d38 <HAL_GPIO_Init+0x268>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_GPIO_Init+0x244>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d031      	beq.n	8005cfe <HAL_GPIO_Init+0x22e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_GPIO_Init+0x248>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d02b      	beq.n	8005cfa <HAL_GPIO_Init+0x22a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <HAL_GPIO_Init+0x24c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d025      	beq.n	8005cf6 <HAL_GPIO_Init+0x226>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <HAL_GPIO_Init+0x250>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01f      	beq.n	8005cf2 <HAL_GPIO_Init+0x222>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <HAL_GPIO_Init+0x254>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d019      	beq.n	8005cee <HAL_GPIO_Init+0x21e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <HAL_GPIO_Init+0x258>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_GPIO_Init+0x21a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a19      	ldr	r2, [pc, #100]	@ (8005d2c <HAL_GPIO_Init+0x25c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00d      	beq.n	8005ce6 <HAL_GPIO_Init+0x216>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a18      	ldr	r2, [pc, #96]	@ (8005d30 <HAL_GPIO_Init+0x260>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <HAL_GPIO_Init+0x212>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a17      	ldr	r2, [pc, #92]	@ (8005d34 <HAL_GPIO_Init+0x264>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d101      	bne.n	8005cde <HAL_GPIO_Init+0x20e>
 8005cda:	2309      	movs	r3, #9
 8005cdc:	e02d      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cde:	230a      	movs	r3, #10
 8005ce0:	e02b      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	e029      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005ce6:	2307      	movs	r3, #7
 8005ce8:	e027      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cea:	2306      	movs	r3, #6
 8005cec:	e025      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cee:	2305      	movs	r3, #5
 8005cf0:	e023      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	e021      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e01f      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e01d      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e01b      	b.n	8005d3a <HAL_GPIO_Init+0x26a>
 8005d02:	bf00      	nop
 8005d04:	58000080 	.word	0x58000080
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	58000400 	.word	0x58000400
 8005d10:	58020000 	.word	0x58020000
 8005d14:	58020400 	.word	0x58020400
 8005d18:	58020800 	.word	0x58020800
 8005d1c:	58020c00 	.word	0x58020c00
 8005d20:	58021000 	.word	0x58021000
 8005d24:	58021400 	.word	0x58021400
 8005d28:	58021800 	.word	0x58021800
 8005d2c:	58021c00 	.word	0x58021c00
 8005d30:	58022000 	.word	0x58022000
 8005d34:	58022400 	.word	0x58022400
 8005d38:	2300      	movs	r3, #0
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	f002 0203 	and.w	r2, r2, #3
 8005d40:	0092      	lsls	r2, r2, #2
 8005d42:	4093      	lsls	r3, r2
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d4a:	4938      	ldr	r1, [pc, #224]	@ (8005e2c <HAL_GPIO_Init+0x35c>)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	3302      	adds	r3, #2
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	43db      	mvns	r3, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4013      	ands	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4013      	ands	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f47f ae63 	bne.w	8005ae4 <HAL_GPIO_Init+0x14>
  }
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	3724      	adds	r7, #36	@ 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	58000400 	.word	0x58000400

08005e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	887b      	ldrh	r3, [r7, #2]
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e001      	b.n	8005e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	807b      	strh	r3, [r7, #2]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e70:	787b      	ldrb	r3, [r7, #1]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e7c:	e003      	b.n	8005e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e7e:	887b      	ldrh	r3, [r7, #2]
 8005e80:	041a      	lsls	r2, r3, #16
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	619a      	str	r2, [r3, #24]
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ea4:	887a      	ldrh	r2, [r7, #2]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	041a      	lsls	r2, r3, #16
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	43d9      	mvns	r1, r3
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	619a      	str	r2, [r3, #24]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	4603      	mov	r3, r0
 8005ece:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa fbdd 	bl	80006ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f04:	4b19      	ldr	r3, [pc, #100]	@ (8005f6c <HAL_PWREx_ConfigSupply+0x70>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d00a      	beq.n	8005f26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f10:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <HAL_PWREx_ConfigSupply+0x70>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d001      	beq.n	8005f22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e01f      	b.n	8005f62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e01d      	b.n	8005f62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f26:	4b11      	ldr	r3, [pc, #68]	@ (8005f6c <HAL_PWREx_ConfigSupply+0x70>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f023 0207 	bic.w	r2, r3, #7
 8005f2e:	490f      	ldr	r1, [pc, #60]	@ (8005f6c <HAL_PWREx_ConfigSupply+0x70>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f36:	f7fc fe73 	bl	8002c20 <HAL_GetTick>
 8005f3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f3c:	e009      	b.n	8005f52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f3e:	f7fc fe6f 	bl	8002c20 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f4c:	d901      	bls.n	8005f52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e007      	b.n	8005f62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f52:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <HAL_PWREx_ConfigSupply+0x70>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	58024800 	.word	0x58024800

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	@ 0x30
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f000 bc48 	b.w	8006814 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8088 	beq.w	80060a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f92:	4b99      	ldr	r3, [pc, #612]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f9c:	4b96      	ldr	r3, [pc, #600]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d007      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x48>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	2b18      	cmp	r3, #24
 8005fac:	d111      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x62>
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d06d      	beq.n	80060a0 <HAL_RCC_OscConfig+0x130>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d169      	bne.n	80060a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f000 bc21 	b.w	8006814 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x7a>
 8005fdc:	4b86      	ldr	r3, [pc, #536]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a85      	ldr	r2, [pc, #532]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e02e      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x9c>
 8005ff2:	4b81      	ldr	r3, [pc, #516]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a80      	ldr	r2, [pc, #512]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8005ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b7e      	ldr	r3, [pc, #504]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e01d      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0xc0>
 8006016:	4b78      	ldr	r3, [pc, #480]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a77      	ldr	r2, [pc, #476]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800601c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b75      	ldr	r3, [pc, #468]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a74      	ldr	r2, [pc, #464]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e00b      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 8006030:	4b71      	ldr	r3, [pc, #452]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a70      	ldr	r2, [pc, #448]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	4b6e      	ldr	r3, [pc, #440]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a6d      	ldr	r2, [pc, #436]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fc fde6 	bl	8002c20 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006058:	f7fc fde2 	bl	8002c20 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	@ 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e3d4      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800606a:	4b63      	ldr	r3, [pc, #396]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc fdd2 	bl	8002c20 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006080:	f7fc fdce 	bl	8002c20 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	@ 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e3c0      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006092:	4b59      	ldr	r3, [pc, #356]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x110>
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80ca 	beq.w	8006244 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b0:	4b51      	ldr	r3, [pc, #324]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ba:	4b4f      	ldr	r3, [pc, #316]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_RCC_OscConfig+0x166>
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b18      	cmp	r3, #24
 80060ca:	d156      	bne.n	800617a <HAL_RCC_OscConfig+0x20a>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d151      	bne.n	800617a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d6:	4b48      	ldr	r3, [pc, #288]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e392      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060ee:	4b42      	ldr	r3, [pc, #264]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 0219 	bic.w	r2, r3, #25
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	493f      	ldr	r1, [pc, #252]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fc fd8e 	bl	8002c20 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006108:	f7fc fd8a 	bl	8002c20 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e37c      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800611a:	4b37      	ldr	r3, [pc, #220]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	f7fc fdab 	bl	8002c80 <HAL_GetREVID>
 800612a:	4603      	mov	r3, r0
 800612c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006130:	4293      	cmp	r3, r2
 8006132:	d817      	bhi.n	8006164 <HAL_RCC_OscConfig+0x1f4>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d108      	bne.n	800614e <HAL_RCC_OscConfig+0x1de>
 800613c:	4b2e      	ldr	r3, [pc, #184]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006144:	4a2c      	ldr	r2, [pc, #176]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800614c:	e07a      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614e:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	4926      	ldr	r1, [pc, #152]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006162:	e06f      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006164:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	4921      	ldr	r1, [pc, #132]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006178:	e064      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d047      	beq.n	8006212 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 0219 	bic.w	r2, r3, #25
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	491a      	ldr	r1, [pc, #104]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 8006190:	4313      	orrs	r3, r2
 8006192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006194:	f7fc fd44 	bl	8002c20 <HAL_GetTick>
 8006198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800619c:	f7fc fd40 	bl	8002c20 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e332      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ae:	4b12      	ldr	r3, [pc, #72]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ba:	f7fc fd61 	bl	8002c80 <HAL_GetREVID>
 80061be:	4603      	mov	r3, r0
 80061c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d819      	bhi.n	80061fc <HAL_RCC_OscConfig+0x28c>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b40      	cmp	r3, #64	@ 0x40
 80061ce:	d108      	bne.n	80061e2 <HAL_RCC_OscConfig+0x272>
 80061d0:	4b09      	ldr	r3, [pc, #36]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80061d8:	4a07      	ldr	r2, [pc, #28]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80061da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061de:	6053      	str	r3, [r2, #4]
 80061e0:	e030      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
 80061e2:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	031b      	lsls	r3, r3, #12
 80061f0:	4901      	ldr	r1, [pc, #4]	@ (80061f8 <HAL_RCC_OscConfig+0x288>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	604b      	str	r3, [r1, #4]
 80061f6:	e025      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
 80061f8:	58024400 	.word	0x58024400
 80061fc:	4b9a      	ldr	r3, [pc, #616]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	061b      	lsls	r3, r3, #24
 800620a:	4997      	ldr	r1, [pc, #604]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
 8006210:	e018      	b.n	8006244 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006212:	4b95      	ldr	r3, [pc, #596]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a94      	ldr	r2, [pc, #592]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fc fcff 	bl	8002c20 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006226:	f7fc fcfb 	bl	8002c20 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e2ed      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006238:	4b8b      	ldr	r3, [pc, #556]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a9 	beq.w	80063a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006252:	4b85      	ldr	r3, [pc, #532]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800625c:	4b82      	ldr	r3, [pc, #520]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006260:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d007      	beq.n	8006278 <HAL_RCC_OscConfig+0x308>
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b18      	cmp	r3, #24
 800626c:	d13a      	bne.n	80062e4 <HAL_RCC_OscConfig+0x374>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d135      	bne.n	80062e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006278:	4b7b      	ldr	r3, [pc, #492]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_RCC_OscConfig+0x320>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b80      	cmp	r3, #128	@ 0x80
 800628a:	d001      	beq.n	8006290 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e2c1      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006290:	f7fc fcf6 	bl	8002c80 <HAL_GetREVID>
 8006294:	4603      	mov	r3, r0
 8006296:	f241 0203 	movw	r2, #4099	@ 0x1003
 800629a:	4293      	cmp	r3, r2
 800629c:	d817      	bhi.n	80062ce <HAL_RCC_OscConfig+0x35e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d108      	bne.n	80062b8 <HAL_RCC_OscConfig+0x348>
 80062a6:	4b70      	ldr	r3, [pc, #448]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062ae:	4a6e      	ldr	r2, [pc, #440]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062b6:	e075      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	069b      	lsls	r3, r3, #26
 80062c6:	4968      	ldr	r1, [pc, #416]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062cc:	e06a      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ce:	4b66      	ldr	r3, [pc, #408]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	4962      	ldr	r1, [pc, #392]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062e2:	e05f      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d042      	beq.n	8006372 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80062f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fc fc92 	bl	8002c20 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006300:	f7fc fc8e 	bl	8002c20 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e280      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006312:	4b55      	ldr	r3, [pc, #340]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800631e:	f7fc fcaf 	bl	8002c80 <HAL_GetREVID>
 8006322:	4603      	mov	r3, r0
 8006324:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006328:	4293      	cmp	r3, r2
 800632a:	d817      	bhi.n	800635c <HAL_RCC_OscConfig+0x3ec>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	2b20      	cmp	r3, #32
 8006332:	d108      	bne.n	8006346 <HAL_RCC_OscConfig+0x3d6>
 8006334:	4b4c      	ldr	r3, [pc, #304]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800633c:	4a4a      	ldr	r2, [pc, #296]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006342:	6053      	str	r3, [r2, #4]
 8006344:	e02e      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
 8006346:	4b48      	ldr	r3, [pc, #288]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	069b      	lsls	r3, r3, #26
 8006354:	4944      	ldr	r1, [pc, #272]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
 800635a:	e023      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
 800635c:	4b42      	ldr	r3, [pc, #264]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	493f      	ldr	r1, [pc, #252]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	60cb      	str	r3, [r1, #12]
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006372:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3c      	ldr	r2, [pc, #240]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fc fc4f 	bl	8002c20 <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006386:	f7fc fc4b 	bl	8002c20 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e23d      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006398:	4b33      	ldr	r3, [pc, #204]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d036      	beq.n	800641e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d019      	beq.n	80063ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80063ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c4:	f7fc fc2c 	bl	8002c20 <HAL_GetTick>
 80063c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063cc:	f7fc fc28 	bl	8002c20 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e21a      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063de:	4b22      	ldr	r3, [pc, #136]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80063e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x45c>
 80063ea:	e018      	b.n	800641e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80063ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fc fc12 	bl	8002c20 <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fc fc0e 	bl	8002c20 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e200      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d039      	beq.n	800649e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01c      	beq.n	800646c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a0c      	ldr	r2, [pc, #48]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 8006438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800643c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800643e:	f7fc fbef 	bl	8002c20 <HAL_GetTick>
 8006442:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006446:	f7fc fbeb 	bl	8002c20 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e1dd      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006458:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <HAL_RCC_OscConfig+0x4f8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x4d6>
 8006464:	e01b      	b.n	800649e <HAL_RCC_OscConfig+0x52e>
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800646c:	4b9b      	ldr	r3, [pc, #620]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a9a      	ldr	r2, [pc, #616]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006476:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006478:	f7fc fbd2 	bl	8002c20 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006480:	f7fc fbce 	bl	8002c20 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e1c0      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006492:	4b92      	ldr	r3, [pc, #584]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8081 	beq.w	80065ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064ac:	4b8c      	ldr	r3, [pc, #560]	@ (80066e0 <HAL_RCC_OscConfig+0x770>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a8b      	ldr	r2, [pc, #556]	@ (80066e0 <HAL_RCC_OscConfig+0x770>)
 80064b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064b8:	f7fc fbb2 	bl	8002c20 <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c0:	f7fc fbae 	bl	8002c20 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	@ 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1a0      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064d2:	4b83      	ldr	r3, [pc, #524]	@ (80066e0 <HAL_RCC_OscConfig+0x770>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d106      	bne.n	80064f4 <HAL_RCC_OscConfig+0x584>
 80064e6:	4b7d      	ldr	r3, [pc, #500]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ea:	4a7c      	ldr	r2, [pc, #496]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f2:	e02d      	b.n	8006550 <HAL_RCC_OscConfig+0x5e0>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10c      	bne.n	8006516 <HAL_RCC_OscConfig+0x5a6>
 80064fc:	4b77      	ldr	r3, [pc, #476]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a76      	ldr	r2, [pc, #472]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	4b74      	ldr	r3, [pc, #464]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650c:	4a73      	ldr	r2, [pc, #460]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800650e:	f023 0304 	bic.w	r3, r3, #4
 8006512:	6713      	str	r3, [r2, #112]	@ 0x70
 8006514:	e01c      	b.n	8006550 <HAL_RCC_OscConfig+0x5e0>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d10c      	bne.n	8006538 <HAL_RCC_OscConfig+0x5c8>
 800651e:	4b6f      	ldr	r3, [pc, #444]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a6e      	ldr	r2, [pc, #440]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
 800652a:	4b6c      	ldr	r3, [pc, #432]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a6b      	ldr	r2, [pc, #428]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70
 8006536:	e00b      	b.n	8006550 <HAL_RCC_OscConfig+0x5e0>
 8006538:	4b68      	ldr	r3, [pc, #416]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653c:	4a67      	ldr	r2, [pc, #412]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	6713      	str	r3, [r2, #112]	@ 0x70
 8006544:	4b65      	ldr	r3, [pc, #404]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006548:	4a64      	ldr	r2, [pc, #400]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800654a:	f023 0304 	bic.w	r3, r3, #4
 800654e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fc fb62 	bl	8002c20 <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fc fb5e 	bl	8002c20 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e14e      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006576:	4b59      	ldr	r3, [pc, #356]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ee      	beq.n	8006560 <HAL_RCC_OscConfig+0x5f0>
 8006582:	e014      	b.n	80065ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fc fb4c 	bl	8002c20 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800658a:	e00a      	b.n	80065a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658c:	f7fc fb48 	bl	8002c20 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e138      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065a2:	4b4e      	ldr	r3, [pc, #312]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1ee      	bne.n	800658c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 812d 	beq.w	8006812 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065b8:	4b48      	ldr	r3, [pc, #288]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065c0:	2b18      	cmp	r3, #24
 80065c2:	f000 80bd 	beq.w	8006740 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	f040 809e 	bne.w	800670c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d0:	4b42      	ldr	r3, [pc, #264]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a41      	ldr	r2, [pc, #260]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80065d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065dc:	f7fc fb20 	bl	8002c20 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fc fb1c 	bl	8002c20 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e10e      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065f6:	4b39      	ldr	r3, [pc, #228]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006602:	4b36      	ldr	r3, [pc, #216]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006606:	4b37      	ldr	r3, [pc, #220]	@ (80066e4 <HAL_RCC_OscConfig+0x774>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	430a      	orrs	r2, r1
 8006616:	4931      	ldr	r1, [pc, #196]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006618:	4313      	orrs	r3, r2
 800661a:	628b      	str	r3, [r1, #40]	@ 0x28
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	3b01      	subs	r3, #1
 8006622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662a:	3b01      	subs	r3, #1
 800662c:	025b      	lsls	r3, r3, #9
 800662e:	b29b      	uxth	r3, r3
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	3b01      	subs	r3, #1
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	3b01      	subs	r3, #1
 8006646:	061b      	lsls	r3, r3, #24
 8006648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800664c:	4923      	ldr	r1, [pc, #140]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006652:	4b22      	ldr	r3, [pc, #136]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	4a21      	ldr	r2, [pc, #132]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800665e:	4b1f      	ldr	r3, [pc, #124]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006662:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <HAL_RCC_OscConfig+0x778>)
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800666a:	00d2      	lsls	r2, r2, #3
 800666c:	491b      	ldr	r1, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006672:	4b1a      	ldr	r3, [pc, #104]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	f023 020c 	bic.w	r2, r3, #12
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	4917      	ldr	r1, [pc, #92]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006680:	4313      	orrs	r3, r2
 8006682:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006684:	4b15      	ldr	r3, [pc, #84]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	f023 0202 	bic.w	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	4912      	ldr	r1, [pc, #72]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006696:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	4a10      	ldr	r2, [pc, #64]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 800669c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a2:	4b0e      	ldr	r3, [pc, #56]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	4a0d      	ldr	r2, [pc, #52]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	4a0a      	ldr	r2, [pc, #40]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80066ba:	4b08      	ldr	r3, [pc, #32]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a07      	ldr	r2, [pc, #28]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c6:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <HAL_RCC_OscConfig+0x76c>)
 80066cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fc faa5 	bl	8002c20 <HAL_GetTick>
 80066d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066d8:	e011      	b.n	80066fe <HAL_RCC_OscConfig+0x78e>
 80066da:	bf00      	nop
 80066dc:	58024400 	.word	0x58024400
 80066e0:	58024800 	.word	0x58024800
 80066e4:	fffffc0c 	.word	0xfffffc0c
 80066e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fc fa98 	bl	8002c20 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e08a      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066fe:	4b47      	ldr	r3, [pc, #284]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x77c>
 800670a:	e082      	b.n	8006812 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670c:	4b43      	ldr	r3, [pc, #268]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a42      	ldr	r2, [pc, #264]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fc fa82 	bl	8002c20 <HAL_GetTick>
 800671c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006720:	f7fc fa7e 	bl	8002c20 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e070      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006732:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x7b0>
 800673e:	e068      	b.n	8006812 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006740:	4b36      	ldr	r3, [pc, #216]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006746:	4b35      	ldr	r3, [pc, #212]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	2b01      	cmp	r3, #1
 8006752:	d031      	beq.n	80067b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f003 0203 	and.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d12a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d122      	bne.n	80067b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800677e:	429a      	cmp	r2, r3
 8006780:	d11a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	0a5b      	lsrs	r3, r3, #9
 8006786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d111      	bne.n	80067b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d108      	bne.n	80067b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	0e1b      	lsrs	r3, r3, #24
 80067aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e02b      	b.n	8006814 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80067bc:	4b17      	ldr	r3, [pc, #92]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 80067be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d01f      	beq.n	8006812 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80067d2:	4b12      	ldr	r3, [pc, #72]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	4a11      	ldr	r2, [pc, #68]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067de:	f7fc fa1f 	bl	8002c20 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80067e4:	bf00      	nop
 80067e6:	f7fc fa1b 	bl	8002c20 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d0f9      	beq.n	80067e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 80067f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <HAL_RCC_OscConfig+0x8b0>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067fe:	00d2      	lsls	r2, r2, #3
 8006800:	4906      	ldr	r1, [pc, #24]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006802:	4313      	orrs	r3, r2
 8006804:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006806:	4b05      	ldr	r3, [pc, #20]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	4a04      	ldr	r2, [pc, #16]	@ (800681c <HAL_RCC_OscConfig+0x8ac>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3730      	adds	r7, #48	@ 0x30
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	58024400 	.word	0x58024400
 8006820:	ffff0007 	.word	0xffff0007

08006824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e19c      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006838:	4b8a      	ldr	r3, [pc, #552]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d910      	bls.n	8006868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b87      	ldr	r3, [pc, #540]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 020f 	bic.w	r2, r3, #15
 800684e:	4985      	ldr	r1, [pc, #532]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	4313      	orrs	r3, r2
 8006854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	4b83      	ldr	r3, [pc, #524]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e184      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d010      	beq.n	8006896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	4b7b      	ldr	r3, [pc, #492]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006880:	429a      	cmp	r2, r3
 8006882:	d908      	bls.n	8006896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006884:	4b78      	ldr	r3, [pc, #480]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4975      	ldr	r1, [pc, #468]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006892:	4313      	orrs	r3, r2
 8006894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	4b70      	ldr	r3, [pc, #448]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d908      	bls.n	80068c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	496a      	ldr	r1, [pc, #424]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699a      	ldr	r2, [r3, #24]
 80068d4:	4b64      	ldr	r3, [pc, #400]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068dc:	429a      	cmp	r2, r3
 80068de:	d908      	bls.n	80068f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068e0:	4b61      	ldr	r3, [pc, #388]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	495e      	ldr	r1, [pc, #376]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	4b59      	ldr	r3, [pc, #356]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800690a:	429a      	cmp	r2, r3
 800690c:	d908      	bls.n	8006920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800690e:	4b56      	ldr	r3, [pc, #344]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4953      	ldr	r1, [pc, #332]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800691c:	4313      	orrs	r3, r2
 800691e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	4b4d      	ldr	r3, [pc, #308]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	429a      	cmp	r2, r3
 800693a:	d908      	bls.n	800694e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f023 020f 	bic.w	r2, r3, #15
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4947      	ldr	r1, [pc, #284]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800694a:	4313      	orrs	r3, r2
 800694c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d055      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800695a:	4b43      	ldr	r3, [pc, #268]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	4940      	ldr	r1, [pc, #256]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006968:	4313      	orrs	r3, r2
 800696a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d107      	bne.n	8006984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006974:	4b3c      	ldr	r3, [pc, #240]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d121      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0f6      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d107      	bne.n	800699c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800698c:	4b36      	ldr	r3, [pc, #216]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d115      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0ea      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d107      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069a4:	4b30      	ldr	r3, [pc, #192]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0de      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0d6      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c4:	4b28      	ldr	r3, [pc, #160]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f023 0207 	bic.w	r2, r3, #7
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4925      	ldr	r1, [pc, #148]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d6:	f7fc f923 	bl	8002c20 <HAL_GetTick>
 80069da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069de:	f7fc f91f 	bl	8002c20 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e0be      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d1eb      	bne.n	80069de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d208      	bcs.n	8006a34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a22:	4b11      	ldr	r3, [pc, #68]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f023 020f 	bic.w	r2, r3, #15
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	490e      	ldr	r1, [pc, #56]	@ (8006a68 <HAL_RCC_ClockConfig+0x244>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a34:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d214      	bcs.n	8006a6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a42:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 020f 	bic.w	r2, r3, #15
 8006a4a:	4906      	ldr	r1, [pc, #24]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a52:	4b04      	ldr	r3, [pc, #16]	@ (8006a64 <HAL_RCC_ClockConfig+0x240>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e086      	b.n	8006b72 <HAL_RCC_ClockConfig+0x34e>
 8006a64:	52002000 	.word	0x52002000
 8006a68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d208      	bcs.n	8006a9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a88:	4b3c      	ldr	r3, [pc, #240]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	4939      	ldr	r1, [pc, #228]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d010      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695a      	ldr	r2, [r3, #20]
 8006aaa:	4b34      	ldr	r3, [pc, #208]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d208      	bcs.n	8006ac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ab6:	4b31      	ldr	r3, [pc, #196]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	492e      	ldr	r1, [pc, #184]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d010      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	4b28      	ldr	r3, [pc, #160]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d208      	bcs.n	8006af6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ae4:	4b25      	ldr	r3, [pc, #148]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4922      	ldr	r1, [pc, #136]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d010      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69da      	ldr	r2, [r3, #28]
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d208      	bcs.n	8006b24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b12:	4b1a      	ldr	r3, [pc, #104]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4917      	ldr	r1, [pc, #92]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b24:	f000 f834 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b14      	ldr	r3, [pc, #80]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	4912      	ldr	r1, [pc, #72]	@ (8006b80 <HAL_RCC_ClockConfig+0x35c>)
 8006b36:	5ccb      	ldrb	r3, [r1, r3]
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b42:	4b0e      	ldr	r3, [pc, #56]	@ (8006b7c <HAL_RCC_ClockConfig+0x358>)
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b80 <HAL_RCC_ClockConfig+0x35c>)
 8006b4c:	5cd3      	ldrb	r3, [r2, r3]
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	4a0a      	ldr	r2, [pc, #40]	@ (8006b84 <HAL_RCC_ClockConfig+0x360>)
 8006b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b88 <HAL_RCC_ClockConfig+0x364>)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <HAL_RCC_ClockConfig+0x368>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fb f9dc 	bl	8001f24 <HAL_InitTick>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	0801b384 	.word	0x0801b384
 8006b84:	2400000c 	.word	0x2400000c
 8006b88:	24000008 	.word	0x24000008
 8006b8c:	24000010 	.word	0x24000010

08006b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b089      	sub	sp, #36	@ 0x24
 8006b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b96:	4bb3      	ldr	r3, [pc, #716]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b9e:	2b18      	cmp	r3, #24
 8006ba0:	f200 8155 	bhi.w	8006e4e <HAL_RCC_GetSysClockFreq+0x2be>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006c11 	.word	0x08006c11
 8006bb0:	08006e4f 	.word	0x08006e4f
 8006bb4:	08006e4f 	.word	0x08006e4f
 8006bb8:	08006e4f 	.word	0x08006e4f
 8006bbc:	08006e4f 	.word	0x08006e4f
 8006bc0:	08006e4f 	.word	0x08006e4f
 8006bc4:	08006e4f 	.word	0x08006e4f
 8006bc8:	08006e4f 	.word	0x08006e4f
 8006bcc:	08006c37 	.word	0x08006c37
 8006bd0:	08006e4f 	.word	0x08006e4f
 8006bd4:	08006e4f 	.word	0x08006e4f
 8006bd8:	08006e4f 	.word	0x08006e4f
 8006bdc:	08006e4f 	.word	0x08006e4f
 8006be0:	08006e4f 	.word	0x08006e4f
 8006be4:	08006e4f 	.word	0x08006e4f
 8006be8:	08006e4f 	.word	0x08006e4f
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006e4f 	.word	0x08006e4f
 8006bf4:	08006e4f 	.word	0x08006e4f
 8006bf8:	08006e4f 	.word	0x08006e4f
 8006bfc:	08006e4f 	.word	0x08006e4f
 8006c00:	08006e4f 	.word	0x08006e4f
 8006c04:	08006e4f 	.word	0x08006e4f
 8006c08:	08006e4f 	.word	0x08006e4f
 8006c0c:	08006c43 	.word	0x08006c43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c10:	4b94      	ldr	r3, [pc, #592]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c1c:	4b91      	ldr	r3, [pc, #580]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	4a90      	ldr	r2, [pc, #576]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c2e:	e111      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c30:	4b8d      	ldr	r3, [pc, #564]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c32:	61bb      	str	r3, [r7, #24]
      break;
 8006c34:	e10e      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c36:	4b8d      	ldr	r3, [pc, #564]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c38:	61bb      	str	r3, [r7, #24]
      break;
 8006c3a:	e10b      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c3e:	61bb      	str	r3, [r7, #24]
      break;
 8006c40:	e108      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c42:	4b88      	ldr	r3, [pc, #544]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c4c:	4b85      	ldr	r3, [pc, #532]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c58:	4b82      	ldr	r3, [pc, #520]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c62:	4b80      	ldr	r3, [pc, #512]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80e1 	beq.w	8006e48 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f000 8083 	beq.w	8006d94 <HAL_RCC_GetSysClockFreq+0x204>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f200 80a1 	bhi.w	8006dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x114>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d056      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ca2:	e099      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02d      	beq.n	8006d0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	4a6b      	ldr	r2, [pc, #428]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cda:	4b62      	ldr	r3, [pc, #392]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006d0a:	e087      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1e:	4b51      	ldr	r3, [pc, #324]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d4e:	e065      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d62:	4b40      	ldr	r3, [pc, #256]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d92:	e043      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da6:	4b2f      	ldr	r3, [pc, #188]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dd6:	e021      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	4b1e      	ldr	r3, [pc, #120]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dfe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e1c:	4b11      	ldr	r3, [pc, #68]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	0a5b      	lsrs	r3, r3, #9
 8006e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e26:	3301      	adds	r3, #1
 8006e28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	ee07 3a90 	vmov	s15, r3
 8006e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e40:	ee17 3a90 	vmov	r3, s15
 8006e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e46:	e005      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
      break;
 8006e4c:	e002      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e4e:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e50:	61bb      	str	r3, [r7, #24]
      break;
 8006e52:	bf00      	nop
  }

  return sysclockfreq;
 8006e54:	69bb      	ldr	r3, [r7, #24]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3724      	adds	r7, #36	@ 0x24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
 8006e68:	03d09000 	.word	0x03d09000
 8006e6c:	003d0900 	.word	0x003d0900
 8006e70:	017d7840 	.word	0x017d7840
 8006e74:	46000000 	.word	0x46000000
 8006e78:	4c742400 	.word	0x4c742400
 8006e7c:	4a742400 	.word	0x4a742400
 8006e80:	4bbebc20 	.word	0x4bbebc20

08006e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e8a:	f7ff fe81 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	490f      	ldr	r1, [pc, #60]	@ (8006ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e9c:	5ccb      	ldrb	r3, [r1, r3]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	4a09      	ldr	r2, [pc, #36]	@ (8006ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eb2:	5cd3      	ldrb	r3, [r2, r3]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	4a07      	ldr	r2, [pc, #28]	@ (8006edc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ec2:	4a07      	ldr	r2, [pc, #28]	@ (8006ee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ec8:	4b04      	ldr	r3, [pc, #16]	@ (8006edc <HAL_RCC_GetHCLKFreq+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	0801b384 	.word	0x0801b384
 8006edc:	2400000c 	.word	0x2400000c
 8006ee0:	24000008 	.word	0x24000008

08006ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ee8:	f7ff ffcc 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006eec:	4602      	mov	r2, r0
 8006eee:	4b06      	ldr	r3, [pc, #24]	@ (8006f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	4904      	ldr	r1, [pc, #16]	@ (8006f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006efa:	5ccb      	ldrb	r3, [r1, r3]
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	0801b384 	.word	0x0801b384

08006f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f14:	f7ff ffb6 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4b06      	ldr	r3, [pc, #24]	@ (8006f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	4904      	ldr	r1, [pc, #16]	@ (8006f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f26:	5ccb      	ldrb	r3, [r1, r3]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	58024400 	.word	0x58024400
 8006f38:	0801b384 	.word	0x0801b384

08006f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	223f      	movs	r2, #63	@ 0x3f
 8006f4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0207 	and.w	r2, r3, #7
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f58:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006f64:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006f88:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f94:	4b08      	ldr	r3, [pc, #32]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <HAL_RCC_GetClockConfig+0x80>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	601a      	str	r2, [r3, #0]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	52002000 	.word	0x52002000

08006fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc4:	b0ca      	sub	sp, #296	@ 0x128
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8006fea:	d049      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ff2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ff6:	d02f      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ffc:	d828      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007002:	d01a      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007008:	d822      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007012:	d007      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007014:	e01c      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4bb8      	ldr	r3, [pc, #736]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	4ab7      	ldr	r2, [pc, #732]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007022:	e01a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	3308      	adds	r3, #8
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f002 fb61 	bl	80096f4 <RCCEx_PLL2_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007038:	e00f      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	3328      	adds	r3, #40	@ 0x28
 8007040:	2102      	movs	r1, #2
 8007042:	4618      	mov	r0, r3
 8007044:	f002 fc08 	bl	8009858 <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007062:	4ba5      	ldr	r3, [pc, #660]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007070:	4aa1      	ldr	r2, [pc, #644]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6513      	str	r3, [r2, #80]	@ 0x50
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	ea58 0309 	orrs.w	r3, r8, r9
 8007094:	d047      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709c:	2b04      	cmp	r3, #4
 800709e:	d82a      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070bd 	.word	0x080070bd
 80070ac:	080070cb 	.word	0x080070cb
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070ff 	.word	0x080070ff
 80070b8:	080070ff 	.word	0x080070ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070bc:	4b8e      	ldr	r3, [pc, #568]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	4a8d      	ldr	r2, [pc, #564]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070c8:	e01a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ce:	3308      	adds	r3, #8
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f002 fb0e 	bl	80096f4 <RCCEx_PLL2_Config>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070de:	e00f      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e4:	3328      	adds	r3, #40	@ 0x28
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f002 fbb5 	bl	8009858 <RCCEx_PLL3_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80070fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007108:	4b7b      	ldr	r3, [pc, #492]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800710a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710c:	f023 0107 	bic.w	r1, r3, #7
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	4a78      	ldr	r2, [pc, #480]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007118:	430b      	orrs	r3, r1
 800711a:	6513      	str	r3, [r2, #80]	@ 0x50
 800711c:	e003      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007132:	f04f 0b00 	mov.w	fp, #0
 8007136:	ea5a 030b 	orrs.w	r3, sl, fp
 800713a:	d04c      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007146:	d030      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800714c:	d829      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800714e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007150:	d02d      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007152:	2bc0      	cmp	r3, #192	@ 0xc0
 8007154:	d825      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007156:	2b80      	cmp	r3, #128	@ 0x80
 8007158:	d018      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800715a:	2b80      	cmp	r3, #128	@ 0x80
 800715c:	d821      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007162:	2b40      	cmp	r3, #64	@ 0x40
 8007164:	d007      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007166:	e01c      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4b63      	ldr	r3, [pc, #396]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	4a62      	ldr	r2, [pc, #392]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007174:	e01c      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	3308      	adds	r3, #8
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fab8 	bl	80096f4 <RCCEx_PLL2_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800718a:	e011      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	3328      	adds	r3, #40	@ 0x28
 8007192:	2100      	movs	r1, #0
 8007194:	4618      	mov	r0, r3
 8007196:	f002 fb5f 	bl	8009858 <RCCEx_PLL3_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80071ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80071b8:	4b4f      	ldr	r3, [pc, #316]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c6:	4a4c      	ldr	r2, [pc, #304]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80071cc:	e003      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80071e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80071e6:	2300      	movs	r3, #0
 80071e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80071ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80071f0:	460b      	mov	r3, r1
 80071f2:	4313      	orrs	r3, r2
 80071f4:	d053      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007202:	d035      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007208:	d82e      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800720a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800720e:	d031      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007210:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007214:	d828      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800721a:	d01a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800721c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007220:	d822      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007226:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800722a:	d007      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800722c:	e01c      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722e:	4b32      	ldr	r3, [pc, #200]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	4a31      	ldr	r2, [pc, #196]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800723a:	e01c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	3308      	adds	r3, #8
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f002 fa55 	bl	80096f4 <RCCEx_PLL2_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007250:	e011      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	3328      	adds	r3, #40	@ 0x28
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f002 fafc 	bl	8009858 <RCCEx_PLL3_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800726e:	e002      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007282:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800728e:	4a1a      	ldr	r2, [pc, #104]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6593      	str	r3, [r2, #88]	@ 0x58
 8007294:	e003      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800729a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80072aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072ae:	2300      	movs	r3, #0
 80072b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80072b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80072b8:	460b      	mov	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d056      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80072be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072ca:	d038      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80072cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072d0:	d831      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072d6:	d034      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80072d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072dc:	d82b      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e2:	d01d      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80072e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e8:	d825      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d006      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80072ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072f4:	e01f      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072f6:	bf00      	nop
 80072f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fc:	4ba2      	ldr	r3, [pc, #648]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	4aa1      	ldr	r2, [pc, #644]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007308:	e01c      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3308      	adds	r3, #8
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f002 f9ee 	bl	80096f4 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800731e:	e011      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	3328      	adds	r3, #40	@ 0x28
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fa95 	bl	8009858 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007334:	e006      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800733c:	e002      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800734c:	4b8e      	ldr	r3, [pc, #568]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800734e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007350:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800735c:	4a8a      	ldr	r2, [pc, #552]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800735e:	430b      	orrs	r3, r1
 8007360:	6593      	str	r3, [r2, #88]	@ 0x58
 8007362:	e003      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800737c:	2300      	movs	r3, #0
 800737e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007382:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007386:	460b      	mov	r3, r1
 8007388:	4313      	orrs	r3, r2
 800738a:	d03a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007392:	2b30      	cmp	r3, #48	@ 0x30
 8007394:	d01f      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007396:	2b30      	cmp	r3, #48	@ 0x30
 8007398:	d819      	bhi.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d00c      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d815      	bhi.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d019      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d111      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073aa:	4b77      	ldr	r3, [pc, #476]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	4a76      	ldr	r2, [pc, #472]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80073b6:	e011      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	3308      	adds	r3, #8
 80073be:	2102      	movs	r1, #2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f002 f997 	bl	80096f4 <RCCEx_PLL2_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80073cc:	e006      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d4:	e002      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80073d6:	bf00      	nop
 80073d8:	e000      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80073da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073e4:	4b68      	ldr	r3, [pc, #416]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f2:	4a65      	ldr	r2, [pc, #404]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073f4:	430b      	orrs	r3, r1
 80073f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800740e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007412:	2300      	movs	r3, #0
 8007414:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007418:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800741c:	460b      	mov	r3, r1
 800741e:	4313      	orrs	r3, r2
 8007420:	d051      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742c:	d035      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800742e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007432:	d82e      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007434:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007438:	d031      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800743a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800743e:	d828      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007444:	d01a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800744a:	d822      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007454:	d007      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007456:	e01c      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4b4b      	ldr	r3, [pc, #300]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	4a4a      	ldr	r2, [pc, #296]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007464:	e01c      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	3308      	adds	r3, #8
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f002 f940 	bl	80096f4 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800747a:	e011      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	3328      	adds	r3, #40	@ 0x28
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f002 f9e7 	bl	8009858 <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800749e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074a8:	4b37      	ldr	r3, [pc, #220]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b6:	4a34      	ldr	r2, [pc, #208]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80074d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d056      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074f0:	d033      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074f6:	d82c      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074fc:	d02f      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80074fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007502:	d826      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007504:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007508:	d02b      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800750a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800750e:	d820      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007514:	d012      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751a:	d81a      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d022      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007524:	d115      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752a:	3308      	adds	r3, #8
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f002 f8e0 	bl	80096f4 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800753a:	e015      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	3328      	adds	r3, #40	@ 0x28
 8007542:	2101      	movs	r1, #1
 8007544:	4618      	mov	r0, r3
 8007546:	f002 f987 	bl	8009858 <RCCEx_PLL3_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007550:	e00a      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800757e:	4a02      	ldr	r2, [pc, #8]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007580:	430b      	orrs	r3, r1
 8007582:	6513      	str	r3, [r2, #80]	@ 0x50
 8007584:	e006      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d055      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c0:	d033      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80075c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c6:	d82c      	bhi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075cc:	d02f      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d2:	d826      	bhi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075d8:	d02b      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80075da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075de:	d820      	bhi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e4:	d012      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80075e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ea:	d81a      	bhi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d022      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80075f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f4:	d115      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	3308      	adds	r3, #8
 80075fc:	2101      	movs	r1, #1
 80075fe:	4618      	mov	r0, r3
 8007600:	f002 f878 	bl	80096f4 <RCCEx_PLL2_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800760a:	e015      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007610:	3328      	adds	r3, #40	@ 0x28
 8007612:	2101      	movs	r1, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f002 f91f 	bl	8009858 <RCCEx_PLL3_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007620:	e00a      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007628:	e006      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800762a:	bf00      	nop
 800762c:	e004      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800762e:	bf00      	nop
 8007630:	e002      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007632:	bf00      	nop
 8007634:	e000      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007640:	4ba3      	ldr	r3, [pc, #652]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007644:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007650:	4a9f      	ldr	r2, [pc, #636]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007652:	430b      	orrs	r3, r1
 8007654:	6593      	str	r3, [r2, #88]	@ 0x58
 8007656:	e003      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800767a:	460b      	mov	r3, r1
 800767c:	4313      	orrs	r3, r2
 800767e:	d037      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800768a:	d00e      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800768c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007690:	d816      	bhi.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d018      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800769a:	d111      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b8c      	ldr	r3, [pc, #560]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a8b      	ldr	r2, [pc, #556]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076a8:	e00f      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	3308      	adds	r3, #8
 80076b0:	2101      	movs	r1, #1
 80076b2:	4618      	mov	r0, r3
 80076b4:	f002 f81e 	bl	80096f4 <RCCEx_PLL2_Config>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076be:	e004      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80076c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076d2:	4b7f      	ldr	r3, [pc, #508]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e0:	4a7b      	ldr	r2, [pc, #492]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e2:	430b      	orrs	r3, r1
 80076e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80076e6:	e003      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d039      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007716:	2b03      	cmp	r3, #3
 8007718:	d81c      	bhi.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	0800775d 	.word	0x0800775d
 8007724:	08007731 	.word	0x08007731
 8007728:	0800773f 	.word	0x0800773f
 800772c:	0800775d 	.word	0x0800775d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007730:	4b67      	ldr	r3, [pc, #412]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	4a66      	ldr	r2, [pc, #408]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800773a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800773c:	e00f      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007742:	3308      	adds	r3, #8
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 ffd4 	bl	80096f4 <RCCEx_PLL2_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007752:	e004      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800775a:	e000      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800775c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007766:	4b5a      	ldr	r3, [pc, #360]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776a:	f023 0103 	bic.w	r1, r3, #3
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007774:	4a56      	ldr	r2, [pc, #344]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007776:	430b      	orrs	r3, r1
 8007778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800777a:	e003      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007790:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800779a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800779e:	460b      	mov	r3, r1
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f000 809f 	beq.w	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077a6:	4b4b      	ldr	r3, [pc, #300]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a4a      	ldr	r2, [pc, #296]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b2:	f7fb fa35 	bl	8002c20 <HAL_GetTick>
 80077b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ba:	e00b      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077bc:	f7fb fa30 	bl	8002c20 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b64      	cmp	r3, #100	@ 0x64
 80077ca:	d903      	bls.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d2:	e005      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d4:	4b3f      	ldr	r3, [pc, #252]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0ed      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80077e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d179      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077e8:	4b39      	ldr	r3, [pc, #228]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077f4:	4053      	eors	r3, r2
 80077f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d015      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077fe:	4b34      	ldr	r3, [pc, #208]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007806:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800780a:	4b31      	ldr	r3, [pc, #196]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780e:	4a30      	ldr	r2, [pc, #192]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007814:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007816:	4b2e      	ldr	r3, [pc, #184]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781a:	4a2d      	ldr	r2, [pc, #180]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800781c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007820:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007822:	4a2b      	ldr	r2, [pc, #172]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007828:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007836:	d118      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007838:	f7fb f9f2 	bl	8002c20 <HAL_GetTick>
 800783c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007840:	e00d      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fb f9ed 	bl	8002c20 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007852:	429a      	cmp	r2, r3
 8007854:	d903      	bls.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800785c:	e005      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800785e:	4b1c      	ldr	r3, [pc, #112]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0eb      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786e:	2b00      	cmp	r3, #0
 8007870:	d129      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800787a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007882:	d10e      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007884:	4b12      	ldr	r3, [pc, #72]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007894:	091a      	lsrs	r2, r3, #4
 8007896:	4b10      	ldr	r3, [pc, #64]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007898:	4013      	ands	r3, r2
 800789a:	4a0d      	ldr	r2, [pc, #52]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800789c:	430b      	orrs	r3, r1
 800789e:	6113      	str	r3, [r2, #16]
 80078a0:	e005      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	4a0a      	ldr	r2, [pc, #40]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078ac:	6113      	str	r3, [r2, #16]
 80078ae:	4b08      	ldr	r3, [pc, #32]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078be:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c4:	e00e      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80078ce:	e009      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80078d0:	58024400 	.word	0x58024400
 80078d4:	58024800 	.word	0x58024800
 80078d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f002 0301 	and.w	r3, r2, #1
 80078f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078fe:	460b      	mov	r3, r1
 8007900:	4313      	orrs	r3, r2
 8007902:	f000 8089 	beq.w	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800790c:	2b28      	cmp	r3, #40	@ 0x28
 800790e:	d86b      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007910:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	080079f1 	.word	0x080079f1
 800791c:	080079e9 	.word	0x080079e9
 8007920:	080079e9 	.word	0x080079e9
 8007924:	080079e9 	.word	0x080079e9
 8007928:	080079e9 	.word	0x080079e9
 800792c:	080079e9 	.word	0x080079e9
 8007930:	080079e9 	.word	0x080079e9
 8007934:	080079e9 	.word	0x080079e9
 8007938:	080079bd 	.word	0x080079bd
 800793c:	080079e9 	.word	0x080079e9
 8007940:	080079e9 	.word	0x080079e9
 8007944:	080079e9 	.word	0x080079e9
 8007948:	080079e9 	.word	0x080079e9
 800794c:	080079e9 	.word	0x080079e9
 8007950:	080079e9 	.word	0x080079e9
 8007954:	080079e9 	.word	0x080079e9
 8007958:	080079d3 	.word	0x080079d3
 800795c:	080079e9 	.word	0x080079e9
 8007960:	080079e9 	.word	0x080079e9
 8007964:	080079e9 	.word	0x080079e9
 8007968:	080079e9 	.word	0x080079e9
 800796c:	080079e9 	.word	0x080079e9
 8007970:	080079e9 	.word	0x080079e9
 8007974:	080079e9 	.word	0x080079e9
 8007978:	080079f1 	.word	0x080079f1
 800797c:	080079e9 	.word	0x080079e9
 8007980:	080079e9 	.word	0x080079e9
 8007984:	080079e9 	.word	0x080079e9
 8007988:	080079e9 	.word	0x080079e9
 800798c:	080079e9 	.word	0x080079e9
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079e9 	.word	0x080079e9
 8007998:	080079f1 	.word	0x080079f1
 800799c:	080079e9 	.word	0x080079e9
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	080079e9 	.word	0x080079e9
 80079a8:	080079e9 	.word	0x080079e9
 80079ac:	080079e9 	.word	0x080079e9
 80079b0:	080079e9 	.word	0x080079e9
 80079b4:	080079e9 	.word	0x080079e9
 80079b8:	080079f1 	.word	0x080079f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c0:	3308      	adds	r3, #8
 80079c2:	2101      	movs	r1, #1
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fe95 	bl	80096f4 <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079d0:	e00f      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	3328      	adds	r3, #40	@ 0x28
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 ff3c 	bl	8009858 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80079f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079fa:	4bbf      	ldr	r3, [pc, #764]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a08:	4abb      	ldr	r2, [pc, #748]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a0e:	e003      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 0302 	and.w	r3, r2, #2
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007a2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d041      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a3e:	2b05      	cmp	r3, #5
 8007a40:	d824      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a95 	.word	0x08007a95
 8007a4c:	08007a61 	.word	0x08007a61
 8007a50:	08007a77 	.word	0x08007a77
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a95 	.word	0x08007a95
 8007a5c:	08007a95 	.word	0x08007a95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a64:	3308      	adds	r3, #8
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fe43 	bl	80096f4 <RCCEx_PLL2_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a74:	e00f      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7a:	3328      	adds	r3, #40	@ 0x28
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 feea 	bl	8009858 <RCCEx_PLL3_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a8a:	e004      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a92:	e000      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a9e:	4b96      	ldr	r3, [pc, #600]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa2:	f023 0107 	bic.w	r1, r3, #7
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007aac:	4a92      	ldr	r2, [pc, #584]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f002 0304 	and.w	r3, r2, #4
 8007ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ad2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d044      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae4:	2b05      	cmp	r3, #5
 8007ae6:	d825      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b3d 	.word	0x08007b3d
 8007af4:	08007b09 	.word	0x08007b09
 8007af8:	08007b1f 	.word	0x08007b1f
 8007afc:	08007b3d 	.word	0x08007b3d
 8007b00:	08007b3d 	.word	0x08007b3d
 8007b04:	08007b3d 	.word	0x08007b3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 fdef 	bl	80096f4 <RCCEx_PLL2_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b1c:	e00f      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	3328      	adds	r3, #40	@ 0x28
 8007b24:	2101      	movs	r1, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 fe96 	bl	8009858 <RCCEx_PLL3_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b32:	e004      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3a:	e000      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b46:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	f023 0107 	bic.w	r1, r3, #7
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b56:	4a68      	ldr	r2, [pc, #416]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b5c:	e003      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f002 0320 	and.w	r3, r2, #32
 8007b72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b76:	2300      	movs	r3, #0
 8007b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b80:	460b      	mov	r3, r1
 8007b82:	4313      	orrs	r3, r2
 8007b84:	d055      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b92:	d033      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b98:	d82c      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9e:	d02f      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba4:	d826      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ba6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007baa:	d02b      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007bac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bb0:	d820      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb6:	d012      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bbc:	d81a      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d022      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007bc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bc6:	d115      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	3308      	adds	r3, #8
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fd8f 	bl	80096f4 <RCCEx_PLL2_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bdc:	e015      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be2:	3328      	adds	r3, #40	@ 0x28
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 fe36 	bl	8009858 <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bf2:	e00a      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfa:	e006      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bfc:	bf00      	nop
 8007bfe:	e004      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c00:	bf00      	nop
 8007c02:	e002      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c04:	bf00      	nop
 8007c06:	e000      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10b      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c12:	4b39      	ldr	r3, [pc, #228]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	4a35      	ldr	r2, [pc, #212]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c28:	e003      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d058      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c5e:	d033      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007c60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c64:	d82c      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c6a:	d02f      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c70:	d826      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c76:	d02b      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c7c:	d820      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c82:	d012      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c88:	d81a      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d022      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c92:	d115      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	3308      	adds	r3, #8
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fd29 	bl	80096f4 <RCCEx_PLL2_Config>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ca8:	e015      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	3328      	adds	r3, #40	@ 0x28
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fdd0 	bl	8009858 <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cbe:	e00a      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cc6:	e006      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e004      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ccc:	bf00      	nop
 8007cce:	e002      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10e      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cde:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cee:	4a02      	ldr	r2, [pc, #8]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cf4:	e006      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d14:	2300      	movs	r3, #0
 8007d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4313      	orrs	r3, r2
 8007d22:	d055      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d30:	d033      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007d32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d36:	d82c      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d3c:	d02f      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d42:	d826      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d48:	d02b      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007d4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d4e:	d820      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d54:	d012      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d5a:	d81a      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d022      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d64:	d115      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fcc0 	bl	80096f4 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d7a:	e015      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d80:	3328      	adds	r3, #40	@ 0x28
 8007d82:	2102      	movs	r1, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fd67 	bl	8009858 <RCCEx_PLL3_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d90:	e00a      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d98:	e006      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e004      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007db0:	4ba1      	ldr	r3, [pc, #644]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dc0:	4a9d      	ldr	r2, [pc, #628]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f002 0308 	and.w	r3, r2, #8
 8007ddc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007de6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d01e      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfc:	d10c      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	3328      	adds	r3, #40	@ 0x28
 8007e04:	2102      	movs	r1, #2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 fd26 	bl	8009858 <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e18:	4b87      	ldr	r3, [pc, #540]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e28:	4a83      	ldr	r2, [pc, #524]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f002 0310 	and.w	r3, r2, #16
 8007e3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	d01e      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	3328      	adds	r3, #40	@ 0x28
 8007e62:	2102      	movs	r1, #2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fcf7 	bl	8009858 <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e76:	4b70      	ldr	r3, [pc, #448]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e86:	4a6c      	ldr	r2, [pc, #432]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ea2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d03e      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb8:	d022      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ebe:	d81b      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007eca:	e015      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fc0d 	bl	80096f4 <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ee0:	e00f      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	3328      	adds	r3, #40	@ 0x28
 8007ee8:	2102      	movs	r1, #2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fcb4 	bl	8009858 <RCCEx_PLL3_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ef6:	e004      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007efe:	e000      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f1a:	4a47      	ldr	r2, [pc, #284]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f38:	2300      	movs	r3, #0
 8007f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d03b      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f52:	d01f      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f58:	d818      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f64:	d007      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007f66:	e011      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f68:	4b33      	ldr	r3, [pc, #204]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	4a32      	ldr	r2, [pc, #200]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f74:	e00f      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7a:	3328      	adds	r3, #40	@ 0x28
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fc6a 	bl	8009858 <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f8a:	e004      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f92:	e000      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f9e:	4b26      	ldr	r3, [pc, #152]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fae:	4a22      	ldr	r2, [pc, #136]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007fca:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fcc:	2300      	movs	r3, #0
 8007fce:	677b      	str	r3, [r7, #116]	@ 0x74
 8007fd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	d034      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe8:	d007      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007fea:	e011      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fec:	4b12      	ldr	r3, [pc, #72]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a11      	ldr	r2, [pc, #68]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ff8:	e00e      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	3308      	adds	r3, #8
 8008000:	2102      	movs	r1, #2
 8008002:	4618      	mov	r0, r3
 8008004:	f001 fb76 	bl	80096f4 <RCCEx_PLL2_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800800e:	e003      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008020:	4b05      	ldr	r3, [pc, #20]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008024:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802e:	4a02      	ldr	r2, [pc, #8]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008030:	430b      	orrs	r3, r1
 8008032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008034:	e006      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008036:	bf00      	nop
 8008038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008052:	2300      	movs	r3, #0
 8008054:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008056:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d00c      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008064:	3328      	adds	r3, #40	@ 0x28
 8008066:	2102      	movs	r1, #2
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fbf5 	bl	8009858 <RCCEx_PLL3_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008086:	663b      	str	r3, [r7, #96]	@ 0x60
 8008088:	2300      	movs	r3, #0
 800808a:	667b      	str	r3, [r7, #100]	@ 0x64
 800808c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d038      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800809e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a2:	d018      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80080a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a8:	d811      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80080aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ae:	d014      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80080b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b4:	d80b      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80080ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080be:	d106      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c0:	4bc3      	ldr	r3, [pc, #780]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	4ac2      	ldr	r2, [pc, #776]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80080cc:	e008      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080d4:	e004      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080e8:	4bb9      	ldr	r3, [pc, #740]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f8:	4ab5      	ldr	r2, [pc, #724]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80080fe:	e003      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008114:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008116:	2300      	movs	r3, #0
 8008118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800811a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d009      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008124:	4baa      	ldr	r3, [pc, #680]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008128:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008132:	4aa7      	ldr	r2, [pc, #668]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008134:	430b      	orrs	r3, r1
 8008136:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008144:	653b      	str	r3, [r7, #80]	@ 0x50
 8008146:	2300      	movs	r3, #0
 8008148:	657b      	str	r3, [r7, #84]	@ 0x54
 800814a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d00a      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008154:	4b9e      	ldr	r3, [pc, #632]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008164:	4a9a      	ldr	r2, [pc, #616]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008166:	430b      	orrs	r3, r1
 8008168:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008178:	2300      	movs	r3, #0
 800817a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800817c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008180:	460b      	mov	r3, r1
 8008182:	4313      	orrs	r3, r2
 8008184:	d009      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008186:	4b92      	ldr	r3, [pc, #584]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800818a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008194:	4a8e      	ldr	r2, [pc, #568]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008196:	430b      	orrs	r3, r1
 8008198:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80081a8:	2300      	movs	r3, #0
 80081aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80081b0:	460b      	mov	r3, r1
 80081b2:	4313      	orrs	r3, r2
 80081b4:	d00e      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b6:	4b86      	ldr	r3, [pc, #536]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	4a85      	ldr	r2, [pc, #532]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081c0:	6113      	str	r3, [r2, #16]
 80081c2:	4b83      	ldr	r3, [pc, #524]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081c4:	6919      	ldr	r1, [r3, #16]
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80081ce:	4a80      	ldr	r2, [pc, #512]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80081e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80081ea:	460b      	mov	r3, r1
 80081ec:	4313      	orrs	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081f0:	4b77      	ldr	r3, [pc, #476]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fe:	4a74      	ldr	r2, [pc, #464]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008200:	430b      	orrs	r3, r1
 8008202:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
 8008212:	2300      	movs	r3, #0
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34
 8008216:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800821a:	460b      	mov	r3, r1
 800821c:	4313      	orrs	r3, r2
 800821e:	d00a      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008220:	4b6b      	ldr	r3, [pc, #428]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008224:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008230:	4a67      	ldr	r2, [pc, #412]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008232:	430b      	orrs	r3, r1
 8008234:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	2100      	movs	r1, #0
 8008240:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008248:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800824c:	460b      	mov	r3, r1
 800824e:	4313      	orrs	r3, r2
 8008250:	d011      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	3308      	adds	r3, #8
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f001 fa4a 	bl	80096f4 <RCCEx_PLL2_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	2100      	movs	r1, #0
 8008280:	6239      	str	r1, [r7, #32]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
 8008288:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800828c:	460b      	mov	r3, r1
 800828e:	4313      	orrs	r3, r2
 8008290:	d011      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	3308      	adds	r3, #8
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fa2a 	bl	80096f4 <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	2100      	movs	r1, #0
 80082c0:	61b9      	str	r1, [r7, #24]
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082cc:	460b      	mov	r3, r1
 80082ce:	4313      	orrs	r3, r2
 80082d0:	d011      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	3308      	adds	r3, #8
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fa0a 	bl	80096f4 <RCCEx_PLL2_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	2100      	movs	r1, #0
 8008300:	6139      	str	r1, [r7, #16]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800830c:	460b      	mov	r3, r1
 800830e:	4313      	orrs	r3, r2
 8008310:	d011      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008316:	3328      	adds	r3, #40	@ 0x28
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fa9c 	bl	8009858 <RCCEx_PLL3_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	2100      	movs	r1, #0
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800834c:	460b      	mov	r3, r1
 800834e:	4313      	orrs	r3, r2
 8008350:	d011      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	3328      	adds	r3, #40	@ 0x28
 8008358:	2101      	movs	r1, #1
 800835a:	4618      	mov	r0, r3
 800835c:	f001 fa7c 	bl	8009858 <RCCEx_PLL3_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	2100      	movs	r1, #0
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e9d7 1200 	ldrd	r1, r2, [r7]
 800838c:	460b      	mov	r3, r1
 800838e:	4313      	orrs	r3, r2
 8008390:	d011      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008396:	3328      	adds	r3, #40	@ 0x28
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fa5c 	bl	8009858 <RCCEx_PLL3_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80083b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	e000      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80083ca:	46bd      	mov	sp, r7
 80083cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083d0:	58024400 	.word	0x58024400

080083d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b090      	sub	sp, #64	@ 0x40
 80083d8:	af00      	add	r7, sp, #0
 80083da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80083de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80083e6:	430b      	orrs	r3, r1
 80083e8:	f040 8094 	bne.w	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80083ec:	4b9e      	ldr	r3, [pc, #632]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	f200 8087 	bhi.w	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80083fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008419 	.word	0x08008419
 8008408:	08008441 	.word	0x08008441
 800840c:	08008469 	.word	0x08008469
 8008410:	08008505 	.word	0x08008505
 8008414:	08008491 	.word	0x08008491
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008418:	4b93      	ldr	r3, [pc, #588]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008424:	d108      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800842a:	4618      	mov	r0, r3
 800842c:	f001 f810 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008434:	f000 bd45 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800843c:	f000 bd41 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008440:	4b89      	ldr	r3, [pc, #548]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800844c:	d108      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844e:	f107 0318 	add.w	r3, r7, #24
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fd54 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845c:	f000 bd31 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008464:	f000 bd2d 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008468:	4b7f      	ldr	r3, [pc, #508]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008474:	d108      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fe94 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008484:	f000 bd1d 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	f000 bd19 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008490:	4b75      	ldr	r3, [pc, #468]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008494:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800849a:	4b73      	ldr	r3, [pc, #460]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d10c      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ac:	4b6e      	ldr	r3, [pc, #440]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	08db      	lsrs	r3, r3, #3
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	4a6d      	ldr	r2, [pc, #436]	@ (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80084b8:	fa22 f303 	lsr.w	r3, r2, r3
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084be:	e01f      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084c0:	4b69      	ldr	r3, [pc, #420]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084cc:	d106      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80084ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084d4:	d102      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084d6:	4b66      	ldr	r3, [pc, #408]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084da:	e011      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084dc:	4b62      	ldr	r3, [pc, #392]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e8:	d106      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80084ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084f2:	4b60      	ldr	r3, [pc, #384]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f6:	e003      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084fc:	f000 bce1 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008500:	f000 bcdf 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008504:	4b5c      	ldr	r3, [pc, #368]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008508:	f000 bcdb 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008510:	f000 bcd7 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008518:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800851c:	430b      	orrs	r3, r1
 800851e:	f040 80ad 	bne.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008522:	4b51      	ldr	r3, [pc, #324]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008526:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800852a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008532:	d056      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853a:	f200 8090 	bhi.w	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	2bc0      	cmp	r3, #192	@ 0xc0
 8008542:	f000 8088 	beq.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2bc0      	cmp	r3, #192	@ 0xc0
 800854a:	f200 8088 	bhi.w	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	2b80      	cmp	r3, #128	@ 0x80
 8008552:	d032      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	2b80      	cmp	r3, #128	@ 0x80
 8008558:	f200 8081 	bhi.w	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	2b40      	cmp	r3, #64	@ 0x40
 8008566:	d014      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008568:	e079      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800856a:	4b3f      	ldr	r3, [pc, #252]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008576:	d108      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800857c:	4618      	mov	r0, r3
 800857e:	f000 ff67 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008586:	f000 bc9c 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800858e:	f000 bc98 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008592:	4b35      	ldr	r3, [pc, #212]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800859a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800859e:	d108      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a0:	f107 0318 	add.w	r3, r7, #24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fcab 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ae:	f000 bc88 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b6:	f000 bc84 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c6:	d108      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fdeb 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d6:	f000 bc74 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085de:	f000 bc70 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085e2:	4b21      	ldr	r3, [pc, #132]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ec:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d10c      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80085f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	08db      	lsrs	r3, r3, #3
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	4a18      	ldr	r2, [pc, #96]	@ (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008610:	e01f      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008612:	4b15      	ldr	r3, [pc, #84]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008628:	4b11      	ldr	r3, [pc, #68]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800862c:	e011      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800862e:	4b0e      	ldr	r3, [pc, #56]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800863a:	d106      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008642:	d102      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008644:	4b0b      	ldr	r3, [pc, #44]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008648:	e003      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800864e:	f000 bc38 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008652:	f000 bc36 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008656:	4b08      	ldr	r3, [pc, #32]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865a:	f000 bc32 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008662:	f000 bc2e 	b.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008666:	bf00      	nop
 8008668:	58024400 	.word	0x58024400
 800866c:	03d09000 	.word	0x03d09000
 8008670:	003d0900 	.word	0x003d0900
 8008674:	017d7840 	.word	0x017d7840
 8008678:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008684:	430b      	orrs	r3, r1
 8008686:	f040 809c 	bne.w	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800868a:	4b9e      	ldr	r3, [pc, #632]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800868c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800869a:	d054      	beq.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086a2:	f200 808b 	bhi.w	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80086ac:	f000 8083 	beq.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80086b6:	f200 8081 	bhi.w	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c0:	d02f      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c8:	d878      	bhi.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086d6:	d012      	beq.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80086d8:	e070      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086da:	4b8a      	ldr	r3, [pc, #552]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086e6:	d107      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 feaf 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f6:	e3e4      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fc:	e3e1      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086fe:	4b81      	ldr	r3, [pc, #516]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800870a:	d107      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870c:	f107 0318 	add.w	r3, r7, #24
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fbf5 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871a:	e3d2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008720:	e3cf      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008722:	4b78      	ldr	r3, [pc, #480]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800872a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800872e:	d107      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fd37 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800873e:	e3c0      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008744:	e3bd      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008746:	4b6f      	ldr	r3, [pc, #444]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800874a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008750:	4b6c      	ldr	r3, [pc, #432]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d10c      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800875c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008762:	4b68      	ldr	r3, [pc, #416]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	08db      	lsrs	r3, r3, #3
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	4a66      	ldr	r2, [pc, #408]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008774:	e01e      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008776:	4b63      	ldr	r3, [pc, #396]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008782:	d106      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800878a:	d102      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800878c:	4b5f      	ldr	r3, [pc, #380]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008790:	e010      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008792:	4b5c      	ldr	r3, [pc, #368]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800879e:	d106      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80087a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a6:	d102      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087a8:	4b59      	ldr	r3, [pc, #356]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ac:	e002      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087b2:	e386      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087b4:	e385      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087b6:	4b57      	ldr	r3, [pc, #348]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ba:	e382      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c0:	e37f      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80087ca:	430b      	orrs	r3, r1
 80087cc:	f040 80a7 	bne.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80087d0:	4b4c      	ldr	r3, [pc, #304]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80087d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087e0:	d055      	beq.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087e8:	f200 8096 	bhi.w	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087f2:	f000 8084 	beq.w	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087fc:	f200 808c 	bhi.w	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008806:	d030      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800880e:	f200 8083 	bhi.w	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800881e:	d012      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008820:	e07a      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008822:	4b38      	ldr	r3, [pc, #224]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800882a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800882e:	d107      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fe0b 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883e:	e340      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008844:	e33d      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008846:	4b2f      	ldr	r3, [pc, #188]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008852:	d107      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008854:	f107 0318 	add.w	r3, r7, #24
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fb51 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008862:	e32e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008868:	e32b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800886a:	4b26      	ldr	r3, [pc, #152]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008876:	d107      	bne.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008878:	f107 030c 	add.w	r3, r7, #12
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fc93 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008886:	e31c      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888c:	e319      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800888e:	4b1d      	ldr	r3, [pc, #116]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008898:	4b1a      	ldr	r3, [pc, #104]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d10c      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80088a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088aa:	4b16      	ldr	r3, [pc, #88]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	4a14      	ldr	r2, [pc, #80]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088bc:	e01e      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088be:	4b11      	ldr	r3, [pc, #68]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ca:	d106      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80088cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088d2:	d102      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088d4:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d8:	e010      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088da:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e6:	d106      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ee:	d102      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f4:	e002      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088fa:	e2e2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088fc:	e2e1      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088fe:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008902:	e2de      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008904:	58024400 	.word	0x58024400
 8008908:	03d09000 	.word	0x03d09000
 800890c:	003d0900 	.word	0x003d0900
 8008910:	017d7840 	.word	0x017d7840
 8008914:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891c:	e2d1      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800891e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008922:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008926:	430b      	orrs	r3, r1
 8008928:	f040 809c 	bne.w	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800892c:	4b93      	ldr	r3, [pc, #588]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800892e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008930:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008934:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800893c:	d054      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008944:	f200 808b 	bhi.w	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800894e:	f000 8083 	beq.w	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008958:	f200 8081 	bhi.w	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008962:	d02f      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800896a:	d878      	bhi.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008978:	d012      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800897a:	e070      	b.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800897c:	4b7f      	ldr	r3, [pc, #508]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008988:	d107      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800898a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fd5e 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008998:	e293      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899e:	e290      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089a0:	4b76      	ldr	r3, [pc, #472]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ac:	d107      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ae:	f107 0318 	add.w	r3, r7, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 faa4 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089bc:	e281      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c2:	e27e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089c4:	4b6d      	ldr	r3, [pc, #436]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d0:	d107      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fbe6 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e0:	e26f      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e6:	e26c      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089e8:	4b64      	ldr	r3, [pc, #400]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089f2:	4b62      	ldr	r3, [pc, #392]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d10c      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a04:	4b5d      	ldr	r3, [pc, #372]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	08db      	lsrs	r3, r3, #3
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008a10:	fa22 f303 	lsr.w	r3, r2, r3
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a16:	e01e      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a18:	4b58      	ldr	r3, [pc, #352]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a24:	d106      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a2c:	d102      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a2e:	4b55      	ldr	r3, [pc, #340]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a32:	e010      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a34:	4b51      	ldr	r3, [pc, #324]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a40:	d106      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a48:	d102      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a4e:	e002      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a54:	e235      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a56:	e234      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a58:	4b4c      	ldr	r3, [pc, #304]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5c:	e231      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a62:	e22e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a68:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	f040 808f 	bne.w	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008a72:	4b42      	ldr	r3, [pc, #264]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a76:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a82:	d06b      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a8a:	d874      	bhi.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a92:	d056      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a9a:	d86c      	bhi.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008aa2:	d03b      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008aaa:	d864      	bhi.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab2:	d021      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aba:	d85c      	bhi.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac8:	d004      	beq.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008aca:	e054      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008acc:	f7fe fa0a 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 8008ad0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ad2:	e1f6      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ad4:	4b29      	ldr	r3, [pc, #164]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ae0:	d107      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae2:	f107 0318 	add.w	r3, r7, #24
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fa0a 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af0:	e1e7      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af6:	e1e4      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008af8:	4b20      	ldr	r3, [pc, #128]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b04:	d107      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b06:	f107 030c 	add.w	r3, r7, #12
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb4c 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b14:	e1d5      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b1a:	e1d2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b1c:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d109      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b28:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	08db      	lsrs	r3, r3, #3
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	4a13      	ldr	r2, [pc, #76]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008b34:	fa22 f303 	lsr.w	r3, r2, r3
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b3a:	e1c2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e1bf      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b42:	4b0e      	ldr	r3, [pc, #56]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b54:	e1b5      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5a:	e1b2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b5c:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b68:	d102      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008b6a:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6e:	e1a8      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b74:	e1a5      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7a:	e1a2      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	03d09000 	.word	0x03d09000
 8008b84:	003d0900 	.word	0x003d0900
 8008b88:	017d7840 	.word	0x017d7840
 8008b8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	d173      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008b9c:	4b9c      	ldr	r3, [pc, #624]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ba4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bac:	d02f      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bb4:	d863      	bhi.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d004      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc2:	d012      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008bc4:	e05b      	b.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc6:	4b92      	ldr	r3, [pc, #584]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd4:	f107 0318 	add.w	r3, r7, #24
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f991 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be2:	e16e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e16b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bea:	4b89      	ldr	r3, [pc, #548]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fad3 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e15c      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e159      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c0e:	4b80      	ldr	r3, [pc, #512]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c18:	4b7d      	ldr	r3, [pc, #500]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d10c      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2a:	4b79      	ldr	r3, [pc, #484]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	4a77      	ldr	r2, [pc, #476]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3c:	e01e      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c3e:	4b74      	ldr	r3, [pc, #464]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4a:	d106      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c52:	d102      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c54:	4b70      	ldr	r3, [pc, #448]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c58:	e010      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c66:	d106      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c70:	4b6a      	ldr	r3, [pc, #424]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c74:	e002      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c7a:	e122      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c7c:	e121      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e11e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c88:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	d133      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c90:	4b5f      	ldr	r3, [pc, #380]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca6:	d012      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ca8:	e023      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008caa:	4b59      	ldr	r3, [pc, #356]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fbc7 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc6:	e0fc      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ccc:	e0f9      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cce:	4b50      	ldr	r3, [pc, #320]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cda:	d107      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cdc:	f107 0318 	add.w	r3, r7, #24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f90d 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cea:	e0ea      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf0:	e0e7      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf6:	e0e4      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cfc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008d00:	430b      	orrs	r3, r1
 8008d02:	f040 808d 	bne.w	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008d06:	4b42      	ldr	r3, [pc, #264]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008d0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d16:	d06b      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d1e:	d874      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d26:	d056      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2e:	d86c      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d36:	d03b      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d3e:	d864      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d46:	d021      	beq.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4e:	d85c      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d5c:	d004      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008d5e:	e054      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008d60:	f000 f8b8 	bl	8008ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d66:	e0ac      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d68:	4b29      	ldr	r3, [pc, #164]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d74:	d107      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f8c0 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d84:	e09d      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8a:	e09a      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d8c:	4b20      	ldr	r3, [pc, #128]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d98:	d107      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fa02 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da8:	e08b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dae:	e088      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008db0:	4b17      	ldr	r3, [pc, #92]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d109      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dbc:	4b14      	ldr	r3, [pc, #80]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	08db      	lsrs	r3, r3, #3
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	4a13      	ldr	r2, [pc, #76]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dce:	e078      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd4:	e075      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008de4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de8:	e06b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dee:	e068      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008df0:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dfc:	d102      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008dfe:	4b07      	ldr	r3, [pc, #28]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e02:	e05e      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e08:	e05b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0e:	e058      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e10:	58024400 	.word	0x58024400
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e24:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	d148      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008e2c:	4b27      	ldr	r3, [pc, #156]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e3c:	d02a      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e44:	d838      	bhi.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e52:	d00d      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008e54:	e030      	b.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e56:	4b1d      	ldr	r3, [pc, #116]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e62:	d102      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008e64:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	e02b      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6e:	e028      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e70:	4b16      	ldr	r3, [pc, #88]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fae4 	bl	8009450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8c:	e019      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e92:	e016      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e94:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0318 	add.w	r3, r7, #24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f82a 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb0:	e007      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb6:	e004      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebc:	e001      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3740      	adds	r7, #64	@ 0x40
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	017d7840 	.word	0x017d7840

08008ed4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ed8:	f7fd ffd4 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8008edc:	4602      	mov	r2, r0
 8008ede:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	4904      	ldr	r1, [pc, #16]	@ (8008efc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008eea:	5ccb      	ldrb	r3, [r1, r3]
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	0801b384 	.word	0x0801b384

08008f00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b089      	sub	sp, #36	@ 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f08:	4ba1      	ldr	r3, [pc, #644]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f003 0303 	and.w	r3, r3, #3
 8008f10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008f12:	4b9f      	ldr	r3, [pc, #636]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f16:	0b1b      	lsrs	r3, r3, #12
 8008f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f22:	091b      	lsrs	r3, r3, #4
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008f2a:	4b99      	ldr	r3, [pc, #612]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	08db      	lsrs	r3, r3, #3
 8008f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	fb02 f303 	mul.w	r3, r2, r3
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8111 	beq.w	8009170 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	f000 8083 	beq.w	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	f200 80a1 	bhi.w	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d056      	beq.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008f6a:	e099      	b.n	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f6c:	4b88      	ldr	r3, [pc, #544]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d02d      	beq.n	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f78:	4b85      	ldr	r3, [pc, #532]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	4a84      	ldr	r2, [pc, #528]	@ (8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fd2:	e087      	b.n	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800919c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009016:	e065      	b.n	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902a:	4b59      	ldr	r3, [pc, #356]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	ed97 6a03 	vldr	s12, [r7, #12]
 800903e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800904e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800905a:	e043      	b.n	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	4b48      	ldr	r3, [pc, #288]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009082:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800909e:	e021      	b.n	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	4b37      	ldr	r3, [pc, #220]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80090e4:	4b2a      	ldr	r3, [pc, #168]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	0a5b      	lsrs	r3, r3, #9
 80090ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800910a:	ee17 2a90 	vmov	r2, s15
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009112:	4b1f      	ldr	r3, [pc, #124]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800912c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009138:	ee17 2a90 	vmov	r2, s15
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009140:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	0e1b      	lsrs	r3, r3, #24
 8009146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914a:	ee07 3a90 	vmov	s15, r3
 800914e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800915a:	edd7 6a07 	vldr	s13, [r7, #28]
 800915e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009166:	ee17 2a90 	vmov	r2, s15
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800916e:	e008      	b.n	8009182 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	609a      	str	r2, [r3, #8]
}
 8009182:	bf00      	nop
 8009184:	3724      	adds	r7, #36	@ 0x24
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	58024400 	.word	0x58024400
 8009194:	03d09000 	.word	0x03d09000
 8009198:	46000000 	.word	0x46000000
 800919c:	4c742400 	.word	0x4c742400
 80091a0:	4a742400 	.word	0x4a742400
 80091a4:	4bbebc20 	.word	0x4bbebc20

080091a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b089      	sub	sp, #36	@ 0x24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091b0:	4ba1      	ldr	r3, [pc, #644]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b4:	f003 0303 	and.w	r3, r3, #3
 80091b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80091ba:	4b9f      	ldr	r3, [pc, #636]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091be:	0d1b      	lsrs	r3, r3, #20
 80091c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80091c6:	4b9c      	ldr	r3, [pc, #624]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80091d2:	4b99      	ldr	r3, [pc, #612]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8111 	beq.w	8009418 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	f000 8083 	beq.w	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b02      	cmp	r3, #2
 8009202:	f200 80a1 	bhi.w	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d056      	beq.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009212:	e099      	b.n	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009214:	4b88      	ldr	r3, [pc, #544]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0320 	and.w	r3, r3, #32
 800921c:	2b00      	cmp	r3, #0
 800921e:	d02d      	beq.n	800927c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009220:	4b85      	ldr	r3, [pc, #532]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	08db      	lsrs	r3, r3, #3
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	4a84      	ldr	r2, [pc, #528]	@ (800943c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b7b      	ldr	r3, [pc, #492]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a03 	vldr	s12, [r7, #12]
 800925e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800927a:	e087      	b.n	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b6a      	ldr	r3, [pc, #424]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092be:	e065      	b.n	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b59      	ldr	r3, [pc, #356]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009302:	e043      	b.n	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800944c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009316:	4b48      	ldr	r3, [pc, #288]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009326:	ed97 6a03 	vldr	s12, [r7, #12]
 800932a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800932e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009346:	e021      	b.n	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935a:	4b37      	ldr	r3, [pc, #220]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	ed97 6a03 	vldr	s12, [r7, #12]
 800936e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800937e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800938a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800938c:	4b2a      	ldr	r3, [pc, #168]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009390:	0a5b      	lsrs	r3, r3, #9
 8009392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80093aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b2:	ee17 2a90 	vmov	r2, s15
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80093ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e0:	ee17 2a90 	vmov	r2, s15
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80093e8:	4b13      	ldr	r3, [pc, #76]	@ (8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ec:	0e1b      	lsrs	r3, r3, #24
 80093ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009402:	edd7 6a07 	vldr	s13, [r7, #28]
 8009406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800940a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800940e:	ee17 2a90 	vmov	r2, s15
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009416:	e008      	b.n	800942a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	609a      	str	r2, [r3, #8]
}
 800942a:	bf00      	nop
 800942c:	3724      	adds	r7, #36	@ 0x24
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	58024400 	.word	0x58024400
 800943c:	03d09000 	.word	0x03d09000
 8009440:	46000000 	.word	0x46000000
 8009444:	4c742400 	.word	0x4c742400
 8009448:	4a742400 	.word	0x4a742400
 800944c:	4bbebc20 	.word	0x4bbebc20

08009450 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009450:	b480      	push	{r7}
 8009452:	b089      	sub	sp, #36	@ 0x24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009458:	4ba0      	ldr	r3, [pc, #640]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800945a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009462:	4b9e      	ldr	r3, [pc, #632]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009466:	091b      	lsrs	r3, r3, #4
 8009468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800946c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800946e:	4b9b      	ldr	r3, [pc, #620]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009478:	4b98      	ldr	r3, [pc, #608]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800947a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947c:	08db      	lsrs	r3, r3, #3
 800947e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	fb02 f303 	mul.w	r3, r2, r3
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8111 	beq.w	80096be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	f000 8083 	beq.w	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	f200 80a1 	bhi.w	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d056      	beq.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80094b8:	e099      	b.n	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ba:	4b88      	ldr	r3, [pc, #544]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d02d      	beq.n	8009522 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094c6:	4b85      	ldr	r3, [pc, #532]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	08db      	lsrs	r3, r3, #3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	4a83      	ldr	r2, [pc, #524]	@ (80096e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80094d2:	fa22 f303 	lsr.w	r3, r2, r3
 80094d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f0:	4b7a      	ldr	r3, [pc, #488]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a03 	vldr	s12, [r7, #12]
 8009504:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009520:	e087      	b.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80096e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b69      	ldr	r3, [pc, #420]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009564:	e065      	b.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80096ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b58      	ldr	r3, [pc, #352]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a8:	e043      	b.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80095b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095bc:	4b47      	ldr	r3, [pc, #284]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ec:	e021      	b.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80096e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009600:	4b36      	ldr	r3, [pc, #216]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009610:	ed97 6a03 	vldr	s12, [r7, #12]
 8009614:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009630:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009632:	4b2a      	ldr	r3, [pc, #168]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009636:	0a5b      	lsrs	r3, r3, #9
 8009638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800964c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009658:	ee17 2a90 	vmov	r2, s15
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009660:	4b1e      	ldr	r3, [pc, #120]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009664:	0c1b      	lsrs	r3, r3, #16
 8009666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800967a:	edd7 6a07 	vldr	s13, [r7, #28]
 800967e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009686:	ee17 2a90 	vmov	r2, s15
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800968e:	4b13      	ldr	r3, [pc, #76]	@ (80096dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009692:	0e1b      	lsrs	r3, r3, #24
 8009694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b4:	ee17 2a90 	vmov	r2, s15
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80096bc:	e008      	b.n	80096d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	609a      	str	r2, [r3, #8]
}
 80096d0:	bf00      	nop
 80096d2:	3724      	adds	r7, #36	@ 0x24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	58024400 	.word	0x58024400
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	46000000 	.word	0x46000000
 80096e8:	4c742400 	.word	0x4c742400
 80096ec:	4a742400 	.word	0x4a742400
 80096f0:	4bbebc20 	.word	0x4bbebc20

080096f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009702:	4b53      	ldr	r3, [pc, #332]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	2b03      	cmp	r3, #3
 800970c:	d101      	bne.n	8009712 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e099      	b.n	8009846 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009712:	4b4f      	ldr	r3, [pc, #316]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a4e      	ldr	r2, [pc, #312]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009718:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800971c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800971e:	f7f9 fa7f 	bl	8002c20 <HAL_GetTick>
 8009722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009724:	e008      	b.n	8009738 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009726:	f7f9 fa7b 	bl	8002c20 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d901      	bls.n	8009738 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e086      	b.n	8009846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009738:	4b45      	ldr	r3, [pc, #276]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f0      	bne.n	8009726 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009744:	4b42      	ldr	r3, [pc, #264]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	031b      	lsls	r3, r3, #12
 8009752:	493f      	ldr	r1, [pc, #252]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009754:	4313      	orrs	r3, r2
 8009756:	628b      	str	r3, [r1, #40]	@ 0x28
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	3b01      	subs	r3, #1
 800975e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	3b01      	subs	r3, #1
 8009768:	025b      	lsls	r3, r3, #9
 800976a:	b29b      	uxth	r3, r3
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	3b01      	subs	r3, #1
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	3b01      	subs	r3, #1
 8009782:	061b      	lsls	r3, r3, #24
 8009784:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009788:	4931      	ldr	r1, [pc, #196]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 800978a:	4313      	orrs	r3, r2
 800978c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800978e:	4b30      	ldr	r3, [pc, #192]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	492d      	ldr	r1, [pc, #180]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 800979c:	4313      	orrs	r3, r2
 800979e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097a0:	4b2b      	ldr	r3, [pc, #172]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	f023 0220 	bic.w	r2, r3, #32
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	4928      	ldr	r1, [pc, #160]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097b2:	4b27      	ldr	r3, [pc, #156]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b6:	4a26      	ldr	r2, [pc, #152]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097b8:	f023 0310 	bic.w	r3, r3, #16
 80097bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097be:	4b24      	ldr	r3, [pc, #144]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097c2:	4b24      	ldr	r3, [pc, #144]	@ (8009854 <RCCEx_PLL2_Config+0x160>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	69d2      	ldr	r2, [r2, #28]
 80097ca:	00d2      	lsls	r2, r2, #3
 80097cc:	4920      	ldr	r1, [pc, #128]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	f043 0310 	orr.w	r3, r3, #16
 80097dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e8:	4a19      	ldr	r2, [pc, #100]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097f0:	e00f      	b.n	8009812 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d106      	bne.n	8009806 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80097f8:	4b15      	ldr	r3, [pc, #84]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fc:	4a14      	ldr	r2, [pc, #80]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009804:	e005      	b.n	8009812 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009806:	4b12      	ldr	r3, [pc, #72]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980a:	4a11      	ldr	r2, [pc, #68]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 800980c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009810:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009812:	4b0f      	ldr	r3, [pc, #60]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a0e      	ldr	r2, [pc, #56]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 8009818:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800981c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800981e:	f7f9 f9ff 	bl	8002c20 <HAL_GetTick>
 8009822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009824:	e008      	b.n	8009838 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009826:	f7f9 f9fb 	bl	8002c20 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2b02      	cmp	r3, #2
 8009832:	d901      	bls.n	8009838 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e006      	b.n	8009846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009838:	4b05      	ldr	r3, [pc, #20]	@ (8009850 <RCCEx_PLL2_Config+0x15c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0f0      	beq.n	8009826 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	ffff0007 	.word	0xffff0007

08009858 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009866:	4b53      	ldr	r3, [pc, #332]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b03      	cmp	r3, #3
 8009870:	d101      	bne.n	8009876 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e099      	b.n	80099aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009876:	4b4f      	ldr	r3, [pc, #316]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a4e      	ldr	r2, [pc, #312]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800987c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009882:	f7f9 f9cd 	bl	8002c20 <HAL_GetTick>
 8009886:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009888:	e008      	b.n	800989c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800988a:	f7f9 f9c9 	bl	8002c20 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e086      	b.n	80099aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800989c:	4b45      	ldr	r3, [pc, #276]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f0      	bne.n	800988a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098a8:	4b42      	ldr	r3, [pc, #264]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	051b      	lsls	r3, r3, #20
 80098b6:	493f      	ldr	r1, [pc, #252]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	025b      	lsls	r3, r3, #9
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	041b      	lsls	r3, r3, #16
 80098da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	061b      	lsls	r3, r3, #24
 80098e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098ec:	4931      	ldr	r1, [pc, #196]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098f2:	4b30      	ldr	r3, [pc, #192]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	492d      	ldr	r1, [pc, #180]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009900:	4313      	orrs	r3, r2
 8009902:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009904:	4b2b      	ldr	r3, [pc, #172]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	4928      	ldr	r1, [pc, #160]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009912:	4313      	orrs	r3, r2
 8009914:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009916:	4b27      	ldr	r3, [pc, #156]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	4a26      	ldr	r2, [pc, #152]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800991c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009922:	4b24      	ldr	r3, [pc, #144]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009926:	4b24      	ldr	r3, [pc, #144]	@ (80099b8 <RCCEx_PLL3_Config+0x160>)
 8009928:	4013      	ands	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	69d2      	ldr	r2, [r2, #28]
 800992e:	00d2      	lsls	r2, r2, #3
 8009930:	4920      	ldr	r1, [pc, #128]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009932:	4313      	orrs	r3, r2
 8009934:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009936:	4b1f      	ldr	r3, [pc, #124]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993a:	4a1e      	ldr	r2, [pc, #120]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800993c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d106      	bne.n	8009956 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009948:	4b1a      	ldr	r3, [pc, #104]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	4a19      	ldr	r2, [pc, #100]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800994e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009952:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009954:	e00f      	b.n	8009976 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d106      	bne.n	800996a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800995c:	4b15      	ldr	r3, [pc, #84]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800995e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009960:	4a14      	ldr	r2, [pc, #80]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009962:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009966:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009968:	e005      	b.n	8009976 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800996a:	4b12      	ldr	r3, [pc, #72]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	4a11      	ldr	r2, [pc, #68]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009974:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009976:	4b0f      	ldr	r3, [pc, #60]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a0e      	ldr	r2, [pc, #56]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800997c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009982:	f7f9 f94d 	bl	8002c20 <HAL_GetTick>
 8009986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009988:	e008      	b.n	800999c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800998a:	f7f9 f949 	bl	8002c20 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	2b02      	cmp	r3, #2
 8009996:	d901      	bls.n	800999c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e006      	b.n	80099aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800999c:	4b05      	ldr	r3, [pc, #20]	@ (80099b4 <RCCEx_PLL3_Config+0x15c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0f0      	beq.n	800998a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
 80099b8:	ffff0007 	.word	0xffff0007

080099bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	@ 0x28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e075      	b.n	8009aba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7f8 f92b 	bl	8001c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2204      	movs	r2, #4
 80099ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f868 	bl	8009ac4 <HAL_SD_InitCard>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e05d      	b.n	8009aba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80099fe:	f107 0308 	add.w	r3, r7, #8
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fdaf 	bl	800a568 <HAL_SD_GetCardStatus>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e052      	b.n	8009aba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009a14:	7e3b      	ldrb	r3, [r7, #24]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009a1a:	7e7b      	ldrb	r3, [r7, #25]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d10a      	bne.n	8009a3e <HAL_SD_Init+0x82>
 8009a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d102      	bne.n	8009a34 <HAL_SD_Init+0x78>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a3c:	e00b      	b.n	8009a56 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d104      	bne.n	8009a50 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a4e:	e002      	b.n	8009a56 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fe6d 	bl	800a73c <HAL_SD_ConfigWideBusOperation>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e026      	b.n	8009aba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009a6c:	f7f9 f8d8 	bl	8002c20 <HAL_GetTick>
 8009a70:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a72:	e011      	b.n	8009a98 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009a74:	f7f9 f8d4 	bl	8002c20 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	d109      	bne.n	8009a98 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a8a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e010      	b.n	8009aba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 ff61 	bl	800a960 <HAL_SD_GetCardState>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d1e7      	bne.n	8009a74 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	@ 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ac4:	b590      	push	{r4, r7, lr}
 8009ac6:	b08d      	sub	sp, #52	@ 0x34
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009acc:	2300      	movs	r3, #0
 8009ace:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009adc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009ae0:	f04f 0100 	mov.w	r1, #0
 8009ae4:	f7fe fc76 	bl	80083d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ae8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009afe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e070      	b.n	8009be6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	4a39      	ldr	r2, [pc, #228]	@ (8009bf0 <HAL_SD_InitCard+0x12c>)
 8009b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681c      	ldr	r4, [r3, #0]
 8009b16:	466a      	mov	r2, sp
 8009b18:	f107 0318 	add.w	r3, r7, #24
 8009b1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b20:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b24:	f107 030c 	add.w	r3, r7, #12
 8009b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f005 f86a 	bl	800ec04 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f005 f8ad 	bl	800ec94 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009b52:	4a28      	ldr	r2, [pc, #160]	@ (8009bf4 <HAL_SD_InitCard+0x130>)
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7f9 f86b 	bl	8002c38 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 ffea 	bl	800ab3c <SD_PowerON>
 8009b68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e02e      	b.n	8009be6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 ff09 	bl	800a9a0 <SD_InitCard>
 8009b8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00b      	beq.n	8009bae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e01b      	b.n	8009be6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f005 f902 	bl	800edc0 <SDMMC_CmdBlockLength>
 8009bbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00f      	beq.n	8009be4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8009bf8 <HAL_SD_InitCard+0x134>)
 8009bca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	372c      	adds	r7, #44	@ 0x2c
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	014f8b59 	.word	0x014f8b59
 8009bf4:	00012110 	.word	0x00012110
 8009bf8:	1fe00fff 	.word	0x1fe00fff

08009bfc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08c      	sub	sp, #48	@ 0x30
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d107      	bne.n	8009c24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e08d      	b.n	8009d40 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	f040 8086 	bne.w	8009d3e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	441a      	add	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d907      	bls.n	8009c56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e074      	b.n	8009d40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2203      	movs	r2, #3
 8009c5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	025a      	lsls	r2, r3, #9
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d002      	beq.n	8009c82 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	025b      	lsls	r3, r3, #9
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	025b      	lsls	r3, r3, #9
 8009c8c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c8e:	2390      	movs	r3, #144	@ 0x90
 8009c90:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c92:	2302      	movs	r3, #2
 8009c94:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f107 0210 	add.w	r2, r7, #16
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f005 f85d 	bl	800ed68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cbc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d90a      	bls.n	8009cea <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2282      	movs	r2, #130	@ 0x82
 8009cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f005 f8b3 	bl	800ee4c <SDMMC_CmdReadMultiBlock>
 8009ce6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009ce8:	e009      	b.n	8009cfe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2281      	movs	r2, #129	@ 0x81
 8009cee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f005 f885 	bl	800ee06 <SDMMC_CmdReadSingleBlock>
 8009cfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d012      	beq.n	8009d2a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a0f      	ldr	r2, [pc, #60]	@ (8009d48 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009d0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e00a      	b.n	8009d40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009d38:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e000      	b.n	8009d40 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d3e:	2302      	movs	r3, #2
  }
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3730      	adds	r7, #48	@ 0x30
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	1fe00fff 	.word	0x1fe00fff

08009d4c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08c      	sub	sp, #48	@ 0x30
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d107      	bne.n	8009d74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e08d      	b.n	8009e90 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	f040 8086 	bne.w	8009e8e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d907      	bls.n	8009da6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e074      	b.n	8009e90 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2203      	movs	r2, #3
 8009daa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	025a      	lsls	r2, r3, #9
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d002      	beq.n	8009dd2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	025b      	lsls	r3, r3, #9
 8009dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	025b      	lsls	r3, r3, #9
 8009ddc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009dde:	2390      	movs	r3, #144	@ 0x90
 8009de0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f107 0210 	add.w	r2, r7, #16
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f004 ffb5 	bl	800ed68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e0c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d90a      	bls.n	8009e3a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	22a0      	movs	r2, #160	@ 0xa0
 8009e28:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e30:	4618      	mov	r0, r3
 8009e32:	f005 f851 	bl	800eed8 <SDMMC_CmdWriteMultiBlock>
 8009e36:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009e38:	e009      	b.n	8009e4e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2290      	movs	r2, #144	@ 0x90
 8009e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e46:	4618      	mov	r0, r3
 8009e48:	f005 f823 	bl	800ee92 <SDMMC_CmdWriteSingleBlock>
 8009e4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a0f      	ldr	r2, [pc, #60]	@ (8009e98 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009e5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e62:	431a      	orrs	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e00a      	b.n	8009e90 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8009e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e000      	b.n	8009e90 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009e8e:	2302      	movs	r3, #2
  }
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3730      	adds	r7, #48	@ 0x30
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	1fe00fff 	.word	0x1fe00fff

08009e9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_SD_IRQHandler+0x2e>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 0308 	and.w	r3, r3, #8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f926 	bl	800b114 <SD_Read_IT>
 8009ec8:	e19a      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80ac 	beq.w	800a032 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ee2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4b59      	ldr	r3, [pc, #356]	@ (800a054 <HAL_SD_IRQHandler+0x1b8>)
 8009ef0:	400b      	ands	r3, r1
 8009ef2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009f02:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f12:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d038      	beq.n	8009f90 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <HAL_SD_IRQHandler+0x96>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f003 0320 	and.w	r3, r3, #32
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d011      	beq.n	8009f56 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f004 fff2 	bl	800ef20 <SDMMC_CmdStopTransfer>
 8009f3c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f95b 	bl	800a20c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a3f      	ldr	r2, [pc, #252]	@ (800a058 <HAL_SD_IRQHandler+0x1bc>)
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <HAL_SD_IRQHandler+0xe4>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f005 fca5 	bl	800f8d0 <HAL_SD_RxCpltCallback>
 8009f86:	e13b      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f005 fc97 	bl	800f8bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f8e:	e137      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 8132 	beq.w	800a200 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d104      	bne.n	8009fc8 <HAL_SD_IRQHandler+0x12c>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f003 0320 	and.w	r3, r3, #32
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d011      	beq.n	8009fec <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f004 ffa7 	bl	800ef20 <SDMMC_CmdStopTransfer>
 8009fd2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d008      	beq.n	8009fec <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f910 	bl	800a20c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f003 0310 	and.w	r3, r3, #16
 800a000:	2b00      	cmp	r3, #0
 800a002:	d104      	bne.n	800a00e <HAL_SD_IRQHandler+0x172>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f005 fc54 	bl	800f8bc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d105      	bne.n	800a02a <HAL_SD_IRQHandler+0x18e>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80eb 	beq.w	800a200 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f005 fc50 	bl	800f8d0 <HAL_SD_RxCpltCallback>
}
 800a030:	e0e6      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00d      	beq.n	800a05c <HAL_SD_IRQHandler+0x1c0>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d008      	beq.n	800a05c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f8a8 	bl	800b1a0 <SD_Write_IT>
 800a050:	e0d6      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
 800a052:	bf00      	nop
 800a054:	ffff3ec5 	.word	0xffff3ec5
 800a058:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a062:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 809d 	beq.w	800a1a6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07e:	f043 0202 	orr.w	r2, r3, #2
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a098:	f043 0208 	orr.w	r2, r3, #8
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a6:	f003 0320 	and.w	r3, r3, #32
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b2:	f043 0220 	orr.w	r2, r3, #32
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0cc:	f043 0210 	orr.w	r2, r3, #16
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a4b      	ldr	r2, [pc, #300]	@ (800a208 <HAL_SD_IRQHandler+0x36c>)
 800a0da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a0ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0fa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a10a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a11a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f004 fefd 	bl	800ef20 <SDMMC_CmdStopTransfer>
 800a126:	4602      	mov	r2, r0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a12c:	431a      	orrs	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a140:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a14a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f851 	bl	800a20c <HAL_SD_ErrorCallback>
}
 800a16a:	e049      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d044      	beq.n	800a200 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d040      	beq.n	800a200 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a18c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f834 	bl	800a20c <HAL_SD_ErrorCallback>
}
 800a1a4:	e02c      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d025      	beq.n	800a200 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10c      	bne.n	800a1e6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 f84a 	bl	800b270 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a1dc:	e010      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 f832 	bl	800b248 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a1e4:	e00c      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f833 	bl	800b25c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a1f6:	e003      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 f81b 	bl	800b234 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a1fe:	e7ff      	b.n	800a200 <HAL_SD_IRQHandler+0x364>
 800a200:	bf00      	nop
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	18000f3a 	.word	0x18000f3a

0800a20c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a22e:	0f9b      	lsrs	r3, r3, #30
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a23a:	0e9b      	lsrs	r3, r3, #26
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	b2da      	uxtb	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a24c:	0e1b      	lsrs	r3, r3, #24
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	b2da      	uxtb	r2, r3
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	b2da      	uxtb	r2, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a26a:	0a1b      	lsrs	r3, r3, #8
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a276:	b2da      	uxtb	r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a280:	0d1b      	lsrs	r3, r3, #20
 800a282:	b29a      	uxth	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a28c:	0c1b      	lsrs	r3, r3, #16
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 030f 	and.w	r3, r3, #15
 800a294:	b2da      	uxtb	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29e:	0bdb      	lsrs	r3, r3, #15
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b0:	0b9b      	lsrs	r3, r3, #14
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c2:	0b5b      	lsrs	r3, r3, #13
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2d4:	0b1b      	lsrs	r3, r3, #12
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d163      	bne.n	800a3b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2f4:	009a      	lsls	r2, r3, #2
 800a2f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a300:	0f92      	lsrs	r2, r2, #30
 800a302:	431a      	orrs	r2, r3
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a30c:	0edb      	lsrs	r3, r3, #27
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	b2da      	uxtb	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a31e:	0e1b      	lsrs	r3, r3, #24
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	b2da      	uxtb	r2, r3
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a330:	0d5b      	lsrs	r3, r3, #21
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a342:	0c9b      	lsrs	r3, r3, #18
 800a344:	b2db      	uxtb	r3, r3
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a354:	0bdb      	lsrs	r3, r3, #15
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	7e1b      	ldrb	r3, [r3, #24]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	3302      	adds	r3, #2
 800a378:	2201      	movs	r2, #1
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a382:	fb03 f202 	mul.w	r2, r3, r2
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	7a1b      	ldrb	r3, [r3, #8]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	2201      	movs	r2, #1
 800a396:	409a      	lsls	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a3a4:	0a52      	lsrs	r2, r2, #9
 800a3a6:	fb03 f202 	mul.w	r2, r3, r2
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3b4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3b6:	e031      	b.n	800a41c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d11d      	bne.n	800a3fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	029a      	lsls	r2, r3, #10
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3fa:	e00f      	b.n	800a41c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a58      	ldr	r2, [pc, #352]	@ (800a564 <HAL_SD_GetCardCSD+0x344>)
 800a402:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a408:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e09d      	b.n	800a558 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a420:	0b9b      	lsrs	r3, r3, #14
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a432:	09db      	lsrs	r3, r3, #7
 800a434:	b2db      	uxtb	r3, r3
 800a436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a454:	0fdb      	lsrs	r3, r3, #31
 800a456:	b2da      	uxtb	r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a460:	0f5b      	lsrs	r3, r3, #29
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a472:	0e9b      	lsrs	r3, r3, #26
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a484:	0d9b      	lsrs	r3, r3, #22
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a496:	0d5b      	lsrs	r3, r3, #21
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4b2:	0c1b      	lsrs	r3, r3, #16
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4c6:	0bdb      	lsrs	r3, r3, #15
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4da:	0b9b      	lsrs	r3, r3, #14
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4ee:	0b5b      	lsrs	r3, r3, #13
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a502:	0b1b      	lsrs	r3, r3, #12
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a516:	0a9b      	lsrs	r3, r3, #10
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	b2da      	uxtb	r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a53e:	085b      	lsrs	r3, r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a546:	b2da      	uxtb	r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	1fe00fff 	.word	0x1fe00fff

0800a568 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b094      	sub	sp, #80	@ 0x50
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b03      	cmp	r3, #3
 800a582:	d101      	bne.n	800a588 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0a7      	b.n	800a6d8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a588:	f107 0308 	add.w	r3, r7, #8
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fb62 	bl	800ac58 <SD_SendSDStatus>
 800a594:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d011      	beq.n	800a5c0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a4f      	ldr	r2, [pc, #316]	@ (800a6e0 <HAL_SD_GetCardStatus+0x178>)
 800a5a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a5be:	e070      	b.n	800a6a2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	099b      	lsrs	r3, r3, #6
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	095b      	lsrs	r3, r3, #5
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	0e1b      	lsrs	r3, r3, #24
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	061a      	lsls	r2, r3, #24
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	021b      	lsls	r3, r3, #8
 800a602:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a606:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a610:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	0e1b      	lsrs	r3, r3, #24
 800a616:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	0a1b      	lsrs	r3, r3, #8
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	0d1b      	lsrs	r3, r3, #20
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	0c1b      	lsrs	r3, r3, #16
 800a642:	b29b      	uxth	r3, r3
 800a644:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a648:	b29a      	uxth	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b29a      	uxth	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	0a9b      	lsrs	r3, r3, #10
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	0a1b      	lsrs	r3, r3, #8
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0303 	and.w	r3, r3, #3
 800a674:	b2da      	uxtb	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	091b      	lsrs	r3, r3, #4
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 030f 	and.w	r3, r3, #15
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	0e1b      	lsrs	r3, r3, #24
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f004 fb88 	bl	800edc0 <SDMMC_CmdBlockLength>
 800a6b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00d      	beq.n	800a6d4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a08      	ldr	r2, [pc, #32]	@ (800a6e0 <HAL_SD_GetCardStatus+0x178>)
 800a6be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6c4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800a6d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3750      	adds	r7, #80	@ 0x50
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	1fe00fff 	.word	0x1fe00fff

0800a6e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b08d      	sub	sp, #52	@ 0x34
 800a740:	af02      	add	r7, sp, #8
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2203      	movs	r2, #3
 800a750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d02e      	beq.n	800a7ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a762:	d106      	bne.n	800a772 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a768:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a770:	e029      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a778:	d10a      	bne.n	800a790 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fb64 	bl	800ae48 <SD_WideBus_Enable>
 800a780:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a78e:	e01a      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fba1 	bl	800aede <SD_WideBus_Disable>
 800a79c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a7aa:	e00c      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	635a      	str	r2, [r3, #52]	@ 0x34
 800a7b8:	e005      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a5f      	ldr	r2, [pc, #380]	@ (800a950 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a7d4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7dc:	e096      	b.n	800a90c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a7de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a7e2:	f04f 0100 	mov.w	r1, #0
 800a7e6:	f7fd fdf5 	bl	80083d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8083 	beq.w	800a8fa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	695a      	ldr	r2, [r3, #20]
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	4950      	ldr	r1, [pc, #320]	@ (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a812:	fba1 1303 	umull	r1, r3, r1, r3
 800a816:	0e1b      	lsrs	r3, r3, #24
 800a818:	429a      	cmp	r2, r3
 800a81a:	d303      	bcc.n	800a824 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	e05a      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82c:	d103      	bne.n	800a836 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	e051      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a83e:	d126      	bne.n	800a88e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10e      	bne.n	800a866 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	4a43      	ldr	r2, [pc, #268]	@ (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d906      	bls.n	800a85e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	4a40      	ldr	r2, [pc, #256]	@ (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a854:	fba2 2303 	umull	r2, r3, r2, r3
 800a858:	0e5b      	lsrs	r3, r3, #25
 800a85a:	61bb      	str	r3, [r7, #24]
 800a85c:	e03d      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	61bb      	str	r3, [r7, #24]
 800a864:	e039      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a872:	4a39      	ldr	r2, [pc, #228]	@ (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d906      	bls.n	800a886 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	4a36      	ldr	r2, [pc, #216]	@ (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a87c:	fba2 2303 	umull	r2, r3, r2, r3
 800a880:	0e5b      	lsrs	r3, r3, #25
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e029      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	e025      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10e      	bne.n	800a8b4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	4a30      	ldr	r2, [pc, #192]	@ (800a95c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d906      	bls.n	800a8ac <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4a2c      	ldr	r2, [pc, #176]	@ (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	0e1b      	lsrs	r3, r3, #24
 800a8a8:	61bb      	str	r3, [r7, #24]
 800a8aa:	e016      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	61bb      	str	r3, [r7, #24]
 800a8b2:	e012      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c0:	4a26      	ldr	r2, [pc, #152]	@ (800a95c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d906      	bls.n	800a8d4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	4a22      	ldr	r2, [pc, #136]	@ (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0e1b      	lsrs	r3, r3, #24
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	e002      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681c      	ldr	r4, [r3, #0]
 800a8de:	466a      	mov	r2, sp
 800a8e0:	f107 0314 	add.w	r3, r7, #20
 800a8e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800a8ec:	f107 0308 	add.w	r3, r7, #8
 800a8f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f004 f986 	bl	800ec04 <SDMMC_Init>
 800a8f8:	e008      	b.n	800a90c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a914:	4618      	mov	r0, r3
 800a916:	f004 fa53 	bl	800edc0 <SDMMC_CmdBlockLength>
 800a91a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00c      	beq.n	800a93c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a0a      	ldr	r2, [pc, #40]	@ (800a950 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a928:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a948:	4618      	mov	r0, r3
 800a94a:	372c      	adds	r7, #44	@ 0x2c
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd90      	pop	{r4, r7, pc}
 800a950:	1fe00fff 	.word	0x1fe00fff
 800a954:	55e63b89 	.word	0x55e63b89
 800a958:	02faf080 	.word	0x02faf080
 800a95c:	017d7840 	.word	0x017d7840

0800a960 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a96c:	f107 030c 	add.w	r3, r7, #12
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa40 	bl	800adf8 <SD_SendStatus>
 800a978:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	0a5b      	lsrs	r3, r3, #9
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a996:	693b      	ldr	r3, [r7, #16]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b090      	sub	sp, #64	@ 0x40
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a9ac:	f7f8 f938 	bl	8002c20 <HAL_GetTick>
 800a9b0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f004 f97d 	bl	800ecb6 <SDMMC_GetPowerState>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a9c6:	e0b5      	b.n	800ab34 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d02e      	beq.n	800aa2e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f004 fbc8 	bl	800f16a <SDMMC_CmdSendCID>
 800a9da:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <SD_InitCard+0x46>
    {
      return errorstate;
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e4:	e0a6      	b.n	800ab34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f004 f9a8 	bl	800ed42 <SDMMC_GetResponse>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2104      	movs	r1, #4
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f004 f99f 	bl	800ed42 <SDMMC_GetResponse>
 800aa04:	4602      	mov	r2, r0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2108      	movs	r1, #8
 800aa10:	4618      	mov	r0, r3
 800aa12:	f004 f996 	bl	800ed42 <SDMMC_GetResponse>
 800aa16:	4602      	mov	r2, r0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	210c      	movs	r1, #12
 800aa22:	4618      	mov	r0, r3
 800aa24:	f004 f98d 	bl	800ed42 <SDMMC_GetResponse>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d01d      	beq.n	800aa72 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800aa36:	e019      	b.n	800aa6c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f107 020a 	add.w	r2, r7, #10
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f004 fbd0 	bl	800f1e8 <SDMMC_CmdSetRelAdd>
 800aa48:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <SD_InitCard+0xb4>
      {
        return errorstate;
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	e06f      	b.n	800ab34 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800aa54:	f7f8 f8e4 	bl	8002c20 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d902      	bls.n	800aa6c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800aa66:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa6a:	e063      	b.n	800ab34 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800aa6c:	897b      	ldrh	r3, [r7, #10]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0e2      	beq.n	800aa38 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d036      	beq.n	800aae8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa7a:	897b      	ldrh	r3, [r7, #10]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8a:	041b      	lsls	r3, r3, #16
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f004 fb8a 	bl	800f1a8 <SDMMC_CmdSendCSD>
 800aa94:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <SD_InitCard+0x100>
    {
      return errorstate;
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9e:	e049      	b.n	800ab34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f004 f94b 	bl	800ed42 <SDMMC_GetResponse>
 800aaac:	4602      	mov	r2, r0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2104      	movs	r1, #4
 800aab8:	4618      	mov	r0, r3
 800aaba:	f004 f942 	bl	800ed42 <SDMMC_GetResponse>
 800aabe:	4602      	mov	r2, r0
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2108      	movs	r1, #8
 800aaca:	4618      	mov	r0, r3
 800aacc:	f004 f939 	bl	800ed42 <SDMMC_GetResponse>
 800aad0:	4602      	mov	r2, r0
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	210c      	movs	r1, #12
 800aadc:	4618      	mov	r0, r3
 800aade:	f004 f930 	bl	800ed42 <SDMMC_GetResponse>
 800aae2:	4602      	mov	r2, r0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2104      	movs	r1, #4
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f004 f927 	bl	800ed42 <SDMMC_GetResponse>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	0d1a      	lsrs	r2, r3, #20
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aafc:	f107 030c 	add.w	r3, r7, #12
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff fb8c 	bl	800a220 <HAL_SD_GetCardCSD>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab12:	e00f      	b.n	800ab34 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab1c:	041b      	lsls	r3, r3, #16
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4610      	mov	r0, r2
 800ab22:	f004 fa39 	bl	800ef98 <SDMMC_CmdSelDesel>
 800ab26:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <SD_InitCard+0x192>
  {
    return errorstate;
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab30:	e000      	b.n	800ab34 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3740      	adds	r7, #64	@ 0x40
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f004 fa42 	bl	800efde <SDMMC_CmdGoIdleState>
 800ab5a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	e072      	b.n	800ac4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f004 fa55 	bl	800f01a <SDMMC_CmdOperCond>
 800ab70:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab78:	d10d      	bne.n	800ab96 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f004 fa2a 	bl	800efde <SDMMC_CmdGoIdleState>
 800ab8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <SD_PowerON+0x60>
    {
      return errorstate;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	e05a      	b.n	800ac4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d137      	bne.n	800ac14 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f004 fa55 	bl	800f05a <SDMMC_CmdAppCommand>
 800abb0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02d      	beq.n	800ac14 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800abbc:	e046      	b.n	800ac4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2100      	movs	r1, #0
 800abc4:	4618      	mov	r0, r3
 800abc6:	f004 fa48 	bl	800f05a <SDMMC_CmdAppCommand>
 800abca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	e03a      	b.n	800ac4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	491e      	ldr	r1, [pc, #120]	@ (800ac54 <SD_PowerON+0x118>)
 800abdc:	4618      	mov	r0, r3
 800abde:	f004 fa5f 	bl	800f0a0 <SDMMC_CmdAppOperCommand>
 800abe2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800abee:	e02d      	b.n	800ac4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f004 f8a3 	bl	800ed42 <SDMMC_GetResponse>
 800abfc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	0fdb      	lsrs	r3, r3, #31
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d101      	bne.n	800ac0a <SD_PowerON+0xce>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <SD_PowerON+0xd0>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	613b      	str	r3, [r7, #16]

    count++;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	3301      	adds	r3, #1
 800ac12:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d802      	bhi.n	800ac24 <SD_PowerON+0xe8>
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0cc      	beq.n	800abbe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d902      	bls.n	800ac34 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ac2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac32:	e00b      	b.n	800ac4c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	c1100000 	.word	0xc1100000

0800ac58 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08c      	sub	sp, #48	@ 0x30
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ac62:	f7f7 ffdd 	bl	8002c20 <HAL_GetTick>
 800ac66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f004 f865 	bl	800ed42 <SDMMC_GetResponse>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac82:	d102      	bne.n	800ac8a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac88:	e0b0      	b.n	800adec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2140      	movs	r1, #64	@ 0x40
 800ac90:	4618      	mov	r0, r3
 800ac92:	f004 f895 	bl	800edc0 <SDMMC_CmdBlockLength>
 800ac96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	e0a0      	b.n	800adec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f004 f9cf 	bl	800f05a <SDMMC_CmdAppCommand>
 800acbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	e08d      	b.n	800adec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800acd6:	2340      	movs	r3, #64	@ 0x40
 800acd8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800acda:	2360      	movs	r3, #96	@ 0x60
 800acdc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800acde:	2302      	movs	r3, #2
 800ace0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ace6:	2301      	movs	r3, #1
 800ace8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f107 0208 	add.w	r2, r7, #8
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f004 f837 	bl	800ed68 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f004 fab7 	bl	800f272 <SDMMC_CmdStatusRegister>
 800ad04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d02b      	beq.n	800ad64 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	e069      	b.n	800adec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d013      	beq.n	800ad4e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ad26:	2300      	movs	r3, #0
 800ad28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad2a:	e00d      	b.n	800ad48 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f003 ff91 	bl	800ec58 <SDMMC_ReadFIFO>
 800ad36:	4602      	mov	r2, r0
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	601a      	str	r2, [r3, #0]
        pData++;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	3304      	adds	r3, #4
 800ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800ad42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad44:	3301      	adds	r3, #1
 800ad46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	2b07      	cmp	r3, #7
 800ad4c:	d9ee      	bls.n	800ad2c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ad4e:	f7f7 ff67 	bl	8002c20 <HAL_GetTick>
 800ad52:	4602      	mov	r2, r0
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d102      	bne.n	800ad64 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ad5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad62:	e043      	b.n	800adec <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0d2      	beq.n	800ad18 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad78:	f003 0308 	and.w	r3, r3, #8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ad80:	2308      	movs	r3, #8
 800ad82:	e033      	b.n	800adec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ad92:	2302      	movs	r3, #2
 800ad94:	e02a      	b.n	800adec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d017      	beq.n	800add4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ada4:	2320      	movs	r3, #32
 800ada6:	e021      	b.n	800adec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4618      	mov	r0, r3
 800adae:	f003 ff53 	bl	800ec58 <SDMMC_ReadFIFO>
 800adb2:	4602      	mov	r2, r0
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	601a      	str	r2, [r3, #0]
    pData++;
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	3304      	adds	r3, #4
 800adbc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800adbe:	f7f7 ff2f 	bl	8002c20 <HAL_GetTick>
 800adc2:	4602      	mov	r2, r0
 800adc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adcc:	d102      	bne.n	800add4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800adce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800add2:	e00b      	b.n	800adec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e2      	bne.n	800ada8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a03      	ldr	r2, [pc, #12]	@ (800adf4 <SD_SendSDStatus+0x19c>)
 800ade8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3730      	adds	r7, #48	@ 0x30
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	18000f3a 	.word	0x18000f3a

0800adf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ae08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ae0c:	e018      	b.n	800ae40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f004 fa06 	bl	800f22c <SDMMC_CmdSendStatus>
 800ae20:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	e009      	b.n	800ae40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f003 ff85 	bl	800ed42 <SDMMC_GetResponse>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	2300      	movs	r3, #0
 800ae56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f003 ff6f 	bl	800ed42 <SDMMC_GetResponse>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae6e:	d102      	bne.n	800ae76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae74:	e02f      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f879 	bl	800af74 <SD_FindSCR>
 800ae82:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	e023      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01c      	beq.n	800aed2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f004 f8d8 	bl	800f05a <SDMMC_CmdAppCommand>
 800aeaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	e00f      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2102      	movs	r1, #2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f004 f90f 	bl	800f0e0 <SDMMC_CmdBusWidth>
 800aec2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	e003      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aece:	2300      	movs	r3, #0
 800aed0:	e001      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aed2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	2300      	movs	r3, #0
 800aeec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2100      	movs	r1, #0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f003 ff24 	bl	800ed42 <SDMMC_GetResponse>
 800aefa:	4603      	mov	r3, r0
 800aefc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af04:	d102      	bne.n	800af0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af0a:	e02f      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f82e 	bl	800af74 <SD_FindSCR>
 800af18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	e023      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01c      	beq.n	800af68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f004 f88d 	bl	800f05a <SDMMC_CmdAppCommand>
 800af40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	e00f      	b.n	800af6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f004 f8c4 	bl	800f0e0 <SDMMC_CmdBusWidth>
 800af58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	e003      	b.n	800af6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af64:	2300      	movs	r3, #0
 800af66:	e001      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af68:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08e      	sub	sp, #56	@ 0x38
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af7e:	f7f7 fe4f 	bl	8002c20 <HAL_GetTick>
 800af82:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800af88:	2300      	movs	r3, #0
 800af8a:	60bb      	str	r3, [r7, #8]
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2108      	movs	r1, #8
 800af9a:	4618      	mov	r0, r3
 800af9c:	f003 ff10 	bl	800edc0 <SDMMC_CmdBlockLength>
 800afa0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800afa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <SD_FindSCR+0x38>
  {
    return errorstate;
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	e0ad      	b.n	800b108 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb4:	041b      	lsls	r3, r3, #16
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f004 f84e 	bl	800f05a <SDMMC_CmdAppCommand>
 800afbe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <SD_FindSCR+0x56>
  {
    return errorstate;
 800afc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc8:	e09e      	b.n	800b108 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afca:	f04f 33ff 	mov.w	r3, #4294967295
 800afce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800afd0:	2308      	movs	r3, #8
 800afd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800afd4:	2330      	movs	r3, #48	@ 0x30
 800afd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afd8:	2302      	movs	r3, #2
 800afda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afdc:	2300      	movs	r3, #0
 800afde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f107 0210 	add.w	r2, r7, #16
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f003 feba 	bl	800ed68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f004 f894 	bl	800f126 <SDMMC_CmdSendSCR>
 800affe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b002:	2b00      	cmp	r3, #0
 800b004:	d027      	beq.n	800b056 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	e07e      	b.n	800b108 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d113      	bne.n	800b040 <SD_FindSCR+0xcc>
 800b018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d110      	bne.n	800b040 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4618      	mov	r0, r3
 800b024:	f003 fe18 	bl	800ec58 <SDMMC_ReadFIFO>
 800b028:	4603      	mov	r3, r0
 800b02a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	f003 fe11 	bl	800ec58 <SDMMC_ReadFIFO>
 800b036:	4603      	mov	r3, r0
 800b038:	60fb      	str	r3, [r7, #12]
      index++;
 800b03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03c:	3301      	adds	r3, #1
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b040:	f7f7 fdee 	bl	8002c20 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d102      	bne.n	800b056 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b054:	e058      	b.n	800b108 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b05c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b060:	4013      	ands	r3, r2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0d1      	beq.n	800b00a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2208      	movs	r2, #8
 800b07a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b07c:	2308      	movs	r3, #8
 800b07e:	e043      	b.n	800b108 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2202      	movs	r2, #2
 800b094:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b096:	2302      	movs	r3, #2
 800b098:	e036      	b.n	800b108 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b0b0:	2320      	movs	r3, #32
 800b0b2:	e029      	b.n	800b108 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a15      	ldr	r2, [pc, #84]	@ (800b110 <SD_FindSCR+0x19c>)
 800b0ba:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	061a      	lsls	r2, r3, #24
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b0d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	0e1b      	lsrs	r3, r3, #24
 800b0d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	601a      	str	r2, [r3, #0]
    scr++;
 800b0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	061a      	lsls	r2, r3, #24
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	0a1b      	lsrs	r3, r3, #8
 800b0f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b0fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	0e1b      	lsrs	r3, r3, #24
 800b100:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b104:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3738      	adds	r7, #56	@ 0x38
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	18000f3a 	.word	0x18000f3a

0800b114 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b120:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b126:	2b1f      	cmp	r3, #31
 800b128:	d936      	bls.n	800b198 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
 800b12e:	e027      	b.n	800b180 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f003 fd8f 	bl	800ec58 <SDMMC_ReadFIFO>
 800b13a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	3301      	adds	r3, #1
 800b148:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	0a1b      	lsrs	r3, r3, #8
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	3301      	adds	r3, #1
 800b158:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	0c1b      	lsrs	r3, r3, #16
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	3301      	adds	r3, #1
 800b168:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	0e1b      	lsrs	r3, r3, #24
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	3301      	adds	r3, #1
 800b178:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b07      	cmp	r3, #7
 800b184:	d9d4      	bls.n	800b130 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b190:	f1a3 0220 	sub.w	r2, r3, #32
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b198:	bf00      	nop
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	2b1f      	cmp	r3, #31
 800b1b4:	d93a      	bls.n	800b22c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	e02b      	b.n	800b214 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	021a      	lsls	r2, r3, #8
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	041a      	lsls	r2, r3, #16
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	061a      	lsls	r2, r3, #24
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f107 020c 	add.w	r2, r7, #12
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f003 fd32 	bl	800ec72 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	3301      	adds	r3, #1
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2b07      	cmp	r3, #7
 800b218:	d9d0      	bls.n	800b1bc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	f1a3 0220 	sub.w	r2, r3, #32
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	621a      	str	r2, [r3, #32]
  }
}
 800b22c:	bf00      	nop
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e10f      	b.n	800b4b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a87      	ldr	r2, [pc, #540]	@ (800b4c0 <HAL_SPI_Init+0x23c>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d00f      	beq.n	800b2c6 <HAL_SPI_Init+0x42>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a86      	ldr	r2, [pc, #536]	@ (800b4c4 <HAL_SPI_Init+0x240>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d00a      	beq.n	800b2c6 <HAL_SPI_Init+0x42>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a84      	ldr	r2, [pc, #528]	@ (800b4c8 <HAL_SPI_Init+0x244>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d005      	beq.n	800b2c6 <HAL_SPI_Init+0x42>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	2b0f      	cmp	r3, #15
 800b2c0:	d901      	bls.n	800b2c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e0f7      	b.n	800b4b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fe2e 	bl	800bf28 <SPI_GetPacketSize>
 800b2cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a7b      	ldr	r2, [pc, #492]	@ (800b4c0 <HAL_SPI_Init+0x23c>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d00c      	beq.n	800b2f2 <HAL_SPI_Init+0x6e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a79      	ldr	r2, [pc, #484]	@ (800b4c4 <HAL_SPI_Init+0x240>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <HAL_SPI_Init+0x6e>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a78      	ldr	r2, [pc, #480]	@ (800b4c8 <HAL_SPI_Init+0x244>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d002      	beq.n	800b2f2 <HAL_SPI_Init+0x6e>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b08      	cmp	r3, #8
 800b2f0:	d811      	bhi.n	800b316 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2f6:	4a72      	ldr	r2, [pc, #456]	@ (800b4c0 <HAL_SPI_Init+0x23c>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d009      	beq.n	800b310 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a70      	ldr	r2, [pc, #448]	@ (800b4c4 <HAL_SPI_Init+0x240>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d004      	beq.n	800b310 <HAL_SPI_Init+0x8c>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a6f      	ldr	r2, [pc, #444]	@ (800b4c8 <HAL_SPI_Init+0x244>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d104      	bne.n	800b31a <HAL_SPI_Init+0x96>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b10      	cmp	r3, #16
 800b314:	d901      	bls.n	800b31a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e0cd      	b.n	800b4b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7f6 fd72 	bl	8001e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0201 	bic.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b356:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b360:	d119      	bne.n	800b396 <HAL_SPI_Init+0x112>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b36a:	d103      	bne.n	800b374 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10c      	bne.n	800b396 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b384:	d107      	bne.n	800b396 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b394:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00f      	beq.n	800b3c2 <HAL_SPI_Init+0x13e>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	2b06      	cmp	r3, #6
 800b3a8:	d90b      	bls.n	800b3c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	e007      	b.n	800b3d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b3d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69da      	ldr	r2, [r3, #28]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e4:	ea42 0103 	orr.w	r1, r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b402:	431a      	orrs	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	431a      	orrs	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	431a      	orrs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	431a      	orrs	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	431a      	orrs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	431a      	orrs	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b426:	431a      	orrs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b432:	ea42 0103 	orr.w	r1, r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d113      	bne.n	800b472 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b45c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b470:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0201 	bic.w	r2, r2, #1
 800b480:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40013000 	.word	0x40013000
 800b4c4:	40003800 	.word	0x40003800
 800b4c8:	40003c00 	.word	0x40003c00

0800b4cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3320      	adds	r3, #32
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4e4:	f7f7 fb9c 	bl	8002c20 <HAL_GetTick>
 800b4e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d001      	beq.n	800b4fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	e1d1      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <HAL_SPI_Transmit+0x3a>
 800b500:	88fb      	ldrh	r3, [r7, #6]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e1c9      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_SPI_Transmit+0x4c>
 800b514:	2302      	movs	r3, #2
 800b516:	e1c2      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2203      	movs	r2, #3
 800b524:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	88fa      	ldrh	r2, [r7, #6]
 800b53a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	88fa      	ldrh	r2, [r7, #6]
 800b542:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b570:	d108      	bne.n	800b584 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	e009      	b.n	800b598 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b596:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	4b96      	ldr	r3, [pc, #600]	@ (800b7f8 <HAL_SPI_Transmit+0x32c>)
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	88f9      	ldrh	r1, [r7, #6]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	6812      	ldr	r2, [r2, #0]
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5c4:	d107      	bne.n	800b5d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	2b0f      	cmp	r3, #15
 800b5dc:	d947      	bls.n	800b66e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b5de:	e03f      	b.n	800b660 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d114      	bne.n	800b618 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5fe:	1d1a      	adds	r2, r3, #4
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	3b01      	subs	r3, #1
 800b60e:	b29a      	uxth	r2, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b616:	e023      	b.n	800b660 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b618:	f7f7 fb02 	bl	8002c20 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d803      	bhi.n	800b630 <HAL_SPI_Transmit+0x164>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62e:	d102      	bne.n	800b636 <HAL_SPI_Transmit+0x16a>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d114      	bne.n	800b660 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fba8 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b642:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e11e      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b666:	b29b      	uxth	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1b9      	bne.n	800b5e0 <HAL_SPI_Transmit+0x114>
 800b66c:	e0f1      	b.n	800b852 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	2b07      	cmp	r3, #7
 800b674:	f240 80e6 	bls.w	800b844 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b678:	e05d      	b.n	800b736 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b02      	cmp	r3, #2
 800b686:	d132      	bne.n	800b6ee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b68e:	b29b      	uxth	r3, r3
 800b690:	2b01      	cmp	r3, #1
 800b692:	d918      	bls.n	800b6c6 <HAL_SPI_Transmit+0x1fa>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d014      	beq.n	800b6c6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6812      	ldr	r2, [r2, #0]
 800b6a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6ac:	1d1a      	adds	r2, r3, #4
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	3b02      	subs	r3, #2
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b6c4:	e037      	b.n	800b736 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6ca:	881a      	ldrh	r2, [r3, #0]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6d4:	1c9a      	adds	r2, r3, #2
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b6ec:	e023      	b.n	800b736 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ee:	f7f7 fa97 	bl	8002c20 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d803      	bhi.n	800b706 <HAL_SPI_Transmit+0x23a>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d102      	bne.n	800b70c <HAL_SPI_Transmit+0x240>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d114      	bne.n	800b736 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 fb3d 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e0b3      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d19b      	bne.n	800b67a <HAL_SPI_Transmit+0x1ae>
 800b742:	e086      	b.n	800b852 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d154      	bne.n	800b7fc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d918      	bls.n	800b790 <HAL_SPI_Transmit+0x2c4>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b762:	2b40      	cmp	r3, #64	@ 0x40
 800b764:	d914      	bls.n	800b790 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6812      	ldr	r2, [r2, #0]
 800b770:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b776:	1d1a      	adds	r2, r3, #4
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b782:	b29b      	uxth	r3, r3
 800b784:	3b04      	subs	r3, #4
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b78e:	e059      	b.n	800b844 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d917      	bls.n	800b7cc <HAL_SPI_Transmit+0x300>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d013      	beq.n	800b7cc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7b2:	1c9a      	adds	r2, r3, #2
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b02      	subs	r3, #2
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7ca:	e03b      	b.n	800b844 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3320      	adds	r3, #32
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7f6:	e025      	b.n	800b844 <HAL_SPI_Transmit+0x378>
 800b7f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7fc:	f7f7 fa10 	bl	8002c20 <HAL_GetTick>
 800b800:	4602      	mov	r2, r0
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d803      	bhi.n	800b814 <HAL_SPI_Transmit+0x348>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b812:	d102      	bne.n	800b81a <HAL_SPI_Transmit+0x34e>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d114      	bne.n	800b844 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 fab6 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b826:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e02c      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f47f af79 	bne.w	800b744 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2200      	movs	r2, #0
 800b85a:	2108      	movs	r1, #8
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fb35 	bl	800becc <SPI_WaitOnFlagUntilTimeout>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b86e:	f043 0220 	orr.w	r2, r3, #32
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fa87 	bl	800bd8c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b89c:	2300      	movs	r3, #0
  }
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop

0800b8a8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b088      	sub	sp, #32
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3330      	adds	r3, #48	@ 0x30
 800b8ca:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8cc:	f7f7 f9a8 	bl	8002c20 <HAL_GetTick>
 800b8d0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d001      	beq.n	800b8e2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e250      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <HAL_SPI_Receive+0x46>
 800b8e8:	88fb      	ldrh	r3, [r7, #6]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e248      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_SPI_Receive+0x58>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e241      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2204      	movs	r2, #4
 800b90c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	88fa      	ldrh	r2, [r7, #6]
 800b922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b958:	d108      	bne.n	800b96c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e009      	b.n	800b980 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b97e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	4b95      	ldr	r3, [pc, #596]	@ (800bbdc <HAL_SPI_Receive+0x334>)
 800b988:	4013      	ands	r3, r2
 800b98a:	88f9      	ldrh	r1, [r7, #6]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	6812      	ldr	r2, [r2, #0]
 800b990:	430b      	orrs	r3, r1
 800b992:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f042 0201 	orr.w	r2, r2, #1
 800b9a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9ac:	d107      	bne.n	800b9be <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	d96c      	bls.n	800baa0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9c6:	e064      	b.n	800ba92 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d114      	bne.n	800ba08 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b9e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba06:	e044      	b.n	800ba92 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	8bfa      	ldrh	r2, [r7, #30]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d919      	bls.n	800ba4a <HAL_SPI_Receive+0x1a2>
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d014      	beq.n	800ba4a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ba2a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba48:	e023      	b.n	800ba92 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba4a:	f7f7 f8e9 	bl	8002c20 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d803      	bhi.n	800ba62 <HAL_SPI_Receive+0x1ba>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba60:	d102      	bne.n	800ba68 <HAL_SPI_Receive+0x1c0>
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d114      	bne.n	800ba92 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 f98f 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e178      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d194      	bne.n	800b9c8 <HAL_SPI_Receive+0x120>
 800ba9e:	e15e      	b.n	800bd5e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	f240 8153 	bls.w	800bd50 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800baaa:	e08f      	b.n	800bbcc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d114      	bne.n	800baec <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	8812      	ldrh	r2, [r2, #0]
 800baca:	b292      	uxth	r2, r2
 800bacc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bad2:	1c9a      	adds	r2, r3, #2
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bade:	b29b      	uxth	r3, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800baea:	e06f      	b.n	800bbcc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8bfa      	ldrh	r2, [r7, #30]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d924      	bls.n	800bb44 <HAL_SPI_Receive+0x29c>
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d01f      	beq.n	800bb44 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb08:	69ba      	ldr	r2, [r7, #24]
 800bb0a:	8812      	ldrh	r2, [r2, #0]
 800bb0c:	b292      	uxth	r2, r2
 800bb0e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb14:	1c9a      	adds	r2, r3, #2
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	8812      	ldrh	r2, [r2, #0]
 800bb22:	b292      	uxth	r2, r2
 800bb24:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb2a:	1c9a      	adds	r2, r3, #2
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3b02      	subs	r3, #2
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb42:	e043      	b.n	800bbcc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d119      	bne.n	800bb84 <HAL_SPI_Receive+0x2dc>
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d014      	beq.n	800bb84 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	8812      	ldrh	r2, [r2, #0]
 800bb62:	b292      	uxth	r2, r2
 800bb64:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb6a:	1c9a      	adds	r2, r3, #2
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb82:	e023      	b.n	800bbcc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb84:	f7f7 f84c 	bl	8002c20 <HAL_GetTick>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d803      	bhi.n	800bb9c <HAL_SPI_Receive+0x2f4>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9a:	d102      	bne.n	800bba2 <HAL_SPI_Receive+0x2fa>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d114      	bne.n	800bbcc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 f8f2 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e0db      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f47f af69 	bne.w	800baac <HAL_SPI_Receive+0x204>
 800bbda:	e0c0      	b.n	800bd5e <HAL_SPI_Receive+0x4b6>
 800bbdc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d117      	bne.n	800bc26 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc02:	7812      	ldrb	r2, [r2, #0]
 800bc04:	b2d2      	uxtb	r2, r2
 800bc06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc0c:	1c5a      	adds	r2, r3, #1
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc24:	e094      	b.n	800bd50 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	8bfa      	ldrh	r2, [r7, #30]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d946      	bls.n	800bcc2 <HAL_SPI_Receive+0x41a>
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d041      	beq.n	800bcc2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc4a:	7812      	ldrb	r2, [r2, #0]
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc66:	7812      	ldrb	r2, [r2, #0]
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc82:	7812      	ldrb	r2, [r2, #0]
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc9e:	7812      	ldrb	r2, [r2, #0]
 800bca0:	b2d2      	uxtb	r2, r2
 800bca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	3b04      	subs	r3, #4
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bcc0:	e046      	b.n	800bd50 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d81c      	bhi.n	800bd08 <HAL_SPI_Receive+0x460>
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d017      	beq.n	800bd08 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bce4:	7812      	ldrb	r2, [r2, #0]
 800bce6:	b2d2      	uxtb	r2, r2
 800bce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd06:	e023      	b.n	800bd50 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd08:	f7f6 ff8a 	bl	8002c20 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d803      	bhi.n	800bd20 <HAL_SPI_Receive+0x478>
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1e:	d102      	bne.n	800bd26 <HAL_SPI_Receive+0x47e>
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d114      	bne.n	800bd50 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 f830 	bl	800bd8c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e019      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f47f af41 	bne.w	800bbe0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 f814 	bl	800bd8c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e000      	b.n	800bd84 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bd82:	2300      	movs	r3, #0
  }
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0208 	orr.w	r2, r2, #8
 800bdaa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	699a      	ldr	r2, [r3, #24]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f042 0210 	orr.w	r2, r2, #16
 800bdba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 0201 	bic.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6919      	ldr	r1, [r3, #16]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b3c      	ldr	r3, [pc, #240]	@ (800bec8 <SPI_CloseTransfer+0x13c>)
 800bdd8:	400b      	ands	r3, r1
 800bdda:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bdea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	d014      	beq.n	800be22 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f003 0320 	and.w	r3, r3, #32
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00f      	beq.n	800be22 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	699a      	ldr	r2, [r3, #24]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f042 0220 	orr.w	r2, r2, #32
 800be20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d014      	beq.n	800be58 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00f      	beq.n	800be58 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be3e:	f043 0204 	orr.w	r2, r3, #4
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00f      	beq.n	800be82 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be68:	f043 0201 	orr.w	r2, r3, #1
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	699a      	ldr	r2, [r3, #24]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00f      	beq.n	800beac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be92:	f043 0208 	orr.w	r2, r3, #8
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	699a      	ldr	r2, [r3, #24]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800beaa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bebc:	bf00      	nop
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	fffffc90 	.word	0xfffffc90

0800becc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	603b      	str	r3, [r7, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bedc:	e010      	b.n	800bf00 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bede:	f7f6 fe9f 	bl	8002c20 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d803      	bhi.n	800bef6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d102      	bne.n	800befc <SPI_WaitOnFlagUntilTimeout+0x30>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	e00f      	b.n	800bf20 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	695a      	ldr	r2, [r3, #20]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4013      	ands	r3, r2
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	bf0c      	ite	eq
 800bf10:	2301      	moveq	r3, #1
 800bf12:	2300      	movne	r3, #0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	461a      	mov	r2, r3
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d0df      	beq.n	800bede <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf34:	095b      	lsrs	r3, r3, #5
 800bf36:	3301      	adds	r3, #1
 800bf38:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	3307      	adds	r3, #7
 800bf46:	08db      	lsrs	r3, r3, #3
 800bf48:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e049      	b.n	800c004 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d106      	bne.n	800bf8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7f6 faa1 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	f000 fab7 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d001      	beq.n	800c024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e054      	b.n	800c0ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f042 0201 	orr.w	r2, r2, #1
 800c03a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a26      	ldr	r2, [pc, #152]	@ (800c0dc <HAL_TIM_Base_Start_IT+0xd0>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d022      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c04e:	d01d      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a22      	ldr	r2, [pc, #136]	@ (800c0e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d018      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a21      	ldr	r2, [pc, #132]	@ (800c0e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d013      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a1f      	ldr	r2, [pc, #124]	@ (800c0e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d00e      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a1e      	ldr	r2, [pc, #120]	@ (800c0ec <HAL_TIM_Base_Start_IT+0xe0>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d009      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a1c      	ldr	r2, [pc, #112]	@ (800c0f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d004      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x80>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a1b      	ldr	r2, [pc, #108]	@ (800c0f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d115      	bne.n	800c0b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	689a      	ldr	r2, [r3, #8]
 800c092:	4b19      	ldr	r3, [pc, #100]	@ (800c0f8 <HAL_TIM_Base_Start_IT+0xec>)
 800c094:	4013      	ands	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b06      	cmp	r3, #6
 800c09c:	d015      	beq.n	800c0ca <HAL_TIM_Base_Start_IT+0xbe>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0a4:	d011      	beq.n	800c0ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f042 0201 	orr.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0b6:	e008      	b.n	800c0ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f042 0201 	orr.w	r2, r2, #1
 800c0c6:	601a      	str	r2, [r3, #0]
 800c0c8:	e000      	b.n	800c0cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40000400 	.word	0x40000400
 800c0e4:	40000800 	.word	0x40000800
 800c0e8:	40000c00 	.word	0x40000c00
 800c0ec:	40010400 	.word	0x40010400
 800c0f0:	40001800 	.word	0x40001800
 800c0f4:	40014000 	.word	0x40014000
 800c0f8:	00010007 	.word	0x00010007

0800c0fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e049      	b.n	800c1a2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f841 	bl	800c1aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f000 f9e8 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c1b2:	bf00      	nop
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f003 0302 	and.w	r3, r3, #2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d020      	beq.n	800c222 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01b      	beq.n	800c222 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f06f 0202 	mvn.w	r2, #2
 800c1f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f963 	bl	800c4d4 <HAL_TIM_IC_CaptureCallback>
 800c20e:	e005      	b.n	800c21c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f955 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f966 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d020      	beq.n	800c26e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f003 0304 	and.w	r3, r3, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	d01b      	beq.n	800c26e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f06f 0204 	mvn.w	r2, #4
 800c23e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f93d 	bl	800c4d4 <HAL_TIM_IC_CaptureCallback>
 800c25a:	e005      	b.n	800c268 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f92f 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f940 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	f003 0308 	and.w	r3, r3, #8
 800c274:	2b00      	cmp	r3, #0
 800c276:	d020      	beq.n	800c2ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f003 0308 	and.w	r3, r3, #8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d01b      	beq.n	800c2ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f06f 0208 	mvn.w	r2, #8
 800c28a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2204      	movs	r2, #4
 800c290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	f003 0303 	and.w	r3, r3, #3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f917 	bl	800c4d4 <HAL_TIM_IC_CaptureCallback>
 800c2a6:	e005      	b.n	800c2b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f909 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f91a 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	f003 0310 	and.w	r3, r3, #16
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d020      	beq.n	800c306 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f003 0310 	and.w	r3, r3, #16
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d01b      	beq.n	800c306 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0210 	mvn.w	r2, #16
 800c2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2208      	movs	r2, #8
 800c2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f8f1 	bl	800c4d4 <HAL_TIM_IC_CaptureCallback>
 800c2f2:	e005      	b.n	800c300 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f8e3 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f8f4 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00c      	beq.n	800c32a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f003 0301 	and.w	r3, r3, #1
 800c316:	2b00      	cmp	r3, #0
 800c318:	d007      	beq.n	800c32a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f06f 0201 	mvn.w	r2, #1
 800c322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7f5 fc45 	bl	8001bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00c      	beq.n	800c358 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fcda 	bl	800cd0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00c      	beq.n	800c37c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d007      	beq.n	800c37c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fcd2 	bl	800cd20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00c      	beq.n	800c3a0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f8ae 	bl	800c4fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00c      	beq.n	800c3c4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f003 0320 	and.w	r3, r3, #32
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d007      	beq.n	800c3c4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f06f 0220 	mvn.w	r2, #32
 800c3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fc9a 	bl	800ccf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d101      	bne.n	800c3ea <HAL_TIM_OC_ConfigChannel+0x1e>
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e066      	b.n	800c4b8 <HAL_TIM_OC_ConfigChannel+0xec>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b14      	cmp	r3, #20
 800c3f6:	d857      	bhi.n	800c4a8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800c3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fe:	bf00      	nop
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c4a9 	.word	0x0800c4a9
 800c408:	0800c4a9 	.word	0x0800c4a9
 800c40c:	0800c4a9 	.word	0x0800c4a9
 800c410:	0800c463 	.word	0x0800c463
 800c414:	0800c4a9 	.word	0x0800c4a9
 800c418:	0800c4a9 	.word	0x0800c4a9
 800c41c:	0800c4a9 	.word	0x0800c4a9
 800c420:	0800c471 	.word	0x0800c471
 800c424:	0800c4a9 	.word	0x0800c4a9
 800c428:	0800c4a9 	.word	0x0800c4a9
 800c42c:	0800c4a9 	.word	0x0800c4a9
 800c430:	0800c47f 	.word	0x0800c47f
 800c434:	0800c4a9 	.word	0x0800c4a9
 800c438:	0800c4a9 	.word	0x0800c4a9
 800c43c:	0800c4a9 	.word	0x0800c4a9
 800c440:	0800c48d 	.word	0x0800c48d
 800c444:	0800c4a9 	.word	0x0800c4a9
 800c448:	0800c4a9 	.word	0x0800c4a9
 800c44c:	0800c4a9 	.word	0x0800c4a9
 800c450:	0800c49b 	.word	0x0800c49b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f8f8 	bl	800c650 <TIM_OC1_SetConfig>
      break;
 800c460:	e025      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 f981 	bl	800c770 <TIM_OC2_SetConfig>
      break;
 800c46e:	e01e      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68b9      	ldr	r1, [r7, #8]
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fa04 	bl	800c884 <TIM_OC3_SetConfig>
      break;
 800c47c:	e017      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fa85 	bl	800c994 <TIM_OC4_SetConfig>
      break;
 800c48a:	e010      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fae8 	bl	800ca68 <TIM_OC5_SetConfig>
      break;
 800c498:	e009      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fb45 	bl	800cb30 <TIM_OC6_SetConfig>
      break;
 800c4a6:	e002      	b.n	800c4ae <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c4ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a43      	ldr	r2, [pc, #268]	@ (800c630 <TIM_Base_SetConfig+0x120>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d013      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c52e:	d00f      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a40      	ldr	r2, [pc, #256]	@ (800c634 <TIM_Base_SetConfig+0x124>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d00b      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a3f      	ldr	r2, [pc, #252]	@ (800c638 <TIM_Base_SetConfig+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d007      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a3e      	ldr	r2, [pc, #248]	@ (800c63c <TIM_Base_SetConfig+0x12c>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d003      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a3d      	ldr	r2, [pc, #244]	@ (800c640 <TIM_Base_SetConfig+0x130>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d108      	bne.n	800c562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	4313      	orrs	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a32      	ldr	r2, [pc, #200]	@ (800c630 <TIM_Base_SetConfig+0x120>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d01f      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c570:	d01b      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a2f      	ldr	r2, [pc, #188]	@ (800c634 <TIM_Base_SetConfig+0x124>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d017      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a2e      	ldr	r2, [pc, #184]	@ (800c638 <TIM_Base_SetConfig+0x128>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d013      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a2d      	ldr	r2, [pc, #180]	@ (800c63c <TIM_Base_SetConfig+0x12c>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00f      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a2c      	ldr	r2, [pc, #176]	@ (800c640 <TIM_Base_SetConfig+0x130>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d00b      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a2b      	ldr	r2, [pc, #172]	@ (800c644 <TIM_Base_SetConfig+0x134>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d007      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a2a      	ldr	r2, [pc, #168]	@ (800c648 <TIM_Base_SetConfig+0x138>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d003      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a29      	ldr	r2, [pc, #164]	@ (800c64c <TIM_Base_SetConfig+0x13c>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d108      	bne.n	800c5bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	689a      	ldr	r2, [r3, #8]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a14      	ldr	r2, [pc, #80]	@ (800c630 <TIM_Base_SetConfig+0x120>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d00f      	beq.n	800c602 <TIM_Base_SetConfig+0xf2>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a16      	ldr	r2, [pc, #88]	@ (800c640 <TIM_Base_SetConfig+0x130>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d00b      	beq.n	800c602 <TIM_Base_SetConfig+0xf2>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a15      	ldr	r2, [pc, #84]	@ (800c644 <TIM_Base_SetConfig+0x134>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d007      	beq.n	800c602 <TIM_Base_SetConfig+0xf2>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a14      	ldr	r2, [pc, #80]	@ (800c648 <TIM_Base_SetConfig+0x138>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d003      	beq.n	800c602 <TIM_Base_SetConfig+0xf2>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a13      	ldr	r2, [pc, #76]	@ (800c64c <TIM_Base_SetConfig+0x13c>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d103      	bne.n	800c60a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	691a      	ldr	r2, [r3, #16]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f043 0204 	orr.w	r2, r3, #4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	bf00      	nop
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	40010000 	.word	0x40010000
 800c634:	40000400 	.word	0x40000400
 800c638:	40000800 	.word	0x40000800
 800c63c:	40000c00 	.word	0x40000c00
 800c640:	40010400 	.word	0x40010400
 800c644:	40014000 	.word	0x40014000
 800c648:	40014400 	.word	0x40014400
 800c64c:	40014800 	.word	0x40014800

0800c650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	f023 0201 	bic.w	r2, r3, #1
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4b37      	ldr	r3, [pc, #220]	@ (800c758 <TIM_OC1_SetConfig+0x108>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	4313      	orrs	r3, r2
 800c690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f023 0302 	bic.w	r3, r3, #2
 800c698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c75c <TIM_OC1_SetConfig+0x10c>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00f      	beq.n	800c6cc <TIM_OC1_SetConfig+0x7c>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a2c      	ldr	r2, [pc, #176]	@ (800c760 <TIM_OC1_SetConfig+0x110>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d00b      	beq.n	800c6cc <TIM_OC1_SetConfig+0x7c>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a2b      	ldr	r2, [pc, #172]	@ (800c764 <TIM_OC1_SetConfig+0x114>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d007      	beq.n	800c6cc <TIM_OC1_SetConfig+0x7c>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a2a      	ldr	r2, [pc, #168]	@ (800c768 <TIM_OC1_SetConfig+0x118>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d003      	beq.n	800c6cc <TIM_OC1_SetConfig+0x7c>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a29      	ldr	r2, [pc, #164]	@ (800c76c <TIM_OC1_SetConfig+0x11c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d10c      	bne.n	800c6e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f023 0308 	bic.w	r3, r3, #8
 800c6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f023 0304 	bic.w	r3, r3, #4
 800c6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c75c <TIM_OC1_SetConfig+0x10c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00f      	beq.n	800c70e <TIM_OC1_SetConfig+0xbe>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c760 <TIM_OC1_SetConfig+0x110>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d00b      	beq.n	800c70e <TIM_OC1_SetConfig+0xbe>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a1a      	ldr	r2, [pc, #104]	@ (800c764 <TIM_OC1_SetConfig+0x114>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d007      	beq.n	800c70e <TIM_OC1_SetConfig+0xbe>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a19      	ldr	r2, [pc, #100]	@ (800c768 <TIM_OC1_SetConfig+0x118>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d003      	beq.n	800c70e <TIM_OC1_SetConfig+0xbe>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a18      	ldr	r2, [pc, #96]	@ (800c76c <TIM_OC1_SetConfig+0x11c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d111      	bne.n	800c732 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	4313      	orrs	r3, r2
 800c726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	4313      	orrs	r3, r2
 800c730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	621a      	str	r2, [r3, #32]
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	fffeff8f 	.word	0xfffeff8f
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a1b      	ldr	r3, [r3, #32]
 800c784:	f023 0210 	bic.w	r2, r3, #16
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	4b34      	ldr	r3, [pc, #208]	@ (800c86c <TIM_OC2_SetConfig+0xfc>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	f023 0320 	bic.w	r3, r3, #32
 800c7ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	011b      	lsls	r3, r3, #4
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a29      	ldr	r2, [pc, #164]	@ (800c870 <TIM_OC2_SetConfig+0x100>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d003      	beq.n	800c7d8 <TIM_OC2_SetConfig+0x68>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a28      	ldr	r2, [pc, #160]	@ (800c874 <TIM_OC2_SetConfig+0x104>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d10d      	bne.n	800c7f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	011b      	lsls	r3, r3, #4
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c870 <TIM_OC2_SetConfig+0x100>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d00f      	beq.n	800c81c <TIM_OC2_SetConfig+0xac>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c874 <TIM_OC2_SetConfig+0x104>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d00b      	beq.n	800c81c <TIM_OC2_SetConfig+0xac>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a1c      	ldr	r2, [pc, #112]	@ (800c878 <TIM_OC2_SetConfig+0x108>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d007      	beq.n	800c81c <TIM_OC2_SetConfig+0xac>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a1b      	ldr	r2, [pc, #108]	@ (800c87c <TIM_OC2_SetConfig+0x10c>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d003      	beq.n	800c81c <TIM_OC2_SetConfig+0xac>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a1a      	ldr	r2, [pc, #104]	@ (800c880 <TIM_OC2_SetConfig+0x110>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d113      	bne.n	800c844 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c82a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4313      	orrs	r3, r2
 800c836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	4313      	orrs	r3, r2
 800c842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	621a      	str	r2, [r3, #32]
}
 800c85e:	bf00      	nop
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	feff8fff 	.word	0xfeff8fff
 800c870:	40010000 	.word	0x40010000
 800c874:	40010400 	.word	0x40010400
 800c878:	40014000 	.word	0x40014000
 800c87c:	40014400 	.word	0x40014400
 800c880:	40014800 	.word	0x40014800

0800c884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	69db      	ldr	r3, [r3, #28]
 800c8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	4b33      	ldr	r3, [pc, #204]	@ (800c97c <TIM_OC3_SetConfig+0xf8>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0303 	bic.w	r3, r3, #3
 800c8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a28      	ldr	r2, [pc, #160]	@ (800c980 <TIM_OC3_SetConfig+0xfc>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d003      	beq.n	800c8ea <TIM_OC3_SetConfig+0x66>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a27      	ldr	r2, [pc, #156]	@ (800c984 <TIM_OC3_SetConfig+0x100>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d10d      	bne.n	800c906 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	021b      	lsls	r3, r3, #8
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a1d      	ldr	r2, [pc, #116]	@ (800c980 <TIM_OC3_SetConfig+0xfc>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00f      	beq.n	800c92e <TIM_OC3_SetConfig+0xaa>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a1c      	ldr	r2, [pc, #112]	@ (800c984 <TIM_OC3_SetConfig+0x100>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d00b      	beq.n	800c92e <TIM_OC3_SetConfig+0xaa>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a1b      	ldr	r2, [pc, #108]	@ (800c988 <TIM_OC3_SetConfig+0x104>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d007      	beq.n	800c92e <TIM_OC3_SetConfig+0xaa>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a1a      	ldr	r2, [pc, #104]	@ (800c98c <TIM_OC3_SetConfig+0x108>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d003      	beq.n	800c92e <TIM_OC3_SetConfig+0xaa>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a19      	ldr	r2, [pc, #100]	@ (800c990 <TIM_OC3_SetConfig+0x10c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d113      	bne.n	800c956 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4313      	orrs	r3, r2
 800c948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4313      	orrs	r3, r2
 800c954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	621a      	str	r2, [r3, #32]
}
 800c970:	bf00      	nop
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	fffeff8f 	.word	0xfffeff8f
 800c980:	40010000 	.word	0x40010000
 800c984:	40010400 	.word	0x40010400
 800c988:	40014000 	.word	0x40014000
 800c98c:	40014400 	.word	0x40014400
 800c990:	40014800 	.word	0x40014800

0800c994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4b24      	ldr	r3, [pc, #144]	@ (800ca50 <TIM_OC4_SetConfig+0xbc>)
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	021b      	lsls	r3, r3, #8
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	031b      	lsls	r3, r3, #12
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a19      	ldr	r2, [pc, #100]	@ (800ca54 <TIM_OC4_SetConfig+0xc0>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00f      	beq.n	800ca14 <TIM_OC4_SetConfig+0x80>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a18      	ldr	r2, [pc, #96]	@ (800ca58 <TIM_OC4_SetConfig+0xc4>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00b      	beq.n	800ca14 <TIM_OC4_SetConfig+0x80>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a17      	ldr	r2, [pc, #92]	@ (800ca5c <TIM_OC4_SetConfig+0xc8>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d007      	beq.n	800ca14 <TIM_OC4_SetConfig+0x80>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a16      	ldr	r2, [pc, #88]	@ (800ca60 <TIM_OC4_SetConfig+0xcc>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d003      	beq.n	800ca14 <TIM_OC4_SetConfig+0x80>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a15      	ldr	r2, [pc, #84]	@ (800ca64 <TIM_OC4_SetConfig+0xd0>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d109      	bne.n	800ca28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	019b      	lsls	r3, r3, #6
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	621a      	str	r2, [r3, #32]
}
 800ca42:	bf00      	nop
 800ca44:	371c      	adds	r7, #28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	feff8fff 	.word	0xfeff8fff
 800ca54:	40010000 	.word	0x40010000
 800ca58:	40010400 	.word	0x40010400
 800ca5c:	40014000 	.word	0x40014000
 800ca60:	40014400 	.word	0x40014400
 800ca64:	40014800 	.word	0x40014800

0800ca68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4b21      	ldr	r3, [pc, #132]	@ (800cb18 <TIM_OC5_SetConfig+0xb0>)
 800ca94:	4013      	ands	r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800caa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	041b      	lsls	r3, r3, #16
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a18      	ldr	r2, [pc, #96]	@ (800cb1c <TIM_OC5_SetConfig+0xb4>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00f      	beq.n	800cade <TIM_OC5_SetConfig+0x76>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a17      	ldr	r2, [pc, #92]	@ (800cb20 <TIM_OC5_SetConfig+0xb8>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00b      	beq.n	800cade <TIM_OC5_SetConfig+0x76>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a16      	ldr	r2, [pc, #88]	@ (800cb24 <TIM_OC5_SetConfig+0xbc>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d007      	beq.n	800cade <TIM_OC5_SetConfig+0x76>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a15      	ldr	r2, [pc, #84]	@ (800cb28 <TIM_OC5_SetConfig+0xc0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d003      	beq.n	800cade <TIM_OC5_SetConfig+0x76>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a14      	ldr	r2, [pc, #80]	@ (800cb2c <TIM_OC5_SetConfig+0xc4>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d109      	bne.n	800caf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	4313      	orrs	r3, r2
 800caf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685a      	ldr	r2, [r3, #4]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	621a      	str	r2, [r3, #32]
}
 800cb0c:	bf00      	nop
 800cb0e:	371c      	adds	r7, #28
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	fffeff8f 	.word	0xfffeff8f
 800cb1c:	40010000 	.word	0x40010000
 800cb20:	40010400 	.word	0x40010400
 800cb24:	40014000 	.word	0x40014000
 800cb28:	40014400 	.word	0x40014400
 800cb2c:	40014800 	.word	0x40014800

0800cb30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b087      	sub	sp, #28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4b22      	ldr	r3, [pc, #136]	@ (800cbe4 <TIM_OC6_SetConfig+0xb4>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	021b      	lsls	r3, r3, #8
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cb72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	051b      	lsls	r3, r3, #20
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a19      	ldr	r2, [pc, #100]	@ (800cbe8 <TIM_OC6_SetConfig+0xb8>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d00f      	beq.n	800cba8 <TIM_OC6_SetConfig+0x78>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a18      	ldr	r2, [pc, #96]	@ (800cbec <TIM_OC6_SetConfig+0xbc>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d00b      	beq.n	800cba8 <TIM_OC6_SetConfig+0x78>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a17      	ldr	r2, [pc, #92]	@ (800cbf0 <TIM_OC6_SetConfig+0xc0>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d007      	beq.n	800cba8 <TIM_OC6_SetConfig+0x78>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a16      	ldr	r2, [pc, #88]	@ (800cbf4 <TIM_OC6_SetConfig+0xc4>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d003      	beq.n	800cba8 <TIM_OC6_SetConfig+0x78>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a15      	ldr	r2, [pc, #84]	@ (800cbf8 <TIM_OC6_SetConfig+0xc8>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d109      	bne.n	800cbbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	029b      	lsls	r3, r3, #10
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	621a      	str	r2, [r3, #32]
}
 800cbd6:	bf00      	nop
 800cbd8:	371c      	adds	r7, #28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	feff8fff 	.word	0xfeff8fff
 800cbe8:	40010000 	.word	0x40010000
 800cbec:	40010400 	.word	0x40010400
 800cbf0:	40014000 	.word	0x40014000
 800cbf4:	40014400 	.word	0x40014400
 800cbf8:	40014800 	.word	0x40014800

0800cbfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d101      	bne.n	800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc14:	2302      	movs	r3, #2
 800cc16:	e065      	b.n	800cce4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	041b      	lsls	r3, r3, #16
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a16      	ldr	r2, [pc, #88]	@ (800ccf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d004      	beq.n	800cca6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a14      	ldr	r2, [pc, #80]	@ (800ccf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d115      	bne.n	800ccd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb0:	051b      	lsls	r3, r3, #20
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	69db      	ldr	r3, [r3, #28]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40010400 	.word	0x40010400

0800ccf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e042      	b.n	800cdcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d106      	bne.n	800cd5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7f5 fcc3 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2224      	movs	r2, #36	@ 0x24
 800cd62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 0201 	bic.w	r2, r2, #1
 800cd74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 f9e6 	bl	800e150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fc7b 	bl	800d680 <UART_SetConfig>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d101      	bne.n	800cd94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e01b      	b.n	800cdcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cda2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689a      	ldr	r2, [r3, #8]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cdb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0201 	orr.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f001 fa65 	bl	800e294 <UART_CheckIdleState>
 800cdca:	4603      	mov	r3, r0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	@ 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d137      	bne.n	800ce5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <HAL_UART_Receive_DMA+0x24>
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e030      	b.n	800ce5e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a18      	ldr	r2, [pc, #96]	@ (800ce68 <HAL_UART_Receive_DMA+0x94>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d01f      	beq.n	800ce4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d018      	beq.n	800ce4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	e853 3f00 	ldrex	r3, [r3]
 800ce26:	613b      	str	r3, [r7, #16]
   return(result);
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	461a      	mov	r2, r3
 800ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce38:	623b      	str	r3, [r7, #32]
 800ce3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3c:	69f9      	ldr	r1, [r7, #28]
 800ce3e:	6a3a      	ldr	r2, [r7, #32]
 800ce40:	e841 2300 	strex	r3, r2, [r1]
 800ce44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1e6      	bne.n	800ce1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce4c:	88fb      	ldrh	r3, [r7, #6]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	68b9      	ldr	r1, [r7, #8]
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f001 fb36 	bl	800e4c4 <UART_Start_Receive_DMA>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	e000      	b.n	800ce5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ce5c:	2302      	movs	r3, #2
  }
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3728      	adds	r7, #40	@ 0x28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	58000c00 	.word	0x58000c00

0800ce6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b0ba      	sub	sp, #232	@ 0xe8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ce96:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d11b      	bne.n	800cee0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d015      	beq.n	800cee0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ceb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d009      	beq.n	800cee0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f000 8393 	beq.w	800d5fc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	4798      	blx	r3
      }
      return;
 800cede:	e38d      	b.n	800d5fc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 8123 	beq.w	800d130 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ceea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ceee:	4b8d      	ldr	r3, [pc, #564]	@ (800d124 <HAL_UART_IRQHandler+0x2b8>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cef6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cefa:	4b8b      	ldr	r3, [pc, #556]	@ (800d128 <HAL_UART_IRQHandler+0x2bc>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 8116 	beq.w	800d130 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d011      	beq.n	800cf34 <HAL_UART_IRQHandler+0xc8>
 800cf10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00b      	beq.n	800cf34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2201      	movs	r2, #1
 800cf22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf2a:	f043 0201 	orr.w	r2, r3, #1
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf38:	f003 0302 	and.w	r3, r3, #2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d011      	beq.n	800cf64 <HAL_UART_IRQHandler+0xf8>
 800cf40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2202      	movs	r2, #2
 800cf52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf5a:	f043 0204 	orr.w	r2, r3, #4
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf68:	f003 0304 	and.w	r3, r3, #4
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d011      	beq.n	800cf94 <HAL_UART_IRQHandler+0x128>
 800cf70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2204      	movs	r2, #4
 800cf82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf8a:	f043 0202 	orr.w	r2, r3, #2
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf98:	f003 0308 	and.w	r3, r3, #8
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d017      	beq.n	800cfd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfa4:	f003 0320 	and.w	r3, r3, #32
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d105      	bne.n	800cfb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cfac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cfb0:	4b5c      	ldr	r3, [pc, #368]	@ (800d124 <HAL_UART_IRQHandler+0x2b8>)
 800cfb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00b      	beq.n	800cfd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfc6:	f043 0208 	orr.w	r2, r3, #8
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d012      	beq.n	800d002 <HAL_UART_IRQHandler+0x196>
 800cfdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfe0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00c      	beq.n	800d002 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cff8:	f043 0220 	orr.w	r2, r3, #32
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 82f9 	beq.w	800d600 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d012:	f003 0320 	and.w	r3, r3, #32
 800d016:	2b00      	cmp	r3, #0
 800d018:	d013      	beq.n	800d042 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d01a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d01e:	f003 0320 	and.w	r3, r3, #32
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d02a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d007      	beq.n	800d042 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d048:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d056:	2b40      	cmp	r3, #64	@ 0x40
 800d058:	d005      	beq.n	800d066 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d05e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d062:	2b00      	cmp	r3, #0
 800d064:	d054      	beq.n	800d110 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f001 fb14 	bl	800e694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d076:	2b40      	cmp	r3, #64	@ 0x40
 800d078:	d146      	bne.n	800d108 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	3308      	adds	r3, #8
 800d080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d088:	e853 3f00 	ldrex	r3, [r3]
 800d08c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d0a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d0aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d0b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d0b6:	e841 2300 	strex	r3, r2, [r1]
 800d0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d0be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1d9      	bne.n	800d07a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d017      	beq.n	800d100 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0d6:	4a15      	ldr	r2, [pc, #84]	@ (800d12c <HAL_UART_IRQHandler+0x2c0>)
 800d0d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f6 ff9d 	bl	8004020 <HAL_DMA_Abort_IT>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d019      	beq.n	800d120 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0fe:	e00f      	b.n	800d120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 faa7 	bl	800d654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d106:	e00b      	b.n	800d120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 faa3 	bl	800d654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d10e:	e007      	b.n	800d120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 fa9f 	bl	800d654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d11e:	e26f      	b.n	800d600 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d120:	bf00      	nop
    return;
 800d122:	e26d      	b.n	800d600 <HAL_UART_IRQHandler+0x794>
 800d124:	10000001 	.word	0x10000001
 800d128:	04000120 	.word	0x04000120
 800d12c:	0800e947 	.word	0x0800e947

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d134:	2b01      	cmp	r3, #1
 800d136:	f040 8203 	bne.w	800d540 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d13e:	f003 0310 	and.w	r3, r3, #16
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 81fc 	beq.w	800d540 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d14c:	f003 0310 	and.w	r3, r3, #16
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 81f5 	beq.w	800d540 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2210      	movs	r2, #16
 800d15c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d168:	2b40      	cmp	r3, #64	@ 0x40
 800d16a:	f040 816d 	bne.w	800d448 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4aa4      	ldr	r2, [pc, #656]	@ (800d408 <HAL_UART_IRQHandler+0x59c>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d068      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4aa1      	ldr	r2, [pc, #644]	@ (800d40c <HAL_UART_IRQHandler+0x5a0>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d061      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a9f      	ldr	r2, [pc, #636]	@ (800d410 <HAL_UART_IRQHandler+0x5a4>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d05a      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a9c      	ldr	r2, [pc, #624]	@ (800d414 <HAL_UART_IRQHandler+0x5a8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d053      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a9a      	ldr	r2, [pc, #616]	@ (800d418 <HAL_UART_IRQHandler+0x5ac>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d04c      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a97      	ldr	r2, [pc, #604]	@ (800d41c <HAL_UART_IRQHandler+0x5b0>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d045      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a95      	ldr	r2, [pc, #596]	@ (800d420 <HAL_UART_IRQHandler+0x5b4>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d03e      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a92      	ldr	r2, [pc, #584]	@ (800d424 <HAL_UART_IRQHandler+0x5b8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d037      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a90      	ldr	r2, [pc, #576]	@ (800d428 <HAL_UART_IRQHandler+0x5bc>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d030      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a8d      	ldr	r2, [pc, #564]	@ (800d42c <HAL_UART_IRQHandler+0x5c0>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d029      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a8b      	ldr	r2, [pc, #556]	@ (800d430 <HAL_UART_IRQHandler+0x5c4>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d022      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a88      	ldr	r2, [pc, #544]	@ (800d434 <HAL_UART_IRQHandler+0x5c8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d01b      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a86      	ldr	r2, [pc, #536]	@ (800d438 <HAL_UART_IRQHandler+0x5cc>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d014      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a83      	ldr	r2, [pc, #524]	@ (800d43c <HAL_UART_IRQHandler+0x5d0>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d00d      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a81      	ldr	r2, [pc, #516]	@ (800d440 <HAL_UART_IRQHandler+0x5d4>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d006      	beq.n	800d24e <HAL_UART_IRQHandler+0x3e2>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a7e      	ldr	r2, [pc, #504]	@ (800d444 <HAL_UART_IRQHandler+0x5d8>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d106      	bne.n	800d25c <HAL_UART_IRQHandler+0x3f0>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	e005      	b.n	800d268 <HAL_UART_IRQHandler+0x3fc>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b29b      	uxth	r3, r3
 800d268:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d26c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 80ad 	beq.w	800d3d0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d27c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d280:	429a      	cmp	r2, r3
 800d282:	f080 80a5 	bcs.w	800d3d0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d28c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d29c:	f000 8087 	beq.w	800d3ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d2b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d2b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d2ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d2d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1da      	bne.n	800d2a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2f4:	e853 3f00 	ldrex	r3, [r3]
 800d2f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d2fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2fc:	f023 0301 	bic.w	r3, r3, #1
 800d300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3308      	adds	r3, #8
 800d30a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d30e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d312:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d314:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d316:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d31a:	e841 2300 	strex	r3, r2, [r1]
 800d31e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e1      	bne.n	800d2ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3308      	adds	r3, #8
 800d32c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d330:	e853 3f00 	ldrex	r3, [r3]
 800d334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d33c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3308      	adds	r3, #8
 800d346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d34a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d34c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d350:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d352:	e841 2300 	strex	r3, r2, [r1]
 800d356:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e3      	bne.n	800d326 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2220      	movs	r2, #32
 800d362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d374:	e853 3f00 	ldrex	r3, [r3]
 800d378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d37c:	f023 0310 	bic.w	r3, r3, #16
 800d380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	461a      	mov	r2, r3
 800d38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d38e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d390:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d392:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d396:	e841 2300 	strex	r3, r2, [r1]
 800d39a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e4      	bne.n	800d36c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7f6 fb1b 	bl	80039e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2202      	movs	r2, #2
 800d3b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 f94d 	bl	800d668 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d3ce:	e119      	b.n	800d604 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	f040 8112 	bne.w	800d604 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3ec:	f040 810a 	bne.w	800d604 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f932 	bl	800d668 <HAL_UARTEx_RxEventCallback>
      return;
 800d404:	e0fe      	b.n	800d604 <HAL_UART_IRQHandler+0x798>
 800d406:	bf00      	nop
 800d408:	40020010 	.word	0x40020010
 800d40c:	40020028 	.word	0x40020028
 800d410:	40020040 	.word	0x40020040
 800d414:	40020058 	.word	0x40020058
 800d418:	40020070 	.word	0x40020070
 800d41c:	40020088 	.word	0x40020088
 800d420:	400200a0 	.word	0x400200a0
 800d424:	400200b8 	.word	0x400200b8
 800d428:	40020410 	.word	0x40020410
 800d42c:	40020428 	.word	0x40020428
 800d430:	40020440 	.word	0x40020440
 800d434:	40020458 	.word	0x40020458
 800d438:	40020470 	.word	0x40020470
 800d43c:	40020488 	.word	0x40020488
 800d440:	400204a0 	.word	0x400204a0
 800d444:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d454:	b29b      	uxth	r3, r3
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d462:	b29b      	uxth	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 80cf 	beq.w	800d608 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d46a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 80ca 	beq.w	800d608 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d496:	647b      	str	r3, [r7, #68]	@ 0x44
 800d498:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d49c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1e4      	bne.n	800d474 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ba:	6a3a      	ldr	r2, [r7, #32]
 800d4bc:	4b55      	ldr	r3, [pc, #340]	@ (800d614 <HAL_UART_IRQHandler+0x7a8>)
 800d4be:	4013      	ands	r3, r2
 800d4c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d4ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4d6:	e841 2300 	strex	r3, r2, [r1]
 800d4da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1e3      	bne.n	800d4aa <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	60fb      	str	r3, [r7, #12]
   return(result);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0310 	bic.w	r3, r3, #16
 800d50a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51c:	69b9      	ldr	r1, [r7, #24]
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	e841 2300 	strex	r3, r2, [r1]
 800d524:	617b      	str	r3, [r7, #20]
   return(result);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1e4      	bne.n	800d4f6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2202      	movs	r2, #2
 800d530:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f895 	bl	800d668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d53e:	e063      	b.n	800d608 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00e      	beq.n	800d56a <HAL_UART_IRQHandler+0x6fe>
 800d54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d008      	beq.n	800d56a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f001 fa2c 	bl	800e9c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d568:	e051      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d572:	2b00      	cmp	r3, #0
 800d574:	d014      	beq.n	800d5a0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d105      	bne.n	800d58e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d008      	beq.n	800d5a0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d592:	2b00      	cmp	r3, #0
 800d594:	d03a      	beq.n	800d60c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	4798      	blx	r3
    }
    return;
 800d59e:	e035      	b.n	800d60c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d009      	beq.n	800d5c0 <HAL_UART_IRQHandler+0x754>
 800d5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f001 f9d6 	bl	800e96a <UART_EndTransmit_IT>
    return;
 800d5be:	e026      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x774>
 800d5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f001 fa05 	bl	800e9e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5de:	e016      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d010      	beq.n	800d60e <HAL_UART_IRQHandler+0x7a2>
 800d5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	da0c      	bge.n	800d60e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f001 f9ed 	bl	800e9d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5fa:	e008      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
      return;
 800d5fc:	bf00      	nop
 800d5fe:	e006      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
    return;
 800d600:	bf00      	nop
 800d602:	e004      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
      return;
 800d604:	bf00      	nop
 800d606:	e002      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
      return;
 800d608:	bf00      	nop
 800d60a:	e000      	b.n	800d60e <HAL_UART_IRQHandler+0x7a2>
    return;
 800d60c:	bf00      	nop
  }
}
 800d60e:	37e8      	adds	r7, #232	@ 0xe8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	effffffe 	.word	0xeffffffe

0800d618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d684:	b092      	sub	sp, #72	@ 0x48
 800d686:	af00      	add	r7, sp, #0
 800d688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	689a      	ldr	r2, [r3, #8]
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	431a      	orrs	r2, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	695b      	ldr	r3, [r3, #20]
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	4bbe      	ldr	r3, [pc, #760]	@ (800d9a8 <UART_SetConfig+0x328>)
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	6812      	ldr	r2, [r2, #0]
 800d6b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6b8:	430b      	orrs	r3, r1
 800d6ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4ab3      	ldr	r2, [pc, #716]	@ (800d9ac <UART_SetConfig+0x32c>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d004      	beq.n	800d6ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	689a      	ldr	r2, [r3, #8]
 800d6f2:	4baf      	ldr	r3, [pc, #700]	@ (800d9b0 <UART_SetConfig+0x330>)
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	6812      	ldr	r2, [r2, #0]
 800d6fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d706:	f023 010f 	bic.w	r1, r3, #15
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	430a      	orrs	r2, r1
 800d714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4aa6      	ldr	r2, [pc, #664]	@ (800d9b4 <UART_SetConfig+0x334>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d177      	bne.n	800d810 <UART_SetConfig+0x190>
 800d720:	4ba5      	ldr	r3, [pc, #660]	@ (800d9b8 <UART_SetConfig+0x338>)
 800d722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d728:	2b28      	cmp	r3, #40	@ 0x28
 800d72a:	d86d      	bhi.n	800d808 <UART_SetConfig+0x188>
 800d72c:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <UART_SetConfig+0xb4>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d7d9 	.word	0x0800d7d9
 800d738:	0800d809 	.word	0x0800d809
 800d73c:	0800d809 	.word	0x0800d809
 800d740:	0800d809 	.word	0x0800d809
 800d744:	0800d809 	.word	0x0800d809
 800d748:	0800d809 	.word	0x0800d809
 800d74c:	0800d809 	.word	0x0800d809
 800d750:	0800d809 	.word	0x0800d809
 800d754:	0800d7e1 	.word	0x0800d7e1
 800d758:	0800d809 	.word	0x0800d809
 800d75c:	0800d809 	.word	0x0800d809
 800d760:	0800d809 	.word	0x0800d809
 800d764:	0800d809 	.word	0x0800d809
 800d768:	0800d809 	.word	0x0800d809
 800d76c:	0800d809 	.word	0x0800d809
 800d770:	0800d809 	.word	0x0800d809
 800d774:	0800d7e9 	.word	0x0800d7e9
 800d778:	0800d809 	.word	0x0800d809
 800d77c:	0800d809 	.word	0x0800d809
 800d780:	0800d809 	.word	0x0800d809
 800d784:	0800d809 	.word	0x0800d809
 800d788:	0800d809 	.word	0x0800d809
 800d78c:	0800d809 	.word	0x0800d809
 800d790:	0800d809 	.word	0x0800d809
 800d794:	0800d7f1 	.word	0x0800d7f1
 800d798:	0800d809 	.word	0x0800d809
 800d79c:	0800d809 	.word	0x0800d809
 800d7a0:	0800d809 	.word	0x0800d809
 800d7a4:	0800d809 	.word	0x0800d809
 800d7a8:	0800d809 	.word	0x0800d809
 800d7ac:	0800d809 	.word	0x0800d809
 800d7b0:	0800d809 	.word	0x0800d809
 800d7b4:	0800d7f9 	.word	0x0800d7f9
 800d7b8:	0800d809 	.word	0x0800d809
 800d7bc:	0800d809 	.word	0x0800d809
 800d7c0:	0800d809 	.word	0x0800d809
 800d7c4:	0800d809 	.word	0x0800d809
 800d7c8:	0800d809 	.word	0x0800d809
 800d7cc:	0800d809 	.word	0x0800d809
 800d7d0:	0800d809 	.word	0x0800d809
 800d7d4:	0800d801 	.word	0x0800d801
 800d7d8:	2301      	movs	r3, #1
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7de:	e222      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d7e0:	2304      	movs	r3, #4
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e6:	e21e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d7e8:	2308      	movs	r3, #8
 800d7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ee:	e21a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d7f0:	2310      	movs	r3, #16
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f6:	e216      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d7f8:	2320      	movs	r3, #32
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fe:	e212      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d800:	2340      	movs	r3, #64	@ 0x40
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d806:	e20e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d808:	2380      	movs	r3, #128	@ 0x80
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80e:	e20a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a69      	ldr	r2, [pc, #420]	@ (800d9bc <UART_SetConfig+0x33c>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d130      	bne.n	800d87c <UART_SetConfig+0x1fc>
 800d81a:	4b67      	ldr	r3, [pc, #412]	@ (800d9b8 <UART_SetConfig+0x338>)
 800d81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d81e:	f003 0307 	and.w	r3, r3, #7
 800d822:	2b05      	cmp	r3, #5
 800d824:	d826      	bhi.n	800d874 <UART_SetConfig+0x1f4>
 800d826:	a201      	add	r2, pc, #4	@ (adr r2, 800d82c <UART_SetConfig+0x1ac>)
 800d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82c:	0800d845 	.word	0x0800d845
 800d830:	0800d84d 	.word	0x0800d84d
 800d834:	0800d855 	.word	0x0800d855
 800d838:	0800d85d 	.word	0x0800d85d
 800d83c:	0800d865 	.word	0x0800d865
 800d840:	0800d86d 	.word	0x0800d86d
 800d844:	2300      	movs	r3, #0
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84a:	e1ec      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d84c:	2304      	movs	r3, #4
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d852:	e1e8      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d854:	2308      	movs	r3, #8
 800d856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85a:	e1e4      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d85c:	2310      	movs	r3, #16
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d862:	e1e0      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d864:	2320      	movs	r3, #32
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86a:	e1dc      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d86c:	2340      	movs	r3, #64	@ 0x40
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d872:	e1d8      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d874:	2380      	movs	r3, #128	@ 0x80
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87a:	e1d4      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a4f      	ldr	r2, [pc, #316]	@ (800d9c0 <UART_SetConfig+0x340>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d130      	bne.n	800d8e8 <UART_SetConfig+0x268>
 800d886:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b8 <UART_SetConfig+0x338>)
 800d888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d88a:	f003 0307 	and.w	r3, r3, #7
 800d88e:	2b05      	cmp	r3, #5
 800d890:	d826      	bhi.n	800d8e0 <UART_SetConfig+0x260>
 800d892:	a201      	add	r2, pc, #4	@ (adr r2, 800d898 <UART_SetConfig+0x218>)
 800d894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d898:	0800d8b1 	.word	0x0800d8b1
 800d89c:	0800d8b9 	.word	0x0800d8b9
 800d8a0:	0800d8c1 	.word	0x0800d8c1
 800d8a4:	0800d8c9 	.word	0x0800d8c9
 800d8a8:	0800d8d1 	.word	0x0800d8d1
 800d8ac:	0800d8d9 	.word	0x0800d8d9
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b6:	e1b6      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8b8:	2304      	movs	r3, #4
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8be:	e1b2      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8c0:	2308      	movs	r3, #8
 800d8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c6:	e1ae      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8c8:	2310      	movs	r3, #16
 800d8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ce:	e1aa      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8d0:	2320      	movs	r3, #32
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e1a6      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8d8:	2340      	movs	r3, #64	@ 0x40
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e1a2      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8e0:	2380      	movs	r3, #128	@ 0x80
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e19e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a35      	ldr	r2, [pc, #212]	@ (800d9c4 <UART_SetConfig+0x344>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d130      	bne.n	800d954 <UART_SetConfig+0x2d4>
 800d8f2:	4b31      	ldr	r3, [pc, #196]	@ (800d9b8 <UART_SetConfig+0x338>)
 800d8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b05      	cmp	r3, #5
 800d8fc:	d826      	bhi.n	800d94c <UART_SetConfig+0x2cc>
 800d8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d904 <UART_SetConfig+0x284>)
 800d900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d904:	0800d91d 	.word	0x0800d91d
 800d908:	0800d925 	.word	0x0800d925
 800d90c:	0800d92d 	.word	0x0800d92d
 800d910:	0800d935 	.word	0x0800d935
 800d914:	0800d93d 	.word	0x0800d93d
 800d918:	0800d945 	.word	0x0800d945
 800d91c:	2300      	movs	r3, #0
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d922:	e180      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d924:	2304      	movs	r3, #4
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92a:	e17c      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d92c:	2308      	movs	r3, #8
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d932:	e178      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d934:	2310      	movs	r3, #16
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93a:	e174      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d93c:	2320      	movs	r3, #32
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e170      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d944:	2340      	movs	r3, #64	@ 0x40
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e16c      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d94c:	2380      	movs	r3, #128	@ 0x80
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e168      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a1b      	ldr	r2, [pc, #108]	@ (800d9c8 <UART_SetConfig+0x348>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d142      	bne.n	800d9e4 <UART_SetConfig+0x364>
 800d95e:	4b16      	ldr	r3, [pc, #88]	@ (800d9b8 <UART_SetConfig+0x338>)
 800d960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	2b05      	cmp	r3, #5
 800d968:	d838      	bhi.n	800d9dc <UART_SetConfig+0x35c>
 800d96a:	a201      	add	r2, pc, #4	@ (adr r2, 800d970 <UART_SetConfig+0x2f0>)
 800d96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d970:	0800d989 	.word	0x0800d989
 800d974:	0800d991 	.word	0x0800d991
 800d978:	0800d999 	.word	0x0800d999
 800d97c:	0800d9a1 	.word	0x0800d9a1
 800d980:	0800d9cd 	.word	0x0800d9cd
 800d984:	0800d9d5 	.word	0x0800d9d5
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e14a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d990:	2304      	movs	r3, #4
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e146      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d998:	2308      	movs	r3, #8
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e142      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e13e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d9a8:	cfff69f3 	.word	0xcfff69f3
 800d9ac:	58000c00 	.word	0x58000c00
 800d9b0:	11fff4ff 	.word	0x11fff4ff
 800d9b4:	40011000 	.word	0x40011000
 800d9b8:	58024400 	.word	0x58024400
 800d9bc:	40004400 	.word	0x40004400
 800d9c0:	40004800 	.word	0x40004800
 800d9c4:	40004c00 	.word	0x40004c00
 800d9c8:	40005000 	.word	0x40005000
 800d9cc:	2320      	movs	r3, #32
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d2:	e128      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d9d4:	2340      	movs	r3, #64	@ 0x40
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9da:	e124      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d9dc:	2380      	movs	r3, #128	@ 0x80
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e2:	e120      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4acb      	ldr	r2, [pc, #812]	@ (800dd18 <UART_SetConfig+0x698>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d176      	bne.n	800dadc <UART_SetConfig+0x45c>
 800d9ee:	4bcb      	ldr	r3, [pc, #812]	@ (800dd1c <UART_SetConfig+0x69c>)
 800d9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d9f6:	2b28      	cmp	r3, #40	@ 0x28
 800d9f8:	d86c      	bhi.n	800dad4 <UART_SetConfig+0x454>
 800d9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800da00 <UART_SetConfig+0x380>)
 800d9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da00:	0800daa5 	.word	0x0800daa5
 800da04:	0800dad5 	.word	0x0800dad5
 800da08:	0800dad5 	.word	0x0800dad5
 800da0c:	0800dad5 	.word	0x0800dad5
 800da10:	0800dad5 	.word	0x0800dad5
 800da14:	0800dad5 	.word	0x0800dad5
 800da18:	0800dad5 	.word	0x0800dad5
 800da1c:	0800dad5 	.word	0x0800dad5
 800da20:	0800daad 	.word	0x0800daad
 800da24:	0800dad5 	.word	0x0800dad5
 800da28:	0800dad5 	.word	0x0800dad5
 800da2c:	0800dad5 	.word	0x0800dad5
 800da30:	0800dad5 	.word	0x0800dad5
 800da34:	0800dad5 	.word	0x0800dad5
 800da38:	0800dad5 	.word	0x0800dad5
 800da3c:	0800dad5 	.word	0x0800dad5
 800da40:	0800dab5 	.word	0x0800dab5
 800da44:	0800dad5 	.word	0x0800dad5
 800da48:	0800dad5 	.word	0x0800dad5
 800da4c:	0800dad5 	.word	0x0800dad5
 800da50:	0800dad5 	.word	0x0800dad5
 800da54:	0800dad5 	.word	0x0800dad5
 800da58:	0800dad5 	.word	0x0800dad5
 800da5c:	0800dad5 	.word	0x0800dad5
 800da60:	0800dabd 	.word	0x0800dabd
 800da64:	0800dad5 	.word	0x0800dad5
 800da68:	0800dad5 	.word	0x0800dad5
 800da6c:	0800dad5 	.word	0x0800dad5
 800da70:	0800dad5 	.word	0x0800dad5
 800da74:	0800dad5 	.word	0x0800dad5
 800da78:	0800dad5 	.word	0x0800dad5
 800da7c:	0800dad5 	.word	0x0800dad5
 800da80:	0800dac5 	.word	0x0800dac5
 800da84:	0800dad5 	.word	0x0800dad5
 800da88:	0800dad5 	.word	0x0800dad5
 800da8c:	0800dad5 	.word	0x0800dad5
 800da90:	0800dad5 	.word	0x0800dad5
 800da94:	0800dad5 	.word	0x0800dad5
 800da98:	0800dad5 	.word	0x0800dad5
 800da9c:	0800dad5 	.word	0x0800dad5
 800daa0:	0800dacd 	.word	0x0800dacd
 800daa4:	2301      	movs	r3, #1
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daaa:	e0bc      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800daac:	2304      	movs	r3, #4
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab2:	e0b8      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dab4:	2308      	movs	r3, #8
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daba:	e0b4      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dabc:	2310      	movs	r3, #16
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e0b0      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dac4:	2320      	movs	r3, #32
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e0ac      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dacc:	2340      	movs	r3, #64	@ 0x40
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e0a8      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dad4:	2380      	movs	r3, #128	@ 0x80
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e0a4      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a8f      	ldr	r2, [pc, #572]	@ (800dd20 <UART_SetConfig+0x6a0>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d130      	bne.n	800db48 <UART_SetConfig+0x4c8>
 800dae6:	4b8d      	ldr	r3, [pc, #564]	@ (800dd1c <UART_SetConfig+0x69c>)
 800dae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	2b05      	cmp	r3, #5
 800daf0:	d826      	bhi.n	800db40 <UART_SetConfig+0x4c0>
 800daf2:	a201      	add	r2, pc, #4	@ (adr r2, 800daf8 <UART_SetConfig+0x478>)
 800daf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf8:	0800db11 	.word	0x0800db11
 800dafc:	0800db19 	.word	0x0800db19
 800db00:	0800db21 	.word	0x0800db21
 800db04:	0800db29 	.word	0x0800db29
 800db08:	0800db31 	.word	0x0800db31
 800db0c:	0800db39 	.word	0x0800db39
 800db10:	2300      	movs	r3, #0
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db16:	e086      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db18:	2304      	movs	r3, #4
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1e:	e082      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db20:	2308      	movs	r3, #8
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db26:	e07e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db28:	2310      	movs	r3, #16
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2e:	e07a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db30:	2320      	movs	r3, #32
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db36:	e076      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db38:	2340      	movs	r3, #64	@ 0x40
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e072      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db40:	2380      	movs	r3, #128	@ 0x80
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e06e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a75      	ldr	r2, [pc, #468]	@ (800dd24 <UART_SetConfig+0x6a4>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d130      	bne.n	800dbb4 <UART_SetConfig+0x534>
 800db52:	4b72      	ldr	r3, [pc, #456]	@ (800dd1c <UART_SetConfig+0x69c>)
 800db54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	2b05      	cmp	r3, #5
 800db5c:	d826      	bhi.n	800dbac <UART_SetConfig+0x52c>
 800db5e:	a201      	add	r2, pc, #4	@ (adr r2, 800db64 <UART_SetConfig+0x4e4>)
 800db60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db64:	0800db7d 	.word	0x0800db7d
 800db68:	0800db85 	.word	0x0800db85
 800db6c:	0800db8d 	.word	0x0800db8d
 800db70:	0800db95 	.word	0x0800db95
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800dba5 	.word	0x0800dba5
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db82:	e050      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db84:	2304      	movs	r3, #4
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8a:	e04c      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db8c:	2308      	movs	r3, #8
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db92:	e048      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db94:	2310      	movs	r3, #16
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db9a:	e044      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800db9c:	2320      	movs	r3, #32
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba2:	e040      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dba4:	2340      	movs	r3, #64	@ 0x40
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbaa:	e03c      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dbac:	2380      	movs	r3, #128	@ 0x80
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e038      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a5b      	ldr	r2, [pc, #364]	@ (800dd28 <UART_SetConfig+0x6a8>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d130      	bne.n	800dc20 <UART_SetConfig+0x5a0>
 800dbbe:	4b57      	ldr	r3, [pc, #348]	@ (800dd1c <UART_SetConfig+0x69c>)
 800dbc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	2b05      	cmp	r3, #5
 800dbc8:	d826      	bhi.n	800dc18 <UART_SetConfig+0x598>
 800dbca:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd0 <UART_SetConfig+0x550>)
 800dbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd0:	0800dbe9 	.word	0x0800dbe9
 800dbd4:	0800dbf1 	.word	0x0800dbf1
 800dbd8:	0800dbf9 	.word	0x0800dbf9
 800dbdc:	0800dc01 	.word	0x0800dc01
 800dbe0:	0800dc09 	.word	0x0800dc09
 800dbe4:	0800dc11 	.word	0x0800dc11
 800dbe8:	2302      	movs	r3, #2
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbee:	e01a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf6:	e016      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dbf8:	2308      	movs	r3, #8
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfe:	e012      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dc00:	2310      	movs	r3, #16
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc06:	e00e      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dc08:	2320      	movs	r3, #32
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc0e:	e00a      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dc10:	2340      	movs	r3, #64	@ 0x40
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc16:	e006      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dc18:	2380      	movs	r3, #128	@ 0x80
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1e:	e002      	b.n	800dc26 <UART_SetConfig+0x5a6>
 800dc20:	2380      	movs	r3, #128	@ 0x80
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a3f      	ldr	r2, [pc, #252]	@ (800dd28 <UART_SetConfig+0x6a8>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	f040 80f8 	bne.w	800de22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc36:	2b20      	cmp	r3, #32
 800dc38:	dc46      	bgt.n	800dcc8 <UART_SetConfig+0x648>
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	f2c0 8082 	blt.w	800dd44 <UART_SetConfig+0x6c4>
 800dc40:	3b02      	subs	r3, #2
 800dc42:	2b1e      	cmp	r3, #30
 800dc44:	d87e      	bhi.n	800dd44 <UART_SetConfig+0x6c4>
 800dc46:	a201      	add	r2, pc, #4	@ (adr r2, 800dc4c <UART_SetConfig+0x5cc>)
 800dc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4c:	0800dccf 	.word	0x0800dccf
 800dc50:	0800dd45 	.word	0x0800dd45
 800dc54:	0800dcd7 	.word	0x0800dcd7
 800dc58:	0800dd45 	.word	0x0800dd45
 800dc5c:	0800dd45 	.word	0x0800dd45
 800dc60:	0800dd45 	.word	0x0800dd45
 800dc64:	0800dce7 	.word	0x0800dce7
 800dc68:	0800dd45 	.word	0x0800dd45
 800dc6c:	0800dd45 	.word	0x0800dd45
 800dc70:	0800dd45 	.word	0x0800dd45
 800dc74:	0800dd45 	.word	0x0800dd45
 800dc78:	0800dd45 	.word	0x0800dd45
 800dc7c:	0800dd45 	.word	0x0800dd45
 800dc80:	0800dd45 	.word	0x0800dd45
 800dc84:	0800dcf7 	.word	0x0800dcf7
 800dc88:	0800dd45 	.word	0x0800dd45
 800dc8c:	0800dd45 	.word	0x0800dd45
 800dc90:	0800dd45 	.word	0x0800dd45
 800dc94:	0800dd45 	.word	0x0800dd45
 800dc98:	0800dd45 	.word	0x0800dd45
 800dc9c:	0800dd45 	.word	0x0800dd45
 800dca0:	0800dd45 	.word	0x0800dd45
 800dca4:	0800dd45 	.word	0x0800dd45
 800dca8:	0800dd45 	.word	0x0800dd45
 800dcac:	0800dd45 	.word	0x0800dd45
 800dcb0:	0800dd45 	.word	0x0800dd45
 800dcb4:	0800dd45 	.word	0x0800dd45
 800dcb8:	0800dd45 	.word	0x0800dd45
 800dcbc:	0800dd45 	.word	0x0800dd45
 800dcc0:	0800dd45 	.word	0x0800dd45
 800dcc4:	0800dd37 	.word	0x0800dd37
 800dcc8:	2b40      	cmp	r3, #64	@ 0x40
 800dcca:	d037      	beq.n	800dd3c <UART_SetConfig+0x6bc>
 800dccc:	e03a      	b.n	800dd44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dcce:	f7fb f901 	bl	8008ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 800dcd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dcd4:	e03c      	b.n	800dd50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fb f910 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce4:	e034      	b.n	800dd50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dce6:	f107 0318 	add.w	r3, r7, #24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fb fa5c 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf4:	e02c      	b.n	800dd50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcf6:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <UART_SetConfig+0x69c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f003 0320 	and.w	r3, r3, #32
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d016      	beq.n	800dd30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd02:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <UART_SetConfig+0x69c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	08db      	lsrs	r3, r3, #3
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	4a07      	ldr	r2, [pc, #28]	@ (800dd2c <UART_SetConfig+0x6ac>)
 800dd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd14:	e01c      	b.n	800dd50 <UART_SetConfig+0x6d0>
 800dd16:	bf00      	nop
 800dd18:	40011400 	.word	0x40011400
 800dd1c:	58024400 	.word	0x58024400
 800dd20:	40007800 	.word	0x40007800
 800dd24:	40007c00 	.word	0x40007c00
 800dd28:	58000c00 	.word	0x58000c00
 800dd2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dd30:	4b9d      	ldr	r3, [pc, #628]	@ (800dfa8 <UART_SetConfig+0x928>)
 800dd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd34:	e00c      	b.n	800dd50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd36:	4b9d      	ldr	r3, [pc, #628]	@ (800dfac <UART_SetConfig+0x92c>)
 800dd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd3a:	e009      	b.n	800dd50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd42:	e005      	b.n	800dd50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dd44:	2300      	movs	r3, #0
 800dd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 81de 	beq.w	800e114 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd5c:	4a94      	ldr	r2, [pc, #592]	@ (800dfb0 <UART_SetConfig+0x930>)
 800dd5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd62:	461a      	mov	r2, r3
 800dd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd66:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	4613      	mov	r3, r2
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	4413      	add	r3, r2
 800dd76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d305      	bcc.n	800dd88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d903      	bls.n	800dd90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd8e:	e1c1      	b.n	800e114 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd92:	2200      	movs	r2, #0
 800dd94:	60bb      	str	r3, [r7, #8]
 800dd96:	60fa      	str	r2, [r7, #12]
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9c:	4a84      	ldr	r2, [pc, #528]	@ (800dfb0 <UART_SetConfig+0x930>)
 800dd9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2200      	movs	r2, #0
 800dda6:	603b      	str	r3, [r7, #0]
 800dda8:	607a      	str	r2, [r7, #4]
 800ddaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ddb2:	f7f2 fae5 	bl	8000380 <__aeabi_uldivmod>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	4610      	mov	r0, r2
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f04f 0200 	mov.w	r2, #0
 800ddc2:	f04f 0300 	mov.w	r3, #0
 800ddc6:	020b      	lsls	r3, r1, #8
 800ddc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ddcc:	0202      	lsls	r2, r0, #8
 800ddce:	6979      	ldr	r1, [r7, #20]
 800ddd0:	6849      	ldr	r1, [r1, #4]
 800ddd2:	0849      	lsrs	r1, r1, #1
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	4605      	mov	r5, r0
 800ddda:	eb12 0804 	adds.w	r8, r2, r4
 800ddde:	eb43 0905 	adc.w	r9, r3, r5
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	469a      	mov	sl, r3
 800ddea:	4693      	mov	fp, r2
 800ddec:	4652      	mov	r2, sl
 800ddee:	465b      	mov	r3, fp
 800ddf0:	4640      	mov	r0, r8
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fac4 	bl	8000380 <__aeabi_uldivmod>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de06:	d308      	bcc.n	800de1a <UART_SetConfig+0x79a>
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de0e:	d204      	bcs.n	800de1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de16:	60da      	str	r2, [r3, #12]
 800de18:	e17c      	b.n	800e114 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de20:	e178      	b.n	800e114 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de2a:	f040 80c5 	bne.w	800dfb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800de2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de32:	2b20      	cmp	r3, #32
 800de34:	dc48      	bgt.n	800dec8 <UART_SetConfig+0x848>
 800de36:	2b00      	cmp	r3, #0
 800de38:	db7b      	blt.n	800df32 <UART_SetConfig+0x8b2>
 800de3a:	2b20      	cmp	r3, #32
 800de3c:	d879      	bhi.n	800df32 <UART_SetConfig+0x8b2>
 800de3e:	a201      	add	r2, pc, #4	@ (adr r2, 800de44 <UART_SetConfig+0x7c4>)
 800de40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de44:	0800decf 	.word	0x0800decf
 800de48:	0800ded7 	.word	0x0800ded7
 800de4c:	0800df33 	.word	0x0800df33
 800de50:	0800df33 	.word	0x0800df33
 800de54:	0800dedf 	.word	0x0800dedf
 800de58:	0800df33 	.word	0x0800df33
 800de5c:	0800df33 	.word	0x0800df33
 800de60:	0800df33 	.word	0x0800df33
 800de64:	0800deef 	.word	0x0800deef
 800de68:	0800df33 	.word	0x0800df33
 800de6c:	0800df33 	.word	0x0800df33
 800de70:	0800df33 	.word	0x0800df33
 800de74:	0800df33 	.word	0x0800df33
 800de78:	0800df33 	.word	0x0800df33
 800de7c:	0800df33 	.word	0x0800df33
 800de80:	0800df33 	.word	0x0800df33
 800de84:	0800deff 	.word	0x0800deff
 800de88:	0800df33 	.word	0x0800df33
 800de8c:	0800df33 	.word	0x0800df33
 800de90:	0800df33 	.word	0x0800df33
 800de94:	0800df33 	.word	0x0800df33
 800de98:	0800df33 	.word	0x0800df33
 800de9c:	0800df33 	.word	0x0800df33
 800dea0:	0800df33 	.word	0x0800df33
 800dea4:	0800df33 	.word	0x0800df33
 800dea8:	0800df33 	.word	0x0800df33
 800deac:	0800df33 	.word	0x0800df33
 800deb0:	0800df33 	.word	0x0800df33
 800deb4:	0800df33 	.word	0x0800df33
 800deb8:	0800df33 	.word	0x0800df33
 800debc:	0800df33 	.word	0x0800df33
 800dec0:	0800df33 	.word	0x0800df33
 800dec4:	0800df25 	.word	0x0800df25
 800dec8:	2b40      	cmp	r3, #64	@ 0x40
 800deca:	d02e      	beq.n	800df2a <UART_SetConfig+0x8aa>
 800decc:	e031      	b.n	800df32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dece:	f7f9 f809 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 800ded2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ded4:	e033      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ded6:	f7f9 f81b 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 800deda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dedc:	e02f      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fb f80c 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deec:	e027      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deee:	f107 0318 	add.w	r3, r7, #24
 800def2:	4618      	mov	r0, r3
 800def4:	f7fb f958 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800defc:	e01f      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800defe:	4b2d      	ldr	r3, [pc, #180]	@ (800dfb4 <UART_SetConfig+0x934>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 0320 	and.w	r3, r3, #32
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df0a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfb4 <UART_SetConfig+0x934>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	08db      	lsrs	r3, r3, #3
 800df10:	f003 0303 	and.w	r3, r3, #3
 800df14:	4a24      	ldr	r2, [pc, #144]	@ (800dfa8 <UART_SetConfig+0x928>)
 800df16:	fa22 f303 	lsr.w	r3, r2, r3
 800df1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df1c:	e00f      	b.n	800df3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800df1e:	4b22      	ldr	r3, [pc, #136]	@ (800dfa8 <UART_SetConfig+0x928>)
 800df20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df22:	e00c      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df24:	4b21      	ldr	r3, [pc, #132]	@ (800dfac <UART_SetConfig+0x92c>)
 800df26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df28:	e009      	b.n	800df3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df30:	e005      	b.n	800df3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df40:	2b00      	cmp	r3, #0
 800df42:	f000 80e7 	beq.w	800e114 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df4a:	4a19      	ldr	r2, [pc, #100]	@ (800dfb0 <UART_SetConfig+0x930>)
 800df4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df50:	461a      	mov	r2, r3
 800df52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df54:	fbb3 f3f2 	udiv	r3, r3, r2
 800df58:	005a      	lsls	r2, r3, #1
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	085b      	lsrs	r3, r3, #1
 800df60:	441a      	add	r2, r3
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	2b0f      	cmp	r3, #15
 800df70:	d916      	bls.n	800dfa0 <UART_SetConfig+0x920>
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df78:	d212      	bcs.n	800dfa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	f023 030f 	bic.w	r3, r3, #15
 800df82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df86:	085b      	lsrs	r3, r3, #1
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	b29a      	uxth	r2, r3
 800df90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df92:	4313      	orrs	r3, r2
 800df94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	e0b9      	b.n	800e114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dfa6:	e0b5      	b.n	800e114 <UART_SetConfig+0xa94>
 800dfa8:	03d09000 	.word	0x03d09000
 800dfac:	003d0900 	.word	0x003d0900
 800dfb0:	0801b39c 	.word	0x0801b39c
 800dfb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dfb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	dc49      	bgt.n	800e054 <UART_SetConfig+0x9d4>
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	db7c      	blt.n	800e0be <UART_SetConfig+0xa3e>
 800dfc4:	2b20      	cmp	r3, #32
 800dfc6:	d87a      	bhi.n	800e0be <UART_SetConfig+0xa3e>
 800dfc8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfd0 <UART_SetConfig+0x950>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800e05b 	.word	0x0800e05b
 800dfd4:	0800e063 	.word	0x0800e063
 800dfd8:	0800e0bf 	.word	0x0800e0bf
 800dfdc:	0800e0bf 	.word	0x0800e0bf
 800dfe0:	0800e06b 	.word	0x0800e06b
 800dfe4:	0800e0bf 	.word	0x0800e0bf
 800dfe8:	0800e0bf 	.word	0x0800e0bf
 800dfec:	0800e0bf 	.word	0x0800e0bf
 800dff0:	0800e07b 	.word	0x0800e07b
 800dff4:	0800e0bf 	.word	0x0800e0bf
 800dff8:	0800e0bf 	.word	0x0800e0bf
 800dffc:	0800e0bf 	.word	0x0800e0bf
 800e000:	0800e0bf 	.word	0x0800e0bf
 800e004:	0800e0bf 	.word	0x0800e0bf
 800e008:	0800e0bf 	.word	0x0800e0bf
 800e00c:	0800e0bf 	.word	0x0800e0bf
 800e010:	0800e08b 	.word	0x0800e08b
 800e014:	0800e0bf 	.word	0x0800e0bf
 800e018:	0800e0bf 	.word	0x0800e0bf
 800e01c:	0800e0bf 	.word	0x0800e0bf
 800e020:	0800e0bf 	.word	0x0800e0bf
 800e024:	0800e0bf 	.word	0x0800e0bf
 800e028:	0800e0bf 	.word	0x0800e0bf
 800e02c:	0800e0bf 	.word	0x0800e0bf
 800e030:	0800e0bf 	.word	0x0800e0bf
 800e034:	0800e0bf 	.word	0x0800e0bf
 800e038:	0800e0bf 	.word	0x0800e0bf
 800e03c:	0800e0bf 	.word	0x0800e0bf
 800e040:	0800e0bf 	.word	0x0800e0bf
 800e044:	0800e0bf 	.word	0x0800e0bf
 800e048:	0800e0bf 	.word	0x0800e0bf
 800e04c:	0800e0bf 	.word	0x0800e0bf
 800e050:	0800e0b1 	.word	0x0800e0b1
 800e054:	2b40      	cmp	r3, #64	@ 0x40
 800e056:	d02e      	beq.n	800e0b6 <UART_SetConfig+0xa36>
 800e058:	e031      	b.n	800e0be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e05a:	f7f8 ff43 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 800e05e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e060:	e033      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e062:	f7f8 ff55 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 800e066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e068:	e02f      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e06a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fa ff46 	bl	8008f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e078:	e027      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e07a:	f107 0318 	add.w	r3, r7, #24
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fb f892 	bl	80091a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e088:	e01f      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e08a:	4b2d      	ldr	r3, [pc, #180]	@ (800e140 <UART_SetConfig+0xac0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 0320 	and.w	r3, r3, #32
 800e092:	2b00      	cmp	r3, #0
 800e094:	d009      	beq.n	800e0aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e096:	4b2a      	ldr	r3, [pc, #168]	@ (800e140 <UART_SetConfig+0xac0>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	08db      	lsrs	r3, r3, #3
 800e09c:	f003 0303 	and.w	r3, r3, #3
 800e0a0:	4a28      	ldr	r2, [pc, #160]	@ (800e144 <UART_SetConfig+0xac4>)
 800e0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0a8:	e00f      	b.n	800e0ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e0aa:	4b26      	ldr	r3, [pc, #152]	@ (800e144 <UART_SetConfig+0xac4>)
 800e0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0ae:	e00c      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0b0:	4b25      	ldr	r3, [pc, #148]	@ (800e148 <UART_SetConfig+0xac8>)
 800e0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0b4:	e009      	b.n	800e0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0bc:	e005      	b.n	800e0ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e0c8:	bf00      	nop
    }

    if (pclk != 0U)
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d021      	beq.n	800e114 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e14c <UART_SetConfig+0xacc>)
 800e0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0de:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	085b      	lsrs	r3, r3, #1
 800e0e8:	441a      	add	r2, r3
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d909      	bls.n	800e10e <UART_SetConfig+0xa8e>
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e100:	d205      	bcs.n	800e10e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e104:	b29a      	uxth	r2, r3
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	60da      	str	r2, [r3, #12]
 800e10c:	e002      	b.n	800e114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2201      	movs	r2, #1
 800e118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	2201      	movs	r2, #1
 800e120:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2200      	movs	r2, #0
 800e128:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2200      	movs	r2, #0
 800e12e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e130:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e134:	4618      	mov	r0, r3
 800e136:	3748      	adds	r7, #72	@ 0x48
 800e138:	46bd      	mov	sp, r7
 800e13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e13e:	bf00      	nop
 800e140:	58024400 	.word	0x58024400
 800e144:	03d09000 	.word	0x03d09000
 800e148:	003d0900 	.word	0x003d0900
 800e14c:	0801b39c 	.word	0x0801b39c

0800e150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	f003 0308 	and.w	r3, r3, #8
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00a      	beq.n	800e17a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	430a      	orrs	r2, r1
 800e178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17e:	f003 0301 	and.w	r3, r3, #1
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	430a      	orrs	r2, r1
 800e19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1a0:	f003 0302 	and.w	r3, r3, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00a      	beq.n	800e1be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	430a      	orrs	r2, r1
 800e1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c2:	f003 0304 	and.w	r3, r3, #4
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e4:	f003 0310 	and.w	r3, r3, #16
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00a      	beq.n	800e202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	430a      	orrs	r2, r1
 800e200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e206:	f003 0320 	and.w	r3, r3, #32
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	430a      	orrs	r2, r1
 800e222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d01a      	beq.n	800e266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	430a      	orrs	r2, r1
 800e244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e24a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e24e:	d10a      	bne.n	800e266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	430a      	orrs	r2, r1
 800e264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00a      	beq.n	800e288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	430a      	orrs	r2, r1
 800e286:	605a      	str	r2, [r3, #4]
  }
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b098      	sub	sp, #96	@ 0x60
 800e298:	af02      	add	r7, sp, #8
 800e29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2a4:	f7f4 fcbc 	bl	8002c20 <HAL_GetTick>
 800e2a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f003 0308 	and.w	r3, r3, #8
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d12f      	bne.n	800e318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f88e 	bl	800e3e8 <UART_WaitOnFlagUntilTimeout>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d022      	beq.n	800e318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2da:	e853 3f00 	ldrex	r3, [r3]
 800e2de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e2f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e2f8:	e841 2300 	strex	r3, r2, [r1]
 800e2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1e6      	bne.n	800e2d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2220      	movs	r2, #32
 800e308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e063      	b.n	800e3e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 0304 	and.w	r3, r3, #4
 800e322:	2b04      	cmp	r3, #4
 800e324:	d149      	bne.n	800e3ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e32e:	2200      	movs	r2, #0
 800e330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f857 	bl	800e3e8 <UART_WaitOnFlagUntilTimeout>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d03c      	beq.n	800e3ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	e853 3f00 	ldrex	r3, [r3]
 800e34c:	623b      	str	r3, [r7, #32]
   return(result);
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e366:	e841 2300 	strex	r3, r2, [r1]
 800e36a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1e6      	bne.n	800e340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	e853 3f00 	ldrex	r3, [r3]
 800e380:	60fb      	str	r3, [r7, #12]
   return(result);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f023 0301 	bic.w	r3, r3, #1
 800e388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3308      	adds	r3, #8
 800e390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e392:	61fa      	str	r2, [r7, #28]
 800e394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e396:	69b9      	ldr	r1, [r7, #24]
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	e841 2300 	strex	r3, r2, [r1]
 800e39e:	617b      	str	r3, [r7, #20]
   return(result);
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e5      	bne.n	800e372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2220      	movs	r2, #32
 800e3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e012      	b.n	800e3e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2220      	movs	r2, #32
 800e3be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3758      	adds	r7, #88	@ 0x58
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3f8:	e04f      	b.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d04b      	beq.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e402:	f7f4 fc0d 	bl	8002c20 <HAL_GetTick>
 800e406:	4602      	mov	r2, r0
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	69ba      	ldr	r2, [r7, #24]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <UART_WaitOnFlagUntilTimeout+0x30>
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	e04e      	b.n	800e4ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f003 0304 	and.w	r3, r3, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	d037      	beq.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b80      	cmp	r3, #128	@ 0x80
 800e42e:	d034      	beq.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2b40      	cmp	r3, #64	@ 0x40
 800e434:	d031      	beq.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	69db      	ldr	r3, [r3, #28]
 800e43c:	f003 0308 	and.w	r3, r3, #8
 800e440:	2b08      	cmp	r3, #8
 800e442:	d110      	bne.n	800e466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2208      	movs	r2, #8
 800e44a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f000 f921 	bl	800e694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2208      	movs	r2, #8
 800e456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e029      	b.n	800e4ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e474:	d111      	bne.n	800e49a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e47e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 f907 	bl	800e694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2220      	movs	r2, #32
 800e48a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e00f      	b.n	800e4ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	69da      	ldr	r2, [r3, #28]
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	bf0c      	ite	eq
 800e4aa:	2301      	moveq	r3, #1
 800e4ac:	2300      	movne	r3, #0
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	79fb      	ldrb	r3, [r7, #7]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d0a0      	beq.n	800e3fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b096      	sub	sp, #88	@ 0x58
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	88fa      	ldrh	r2, [r7, #6]
 800e4dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2222      	movs	r2, #34	@ 0x22
 800e4ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d02d      	beq.n	800e556 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e500:	4a40      	ldr	r2, [pc, #256]	@ (800e604 <UART_Start_Receive_DMA+0x140>)
 800e502:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e50a:	4a3f      	ldr	r2, [pc, #252]	@ (800e608 <UART_Start_Receive_DMA+0x144>)
 800e50c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e514:	4a3d      	ldr	r2, [pc, #244]	@ (800e60c <UART_Start_Receive_DMA+0x148>)
 800e516:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e51e:	2200      	movs	r2, #0
 800e520:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3324      	adds	r3, #36	@ 0x24
 800e52e:	4619      	mov	r1, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e534:	461a      	mov	r2, r3
 800e536:	88fb      	ldrh	r3, [r7, #6]
 800e538:	f7f4 ffea 	bl	8003510 <HAL_DMA_Start_IT>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d009      	beq.n	800e556 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2210      	movs	r2, #16
 800e546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2220      	movs	r2, #32
 800e54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e051      	b.n	800e5fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d018      	beq.n	800e590 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e572:	657b      	str	r3, [r7, #84]	@ 0x54
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	461a      	mov	r2, r3
 800e57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e57e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e580:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e584:	e841 2300 	strex	r3, r2, [r1]
 800e588:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e58a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e6      	bne.n	800e55e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3308      	adds	r3, #8
 800e596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e59a:	e853 3f00 	ldrex	r3, [r3]
 800e59e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a2:	f043 0301 	orr.w	r3, r3, #1
 800e5a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e5b0:	637a      	str	r2, [r7, #52]	@ 0x34
 800e5b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5b8:	e841 2300 	strex	r3, r2, [r1]
 800e5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e5      	bne.n	800e590 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	e853 3f00 	ldrex	r3, [r3]
 800e5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e5e4:	623a      	str	r2, [r7, #32]
 800e5e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e8:	69f9      	ldr	r1, [r7, #28]
 800e5ea:	6a3a      	ldr	r2, [r7, #32]
 800e5ec:	e841 2300 	strex	r3, r2, [r1]
 800e5f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1e5      	bne.n	800e5c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3758      	adds	r7, #88	@ 0x58
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	0800e761 	.word	0x0800e761
 800e608:	0800e889 	.word	0x0800e889
 800e60c:	0800e8c7 	.word	0x0800e8c7

0800e610 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e610:	b480      	push	{r7}
 800e612:	b08f      	sub	sp, #60	@ 0x3c
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	e853 3f00 	ldrex	r3, [r3]
 800e624:	61fb      	str	r3, [r7, #28]
   return(result);
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e638:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e63e:	e841 2300 	strex	r3, r2, [r1]
 800e642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1e6      	bne.n	800e618 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	3308      	adds	r3, #8
 800e650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	e853 3f00 	ldrex	r3, [r3]
 800e658:	60bb      	str	r3, [r7, #8]
   return(result);
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e660:	633b      	str	r3, [r7, #48]	@ 0x30
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3308      	adds	r3, #8
 800e668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e66a:	61ba      	str	r2, [r7, #24]
 800e66c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66e:	6979      	ldr	r1, [r7, #20]
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	e841 2300 	strex	r3, r2, [r1]
 800e676:	613b      	str	r3, [r7, #16]
   return(result);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1e5      	bne.n	800e64a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2220      	movs	r2, #32
 800e682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e686:	bf00      	nop
 800e688:	373c      	adds	r7, #60	@ 0x3c
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
	...

0800e694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e694:	b480      	push	{r7}
 800e696:	b095      	sub	sp, #84	@ 0x54
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6a4:	e853 3f00 	ldrex	r3, [r3]
 800e6a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6c2:	e841 2300 	strex	r3, r2, [r1]
 800e6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1e6      	bne.n	800e69c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3308      	adds	r3, #8
 800e6d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	4b1e      	ldr	r3, [pc, #120]	@ (800e75c <UART_EndRxTransfer+0xc8>)
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3308      	adds	r3, #8
 800e6ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6f6:	e841 2300 	strex	r3, r2, [r1]
 800e6fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e5      	bne.n	800e6ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e706:	2b01      	cmp	r3, #1
 800e708:	d118      	bne.n	800e73c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	60bb      	str	r3, [r7, #8]
   return(result);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	f023 0310 	bic.w	r3, r3, #16
 800e71e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e728:	61bb      	str	r3, [r7, #24]
 800e72a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	6979      	ldr	r1, [r7, #20]
 800e72e:	69ba      	ldr	r2, [r7, #24]
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	613b      	str	r3, [r7, #16]
   return(result);
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e6      	bne.n	800e70a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2220      	movs	r2, #32
 800e740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e750:	bf00      	nop
 800e752:	3754      	adds	r7, #84	@ 0x54
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	effffffe 	.word	0xeffffffe

0800e760 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b09c      	sub	sp, #112	@ 0x70
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e76c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	69db      	ldr	r3, [r3, #28]
 800e772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e776:	d071      	beq.n	800e85c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e788:	e853 3f00 	ldrex	r3, [r3]
 800e78c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e78e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e794:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e79e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e7a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e7a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7a6:	e841 2300 	strex	r3, r2, [r1]
 800e7aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e7ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e6      	bne.n	800e780 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7c4:	f023 0301 	bic.w	r3, r3, #1
 800e7c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800e7d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e5      	bne.n	800e7b2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7f6:	6a3b      	ldr	r3, [r7, #32]
 800e7f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800e7fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3308      	adds	r3, #8
 800e804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e806:	633a      	str	r2, [r7, #48]	@ 0x30
 800e808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e80c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e5      	bne.n	800e7e6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e81c:	2220      	movs	r2, #32
 800e81e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e826:	2b01      	cmp	r3, #1
 800e828:	d118      	bne.n	800e85c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	e853 3f00 	ldrex	r3, [r3]
 800e836:	60fb      	str	r3, [r7, #12]
   return(result);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 0310 	bic.w	r3, r3, #16
 800e83e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	461a      	mov	r2, r3
 800e846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e848:	61fb      	str	r3, [r7, #28]
 800e84a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84c:	69b9      	ldr	r1, [r7, #24]
 800e84e:	69fa      	ldr	r2, [r7, #28]
 800e850:	e841 2300 	strex	r3, r2, [r1]
 800e854:	617b      	str	r3, [r7, #20]
   return(result);
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1e6      	bne.n	800e82a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e85c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e85e:	2200      	movs	r2, #0
 800e860:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e866:	2b01      	cmp	r3, #1
 800e868:	d107      	bne.n	800e87a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e86a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e870:	4619      	mov	r1, r3
 800e872:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e874:	f7fe fef8 	bl	800d668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e878:	e002      	b.n	800e880 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e87a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e87c:	f7fe fed6 	bl	800d62c <HAL_UART_RxCpltCallback>
}
 800e880:	bf00      	nop
 800e882:	3770      	adds	r7, #112	@ 0x70
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e894:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d109      	bne.n	800e8b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e8aa:	085b      	lsrs	r3, r3, #1
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7fe fed9 	bl	800d668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e8b6:	e002      	b.n	800e8be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f7fe fec1 	bl	800d640 <HAL_UART_RxHalfCpltCallback>
}
 800e8be:	bf00      	nop
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b086      	sub	sp, #24
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8ee:	2b80      	cmp	r3, #128	@ 0x80
 800e8f0:	d109      	bne.n	800e906 <UART_DMAError+0x40>
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	2b21      	cmp	r3, #33	@ 0x21
 800e8f6:	d106      	bne.n	800e906 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e900:	6978      	ldr	r0, [r7, #20]
 800e902:	f7ff fe85 	bl	800e610 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e910:	2b40      	cmp	r3, #64	@ 0x40
 800e912:	d109      	bne.n	800e928 <UART_DMAError+0x62>
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b22      	cmp	r3, #34	@ 0x22
 800e918:	d106      	bne.n	800e928 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e922:	6978      	ldr	r0, [r7, #20]
 800e924:	f7ff feb6 	bl	800e694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e92e:	f043 0210 	orr.w	r2, r3, #16
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e938:	6978      	ldr	r0, [r7, #20]
 800e93a:	f7fe fe8b 	bl	800d654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e93e:	bf00      	nop
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b084      	sub	sp, #16
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fe fe79 	bl	800d654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b088      	sub	sp, #32
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	e853 3f00 	ldrex	r3, [r3]
 800e97e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	461a      	mov	r2, r3
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	61bb      	str	r3, [r7, #24]
 800e992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	6979      	ldr	r1, [r7, #20]
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	613b      	str	r3, [r7, #16]
   return(result);
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e6      	bne.n	800e972 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fe fe30 	bl	800d618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9b8:	bf00      	nop
 800e9ba:	3720      	adds	r7, #32
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d101      	bne.n	800ea12 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e027      	b.n	800ea62 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2224      	movs	r2, #36	@ 0x24
 800ea1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f022 0201 	bic.w	r2, r2, #1
 800ea38:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ea40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2220      	movs	r2, #32
 800ea54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d101      	bne.n	800ea86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea82:	2302      	movs	r3, #2
 800ea84:	e02d      	b.n	800eae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2224      	movs	r2, #36	@ 0x24
 800ea92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0201 	bic.w	r2, r2, #1
 800eaac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f850 	bl	800eb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b084      	sub	sp, #16
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d101      	bne.n	800eb02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eafe:	2302      	movs	r3, #2
 800eb00:	e02d      	b.n	800eb5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2224      	movs	r2, #36	@ 0x24
 800eb0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f022 0201 	bic.w	r2, r2, #1
 800eb28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	430a      	orrs	r2, r1
 800eb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f812 	bl	800eb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2220      	movs	r2, #32
 800eb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d108      	bne.n	800eb8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb88:	e031      	b.n	800ebee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb8a:	2310      	movs	r3, #16
 800eb8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb8e:	2310      	movs	r3, #16
 800eb90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	0e5b      	lsrs	r3, r3, #25
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	f003 0307 	and.w	r3, r3, #7
 800eba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	0f5b      	lsrs	r3, r3, #29
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	f003 0307 	and.w	r3, r3, #7
 800ebb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebb2:	7bbb      	ldrb	r3, [r7, #14]
 800ebb4:	7b3a      	ldrb	r2, [r7, #12]
 800ebb6:	4911      	ldr	r1, [pc, #68]	@ (800ebfc <UARTEx_SetNbDataToProcess+0x94>)
 800ebb8:	5c8a      	ldrb	r2, [r1, r2]
 800ebba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebbe:	7b3a      	ldrb	r2, [r7, #12]
 800ebc0:	490f      	ldr	r1, [pc, #60]	@ (800ec00 <UARTEx_SetNbDataToProcess+0x98>)
 800ebc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
 800ebd2:	7b7a      	ldrb	r2, [r7, #13]
 800ebd4:	4909      	ldr	r1, [pc, #36]	@ (800ebfc <UARTEx_SetNbDataToProcess+0x94>)
 800ebd6:	5c8a      	ldrb	r2, [r1, r2]
 800ebd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebdc:	7b7a      	ldrb	r2, [r7, #13]
 800ebde:	4908      	ldr	r1, [pc, #32]	@ (800ec00 <UARTEx_SetNbDataToProcess+0x98>)
 800ebe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ebee:	bf00      	nop
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	0801b3b4 	.word	0x0801b3b4
 800ec00:	0801b3bc 	.word	0x0801b3bc

0800ec04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ec04:	b084      	sub	sp, #16
 800ec06:	b480      	push	{r7}
 800ec08:	b085      	sub	sp, #20
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	f107 001c 	add.w	r0, r7, #28
 800ec12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ec1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ec1e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ec20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ec22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ec24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ec26:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ec28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ec2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	4b07      	ldr	r3, [pc, #28]	@ (800ec54 <SDMMC_Init+0x50>)
 800ec38:	4013      	ands	r3, r2
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	b004      	add	sp, #16
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	ffc02c00 	.word	0xffc02c00

0800ec58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	370c      	adds	r7, #12
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b083      	sub	sp, #12
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f043 0203 	orr.w	r2, r3, #3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	370c      	adds	r7, #12
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	b083      	sub	sp, #12
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f003 0303 	and.w	r3, r3, #3
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
	...

0800ecd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ecf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ecf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ecfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	4b06      	ldr	r3, [pc, #24]	@ (800ed24 <SDMMC_SendCommand+0x50>)
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	431a      	orrs	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr
 800ed24:	fffee0c0 	.word	0xfffee0c0

0800ed28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	b2db      	uxtb	r3, r3
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b085      	sub	sp, #20
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3314      	adds	r3, #20
 800ed50:	461a      	mov	r2, r3
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	4413      	add	r3, r2
 800ed56:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed8e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ed94:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ed9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	431a      	orrs	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800edb2:	2300      	movs	r3, #0

}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b088      	sub	sp, #32
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800edce:	2310      	movs	r3, #16
 800edd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800edd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ede0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ede2:	f107 0308 	add.w	r3, r7, #8
 800ede6:	4619      	mov	r1, r3
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff ff73 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800edee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edf2:	2110      	movs	r1, #16
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fa5f 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800edfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edfc:	69fb      	ldr	r3, [r7, #28]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3720      	adds	r7, #32
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b088      	sub	sp, #32
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ee14:	2311      	movs	r3, #17
 800ee16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee28:	f107 0308 	add.w	r3, r7, #8
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7ff ff50 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ee34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee38:	2111      	movs	r1, #17
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fa3c 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800ee40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee42:	69fb      	ldr	r3, [r7, #28]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3720      	adds	r7, #32
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ee5a:	2312      	movs	r3, #18
 800ee5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee64:	2300      	movs	r3, #0
 800ee66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee6e:	f107 0308 	add.w	r3, r7, #8
 800ee72:	4619      	mov	r1, r3
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f7ff ff2d 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ee7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee7e:	2112      	movs	r1, #18
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fa19 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800ee86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee88:	69fb      	ldr	r3, [r7, #28]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3720      	adds	r7, #32
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b088      	sub	sp, #32
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eea0:	2318      	movs	r3, #24
 800eea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eeb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeb4:	f107 0308 	add.w	r3, r7, #8
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff ff0a 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eec4:	2118      	movs	r1, #24
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f9f6 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800eecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eece:	69fb      	ldr	r3, [r7, #28]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800eee6:	2319      	movs	r3, #25
 800eee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eeea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eefa:	f107 0308 	add.w	r3, r7, #8
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff fee7 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ef06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef0a:	2119      	movs	r1, #25
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f9d3 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800ef12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef14:	69fb      	ldr	r3, [r7, #28]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ef2c:	230c      	movs	r3, #12
 800ef2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef36:	2300      	movs	r3, #0
 800ef38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef3e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef58:	f107 0308 	add.w	r3, r7, #8
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff feb8 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ef64:	4a0b      	ldr	r2, [pc, #44]	@ (800ef94 <SDMMC_CmdStopTransfer+0x74>)
 800ef66:	210c      	movs	r1, #12
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f9a5 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800ef6e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef82:	d101      	bne.n	800ef88 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ef84:	2300      	movs	r3, #0
 800ef86:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ef88:	69fb      	ldr	r3, [r7, #28]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	05f5e100 	.word	0x05f5e100

0800ef98 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800efa6:	2307      	movs	r3, #7
 800efa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efb0:	2300      	movs	r3, #0
 800efb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800efb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efba:	f107 0308 	add.w	r3, r7, #8
 800efbe:	4619      	mov	r1, r3
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fe87 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800efc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efca:	2107      	movs	r1, #7
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f973 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800efd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efd4:	69fb      	ldr	r3, [r7, #28]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3720      	adds	r7, #32
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b088      	sub	sp, #32
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800efea:	2300      	movs	r3, #0
 800efec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800efee:	2300      	movs	r3, #0
 800eff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eff2:	2300      	movs	r3, #0
 800eff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800effa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800effc:	f107 0308 	add.w	r3, r7, #8
 800f000:	4619      	mov	r1, r3
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff fe66 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fb97 	bl	800f73c <SDMMC_GetCmdError>
 800f00e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f010:	69fb      	ldr	r3, [r7, #28]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3720      	adds	r7, #32
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b088      	sub	sp, #32
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f022:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f028:	2308      	movs	r3, #8
 800f02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f02c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f032:	2300      	movs	r3, #0
 800f034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff fe46 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 fb29 	bl	800f6a0 <SDMMC_GetCmdResp7>
 800f04e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f050:	69fb      	ldr	r3, [r7, #28]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3720      	adds	r7, #32
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b088      	sub	sp, #32
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f068:	2337      	movs	r3, #55	@ 0x37
 800f06a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f06c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f072:	2300      	movs	r3, #0
 800f074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f07a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f07c:	f107 0308 	add.w	r3, r7, #8
 800f080:	4619      	mov	r1, r3
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff fe26 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f08c:	2137      	movs	r1, #55	@ 0x37
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f912 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800f094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f096:	69fb      	ldr	r3, [r7, #28]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b088      	sub	sp, #32
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f0ae:	2329      	movs	r3, #41	@ 0x29
 800f0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff fe03 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 fa2e 	bl	800f530 <SDMMC_GetCmdResp3>
 800f0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0d6:	69fb      	ldr	r3, [r7, #28]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3720      	adds	r7, #32
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b088      	sub	sp, #32
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f0ee:	2306      	movs	r3, #6
 800f0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f102:	f107 0308 	add.w	r3, r7, #8
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff fde3 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f10e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f112:	2106      	movs	r1, #6
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f8cf 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800f11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f11c:	69fb      	ldr	r3, [r7, #28]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b088      	sub	sp, #32
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f12e:	2300      	movs	r3, #0
 800f130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f132:	2333      	movs	r3, #51	@ 0x33
 800f134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f13c:	2300      	movs	r3, #0
 800f13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f146:	f107 0308 	add.w	r3, r7, #8
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff fdc1 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f152:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f156:	2133      	movs	r1, #51	@ 0x33
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f8ad 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800f15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f160:	69fb      	ldr	r3, [r7, #28]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3720      	adds	r7, #32
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b088      	sub	sp, #32
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f176:	2302      	movs	r3, #2
 800f178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f17a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f180:	2300      	movs	r3, #0
 800f182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f18a:	f107 0308 	add.w	r3, r7, #8
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff fd9f 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f980 	bl	800f49c <SDMMC_GetCmdResp2>
 800f19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f19e:	69fb      	ldr	r3, [r7, #28]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f1b6:	2309      	movs	r3, #9
 800f1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f1ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1ca:	f107 0308 	add.w	r3, r7, #8
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff fd7f 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f960 	bl	800f49c <SDMMC_GetCmdResp2>
 800f1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1de:	69fb      	ldr	r3, [r7, #28]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3720      	adds	r7, #32
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f1f6:	2303      	movs	r3, #3
 800f1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f200:	2300      	movs	r3, #0
 800f202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f20a:	f107 0308 	add.w	r3, r7, #8
 800f20e:	4619      	mov	r1, r3
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff fd5f 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f216:	683a      	ldr	r2, [r7, #0]
 800f218:	2103      	movs	r1, #3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f9c8 	bl	800f5b0 <SDMMC_GetCmdResp6>
 800f220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f222:	69fb      	ldr	r3, [r7, #28]
}
 800f224:	4618      	mov	r0, r3
 800f226:	3720      	adds	r7, #32
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f23a:	230d      	movs	r3, #13
 800f23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f23e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f244:	2300      	movs	r3, #0
 800f246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f24c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f24e:	f107 0308 	add.w	r3, r7, #8
 800f252:	4619      	mov	r1, r3
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff fd3d 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f25a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f25e:	210d      	movs	r1, #13
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f829 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800f266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f268:	69fb      	ldr	r3, [r7, #28]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3720      	adds	r7, #32
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b088      	sub	sp, #32
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f27a:	2300      	movs	r3, #0
 800f27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f27e:	230d      	movs	r3, #13
 800f280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f28c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f292:	f107 0308 	add.w	r3, r7, #8
 800f296:	4619      	mov	r1, r3
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fd1b 	bl	800ecd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f29e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2a2:	210d      	movs	r1, #13
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f807 	bl	800f2b8 <SDMMC_GetCmdResp1>
 800f2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2ac:	69fb      	ldr	r3, [r7, #28]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3720      	adds	r7, #32
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b088      	sub	sp, #32
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	607a      	str	r2, [r7, #4]
 800f2c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f2c6:	4b70      	ldr	r3, [pc, #448]	@ (800f488 <SDMMC_GetCmdResp1+0x1d0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a70      	ldr	r2, [pc, #448]	@ (800f48c <SDMMC_GetCmdResp1+0x1d4>)
 800f2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d0:	0a5a      	lsrs	r2, r3, #9
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	fb02 f303 	mul.w	r3, r2, r3
 800f2d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	1e5a      	subs	r2, r3, #1
 800f2de:	61fa      	str	r2, [r7, #28]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d102      	bne.n	800f2ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f2e8:	e0c9      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f2f0:	69ba      	ldr	r2, [r7, #24]
 800f2f2:	4b67      	ldr	r3, [pc, #412]	@ (800f490 <SDMMC_GetCmdResp1+0x1d8>)
 800f2f4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d0ef      	beq.n	800f2da <SDMMC_GetCmdResp1+0x22>
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1ea      	bne.n	800f2da <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f308:	f003 0304 	and.w	r3, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d004      	beq.n	800f31a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2204      	movs	r2, #4
 800f314:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f316:	2304      	movs	r3, #4
 800f318:	e0b1      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f31e:	f003 0301 	and.w	r3, r3, #1
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2201      	movs	r2, #1
 800f32a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e0a6      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4a58      	ldr	r2, [pc, #352]	@ (800f494 <SDMMC_GetCmdResp1+0x1dc>)
 800f334:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7ff fcf6 	bl	800ed28 <SDMMC_GetCommandResponse>
 800f33c:	4603      	mov	r3, r0
 800f33e:	461a      	mov	r2, r3
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	4293      	cmp	r3, r2
 800f344:	d001      	beq.n	800f34a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f346:	2301      	movs	r3, #1
 800f348:	e099      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f34a:	2100      	movs	r1, #0
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f7ff fcf8 	bl	800ed42 <SDMMC_GetResponse>
 800f352:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4b50      	ldr	r3, [pc, #320]	@ (800f498 <SDMMC_GetCmdResp1+0x1e0>)
 800f358:	4013      	ands	r3, r2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d101      	bne.n	800f362 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f35e:	2300      	movs	r3, #0
 800f360:	e08d      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	da02      	bge.n	800f36e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f368:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f36c:	e087      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f378:	2340      	movs	r3, #64	@ 0x40
 800f37a:	e080      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f386:	2380      	movs	r3, #128	@ 0x80
 800f388:	e079      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f398:	e071      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f3a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f3a8:	e069      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f3b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3b8:	e061      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d002      	beq.n	800f3ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f3c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f3c8:	e059      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f3d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f3d8:	e051      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f3e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3e8:	e049      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f3f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f3f8:	e041      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f408:	e039      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f414:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f418:	e031      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d002      	beq.n	800f42a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f424:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f428:	e029      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f434:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f438:	e021      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f444:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f448:	e019      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f454:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f458:	e011      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f460:	2b00      	cmp	r3, #0
 800f462:	d002      	beq.n	800f46a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f464:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f468:	e009      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	f003 0308 	and.w	r3, r3, #8
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f474:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f478:	e001      	b.n	800f47e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f47a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3720      	adds	r7, #32
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	24000008 	.word	0x24000008
 800f48c:	10624dd3 	.word	0x10624dd3
 800f490:	00200045 	.word	0x00200045
 800f494:	002000c5 	.word	0x002000c5
 800f498:	fdffe008 	.word	0xfdffe008

0800f49c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f4a4:	4b1f      	ldr	r3, [pc, #124]	@ (800f524 <SDMMC_GetCmdResp2+0x88>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a1f      	ldr	r2, [pc, #124]	@ (800f528 <SDMMC_GetCmdResp2+0x8c>)
 800f4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ae:	0a5b      	lsrs	r3, r3, #9
 800f4b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4b4:	fb02 f303 	mul.w	r3, r2, r3
 800f4b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	1e5a      	subs	r2, r3, #1
 800f4be:	60fa      	str	r2, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d102      	bne.n	800f4ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f4c8:	e026      	b.n	800f518 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d0ef      	beq.n	800f4ba <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1ea      	bne.n	800f4ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4e8:	f003 0304 	and.w	r3, r3, #4
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d004      	beq.n	800f4fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4f6:	2304      	movs	r3, #4
 800f4f8:	e00e      	b.n	800f518 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d004      	beq.n	800f510 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f50c:	2301      	movs	r3, #1
 800f50e:	e003      	b.n	800f518 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a06      	ldr	r2, [pc, #24]	@ (800f52c <SDMMC_GetCmdResp2+0x90>)
 800f514:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3714      	adds	r7, #20
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	24000008 	.word	0x24000008
 800f528:	10624dd3 	.word	0x10624dd3
 800f52c:	002000c5 	.word	0x002000c5

0800f530 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f538:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a4 <SDMMC_GetCmdResp3+0x74>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a1a      	ldr	r2, [pc, #104]	@ (800f5a8 <SDMMC_GetCmdResp3+0x78>)
 800f53e:	fba2 2303 	umull	r2, r3, r2, r3
 800f542:	0a5b      	lsrs	r3, r3, #9
 800f544:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f548:	fb02 f303 	mul.w	r3, r2, r3
 800f54c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	1e5a      	subs	r2, r3, #1
 800f552:	60fa      	str	r2, [r7, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d102      	bne.n	800f55e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f558:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f55c:	e01b      	b.n	800f596 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f562:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0ef      	beq.n	800f54e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1ea      	bne.n	800f54e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f57c:	f003 0304 	and.w	r3, r3, #4
 800f580:	2b00      	cmp	r3, #0
 800f582:	d004      	beq.n	800f58e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2204      	movs	r2, #4
 800f588:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f58a:	2304      	movs	r3, #4
 800f58c:	e003      	b.n	800f596 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a06      	ldr	r2, [pc, #24]	@ (800f5ac <SDMMC_GetCmdResp3+0x7c>)
 800f592:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	24000008 	.word	0x24000008
 800f5a8:	10624dd3 	.word	0x10624dd3
 800f5ac:	002000c5 	.word	0x002000c5

0800f5b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b088      	sub	sp, #32
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	607a      	str	r2, [r7, #4]
 800f5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f5be:	4b35      	ldr	r3, [pc, #212]	@ (800f694 <SDMMC_GetCmdResp6+0xe4>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a35      	ldr	r2, [pc, #212]	@ (800f698 <SDMMC_GetCmdResp6+0xe8>)
 800f5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c8:	0a5b      	lsrs	r3, r3, #9
 800f5ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5ce:	fb02 f303 	mul.w	r3, r2, r3
 800f5d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	1e5a      	subs	r2, r3, #1
 800f5d8:	61fa      	str	r2, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d102      	bne.n	800f5e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f5e2:	e052      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5e8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d0ef      	beq.n	800f5d4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1ea      	bne.n	800f5d4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f602:	f003 0304 	and.w	r3, r3, #4
 800f606:	2b00      	cmp	r3, #0
 800f608:	d004      	beq.n	800f614 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2204      	movs	r2, #4
 800f60e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f610:	2304      	movs	r3, #4
 800f612:	e03a      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d004      	beq.n	800f62a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2201      	movs	r2, #1
 800f624:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f626:	2301      	movs	r3, #1
 800f628:	e02f      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f7ff fb7c 	bl	800ed28 <SDMMC_GetCommandResponse>
 800f630:	4603      	mov	r3, r0
 800f632:	461a      	mov	r2, r3
 800f634:	7afb      	ldrb	r3, [r7, #11]
 800f636:	4293      	cmp	r3, r2
 800f638:	d001      	beq.n	800f63e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e025      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	4a16      	ldr	r2, [pc, #88]	@ (800f69c <SDMMC_GetCmdResp6+0xec>)
 800f642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f644:	2100      	movs	r1, #0
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f7ff fb7b 	bl	800ed42 <SDMMC_GetResponse>
 800f64c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f654:	2b00      	cmp	r3, #0
 800f656:	d106      	bne.n	800f666 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	0c1b      	lsrs	r3, r3, #16
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f662:	2300      	movs	r3, #0
 800f664:	e011      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f674:	e009      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f684:	e001      	b.n	800f68a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3720      	adds	r7, #32
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	24000008 	.word	0x24000008
 800f698:	10624dd3 	.word	0x10624dd3
 800f69c:	002000c5 	.word	0x002000c5

0800f6a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f6a8:	4b22      	ldr	r3, [pc, #136]	@ (800f734 <SDMMC_GetCmdResp7+0x94>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a22      	ldr	r2, [pc, #136]	@ (800f738 <SDMMC_GetCmdResp7+0x98>)
 800f6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f6b2:	0a5b      	lsrs	r3, r3, #9
 800f6b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6b8:	fb02 f303 	mul.w	r3, r2, r3
 800f6bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	1e5a      	subs	r2, r3, #1
 800f6c2:	60fa      	str	r2, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d102      	bne.n	800f6ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f6c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f6cc:	e02c      	b.n	800f728 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0ef      	beq.n	800f6be <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1ea      	bne.n	800f6be <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6ec:	f003 0304 	and.w	r3, r3, #4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d004      	beq.n	800f6fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2204      	movs	r2, #4
 800f6f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	e014      	b.n	800f728 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f702:	f003 0301 	and.w	r3, r3, #1
 800f706:	2b00      	cmp	r3, #0
 800f708:	d004      	beq.n	800f714 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2201      	movs	r2, #1
 800f70e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f710:	2301      	movs	r3, #1
 800f712:	e009      	b.n	800f728 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2240      	movs	r2, #64	@ 0x40
 800f724:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f726:	2300      	movs	r3, #0

}
 800f728:	4618      	mov	r0, r3
 800f72a:	3714      	adds	r7, #20
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr
 800f734:	24000008 	.word	0x24000008
 800f738:	10624dd3 	.word	0x10624dd3

0800f73c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f744:	4b11      	ldr	r3, [pc, #68]	@ (800f78c <SDMMC_GetCmdError+0x50>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a11      	ldr	r2, [pc, #68]	@ (800f790 <SDMMC_GetCmdError+0x54>)
 800f74a:	fba2 2303 	umull	r2, r3, r2, r3
 800f74e:	0a5b      	lsrs	r3, r3, #9
 800f750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f754:	fb02 f303 	mul.w	r3, r2, r3
 800f758:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	1e5a      	subs	r2, r3, #1
 800f75e:	60fa      	str	r2, [r7, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d102      	bne.n	800f76a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f768:	e009      	b.n	800f77e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f772:	2b00      	cmp	r3, #0
 800f774:	d0f1      	beq.n	800f75a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a06      	ldr	r2, [pc, #24]	@ (800f794 <SDMMC_GetCmdError+0x58>)
 800f77a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	24000008 	.word	0x24000008
 800f790:	10624dd3 	.word	0x10624dd3
 800f794:	002000c5 	.word	0x002000c5

0800f798 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f79c:	4904      	ldr	r1, [pc, #16]	@ (800f7b0 <MX_FATFS_Init+0x18>)
 800f79e:	4805      	ldr	r0, [pc, #20]	@ (800f7b4 <MX_FATFS_Init+0x1c>)
 800f7a0:	f005 fcfc 	bl	801519c <FATFS_LinkDriver>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	4b03      	ldr	r3, [pc, #12]	@ (800f7b8 <MX_FATFS_Init+0x20>)
 800f7aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f7ac:	bf00      	nop
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	24001984 	.word	0x24001984
 800f7b4:	0801b3c4 	.word	0x0801b3c4
 800f7b8:	24001980 	.word	0x24001980

0800f7bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f7c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f7d6:	f000 f885 	bl	800f8e4 <BSP_SD_IsDetected>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d001      	beq.n	800f7e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	e012      	b.n	800f80a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f7e4:	480b      	ldr	r0, [pc, #44]	@ (800f814 <BSP_SD_Init+0x48>)
 800f7e6:	f7fa f8e9 	bl	80099bc <HAL_SD_Init>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f7ee:	79fb      	ldrb	r3, [r7, #7]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d109      	bne.n	800f808 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f7f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f7f8:	4806      	ldr	r0, [pc, #24]	@ (800f814 <BSP_SD_Init+0x48>)
 800f7fa:	f7fa ff9f 	bl	800a73c <HAL_SD_ConfigWideBusOperation>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d001      	beq.n	800f808 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f804:	2301      	movs	r3, #1
 800f806:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f808:	79fb      	ldrb	r3, [r7, #7]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	240013c8 	.word	0x240013c8

0800f818 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f824:	2300      	movs	r3, #0
 800f826:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	68f9      	ldr	r1, [r7, #12]
 800f82e:	4806      	ldr	r0, [pc, #24]	@ (800f848 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f830:	f7fa f9e4 	bl	8009bfc <HAL_SD_ReadBlocks_DMA>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d001      	beq.n	800f83e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3718      	adds	r7, #24
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	240013c8 	.word	0x240013c8

0800f84c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	68f9      	ldr	r1, [r7, #12]
 800f862:	4806      	ldr	r0, [pc, #24]	@ (800f87c <BSP_SD_WriteBlocks_DMA+0x30>)
 800f864:	f7fa fa72 	bl	8009d4c <HAL_SD_WriteBlocks_DMA>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f86e:	2301      	movs	r3, #1
 800f870:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f872:	7dfb      	ldrb	r3, [r7, #23]
}
 800f874:	4618      	mov	r0, r3
 800f876:	3718      	adds	r7, #24
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	240013c8 	.word	0x240013c8

0800f880 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f884:	4805      	ldr	r0, [pc, #20]	@ (800f89c <BSP_SD_GetCardState+0x1c>)
 800f886:	f7fb f86b 	bl	800a960 <HAL_SD_GetCardState>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b04      	cmp	r3, #4
 800f88e:	bf14      	ite	ne
 800f890:	2301      	movne	r3, #1
 800f892:	2300      	moveq	r3, #0
 800f894:	b2db      	uxtb	r3, r3
}
 800f896:	4618      	mov	r0, r3
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	240013c8 	.word	0x240013c8

0800f8a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	4803      	ldr	r0, [pc, #12]	@ (800f8b8 <BSP_SD_GetCardInfo+0x18>)
 800f8ac:	f7fa ff1a 	bl	800a6e4 <HAL_SD_GetCardInfo>
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	240013c8 	.word	0x240013c8

0800f8bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f8c4:	f000 f9ac 	bl	800fc20 <BSP_SD_WriteCpltCallback>
}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f8d8:	f000 f9b4 	bl	800fc44 <BSP_SD_ReadCpltCallback>
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f8ee:	f000 f80b 	bl	800f908 <BSP_PlatformIsDetected>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	b2db      	uxtb	r3, r3
}
 800f900:	4618      	mov	r0, r3
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f90e:	2301      	movs	r3, #1
 800f910:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f912:	2120      	movs	r1, #32
 800f914:	4806      	ldr	r0, [pc, #24]	@ (800f930 <BSP_PlatformIsDetected+0x28>)
 800f916:	f7f6 fa8b 	bl	8005e30 <HAL_GPIO_ReadPin>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f920:	2300      	movs	r3, #0
 800f922:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f924:	79fb      	ldrb	r3, [r7, #7]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	58020400 	.word	0x58020400

0800f934 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f93c:	f005 fe12 	bl	8015564 <osKernelGetTickCount>
 800f940:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f942:	e006      	b.n	800f952 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f944:	f7ff ff9c 	bl	800f880 <BSP_SD_GetCardState>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	e009      	b.n	800f966 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f952:	f005 fe07 	bl	8015564 <osKernelGetTickCount>
 800f956:	4602      	mov	r2, r0
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d8f0      	bhi.n	800f944 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f962:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f966:	4618      	mov	r0, r3
 800f968:	3710      	adds	r7, #16
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
	...

0800f970 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	4603      	mov	r3, r0
 800f978:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f97a:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a8 <SD_CheckStatus+0x38>)
 800f97c:	2201      	movs	r2, #1
 800f97e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f980:	f7ff ff7e 	bl	800f880 <BSP_SD_GetCardState>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d107      	bne.n	800f99a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f98a:	4b07      	ldr	r3, [pc, #28]	@ (800f9a8 <SD_CheckStatus+0x38>)
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	f023 0301 	bic.w	r3, r3, #1
 800f994:	b2da      	uxtb	r2, r3
 800f996:	4b04      	ldr	r3, [pc, #16]	@ (800f9a8 <SD_CheckStatus+0x38>)
 800f998:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f99a:	4b03      	ldr	r3, [pc, #12]	@ (800f9a8 <SD_CheckStatus+0x38>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	b2db      	uxtb	r3, r3
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	24000015 	.word	0x24000015

0800f9ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f9b6:	4b1c      	ldr	r3, [pc, #112]	@ (800fa28 <SD_initialize+0x7c>)
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f9bc:	f005 fd8a 	bl	80154d4 <osKernelGetState>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b02      	cmp	r3, #2
 800f9c4:	d129      	bne.n	800fa1a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f9c6:	f7ff ff01 	bl	800f7cc <BSP_SD_Init>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d107      	bne.n	800f9e0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f9d0:	79fb      	ldrb	r3, [r7, #7]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff ffcc 	bl	800f970 <SD_CheckStatus>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	461a      	mov	r2, r3
 800f9dc:	4b12      	ldr	r3, [pc, #72]	@ (800fa28 <SD_initialize+0x7c>)
 800f9de:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f9e0:	4b11      	ldr	r3, [pc, #68]	@ (800fa28 <SD_initialize+0x7c>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d017      	beq.n	800fa1a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f9ea:	4b10      	ldr	r3, [pc, #64]	@ (800fa2c <SD_initialize+0x80>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	2102      	movs	r1, #2
 800f9f6:	200a      	movs	r0, #10
 800f9f8:	f005 fff2 	bl	80159e0 <osMessageQueueNew>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	4a0b      	ldr	r2, [pc, #44]	@ (800fa2c <SD_initialize+0x80>)
 800fa00:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800fa02:	4b0a      	ldr	r3, [pc, #40]	@ (800fa2c <SD_initialize+0x80>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d107      	bne.n	800fa1a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800fa0a:	4b07      	ldr	r3, [pc, #28]	@ (800fa28 <SD_initialize+0x7c>)
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	f043 0301 	orr.w	r3, r3, #1
 800fa14:	b2da      	uxtb	r2, r3
 800fa16:	4b04      	ldr	r3, [pc, #16]	@ (800fa28 <SD_initialize+0x7c>)
 800fa18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800fa1a:	4b03      	ldr	r3, [pc, #12]	@ (800fa28 <SD_initialize+0x7c>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	b2db      	uxtb	r3, r3
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	24000015 	.word	0x24000015
 800fa2c:	24001bc4 	.word	0x24001bc4

0800fa30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4603      	mov	r3, r0
 800fa38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff ff97 	bl	800f970 <SD_CheckStatus>
 800fa42:	4603      	mov	r3, r0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b088      	sub	sp, #32
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60b9      	str	r1, [r7, #8]
 800fa54:	607a      	str	r2, [r7, #4]
 800fa56:	603b      	str	r3, [r7, #0]
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fa60:	f247 5030 	movw	r0, #30000	@ 0x7530
 800fa64:	f7ff ff66 	bl	800f934 <SD_CheckStatusWithTimeout>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	da01      	bge.n	800fa72 <SD_read+0x26>
  {
    return res;
 800fa6e:	7ffb      	ldrb	r3, [r7, #31]
 800fa70:	e02f      	b.n	800fad2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	68b8      	ldr	r0, [r7, #8]
 800fa78:	f7ff fece 	bl	800f818 <BSP_SD_ReadBlocks_DMA>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800fa80:	7fbb      	ldrb	r3, [r7, #30]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d124      	bne.n	800fad0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fa86:	4b15      	ldr	r3, [pc, #84]	@ (800fadc <SD_read+0x90>)
 800fa88:	6818      	ldr	r0, [r3, #0]
 800fa8a:	f107 0112 	add.w	r1, r7, #18
 800fa8e:	f247 5330 	movw	r3, #30000	@ 0x7530
 800fa92:	2200      	movs	r2, #0
 800fa94:	f006 f878 	bl	8015b88 <osMessageQueueGet>
 800fa98:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d117      	bne.n	800fad0 <SD_read+0x84>
 800faa0:	8a7b      	ldrh	r3, [r7, #18]
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d114      	bne.n	800fad0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800faa6:	f005 fd5d 	bl	8015564 <osKernelGetTickCount>
 800faaa:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800faac:	e007      	b.n	800fabe <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800faae:	f7ff fee7 	bl	800f880 <BSP_SD_GetCardState>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d102      	bne.n	800fabe <SD_read+0x72>
              {
                res = RES_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800fabc:	e008      	b.n	800fad0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800fabe:	f005 fd51 	bl	8015564 <osKernelGetTickCount>
 800fac2:	4602      	mov	r2, r0
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800facc:	4293      	cmp	r3, r2
 800face:	d9ee      	bls.n	800faae <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800fad0:	7ffb      	ldrb	r3, [r7, #31]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3720      	adds	r7, #32
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	24001bc4 	.word	0x24001bc4

0800fae0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b088      	sub	sp, #32
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	607a      	str	r2, [r7, #4]
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800faf4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800faf8:	f7ff ff1c 	bl	800f934 <SD_CheckStatusWithTimeout>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	da01      	bge.n	800fb06 <SD_write+0x26>
  {
    return res;
 800fb02:	7ffb      	ldrb	r3, [r7, #31]
 800fb04:	e02d      	b.n	800fb62 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	68b8      	ldr	r0, [r7, #8]
 800fb0c:	f7ff fe9e 	bl	800f84c <BSP_SD_WriteBlocks_DMA>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d124      	bne.n	800fb60 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fb16:	4b15      	ldr	r3, [pc, #84]	@ (800fb6c <SD_write+0x8c>)
 800fb18:	6818      	ldr	r0, [r3, #0]
 800fb1a:	f107 0112 	add.w	r1, r7, #18
 800fb1e:	f247 5330 	movw	r3, #30000	@ 0x7530
 800fb22:	2200      	movs	r2, #0
 800fb24:	f006 f830 	bl	8015b88 <osMessageQueueGet>
 800fb28:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d117      	bne.n	800fb60 <SD_write+0x80>
 800fb30:	8a7b      	ldrh	r3, [r7, #18]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d114      	bne.n	800fb60 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800fb36:	f005 fd15 	bl	8015564 <osKernelGetTickCount>
 800fb3a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fb3c:	e007      	b.n	800fb4e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fb3e:	f7ff fe9f 	bl	800f880 <BSP_SD_GetCardState>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d102      	bne.n	800fb4e <SD_write+0x6e>
          {
            res = RES_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	77fb      	strb	r3, [r7, #31]
            break;
 800fb4c:	e008      	b.n	800fb60 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fb4e:	f005 fd09 	bl	8015564 <osKernelGetTickCount>
 800fb52:	4602      	mov	r2, r0
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	f247 522f 	movw	r2, #29999	@ 0x752f
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d9ee      	bls.n	800fb3e <SD_write+0x5e>
        res = RES_OK;
    }

#endif

  return res;
 800fb60:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3720      	adds	r7, #32
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	24001bc4 	.word	0x24001bc4

0800fb70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b08c      	sub	sp, #48	@ 0x30
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	4603      	mov	r3, r0
 800fb78:	603a      	str	r2, [r7, #0]
 800fb7a:	71fb      	strb	r3, [r7, #7]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fb80:	2301      	movs	r3, #1
 800fb82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fb86:	4b25      	ldr	r3, [pc, #148]	@ (800fc1c <SD_ioctl+0xac>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <SD_ioctl+0x28>
 800fb94:	2303      	movs	r3, #3
 800fb96:	e03c      	b.n	800fc12 <SD_ioctl+0xa2>

  switch (cmd)
 800fb98:	79bb      	ldrb	r3, [r7, #6]
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d834      	bhi.n	800fc08 <SD_ioctl+0x98>
 800fb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800fba4 <SD_ioctl+0x34>)
 800fba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba4:	0800fbb5 	.word	0x0800fbb5
 800fba8:	0800fbbd 	.word	0x0800fbbd
 800fbac:	0800fbd5 	.word	0x0800fbd5
 800fbb0:	0800fbef 	.word	0x0800fbef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fbba:	e028      	b.n	800fc0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fbbc:	f107 0308 	add.w	r3, r7, #8
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7ff fe6d 	bl	800f8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fbc6:	6a3a      	ldr	r2, [r7, #32]
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fbd2:	e01c      	b.n	800fc0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fbd4:	f107 0308 	add.w	r3, r7, #8
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fe61 	bl	800f8a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fbec:	e00f      	b.n	800fc0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fbee:	f107 0308 	add.w	r3, r7, #8
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7ff fe54 	bl	800f8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfa:	0a5a      	lsrs	r2, r3, #9
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fc06:	e002      	b.n	800fc0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fc08:	2304      	movs	r3, #4
 800fc0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fc0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3730      	adds	r7, #48	@ 0x30
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	24000015 	.word	0x24000015

0800fc20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800fc26:	2302      	movs	r3, #2
 800fc28:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800fc2a:	4b05      	ldr	r3, [pc, #20]	@ (800fc40 <BSP_SD_WriteCpltCallback+0x20>)
 800fc2c:	6818      	ldr	r0, [r3, #0]
 800fc2e:	1db9      	adds	r1, r7, #6
 800fc30:	2300      	movs	r3, #0
 800fc32:	2200      	movs	r2, #0
 800fc34:	f005 ff48 	bl	8015ac8 <osMessageQueuePut>
#endif
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	24001bc4 	.word	0x24001bc4

0800fc44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800fc4e:	4b05      	ldr	r3, [pc, #20]	@ (800fc64 <BSP_SD_ReadCpltCallback+0x20>)
 800fc50:	6818      	ldr	r0, [r3, #0]
 800fc52:	1db9      	adds	r1, r7, #6
 800fc54:	2300      	movs	r3, #0
 800fc56:	2200      	movs	r2, #0
 800fc58:	f005 ff36 	bl	8015ac8 <osMessageQueuePut>
#endif
}
 800fc5c:	bf00      	nop
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	24001bc4 	.word	0x24001bc4

0800fc68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	4a08      	ldr	r2, [pc, #32]	@ (800fc98 <disk_status+0x30>)
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	79fa      	ldrb	r2, [r7, #7]
 800fc80:	4905      	ldr	r1, [pc, #20]	@ (800fc98 <disk_status+0x30>)
 800fc82:	440a      	add	r2, r1
 800fc84:	7a12      	ldrb	r2, [r2, #8]
 800fc86:	4610      	mov	r0, r2
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	24001bf0 	.word	0x24001bf0

0800fc9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	4603      	mov	r3, r0
 800fca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fca6:	2300      	movs	r3, #0
 800fca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fcaa:	79fb      	ldrb	r3, [r7, #7]
 800fcac:	4a0e      	ldr	r2, [pc, #56]	@ (800fce8 <disk_initialize+0x4c>)
 800fcae:	5cd3      	ldrb	r3, [r2, r3]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d114      	bne.n	800fcde <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	4a0c      	ldr	r2, [pc, #48]	@ (800fce8 <disk_initialize+0x4c>)
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	79fa      	ldrb	r2, [r7, #7]
 800fcc2:	4909      	ldr	r1, [pc, #36]	@ (800fce8 <disk_initialize+0x4c>)
 800fcc4:	440a      	add	r2, r1
 800fcc6:	7a12      	ldrb	r2, [r2, #8]
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d103      	bne.n	800fcde <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
 800fcd8:	4a03      	ldr	r2, [pc, #12]	@ (800fce8 <disk_initialize+0x4c>)
 800fcda:	2101      	movs	r1, #1
 800fcdc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	24001bf0 	.word	0x24001bf0

0800fcec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fcec:	b590      	push	{r4, r7, lr}
 800fcee:	b087      	sub	sp, #28
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60b9      	str	r1, [r7, #8]
 800fcf4:	607a      	str	r2, [r7, #4]
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
 800fcfe:	4a0a      	ldr	r2, [pc, #40]	@ (800fd28 <disk_read+0x3c>)
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	4413      	add	r3, r2
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	689c      	ldr	r4, [r3, #8]
 800fd08:	7bfb      	ldrb	r3, [r7, #15]
 800fd0a:	4a07      	ldr	r2, [pc, #28]	@ (800fd28 <disk_read+0x3c>)
 800fd0c:	4413      	add	r3, r2
 800fd0e:	7a18      	ldrb	r0, [r3, #8]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	68b9      	ldr	r1, [r7, #8]
 800fd16:	47a0      	blx	r4
 800fd18:	4603      	mov	r3, r0
 800fd1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	371c      	adds	r7, #28
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd90      	pop	{r4, r7, pc}
 800fd26:	bf00      	nop
 800fd28:	24001bf0 	.word	0x24001bf0

0800fd2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fd2c:	b590      	push	{r4, r7, lr}
 800fd2e:	b087      	sub	sp, #28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	607a      	str	r2, [r7, #4]
 800fd36:	603b      	str	r3, [r7, #0]
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
 800fd3e:	4a0a      	ldr	r2, [pc, #40]	@ (800fd68 <disk_write+0x3c>)
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4413      	add	r3, r2
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	68dc      	ldr	r4, [r3, #12]
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
 800fd4a:	4a07      	ldr	r2, [pc, #28]	@ (800fd68 <disk_write+0x3c>)
 800fd4c:	4413      	add	r3, r2
 800fd4e:	7a18      	ldrb	r0, [r3, #8]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	47a0      	blx	r4
 800fd58:	4603      	mov	r3, r0
 800fd5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	371c      	adds	r7, #28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd90      	pop	{r4, r7, pc}
 800fd66:	bf00      	nop
 800fd68:	24001bf0 	.word	0x24001bf0

0800fd6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	603a      	str	r2, [r7, #0]
 800fd76:	71fb      	strb	r3, [r7, #7]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	4a09      	ldr	r2, [pc, #36]	@ (800fda4 <disk_ioctl+0x38>)
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4413      	add	r3, r2
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	79fa      	ldrb	r2, [r7, #7]
 800fd8a:	4906      	ldr	r1, [pc, #24]	@ (800fda4 <disk_ioctl+0x38>)
 800fd8c:	440a      	add	r2, r1
 800fd8e:	7a10      	ldrb	r0, [r2, #8]
 800fd90:	79b9      	ldrb	r1, [r7, #6]
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	4798      	blx	r3
 800fd96:	4603      	mov	r3, r0
 800fd98:	73fb      	strb	r3, [r7, #15]
  return res;
 800fd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	24001bf0 	.word	0x24001bf0

0800fda8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fdb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fdbc:	021b      	lsls	r3, r3, #8
 800fdbe:	b21a      	sxth	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	b21b      	sxth	r3, r3
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	b21b      	sxth	r3, r3
 800fdca:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fdcc:	89fb      	ldrh	r3, [r7, #14]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3714      	adds	r7, #20
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fdda:	b480      	push	{r7}
 800fddc:	b085      	sub	sp, #20
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3303      	adds	r3, #3
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	021b      	lsls	r3, r3, #8
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	3202      	adds	r2, #2
 800fdf2:	7812      	ldrb	r2, [r2, #0]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	021b      	lsls	r3, r3, #8
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	3201      	adds	r2, #1
 800fe00:	7812      	ldrb	r2, [r2, #0]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	021b      	lsls	r3, r3, #8
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	7812      	ldrb	r2, [r2, #0]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	60fb      	str	r3, [r7, #12]
	return rv;
 800fe12:	68fb      	ldr	r3, [r7, #12]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3714      	adds	r7, #20
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800fe20:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800fe24:	b09d      	sub	sp, #116	@ 0x74
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800fe2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe2c:	3307      	adds	r3, #7
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2200      	movs	r2, #0
 800fe34:	469a      	mov	sl, r3
 800fe36:	4693      	mov	fp, r2
 800fe38:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800fe3c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fe40:	f04f 0000 	mov.w	r0, #0
 800fe44:	f04f 0100 	mov.w	r1, #0
 800fe48:	0219      	lsls	r1, r3, #8
 800fe4a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fe4e:	0210      	lsls	r0, r2, #8
 800fe50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe52:	3306      	adds	r3, #6
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	2200      	movs	r2, #0
 800fe5a:	461c      	mov	r4, r3
 800fe5c:	4615      	mov	r5, r2
 800fe5e:	ea40 0804 	orr.w	r8, r0, r4
 800fe62:	ea41 0905 	orr.w	r9, r1, r5
 800fe66:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800fe6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fe6e:	f04f 0000 	mov.w	r0, #0
 800fe72:	f04f 0100 	mov.w	r1, #0
 800fe76:	0219      	lsls	r1, r3, #8
 800fe78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fe7c:	0210      	lsls	r0, r2, #8
 800fe7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe80:	3305      	adds	r3, #5
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2200      	movs	r2, #0
 800fe88:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800fe8c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800fe90:	4623      	mov	r3, r4
 800fe92:	4303      	orrs	r3, r0
 800fe94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe96:	462b      	mov	r3, r5
 800fe98:	430b      	orrs	r3, r1
 800fe9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe9c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800fea0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800fea4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fea8:	f04f 0000 	mov.w	r0, #0
 800feac:	f04f 0100 	mov.w	r1, #0
 800feb0:	0219      	lsls	r1, r3, #8
 800feb2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800feb6:	0210      	lsls	r0, r2, #8
 800feb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800feba:	3304      	adds	r3, #4
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	2200      	movs	r2, #0
 800fec2:	653b      	str	r3, [r7, #80]	@ 0x50
 800fec4:	657a      	str	r2, [r7, #84]	@ 0x54
 800fec6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800feca:	4623      	mov	r3, r4
 800fecc:	4303      	orrs	r3, r0
 800fece:	623b      	str	r3, [r7, #32]
 800fed0:	462b      	mov	r3, r5
 800fed2:	430b      	orrs	r3, r1
 800fed4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fed6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800feda:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800fede:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fee2:	f04f 0000 	mov.w	r0, #0
 800fee6:	f04f 0100 	mov.w	r1, #0
 800feea:	0219      	lsls	r1, r3, #8
 800feec:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fef0:	0210      	lsls	r0, r2, #8
 800fef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fef4:	3303      	adds	r3, #3
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	2200      	movs	r2, #0
 800fefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fefe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ff00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ff04:	4623      	mov	r3, r4
 800ff06:	4303      	orrs	r3, r0
 800ff08:	61bb      	str	r3, [r7, #24]
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	430b      	orrs	r3, r1
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ff14:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800ff18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ff1c:	f04f 0000 	mov.w	r0, #0
 800ff20:	f04f 0100 	mov.w	r1, #0
 800ff24:	0219      	lsls	r1, r3, #8
 800ff26:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ff2a:	0210      	lsls	r0, r2, #8
 800ff2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff2e:	3302      	adds	r3, #2
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2200      	movs	r2, #0
 800ff36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff38:	647a      	str	r2, [r7, #68]	@ 0x44
 800ff3a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800ff3e:	4623      	mov	r3, r4
 800ff40:	4303      	orrs	r3, r0
 800ff42:	613b      	str	r3, [r7, #16]
 800ff44:	462b      	mov	r3, r5
 800ff46:	430b      	orrs	r3, r1
 800ff48:	617b      	str	r3, [r7, #20]
 800ff4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ff4e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800ff52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ff56:	f04f 0200 	mov.w	r2, #0
 800ff5a:	f04f 0300 	mov.w	r3, #0
 800ff5e:	020b      	lsls	r3, r1, #8
 800ff60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff64:	0202      	lsls	r2, r0, #8
 800ff66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ff68:	3101      	adds	r1, #1
 800ff6a:	7809      	ldrb	r1, [r1, #0]
 800ff6c:	b2c9      	uxtb	r1, r1
 800ff6e:	2000      	movs	r0, #0
 800ff70:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ff72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ff74:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800ff78:	4621      	mov	r1, r4
 800ff7a:	4311      	orrs	r1, r2
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	4629      	mov	r1, r5
 800ff80:	4319      	orrs	r1, r3
 800ff82:	60f9      	str	r1, [r7, #12]
 800ff84:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ff88:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800ff8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ff90:	f04f 0200 	mov.w	r2, #0
 800ff94:	f04f 0300 	mov.w	r3, #0
 800ff98:	020b      	lsls	r3, r1, #8
 800ff9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff9e:	0202      	lsls	r2, r0, #8
 800ffa0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ffa2:	7809      	ldrb	r1, [r1, #0]
 800ffa4:	b2c9      	uxtb	r1, r1
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	6339      	str	r1, [r7, #48]	@ 0x30
 800ffaa:	6378      	str	r0, [r7, #52]	@ 0x34
 800ffac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	4311      	orrs	r1, r2
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	4319      	orrs	r1, r3
 800ffba:	6079      	str	r1, [r7, #4]
 800ffbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ffc0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800ffc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800ffc8:	4610      	mov	r0, r2
 800ffca:	4619      	mov	r1, r3
 800ffcc:	3774      	adds	r7, #116	@ 0x74
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ffd4:	4770      	bx	lr

0800ffd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ffd6:	b480      	push	{r7}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	460b      	mov	r3, r1
 800ffe0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	1c5a      	adds	r2, r3, #1
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	887a      	ldrh	r2, [r7, #2]
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	701a      	strb	r2, [r3, #0]
 800ffee:	887b      	ldrh	r3, [r7, #2]
 800fff0:	0a1b      	lsrs	r3, r3, #8
 800fff2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	1c5a      	adds	r2, r3, #1
 800fff8:	607a      	str	r2, [r7, #4]
 800fffa:	887a      	ldrh	r2, [r7, #2]
 800fffc:	b2d2      	uxtb	r2, r2
 800fffe:	701a      	strb	r2, [r3, #0]
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	1c5a      	adds	r2, r3, #1
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	b2d2      	uxtb	r2, r2
 8010020:	701a      	strb	r2, [r3, #0]
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	0a1b      	lsrs	r3, r3, #8
 8010026:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	1c5a      	adds	r2, r3, #1
 801002c:	607a      	str	r2, [r7, #4]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	b2d2      	uxtb	r2, r2
 8010032:	701a      	strb	r2, [r3, #0]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	0a1b      	lsrs	r3, r3, #8
 8010038:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	607a      	str	r2, [r7, #4]
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	b2d2      	uxtb	r2, r2
 8010044:	701a      	strb	r2, [r3, #0]
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	0a1b      	lsrs	r3, r3, #8
 801004a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	1c5a      	adds	r2, r3, #1
 8010050:	607a      	str	r2, [r7, #4]
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	b2d2      	uxtb	r2, r2
 8010056:	701a      	strb	r2, [r3, #0]
}
 8010058:	bf00      	nop
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	60fa      	str	r2, [r7, #12]
 8010076:	783a      	ldrb	r2, [r7, #0]
 8010078:	701a      	strb	r2, [r3, #0]
 801007a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801007e:	f04f 0200 	mov.w	r2, #0
 8010082:	f04f 0300 	mov.w	r3, #0
 8010086:	0a02      	lsrs	r2, r0, #8
 8010088:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801008c:	0a0b      	lsrs	r3, r1, #8
 801008e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	1c5a      	adds	r2, r3, #1
 8010096:	60fa      	str	r2, [r7, #12]
 8010098:	783a      	ldrb	r2, [r7, #0]
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80100a0:	f04f 0200 	mov.w	r2, #0
 80100a4:	f04f 0300 	mov.w	r3, #0
 80100a8:	0a02      	lsrs	r2, r0, #8
 80100aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80100ae:	0a0b      	lsrs	r3, r1, #8
 80100b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	1c5a      	adds	r2, r3, #1
 80100b8:	60fa      	str	r2, [r7, #12]
 80100ba:	783a      	ldrb	r2, [r7, #0]
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80100c2:	f04f 0200 	mov.w	r2, #0
 80100c6:	f04f 0300 	mov.w	r3, #0
 80100ca:	0a02      	lsrs	r2, r0, #8
 80100cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80100d0:	0a0b      	lsrs	r3, r1, #8
 80100d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	60fa      	str	r2, [r7, #12]
 80100dc:	783a      	ldrb	r2, [r7, #0]
 80100de:	701a      	strb	r2, [r3, #0]
 80100e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80100e4:	f04f 0200 	mov.w	r2, #0
 80100e8:	f04f 0300 	mov.w	r3, #0
 80100ec:	0a02      	lsrs	r2, r0, #8
 80100ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80100f2:	0a0b      	lsrs	r3, r1, #8
 80100f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	60fa      	str	r2, [r7, #12]
 80100fe:	783a      	ldrb	r2, [r7, #0]
 8010100:	701a      	strb	r2, [r3, #0]
 8010102:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010106:	f04f 0200 	mov.w	r2, #0
 801010a:	f04f 0300 	mov.w	r3, #0
 801010e:	0a02      	lsrs	r2, r0, #8
 8010110:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010114:	0a0b      	lsrs	r3, r1, #8
 8010116:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	60fa      	str	r2, [r7, #12]
 8010120:	783a      	ldrb	r2, [r7, #0]
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010128:	f04f 0200 	mov.w	r2, #0
 801012c:	f04f 0300 	mov.w	r3, #0
 8010130:	0a02      	lsrs	r2, r0, #8
 8010132:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010136:	0a0b      	lsrs	r3, r1, #8
 8010138:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	1c5a      	adds	r2, r3, #1
 8010140:	60fa      	str	r2, [r7, #12]
 8010142:	783a      	ldrb	r2, [r7, #0]
 8010144:	701a      	strb	r2, [r3, #0]
 8010146:	e9d7 0100 	ldrd	r0, r1, [r7]
 801014a:	f04f 0200 	mov.w	r2, #0
 801014e:	f04f 0300 	mov.w	r3, #0
 8010152:	0a02      	lsrs	r2, r0, #8
 8010154:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010158:	0a0b      	lsrs	r3, r1, #8
 801015a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	60fa      	str	r2, [r7, #12]
 8010164:	783a      	ldrb	r2, [r7, #0]
 8010166:	701a      	strb	r2, [r3, #0]
}
 8010168:	bf00      	nop
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010174:	b480      	push	{r7}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00d      	beq.n	80101aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	1c53      	adds	r3, r2, #1
 8010192:	613b      	str	r3, [r7, #16]
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	1c59      	adds	r1, r3, #1
 8010198:	6179      	str	r1, [r7, #20]
 801019a:	7812      	ldrb	r2, [r2, #0]
 801019c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	607b      	str	r3, [r7, #4]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1f1      	bne.n	801018e <mem_cpy+0x1a>
	}
}
 80101aa:	bf00      	nop
 80101ac:	371c      	adds	r7, #28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80101b6:	b480      	push	{r7}
 80101b8:	b087      	sub	sp, #28
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	617a      	str	r2, [r7, #20]
 80101cc:	68ba      	ldr	r2, [r7, #8]
 80101ce:	b2d2      	uxtb	r2, r2
 80101d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	3b01      	subs	r3, #1
 80101d6:	607b      	str	r3, [r7, #4]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1f3      	bne.n	80101c6 <mem_set+0x10>
}
 80101de:	bf00      	nop
 80101e0:	bf00      	nop
 80101e2:	371c      	adds	r7, #28
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80101ec:	b480      	push	{r7}
 80101ee:	b089      	sub	sp, #36	@ 0x24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	61fb      	str	r3, [r7, #28]
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010200:	2300      	movs	r3, #0
 8010202:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	61fa      	str	r2, [r7, #28]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	4619      	mov	r1, r3
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	61ba      	str	r2, [r7, #24]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	1acb      	subs	r3, r1, r3
 8010218:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3b01      	subs	r3, #1
 801021e:	607b      	str	r3, [r7, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d002      	beq.n	801022c <mem_cmp+0x40>
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d0eb      	beq.n	8010204 <mem_cmp+0x18>

	return r;
 801022c:	697b      	ldr	r3, [r7, #20]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3724      	adds	r7, #36	@ 0x24
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801023a:	b480      	push	{r7}
 801023c:	b083      	sub	sp, #12
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010244:	e002      	b.n	801024c <chk_chr+0x12>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	3301      	adds	r3, #1
 801024a:	607b      	str	r3, [r7, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d005      	beq.n	8010260 <chk_chr+0x26>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	4293      	cmp	r3, r2
 801025e:	d1f2      	bne.n	8010246 <chk_chr+0xc>
	return *str;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	781b      	ldrb	r3, [r3, #0]
}
 8010264:	4618      	mov	r0, r3
 8010266:	370c      	adds	r7, #12
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr

08010270 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d009      	beq.n	8010292 <lock_fs+0x22>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	695b      	ldr	r3, [r3, #20]
 8010282:	4618      	mov	r0, r3
 8010284:	f005 f887 	bl	8015396 <ff_req_grant>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <lock_fs+0x22>
 801028e:	2301      	movs	r3, #1
 8010290:	e000      	b.n	8010294 <lock_fs+0x24>
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	460b      	mov	r3, r1
 80102a6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00d      	beq.n	80102ca <unlock_fs+0x2e>
 80102ae:	78fb      	ldrb	r3, [r7, #3]
 80102b0:	2b0c      	cmp	r3, #12
 80102b2:	d00a      	beq.n	80102ca <unlock_fs+0x2e>
 80102b4:	78fb      	ldrb	r3, [r7, #3]
 80102b6:	2b0b      	cmp	r3, #11
 80102b8:	d007      	beq.n	80102ca <unlock_fs+0x2e>
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	2b0f      	cmp	r3, #15
 80102be:	d004      	beq.n	80102ca <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f005 f87b 	bl	80153c0 <ff_rel_grant>
	}
}
 80102ca:	bf00      	nop
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
	...

080102d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80102de:	2300      	movs	r3, #0
 80102e0:	60bb      	str	r3, [r7, #8]
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	e029      	b.n	801033c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80102e8:	4a27      	ldr	r2, [pc, #156]	@ (8010388 <chk_lock+0xb4>)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	011b      	lsls	r3, r3, #4
 80102ee:	4413      	add	r3, r2
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d01d      	beq.n	8010332 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80102f6:	4a24      	ldr	r2, [pc, #144]	@ (8010388 <chk_lock+0xb4>)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	011b      	lsls	r3, r3, #4
 80102fc:	4413      	add	r3, r2
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	429a      	cmp	r2, r3
 8010306:	d116      	bne.n	8010336 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010308:	4a1f      	ldr	r2, [pc, #124]	@ (8010388 <chk_lock+0xb4>)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	011b      	lsls	r3, r3, #4
 801030e:	4413      	add	r3, r2
 8010310:	3304      	adds	r3, #4
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010318:	429a      	cmp	r2, r3
 801031a:	d10c      	bne.n	8010336 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801031c:	4a1a      	ldr	r2, [pc, #104]	@ (8010388 <chk_lock+0xb4>)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	011b      	lsls	r3, r3, #4
 8010322:	4413      	add	r3, r2
 8010324:	3308      	adds	r3, #8
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 801032c:	429a      	cmp	r2, r3
 801032e:	d102      	bne.n	8010336 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010330:	e007      	b.n	8010342 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010332:	2301      	movs	r3, #1
 8010334:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3301      	adds	r3, #1
 801033a:	60fb      	str	r3, [r7, #12]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b01      	cmp	r3, #1
 8010340:	d9d2      	bls.n	80102e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2b02      	cmp	r3, #2
 8010346:	d109      	bne.n	801035c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <chk_lock+0x80>
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b02      	cmp	r3, #2
 8010352:	d101      	bne.n	8010358 <chk_lock+0x84>
 8010354:	2300      	movs	r3, #0
 8010356:	e010      	b.n	801037a <chk_lock+0xa6>
 8010358:	2312      	movs	r3, #18
 801035a:	e00e      	b.n	801037a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d108      	bne.n	8010374 <chk_lock+0xa0>
 8010362:	4a09      	ldr	r2, [pc, #36]	@ (8010388 <chk_lock+0xb4>)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	4413      	add	r3, r2
 801036a:	330c      	adds	r3, #12
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010372:	d101      	bne.n	8010378 <chk_lock+0xa4>
 8010374:	2310      	movs	r3, #16
 8010376:	e000      	b.n	801037a <chk_lock+0xa6>
 8010378:	2300      	movs	r3, #0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3714      	adds	r7, #20
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop
 8010388:	24001bd0 	.word	0x24001bd0

0801038c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801038c:	b480      	push	{r7}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010392:	2300      	movs	r3, #0
 8010394:	607b      	str	r3, [r7, #4]
 8010396:	e002      	b.n	801039e <enq_lock+0x12>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	3301      	adds	r3, #1
 801039c:	607b      	str	r3, [r7, #4]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d806      	bhi.n	80103b2 <enq_lock+0x26>
 80103a4:	4a09      	ldr	r2, [pc, #36]	@ (80103cc <enq_lock+0x40>)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	011b      	lsls	r3, r3, #4
 80103aa:	4413      	add	r3, r2
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1f2      	bne.n	8010398 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	bf14      	ite	ne
 80103b8:	2301      	movne	r3, #1
 80103ba:	2300      	moveq	r3, #0
 80103bc:	b2db      	uxtb	r3, r3
}
 80103be:	4618      	mov	r0, r3
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	24001bd0 	.word	0x24001bd0

080103d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b085      	sub	sp, #20
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80103da:	2300      	movs	r3, #0
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	e01f      	b.n	8010420 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80103e0:	4a41      	ldr	r2, [pc, #260]	@ (80104e8 <inc_lock+0x118>)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	011b      	lsls	r3, r3, #4
 80103e6:	4413      	add	r3, r2
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d113      	bne.n	801041a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80103f2:	4a3d      	ldr	r2, [pc, #244]	@ (80104e8 <inc_lock+0x118>)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	011b      	lsls	r3, r3, #4
 80103f8:	4413      	add	r3, r2
 80103fa:	3304      	adds	r3, #4
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010402:	429a      	cmp	r2, r3
 8010404:	d109      	bne.n	801041a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010406:	4a38      	ldr	r2, [pc, #224]	@ (80104e8 <inc_lock+0x118>)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	011b      	lsls	r3, r3, #4
 801040c:	4413      	add	r3, r2
 801040e:	3308      	adds	r3, #8
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8010416:	429a      	cmp	r2, r3
 8010418:	d006      	beq.n	8010428 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d9dc      	bls.n	80103e0 <inc_lock+0x10>
 8010426:	e000      	b.n	801042a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010428:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b02      	cmp	r3, #2
 801042e:	d132      	bne.n	8010496 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010430:	2300      	movs	r3, #0
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e002      	b.n	801043c <inc_lock+0x6c>
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3301      	adds	r3, #1
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d806      	bhi.n	8010450 <inc_lock+0x80>
 8010442:	4a29      	ldr	r2, [pc, #164]	@ (80104e8 <inc_lock+0x118>)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	011b      	lsls	r3, r3, #4
 8010448:	4413      	add	r3, r2
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1f2      	bne.n	8010436 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2b02      	cmp	r3, #2
 8010454:	d101      	bne.n	801045a <inc_lock+0x8a>
 8010456:	2300      	movs	r3, #0
 8010458:	e040      	b.n	80104dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	4922      	ldr	r1, [pc, #136]	@ (80104e8 <inc_lock+0x118>)
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	011b      	lsls	r3, r3, #4
 8010464:	440b      	add	r3, r1
 8010466:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	689a      	ldr	r2, [r3, #8]
 801046c:	491e      	ldr	r1, [pc, #120]	@ (80104e8 <inc_lock+0x118>)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	011b      	lsls	r3, r3, #4
 8010472:	440b      	add	r3, r1
 8010474:	3304      	adds	r3, #4
 8010476:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801047c:	491a      	ldr	r1, [pc, #104]	@ (80104e8 <inc_lock+0x118>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	440b      	add	r3, r1
 8010484:	3308      	adds	r3, #8
 8010486:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010488:	4a17      	ldr	r2, [pc, #92]	@ (80104e8 <inc_lock+0x118>)
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	011b      	lsls	r3, r3, #4
 801048e:	4413      	add	r3, r2
 8010490:	330c      	adds	r3, #12
 8010492:	2200      	movs	r2, #0
 8010494:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d009      	beq.n	80104b0 <inc_lock+0xe0>
 801049c:	4a12      	ldr	r2, [pc, #72]	@ (80104e8 <inc_lock+0x118>)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	011b      	lsls	r3, r3, #4
 80104a2:	4413      	add	r3, r2
 80104a4:	330c      	adds	r3, #12
 80104a6:	881b      	ldrh	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <inc_lock+0xe0>
 80104ac:	2300      	movs	r3, #0
 80104ae:	e015      	b.n	80104dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d108      	bne.n	80104c8 <inc_lock+0xf8>
 80104b6:	4a0c      	ldr	r2, [pc, #48]	@ (80104e8 <inc_lock+0x118>)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	011b      	lsls	r3, r3, #4
 80104bc:	4413      	add	r3, r2
 80104be:	330c      	adds	r3, #12
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	3301      	adds	r3, #1
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	e001      	b.n	80104cc <inc_lock+0xfc>
 80104c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80104cc:	4906      	ldr	r1, [pc, #24]	@ (80104e8 <inc_lock+0x118>)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	011b      	lsls	r3, r3, #4
 80104d2:	440b      	add	r3, r1
 80104d4:	330c      	adds	r3, #12
 80104d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	3301      	adds	r3, #1
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr
 80104e8:	24001bd0 	.word	0x24001bd0

080104ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80104f4:	2300      	movs	r3, #0
 80104f6:	60fb      	str	r3, [r7, #12]
 80104f8:	e010      	b.n	801051c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80104fa:	4a0d      	ldr	r2, [pc, #52]	@ (8010530 <clear_lock+0x44>)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	011b      	lsls	r3, r3, #4
 8010500:	4413      	add	r3, r2
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d105      	bne.n	8010516 <clear_lock+0x2a>
 801050a:	4a09      	ldr	r2, [pc, #36]	@ (8010530 <clear_lock+0x44>)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	011b      	lsls	r3, r3, #4
 8010510:	4413      	add	r3, r2
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	3301      	adds	r3, #1
 801051a:	60fb      	str	r3, [r7, #12]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d9eb      	bls.n	80104fa <clear_lock+0xe>
	}
}
 8010522:	bf00      	nop
 8010524:	bf00      	nop
 8010526:	3714      	adds	r7, #20
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr
 8010530:	24001bd0 	.word	0x24001bd0

08010534 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	78db      	ldrb	r3, [r3, #3]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d034      	beq.n	80105b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801054c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	7858      	ldrb	r0, [r3, #1]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010558:	2301      	movs	r3, #1
 801055a:	697a      	ldr	r2, [r7, #20]
 801055c:	f7ff fbe6 	bl	800fd2c <disk_write>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d002      	beq.n	801056c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010566:	2301      	movs	r3, #1
 8010568:	73fb      	strb	r3, [r7, #15]
 801056a:	e022      	b.n	80105b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010576:	697a      	ldr	r2, [r7, #20]
 8010578:	1ad2      	subs	r2, r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057e:	429a      	cmp	r2, r3
 8010580:	d217      	bcs.n	80105b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	789b      	ldrb	r3, [r3, #2]
 8010586:	613b      	str	r3, [r7, #16]
 8010588:	e010      	b.n	80105ac <sync_window+0x78>
					wsect += fs->fsize;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	4413      	add	r3, r2
 8010592:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	7858      	ldrb	r0, [r3, #1]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801059e:	2301      	movs	r3, #1
 80105a0:	697a      	ldr	r2, [r7, #20]
 80105a2:	f7ff fbc3 	bl	800fd2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	3b01      	subs	r3, #1
 80105aa:	613b      	str	r3, [r7, #16]
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d8eb      	bhi.n	801058a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3718      	adds	r7, #24
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80105c6:	2300      	movs	r3, #0
 80105c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ce:	683a      	ldr	r2, [r7, #0]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d01b      	beq.n	801060c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ffad 	bl	8010534 <sync_window>
 80105da:	4603      	mov	r3, r0
 80105dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80105de:	7bfb      	ldrb	r3, [r7, #15]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d113      	bne.n	801060c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	7858      	ldrb	r0, [r3, #1]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80105ee:	2301      	movs	r3, #1
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	f7ff fb7b 	bl	800fcec <disk_read>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d004      	beq.n	8010606 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80105fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010600:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010602:	2301      	movs	r3, #1
 8010604:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 801060c:	7bfb      	ldrb	r3, [r7, #15]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
	...

08010618 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7ff ff87 	bl	8010534 <sync_window>
 8010626:	4603      	mov	r3, r0
 8010628:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801062a:	7bfb      	ldrb	r3, [r7, #15]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d158      	bne.n	80106e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2b03      	cmp	r3, #3
 8010636:	d148      	bne.n	80106ca <sync_fs+0xb2>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	791b      	ldrb	r3, [r3, #4]
 801063c:	2b01      	cmp	r3, #1
 801063e:	d144      	bne.n	80106ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	333c      	adds	r3, #60	@ 0x3c
 8010644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010648:	2100      	movs	r1, #0
 801064a:	4618      	mov	r0, r3
 801064c:	f7ff fdb3 	bl	80101b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	333c      	adds	r3, #60	@ 0x3c
 8010654:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010658:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff fcba 	bl	800ffd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	333c      	adds	r3, #60	@ 0x3c
 8010666:	4921      	ldr	r1, [pc, #132]	@ (80106ec <sync_fs+0xd4>)
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fccf 	bl	801000c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	333c      	adds	r3, #60	@ 0x3c
 8010672:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010676:	491e      	ldr	r1, [pc, #120]	@ (80106f0 <sync_fs+0xd8>)
 8010678:	4618      	mov	r0, r3
 801067a:	f7ff fcc7 	bl	801000c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	333c      	adds	r3, #60	@ 0x3c
 8010682:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	69db      	ldr	r3, [r3, #28]
 801068a:	4619      	mov	r1, r3
 801068c:	4610      	mov	r0, r2
 801068e:	f7ff fcbd 	bl	801000c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	333c      	adds	r3, #60	@ 0x3c
 8010696:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7ff fcb3 	bl	801000c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	7858      	ldrb	r0, [r3, #1]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106be:	2301      	movs	r3, #1
 80106c0:	f7ff fb34 	bl	800fd2c <disk_write>
			fs->fsi_flag = 0;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	785b      	ldrb	r3, [r3, #1]
 80106ce:	2200      	movs	r2, #0
 80106d0:	2100      	movs	r1, #0
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff fb4a 	bl	800fd6c <disk_ioctl>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <sync_fs+0xca>
 80106de:	2301      	movs	r3, #1
 80106e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80106e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3710      	adds	r7, #16
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	41615252 	.word	0x41615252
 80106f0:	61417272 	.word	0x61417272

080106f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	3b02      	subs	r3, #2
 8010702:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6a1b      	ldr	r3, [r3, #32]
 8010708:	3b02      	subs	r3, #2
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	429a      	cmp	r2, r3
 801070e:	d301      	bcc.n	8010714 <clust2sect+0x20>
 8010710:	2300      	movs	r3, #0
 8010712:	e008      	b.n	8010726 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	895b      	ldrh	r3, [r3, #10]
 8010718:	461a      	mov	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	fb03 f202 	mul.w	r2, r3, r2
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010724:	4413      	add	r3, r2
}
 8010726:	4618      	mov	r0, r3
 8010728:	370c      	adds	r7, #12
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
	...

08010734 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	6809      	ldr	r1, [r1, #0]
 8010742:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010744:	6839      	ldr	r1, [r7, #0]
 8010746:	2901      	cmp	r1, #1
 8010748:	d904      	bls.n	8010754 <get_fat+0x20>
 801074a:	69b9      	ldr	r1, [r7, #24]
 801074c:	6a09      	ldr	r1, [r1, #32]
 801074e:	6838      	ldr	r0, [r7, #0]
 8010750:	4288      	cmp	r0, r1
 8010752:	d302      	bcc.n	801075a <get_fat+0x26>
		val = 1;	/* Internal error */
 8010754:	2301      	movs	r3, #1
 8010756:	61fb      	str	r3, [r7, #28]
 8010758:	e100      	b.n	801095c <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801075a:	f04f 31ff 	mov.w	r1, #4294967295
 801075e:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8010760:	69b9      	ldr	r1, [r7, #24]
 8010762:	7809      	ldrb	r1, [r1, #0]
 8010764:	3901      	subs	r1, #1
 8010766:	2903      	cmp	r1, #3
 8010768:	f200 80ec 	bhi.w	8010944 <get_fat+0x210>
 801076c:	a001      	add	r0, pc, #4	@ (adr r0, 8010774 <get_fat+0x40>)
 801076e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010772:	bf00      	nop
 8010774:	08010785 	.word	0x08010785
 8010778:	0801080b 	.word	0x0801080b
 801077c:	08010841 	.word	0x08010841
 8010780:	08010879 	.word	0x08010879
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	085b      	lsrs	r3, r3, #1
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	4413      	add	r3, r2
 8010790:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	0a5b      	lsrs	r3, r3, #9
 801079a:	4413      	add	r3, r2
 801079c:	4619      	mov	r1, r3
 801079e:	69b8      	ldr	r0, [r7, #24]
 80107a0:	f7ff ff0c 	bl	80105bc <move_window>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f040 80cf 	bne.w	801094a <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	60fa      	str	r2, [r7, #12]
 80107b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107b6:	69ba      	ldr	r2, [r7, #24]
 80107b8:	4413      	add	r3, r2
 80107ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80107be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	0a5b      	lsrs	r3, r3, #9
 80107c8:	4413      	add	r3, r2
 80107ca:	4619      	mov	r1, r3
 80107cc:	69b8      	ldr	r0, [r7, #24]
 80107ce:	f7ff fef5 	bl	80105bc <move_window>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f040 80ba 	bne.w	801094e <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e0:	69ba      	ldr	r2, [r7, #24]
 80107e2:	4413      	add	r3, r2
 80107e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80107e8:	021b      	lsls	r3, r3, #8
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d002      	beq.n	8010800 <get_fat+0xcc>
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	091b      	lsrs	r3, r3, #4
 80107fe:	e002      	b.n	8010806 <get_fat+0xd2>
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010806:	61fb      	str	r3, [r7, #28]
			break;
 8010808:	e0a8      	b.n	801095c <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	0a1b      	lsrs	r3, r3, #8
 8010812:	4413      	add	r3, r2
 8010814:	4619      	mov	r1, r3
 8010816:	69b8      	ldr	r0, [r7, #24]
 8010818:	f7ff fed0 	bl	80105bc <move_window>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	f040 8097 	bne.w	8010952 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010832:	4413      	add	r3, r2
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fab7 	bl	800fda8 <ld_word>
 801083a:	4603      	mov	r3, r0
 801083c:	61fb      	str	r3, [r7, #28]
			break;
 801083e:	e08d      	b.n	801095c <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	09db      	lsrs	r3, r3, #7
 8010848:	4413      	add	r3, r2
 801084a:	4619      	mov	r1, r3
 801084c:	69b8      	ldr	r0, [r7, #24]
 801084e:	f7ff feb5 	bl	80105bc <move_window>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d17e      	bne.n	8010956 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010866:	4413      	add	r3, r2
 8010868:	4618      	mov	r0, r3
 801086a:	f7ff fab6 	bl	800fdda <ld_dword>
 801086e:	4603      	mov	r3, r0
 8010870:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010874:	61fb      	str	r3, [r7, #28]
			break;
 8010876:	e071      	b.n	801095c <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8010878:	6879      	ldr	r1, [r7, #4]
 801087a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 801087e:	4301      	orrs	r1, r0
 8010880:	d060      	beq.n	8010944 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010882:	6879      	ldr	r1, [r7, #4]
 8010884:	6889      	ldr	r1, [r1, #8]
 8010886:	6838      	ldr	r0, [r7, #0]
 8010888:	1a41      	subs	r1, r0, r1
 801088a:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 801088c:	6879      	ldr	r1, [r7, #4]
 801088e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010892:	1e42      	subs	r2, r0, #1
 8010894:	f141 33ff 	adc.w	r3, r1, #4294967295
 8010898:	f04f 0000 	mov.w	r0, #0
 801089c:	f04f 0100 	mov.w	r1, #0
 80108a0:	0a50      	lsrs	r0, r2, #9
 80108a2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80108a6:	0a59      	lsrs	r1, r3, #9
 80108a8:	4602      	mov	r2, r0
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	895b      	ldrh	r3, [r3, #10]
 80108ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80108b2:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	79db      	ldrb	r3, [r3, #7]
 80108b8:	2b02      	cmp	r3, #2
 80108ba:	d10e      	bne.n	80108da <get_fat+0x1a6>
					if (cofs <= clen) {
 80108bc:	697a      	ldr	r2, [r7, #20]
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d80a      	bhi.n	80108da <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d002      	beq.n	80108d2 <get_fat+0x19e>
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	3301      	adds	r3, #1
 80108d0:	e001      	b.n	80108d6 <get_fat+0x1a2>
 80108d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80108d6:	61fb      	str	r3, [r7, #28]
						break;
 80108d8:	e040      	b.n	801095c <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	79db      	ldrb	r3, [r3, #7]
 80108de:	2b03      	cmp	r3, #3
 80108e0:	d108      	bne.n	80108f4 <get_fat+0x1c0>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	699b      	ldr	r3, [r3, #24]
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d203      	bcs.n	80108f4 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	3301      	adds	r3, #1
 80108f0:	61fb      	str	r3, [r7, #28]
					break;
 80108f2:	e033      	b.n	801095c <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	79db      	ldrb	r3, [r3, #7]
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	d023      	beq.n	8010944 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	69db      	ldr	r3, [r3, #28]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d003      	beq.n	801090c <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010904:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010908:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 801090a:	e027      	b.n	801095c <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	09db      	lsrs	r3, r3, #7
 8010914:	4413      	add	r3, r2
 8010916:	4619      	mov	r1, r3
 8010918:	69b8      	ldr	r0, [r7, #24]
 801091a:	f7ff fe4f 	bl	80105bc <move_window>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d11a      	bne.n	801095a <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010932:	4413      	add	r3, r2
 8010934:	4618      	mov	r0, r3
 8010936:	f7ff fa50 	bl	800fdda <ld_dword>
 801093a:	4603      	mov	r3, r0
 801093c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010940:	61fb      	str	r3, [r7, #28]
					break;
 8010942:	e00b      	b.n	801095c <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010944:	2301      	movs	r3, #1
 8010946:	61fb      	str	r3, [r7, #28]
 8010948:	e008      	b.n	801095c <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801094a:	bf00      	nop
 801094c:	e006      	b.n	801095c <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801094e:	bf00      	nop
 8010950:	e004      	b.n	801095c <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010952:	bf00      	nop
 8010954:	e002      	b.n	801095c <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010956:	bf00      	nop
 8010958:	e000      	b.n	801095c <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801095a:	bf00      	nop
		}
	}

	return val;
 801095c:	69fb      	ldr	r3, [r7, #28]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3720      	adds	r7, #32
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop

08010968 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010968:	b590      	push	{r4, r7, lr}
 801096a:	b089      	sub	sp, #36	@ 0x24
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010974:	2302      	movs	r3, #2
 8010976:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b01      	cmp	r3, #1
 801097c:	f240 80dd 	bls.w	8010b3a <put_fat+0x1d2>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6a1b      	ldr	r3, [r3, #32]
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	429a      	cmp	r2, r3
 8010988:	f080 80d7 	bcs.w	8010b3a <put_fat+0x1d2>
		switch (fs->fs_type) {
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	2b04      	cmp	r3, #4
 8010992:	f300 80d2 	bgt.w	8010b3a <put_fat+0x1d2>
 8010996:	2b03      	cmp	r3, #3
 8010998:	f280 8093 	bge.w	8010ac2 <put_fat+0x15a>
 801099c:	2b01      	cmp	r3, #1
 801099e:	d002      	beq.n	80109a6 <put_fat+0x3e>
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d06e      	beq.n	8010a82 <put_fat+0x11a>
 80109a4:	e0c9      	b.n	8010b3a <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	61bb      	str	r3, [r7, #24]
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	085b      	lsrs	r3, r3, #1
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	4413      	add	r3, r2
 80109b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	0a5b      	lsrs	r3, r3, #9
 80109bc:	4413      	add	r3, r2
 80109be:	4619      	mov	r1, r3
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f7ff fdfb 	bl	80105bc <move_window>
 80109c6:	4603      	mov	r3, r0
 80109c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109ca:	7ffb      	ldrb	r3, [r7, #31]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f040 80ad 	bne.w	8010b2c <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	1c59      	adds	r1, r3, #1
 80109dc:	61b9      	str	r1, [r7, #24]
 80109de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e2:	4413      	add	r3, r2
 80109e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	f003 0301 	and.w	r3, r3, #1
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00d      	beq.n	8010a0c <put_fat+0xa4>
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	b25b      	sxtb	r3, r3
 80109f6:	f003 030f 	and.w	r3, r3, #15
 80109fa:	b25a      	sxtb	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	b25b      	sxtb	r3, r3
 8010a00:	011b      	lsls	r3, r3, #4
 8010a02:	b25b      	sxtb	r3, r3
 8010a04:	4313      	orrs	r3, r2
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	e001      	b.n	8010a10 <put_fat+0xa8>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	697a      	ldr	r2, [r7, #20]
 8010a12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2201      	movs	r2, #1
 8010a18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	0a5b      	lsrs	r3, r3, #9
 8010a22:	4413      	add	r3, r2
 8010a24:	4619      	mov	r1, r3
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f7ff fdc8 	bl	80105bc <move_window>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a30:	7ffb      	ldrb	r3, [r7, #31]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d17c      	bne.n	8010b30 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a42:	4413      	add	r3, r2
 8010a44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	f003 0301 	and.w	r3, r3, #1
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d003      	beq.n	8010a58 <put_fat+0xf0>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	091b      	lsrs	r3, r3, #4
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	e00e      	b.n	8010a76 <put_fat+0x10e>
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	b25b      	sxtb	r3, r3
 8010a5e:	f023 030f 	bic.w	r3, r3, #15
 8010a62:	b25a      	sxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	0a1b      	lsrs	r3, r3, #8
 8010a68:	b25b      	sxtb	r3, r3
 8010a6a:	f003 030f 	and.w	r3, r3, #15
 8010a6e:	b25b      	sxtb	r3, r3
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b25b      	sxtb	r3, r3
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	70da      	strb	r2, [r3, #3]
			break;
 8010a80:	e05b      	b.n	8010b3a <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	0a1b      	lsrs	r3, r3, #8
 8010a8a:	4413      	add	r3, r2
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f7ff fd94 	bl	80105bc <move_window>
 8010a94:	4603      	mov	r3, r0
 8010a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a98:	7ffb      	ldrb	r3, [r7, #31]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d14a      	bne.n	8010b34 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	005b      	lsls	r3, r3, #1
 8010aa8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010aac:	4413      	add	r3, r2
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	b292      	uxth	r2, r2
 8010ab2:	4611      	mov	r1, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff fa8e 	bl	800ffd6 <st_word>
			fs->wflag = 1;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2201      	movs	r2, #1
 8010abe:	70da      	strb	r2, [r3, #3]
			break;
 8010ac0:	e03b      	b.n	8010b3a <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	09db      	lsrs	r3, r3, #7
 8010aca:	4413      	add	r3, r2
 8010acc:	4619      	mov	r1, r3
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7ff fd74 	bl	80105bc <move_window>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ad8:	7ffb      	ldrb	r3, [r7, #31]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d12c      	bne.n	8010b38 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	2b04      	cmp	r3, #4
 8010ae4:	d012      	beq.n	8010b0c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010afa:	4413      	add	r3, r2
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7ff f96c 	bl	800fdda <ld_dword>
 8010b02:	4603      	mov	r3, r0
 8010b04:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010b08:	4323      	orrs	r3, r4
 8010b0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010b1a:	4413      	add	r3, r2
 8010b1c:	6879      	ldr	r1, [r7, #4]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7ff fa74 	bl	801000c <st_dword>
			fs->wflag = 1;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2201      	movs	r2, #1
 8010b28:	70da      	strb	r2, [r3, #3]
			break;
 8010b2a:	e006      	b.n	8010b3a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010b2c:	bf00      	nop
 8010b2e:	e004      	b.n	8010b3a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010b30:	bf00      	nop
 8010b32:	e002      	b.n	8010b3a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010b34:	bf00      	nop
 8010b36:	e000      	b.n	8010b3a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010b38:	bf00      	nop
		}
	}
	return res;
 8010b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3724      	adds	r7, #36	@ 0x24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd90      	pop	{r4, r7, pc}

08010b44 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b08a      	sub	sp, #40	@ 0x28
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	3b02      	subs	r3, #2
 8010b54:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	6a1b      	ldr	r3, [r3, #32]
 8010b5a:	3b02      	subs	r3, #2
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d301      	bcc.n	8010b66 <find_bitmap+0x22>
 8010b62:	2300      	movs	r3, #0
 8010b64:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	61fb      	str	r3, [r7, #28]
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	61bb      	str	r3, [r7, #24]
 8010b6e:	2300      	movs	r3, #0
 8010b70:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	0b1b      	lsrs	r3, r3, #12
 8010b7a:	4413      	add	r3, r2
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f7ff fd1c 	bl	80105bc <move_window>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d002      	beq.n	8010b90 <find_bitmap+0x4c>
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8e:	e051      	b.n	8010c34 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	08db      	lsrs	r3, r3, #3
 8010b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b98:	623b      	str	r3, [r7, #32]
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	f003 0307 	and.w	r3, r3, #7
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	4413      	add	r3, r2
 8010bb0:	333c      	adds	r3, #60	@ 0x3c
 8010bb2:	781a      	ldrb	r2, [r3, #0]
 8010bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bb8:	4013      	ands	r3, r2
 8010bba:	74fb      	strb	r3, [r7, #19]
 8010bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	61fb      	str	r3, [r7, #28]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6a1b      	ldr	r3, [r3, #32]
 8010bd0:	3b02      	subs	r3, #2
 8010bd2:	69fa      	ldr	r2, [r7, #28]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d307      	bcc.n	8010be8 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8010bd8:	2300      	movs	r3, #0
 8010bda:	61fb      	str	r3, [r7, #28]
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010be2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010be6:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010be8:	7cfb      	ldrb	r3, [r7, #19]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d109      	bne.n	8010c02 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	617b      	str	r3, [r7, #20]
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d106      	bne.n	8010c0a <find_bitmap+0xc6>
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	3302      	adds	r3, #2
 8010c00:	e018      	b.n	8010c34 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	61bb      	str	r3, [r7, #24]
 8010c06:	2300      	movs	r3, #0
 8010c08:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010c0a:	69fa      	ldr	r2, [r7, #28]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d101      	bne.n	8010c16 <find_bitmap+0xd2>
 8010c12:	2300      	movs	r3, #0
 8010c14:	e00e      	b.n	8010c34 <find_bitmap+0xf0>
			} while (bm);
 8010c16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1c5      	bne.n	8010baa <find_bitmap+0x66>
			bm = 1;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8010c24:	6a3b      	ldr	r3, [r7, #32]
 8010c26:	3301      	adds	r3, #1
 8010c28:	623b      	str	r3, [r7, #32]
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c30:	d3bb      	bcc.n	8010baa <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010c32:	e79e      	b.n	8010b72 <find_bitmap+0x2e>
	}
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3728      	adds	r7, #40	@ 0x28
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b088      	sub	sp, #32
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	3b02      	subs	r3, #2
 8010c4e:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	0b1b      	lsrs	r3, r3, #12
 8010c58:	4413      	add	r3, r2
 8010c5a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	08db      	lsrs	r3, r3, #3
 8010c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c64:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	f003 0307 	and.w	r3, r3, #7
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c72:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	617a      	str	r2, [r7, #20]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f7ff fc9d 	bl	80105bc <move_window>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <change_bitmap+0x50>
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e03d      	b.n	8010d08 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	69bb      	ldr	r3, [r7, #24]
 8010c90:	4413      	add	r3, r2
 8010c92:	333c      	adds	r3, #60	@ 0x3c
 8010c94:	781a      	ldrb	r2, [r3, #0]
 8010c96:	7ffb      	ldrb	r3, [r7, #31]
 8010c98:	4013      	ands	r3, r2
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	bf14      	ite	ne
 8010ca0:	2301      	movne	r3, #1
 8010ca2:	2300      	moveq	r3, #0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d101      	bne.n	8010cb2 <change_bitmap+0x76>
 8010cae:	2302      	movs	r3, #2
 8010cb0:	e02a      	b.n	8010d08 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	333c      	adds	r3, #60	@ 0x3c
 8010cba:	781a      	ldrb	r2, [r3, #0]
 8010cbc:	7ffb      	ldrb	r3, [r7, #31]
 8010cbe:	4053      	eors	r3, r2
 8010cc0:	b2d9      	uxtb	r1, r3
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	69bb      	ldr	r3, [r7, #24]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	333c      	adds	r3, #60	@ 0x3c
 8010cca:	460a      	mov	r2, r1
 8010ccc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	607b      	str	r3, [r7, #4]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d101      	bne.n	8010ce4 <change_bitmap+0xa8>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	e011      	b.n	8010d08 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8010ce4:	7ffb      	ldrb	r3, [r7, #31]
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	77fb      	strb	r3, [r7, #31]
 8010cea:	7ffb      	ldrb	r3, [r7, #31]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1cd      	bne.n	8010c8c <change_bitmap+0x50>
			bm = 1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	61bb      	str	r3, [r7, #24]
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d00:	d3c4      	bcc.n	8010c8c <change_bitmap+0x50>
		i = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010d06:	e7b5      	b.n	8010c74 <change_bitmap+0x38>
	}
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3720      	adds	r7, #32
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	79db      	ldrb	r3, [r3, #7]
 8010d1c:	2b03      	cmp	r3, #3
 8010d1e:	d121      	bne.n	8010d64 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	617b      	str	r3, [r7, #20]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	699b      	ldr	r3, [r3, #24]
 8010d2a:	613b      	str	r3, [r7, #16]
 8010d2c:	e014      	b.n	8010d58 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6818      	ldr	r0, [r3, #0]
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	3301      	adds	r3, #1
 8010d36:	461a      	mov	r2, r3
 8010d38:	6979      	ldr	r1, [r7, #20]
 8010d3a:	f7ff fe15 	bl	8010968 <put_fat>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010d42:	7bfb      	ldrb	r3, [r7, #15]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d001      	beq.n	8010d4c <fill_first_frag+0x3c>
 8010d48:	7bfb      	ldrb	r3, [r7, #15]
 8010d4a:	e00c      	b.n	8010d66 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	617b      	str	r3, [r7, #20]
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	613b      	str	r3, [r7, #16]
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1e7      	bne.n	8010d2e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3718      	adds	r7, #24
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b086      	sub	sp, #24
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	60f8      	str	r0, [r7, #12]
 8010d76:	60b9      	str	r1, [r7, #8]
 8010d78:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010d7a:	e020      	b.n	8010dbe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6818      	ldr	r0, [r3, #0]
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	69db      	ldr	r3, [r3, #28]
 8010d84:	68ba      	ldr	r2, [r7, #8]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	1c59      	adds	r1, r3, #1
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d905      	bls.n	8010d9e <fill_last_frag+0x30>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	69db      	ldr	r3, [r3, #28]
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	3302      	adds	r3, #2
 8010d9c:	e000      	b.n	8010da0 <fill_last_frag+0x32>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	461a      	mov	r2, r3
 8010da2:	f7ff fde1 	bl	8010968 <put_fat>
 8010da6:	4603      	mov	r3, r0
 8010da8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010daa:	7dfb      	ldrb	r3, [r7, #23]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <fill_last_frag+0x46>
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	e009      	b.n	8010dc8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	69db      	ldr	r3, [r3, #28]
 8010db8:	1e5a      	subs	r2, r3, #1
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	69db      	ldr	r3, [r3, #28]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1da      	bne.n	8010d7c <fill_last_frag+0xe>
	}
	return FR_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3718      	adds	r7, #24
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	@ 0x28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d904      	bls.n	8010dfe <remove_chain+0x2e>
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d301      	bcc.n	8010e02 <remove_chain+0x32>
 8010dfe:	2302      	movs	r3, #2
 8010e00:	e096      	b.n	8010f30 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d014      	beq.n	8010e32 <remove_chain+0x62>
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b04      	cmp	r3, #4
 8010e0e:	d103      	bne.n	8010e18 <remove_chain+0x48>
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	79db      	ldrb	r3, [r3, #7]
 8010e14:	2b02      	cmp	r3, #2
 8010e16:	d00c      	beq.n	8010e32 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010e18:	f04f 32ff 	mov.w	r2, #4294967295
 8010e1c:	6879      	ldr	r1, [r7, #4]
 8010e1e:	69b8      	ldr	r0, [r7, #24]
 8010e20:	f7ff fda2 	bl	8010968 <put_fat>
 8010e24:	4603      	mov	r3, r0
 8010e26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010e28:	7ffb      	ldrb	r3, [r7, #31]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d001      	beq.n	8010e32 <remove_chain+0x62>
 8010e2e:	7ffb      	ldrb	r3, [r7, #31]
 8010e30:	e07e      	b.n	8010f30 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010e32:	68b9      	ldr	r1, [r7, #8]
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f7ff fc7d 	bl	8010734 <get_fat>
 8010e3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d055      	beq.n	8010eee <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d101      	bne.n	8010e4c <remove_chain+0x7c>
 8010e48:	2302      	movs	r3, #2
 8010e4a:	e071      	b.n	8010f30 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e52:	d101      	bne.n	8010e58 <remove_chain+0x88>
 8010e54:	2301      	movs	r3, #1
 8010e56:	e06b      	b.n	8010f30 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b04      	cmp	r3, #4
 8010e5e:	d00b      	beq.n	8010e78 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010e60:	2200      	movs	r2, #0
 8010e62:	68b9      	ldr	r1, [r7, #8]
 8010e64:	69b8      	ldr	r0, [r7, #24]
 8010e66:	f7ff fd7f 	bl	8010968 <put_fat>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010e6e:	7ffb      	ldrb	r3, [r7, #31]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d001      	beq.n	8010e78 <remove_chain+0xa8>
 8010e74:	7ffb      	ldrb	r3, [r7, #31]
 8010e76:	e05b      	b.n	8010f30 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	69da      	ldr	r2, [r3, #28]
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	3b02      	subs	r3, #2
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d20b      	bcs.n	8010e9e <remove_chain+0xce>
			fs->free_clst++;
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	69db      	ldr	r3, [r3, #28]
 8010e8a:	1c5a      	adds	r2, r3, #1
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	791b      	ldrb	r3, [r3, #4]
 8010e94:	f043 0301 	orr.w	r3, r3, #1
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	697a      	ldr	r2, [r7, #20]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d102      	bne.n	8010eae <remove_chain+0xde>
			ecl = nxt;
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	623b      	str	r3, [r7, #32]
 8010eac:	e017      	b.n	8010ede <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2b04      	cmp	r3, #4
 8010eb4:	d10f      	bne.n	8010ed6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8010eb6:	6a3a      	ldr	r2, [r7, #32]
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	1c5a      	adds	r2, r3, #1
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010ec2:	69b8      	ldr	r0, [r7, #24]
 8010ec4:	f7ff feba 	bl	8010c3c <change_bitmap>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8010ecc:	7ffb      	ldrb	r3, [r7, #31]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <remove_chain+0x106>
 8010ed2:	7ffb      	ldrb	r3, [r7, #31]
 8010ed4:	e02c      	b.n	8010f30 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	623b      	str	r3, [r7, #32]
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	6a1b      	ldr	r3, [r3, #32]
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d3a2      	bcc.n	8010e32 <remove_chain+0x62>
 8010eec:	e000      	b.n	8010ef0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8010eee:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	2b04      	cmp	r3, #4
 8010ef6:	d11a      	bne.n	8010f2e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d103      	bne.n	8010f06 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2200      	movs	r2, #0
 8010f02:	71da      	strb	r2, [r3, #7]
 8010f04:	e013      	b.n	8010f2e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	79db      	ldrb	r3, [r3, #7]
 8010f0a:	2b03      	cmp	r3, #3
 8010f0c:	d10f      	bne.n	8010f2e <remove_chain+0x15e>
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d30a      	bcc.n	8010f2e <remove_chain+0x15e>
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	689a      	ldr	r2, [r3, #8]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	699b      	ldr	r3, [r3, #24]
 8010f20:	4413      	add	r3, r2
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d802      	bhi.n	8010f2e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3728      	adds	r7, #40	@ 0x28
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b088      	sub	sp, #32
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10d      	bne.n	8010f6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d004      	beq.n	8010f64 <create_chain+0x2c>
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	6a1b      	ldr	r3, [r3, #32]
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d31b      	bcc.n	8010f9c <create_chain+0x64>
 8010f64:	2301      	movs	r3, #1
 8010f66:	61bb      	str	r3, [r7, #24]
 8010f68:	e018      	b.n	8010f9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010f6a:	6839      	ldr	r1, [r7, #0]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7ff fbe1 	bl	8010734 <get_fat>
 8010f72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d801      	bhi.n	8010f7e <create_chain+0x46>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e0d9      	b.n	8011132 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f84:	d101      	bne.n	8010f8a <create_chain+0x52>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	e0d3      	b.n	8011132 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	68fa      	ldr	r2, [r7, #12]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d201      	bcs.n	8010f98 <create_chain+0x60>
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	e0cc      	b.n	8011132 <create_chain+0x1fa>
		scl = clst;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2b04      	cmp	r3, #4
 8010fa2:	d164      	bne.n	801106e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	69b9      	ldr	r1, [r7, #24]
 8010fa8:	6938      	ldr	r0, [r7, #16]
 8010faa:	f7ff fdcb 	bl	8010b44 <find_bitmap>
 8010fae:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d003      	beq.n	8010fbe <create_chain+0x86>
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fbc:	d101      	bne.n	8010fc2 <create_chain+0x8a>
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	e0b7      	b.n	8011132 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	69f9      	ldr	r1, [r7, #28]
 8010fc8:	6938      	ldr	r0, [r7, #16]
 8010fca:	f7ff fe37 	bl	8010c3c <change_bitmap>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8010fd2:	7dfb      	ldrb	r3, [r7, #23]
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d101      	bne.n	8010fdc <create_chain+0xa4>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e0aa      	b.n	8011132 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d102      	bne.n	8010fe8 <create_chain+0xb0>
 8010fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe6:	e0a4      	b.n	8011132 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d103      	bne.n	8010ff6 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	71da      	strb	r2, [r3, #7]
 8010ff4:	e011      	b.n	801101a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	79db      	ldrb	r3, [r3, #7]
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d10d      	bne.n	801101a <create_chain+0xe2>
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	3301      	adds	r3, #1
 8011002:	69fa      	ldr	r2, [r7, #28]
 8011004:	429a      	cmp	r2, r3
 8011006:	d008      	beq.n	801101a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	69ba      	ldr	r2, [r7, #24]
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2203      	movs	r2, #3
 8011018:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	79db      	ldrb	r3, [r3, #7]
 801101e:	2b02      	cmp	r3, #2
 8011020:	d064      	beq.n	80110ec <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	69fa      	ldr	r2, [r7, #28]
 8011028:	429a      	cmp	r2, r3
 801102a:	d10b      	bne.n	8011044 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	69db      	ldr	r3, [r3, #28]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d003      	beq.n	801103c <create_chain+0x104>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	69db      	ldr	r3, [r3, #28]
 8011038:	3301      	adds	r3, #1
 801103a:	e000      	b.n	801103e <create_chain+0x106>
 801103c:	2302      	movs	r3, #2
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	61d3      	str	r3, [r2, #28]
 8011042:	e053      	b.n	80110ec <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	69db      	ldr	r3, [r3, #28]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d102      	bne.n	8011052 <create_chain+0x11a>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8011052:	69fa      	ldr	r2, [r7, #28]
 8011054:	6839      	ldr	r1, [r7, #0]
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7ff fe89 	bl	8010d6e <fill_last_frag>
 801105c:	4603      	mov	r3, r0
 801105e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8011060:	7dfb      	ldrb	r3, [r7, #23]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d142      	bne.n	80110ec <create_chain+0x1b4>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	61da      	str	r2, [r3, #28]
 801106c:	e03e      	b.n	80110ec <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	3301      	adds	r3, #1
 8011076:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	6a1b      	ldr	r3, [r3, #32]
 801107c:	69fa      	ldr	r2, [r7, #28]
 801107e:	429a      	cmp	r2, r3
 8011080:	d307      	bcc.n	8011092 <create_chain+0x15a>
				ncl = 2;
 8011082:	2302      	movs	r3, #2
 8011084:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011086:	69fa      	ldr	r2, [r7, #28]
 8011088:	69bb      	ldr	r3, [r7, #24]
 801108a:	429a      	cmp	r2, r3
 801108c:	d901      	bls.n	8011092 <create_chain+0x15a>
 801108e:	2300      	movs	r3, #0
 8011090:	e04f      	b.n	8011132 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011092:	69f9      	ldr	r1, [r7, #28]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7ff fb4d 	bl	8010734 <get_fat>
 801109a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00e      	beq.n	80110c0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d003      	beq.n	80110b0 <create_chain+0x178>
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ae:	d101      	bne.n	80110b4 <create_chain+0x17c>
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	e03e      	b.n	8011132 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80110b4:	69fa      	ldr	r2, [r7, #28]
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d1da      	bne.n	8011072 <create_chain+0x13a>
 80110bc:	2300      	movs	r3, #0
 80110be:	e038      	b.n	8011132 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80110c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80110c2:	f04f 32ff 	mov.w	r2, #4294967295
 80110c6:	69f9      	ldr	r1, [r7, #28]
 80110c8:	6938      	ldr	r0, [r7, #16]
 80110ca:	f7ff fc4d 	bl	8010968 <put_fat>
 80110ce:	4603      	mov	r3, r0
 80110d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d109      	bne.n	80110ec <create_chain+0x1b4>
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d006      	beq.n	80110ec <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6938      	ldr	r0, [r7, #16]
 80110e4:	f7ff fc40 	bl	8010968 <put_fat>
 80110e8:	4603      	mov	r3, r0
 80110ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d116      	bne.n	8011120 <create_chain+0x1e8>
		fs->last_clst = ncl;
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	69fa      	ldr	r2, [r7, #28]
 80110f6:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	69da      	ldr	r2, [r3, #28]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	6a1b      	ldr	r3, [r3, #32]
 8011100:	3b02      	subs	r3, #2
 8011102:	429a      	cmp	r2, r3
 8011104:	d804      	bhi.n	8011110 <create_chain+0x1d8>
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	69db      	ldr	r3, [r3, #28]
 801110a:	1e5a      	subs	r2, r3, #1
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	791b      	ldrb	r3, [r3, #4]
 8011114:	f043 0301 	orr.w	r3, r3, #1
 8011118:	b2da      	uxtb	r2, r3
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	711a      	strb	r2, [r3, #4]
 801111e:	e007      	b.n	8011130 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011120:	7dfb      	ldrb	r3, [r7, #23]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d102      	bne.n	801112c <create_chain+0x1f4>
 8011126:	f04f 33ff 	mov.w	r3, #4294967295
 801112a:	e000      	b.n	801112e <create_chain+0x1f6>
 801112c:	2301      	movs	r3, #1
 801112e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011130:	69fb      	ldr	r3, [r7, #28]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3720      	adds	r7, #32
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801113a:	b5b0      	push	{r4, r5, r7, lr}
 801113c:	b088      	sub	sp, #32
 801113e:	af00      	add	r7, sp, #0
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011150:	3304      	adds	r3, #4
 8011152:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011158:	f04f 0000 	mov.w	r0, #0
 801115c:	f04f 0100 	mov.w	r1, #0
 8011160:	0a50      	lsrs	r0, r2, #9
 8011162:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8011166:	0a59      	lsrs	r1, r3, #9
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	b29b      	uxth	r3, r3
 801116e:	2200      	movs	r2, #0
 8011170:	461c      	mov	r4, r3
 8011172:	4615      	mov	r5, r2
 8011174:	4622      	mov	r2, r4
 8011176:	462b      	mov	r3, r5
 8011178:	f7ef f902 	bl	8000380 <__aeabi_uldivmod>
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	4613      	mov	r3, r2
 8011182:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	1d1a      	adds	r2, r3, #4
 8011188:	61ba      	str	r2, [r7, #24]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <clmt_clust+0x5e>
 8011194:	2300      	movs	r3, #0
 8011196:	e010      	b.n	80111ba <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8011198:	69fa      	ldr	r2, [r7, #28]
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	429a      	cmp	r2, r3
 801119e:	d307      	bcc.n	80111b0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80111a0:	69fa      	ldr	r2, [r7, #28]
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	61fb      	str	r3, [r7, #28]
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	3304      	adds	r3, #4
 80111ac:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80111ae:	e7e9      	b.n	8011184 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 80111b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	4413      	add	r3, r2
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3720      	adds	r7, #32
 80111be:	46bd      	mov	sp, r7
 80111c0:	bdb0      	pop	{r4, r5, r7, pc}

080111c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b086      	sub	sp, #24
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	2b04      	cmp	r3, #4
 80111d8:	d102      	bne.n	80111e0 <dir_sdi+0x1e>
 80111da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111de:	e001      	b.n	80111e4 <dir_sdi+0x22>
 80111e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d904      	bls.n	80111f4 <dir_sdi+0x32>
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	f003 031f 	and.w	r3, r3, #31
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <dir_sdi+0x36>
		return FR_INT_ERR;
 80111f4:	2302      	movs	r3, #2
 80111f6:	e066      	b.n	80112c6 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d109      	bne.n	801121e <dir_sdi+0x5c>
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b02      	cmp	r3, #2
 8011210:	d905      	bls.n	801121e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011216:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10c      	bne.n	801123e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	095b      	lsrs	r3, r3, #5
 8011228:	693a      	ldr	r2, [r7, #16]
 801122a:	8912      	ldrh	r2, [r2, #8]
 801122c:	4293      	cmp	r3, r2
 801122e:	d301      	bcc.n	8011234 <dir_sdi+0x72>
 8011230:	2302      	movs	r3, #2
 8011232:	e048      	b.n	80112c6 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	639a      	str	r2, [r3, #56]	@ 0x38
 801123c:	e029      	b.n	8011292 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	895b      	ldrh	r3, [r3, #10]
 8011242:	025b      	lsls	r3, r3, #9
 8011244:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011246:	e019      	b.n	801127c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6979      	ldr	r1, [r7, #20]
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fa71 	bl	8010734 <get_fat>
 8011252:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125a:	d101      	bne.n	8011260 <dir_sdi+0x9e>
 801125c:	2301      	movs	r3, #1
 801125e:	e032      	b.n	80112c6 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2b01      	cmp	r3, #1
 8011264:	d904      	bls.n	8011270 <dir_sdi+0xae>
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	6a1b      	ldr	r3, [r3, #32]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	429a      	cmp	r2, r3
 801126e:	d301      	bcc.n	8011274 <dir_sdi+0xb2>
 8011270:	2302      	movs	r3, #2
 8011272:	e028      	b.n	80112c6 <dir_sdi+0x104>
			ofs -= csz;
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	429a      	cmp	r2, r3
 8011282:	d2e1      	bcs.n	8011248 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8011284:	6979      	ldr	r1, [r7, #20]
 8011286:	6938      	ldr	r0, [r7, #16]
 8011288:	f7ff fa34 	bl	80106f4 <clust2sect>
 801128c:	4602      	mov	r2, r0
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <dir_sdi+0xe2>
 80112a0:	2302      	movs	r3, #2
 80112a2:	e010      	b.n	80112c6 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	0a5b      	lsrs	r3, r3, #9
 80112ac:	441a      	add	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112be:	441a      	add	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3718      	adds	r7, #24
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}

080112ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80112ce:	b580      	push	{r7, lr}
 80112d0:	b086      	sub	sp, #24
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	6078      	str	r0, [r7, #4]
 80112d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112e2:	3320      	adds	r3, #32
 80112e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00b      	beq.n	8011306 <dir_next+0x38>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	2b04      	cmp	r3, #4
 80112f4:	d102      	bne.n	80112fc <dir_next+0x2e>
 80112f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112fa:	e001      	b.n	8011300 <dir_next+0x32>
 80112fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	429a      	cmp	r2, r3
 8011304:	d801      	bhi.n	801130a <dir_next+0x3c>
 8011306:	2304      	movs	r3, #4
 8011308:	e0b2      	b.n	8011470 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011310:	2b00      	cmp	r3, #0
 8011312:	f040 80a0 	bne.w	8011456 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801131a:	1c5a      	adds	r2, r3, #1
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10b      	bne.n	8011340 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	095b      	lsrs	r3, r3, #5
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	8912      	ldrh	r2, [r2, #8]
 8011330:	4293      	cmp	r3, r2
 8011332:	f0c0 8090 	bcc.w	8011456 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	639a      	str	r2, [r3, #56]	@ 0x38
 801133c:	2304      	movs	r3, #4
 801133e:	e097      	b.n	8011470 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	0a5b      	lsrs	r3, r3, #9
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	8952      	ldrh	r2, [r2, #10]
 8011348:	3a01      	subs	r2, #1
 801134a:	4013      	ands	r3, r2
 801134c:	2b00      	cmp	r3, #0
 801134e:	f040 8082 	bne.w	8011456 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011358:	4619      	mov	r1, r3
 801135a:	4610      	mov	r0, r2
 801135c:	f7ff f9ea 	bl	8010734 <get_fat>
 8011360:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d801      	bhi.n	801136c <dir_next+0x9e>
 8011368:	2302      	movs	r3, #2
 801136a:	e081      	b.n	8011470 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011372:	d101      	bne.n	8011378 <dir_next+0xaa>
 8011374:	2301      	movs	r3, #1
 8011376:	e07b      	b.n	8011470 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6a1b      	ldr	r3, [r3, #32]
 801137c:	697a      	ldr	r2, [r7, #20]
 801137e:	429a      	cmp	r2, r3
 8011380:	d35f      	bcc.n	8011442 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d104      	bne.n	8011392 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	639a      	str	r2, [r3, #56]	@ 0x38
 801138e:	2304      	movs	r3, #4
 8011390:	e06e      	b.n	8011470 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011398:	4619      	mov	r1, r3
 801139a:	4610      	mov	r0, r2
 801139c:	f7ff fdcc 	bl	8010f38 <create_chain>
 80113a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <dir_next+0xde>
 80113a8:	2307      	movs	r3, #7
 80113aa:	e061      	b.n	8011470 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d101      	bne.n	80113b6 <dir_next+0xe8>
 80113b2:	2302      	movs	r3, #2
 80113b4:	e05c      	b.n	8011470 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113bc:	d101      	bne.n	80113c2 <dir_next+0xf4>
 80113be:	2301      	movs	r3, #1
 80113c0:	e056      	b.n	8011470 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	79db      	ldrb	r3, [r3, #7]
 80113c6:	f043 0304 	orr.w	r3, r3, #4
 80113ca:	b2da      	uxtb	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f7ff f8af 	bl	8010534 <sync_window>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d001      	beq.n	80113e0 <dir_next+0x112>
 80113dc:	2301      	movs	r3, #1
 80113de:	e047      	b.n	8011470 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	333c      	adds	r3, #60	@ 0x3c
 80113e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113e8:	2100      	movs	r1, #0
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fe fee3 	bl	80101b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80113f0:	2300      	movs	r3, #0
 80113f2:	613b      	str	r3, [r7, #16]
 80113f4:	6979      	ldr	r1, [r7, #20]
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff f97c 	bl	80106f4 <clust2sect>
 80113fc:	4602      	mov	r2, r0
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	639a      	str	r2, [r3, #56]	@ 0x38
 8011402:	e012      	b.n	801142a <dir_next+0x15c>
						fs->wflag = 1;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2201      	movs	r2, #1
 8011408:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f7ff f892 	bl	8010534 <sync_window>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <dir_next+0x14c>
 8011416:	2301      	movs	r3, #1
 8011418:	e02a      	b.n	8011470 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	3301      	adds	r3, #1
 801141e:	613b      	str	r3, [r7, #16]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011424:	1c5a      	adds	r2, r3, #1
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	639a      	str	r2, [r3, #56]	@ 0x38
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	895b      	ldrh	r3, [r3, #10]
 801142e:	461a      	mov	r2, r3
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	4293      	cmp	r3, r2
 8011434:	d3e6      	bcc.n	8011404 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	1ad2      	subs	r2, r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8011448:	6979      	ldr	r1, [r7, #20]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff f952 	bl	80106f4 <clust2sect>
 8011450:	4602      	mov	r2, r0
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011468:	441a      	add	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3718      	adds	r7, #24
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011488:	2100      	movs	r1, #0
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7ff fe99 	bl	80111c2 <dir_sdi>
 8011490:	4603      	mov	r3, r0
 8011492:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011494:	7dfb      	ldrb	r3, [r7, #23]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d140      	bne.n	801151c <dir_alloc+0xa4>
		n = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114a2:	4619      	mov	r1, r3
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	f7ff f889 	bl	80105bc <move_window>
 80114aa:	4603      	mov	r3, r0
 80114ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80114ae:	7dfb      	ldrb	r3, [r7, #23]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d132      	bne.n	801151a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	2b04      	cmp	r3, #4
 80114ba:	d108      	bne.n	80114ce <dir_alloc+0x56>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	b25b      	sxtb	r3, r3
 80114c4:	43db      	mvns	r3, r3
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	09db      	lsrs	r3, r3, #7
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	e00f      	b.n	80114ee <dir_alloc+0x76>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	2be5      	cmp	r3, #229	@ 0xe5
 80114d6:	d004      	beq.n	80114e2 <dir_alloc+0x6a>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <dir_alloc+0x6e>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e000      	b.n	80114e8 <dir_alloc+0x70>
 80114e6:	2300      	movs	r3, #0
 80114e8:	f003 0301 	and.w	r3, r3, #1
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d007      	beq.n	8011502 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	3301      	adds	r3, #1
 80114f6:	613b      	str	r3, [r7, #16]
 80114f8:	693a      	ldr	r2, [r7, #16]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d102      	bne.n	8011506 <dir_alloc+0x8e>
 8011500:	e00c      	b.n	801151c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011502:	2300      	movs	r3, #0
 8011504:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011506:	2101      	movs	r1, #1
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7ff fee0 	bl	80112ce <dir_next>
 801150e:	4603      	mov	r3, r0
 8011510:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011512:	7dfb      	ldrb	r3, [r7, #23]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d0c2      	beq.n	801149e <dir_alloc+0x26>
 8011518:	e000      	b.n	801151c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 801151a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801151c:	7dfb      	ldrb	r3, [r7, #23]
 801151e:	2b04      	cmp	r3, #4
 8011520:	d101      	bne.n	8011526 <dir_alloc+0xae>
 8011522:	2307      	movs	r3, #7
 8011524:	75fb      	strb	r3, [r7, #23]
	return res;
 8011526:	7dfb      	ldrb	r3, [r7, #23]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3718      	adds	r7, #24
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	331a      	adds	r3, #26
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe fc32 	bl	800fda8 <ld_word>
 8011544:	4603      	mov	r3, r0
 8011546:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b03      	cmp	r3, #3
 801154e:	d109      	bne.n	8011564 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	3314      	adds	r3, #20
 8011554:	4618      	mov	r0, r3
 8011556:	f7fe fc27 	bl	800fda8 <ld_word>
 801155a:	4603      	mov	r3, r0
 801155c:	041b      	lsls	r3, r3, #16
 801155e:	68fa      	ldr	r2, [r7, #12]
 8011560:	4313      	orrs	r3, r2
 8011562:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011564:	68fb      	ldr	r3, [r7, #12]
}
 8011566:	4618      	mov	r0, r3
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b084      	sub	sp, #16
 8011572:	af00      	add	r7, sp, #0
 8011574:	60f8      	str	r0, [r7, #12]
 8011576:	60b9      	str	r1, [r7, #8]
 8011578:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	331a      	adds	r3, #26
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	b292      	uxth	r2, r2
 8011582:	4611      	mov	r1, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7fe fd26 	bl	800ffd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	2b03      	cmp	r3, #3
 8011590:	d109      	bne.n	80115a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	f103 0214 	add.w	r2, r3, #20
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	0c1b      	lsrs	r3, r3, #16
 801159c:	b29b      	uxth	r3, r3
 801159e:	4619      	mov	r1, r3
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7fe fd18 	bl	800ffd6 <st_word>
	}
}
 80115a6:	bf00      	nop
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
	...

080115b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80115b0:	b590      	push	{r4, r7, lr}
 80115b2:	b087      	sub	sp, #28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	331a      	adds	r3, #26
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fe fbf2 	bl	800fda8 <ld_word>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d001      	beq.n	80115ce <cmp_lfn+0x1e>
 80115ca:	2300      	movs	r3, #0
 80115cc:	e059      	b.n	8011682 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80115d6:	1e5a      	subs	r2, r3, #1
 80115d8:	4613      	mov	r3, r2
 80115da:	005b      	lsls	r3, r3, #1
 80115dc:	4413      	add	r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80115e4:	2301      	movs	r3, #1
 80115e6:	81fb      	strh	r3, [r7, #14]
 80115e8:	2300      	movs	r3, #0
 80115ea:	613b      	str	r3, [r7, #16]
 80115ec:	e033      	b.n	8011656 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80115ee:	4a27      	ldr	r2, [pc, #156]	@ (801168c <cmp_lfn+0xdc>)
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	4413      	add	r3, r2
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	461a      	mov	r2, r3
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	4413      	add	r3, r2
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fe fbd3 	bl	800fda8 <ld_word>
 8011602:	4603      	mov	r3, r0
 8011604:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011606:	89fb      	ldrh	r3, [r7, #14]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d01a      	beq.n	8011642 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011610:	d812      	bhi.n	8011638 <cmp_lfn+0x88>
 8011612:	89bb      	ldrh	r3, [r7, #12]
 8011614:	4618      	mov	r0, r3
 8011616:	f003 fe0d 	bl	8015234 <ff_wtoupper>
 801161a:	4603      	mov	r3, r0
 801161c:	461c      	mov	r4, r3
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	617a      	str	r2, [r7, #20]
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	4413      	add	r3, r2
 801162a:	881b      	ldrh	r3, [r3, #0]
 801162c:	4618      	mov	r0, r3
 801162e:	f003 fe01 	bl	8015234 <ff_wtoupper>
 8011632:	4603      	mov	r3, r0
 8011634:	429c      	cmp	r4, r3
 8011636:	d001      	beq.n	801163c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011638:	2300      	movs	r3, #0
 801163a:	e022      	b.n	8011682 <cmp_lfn+0xd2>
			}
			wc = uc;
 801163c:	89bb      	ldrh	r3, [r7, #12]
 801163e:	81fb      	strh	r3, [r7, #14]
 8011640:	e006      	b.n	8011650 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011642:	89bb      	ldrh	r3, [r7, #12]
 8011644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011648:	4293      	cmp	r3, r2
 801164a:	d001      	beq.n	8011650 <cmp_lfn+0xa0>
 801164c:	2300      	movs	r3, #0
 801164e:	e018      	b.n	8011682 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	3301      	adds	r3, #1
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	2b0c      	cmp	r3, #12
 801165a:	d9c8      	bls.n	80115ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00b      	beq.n	8011680 <cmp_lfn+0xd0>
 8011668:	89fb      	ldrh	r3, [r7, #14]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d008      	beq.n	8011680 <cmp_lfn+0xd0>
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	4413      	add	r3, r2
 8011676:	881b      	ldrh	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d001      	beq.n	8011680 <cmp_lfn+0xd0>
 801167c:	2300      	movs	r3, #0
 801167e:	e000      	b.n	8011682 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011680:	2301      	movs	r3, #1
}
 8011682:	4618      	mov	r0, r3
 8011684:	371c      	adds	r7, #28
 8011686:	46bd      	mov	sp, r7
 8011688:	bd90      	pop	{r4, r7, pc}
 801168a:	bf00      	nop
 801168c:	0801b458 	.word	0x0801b458

08011690 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	331a      	adds	r3, #26
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fe fb82 	bl	800fda8 <ld_word>
 80116a4:	4603      	mov	r3, r0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d001      	beq.n	80116ae <pick_lfn+0x1e>
 80116aa:	2300      	movs	r3, #0
 80116ac:	e04d      	b.n	801174a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116b6:	1e5a      	subs	r2, r3, #1
 80116b8:	4613      	mov	r3, r2
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	4413      	add	r3, r2
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	4413      	add	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80116c4:	2301      	movs	r3, #1
 80116c6:	81fb      	strh	r3, [r7, #14]
 80116c8:	2300      	movs	r3, #0
 80116ca:	613b      	str	r3, [r7, #16]
 80116cc:	e028      	b.n	8011720 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80116ce:	4a21      	ldr	r2, [pc, #132]	@ (8011754 <pick_lfn+0xc4>)
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	4413      	add	r3, r2
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	4413      	add	r3, r2
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fe fb63 	bl	800fda8 <ld_word>
 80116e2:	4603      	mov	r3, r0
 80116e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80116e6:	89fb      	ldrh	r3, [r7, #14]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d00f      	beq.n	801170c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80116f0:	d901      	bls.n	80116f6 <pick_lfn+0x66>
 80116f2:	2300      	movs	r3, #0
 80116f4:	e029      	b.n	801174a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80116f6:	89bb      	ldrh	r3, [r7, #12]
 80116f8:	81fb      	strh	r3, [r7, #14]
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	1c5a      	adds	r2, r3, #1
 80116fe:	617a      	str	r2, [r7, #20]
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4413      	add	r3, r2
 8011706:	89fa      	ldrh	r2, [r7, #14]
 8011708:	801a      	strh	r2, [r3, #0]
 801170a:	e006      	b.n	801171a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801170c:	89bb      	ldrh	r3, [r7, #12]
 801170e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011712:	4293      	cmp	r3, r2
 8011714:	d001      	beq.n	801171a <pick_lfn+0x8a>
 8011716:	2300      	movs	r3, #0
 8011718:	e017      	b.n	801174a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	3301      	adds	r3, #1
 801171e:	613b      	str	r3, [r7, #16]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	2b0c      	cmp	r3, #12
 8011724:	d9d3      	bls.n	80116ce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00a      	beq.n	8011748 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2bfe      	cmp	r3, #254	@ 0xfe
 8011736:	d901      	bls.n	801173c <pick_lfn+0xac>
 8011738:	2300      	movs	r3, #0
 801173a:	e006      	b.n	801174a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	4413      	add	r3, r2
 8011744:	2200      	movs	r2, #0
 8011746:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011748:	2301      	movs	r3, #1
}
 801174a:	4618      	mov	r0, r3
 801174c:	3718      	adds	r7, #24
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	0801b458 	.word	0x0801b458

08011758 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	4611      	mov	r1, r2
 8011764:	461a      	mov	r2, r3
 8011766:	460b      	mov	r3, r1
 8011768:	71fb      	strb	r3, [r7, #7]
 801176a:	4613      	mov	r3, r2
 801176c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	330d      	adds	r3, #13
 8011772:	79ba      	ldrb	r2, [r7, #6]
 8011774:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	330b      	adds	r3, #11
 801177a:	220f      	movs	r2, #15
 801177c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	330c      	adds	r3, #12
 8011782:	2200      	movs	r2, #0
 8011784:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	331a      	adds	r3, #26
 801178a:	2100      	movs	r1, #0
 801178c:	4618      	mov	r0, r3
 801178e:	f7fe fc22 	bl	800ffd6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	1e5a      	subs	r2, r3, #1
 8011796:	4613      	mov	r3, r2
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	4413      	add	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	82fb      	strh	r3, [r7, #22]
 80117a6:	2300      	movs	r3, #0
 80117a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80117aa:	8afb      	ldrh	r3, [r7, #22]
 80117ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d007      	beq.n	80117c4 <put_lfn+0x6c>
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	1c5a      	adds	r2, r3, #1
 80117b8:	61fa      	str	r2, [r7, #28]
 80117ba:	005b      	lsls	r3, r3, #1
 80117bc:	68fa      	ldr	r2, [r7, #12]
 80117be:	4413      	add	r3, r2
 80117c0:	881b      	ldrh	r3, [r3, #0]
 80117c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80117c4:	4a17      	ldr	r2, [pc, #92]	@ (8011824 <put_lfn+0xcc>)
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	4413      	add	r3, r2
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	461a      	mov	r2, r3
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	4413      	add	r3, r2
 80117d2:	8afa      	ldrh	r2, [r7, #22]
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe fbfd 	bl	800ffd6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80117dc:	8afb      	ldrh	r3, [r7, #22]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <put_lfn+0x90>
 80117e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80117e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	3301      	adds	r3, #1
 80117ec:	61bb      	str	r3, [r7, #24]
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	2b0c      	cmp	r3, #12
 80117f2:	d9da      	bls.n	80117aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80117f4:	8afb      	ldrh	r3, [r7, #22]
 80117f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d006      	beq.n	801180c <put_lfn+0xb4>
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	4413      	add	r3, r2
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d103      	bne.n	8011814 <put_lfn+0xbc>
 801180c:	79fb      	ldrb	r3, [r7, #7]
 801180e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011812:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	79fa      	ldrb	r2, [r7, #7]
 8011818:	701a      	strb	r2, [r3, #0]
}
 801181a:	bf00      	nop
 801181c:	3720      	adds	r7, #32
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
 8011822:	bf00      	nop
 8011824:	0801b458 	.word	0x0801b458

08011828 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08c      	sub	sp, #48	@ 0x30
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	607a      	str	r2, [r7, #4]
 8011834:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011836:	220b      	movs	r2, #11
 8011838:	68b9      	ldr	r1, [r7, #8]
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7fe fc9a 	bl	8010174 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b05      	cmp	r3, #5
 8011844:	d929      	bls.n	801189a <gen_numname+0x72>
		sr = seq;
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801184a:	e020      	b.n	801188e <gen_numname+0x66>
			wc = *lfn++;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	1c9a      	adds	r2, r3, #2
 8011850:	607a      	str	r2, [r7, #4]
 8011852:	881b      	ldrh	r3, [r3, #0]
 8011854:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8011856:	2300      	movs	r3, #0
 8011858:	62bb      	str	r3, [r7, #40]	@ 0x28
 801185a:	e015      	b.n	8011888 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	005a      	lsls	r2, r3, #1
 8011860:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011862:	f003 0301 	and.w	r3, r3, #1
 8011866:	4413      	add	r3, r2
 8011868:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801186a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801186c:	085b      	lsrs	r3, r3, #1
 801186e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011876:	2b00      	cmp	r3, #0
 8011878:	d003      	beq.n	8011882 <gen_numname+0x5a>
 801187a:	69fa      	ldr	r2, [r7, #28]
 801187c:	4b30      	ldr	r3, [pc, #192]	@ (8011940 <gen_numname+0x118>)
 801187e:	4053      	eors	r3, r2
 8011880:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011884:	3301      	adds	r3, #1
 8011886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801188a:	2b0f      	cmp	r3, #15
 801188c:	d9e6      	bls.n	801185c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1da      	bne.n	801184c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801189a:	2307      	movs	r3, #7
 801189c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	f003 030f 	and.w	r3, r3, #15
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	3330      	adds	r3, #48	@ 0x30
 80118aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80118ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118b2:	2b39      	cmp	r3, #57	@ 0x39
 80118b4:	d904      	bls.n	80118c0 <gen_numname+0x98>
 80118b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118ba:	3307      	adds	r3, #7
 80118bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80118c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c2:	1e5a      	subs	r2, r3, #1
 80118c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80118c6:	3330      	adds	r3, #48	@ 0x30
 80118c8:	443b      	add	r3, r7
 80118ca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80118ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	091b      	lsrs	r3, r3, #4
 80118d6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1df      	bne.n	801189e <gen_numname+0x76>
	ns[i] = '~';
 80118de:	f107 0214 	add.w	r2, r7, #20
 80118e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e4:	4413      	add	r3, r2
 80118e6:	227e      	movs	r2, #126	@ 0x7e
 80118e8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80118ea:	2300      	movs	r3, #0
 80118ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80118ee:	e002      	b.n	80118f6 <gen_numname+0xce>
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	3301      	adds	r3, #1
 80118f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80118f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d205      	bcs.n	801190a <gen_numname+0xe2>
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011902:	4413      	add	r3, r2
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	2b20      	cmp	r3, #32
 8011908:	d1f2      	bne.n	80118f0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801190a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801190c:	2b07      	cmp	r3, #7
 801190e:	d807      	bhi.n	8011920 <gen_numname+0xf8>
 8011910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011912:	1c5a      	adds	r2, r3, #1
 8011914:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011916:	3330      	adds	r3, #48	@ 0x30
 8011918:	443b      	add	r3, r7
 801191a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801191e:	e000      	b.n	8011922 <gen_numname+0xfa>
 8011920:	2120      	movs	r1, #32
 8011922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011924:	1c5a      	adds	r2, r3, #1
 8011926:	627a      	str	r2, [r7, #36]	@ 0x24
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	4413      	add	r3, r2
 801192c:	460a      	mov	r2, r1
 801192e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011932:	2b07      	cmp	r3, #7
 8011934:	d9e9      	bls.n	801190a <gen_numname+0xe2>
}
 8011936:	bf00      	nop
 8011938:	bf00      	nop
 801193a:	3730      	adds	r7, #48	@ 0x30
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	00011021 	.word	0x00011021

08011944 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801194c:	2300      	movs	r3, #0
 801194e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011950:	230b      	movs	r3, #11
 8011952:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011954:	7bfb      	ldrb	r3, [r7, #15]
 8011956:	b2da      	uxtb	r2, r3
 8011958:	0852      	lsrs	r2, r2, #1
 801195a:	01db      	lsls	r3, r3, #7
 801195c:	4313      	orrs	r3, r2
 801195e:	b2da      	uxtb	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	1c59      	adds	r1, r3, #1
 8011964:	6079      	str	r1, [r7, #4]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	4413      	add	r3, r2
 801196a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	3b01      	subs	r3, #1
 8011970:	60bb      	str	r3, [r7, #8]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1ed      	bne.n	8011954 <sum_sfn+0x10>
	return sum;
 8011978:	7bfb      	ldrb	r3, [r7, #15]
}
 801197a:	4618      	mov	r0, r3
 801197c:	3714      	adds	r7, #20
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr

08011986 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011986:	b480      	push	{r7}
 8011988:	b087      	sub	sp, #28
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3301      	adds	r3, #1
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	3301      	adds	r3, #1
 8011996:	015b      	lsls	r3, r3, #5
 8011998:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 801199a:	2300      	movs	r3, #0
 801199c:	827b      	strh	r3, [r7, #18]
 801199e:	2300      	movs	r3, #0
 80119a0:	617b      	str	r3, [r7, #20]
 80119a2:	e015      	b.n	80119d0 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	d103      	bne.n	80119b2 <xdir_sum+0x2c>
			i++;
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	3301      	adds	r3, #1
 80119ae:	617b      	str	r3, [r7, #20]
 80119b0:	e00b      	b.n	80119ca <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80119b2:	8a7b      	ldrh	r3, [r7, #18]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	0852      	lsrs	r2, r2, #1
 80119b8:	03db      	lsls	r3, r3, #15
 80119ba:	4313      	orrs	r3, r2
 80119bc:	b29b      	uxth	r3, r3
 80119be:	6879      	ldr	r1, [r7, #4]
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	440a      	add	r2, r1
 80119c4:	7812      	ldrb	r2, [r2, #0]
 80119c6:	4413      	add	r3, r2
 80119c8:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	3301      	adds	r3, #1
 80119ce:	617b      	str	r3, [r7, #20]
 80119d0:	697a      	ldr	r2, [r7, #20]
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d3e5      	bcc.n	80119a4 <xdir_sum+0x1e>
		}
	}
	return sum;
 80119d8:	8a7b      	ldrh	r3, [r7, #18]
}
 80119da:	4618      	mov	r0, r3
 80119dc:	371c      	adds	r7, #28
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr

080119e6 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b084      	sub	sp, #16
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80119f2:	e01b      	b.n	8011a2c <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80119f4:	89bb      	ldrh	r3, [r7, #12]
 80119f6:	4618      	mov	r0, r3
 80119f8:	f003 fc1c 	bl	8015234 <ff_wtoupper>
 80119fc:	4603      	mov	r3, r0
 80119fe:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011a00:	89fb      	ldrh	r3, [r7, #14]
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	0852      	lsrs	r2, r2, #1
 8011a06:	03db      	lsls	r3, r3, #15
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	89bb      	ldrh	r3, [r7, #12]
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	4413      	add	r3, r2
 8011a14:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011a16:	89fb      	ldrh	r3, [r7, #14]
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	0852      	lsrs	r2, r2, #1
 8011a1c:	03db      	lsls	r3, r3, #15
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	89bb      	ldrh	r3, [r7, #12]
 8011a24:	0a1b      	lsrs	r3, r3, #8
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	4413      	add	r3, r2
 8011a2a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	1c9a      	adds	r2, r3, #2
 8011a30:	607a      	str	r2, [r7, #4]
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	81bb      	strh	r3, [r7, #12]
 8011a36:	89bb      	ldrh	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d1db      	bne.n	80119f4 <xname_sum+0xe>
	}
	return sum;
 8011a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3710      	adds	r7, #16
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}

08011a46 <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 8011a46:	b480      	push	{r7}
 8011a48:	b083      	sub	sp, #12
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	6039      	str	r1, [r7, #0]
 8011a50:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	ea4f 0273 	mov.w	r2, r3, ror #1
 8011a58:	79fb      	ldrb	r3, [r7, #7]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	603b      	str	r3, [r7, #0]
	return sum;
 8011a5e:	683b      	ldr	r3, [r7, #0]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011a6c:	b590      	push	{r4, r7, lr}
 8011a6e:	b087      	sub	sp, #28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a84:	4619      	mov	r1, r3
 8011a86:	4610      	mov	r0, r2
 8011a88:	f7fe fd98 	bl	80105bc <move_window>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011a90:	7bfb      	ldrb	r3, [r7, #15]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <load_xdir+0x2e>
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	e09f      	b.n	8011bda <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	2b85      	cmp	r3, #133	@ 0x85
 8011aa2:	d001      	beq.n	8011aa8 <load_xdir+0x3c>
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	e098      	b.n	8011bda <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aac:	2220      	movs	r2, #32
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6938      	ldr	r0, [r7, #16]
 8011ab2:	f7fe fb5f 	bl	8010174 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	3301      	adds	r3, #1
 8011abe:	015b      	lsls	r3, r3, #5
 8011ac0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	2b5f      	cmp	r3, #95	@ 0x5f
 8011ac6:	d903      	bls.n	8011ad0 <load_xdir+0x64>
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8011ace:	d901      	bls.n	8011ad4 <load_xdir+0x68>
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	e082      	b.n	8011bda <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff fbf9 	bl	80112ce <dir_next>
 8011adc:	4603      	mov	r3, r0
 8011ade:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011ae0:	7bfb      	ldrb	r3, [r7, #15]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <load_xdir+0x7e>
 8011ae6:	7bfb      	ldrb	r3, [r7, #15]
 8011ae8:	e077      	b.n	8011bda <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011af2:	4619      	mov	r1, r3
 8011af4:	4610      	mov	r0, r2
 8011af6:	f7fe fd61 	bl	80105bc <move_window>
 8011afa:	4603      	mov	r3, r0
 8011afc:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011afe:	7bfb      	ldrb	r3, [r7, #15]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <load_xdir+0x9c>
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	e068      	b.n	8011bda <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011b10:	d001      	beq.n	8011b16 <load_xdir+0xaa>
 8011b12:	2302      	movs	r3, #2
 8011b14:	e061      	b.n	8011bda <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	f103 0020 	add.w	r0, r3, #32
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b20:	2220      	movs	r2, #32
 8011b22:	4619      	mov	r1, r3
 8011b24:	f7fe fb26 	bl	8010174 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	3323      	adds	r3, #35	@ 0x23
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	332c      	adds	r3, #44	@ 0x2c
 8011b30:	4a2c      	ldr	r2, [pc, #176]	@ (8011be4 <load_xdir+0x178>)
 8011b32:	fba2 2303 	umull	r2, r3, r2, r3
 8011b36:	08db      	lsrs	r3, r3, #3
 8011b38:	015b      	lsls	r3, r3, #5
 8011b3a:	68ba      	ldr	r2, [r7, #8]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d201      	bcs.n	8011b44 <load_xdir+0xd8>
 8011b40:	2302      	movs	r3, #2
 8011b42:	e04a      	b.n	8011bda <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011b44:	2340      	movs	r3, #64	@ 0x40
 8011b46:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011b48:	2100      	movs	r1, #0
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7ff fbbf 	bl	80112ce <dir_next>
 8011b50:	4603      	mov	r3, r0
 8011b52:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011b54:	7bfb      	ldrb	r3, [r7, #15]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <load_xdir+0xf2>
 8011b5a:	7bfb      	ldrb	r3, [r7, #15]
 8011b5c:	e03d      	b.n	8011bda <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b66:	4619      	mov	r1, r3
 8011b68:	4610      	mov	r0, r2
 8011b6a:	f7fe fd27 	bl	80105bc <move_window>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011b72:	7bfb      	ldrb	r3, [r7, #15]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <load_xdir+0x110>
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
 8011b7a:	e02e      	b.n	8011bda <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	2bc1      	cmp	r3, #193	@ 0xc1
 8011b84:	d001      	beq.n	8011b8a <load_xdir+0x11e>
 8011b86:	2302      	movs	r3, #2
 8011b88:	e027      	b.n	8011bda <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8011b90:	d208      	bcs.n	8011ba4 <load_xdir+0x138>
 8011b92:	693a      	ldr	r2, [r7, #16]
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	18d0      	adds	r0, r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b9c:	2220      	movs	r2, #32
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f7fe fae8 	bl	8010174 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	3320      	adds	r3, #32
 8011ba8:	617b      	str	r3, [r7, #20]
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d3ca      	bcc.n	8011b48 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8011bb8:	d80e      	bhi.n	8011bd8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011bba:	6938      	ldr	r0, [r7, #16]
 8011bbc:	f7ff fee3 	bl	8011986 <xdir_sum>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	461c      	mov	r4, r3
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	3302      	adds	r3, #2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fe f8ed 	bl	800fda8 <ld_word>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	d001      	beq.n	8011bd8 <load_xdir+0x16c>
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	e000      	b.n	8011bda <load_xdir+0x16e>
	}
	return FR_OK;
 8011bd8:	2300      	movs	r3, #0
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	371c      	adds	r7, #28
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd90      	pop	{r4, r7, pc}
 8011be2:	bf00      	nop
 8011be4:	88888889 	.word	0x88888889

08011be8 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011be8:	b5b0      	push	{r4, r5, r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	6808      	ldr	r0, [r1, #0]
 8011bf6:	6879      	ldr	r1, [r7, #4]
 8011bf8:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8011bfa:	6839      	ldr	r1, [r7, #0]
 8011bfc:	6a08      	ldr	r0, [r1, #32]
 8011bfe:	6879      	ldr	r1, [r7, #4]
 8011c00:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8011c06:	b2c8      	uxtb	r0, r1
 8011c08:	6879      	ldr	r1, [r7, #4]
 8011c0a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8011c10:	2000      	movs	r0, #0
 8011c12:	460c      	mov	r4, r1
 8011c14:	4605      	mov	r5, r0
 8011c16:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	6879      	ldr	r1, [r7, #4]
 8011c1e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c2e:	4619      	mov	r1, r3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff fac6 	bl	80111c2 <dir_sdi>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d104      	bne.n	8011c4a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7ff ff13 	bl	8011a6c <load_xdir>
 8011c46:	4603      	mov	r3, r0
 8011c48:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bdb0      	pop	{r4, r5, r7, pc}

08011c54 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011c54:	b590      	push	{r4, r7, lr}
 8011c56:	b087      	sub	sp, #28
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	691b      	ldr	r3, [r3, #16]
 8011c62:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	1c9c      	adds	r4, r3, #2
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f7ff fe8c 	bl	8011986 <xdir_sum>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	4619      	mov	r1, r3
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7fe f9af 	bl	800ffd6 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c86:	4619      	mov	r1, r3
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff fa9a 	bl	80111c2 <dir_sdi>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011c92:	e026      	b.n	8011ce2 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	f7fe fc8c 	bl	80105bc <move_window>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ca8:	7dfb      	ldrb	r3, [r7, #23]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d11d      	bne.n	8011cea <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	68f9      	ldr	r1, [r7, #12]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fe fa5c 	bl	8010174 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	613b      	str	r3, [r7, #16]
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d00e      	beq.n	8011cee <store_xdir+0x9a>
		dirb += SZDIRE;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	3320      	adds	r3, #32
 8011cd4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff faf8 	bl	80112ce <dir_next>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011ce2:	7dfb      	ldrb	r3, [r7, #23]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d0d5      	beq.n	8011c94 <store_xdir+0x40>
 8011ce8:	e002      	b.n	8011cf0 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011cea:	bf00      	nop
 8011cec:	e000      	b.n	8011cf0 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011cee:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011cf0:	7dfb      	ldrb	r3, [r7, #23]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <store_xdir+0xa8>
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d101      	bne.n	8011d00 <store_xdir+0xac>
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
 8011cfe:	e000      	b.n	8011d02 <store_xdir+0xae>
 8011d00:	2302      	movs	r3, #2
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	371c      	adds	r7, #28
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd90      	pop	{r4, r7, pc}

08011d0a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011d0a:	b590      	push	{r4, r7, lr}
 8011d0c:	b085      	sub	sp, #20
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011d14:	2240      	movs	r2, #64	@ 0x40
 8011d16:	2100      	movs	r1, #0
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7fe fa4c 	bl	80101b6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2285      	movs	r2, #133	@ 0x85
 8011d22:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3320      	adds	r3, #32
 8011d28:	22c0      	movs	r2, #192	@ 0xc0
 8011d2a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	72bb      	strb	r3, [r7, #10]
 8011d30:	2301      	movs	r3, #1
 8011d32:	72fb      	strb	r3, [r7, #11]
 8011d34:	2301      	movs	r3, #1
 8011d36:	813b      	strh	r3, [r7, #8]
 8011d38:	2340      	movs	r3, #64	@ 0x40
 8011d3a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	1c5a      	adds	r2, r3, #1
 8011d40:	60fa      	str	r2, [r7, #12]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	4413      	add	r3, r2
 8011d46:	22c1      	movs	r2, #193	@ 0xc1
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	1c5a      	adds	r2, r3, #1
 8011d4e:	60fa      	str	r2, [r7, #12]
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	4413      	add	r3, r2
 8011d54:	2200      	movs	r2, #0
 8011d56:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011d58:	893b      	ldrh	r3, [r7, #8]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00b      	beq.n	8011d76 <create_xdir+0x6c>
 8011d5e:	7abb      	ldrb	r3, [r7, #10]
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	683a      	ldr	r2, [r7, #0]
 8011d64:	4413      	add	r3, r2
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	813b      	strh	r3, [r7, #8]
 8011d6a:	893b      	ldrh	r3, [r7, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <create_xdir+0x6c>
 8011d70:	7abb      	ldrb	r3, [r7, #10]
 8011d72:	3301      	adds	r3, #1
 8011d74:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	893a      	ldrh	r2, [r7, #8]
 8011d7e:	4611      	mov	r1, r2
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe f928 	bl	800ffd6 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	3302      	adds	r3, #2
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f003 031f 	and.w	r3, r3, #31
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d1e0      	bne.n	8011d58 <create_xdir+0x4e>
		nb++;
 8011d96:	7afb      	ldrb	r3, [r7, #11]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011d9c:	7abb      	ldrb	r3, [r7, #10]
 8011d9e:	005b      	lsls	r3, r3, #1
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	4413      	add	r3, r2
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1c8      	bne.n	8011d3c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3323      	adds	r3, #35	@ 0x23
 8011dae:	7aba      	ldrb	r2, [r7, #10]
 8011db0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	3301      	adds	r3, #1
 8011db6:	7afa      	ldrb	r2, [r7, #11]
 8011db8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8011dc0:	6838      	ldr	r0, [r7, #0]
 8011dc2:	f7ff fe10 	bl	80119e6 <xname_sum>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f7fe f903 	bl	800ffd6 <st_word>
}
 8011dd0:	bf00      	nop
 8011dd2:	3714      	adds	r7, #20
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd90      	pop	{r4, r7, pc}

08011dd8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b086      	sub	sp, #24
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011de2:	2304      	movs	r3, #4
 8011de4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011dec:	23ff      	movs	r3, #255	@ 0xff
 8011dee:	757b      	strb	r3, [r7, #21]
 8011df0:	23ff      	movs	r3, #255	@ 0xff
 8011df2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011df4:	e09f      	b.n	8011f36 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6938      	ldr	r0, [r7, #16]
 8011dfe:	f7fe fbdd 	bl	80105bc <move_window>
 8011e02:	4603      	mov	r3, r0
 8011e04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f040 809a 	bne.w	8011f42 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011e16:	7dbb      	ldrb	r3, [r7, #22]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d102      	bne.n	8011e22 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011e1c:	2304      	movs	r3, #4
 8011e1e:	75fb      	strb	r3, [r7, #23]
 8011e20:	e096      	b.n	8011f50 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	d118      	bne.n	8011e5c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011e2a:	7dbb      	ldrb	r3, [r7, #22]
 8011e2c:	2b85      	cmp	r3, #133	@ 0x85
 8011e2e:	d179      	bne.n	8011f24 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f7ff fe17 	bl	8011a6c <load_xdir>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d17e      	bne.n	8011f46 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	719a      	strb	r2, [r3, #6]
					}
					break;
 8011e5a:	e074      	b.n	8011f46 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e60:	330b      	adds	r3, #11
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e68:	73fb      	strb	r3, [r7, #15]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	7bfa      	ldrb	r2, [r7, #15]
 8011e6e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011e70:	7dbb      	ldrb	r3, [r7, #22]
 8011e72:	2be5      	cmp	r3, #229	@ 0xe5
 8011e74:	d00e      	beq.n	8011e94 <dir_read+0xbc>
 8011e76:	7dbb      	ldrb	r3, [r7, #22]
 8011e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e7a:	d00b      	beq.n	8011e94 <dir_read+0xbc>
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	f023 0320 	bic.w	r3, r3, #32
 8011e82:	2b08      	cmp	r3, #8
 8011e84:	bf0c      	ite	eq
 8011e86:	2301      	moveq	r3, #1
 8011e88:	2300      	movne	r3, #0
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d002      	beq.n	8011e9a <dir_read+0xc2>
				ord = 0xFF;
 8011e94:	23ff      	movs	r3, #255	@ 0xff
 8011e96:	757b      	strb	r3, [r7, #21]
 8011e98:	e044      	b.n	8011f24 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011e9a:	7bfb      	ldrb	r3, [r7, #15]
 8011e9c:	2b0f      	cmp	r3, #15
 8011e9e:	d12f      	bne.n	8011f00 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011ea0:	7dbb      	ldrb	r3, [r7, #22]
 8011ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00d      	beq.n	8011ec6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011eae:	7b5b      	ldrb	r3, [r3, #13]
 8011eb0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011eb2:	7dbb      	ldrb	r3, [r7, #22]
 8011eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011eb8:	75bb      	strb	r3, [r7, #22]
 8011eba:	7dbb      	ldrb	r3, [r7, #22]
 8011ebc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011ec6:	7dba      	ldrb	r2, [r7, #22]
 8011ec8:	7d7b      	ldrb	r3, [r7, #21]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d115      	bne.n	8011efa <dir_read+0x122>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ed2:	330d      	adds	r3, #13
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	7d3a      	ldrb	r2, [r7, #20]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d10e      	bne.n	8011efa <dir_read+0x122>
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	68da      	ldr	r2, [r3, #12]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4610      	mov	r0, r2
 8011ee8:	f7ff fbd2 	bl	8011690 <pick_lfn>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d003      	beq.n	8011efa <dir_read+0x122>
 8011ef2:	7d7b      	ldrb	r3, [r7, #21]
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	e000      	b.n	8011efc <dir_read+0x124>
 8011efa:	23ff      	movs	r3, #255	@ 0xff
 8011efc:	757b      	strb	r3, [r7, #21]
 8011efe:	e011      	b.n	8011f24 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011f00:	7d7b      	ldrb	r3, [r7, #21]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d109      	bne.n	8011f1a <dir_read+0x142>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff fd1a 	bl	8011944 <sum_sfn>
 8011f10:	4603      	mov	r3, r0
 8011f12:	461a      	mov	r2, r3
 8011f14:	7d3b      	ldrb	r3, [r7, #20]
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d017      	beq.n	8011f4a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f20:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8011f22:	e012      	b.n	8011f4a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011f24:	2100      	movs	r1, #0
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff f9d1 	bl	80112ce <dir_next>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d10b      	bne.n	8011f4e <dir_read+0x176>
	while (dp->sect) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f47f af5b 	bne.w	8011df6 <dir_read+0x1e>
 8011f40:	e006      	b.n	8011f50 <dir_read+0x178>
		if (res != FR_OK) break;
 8011f42:	bf00      	nop
 8011f44:	e004      	b.n	8011f50 <dir_read+0x178>
					break;
 8011f46:	bf00      	nop
 8011f48:	e002      	b.n	8011f50 <dir_read+0x178>
					break;
 8011f4a:	bf00      	nop
 8011f4c:	e000      	b.n	8011f50 <dir_read+0x178>
		if (res != FR_OK) break;
 8011f4e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011f50:	7dfb      	ldrb	r3, [r7, #23]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d002      	beq.n	8011f5c <dir_read+0x184>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8011f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3718      	adds	r7, #24
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}

08011f66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f66:	b590      	push	{r4, r7, lr}
 8011f68:	b089      	sub	sp, #36	@ 0x24
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f74:	2100      	movs	r1, #0
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff f923 	bl	80111c2 <dir_sdi>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8011f80:	7ffb      	ldrb	r3, [r7, #31]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d001      	beq.n	8011f8a <dir_find+0x24>
 8011f86:	7ffb      	ldrb	r3, [r7, #31]
 8011f88:	e113      	b.n	80121b2 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b04      	cmp	r3, #4
 8011f90:	d165      	bne.n	801205e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7ff fd25 	bl	80119e6 <xname_sum>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011fa0:	e050      	b.n	8012044 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	691b      	ldr	r3, [r3, #16]
 8011fa6:	3324      	adds	r3, #36	@ 0x24
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fd fefd 	bl	800fda8 <ld_word>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	893b      	ldrh	r3, [r7, #8]
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d144      	bne.n	8012042 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	691b      	ldr	r3, [r3, #16]
 8011fbc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8011fc0:	76fb      	strb	r3, [r7, #27]
 8011fc2:	2340      	movs	r3, #64	@ 0x40
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	613b      	str	r3, [r7, #16]
 8011fca:	e029      	b.n	8012020 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	f003 031f 	and.w	r3, r3, #31
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d102      	bne.n	8011fdc <dir_find+0x76>
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	3302      	adds	r3, #2
 8011fda:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	691a      	ldr	r2, [r3, #16]
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	4413      	add	r3, r2
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fd fedf 	bl	800fda8 <ld_word>
 8011fea:	4603      	mov	r3, r0
 8011fec:	4618      	mov	r0, r3
 8011fee:	f003 f921 	bl	8015234 <ff_wtoupper>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	461c      	mov	r4, r3
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	68da      	ldr	r2, [r3, #12]
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	4413      	add	r3, r2
 8012000:	881b      	ldrh	r3, [r3, #0]
 8012002:	4618      	mov	r0, r3
 8012004:	f003 f916 	bl	8015234 <ff_wtoupper>
 8012008:	4603      	mov	r3, r0
 801200a:	429c      	cmp	r4, r3
 801200c:	d10c      	bne.n	8012028 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801200e:	7efb      	ldrb	r3, [r7, #27]
 8012010:	3b01      	subs	r3, #1
 8012012:	76fb      	strb	r3, [r7, #27]
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	3302      	adds	r3, #2
 8012018:	617b      	str	r3, [r7, #20]
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	3301      	adds	r3, #1
 801201e:	613b      	str	r3, [r7, #16]
 8012020:	7efb      	ldrb	r3, [r7, #27]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d1d2      	bne.n	8011fcc <dir_find+0x66>
 8012026:	e000      	b.n	801202a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8012028:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801202a:	7efb      	ldrb	r3, [r7, #27]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d109      	bne.n	8012044 <dir_find+0xde>
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	68da      	ldr	r2, [r3, #12]
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	005b      	lsls	r3, r3, #1
 8012038:	4413      	add	r3, r2
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00b      	beq.n	8012058 <dir_find+0xf2>
 8012040:	e000      	b.n	8012044 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012042:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012044:	2100      	movs	r1, #0
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7ff fec6 	bl	8011dd8 <dir_read>
 801204c:	4603      	mov	r3, r0
 801204e:	77fb      	strb	r3, [r7, #31]
 8012050:	7ffb      	ldrb	r3, [r7, #31]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d0a5      	beq.n	8011fa2 <dir_find+0x3c>
 8012056:	e000      	b.n	801205a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8012058:	bf00      	nop
		}
		return res;
 801205a:	7ffb      	ldrb	r3, [r7, #31]
 801205c:	e0a9      	b.n	80121b2 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801205e:	23ff      	movs	r3, #255	@ 0xff
 8012060:	773b      	strb	r3, [r7, #28]
 8012062:	7f3b      	ldrb	r3, [r7, #28]
 8012064:	777b      	strb	r3, [r7, #29]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f04f 32ff 	mov.w	r2, #4294967295
 801206c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012072:	4619      	mov	r1, r3
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f7fe faa1 	bl	80105bc <move_window>
 801207a:	4603      	mov	r3, r0
 801207c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801207e:	7ffb      	ldrb	r3, [r7, #31]
 8012080:	2b00      	cmp	r3, #0
 8012082:	f040 8090 	bne.w	80121a6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801208e:	7fbb      	ldrb	r3, [r7, #30]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d102      	bne.n	801209a <dir_find+0x134>
 8012094:	2304      	movs	r3, #4
 8012096:	77fb      	strb	r3, [r7, #31]
 8012098:	e08a      	b.n	80121b0 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801209e:	330b      	adds	r3, #11
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80120a6:	72fb      	strb	r3, [r7, #11]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	7afa      	ldrb	r2, [r7, #11]
 80120ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80120ae:	7fbb      	ldrb	r3, [r7, #30]
 80120b0:	2be5      	cmp	r3, #229	@ 0xe5
 80120b2:	d007      	beq.n	80120c4 <dir_find+0x15e>
 80120b4:	7afb      	ldrb	r3, [r7, #11]
 80120b6:	f003 0308 	and.w	r3, r3, #8
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d009      	beq.n	80120d2 <dir_find+0x16c>
 80120be:	7afb      	ldrb	r3, [r7, #11]
 80120c0:	2b0f      	cmp	r3, #15
 80120c2:	d006      	beq.n	80120d2 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80120c4:	23ff      	movs	r3, #255	@ 0xff
 80120c6:	777b      	strb	r3, [r7, #29]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f04f 32ff 	mov.w	r2, #4294967295
 80120ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80120d0:	e05e      	b.n	8012190 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80120d2:	7afb      	ldrb	r3, [r7, #11]
 80120d4:	2b0f      	cmp	r3, #15
 80120d6:	d136      	bne.n	8012146 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80120de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d154      	bne.n	8012190 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80120e6:	7fbb      	ldrb	r3, [r7, #30]
 80120e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00d      	beq.n	801210c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f4:	7b5b      	ldrb	r3, [r3, #13]
 80120f6:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80120f8:	7fbb      	ldrb	r3, [r7, #30]
 80120fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120fe:	77bb      	strb	r3, [r7, #30]
 8012100:	7fbb      	ldrb	r3, [r7, #30]
 8012102:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801210c:	7fba      	ldrb	r2, [r7, #30]
 801210e:	7f7b      	ldrb	r3, [r7, #29]
 8012110:	429a      	cmp	r2, r3
 8012112:	d115      	bne.n	8012140 <dir_find+0x1da>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012118:	330d      	adds	r3, #13
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	7f3a      	ldrb	r2, [r7, #28]
 801211e:	429a      	cmp	r2, r3
 8012120:	d10e      	bne.n	8012140 <dir_find+0x1da>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	68da      	ldr	r2, [r3, #12]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801212a:	4619      	mov	r1, r3
 801212c:	4610      	mov	r0, r2
 801212e:	f7ff fa3f 	bl	80115b0 <cmp_lfn>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d003      	beq.n	8012140 <dir_find+0x1da>
 8012138:	7f7b      	ldrb	r3, [r7, #29]
 801213a:	3b01      	subs	r3, #1
 801213c:	b2db      	uxtb	r3, r3
 801213e:	e000      	b.n	8012142 <dir_find+0x1dc>
 8012140:	23ff      	movs	r3, #255	@ 0xff
 8012142:	777b      	strb	r3, [r7, #29]
 8012144:	e024      	b.n	8012190 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012146:	7f7b      	ldrb	r3, [r7, #29]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d109      	bne.n	8012160 <dir_find+0x1fa>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012150:	4618      	mov	r0, r3
 8012152:	f7ff fbf7 	bl	8011944 <sum_sfn>
 8012156:	4603      	mov	r3, r0
 8012158:	461a      	mov	r2, r3
 801215a:	7f3b      	ldrb	r3, [r7, #28]
 801215c:	4293      	cmp	r3, r2
 801215e:	d024      	beq.n	80121aa <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8012166:	f003 0301 	and.w	r3, r3, #1
 801216a:	2b00      	cmp	r3, #0
 801216c:	d10a      	bne.n	8012184 <dir_find+0x21e>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	3340      	adds	r3, #64	@ 0x40
 8012176:	220b      	movs	r2, #11
 8012178:	4619      	mov	r1, r3
 801217a:	f7fe f837 	bl	80101ec <mem_cmp>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d014      	beq.n	80121ae <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012184:	23ff      	movs	r3, #255	@ 0xff
 8012186:	777b      	strb	r3, [r7, #29]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f04f 32ff 	mov.w	r2, #4294967295
 801218e:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012190:	2100      	movs	r1, #0
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7ff f89b 	bl	80112ce <dir_next>
 8012198:	4603      	mov	r3, r0
 801219a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 801219c:	7ffb      	ldrb	r3, [r7, #31]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	f43f af65 	beq.w	801206e <dir_find+0x108>
 80121a4:	e004      	b.n	80121b0 <dir_find+0x24a>
		if (res != FR_OK) break;
 80121a6:	bf00      	nop
 80121a8:	e002      	b.n	80121b0 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80121aa:	bf00      	nop
 80121ac:	e000      	b.n	80121b0 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80121ae:	bf00      	nop

	return res;
 80121b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3724      	adds	r7, #36	@ 0x24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd90      	pop	{r4, r7, pc}
	...

080121bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80121bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80121c0:	b0a0      	sub	sp, #128	@ 0x80
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80121d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d001      	beq.n	80121de <dir_register+0x22>
 80121da:	2306      	movs	r3, #6
 80121dc:	e18e      	b.n	80124fc <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80121de:	2300      	movs	r3, #0
 80121e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80121e2:	e002      	b.n	80121ea <dir_register+0x2e>
 80121e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80121e6:	3301      	adds	r3, #1
 80121e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80121ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121ec:	68da      	ldr	r2, [r3, #12]
 80121ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	4413      	add	r3, r2
 80121f4:	881b      	ldrh	r3, [r3, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1f4      	bne.n	80121e4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80121fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	2b04      	cmp	r3, #4
 8012200:	f040 809f 	bne.w	8012342 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012206:	330e      	adds	r3, #14
 8012208:	4aa2      	ldr	r2, [pc, #648]	@ (8012494 <dir_register+0x2d8>)
 801220a:	fba2 2303 	umull	r2, r3, r2, r3
 801220e:	08db      	lsrs	r3, r3, #3
 8012210:	3302      	adds	r3, #2
 8012212:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8012214:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff f92e 	bl	8011478 <dir_alloc>
 801221c:	4603      	mov	r3, r0
 801221e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8012222:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012226:	2b00      	cmp	r3, #0
 8012228:	d002      	beq.n	8012230 <dir_register+0x74>
 801222a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801222e:	e165      	b.n	80124fc <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012236:	3b01      	subs	r3, #1
 8012238:	015b      	lsls	r3, r3, #5
 801223a:	1ad2      	subs	r2, r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d072      	beq.n	801232e <dir_register+0x172>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	79db      	ldrb	r3, [r3, #7]
 801224c:	f003 0304 	and.w	r3, r3, #4
 8012250:	2b00      	cmp	r3, #0
 8012252:	d06c      	beq.n	801232e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801225a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801225c:	8949      	ldrh	r1, [r1, #10]
 801225e:	0249      	lsls	r1, r1, #9
 8012260:	2000      	movs	r0, #0
 8012262:	460c      	mov	r4, r1
 8012264:	4605      	mov	r5, r0
 8012266:	eb12 0804 	adds.w	r8, r2, r4
 801226a:	eb43 0905 	adc.w	r9, r3, r5
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4618      	mov	r0, r3
 8012278:	f7fe fd4a 	bl	8010d10 <fill_first_frag>
 801227c:	4603      	mov	r3, r0
 801227e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012282:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012286:	2b00      	cmp	r3, #0
 8012288:	d002      	beq.n	8012290 <dir_register+0xd4>
 801228a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801228e:	e135      	b.n	80124fc <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012296:	f04f 32ff 	mov.w	r2, #4294967295
 801229a:	4619      	mov	r1, r3
 801229c:	f7fe fd67 	bl	8010d6e <fill_last_frag>
 80122a0:	4603      	mov	r3, r0
 80122a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80122a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d002      	beq.n	80122b4 <dir_register+0xf8>
 80122ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122b2:	e123      	b.n	80124fc <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	f107 0308 	add.w	r3, r7, #8
 80122ba:	4611      	mov	r1, r2
 80122bc:	4618      	mov	r0, r3
 80122be:	f7ff fc93 	bl	8011be8 <load_obj_dir>
 80122c2:	4603      	mov	r3, r0
 80122c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80122c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d002      	beq.n	80122d6 <dir_register+0x11a>
 80122d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122d4:	e112      	b.n	80124fc <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80122d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122d8:	691b      	ldr	r3, [r3, #16]
 80122da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80122e4:	4608      	mov	r0, r1
 80122e6:	f7fd febd 	bl	8010064 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80122ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122ec:	691b      	ldr	r3, [r3, #16]
 80122ee:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80122f8:	4608      	mov	r0, r1
 80122fa:	f7fd feb3 	bl	8010064 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	79da      	ldrb	r2, [r3, #7]
 8012302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012304:	691b      	ldr	r3, [r3, #16]
 8012306:	3321      	adds	r3, #33	@ 0x21
 8012308:	f042 0201 	orr.w	r2, r2, #1
 801230c:	b2d2      	uxtb	r2, r2
 801230e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8012310:	f107 0308 	add.w	r3, r7, #8
 8012314:	4618      	mov	r0, r3
 8012316:	f7ff fc9d 	bl	8011c54 <store_xdir>
 801231a:	4603      	mov	r3, r0
 801231c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012320:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <dir_register+0x172>
 8012328:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801232c:	e0e6      	b.n	80124fc <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 801232e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012330:	691a      	ldr	r2, [r3, #16]
 8012332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012334:	68db      	ldr	r3, [r3, #12]
 8012336:	4619      	mov	r1, r3
 8012338:	4610      	mov	r0, r2
 801233a:	f7ff fce6 	bl	8011d0a <create_xdir>
		return FR_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	e0dc      	b.n	80124fc <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8012348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801234c:	220c      	movs	r2, #12
 801234e:	4618      	mov	r0, r3
 8012350:	f7fd ff10 	bl	8010174 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012354:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d033      	beq.n	80123c8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2240      	movs	r2, #64	@ 0x40
 8012364:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8012368:	2301      	movs	r3, #1
 801236a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801236c:	e016      	b.n	801239c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012376:	68da      	ldr	r2, [r3, #12]
 8012378:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801237c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801237e:	f7ff fa53 	bl	8011828 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff fdef 	bl	8011f66 <dir_find>
 8012388:	4603      	mov	r3, r0
 801238a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 801238e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8012396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012398:	3301      	adds	r3, #1
 801239a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801239c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801239e:	2b63      	cmp	r3, #99	@ 0x63
 80123a0:	d9e5      	bls.n	801236e <dir_register+0x1b2>
 80123a2:	e000      	b.n	80123a6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 80123a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80123a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80123a8:	2b64      	cmp	r3, #100	@ 0x64
 80123aa:	d101      	bne.n	80123b0 <dir_register+0x1f4>
 80123ac:	2307      	movs	r3, #7
 80123ae:	e0a5      	b.n	80124fc <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80123b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80123b4:	2b04      	cmp	r3, #4
 80123b6:	d002      	beq.n	80123be <dir_register+0x202>
 80123b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80123bc:	e09e      	b.n	80124fc <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80123be:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80123c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80123cc:	f003 0302 	and.w	r3, r3, #2
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d007      	beq.n	80123e4 <dir_register+0x228>
 80123d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123d6:	330c      	adds	r3, #12
 80123d8:	4a2f      	ldr	r2, [pc, #188]	@ (8012498 <dir_register+0x2dc>)
 80123da:	fba2 2303 	umull	r2, r3, r2, r3
 80123de:	089b      	lsrs	r3, r3, #2
 80123e0:	3301      	adds	r3, #1
 80123e2:	e000      	b.n	80123e6 <dir_register+0x22a>
 80123e4:	2301      	movs	r3, #1
 80123e6:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80123e8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff f844 	bl	8011478 <dir_alloc>
 80123f0:	4603      	mov	r3, r0
 80123f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80123f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d14f      	bne.n	801249e <dir_register+0x2e2>
 80123fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012400:	3b01      	subs	r3, #1
 8012402:	673b      	str	r3, [r7, #112]	@ 0x70
 8012404:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012406:	2b00      	cmp	r3, #0
 8012408:	d049      	beq.n	801249e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801240e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012410:	015b      	lsls	r3, r3, #5
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7fe fed3 	bl	80111c2 <dir_sdi>
 801241c:	4603      	mov	r3, r0
 801241e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8012422:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012426:	2b00      	cmp	r3, #0
 8012428:	d139      	bne.n	801249e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3340      	adds	r3, #64	@ 0x40
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff fa88 	bl	8011944 <sum_sfn>
 8012434:	4603      	mov	r3, r0
 8012436:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801243e:	4619      	mov	r1, r3
 8012440:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012442:	f7fe f8bb 	bl	80105bc <move_window>
 8012446:	4603      	mov	r3, r0
 8012448:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 801244c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012450:	2b00      	cmp	r3, #0
 8012452:	d123      	bne.n	801249c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012456:	68d8      	ldr	r0, [r3, #12]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801245c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801245e:	b2da      	uxtb	r2, r3
 8012460:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8012464:	f7ff f978 	bl	8011758 <put_lfn>
				fs->wflag = 1;
 8012468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801246a:	2201      	movs	r2, #1
 801246c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801246e:	2100      	movs	r1, #0
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7fe ff2c 	bl	80112ce <dir_next>
 8012476:	4603      	mov	r3, r0
 8012478:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 801247c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10c      	bne.n	801249e <dir_register+0x2e2>
 8012484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012486:	3b01      	subs	r3, #1
 8012488:	673b      	str	r3, [r7, #112]	@ 0x70
 801248a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1d4      	bne.n	801243a <dir_register+0x27e>
 8012490:	e005      	b.n	801249e <dir_register+0x2e2>
 8012492:	bf00      	nop
 8012494:	88888889 	.word	0x88888889
 8012498:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 801249c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801249e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d128      	bne.n	80124f8 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124aa:	4619      	mov	r1, r3
 80124ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80124ae:	f7fe f885 	bl	80105bc <move_window>
 80124b2:	4603      	mov	r3, r0
 80124b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 80124b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d11b      	bne.n	80124f8 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124c4:	2220      	movs	r2, #32
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fd fe74 	bl	80101b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	3340      	adds	r3, #64	@ 0x40
 80124d6:	220b      	movs	r2, #11
 80124d8:	4619      	mov	r1, r3
 80124da:	f7fd fe4b 	bl	8010174 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124e8:	330c      	adds	r3, #12
 80124ea:	f002 0218 	and.w	r2, r2, #24
 80124ee:	b2d2      	uxtb	r2, r2
 80124f0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80124f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124f4:	2201      	movs	r2, #1
 80124f6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80124f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3780      	adds	r7, #128	@ 0x80
 8012500:	46bd      	mov	sp, r7
 8012502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012506:	bf00      	nop

08012508 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b08a      	sub	sp, #40	@ 0x28
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	613b      	str	r3, [r7, #16]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	60fb      	str	r3, [r7, #12]
 8012520:	2300      	movs	r3, #0
 8012522:	617b      	str	r3, [r7, #20]
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	1c5a      	adds	r2, r3, #1
 801252c:	61ba      	str	r2, [r7, #24]
 801252e:	693a      	ldr	r2, [r7, #16]
 8012530:	4413      	add	r3, r2
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012538:	2b1f      	cmp	r3, #31
 801253a:	d940      	bls.n	80125be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801253c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801253e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012540:	d006      	beq.n	8012550 <create_name+0x48>
 8012542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012544:	2b5c      	cmp	r3, #92	@ 0x5c
 8012546:	d110      	bne.n	801256a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012548:	e002      	b.n	8012550 <create_name+0x48>
 801254a:	69bb      	ldr	r3, [r7, #24]
 801254c:	3301      	adds	r3, #1
 801254e:	61bb      	str	r3, [r7, #24]
 8012550:	693a      	ldr	r2, [r7, #16]
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	4413      	add	r3, r2
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	2b2f      	cmp	r3, #47	@ 0x2f
 801255a:	d0f6      	beq.n	801254a <create_name+0x42>
 801255c:	693a      	ldr	r2, [r7, #16]
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	4413      	add	r3, r2
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b5c      	cmp	r3, #92	@ 0x5c
 8012566:	d0f0      	beq.n	801254a <create_name+0x42>
			break;
 8012568:	e02a      	b.n	80125c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2bfe      	cmp	r3, #254	@ 0xfe
 801256e:	d901      	bls.n	8012574 <create_name+0x6c>
 8012570:	2306      	movs	r3, #6
 8012572:	e17d      	b.n	8012870 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012576:	b2db      	uxtb	r3, r3
 8012578:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801257a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801257c:	2101      	movs	r1, #1
 801257e:	4618      	mov	r0, r3
 8012580:	f002 fe1c 	bl	80151bc <ff_convert>
 8012584:	4603      	mov	r3, r0
 8012586:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <create_name+0x8a>
 801258e:	2306      	movs	r3, #6
 8012590:	e16e      	b.n	8012870 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012592:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012594:	2b7f      	cmp	r3, #127	@ 0x7f
 8012596:	d809      	bhi.n	80125ac <create_name+0xa4>
 8012598:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801259a:	4619      	mov	r1, r3
 801259c:	488d      	ldr	r0, [pc, #564]	@ (80127d4 <create_name+0x2cc>)
 801259e:	f7fd fe4c 	bl	801023a <chk_chr>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d001      	beq.n	80125ac <create_name+0xa4>
 80125a8:	2306      	movs	r3, #6
 80125aa:	e161      	b.n	8012870 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	617a      	str	r2, [r7, #20]
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	4413      	add	r3, r2
 80125b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80125ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80125bc:	e7b4      	b.n	8012528 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80125be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80125c0:	693a      	ldr	r2, [r7, #16]
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	441a      	add	r2, r3
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80125ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125cc:	2b1f      	cmp	r3, #31
 80125ce:	d801      	bhi.n	80125d4 <create_name+0xcc>
 80125d0:	2304      	movs	r3, #4
 80125d2:	e000      	b.n	80125d6 <create_name+0xce>
 80125d4:	2300      	movs	r3, #0
 80125d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80125da:	e011      	b.n	8012600 <create_name+0xf8>
		w = lfn[di - 1];
 80125dc:	697a      	ldr	r2, [r7, #20]
 80125de:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125e2:	4413      	add	r3, r2
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	4413      	add	r3, r2
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80125ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125f0:	2b20      	cmp	r3, #32
 80125f2:	d002      	beq.n	80125fa <create_name+0xf2>
 80125f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80125f8:	d106      	bne.n	8012608 <create_name+0x100>
		di--;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1ea      	bne.n	80125dc <create_name+0xd4>
 8012606:	e000      	b.n	801260a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012608:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	005b      	lsls	r3, r3, #1
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	4413      	add	r3, r2
 8012612:	2200      	movs	r2, #0
 8012614:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d101      	bne.n	8012620 <create_name+0x118>
 801261c:	2306      	movs	r3, #6
 801261e:	e127      	b.n	8012870 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3340      	adds	r3, #64	@ 0x40
 8012624:	220b      	movs	r2, #11
 8012626:	2120      	movs	r1, #32
 8012628:	4618      	mov	r0, r3
 801262a:	f7fd fdc4 	bl	80101b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801262e:	2300      	movs	r3, #0
 8012630:	61bb      	str	r3, [r7, #24]
 8012632:	e002      	b.n	801263a <create_name+0x132>
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	3301      	adds	r3, #1
 8012638:	61bb      	str	r3, [r7, #24]
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	68fa      	ldr	r2, [r7, #12]
 8012640:	4413      	add	r3, r2
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	2b20      	cmp	r3, #32
 8012646:	d0f5      	beq.n	8012634 <create_name+0x12c>
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	4413      	add	r3, r2
 8012650:	881b      	ldrh	r3, [r3, #0]
 8012652:	2b2e      	cmp	r3, #46	@ 0x2e
 8012654:	d0ee      	beq.n	8012634 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d009      	beq.n	8012670 <create_name+0x168>
 801265c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012660:	f043 0303 	orr.w	r3, r3, #3
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012668:	e002      	b.n	8012670 <create_name+0x168>
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	3b01      	subs	r3, #1
 801266e:	617b      	str	r3, [r7, #20]
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d009      	beq.n	801268a <create_name+0x182>
 8012676:	697a      	ldr	r2, [r7, #20]
 8012678:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801267c:	4413      	add	r3, r2
 801267e:	005b      	lsls	r3, r3, #1
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	4413      	add	r3, r2
 8012684:	881b      	ldrh	r3, [r3, #0]
 8012686:	2b2e      	cmp	r3, #46	@ 0x2e
 8012688:	d1ef      	bne.n	801266a <create_name+0x162>

	i = b = 0; ni = 8;
 801268a:	2300      	movs	r3, #0
 801268c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012690:	2300      	movs	r3, #0
 8012692:	623b      	str	r3, [r7, #32]
 8012694:	2308      	movs	r3, #8
 8012696:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012698:	69bb      	ldr	r3, [r7, #24]
 801269a:	1c5a      	adds	r2, r3, #1
 801269c:	61ba      	str	r2, [r7, #24]
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	4413      	add	r3, r2
 80126a4:	881b      	ldrh	r3, [r3, #0]
 80126a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80126a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 8090 	beq.w	80127d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80126b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126b2:	2b20      	cmp	r3, #32
 80126b4:	d006      	beq.n	80126c4 <create_name+0x1bc>
 80126b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80126ba:	d10a      	bne.n	80126d2 <create_name+0x1ca>
 80126bc:	69ba      	ldr	r2, [r7, #24]
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d006      	beq.n	80126d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80126c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126c8:	f043 0303 	orr.w	r3, r3, #3
 80126cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80126d0:	e07d      	b.n	80127ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80126d2:	6a3a      	ldr	r2, [r7, #32]
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d203      	bcs.n	80126e2 <create_name+0x1da>
 80126da:	69ba      	ldr	r2, [r7, #24]
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d123      	bne.n	801272a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	2b0b      	cmp	r3, #11
 80126e6:	d106      	bne.n	80126f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80126e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126ec:	f043 0303 	orr.w	r3, r3, #3
 80126f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80126f4:	e075      	b.n	80127e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80126f6:	69ba      	ldr	r2, [r7, #24]
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d005      	beq.n	801270a <create_name+0x202>
 80126fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012702:	f043 0303 	orr.w	r3, r3, #3
 8012706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	429a      	cmp	r2, r3
 8012710:	d866      	bhi.n	80127e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	61bb      	str	r3, [r7, #24]
 8012716:	2308      	movs	r3, #8
 8012718:	623b      	str	r3, [r7, #32]
 801271a:	230b      	movs	r3, #11
 801271c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801271e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012728:	e051      	b.n	80127ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801272a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801272c:	2b7f      	cmp	r3, #127	@ 0x7f
 801272e:	d914      	bls.n	801275a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012732:	2100      	movs	r1, #0
 8012734:	4618      	mov	r0, r3
 8012736:	f002 fd41 	bl	80151bc <ff_convert>
 801273a:	4603      	mov	r3, r0
 801273c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801273e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	d004      	beq.n	801274e <create_name+0x246>
 8012744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012746:	3b80      	subs	r3, #128	@ 0x80
 8012748:	4a23      	ldr	r2, [pc, #140]	@ (80127d8 <create_name+0x2d0>)
 801274a:	5cd3      	ldrb	r3, [r2, r3]
 801274c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801274e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012752:	f043 0302 	orr.w	r3, r3, #2
 8012756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801275a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801275c:	2b00      	cmp	r3, #0
 801275e:	d007      	beq.n	8012770 <create_name+0x268>
 8012760:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012762:	4619      	mov	r1, r3
 8012764:	481d      	ldr	r0, [pc, #116]	@ (80127dc <create_name+0x2d4>)
 8012766:	f7fd fd68 	bl	801023a <chk_chr>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d008      	beq.n	8012782 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012770:	235f      	movs	r3, #95	@ 0x5f
 8012772:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012778:	f043 0303 	orr.w	r3, r3, #3
 801277c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012780:	e01b      	b.n	80127ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012784:	2b40      	cmp	r3, #64	@ 0x40
 8012786:	d909      	bls.n	801279c <create_name+0x294>
 8012788:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801278a:	2b5a      	cmp	r3, #90	@ 0x5a
 801278c:	d806      	bhi.n	801279c <create_name+0x294>
					b |= 2;
 801278e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012792:	f043 0302 	orr.w	r3, r3, #2
 8012796:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801279a:	e00e      	b.n	80127ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801279c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801279e:	2b60      	cmp	r3, #96	@ 0x60
 80127a0:	d90b      	bls.n	80127ba <create_name+0x2b2>
 80127a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80127a4:	2b7a      	cmp	r3, #122	@ 0x7a
 80127a6:	d808      	bhi.n	80127ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80127a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80127ac:	f043 0301 	orr.w	r3, r3, #1
 80127b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80127b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80127b6:	3b20      	subs	r3, #32
 80127b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	1c5a      	adds	r2, r3, #1
 80127be:	623a      	str	r2, [r7, #32]
 80127c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80127c2:	b2d1      	uxtb	r1, r2
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	4413      	add	r3, r2
 80127c8:	460a      	mov	r2, r1
 80127ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 80127ce:	e763      	b.n	8012698 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80127d0:	bf00      	nop
 80127d2:	e006      	b.n	80127e2 <create_name+0x2da>
 80127d4:	0801aa40 	.word	0x0801aa40
 80127d8:	0801b3d8 	.word	0x0801b3d8
 80127dc:	0801aa4c 	.word	0x0801aa4c
			if (si > di) break;			/* No extension */
 80127e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127e8:	2be5      	cmp	r3, #229	@ 0xe5
 80127ea:	d103      	bne.n	80127f4 <create_name+0x2ec>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2205      	movs	r2, #5
 80127f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	2b08      	cmp	r3, #8
 80127f8:	d104      	bne.n	8012804 <create_name+0x2fc>
 80127fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012808:	f003 030c 	and.w	r3, r3, #12
 801280c:	2b0c      	cmp	r3, #12
 801280e:	d005      	beq.n	801281c <create_name+0x314>
 8012810:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012814:	f003 0303 	and.w	r3, r3, #3
 8012818:	2b03      	cmp	r3, #3
 801281a:	d105      	bne.n	8012828 <create_name+0x320>
 801281c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012820:	f043 0302 	orr.w	r3, r3, #2
 8012824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801282c:	f003 0302 	and.w	r3, r3, #2
 8012830:	2b00      	cmp	r3, #0
 8012832:	d117      	bne.n	8012864 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012834:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012838:	f003 0303 	and.w	r3, r3, #3
 801283c:	2b01      	cmp	r3, #1
 801283e:	d105      	bne.n	801284c <create_name+0x344>
 8012840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012844:	f043 0310 	orr.w	r3, r3, #16
 8012848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801284c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012850:	f003 030c 	and.w	r3, r3, #12
 8012854:	2b04      	cmp	r3, #4
 8012856:	d105      	bne.n	8012864 <create_name+0x35c>
 8012858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801285c:	f043 0308 	orr.w	r3, r3, #8
 8012860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801286a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 801286e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012870:	4618      	mov	r0, r3
 8012872:	3728      	adds	r7, #40	@ 0x28
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801288c:	e002      	b.n	8012894 <follow_path+0x1c>
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	3301      	adds	r3, #1
 8012892:	603b      	str	r3, [r7, #0]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b2f      	cmp	r3, #47	@ 0x2f
 801289a:	d0f8      	beq.n	801288e <follow_path+0x16>
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80128a2:	d0f4      	beq.n	801288e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80128a4:	693b      	ldr	r3, [r7, #16]
 80128a6:	2200      	movs	r2, #0
 80128a8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	2200      	movs	r2, #0
 80128ae:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b1f      	cmp	r3, #31
 80128b6:	d80a      	bhi.n	80128ce <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2280      	movs	r2, #128	@ 0x80
 80128bc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 80128c0:	2100      	movs	r1, #0
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7fe fc7d 	bl	80111c2 <dir_sdi>
 80128c8:	4603      	mov	r3, r0
 80128ca:	75fb      	strb	r3, [r7, #23]
 80128cc:	e078      	b.n	80129c0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80128ce:	463b      	mov	r3, r7
 80128d0:	4619      	mov	r1, r3
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f7ff fe18 	bl	8012508 <create_name>
 80128d8:	4603      	mov	r3, r0
 80128da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80128dc:	7dfb      	ldrb	r3, [r7, #23]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d169      	bne.n	80129b6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fb3f 	bl	8011f66 <dir_find>
 80128e8:	4603      	mov	r3, r0
 80128ea:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80128f2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80128f4:	7dfb      	ldrb	r3, [r7, #23]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00a      	beq.n	8012910 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80128fa:	7dfb      	ldrb	r3, [r7, #23]
 80128fc:	2b04      	cmp	r3, #4
 80128fe:	d15c      	bne.n	80129ba <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012900:	7afb      	ldrb	r3, [r7, #11]
 8012902:	f003 0304 	and.w	r3, r3, #4
 8012906:	2b00      	cmp	r3, #0
 8012908:	d157      	bne.n	80129ba <follow_path+0x142>
 801290a:	2305      	movs	r3, #5
 801290c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801290e:	e054      	b.n	80129ba <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012910:	7afb      	ldrb	r3, [r7, #11]
 8012912:	f003 0304 	and.w	r3, r3, #4
 8012916:	2b00      	cmp	r3, #0
 8012918:	d151      	bne.n	80129be <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	799b      	ldrb	r3, [r3, #6]
 801291e:	f003 0310 	and.w	r3, r3, #16
 8012922:	2b00      	cmp	r3, #0
 8012924:	d102      	bne.n	801292c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8012926:	2305      	movs	r3, #5
 8012928:	75fb      	strb	r3, [r7, #23]
 801292a:	e049      	b.n	80129c0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b04      	cmp	r3, #4
 8012932:	d130      	bne.n	8012996 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	689a      	ldr	r2, [r3, #8]
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012942:	4613      	mov	r3, r2
 8012944:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012948:	693a      	ldr	r2, [r7, #16]
 801294a:	79d2      	ldrb	r2, [r2, #7]
 801294c:	431a      	orrs	r2, r3
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	691b      	ldr	r3, [r3, #16]
 801295e:	3334      	adds	r3, #52	@ 0x34
 8012960:	4618      	mov	r0, r3
 8012962:	f7fd fa3a 	bl	800fdda <ld_dword>
 8012966:	4602      	mov	r2, r0
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	3321      	adds	r3, #33	@ 0x21
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	f003 0302 	and.w	r3, r3, #2
 8012978:	b2da      	uxtb	r2, r3
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	691b      	ldr	r3, [r3, #16]
 8012982:	3338      	adds	r3, #56	@ 0x38
 8012984:	4618      	mov	r0, r3
 8012986:	f7fd fa4b 	bl	800fe20 <ld_qword>
 801298a:	4602      	mov	r2, r0
 801298c:	460b      	mov	r3, r1
 801298e:	6939      	ldr	r1, [r7, #16]
 8012990:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012994:	e79b      	b.n	80128ce <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129a4:	4413      	add	r3, r2
 80129a6:	4619      	mov	r1, r3
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f7fe fdc1 	bl	8011530 <ld_clust>
 80129ae:	4602      	mov	r2, r0
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80129b4:	e78b      	b.n	80128ce <follow_path+0x56>
			if (res != FR_OK) break;
 80129b6:	bf00      	nop
 80129b8:	e002      	b.n	80129c0 <follow_path+0x148>
				break;
 80129ba:	bf00      	nop
 80129bc:	e000      	b.n	80129c0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129be:	bf00      	nop
			}
		}
	}

	return res;
 80129c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3718      	adds	r7, #24
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80129ca:	b480      	push	{r7}
 80129cc:	b087      	sub	sp, #28
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80129d2:	f04f 33ff 	mov.w	r3, #4294967295
 80129d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d031      	beq.n	8012a44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	617b      	str	r3, [r7, #20]
 80129e6:	e002      	b.n	80129ee <get_ldnumber+0x24>
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	3301      	adds	r3, #1
 80129ec:	617b      	str	r3, [r7, #20]
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	2b1f      	cmp	r3, #31
 80129f4:	d903      	bls.n	80129fe <get_ldnumber+0x34>
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80129fc:	d1f4      	bne.n	80129e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b3a      	cmp	r3, #58	@ 0x3a
 8012a04:	d11c      	bne.n	8012a40 <get_ldnumber+0x76>
			tp = *path;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	60fa      	str	r2, [r7, #12]
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	3b30      	subs	r3, #48	@ 0x30
 8012a16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	2b09      	cmp	r3, #9
 8012a1c:	d80e      	bhi.n	8012a3c <get_ldnumber+0x72>
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d10a      	bne.n	8012a3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d107      	bne.n	8012a3c <get_ldnumber+0x72>
					vol = (int)i;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	3301      	adds	r3, #1
 8012a34:	617b      	str	r3, [r7, #20]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	697a      	ldr	r2, [r7, #20]
 8012a3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	e002      	b.n	8012a46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012a40:	2300      	movs	r3, #0
 8012a42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012a44:	693b      	ldr	r3, [r7, #16]
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	371c      	adds	r7, #28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr
	...

08012a54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2200      	movs	r2, #0
 8012a62:	70da      	strb	r2, [r3, #3]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f04f 32ff 	mov.w	r2, #4294967295
 8012a6a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a6c:	6839      	ldr	r1, [r7, #0]
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7fd fda4 	bl	80105bc <move_window>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d001      	beq.n	8012a7e <check_fs+0x2a>
 8012a7a:	2304      	movs	r3, #4
 8012a7c:	e044      	b.n	8012b08 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	333c      	adds	r3, #60	@ 0x3c
 8012a82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fd f98e 	bl	800fda8 <ld_word>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d001      	beq.n	8012a9c <check_fs+0x48>
 8012a98:	2303      	movs	r3, #3
 8012a9a:	e035      	b.n	8012b08 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012aa2:	2be9      	cmp	r3, #233	@ 0xe9
 8012aa4:	d009      	beq.n	8012aba <check_fs+0x66>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012aac:	2beb      	cmp	r3, #235	@ 0xeb
 8012aae:	d11e      	bne.n	8012aee <check_fs+0x9a>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012ab6:	2b90      	cmp	r3, #144	@ 0x90
 8012ab8:	d119      	bne.n	8012aee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	333c      	adds	r3, #60	@ 0x3c
 8012abe:	3336      	adds	r3, #54	@ 0x36
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fd f98a 	bl	800fdda <ld_dword>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012acc:	4a10      	ldr	r2, [pc, #64]	@ (8012b10 <check_fs+0xbc>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d101      	bne.n	8012ad6 <check_fs+0x82>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	e018      	b.n	8012b08 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	333c      	adds	r3, #60	@ 0x3c
 8012ada:	3352      	adds	r3, #82	@ 0x52
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fd f97c 	bl	800fdda <ld_dword>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8012b14 <check_fs+0xc0>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d101      	bne.n	8012aee <check_fs+0x9a>
 8012aea:	2300      	movs	r3, #0
 8012aec:	e00c      	b.n	8012b08 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	333c      	adds	r3, #60	@ 0x3c
 8012af2:	220b      	movs	r2, #11
 8012af4:	4908      	ldr	r1, [pc, #32]	@ (8012b18 <check_fs+0xc4>)
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fd fb78 	bl	80101ec <mem_cmp>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <check_fs+0xb2>
 8012b02:	2301      	movs	r3, #1
 8012b04:	e000      	b.n	8012b08 <check_fs+0xb4>
#endif
	return 2;
 8012b06:	2302      	movs	r3, #2
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	00544146 	.word	0x00544146
 8012b14:	33544146 	.word	0x33544146
 8012b18:	0801aa54 	.word	0x0801aa54

08012b1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012b20:	b09c      	sub	sp, #112	@ 0x70
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	61f8      	str	r0, [r7, #28]
 8012b26:	61b9      	str	r1, [r7, #24]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012b32:	69f8      	ldr	r0, [r7, #28]
 8012b34:	f7ff ff49 	bl	80129ca <get_ldnumber>
 8012b38:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	da01      	bge.n	8012b44 <find_volume+0x28>
 8012b40:	230b      	movs	r3, #11
 8012b42:	e339      	b.n	80131b8 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012b44:	4a9d      	ldr	r2, [pc, #628]	@ (8012dbc <find_volume+0x2a0>)
 8012b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b4c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d101      	bne.n	8012b58 <find_volume+0x3c>
 8012b54:	230c      	movs	r3, #12
 8012b56:	e32f      	b.n	80131b8 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 8012b58:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012b5a:	f7fd fb89 	bl	8010270 <lock_fs>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <find_volume+0x4c>
 8012b64:	230f      	movs	r3, #15
 8012b66:	e327      	b.n	80131b8 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b6c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012b6e:	7dfb      	ldrb	r3, [r7, #23]
 8012b70:	f023 0301 	bic.w	r3, r3, #1
 8012b74:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d01a      	beq.n	8012bb4 <find_volume+0x98>
		stat = disk_status(fs->drv);
 8012b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b80:	785b      	ldrb	r3, [r3, #1]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fd f870 	bl	800fc68 <disk_status>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012b8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012b92:	f003 0301 	and.w	r3, r3, #1
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10c      	bne.n	8012bb4 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b9a:	7dfb      	ldrb	r3, [r7, #23]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d007      	beq.n	8012bb0 <find_volume+0x94>
 8012ba0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012ba4:	f003 0304 	and.w	r3, r3, #4
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d001      	beq.n	8012bb0 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8012bac:	230a      	movs	r3, #10
 8012bae:	e303      	b.n	80131b8 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	e301      	b.n	80131b8 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bc0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bc4:	785b      	ldrb	r3, [r3, #1]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fd f868 	bl	800fc9c <disk_initialize>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012bd6:	f003 0301 	and.w	r3, r3, #1
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d001      	beq.n	8012be2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012bde:	2303      	movs	r3, #3
 8012be0:	e2ea      	b.n	80131b8 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012be2:	7dfb      	ldrb	r3, [r7, #23]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d007      	beq.n	8012bf8 <find_volume+0xdc>
 8012be8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d001      	beq.n	8012bf8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8012bf4:	230a      	movs	r3, #10
 8012bf6:	e2df      	b.n	80131b8 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012bfc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012bfe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012c00:	f7ff ff28 	bl	8012a54 <check_fs>
 8012c04:	4603      	mov	r3, r0
 8012c06:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012c0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d14d      	bne.n	8012cae <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c12:	2300      	movs	r3, #0
 8012c14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c16:	e020      	b.n	8012c5a <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c1a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012c26:	4413      	add	r3, r2
 8012c28:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d006      	beq.n	8012c42 <find_volume+0x126>
 8012c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c36:	3308      	adds	r3, #8
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fd f8ce 	bl	800fdda <ld_dword>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	e000      	b.n	8012c44 <find_volume+0x128>
 8012c42:	2200      	movs	r2, #0
 8012c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	3360      	adds	r3, #96	@ 0x60
 8012c4a:	f107 0110 	add.w	r1, r7, #16
 8012c4e:	440b      	add	r3, r1
 8012c50:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c56:	3301      	adds	r3, #1
 8012c58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d9db      	bls.n	8012c18 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012c60:	2300      	movs	r3, #0
 8012c62:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8012c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d002      	beq.n	8012c70 <find_volume+0x154>
 8012c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c6c:	3b01      	subs	r3, #1
 8012c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	3360      	adds	r3, #96	@ 0x60
 8012c76:	f107 0210 	add.w	r2, r7, #16
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012c80:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d005      	beq.n	8012c94 <find_volume+0x178>
 8012c88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012c8a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012c8c:	f7ff fee2 	bl	8012a54 <check_fs>
 8012c90:	4603      	mov	r3, r0
 8012c92:	e000      	b.n	8012c96 <find_volume+0x17a>
 8012c94:	2303      	movs	r3, #3
 8012c96:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d905      	bls.n	8012cae <find_volume+0x192>
 8012ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012caa:	2b03      	cmp	r3, #3
 8012cac:	d9e0      	bls.n	8012c70 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012cae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012cb2:	2b04      	cmp	r3, #4
 8012cb4:	d101      	bne.n	8012cba <find_volume+0x19e>
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e27e      	b.n	80131b8 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012cba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d901      	bls.n	8012cc6 <find_volume+0x1aa>
 8012cc2:	230d      	movs	r3, #13
 8012cc4:	e278      	b.n	80131b8 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012cc6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	f040 80fa 	bne.w	8012ec4 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012cd0:	230b      	movs	r3, #11
 8012cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012cd4:	e002      	b.n	8012cdc <find_volume+0x1c0>
 8012cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cd8:	3301      	adds	r3, #1
 8012cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8012ce0:	d806      	bhi.n	8012cf0 <find_volume+0x1d4>
 8012ce2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ce6:	4413      	add	r3, r2
 8012ce8:	333c      	adds	r3, #60	@ 0x3c
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d0f2      	beq.n	8012cd6 <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cf2:	2b3f      	cmp	r3, #63	@ 0x3f
 8012cf4:	d801      	bhi.n	8012cfa <find_volume+0x1de>
 8012cf6:	230d      	movs	r3, #13
 8012cf8:	e25e      	b.n	80131b8 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cfc:	333c      	adds	r3, #60	@ 0x3c
 8012cfe:	3368      	adds	r3, #104	@ 0x68
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fd f851 	bl	800fda8 <ld_word>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d0c:	d001      	beq.n	8012d12 <find_volume+0x1f6>
 8012d0e:	230d      	movs	r3, #13
 8012d10:	e252      	b.n	80131b8 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d14:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8012d18:	2b09      	cmp	r3, #9
 8012d1a:	d001      	beq.n	8012d20 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 8012d1c:	230d      	movs	r3, #13
 8012d1e:	e24b      	b.n	80131b8 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8012d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d22:	333c      	adds	r3, #60	@ 0x3c
 8012d24:	3348      	adds	r3, #72	@ 0x48
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fd f87a 	bl	800fe20 <ld_qword>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012d32:	2000      	movs	r0, #0
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	68b9      	ldr	r1, [r7, #8]
 8012d3a:	1851      	adds	r1, r2, r1
 8012d3c:	6039      	str	r1, [r7, #0]
 8012d3e:	68f9      	ldr	r1, [r7, #12]
 8012d40:	eb43 0101 	adc.w	r1, r3, r1
 8012d44:	6079      	str	r1, [r7, #4]
 8012d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d301      	bcc.n	8012d5a <find_volume+0x23e>
 8012d56:	230d      	movs	r3, #13
 8012d58:	e22e      	b.n	80131b8 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8012d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d5c:	333c      	adds	r3, #60	@ 0x3c
 8012d5e:	3354      	adds	r3, #84	@ 0x54
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fd f83a 	bl	800fdda <ld_dword>
 8012d66:	4602      	mov	r2, r0
 8012d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d6a:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d6e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8012d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d74:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8012d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d78:	789b      	ldrb	r3, [r3, #2]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d001      	beq.n	8012d82 <find_volume+0x266>
 8012d7e:	230d      	movs	r3, #13
 8012d80:	e21a      	b.n	80131b8 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8012d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d84:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8012d88:	461a      	mov	r2, r3
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	4093      	lsls	r3, r2
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d92:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8012d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d96:	895b      	ldrh	r3, [r3, #10]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <find_volume+0x284>
 8012d9c:	230d      	movs	r3, #13
 8012d9e:	e20b      	b.n	80131b8 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8012da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012da2:	333c      	adds	r3, #60	@ 0x3c
 8012da4:	335c      	adds	r3, #92	@ 0x5c
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fd f817 	bl	800fdda <ld_dword>
 8012dac:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8012dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012db0:	4a03      	ldr	r2, [pc, #12]	@ (8012dc0 <find_volume+0x2a4>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d906      	bls.n	8012dc4 <find_volume+0x2a8>
 8012db6:	230d      	movs	r3, #13
 8012db8:	e1fe      	b.n	80131b8 <find_volume+0x69c>
 8012dba:	bf00      	nop
 8012dbc:	24001bc8 	.word	0x24001bc8
 8012dc0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8012dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dc6:	1c9a      	adds	r2, r3, #2
 8012dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dca:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012dd0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8012dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dd4:	333c      	adds	r3, #60	@ 0x3c
 8012dd6:	3358      	adds	r3, #88	@ 0x58
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fc fffe 	bl	800fdda <ld_dword>
 8012dde:	4602      	mov	r2, r0
 8012de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012de2:	441a      	add	r2, r3
 8012de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012de6:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8012de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dea:	333c      	adds	r3, #60	@ 0x3c
 8012dec:	3350      	adds	r3, #80	@ 0x50
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7fc fff3 	bl	800fdda <ld_dword>
 8012df4:	4602      	mov	r2, r0
 8012df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012df8:	441a      	add	r2, r3
 8012dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8012dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e02:	2200      	movs	r2, #0
 8012e04:	469a      	mov	sl, r3
 8012e06:	4693      	mov	fp, r2
 8012e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e10:	fb02 f303 	mul.w	r3, r2, r3
 8012e14:	2200      	movs	r2, #0
 8012e16:	4698      	mov	r8, r3
 8012e18:	4691      	mov	r9, r2
 8012e1a:	eb1a 0408 	adds.w	r4, sl, r8
 8012e1e:	eb4b 0509 	adc.w	r5, fp, r9
 8012e22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8012e26:	42a2      	cmp	r2, r4
 8012e28:	41ab      	sbcs	r3, r5
 8012e2a:	d201      	bcs.n	8012e30 <find_volume+0x314>
 8012e2c:	230d      	movs	r3, #13
 8012e2e:	e1c3      	b.n	80131b8 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8012e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e32:	333c      	adds	r3, #60	@ 0x3c
 8012e34:	3360      	adds	r3, #96	@ 0x60
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fc ffcf 	bl	800fdda <ld_dword>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e40:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8012e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e46:	4619      	mov	r1, r3
 8012e48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012e4a:	f7fd fc53 	bl	80106f4 <clust2sect>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	4619      	mov	r1, r3
 8012e52:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012e54:	f7fd fbb2 	bl	80105bc <move_window>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <find_volume+0x346>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e1aa      	b.n	80131b8 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012e62:	2300      	movs	r3, #0
 8012e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e66:	e015      	b.n	8012e94 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012e68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e6c:	4413      	add	r3, r2
 8012e6e:	333c      	adds	r3, #60	@ 0x3c
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	2b81      	cmp	r3, #129	@ 0x81
 8012e74:	d10b      	bne.n	8012e8e <find_volume+0x372>
 8012e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e78:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e7e:	3314      	adds	r3, #20
 8012e80:	4413      	add	r3, r2
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fc ffa9 	bl	800fdda <ld_dword>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d007      	beq.n	8012e9e <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e90:	3320      	adds	r3, #32
 8012e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e9a:	d3e5      	bcc.n	8012e68 <find_volume+0x34c>
 8012e9c:	e000      	b.n	8012ea0 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012e9e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8012ea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ea6:	d101      	bne.n	8012eac <find_volume+0x390>
 8012ea8:	230d      	movs	r3, #13
 8012eaa:	e185      	b.n	80131b8 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eae:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb2:	61da      	str	r2, [r3, #28]
 8012eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eb6:	69da      	ldr	r2, [r3, #28]
 8012eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eba:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8012ebc:	2304      	movs	r3, #4
 8012ebe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8012ec2:	e167      	b.n	8013194 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ec6:	333c      	adds	r3, #60	@ 0x3c
 8012ec8:	330b      	adds	r3, #11
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7fc ff6c 	bl	800fda8 <ld_word>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ed6:	d001      	beq.n	8012edc <find_volume+0x3c0>
 8012ed8:	230d      	movs	r3, #13
 8012eda:	e16d      	b.n	80131b8 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ede:	333c      	adds	r3, #60	@ 0x3c
 8012ee0:	3316      	adds	r3, #22
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fc ff60 	bl	800fda8 <ld_word>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d106      	bne.n	8012f00 <find_volume+0x3e4>
 8012ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ef4:	333c      	adds	r3, #60	@ 0x3c
 8012ef6:	3324      	adds	r3, #36	@ 0x24
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7fc ff6e 	bl	800fdda <ld_dword>
 8012efe:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 8012f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012f04:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f08:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8012f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f12:	789b      	ldrb	r3, [r3, #2]
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d005      	beq.n	8012f24 <find_volume+0x408>
 8012f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f1a:	789b      	ldrb	r3, [r3, #2]
 8012f1c:	2b02      	cmp	r3, #2
 8012f1e:	d001      	beq.n	8012f24 <find_volume+0x408>
 8012f20:	230d      	movs	r3, #13
 8012f22:	e149      	b.n	80131b8 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f26:	789b      	ldrb	r3, [r3, #2]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f2c:	fb02 f303 	mul.w	r3, r2, r3
 8012f30:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f34:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8012f38:	461a      	mov	r2, r3
 8012f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f40:	895b      	ldrh	r3, [r3, #10]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d008      	beq.n	8012f58 <find_volume+0x43c>
 8012f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f48:	895b      	ldrh	r3, [r3, #10]
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f4e:	895b      	ldrh	r3, [r3, #10]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	4013      	ands	r3, r2
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d001      	beq.n	8012f5c <find_volume+0x440>
 8012f58:	230d      	movs	r3, #13
 8012f5a:	e12d      	b.n	80131b8 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f5e:	333c      	adds	r3, #60	@ 0x3c
 8012f60:	3311      	adds	r3, #17
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fc ff20 	bl	800fda8 <ld_word>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f72:	891b      	ldrh	r3, [r3, #8]
 8012f74:	f003 030f 	and.w	r3, r3, #15
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d001      	beq.n	8012f82 <find_volume+0x466>
 8012f7e:	230d      	movs	r3, #13
 8012f80:	e11a      	b.n	80131b8 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f84:	333c      	adds	r3, #60	@ 0x3c
 8012f86:	3313      	adds	r3, #19
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fc ff0d 	bl	800fda8 <ld_word>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d106      	bne.n	8012fa6 <find_volume+0x48a>
 8012f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f9a:	333c      	adds	r3, #60	@ 0x3c
 8012f9c:	3320      	adds	r3, #32
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7fc ff1b 	bl	800fdda <ld_dword>
 8012fa4:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fa8:	333c      	adds	r3, #60	@ 0x3c
 8012faa:	330e      	adds	r3, #14
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fc fefb 	bl	800fda8 <ld_word>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012fb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d101      	bne.n	8012fc4 <find_volume+0x4a8>
 8012fc0:	230d      	movs	r3, #13
 8012fc2:	e0f9      	b.n	80131b8 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012fc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012fca:	4413      	add	r3, r2
 8012fcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012fce:	8912      	ldrh	r2, [r2, #8]
 8012fd0:	0912      	lsrs	r2, r2, #4
 8012fd2:	b292      	uxth	r2, r2
 8012fd4:	4413      	add	r3, r2
 8012fd6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012fd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d201      	bcs.n	8012fe4 <find_volume+0x4c8>
 8012fe0:	230d      	movs	r3, #13
 8012fe2:	e0e9      	b.n	80131b8 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012fe4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012fec:	8952      	ldrh	r2, [r2, #10]
 8012fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <find_volume+0x4e2>
 8012ffa:	230d      	movs	r3, #13
 8012ffc:	e0dc      	b.n	80131b8 <find_volume+0x69c>
		fmt = FS_FAT32;
 8012ffe:	2303      	movs	r3, #3
 8013000:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013006:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801300a:	4293      	cmp	r3, r2
 801300c:	d802      	bhi.n	8013014 <find_volume+0x4f8>
 801300e:	2302      	movs	r3, #2
 8013010:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013016:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801301a:	4293      	cmp	r3, r2
 801301c:	d802      	bhi.n	8013024 <find_volume+0x508>
 801301e:	2301      	movs	r3, #1
 8013020:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013026:	1c9a      	adds	r2, r3, #2
 8013028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801302a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801302c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801302e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013030:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013032:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013038:	441a      	add	r2, r3
 801303a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801303c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801303e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013042:	441a      	add	r2, r3
 8013044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013046:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013048:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801304c:	2b03      	cmp	r3, #3
 801304e:	d11e      	bne.n	801308e <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013052:	333c      	adds	r3, #60	@ 0x3c
 8013054:	332a      	adds	r3, #42	@ 0x2a
 8013056:	4618      	mov	r0, r3
 8013058:	f7fc fea6 	bl	800fda8 <ld_word>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d001      	beq.n	8013066 <find_volume+0x54a>
 8013062:	230d      	movs	r3, #13
 8013064:	e0a8      	b.n	80131b8 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013068:	891b      	ldrh	r3, [r3, #8]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d001      	beq.n	8013072 <find_volume+0x556>
 801306e:	230d      	movs	r3, #13
 8013070:	e0a2      	b.n	80131b8 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013074:	333c      	adds	r3, #60	@ 0x3c
 8013076:	332c      	adds	r3, #44	@ 0x2c
 8013078:	4618      	mov	r0, r3
 801307a:	f7fc feae 	bl	800fdda <ld_dword>
 801307e:	4602      	mov	r2, r0
 8013080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013082:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013086:	6a1b      	ldr	r3, [r3, #32]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801308c:	e01f      	b.n	80130ce <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801308e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013090:	891b      	ldrh	r3, [r3, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <find_volume+0x57e>
 8013096:	230d      	movs	r3, #13
 8013098:	e08e      	b.n	80131b8 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801309a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801309c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801309e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80130a0:	441a      	add	r2, r3
 80130a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130a4:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80130a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	d103      	bne.n	80130b6 <find_volume+0x59a>
 80130ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130b0:	6a1b      	ldr	r3, [r3, #32]
 80130b2:	005b      	lsls	r3, r3, #1
 80130b4:	e00a      	b.n	80130cc <find_volume+0x5b0>
 80130b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130b8:	6a1a      	ldr	r2, [r3, #32]
 80130ba:	4613      	mov	r3, r2
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	4413      	add	r3, r2
 80130c0:	085a      	lsrs	r2, r3, #1
 80130c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	f003 0301 	and.w	r3, r3, #1
 80130ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80130cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80130ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130d4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80130d8:	0a5b      	lsrs	r3, r3, #9
 80130da:	429a      	cmp	r2, r3
 80130dc:	d201      	bcs.n	80130e2 <find_volume+0x5c6>
 80130de:	230d      	movs	r3, #13
 80130e0:	e06a      	b.n	80131b8 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80130e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130e4:	f04f 32ff 	mov.w	r2, #4294967295
 80130e8:	61da      	str	r2, [r3, #28]
 80130ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130ec:	69da      	ldr	r2, [r3, #28]
 80130ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80130f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130f4:	2280      	movs	r2, #128	@ 0x80
 80130f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80130f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80130fc:	2b03      	cmp	r3, #3
 80130fe:	d149      	bne.n	8013194 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013102:	333c      	adds	r3, #60	@ 0x3c
 8013104:	3330      	adds	r3, #48	@ 0x30
 8013106:	4618      	mov	r0, r3
 8013108:	f7fc fe4e 	bl	800fda8 <ld_word>
 801310c:	4603      	mov	r3, r0
 801310e:	2b01      	cmp	r3, #1
 8013110:	d140      	bne.n	8013194 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013114:	3301      	adds	r3, #1
 8013116:	4619      	mov	r1, r3
 8013118:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801311a:	f7fd fa4f 	bl	80105bc <move_window>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d137      	bne.n	8013194 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 8013124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013126:	2200      	movs	r2, #0
 8013128:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801312a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801312c:	333c      	adds	r3, #60	@ 0x3c
 801312e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013132:	4618      	mov	r0, r3
 8013134:	f7fc fe38 	bl	800fda8 <ld_word>
 8013138:	4603      	mov	r3, r0
 801313a:	461a      	mov	r2, r3
 801313c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013140:	429a      	cmp	r2, r3
 8013142:	d127      	bne.n	8013194 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013146:	333c      	adds	r3, #60	@ 0x3c
 8013148:	4618      	mov	r0, r3
 801314a:	f7fc fe46 	bl	800fdda <ld_dword>
 801314e:	4603      	mov	r3, r0
 8013150:	4a1c      	ldr	r2, [pc, #112]	@ (80131c4 <find_volume+0x6a8>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d11e      	bne.n	8013194 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013158:	333c      	adds	r3, #60	@ 0x3c
 801315a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801315e:	4618      	mov	r0, r3
 8013160:	f7fc fe3b 	bl	800fdda <ld_dword>
 8013164:	4603      	mov	r3, r0
 8013166:	4a18      	ldr	r2, [pc, #96]	@ (80131c8 <find_volume+0x6ac>)
 8013168:	4293      	cmp	r3, r2
 801316a:	d113      	bne.n	8013194 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801316c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801316e:	333c      	adds	r3, #60	@ 0x3c
 8013170:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013174:	4618      	mov	r0, r3
 8013176:	f7fc fe30 	bl	800fdda <ld_dword>
 801317a:	4602      	mov	r2, r0
 801317c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801317e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013182:	333c      	adds	r3, #60	@ 0x3c
 8013184:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013188:	4618      	mov	r0, r3
 801318a:	f7fc fe26 	bl	800fdda <ld_dword>
 801318e:	4602      	mov	r2, r0
 8013190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013192:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013196:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 801319a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801319c:	4b0b      	ldr	r3, [pc, #44]	@ (80131cc <find_volume+0x6b0>)
 801319e:	881b      	ldrh	r3, [r3, #0]
 80131a0:	3301      	adds	r3, #1
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	4b09      	ldr	r3, [pc, #36]	@ (80131cc <find_volume+0x6b0>)
 80131a6:	801a      	strh	r2, [r3, #0]
 80131a8:	4b08      	ldr	r3, [pc, #32]	@ (80131cc <find_volume+0x6b0>)
 80131aa:	881a      	ldrh	r2, [r3, #0]
 80131ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80131b0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80131b2:	f7fd f99b 	bl	80104ec <clear_lock>
#endif
	return FR_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3770      	adds	r7, #112	@ 0x70
 80131bc:	46bd      	mov	sp, r7
 80131be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131c2:	bf00      	nop
 80131c4:	41615252 	.word	0x41615252
 80131c8:	61417272 	.word	0x61417272
 80131cc:	24001bcc 	.word	0x24001bcc

080131d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80131da:	2309      	movs	r3, #9
 80131dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d02e      	beq.n	8013242 <validate+0x72>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d02a      	beq.n	8013242 <validate+0x72>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d025      	beq.n	8013242 <validate+0x72>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	889a      	ldrh	r2, [r3, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	88db      	ldrh	r3, [r3, #6]
 8013200:	429a      	cmp	r2, r3
 8013202:	d11e      	bne.n	8013242 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4618      	mov	r0, r3
 801320a:	f7fd f831 	bl	8010270 <lock_fs>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d014      	beq.n	801323e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	785b      	ldrb	r3, [r3, #1]
 801321a:	4618      	mov	r0, r3
 801321c:	f7fc fd24 	bl	800fc68 <disk_status>
 8013220:	4603      	mov	r3, r0
 8013222:	f003 0301 	and.w	r3, r3, #1
 8013226:	2b00      	cmp	r3, #0
 8013228:	d102      	bne.n	8013230 <validate+0x60>
				res = FR_OK;
 801322a:	2300      	movs	r3, #0
 801322c:	73fb      	strb	r3, [r7, #15]
 801322e:	e008      	b.n	8013242 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2100      	movs	r1, #0
 8013236:	4618      	mov	r0, r3
 8013238:	f7fd f830 	bl	801029c <unlock_fs>
 801323c:	e001      	b.n	8013242 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801323e:	230f      	movs	r3, #15
 8013240:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013242:	7bfb      	ldrb	r3, [r7, #15]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <validate+0x7e>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	e000      	b.n	8013250 <validate+0x80>
 801324e:	2300      	movs	r3, #0
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	6013      	str	r3, [r2, #0]
	return res;
 8013254:	7bfb      	ldrb	r3, [r7, #15]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
	...

08013260 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b088      	sub	sp, #32
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	4613      	mov	r3, r2
 801326c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013272:	f107 0310 	add.w	r3, r7, #16
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fba7 	bl	80129ca <get_ldnumber>
 801327c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801327e:	69fb      	ldr	r3, [r7, #28]
 8013280:	2b00      	cmp	r3, #0
 8013282:	da01      	bge.n	8013288 <f_mount+0x28>
 8013284:	230b      	movs	r3, #11
 8013286:	e048      	b.n	801331a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013288:	4a26      	ldr	r2, [pc, #152]	@ (8013324 <f_mount+0xc4>)
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013290:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00f      	beq.n	80132b8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013298:	69b8      	ldr	r0, [r7, #24]
 801329a:	f7fd f927 	bl	80104ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	695b      	ldr	r3, [r3, #20]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f002 f86b 	bl	801537e <ff_del_syncobj>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d101      	bne.n	80132b2 <f_mount+0x52>
 80132ae:	2302      	movs	r3, #2
 80132b0:	e033      	b.n	801331a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	2200      	movs	r2, #0
 80132b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d00f      	beq.n	80132de <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2200      	movs	r2, #0
 80132c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	3314      	adds	r3, #20
 80132cc:	4619      	mov	r1, r3
 80132ce:	4610      	mov	r0, r2
 80132d0:	f002 f83a 	bl	8015348 <ff_cre_syncobj>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d101      	bne.n	80132de <f_mount+0x7e>
 80132da:	2302      	movs	r3, #2
 80132dc:	e01d      	b.n	801331a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	4910      	ldr	r1, [pc, #64]	@ (8013324 <f_mount+0xc4>)
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d002      	beq.n	80132f4 <f_mount+0x94>
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d001      	beq.n	80132f8 <f_mount+0x98>
 80132f4:	2300      	movs	r3, #0
 80132f6:	e010      	b.n	801331a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80132f8:	f107 010c 	add.w	r1, r7, #12
 80132fc:	f107 0308 	add.w	r3, r7, #8
 8013300:	2200      	movs	r2, #0
 8013302:	4618      	mov	r0, r3
 8013304:	f7ff fc0a 	bl	8012b1c <find_volume>
 8013308:	4603      	mov	r3, r0
 801330a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	7dfa      	ldrb	r2, [r7, #23]
 8013310:	4611      	mov	r1, r2
 8013312:	4618      	mov	r0, r3
 8013314:	f7fc ffc2 	bl	801029c <unlock_fs>
 8013318:	7dfb      	ldrb	r3, [r7, #23]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3720      	adds	r7, #32
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	24001bc8 	.word	0x24001bc8

08013328 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801332c:	b0a8      	sub	sp, #160	@ 0xa0
 801332e:	af00      	add	r7, sp, #0
 8013330:	61f8      	str	r0, [r7, #28]
 8013332:	61b9      	str	r1, [r7, #24]
 8013334:	4613      	mov	r3, r2
 8013336:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013338:	69fb      	ldr	r3, [r7, #28]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d101      	bne.n	8013342 <f_open+0x1a>
 801333e:	2309      	movs	r3, #9
 8013340:	e2d3      	b.n	80138ea <f_open+0x5c2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013348:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 801334a:	7dfa      	ldrb	r2, [r7, #23]
 801334c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8013350:	f107 0318 	add.w	r3, r7, #24
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff fbe1 	bl	8012b1c <find_volume>
 801335a:	4603      	mov	r3, r0
 801335c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 8013360:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013364:	2b00      	cmp	r3, #0
 8013366:	f040 82b0 	bne.w	80138ca <f_open+0x5a2>
		dj.obj.fs = fs;
 801336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336c:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 801336e:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 8013372:	f002 f830 	bl	80153d6 <ff_memalloc>
 8013376:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 801337a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801337e:	2b00      	cmp	r3, #0
 8013380:	d106      	bne.n	8013390 <f_open+0x68>
 8013382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013384:	2111      	movs	r1, #17
 8013386:	4618      	mov	r0, r3
 8013388:	f7fc ff88 	bl	801029c <unlock_fs>
 801338c:	2311      	movs	r3, #17
 801338e:	e2ac      	b.n	80138ea <f_open+0x5c2>
 8013390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013392:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013396:	60da      	str	r2, [r3, #12]
 8013398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801339a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801339e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80133a2:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80133a4:	69ba      	ldr	r2, [r7, #24]
 80133a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80133aa:	4611      	mov	r1, r2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff fa63 	bl	8012878 <follow_path>
 80133b2:	4603      	mov	r3, r0
 80133b4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80133b8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d118      	bne.n	80133f2 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80133c0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80133c4:	b25b      	sxtb	r3, r3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	da03      	bge.n	80133d2 <f_open+0xaa>
				res = FR_INVALID_NAME;
 80133ca:	2306      	movs	r3, #6
 80133cc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80133d0:	e00f      	b.n	80133f2 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80133d2:	7dfb      	ldrb	r3, [r7, #23]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	bf8c      	ite	hi
 80133d8:	2301      	movhi	r3, #1
 80133da:	2300      	movls	r3, #0
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	461a      	mov	r2, r3
 80133e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80133e4:	4611      	mov	r1, r2
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7fc ff74 	bl	80102d4 <chk_lock>
 80133ec:	4603      	mov	r3, r0
 80133ee:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80133f2:	7dfb      	ldrb	r3, [r7, #23]
 80133f4:	f003 031c 	and.w	r3, r3, #28
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 8115 	beq.w	8013628 <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 80133fe:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013402:	2b00      	cmp	r3, #0
 8013404:	d017      	beq.n	8013436 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013406:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801340a:	2b04      	cmp	r3, #4
 801340c:	d10e      	bne.n	801342c <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801340e:	f7fc ffbd 	bl	801038c <enq_lock>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d006      	beq.n	8013426 <f_open+0xfe>
 8013418:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801341c:	4618      	mov	r0, r3
 801341e:	f7fe fecd 	bl	80121bc <dir_register>
 8013422:	4603      	mov	r3, r0
 8013424:	e000      	b.n	8013428 <f_open+0x100>
 8013426:	2312      	movs	r3, #18
 8013428:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801342c:	7dfb      	ldrb	r3, [r7, #23]
 801342e:	f043 0308 	orr.w	r3, r3, #8
 8013432:	75fb      	strb	r3, [r7, #23]
 8013434:	e011      	b.n	801345a <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013436:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801343a:	f003 0311 	and.w	r3, r3, #17
 801343e:	2b00      	cmp	r3, #0
 8013440:	d003      	beq.n	801344a <f_open+0x122>
					res = FR_DENIED;
 8013442:	2307      	movs	r3, #7
 8013444:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013448:	e007      	b.n	801345a <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801344a:	7dfb      	ldrb	r3, [r7, #23]
 801344c:	f003 0304 	and.w	r3, r3, #4
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <f_open+0x132>
 8013454:	2308      	movs	r3, #8
 8013456:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801345a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801345e:	2b00      	cmp	r3, #0
 8013460:	f040 80fe 	bne.w	8013660 <f_open+0x338>
 8013464:	7dfb      	ldrb	r3, [r7, #23]
 8013466:	f003 0308 	and.w	r3, r3, #8
 801346a:	2b00      	cmp	r3, #0
 801346c:	f000 80f8 	beq.w	8013660 <f_open+0x338>
				dw = GET_FATTIME();
 8013470:	f7fc f9a4 	bl	800f7bc <get_fattime>
 8013474:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8013478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	2b04      	cmp	r3, #4
 801347e:	f040 8084 	bne.w	801358a <f_open+0x262>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8013482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8013488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	3334      	adds	r3, #52	@ 0x34
 801348e:	4618      	mov	r0, r3
 8013490:	f7fc fca3 	bl	800fdda <ld_dword>
 8013494:	4602      	mov	r2, r0
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349c:	691b      	ldr	r3, [r3, #16]
 801349e:	3338      	adds	r3, #56	@ 0x38
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fc fcbd 	bl	800fe20 <ld_qword>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	69f9      	ldr	r1, [r7, #28]
 80134ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80134b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	3321      	adds	r3, #33	@ 0x21
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	f003 0302 	and.w	r3, r3, #2
 80134bc:	b2da      	uxtb	r2, r3
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	2200      	movs	r2, #0
 80134c6:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80134c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ca:	691b      	ldr	r3, [r3, #16]
 80134cc:	3308      	adds	r3, #8
 80134ce:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fc fd9a 	bl	801000c <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80134d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	3314      	adds	r3, #20
 80134de:	2200      	movs	r2, #0
 80134e0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80134e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	330c      	adds	r3, #12
 80134e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fc fd8d 	bl	801000c <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80134f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f4:	691b      	ldr	r3, [r3, #16]
 80134f6:	3315      	adds	r3, #21
 80134f8:	2200      	movs	r2, #0
 80134fa:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80134fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fe:	691b      	ldr	r3, [r3, #16]
 8013500:	3304      	adds	r3, #4
 8013502:	2220      	movs	r2, #32
 8013504:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8013506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	3334      	adds	r3, #52	@ 0x34
 801350c:	2100      	movs	r1, #0
 801350e:	4618      	mov	r0, r3
 8013510:	f7fc fd7c 	bl	801000c <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8013514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801351c:	f04f 0200 	mov.w	r2, #0
 8013520:	f04f 0300 	mov.w	r3, #0
 8013524:	4608      	mov	r0, r1
 8013526:	f7fc fd9d 	bl	8010064 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352c:	691b      	ldr	r3, [r3, #16]
 801352e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8013532:	f04f 0200 	mov.w	r2, #0
 8013536:	f04f 0300 	mov.w	r3, #0
 801353a:	4608      	mov	r0, r1
 801353c:	f7fc fd92 	bl	8010064 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8013540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	3321      	adds	r3, #33	@ 0x21
 8013546:	2201      	movs	r2, #1
 8013548:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801354a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801354e:	4618      	mov	r0, r3
 8013550:	f7fe fb80 	bl	8011c54 <store_xdir>
 8013554:	4603      	mov	r3, r0
 8013556:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 801355a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801355e:	2b00      	cmp	r3, #0
 8013560:	d17e      	bne.n	8013660 <f_open+0x338>
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d07a      	beq.n	8013660 <f_open+0x338>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801356a:	69f8      	ldr	r0, [r7, #28]
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	2200      	movs	r2, #0
 8013572:	4619      	mov	r1, r3
 8013574:	f7fd fc2c 	bl	8010dd0 <remove_chain>
 8013578:	4603      	mov	r3, r0
 801357a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	689a      	ldr	r2, [r3, #8]
 8013582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013584:	3a01      	subs	r2, #1
 8013586:	619a      	str	r2, [r3, #24]
 8013588:	e06a      	b.n	8013660 <f_open+0x338>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801358a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801358c:	330e      	adds	r3, #14
 801358e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013592:	4618      	mov	r0, r3
 8013594:	f7fc fd3a 	bl	801000c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801359a:	3316      	adds	r3, #22
 801359c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fc fd33 	bl	801000c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80135a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80135a8:	330b      	adds	r3, #11
 80135aa:	2220      	movs	r2, #32
 80135ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80135ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80135b2:	4611      	mov	r1, r2
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fd ffbb 	bl	8011530 <ld_clust>
 80135ba:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80135be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80135c2:	2200      	movs	r2, #0
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fd ffd2 	bl	801156e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80135ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80135cc:	331c      	adds	r3, #28
 80135ce:	2100      	movs	r1, #0
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fc fd1b 	bl	801000c <st_dword>
					fs->wflag = 1;
 80135d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d8:	2201      	movs	r2, #1
 80135da:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80135dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d03d      	beq.n	8013660 <f_open+0x338>
						dw = fs->winsect;
 80135e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 80135ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80135f0:	2200      	movs	r2, #0
 80135f2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fd fbea 	bl	8010dd0 <remove_chain>
 80135fc:	4603      	mov	r3, r0
 80135fe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 8013602:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013606:	2b00      	cmp	r3, #0
 8013608:	d12a      	bne.n	8013660 <f_open+0x338>
							res = move_window(fs, dw);
 801360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801360c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013610:	4618      	mov	r0, r3
 8013612:	f7fc ffd3 	bl	80105bc <move_window>
 8013616:	4603      	mov	r3, r0
 8013618:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801361e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013622:	3a01      	subs	r2, #1
 8013624:	619a      	str	r2, [r3, #24]
 8013626:	e01b      	b.n	8013660 <f_open+0x338>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013628:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801362c:	2b00      	cmp	r3, #0
 801362e:	d117      	bne.n	8013660 <f_open+0x338>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013630:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013634:	f003 0310 	and.w	r3, r3, #16
 8013638:	2b00      	cmp	r3, #0
 801363a:	d003      	beq.n	8013644 <f_open+0x31c>
					res = FR_NO_FILE;
 801363c:	2304      	movs	r3, #4
 801363e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013642:	e00d      	b.n	8013660 <f_open+0x338>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013644:	7dfb      	ldrb	r3, [r7, #23]
 8013646:	f003 0302 	and.w	r3, r3, #2
 801364a:	2b00      	cmp	r3, #0
 801364c:	d008      	beq.n	8013660 <f_open+0x338>
 801364e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013652:	f003 0301 	and.w	r3, r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	d002      	beq.n	8013660 <f_open+0x338>
						res = FR_DENIED;
 801365a:	2307      	movs	r3, #7
 801365c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013660:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013664:	2b00      	cmp	r3, #0
 8013666:	d126      	bne.n	80136b6 <f_open+0x38e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013668:	7dfb      	ldrb	r3, [r7, #23]
 801366a:	f003 0308 	and.w	r3, r3, #8
 801366e:	2b00      	cmp	r3, #0
 8013670:	d003      	beq.n	801367a <f_open+0x352>
				mode |= FA_MODIFIED;
 8013672:	7dfb      	ldrb	r3, [r7, #23]
 8013674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013678:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8013682:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013688:	7dfb      	ldrb	r3, [r7, #23]
 801368a:	2b01      	cmp	r3, #1
 801368c:	bf8c      	ite	hi
 801368e:	2301      	movhi	r3, #1
 8013690:	2300      	movls	r3, #0
 8013692:	b2db      	uxtb	r3, r3
 8013694:	461a      	mov	r2, r3
 8013696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801369a:	4611      	mov	r1, r2
 801369c:	4618      	mov	r0, r3
 801369e:	f7fc fe97 	bl	80103d0 <inc_lock>
 80136a2:	4602      	mov	r2, r0
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80136a8:	69fb      	ldr	r3, [r7, #28]
 80136aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d102      	bne.n	80136b6 <f_open+0x38e>
 80136b0:	2302      	movs	r3, #2
 80136b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80136b6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f040 8101 	bne.w	80138c2 <f_open+0x59a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80136c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	2b04      	cmp	r3, #4
 80136c6:	d12d      	bne.n	8013724 <f_open+0x3fc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80136c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80136ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80136d2:	4613      	mov	r3, r2
 80136d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80136d8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80136dc:	431a      	orrs	r2, r3
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80136e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80136e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	3334      	adds	r3, #52	@ 0x34
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fc fb73 	bl	800fdda <ld_dword>
 80136f4:	4602      	mov	r2, r0
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80136fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136fc:	691b      	ldr	r3, [r3, #16]
 80136fe:	3338      	adds	r3, #56	@ 0x38
 8013700:	4618      	mov	r0, r3
 8013702:	f7fc fb8d 	bl	800fe20 <ld_qword>
 8013706:	4602      	mov	r2, r0
 8013708:	460b      	mov	r3, r1
 801370a:	69f9      	ldr	r1, [r7, #28]
 801370c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013712:	691b      	ldr	r3, [r3, #16]
 8013714:	3321      	adds	r3, #33	@ 0x21
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	f003 0302 	and.w	r3, r3, #2
 801371c:	b2da      	uxtb	r2, r3
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	71da      	strb	r2, [r3, #7]
 8013722:	e016      	b.n	8013752 <f_open+0x42a>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013726:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013728:	4611      	mov	r1, r2
 801372a:	4618      	mov	r0, r3
 801372c:	f7fd ff00 	bl	8011530 <ld_clust>
 8013730:	4602      	mov	r2, r0
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013738:	331c      	adds	r3, #28
 801373a:	4618      	mov	r0, r3
 801373c:	f7fc fb4d 	bl	800fdda <ld_dword>
 8013740:	4603      	mov	r3, r0
 8013742:	2200      	movs	r2, #0
 8013744:	60bb      	str	r3, [r7, #8]
 8013746:	60fa      	str	r2, [r7, #12]
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801374e:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	2200      	movs	r2, #0
 8013756:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013760:	88da      	ldrh	r2, [r3, #6]
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	7dfa      	ldrb	r2, [r7, #23]
 801376a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	2200      	movs	r2, #0
 8013772:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	2200      	movs	r2, #0
 801377a:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801377c:	69f9      	ldr	r1, [r7, #28]
 801377e:	f04f 0200 	mov.w	r2, #0
 8013782:	f04f 0300 	mov.w	r3, #0
 8013786:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	3354      	adds	r3, #84	@ 0x54
 801378e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013792:	2100      	movs	r1, #0
 8013794:	4618      	mov	r0, r3
 8013796:	f7fc fd0e 	bl	80101b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801379a:	7dfb      	ldrb	r3, [r7, #23]
 801379c:	f003 0320 	and.w	r3, r3, #32
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 808e 	beq.w	80138c2 <f_open+0x59a>
 80137a6:	69fb      	ldr	r3, [r7, #28]
 80137a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80137ac:	4313      	orrs	r3, r2
 80137ae:	f000 8088 	beq.w	80138c2 <f_open+0x59a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80137b8:	69f9      	ldr	r1, [r7, #28]
 80137ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80137be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c0:	895b      	ldrh	r3, [r3, #10]
 80137c2:	025b      	lsls	r3, r3, #9
 80137c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	689b      	ldr	r3, [r3, #8]
 80137cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80137d6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80137da:	e027      	b.n	801382c <f_open+0x504>
					clst = get_fat(&fp->obj, clst);
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fc ffa6 	bl	8010734 <get_fat>
 80137e8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 80137ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d802      	bhi.n	80137fa <f_open+0x4d2>
 80137f4:	2302      	movs	r3, #2
 80137f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80137fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80137fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013802:	d102      	bne.n	801380a <f_open+0x4e2>
 8013804:	2301      	movs	r3, #1
 8013806:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801380a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801380e:	2200      	movs	r2, #0
 8013810:	469a      	mov	sl, r3
 8013812:	4693      	mov	fp, r2
 8013814:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8013818:	ebb2 010a 	subs.w	r1, r2, sl
 801381c:	6039      	str	r1, [r7, #0]
 801381e:	eb63 030b 	sbc.w	r3, r3, fp
 8013822:	607b      	str	r3, [r7, #4]
 8013824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013828:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 801382c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013830:	2b00      	cmp	r3, #0
 8013832:	d10a      	bne.n	801384a <f_open+0x522>
 8013834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013838:	2200      	movs	r2, #0
 801383a:	4698      	mov	r8, r3
 801383c:	4691      	mov	r9, r2
 801383e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8013842:	4590      	cmp	r8, r2
 8013844:	eb79 0303 	sbcs.w	r3, r9, r3
 8013848:	d3c8      	bcc.n	80137dc <f_open+0x4b4>
				}
				fp->clust = clst;
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013850:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013852:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013856:	2b00      	cmp	r3, #0
 8013858:	d133      	bne.n	80138c2 <f_open+0x59a>
 801385a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801385e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8013862:	2500      	movs	r5, #0
 8013864:	ea54 0305 	orrs.w	r3, r4, r5
 8013868:	d02b      	beq.n	80138c2 <f_open+0x59a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8013870:	4618      	mov	r0, r3
 8013872:	f7fc ff3f 	bl	80106f4 <clust2sect>
 8013876:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8013878:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801387a:	2b00      	cmp	r3, #0
 801387c:	d103      	bne.n	8013886 <f_open+0x55e>
						res = FR_INT_ERR;
 801387e:	2302      	movs	r3, #2
 8013880:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013884:	e01d      	b.n	80138c2 <f_open+0x59a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013886:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 801388a:	f04f 0200 	mov.w	r2, #0
 801388e:	f04f 0300 	mov.w	r3, #0
 8013892:	0a42      	lsrs	r2, r0, #9
 8013894:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8013898:	0a4b      	lsrs	r3, r1, #9
 801389a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801389c:	441a      	add	r2, r3
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80138a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a4:	7858      	ldrb	r0, [r3, #1]
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80138b0:	2301      	movs	r3, #1
 80138b2:	f7fc fa1b 	bl	800fcec <disk_read>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d002      	beq.n	80138c2 <f_open+0x59a>
 80138bc:	2301      	movs	r3, #1
 80138be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 80138c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80138c6:	f001 fd92 	bl	80153ee <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80138ca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d002      	beq.n	80138d8 <f_open+0x5b0>
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	2200      	movs	r2, #0
 80138d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80138d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138da:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80138de:	4611      	mov	r1, r2
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fc fcdb 	bl	801029c <unlock_fs>
 80138e6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	37a0      	adds	r7, #160	@ 0xa0
 80138ee:	46bd      	mov	sp, r7
 80138f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080138f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80138f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f8:	b08d      	sub	sp, #52	@ 0x34
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	60f8      	str	r0, [r7, #12]
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	2200      	movs	r2, #0
 801390c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f107 0210 	add.w	r2, r7, #16
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f7ff fc5a 	bl	80131d0 <validate>
 801391c:	4603      	mov	r3, r0
 801391e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013926:	2b00      	cmp	r3, #0
 8013928:	d108      	bne.n	801393c <f_write+0x48>
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013938:	2b00      	cmp	r3, #0
 801393a:	d009      	beq.n	8013950 <f_write+0x5c>
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013942:	4611      	mov	r1, r2
 8013944:	4618      	mov	r0, r3
 8013946:	f7fc fca9 	bl	801029c <unlock_fs>
 801394a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801394e:	e1af      	b.n	8013cb0 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013956:	f003 0302 	and.w	r3, r3, #2
 801395a:	2b00      	cmp	r3, #0
 801395c:	d106      	bne.n	801396c <f_write+0x78>
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	2107      	movs	r1, #7
 8013962:	4618      	mov	r0, r3
 8013964:	f7fc fc9a 	bl	801029c <unlock_fs>
 8013968:	2307      	movs	r3, #7
 801396a:	e1a1      	b.n	8013cb0 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	2b04      	cmp	r3, #4
 8013972:	f000 8188 	beq.w	8013c86 <f_write+0x392>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	18d1      	adds	r1, r2, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013986:	4613      	mov	r3, r2
 8013988:	4299      	cmp	r1, r3
 801398a:	f080 817c 	bcs.w	8013c86 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013994:	4613      	mov	r3, r2
 8013996:	43db      	mvns	r3, r3
 8013998:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801399a:	e174      	b.n	8013c86 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80139a2:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80139a6:	2500      	movs	r5, #0
 80139a8:	ea54 0305 	orrs.w	r3, r4, r5
 80139ac:	f040 8119 	bne.w	8013be2 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80139b6:	f04f 0200 	mov.w	r2, #0
 80139ba:	f04f 0300 	mov.w	r3, #0
 80139be:	0a42      	lsrs	r2, r0, #9
 80139c0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80139c4:	0a4b      	lsrs	r3, r1, #9
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	895b      	ldrh	r3, [r3, #10]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	4013      	ands	r3, r2
 80139ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d150      	bne.n	8013a78 <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80139dc:	4313      	orrs	r3, r2
 80139de:	d10c      	bne.n	80139fa <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80139e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d11a      	bne.n	8013a22 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2100      	movs	r1, #0
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fd faa1 	bl	8010f38 <create_chain>
 80139f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80139f8:	e013      	b.n	8013a22 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d007      	beq.n	8013a12 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013a08:	68f8      	ldr	r0, [r7, #12]
 8013a0a:	f7fd fb96 	bl	801113a <clmt_clust>
 8013a0e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a10:	e007      	b.n	8013a22 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a18:	4619      	mov	r1, r3
 8013a1a:	4610      	mov	r0, r2
 8013a1c:	f7fd fa8c 	bl	8010f38 <create_chain>
 8013a20:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f000 8133 	beq.w	8013c90 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d10a      	bne.n	8013a46 <f_write+0x152>
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2202      	movs	r2, #2
 8013a34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	2102      	movs	r1, #2
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fc fc2d 	bl	801029c <unlock_fs>
 8013a42:	2302      	movs	r3, #2
 8013a44:	e134      	b.n	8013cb0 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a4c:	d10a      	bne.n	8013a64 <f_write+0x170>
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2201      	movs	r2, #1
 8013a52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	2101      	movs	r1, #1
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fc fc1e 	bl	801029c <unlock_fs>
 8013a60:	2301      	movs	r3, #1
 8013a62:	e125      	b.n	8013cb0 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a68:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	689b      	ldr	r3, [r3, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d102      	bne.n	8013a78 <f_write+0x184>
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a76:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013a7e:	b25b      	sxtb	r3, r3
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da20      	bge.n	8013ac6 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	7858      	ldrb	r0, [r3, #1]
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a92:	2301      	movs	r3, #1
 8013a94:	f7fc f94a 	bl	800fd2c <disk_write>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00a      	beq.n	8013ab4 <f_write+0x1c0>
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	2101      	movs	r1, #1
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fc fbf6 	bl	801029c <unlock_fs>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e0fd      	b.n	8013cb0 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ac6:	693a      	ldr	r2, [r7, #16]
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013acc:	4619      	mov	r1, r3
 8013ace:	4610      	mov	r0, r2
 8013ad0:	f7fc fe10 	bl	80106f4 <clust2sect>
 8013ad4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d10a      	bne.n	8013af2 <f_write+0x1fe>
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2202      	movs	r2, #2
 8013ae0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	2102      	movs	r1, #2
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fc fbd7 	bl	801029c <unlock_fs>
 8013aee:	2302      	movs	r3, #2
 8013af0:	e0de      	b.n	8013cb0 <f_write+0x3bc>
			sect += csect;
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	4413      	add	r3, r2
 8013af8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	0a5b      	lsrs	r3, r3, #9
 8013afe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013b00:	6a3b      	ldr	r3, [r7, #32]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d044      	beq.n	8013b90 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b06:	69ba      	ldr	r2, [r7, #24]
 8013b08:	6a3b      	ldr	r3, [r7, #32]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	693a      	ldr	r2, [r7, #16]
 8013b0e:	8952      	ldrh	r2, [r2, #10]
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d905      	bls.n	8013b20 <f_write+0x22c>
					cc = fs->csize - csect;
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	895b      	ldrh	r3, [r3, #10]
 8013b18:	461a      	mov	r2, r3
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	7858      	ldrb	r0, [r3, #1]
 8013b24:	6a3b      	ldr	r3, [r7, #32]
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	69f9      	ldr	r1, [r7, #28]
 8013b2a:	f7fc f8ff 	bl	800fd2c <disk_write>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d00a      	beq.n	8013b4a <f_write+0x256>
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2201      	movs	r2, #1
 8013b38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2101      	movs	r1, #1
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fc fbab 	bl	801029c <unlock_fs>
 8013b46:	2301      	movs	r3, #1
 8013b48:	e0b2      	b.n	8013cb0 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	6a3a      	ldr	r2, [r7, #32]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d917      	bls.n	8013b88 <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	1ad3      	subs	r3, r2, r3
 8013b66:	025b      	lsls	r3, r3, #9
 8013b68:	69fa      	ldr	r2, [r7, #28]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b70:	4619      	mov	r1, r3
 8013b72:	f7fc faff 	bl	8010174 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	025b      	lsls	r3, r3, #9
 8013b8c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013b8e:	e04f      	b.n	8013c30 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b94:	697a      	ldr	r2, [r7, #20]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d020      	beq.n	8013bdc <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013ba6:	4290      	cmp	r0, r2
 8013ba8:	eb71 0303 	sbcs.w	r3, r1, r3
 8013bac:	d216      	bcs.n	8013bdc <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	7858      	ldrb	r0, [r3, #1]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013bb8:	2301      	movs	r3, #1
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	f7fc f896 	bl	800fcec <disk_read>
 8013bc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00a      	beq.n	8013bdc <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2201      	movs	r2, #1
 8013bca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fc fb62 	bl	801029c <unlock_fs>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	e069      	b.n	8013cb0 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	697a      	ldr	r2, [r7, #20]
 8013be0:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013be8:	4613      	mov	r3, r2
 8013bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bee:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013bf2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d901      	bls.n	8013c00 <f_write+0x30c>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c12:	440b      	add	r3, r1
 8013c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c16:	69f9      	ldr	r1, [r7, #28]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7fc faab 	bl	8010174 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c28:	b2da      	uxtb	r2, r3
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c30:	69fa      	ldr	r2, [r7, #28]
 8013c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c34:	4413      	add	r3, r2
 8013c36:	61fb      	str	r3, [r7, #28]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c40:	2000      	movs	r0, #0
 8013c42:	4688      	mov	r8, r1
 8013c44:	4681      	mov	r9, r0
 8013c46:	eb12 0a08 	adds.w	sl, r2, r8
 8013c4a:	eb43 0b09 	adc.w	fp, r3, r9
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013c5a:	68f9      	ldr	r1, [r7, #12]
 8013c5c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8013c60:	4282      	cmp	r2, r0
 8013c62:	eb73 0601 	sbcs.w	r6, r3, r1
 8013c66:	d201      	bcs.n	8013c6c <f_write+0x378>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	68f9      	ldr	r1, [r7, #12]
 8013c6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c78:	441a      	add	r2, r3
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	601a      	str	r2, [r3, #0]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c82:	1ad3      	subs	r3, r2, r3
 8013c84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f47f ae87 	bne.w	801399c <f_write+0xa8>
 8013c8e:	e000      	b.n	8013c92 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	2100      	movs	r1, #0
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fc faf7 	bl	801029c <unlock_fs>
 8013cae:	2300      	movs	r3, #0
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3734      	adds	r7, #52	@ 0x34
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b09c      	sub	sp, #112	@ 0x70
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8013cc8:	4611      	mov	r1, r2
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7ff fa80 	bl	80131d0 <validate>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8013cd6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f040 8123 	bne.w	8013f26 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f000 811b 	beq.w	8013f26 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013cf6:	b25b      	sxtb	r3, r3
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	da1c      	bge.n	8013d36 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cfe:	7858      	ldrb	r0, [r3, #1]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	f7fc f80e 	bl	800fd2c <disk_write>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d006      	beq.n	8013d24 <f_sync+0x6a>
 8013d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d18:	2101      	movs	r1, #1
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fc fabe 	bl	801029c <unlock_fs>
 8013d20:	2301      	movs	r3, #1
 8013d22:	e109      	b.n	8013f38 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d36:	f7fb fd41 	bl	800f7bc <get_fattime>
 8013d3a:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	2b04      	cmp	r3, #4
 8013d42:	f040 80a5 	bne.w	8013e90 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fc ffe1 	bl	8010d10 <fill_first_frag>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8013d54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10a      	bne.n	8013d72 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d62:	f04f 32ff 	mov.w	r2, #4294967295
 8013d66:	4619      	mov	r1, r3
 8013d68:	f7fd f801 	bl	8010d6e <fill_last_frag>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 8013d72:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f040 80d5 	bne.w	8013f26 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8013d7c:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 8013d80:	f001 fb29 	bl	80153d6 <ff_memalloc>
 8013d84:	6638      	str	r0, [r7, #96]	@ 0x60
 8013d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d106      	bne.n	8013d9a <f_sync+0xe0>
 8013d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d8e:	2111      	movs	r1, #17
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fc fa83 	bl	801029c <unlock_fs>
 8013d96:	2311      	movs	r3, #17
 8013d98:	e0ce      	b.n	8013f38 <f_sync+0x27e>
 8013d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013d9e:	60da      	str	r2, [r3, #12]
 8013da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013da2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013da4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8013da8:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	f107 0308 	add.w	r3, r7, #8
 8013db0:	4611      	mov	r1, r2
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fd ff18 	bl	8011be8 <load_obj_dir>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 8013dbe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d160      	bne.n	8013e88 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8013dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dc8:	691b      	ldr	r3, [r3, #16]
 8013dca:	3304      	adds	r3, #4
 8013dcc:	781a      	ldrb	r2, [r3, #0]
 8013dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dd0:	691b      	ldr	r3, [r3, #16]
 8013dd2:	3304      	adds	r3, #4
 8013dd4:	f042 0220 	orr.w	r2, r2, #32
 8013dd8:	b2d2      	uxtb	r2, r2
 8013dda:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	79da      	ldrb	r2, [r3, #7]
 8013de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013de2:	691b      	ldr	r3, [r3, #16]
 8013de4:	3321      	adds	r3, #33	@ 0x21
 8013de6:	f042 0201 	orr.w	r2, r2, #1
 8013dea:	b2d2      	uxtb	r2, r2
 8013dec:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8013dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013df0:	691b      	ldr	r3, [r3, #16]
 8013df2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	689b      	ldr	r3, [r3, #8]
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	4610      	mov	r0, r2
 8013dfe:	f7fc f905 	bl	801000c <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8013e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013e10:	4608      	mov	r0, r1
 8013e12:	f7fc f927 	bl	8010064 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8013e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e18:	691b      	ldr	r3, [r3, #16]
 8013e1a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013e24:	4608      	mov	r0, r1
 8013e26:	f7fc f91d 	bl	8010064 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8013e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e2c:	691b      	ldr	r3, [r3, #16]
 8013e2e:	330c      	adds	r3, #12
 8013e30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7fc f8ea 	bl	801000c <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8013e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e3a:	691b      	ldr	r3, [r3, #16]
 8013e3c:	3315      	adds	r3, #21
 8013e3e:	2200      	movs	r2, #0
 8013e40:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8013e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e44:	691b      	ldr	r3, [r3, #16]
 8013e46:	3310      	adds	r3, #16
 8013e48:	2100      	movs	r1, #0
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7fc f8de 	bl	801000c <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8013e50:	f107 0308 	add.w	r3, r7, #8
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7fd fefd 	bl	8011c54 <store_xdir>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8013e60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d10f      	bne.n	8013e88 <f_sync+0x1ce>
							res = sync_fs(fs);
 8013e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fc fbd4 	bl	8010618 <sync_fs>
 8013e70:	4603      	mov	r3, r0
 8013e72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e80:	b2da      	uxtb	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 8013e88:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013e8a:	f001 fab0 	bl	80153ee <ff_memfree>
 8013e8e:	e04a      	b.n	8013f26 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e96:	4619      	mov	r1, r3
 8013e98:	4610      	mov	r0, r2
 8013e9a:	f7fc fb8f 	bl	80105bc <move_window>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8013ea4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d13c      	bne.n	8013f26 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013eb0:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013eb4:	330b      	adds	r3, #11
 8013eb6:	781a      	ldrb	r2, [r3, #0]
 8013eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013eba:	330b      	adds	r3, #11
 8013ebc:	f042 0220 	orr.w	r2, r2, #32
 8013ec0:	b2d2      	uxtb	r2, r2
 8013ec2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6818      	ldr	r0, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013ed0:	f7fd fb4d 	bl	801156e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ed6:	f103 001c 	add.w	r0, r3, #28
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	f7fc f892 	bl	801000c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013eea:	3316      	adds	r3, #22
 8013eec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fc f88c 	bl	801000c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ef6:	3312      	adds	r3, #18
 8013ef8:	2100      	movs	r1, #0
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fc f86b 	bl	800ffd6 <st_word>
					fs->wflag = 1;
 8013f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f02:	2201      	movs	r2, #1
 8013f04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fc fb85 	bl	8010618 <sync_fs>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f28:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fc f9b4 	bl	801029c <unlock_fs>
 8013f34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3770      	adds	r7, #112	@ 0x70
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8013f40:	b590      	push	{r4, r7, lr}
 8013f42:	b0a9      	sub	sp, #164	@ 0xa4
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8013f50:	2301      	movs	r3, #1
 8013f52:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8013f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013f58:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8013f5a:	f107 030c 	add.w	r3, r7, #12
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fe fd33 	bl	80129ca <get_ldnumber>
 8013f64:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	da02      	bge.n	8013f72 <f_mkfs+0x32>
 8013f6c:	230b      	movs	r3, #11
 8013f6e:	f001 b8c3 	b.w	80150f8 <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8013f72:	4a9b      	ldr	r2, [pc, #620]	@ (80141e0 <f_mkfs+0x2a0>)
 8013f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d005      	beq.n	8013f8a <f_mkfs+0x4a>
 8013f7e:	4a98      	ldr	r2, [pc, #608]	@ (80141e0 <f_mkfs+0x2a0>)
 8013f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f86:	2200      	movs	r2, #0
 8013f88:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8013f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f8c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013f90:	2300      	movs	r3, #0
 8013f92:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8013f96:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fb fe7e 	bl	800fc9c <disk_initialize>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013fa6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8013faa:	f003 0301 	and.w	r3, r3, #1
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d002      	beq.n	8013fb8 <f_mkfs+0x78>
 8013fb2:	2303      	movs	r3, #3
 8013fb4:	f001 b8a0 	b.w	80150f8 <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013fb8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8013fbc:	f003 0304 	and.w	r3, r3, #4
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d002      	beq.n	8013fca <f_mkfs+0x8a>
 8013fc4:	230a      	movs	r3, #10
 8013fc6:	f001 b897 	b.w	80150f8 <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013fca:	f107 0220 	add.w	r2, r7, #32
 8013fce:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8013fd2:	2103      	movs	r1, #3
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fb fec9 	bl	800fd6c <disk_ioctl>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10c      	bne.n	8013ffa <f_mkfs+0xba>
 8013fe0:	6a3b      	ldr	r3, [r7, #32]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d009      	beq.n	8013ffa <f_mkfs+0xba>
 8013fe6:	6a3b      	ldr	r3, [r7, #32]
 8013fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013fec:	d805      	bhi.n	8013ffa <f_mkfs+0xba>
 8013fee:	6a3b      	ldr	r3, [r7, #32]
 8013ff0:	1e5a      	subs	r2, r3, #1
 8013ff2:	6a3b      	ldr	r3, [r7, #32]
 8013ff4:	4013      	ands	r3, r2
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d001      	beq.n	8013ffe <f_mkfs+0xbe>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014002:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d004      	beq.n	8014016 <f_mkfs+0xd6>
 801400c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	429a      	cmp	r2, r3
 8014014:	d309      	bcc.n	801402a <f_mkfs+0xea>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801401c:	d805      	bhi.n	801402a <f_mkfs+0xea>
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	1e5a      	subs	r2, r3, #1
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4013      	ands	r3, r2
 8014026:	2b00      	cmp	r3, #0
 8014028:	d002      	beq.n	8014030 <f_mkfs+0xf0>
 801402a:	2313      	movs	r3, #19
 801402c:	f001 b864 	b.w	80150f8 <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 8014030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	fbb2 f3f3 	udiv	r3, r2, r3
 801403a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014040:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014044:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014048:	fbb2 f3f3 	udiv	r3, r2, r3
 801404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801404e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014054:	fb02 f303 	mul.w	r3, r2, r3
 8014058:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 801405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <f_mkfs+0x126>
 8014060:	230e      	movs	r3, #14
 8014062:	f001 b849 	b.w	80150f8 <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014066:	f107 021c 	add.w	r2, r7, #28
 801406a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801406e:	2101      	movs	r1, #1
 8014070:	4618      	mov	r0, r3
 8014072:	f7fb fe7b 	bl	800fd6c <disk_ioctl>
 8014076:	4603      	mov	r3, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d002      	beq.n	8014082 <f_mkfs+0x142>
 801407c:	2301      	movs	r3, #1
 801407e:	f001 b83b 	b.w	80150f8 <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014082:	7afb      	ldrb	r3, [r7, #11]
 8014084:	f003 0308 	and.w	r3, r3, #8
 8014088:	2b00      	cmp	r3, #0
 801408a:	d001      	beq.n	8014090 <f_mkfs+0x150>
 801408c:	2300      	movs	r3, #0
 801408e:	e000      	b.n	8014092 <f_mkfs+0x152>
 8014090:	233f      	movs	r3, #63	@ 0x3f
 8014092:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014094:	69fb      	ldr	r3, [r7, #28]
 8014096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014098:	429a      	cmp	r2, r3
 801409a:	d902      	bls.n	80140a2 <f_mkfs+0x162>
 801409c:	230e      	movs	r3, #14
 801409e:	f001 b82b 	b.w	80150f8 <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 80140a2:	69fa      	ldr	r2, [r7, #28]
 80140a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80140ae:	d802      	bhi.n	80140b6 <f_mkfs+0x176>
 80140b0:	230e      	movs	r3, #14
 80140b2:	f001 b821 	b.w	80150f8 <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 80140b6:	7afb      	ldrb	r3, [r7, #11]
 80140b8:	f003 0304 	and.w	r3, r3, #4
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00f      	beq.n	80140e0 <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 80140c0:	7afb      	ldrb	r3, [r7, #11]
 80140c2:	f003 0307 	and.w	r3, r3, #7
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	d006      	beq.n	80140d8 <f_mkfs+0x198>
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80140d0:	d202      	bcs.n	80140d8 <f_mkfs+0x198>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b80      	cmp	r3, #128	@ 0x80
 80140d6:	d903      	bls.n	80140e0 <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 80140d8:	2304      	movs	r3, #4
 80140da:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80140de:	e023      	b.n	8014128 <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2b80      	cmp	r3, #128	@ 0x80
 80140e4:	d902      	bls.n	80140ec <f_mkfs+0x1ac>
 80140e6:	2313      	movs	r3, #19
 80140e8:	f001 b806 	b.w	80150f8 <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80140ec:	7afb      	ldrb	r3, [r7, #11]
 80140ee:	f003 0302 	and.w	r3, r3, #2
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00d      	beq.n	8014112 <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80140f6:	7afb      	ldrb	r3, [r7, #11]
 80140f8:	f003 0307 	and.w	r3, r3, #7
 80140fc:	2b02      	cmp	r3, #2
 80140fe:	d004      	beq.n	801410a <f_mkfs+0x1ca>
 8014100:	7afb      	ldrb	r3, [r7, #11]
 8014102:	f003 0301 	and.w	r3, r3, #1
 8014106:	2b00      	cmp	r3, #0
 8014108:	d103      	bne.n	8014112 <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 801410a:	2303      	movs	r3, #3
 801410c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014110:	e00a      	b.n	8014128 <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8014112:	7afb      	ldrb	r3, [r7, #11]
 8014114:	f003 0301 	and.w	r3, r3, #1
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <f_mkfs+0x1e2>
 801411c:	2313      	movs	r3, #19
 801411e:	f000 bfeb 	b.w	80150f8 <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 8014122:	2302      	movs	r3, #2
 8014124:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 8014128:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801412c:	2b04      	cmp	r3, #4
 801412e:	f040 842b 	bne.w	8014988 <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014138:	d202      	bcs.n	8014140 <f_mkfs+0x200>
 801413a:	230e      	movs	r3, #14
 801413c:	f000 bfdc 	b.w	80150f8 <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d10e      	bne.n	8014164 <f_mkfs+0x224>
			au = 8;
 8014146:	2308      	movs	r3, #8
 8014148:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014150:	d301      	bcc.n	8014156 <f_mkfs+0x216>
 8014152:	2340      	movs	r3, #64	@ 0x40
 8014154:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801415c:	d302      	bcc.n	8014164 <f_mkfs+0x224>
 801415e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014162:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8014164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014166:	3320      	adds	r3, #32
 8014168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 801416c:	69fa      	ldr	r2, [r7, #28]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	fbb2 f3f3 	udiv	r3, r2, r3
 8014174:	3302      	adds	r3, #2
 8014176:	009a      	lsls	r2, r3, #2
 8014178:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801417c:	4413      	add	r3, r2
 801417e:	1e5a      	subs	r2, r3, #1
 8014180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014184:	fbb2 f3f3 	udiv	r3, r2, r3
 8014188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 801418c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014190:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014194:	441a      	add	r2, r3
 8014196:	6a3b      	ldr	r3, [r7, #32]
 8014198:	4413      	add	r3, r2
 801419a:	1e5a      	subs	r2, r3, #1
 801419c:	6a3b      	ldr	r3, [r7, #32]
 801419e:	425b      	negs	r3, r3
 80141a0:	4013      	ands	r3, r2
 80141a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	085b      	lsrs	r3, r3, #1
 80141a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d302      	bcc.n	80141b4 <f_mkfs+0x274>
 80141ae:	230e      	movs	r3, #14
 80141b0:	f000 bfa2 	b.w	80150f8 <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 80141b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80141b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b8:	1ad2      	subs	r2, r2, r3
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	441a      	add	r2, r3
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80141c4:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 80141c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c8:	2b0f      	cmp	r3, #15
 80141ca:	d802      	bhi.n	80141d2 <f_mkfs+0x292>
 80141cc:	230e      	movs	r3, #14
 80141ce:	f000 bf93 	b.w	80150f8 <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 80141d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d4:	4a03      	ldr	r2, [pc, #12]	@ (80141e4 <f_mkfs+0x2a4>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d906      	bls.n	80141e8 <f_mkfs+0x2a8>
 80141da:	230e      	movs	r3, #14
 80141dc:	f000 bf8c 	b.w	80150f8 <f_mkfs+0x11b8>
 80141e0:	24001bc8 	.word	0x24001bc8
 80141e4:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 80141e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ea:	3307      	adds	r3, #7
 80141ec:	08db      	lsrs	r3, r3, #3
 80141ee:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 80141f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	fb03 f202 	mul.w	r2, r3, r2
 80141fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141fc:	4413      	add	r3, r2
 80141fe:	1e5a      	subs	r2, r3, #1
 8014200:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014204:	6879      	ldr	r1, [r7, #4]
 8014206:	fb01 f303 	mul.w	r3, r1, r3
 801420a:	fbb2 f3f3 	udiv	r3, r2, r3
 801420e:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	fb02 f303 	mul.w	r3, r2, r3
 8014218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801421a:	4413      	add	r3, r2
 801421c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 8014220:	2300      	movs	r3, #0
 8014222:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 8014224:	2300      	movs	r3, #0
 8014226:	677b      	str	r3, [r7, #116]	@ 0x74
 8014228:	2300      	movs	r3, #0
 801422a:	663b      	str	r3, [r7, #96]	@ 0x60
 801422c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801422e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014232:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8014236:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801423a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 801423c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801423e:	2b00      	cmp	r3, #0
 8014240:	d003      	beq.n	801424a <f_mkfs+0x30a>
 8014242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014244:	2b01      	cmp	r3, #1
 8014246:	d040      	beq.n	80142ca <f_mkfs+0x38a>
 8014248:	e04f      	b.n	80142ea <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 801424a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801424e:	4618      	mov	r0, r3
 8014250:	f000 fff0 	bl	8015234 <ff_wtoupper>
 8014254:	4603      	mov	r3, r0
 8014256:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 801425a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 801425e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014262:	429a      	cmp	r2, r3
 8014264:	d005      	beq.n	8014272 <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 8014266:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801426a:	3301      	adds	r3, #1
 801426c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8014270:	e049      	b.n	8014306 <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8014272:	2301      	movs	r3, #1
 8014274:	663b      	str	r3, [r7, #96]	@ 0x60
 8014276:	e002      	b.n	801427e <f_mkfs+0x33e>
 8014278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801427a:	3301      	adds	r3, #1
 801427c:	663b      	str	r3, [r7, #96]	@ 0x60
 801427e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014280:	b29a      	uxth	r2, r3
 8014282:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014286:	4413      	add	r3, r2
 8014288:	b29b      	uxth	r3, r3
 801428a:	2b00      	cmp	r3, #0
 801428c:	d011      	beq.n	80142b2 <f_mkfs+0x372>
 801428e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014290:	b29a      	uxth	r2, r3
 8014292:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014296:	4413      	add	r3, r2
 8014298:	b29c      	uxth	r4, r3
 801429a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801429c:	b29a      	uxth	r2, r3
 801429e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80142a2:	4413      	add	r3, r2
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	4618      	mov	r0, r3
 80142a8:	f000 ffc4 	bl	8015234 <ff_wtoupper>
 80142ac:	4603      	mov	r3, r0
 80142ae:	429c      	cmp	r4, r3
 80142b0:	d0e2      	beq.n	8014278 <f_mkfs+0x338>
				if (j >= 128) {
 80142b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80142b6:	d906      	bls.n	80142c6 <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 80142b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80142bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80142c0:	2302      	movs	r3, #2
 80142c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80142c4:	e01f      	b.n	8014306 <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 80142c6:	2301      	movs	r3, #1
 80142c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 80142ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80142ce:	1c5a      	adds	r2, r3, #1
 80142d0:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 80142d4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 80142d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142da:	3b01      	subs	r3, #1
 80142dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80142de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d10f      	bne.n	8014304 <f_mkfs+0x3c4>
 80142e4:	2300      	movs	r3, #0
 80142e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 80142e8:	e00c      	b.n	8014304 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 80142ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80142f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80142f8:	4413      	add	r3, r2
 80142fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 80142fe:	2300      	movs	r3, #0
 8014300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014302:	e000      	b.n	8014306 <f_mkfs+0x3c6>
				break;
 8014304:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 8014306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801430a:	4413      	add	r3, r2
 801430c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014310:	b2d2      	uxtb	r2, r2
 8014312:	701a      	strb	r2, [r3, #0]
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014318:	4618      	mov	r0, r3
 801431a:	f7fd fb94 	bl	8011a46 <xsum32>
 801431e:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8014320:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8014324:	0a1b      	lsrs	r3, r3, #8
 8014326:	b299      	uxth	r1, r3
 8014328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801432a:	3301      	adds	r3, #1
 801432c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801432e:	4413      	add	r3, r2
 8014330:	b2ca      	uxtb	r2, r1
 8014332:	701a      	strb	r2, [r3, #0]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014338:	4618      	mov	r0, r3
 801433a:	f7fd fb84 	bl	8011a46 <xsum32>
 801433e:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 8014340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014342:	3302      	adds	r3, #2
 8014344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014348:	3302      	adds	r3, #2
 801434a:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 801434c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014350:	2b00      	cmp	r3, #0
 8014352:	d003      	beq.n	801435c <f_mkfs+0x41c>
 8014354:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014358:	429a      	cmp	r2, r3
 801435a:	d122      	bne.n	80143a2 <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 801435c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014362:	4413      	add	r3, r2
 8014364:	1e5a      	subs	r2, r3, #1
 8014366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801436a:	fbb2 f3f3 	udiv	r3, r2, r3
 801436e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8014372:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801437a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801437e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014380:	f7fb fcd4 	bl	800fd2c <disk_write>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d002      	beq.n	8014390 <f_mkfs+0x450>
 801438a:	2301      	movs	r3, #1
 801438c:	f000 beb4 	b.w	80150f8 <f_mkfs+0x11b8>
				sect += n; i = 0;
 8014390:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014398:	4413      	add	r3, r2
 801439a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801439e:	2300      	movs	r3, #0
 80143a0:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 80143a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	f47f af48 	bne.w	801423c <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 80143ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	fb03 f202 	mul.w	r2, r3, r2
 80143b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143b8:	4413      	add	r3, r2
 80143ba:	1e5a      	subs	r2, r3, #1
 80143bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80143c0:	6879      	ldr	r1, [r7, #4]
 80143c2:	fb01 f303 	mul.w	r3, r1, r3
 80143c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80143ca:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 80143cc:	2301      	movs	r3, #1
 80143ce:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80143d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	4413      	add	r3, r2
 80143de:	1e5a      	subs	r2, r3, #1
 80143e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80143e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80143e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 80143ec:	693a      	ldr	r2, [r7, #16]
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	441a      	add	r2, r3
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	4413      	add	r3, r2
 80143f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 80143f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80143fa:	2100      	movs	r1, #0
 80143fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80143fe:	f7fb feda 	bl	80101b6 <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 8014402:	2300      	movs	r3, #0
 8014404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014406:	e009      	b.n	801441c <f_mkfs+0x4dc>
 8014408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801440a:	1c5a      	adds	r2, r3, #1
 801440c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801440e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014410:	4413      	add	r3, r2
 8014412:	22ff      	movs	r2, #255	@ 0xff
 8014414:	701a      	strb	r2, [r3, #0]
 8014416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014418:	3b08      	subs	r3, #8
 801441a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801441c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801441e:	2b07      	cmp	r3, #7
 8014420:	d903      	bls.n	801442a <f_mkfs+0x4ea>
 8014422:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014426:	429a      	cmp	r2, r3
 8014428:	d3ee      	bcc.n	8014408 <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 801442a:	2301      	movs	r3, #1
 801442c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8014430:	e013      	b.n	801445a <f_mkfs+0x51a>
 8014432:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014436:	4413      	add	r3, r2
 8014438:	7819      	ldrb	r1, [r3, #0]
 801443a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801443c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801443e:	4413      	add	r3, r2
 8014440:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8014444:	430a      	orrs	r2, r1
 8014446:	b2d2      	uxtb	r2, r2
 8014448:	701a      	strb	r2, [r3, #0]
 801444a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8014454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014456:	3b01      	subs	r3, #1
 8014458:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801445a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801445c:	2b00      	cmp	r3, #0
 801445e:	d003      	beq.n	8014468 <f_mkfs+0x528>
 8014460:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014464:	429a      	cmp	r2, r3
 8014466:	d3e4      	bcc.n	8014432 <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8014468:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801446c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801446e:	4293      	cmp	r3, r2
 8014470:	bf28      	it	cs
 8014472:	4613      	movcs	r3, r2
 8014474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8014478:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801447c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014480:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014486:	f7fb fc51 	bl	800fd2c <disk_write>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <f_mkfs+0x556>
 8014490:	2301      	movs	r3, #1
 8014492:	f000 be31 	b.w	80150f8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8014496:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801449a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801449e:	4413      	add	r3, r2
 80144a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80144a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80144a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144ac:	1ad3      	subs	r3, r2, r3
 80144ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80144b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d19e      	bne.n	80143f8 <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 80144ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80144c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80144c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 80144ca:	2300      	movs	r3, #0
 80144cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80144ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80144d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80144d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80144d4:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 80144d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144d8:	2100      	movs	r1, #0
 80144da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80144dc:	f7fb fe6b 	bl	80101b6 <mem_set>
 80144e0:	2300      	movs	r3, #0
 80144e2:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 80144e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d134      	bne.n	8014554 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 80144ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80144ee:	4413      	add	r3, r2
 80144f0:	f06f 0107 	mvn.w	r1, #7
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fb fd89 	bl	801000c <st_dword>
 80144fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80144fc:	3304      	adds	r3, #4
 80144fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014502:	3301      	adds	r3, #1
 8014504:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 8014506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801450a:	4413      	add	r3, r2
 801450c:	f04f 31ff 	mov.w	r1, #4294967295
 8014510:	4618      	mov	r0, r3
 8014512:	f7fb fd7b 	bl	801000c <st_dword>
 8014516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014518:	3304      	adds	r3, #4
 801451a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801451c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801451e:	3301      	adds	r3, #1
 8014520:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 8014522:	e017      	b.n	8014554 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 8014524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014528:	441a      	add	r2, r3
 801452a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801452c:	2b01      	cmp	r3, #1
 801452e:	d902      	bls.n	8014536 <f_mkfs+0x5f6>
 8014530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014532:	3301      	adds	r3, #1
 8014534:	e001      	b.n	801453a <f_mkfs+0x5fa>
 8014536:	f04f 33ff 	mov.w	r3, #4294967295
 801453a:	4619      	mov	r1, r3
 801453c:	4610      	mov	r0, r2
 801453e:	f7fb fd65 	bl	801000c <st_dword>
					i += 4; cl++; nb--;
 8014542:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014544:	3304      	adds	r3, #4
 8014546:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801454a:	3301      	adds	r3, #1
 801454c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801454e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014550:	3b01      	subs	r3, #1
 8014552:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 8014554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014556:	2b00      	cmp	r3, #0
 8014558:	d003      	beq.n	8014562 <f_mkfs+0x622>
 801455a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801455e:	429a      	cmp	r2, r3
 8014560:	d3e0      	bcc.n	8014524 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 8014562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014564:	2b00      	cmp	r3, #0
 8014566:	d10b      	bne.n	8014580 <f_mkfs+0x640>
 8014568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801456a:	2b02      	cmp	r3, #2
 801456c:	d808      	bhi.n	8014580 <f_mkfs+0x640>
 801456e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014570:	1c5a      	adds	r2, r3, #1
 8014572:	663a      	str	r2, [r7, #96]	@ 0x60
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	33a0      	adds	r3, #160	@ 0xa0
 8014578:	443b      	add	r3, r7
 801457a:	f853 3c90 	ldr.w	r3, [r3, #-144]
 801457e:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 8014580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014582:	2b00      	cmp	r3, #0
 8014584:	d003      	beq.n	801458e <f_mkfs+0x64e>
 8014586:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458a:	429a      	cmp	r2, r3
 801458c:	d3e2      	bcc.n	8014554 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 801458e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014594:	4293      	cmp	r3, r2
 8014596:	bf28      	it	cs
 8014598:	4613      	movcs	r3, r2
 801459a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 801459e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80145a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80145aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80145ac:	f7fb fbbe 	bl	800fd2c <disk_write>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d002      	beq.n	80145bc <f_mkfs+0x67c>
 80145b6:	2301      	movs	r3, #1
 80145b8:	f000 bd9e 	b.w	80150f8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 80145bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80145c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145c4:	4413      	add	r3, r2
 80145c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80145ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80145ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145d2:	1ad3      	subs	r3, r2, r3
 80145d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80145d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80145dc:	2b00      	cmp	r3, #0
 80145de:	f47f af7a 	bne.w	80144d6 <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 80145e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145e4:	2100      	movs	r1, #0
 80145e6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80145e8:	f7fb fde5 	bl	80101b6 <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 80145ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145ee:	2283      	movs	r2, #131	@ 0x83
 80145f0:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 80145f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145f4:	3320      	adds	r3, #32
 80145f6:	2281      	movs	r2, #129	@ 0x81
 80145f8:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 80145fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145fc:	3334      	adds	r3, #52	@ 0x34
 80145fe:	2102      	movs	r1, #2
 8014600:	4618      	mov	r0, r3
 8014602:	f7fb fd03 	bl	801000c <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 8014606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014608:	3338      	adds	r3, #56	@ 0x38
 801460a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801460c:	4618      	mov	r0, r3
 801460e:	f7fb fcfd 	bl	801000c <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 8014612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014614:	3340      	adds	r3, #64	@ 0x40
 8014616:	2282      	movs	r2, #130	@ 0x82
 8014618:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 801461a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801461c:	3344      	adds	r3, #68	@ 0x44
 801461e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014620:	4618      	mov	r0, r3
 8014622:	f7fb fcf3 	bl	801000c <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 8014626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014628:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	3302      	adds	r3, #2
 8014630:	4619      	mov	r1, r3
 8014632:	4610      	mov	r0, r2
 8014634:	f7fb fcea 	bl	801000c <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 8014638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801463a:	3358      	adds	r3, #88	@ 0x58
 801463c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801463e:	4618      	mov	r0, r3
 8014640:	f7fb fce4 	bl	801000c <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 8014644:	693a      	ldr	r2, [r7, #16]
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	4413      	add	r3, r2
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	fb02 f303 	mul.w	r3, r2, r3
 8014650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014652:	4413      	add	r3, r2
 8014654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801465e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014664:	4293      	cmp	r3, r2
 8014666:	bf28      	it	cs
 8014668:	4613      	movcs	r3, r2
 801466a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 801466e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014676:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801467a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801467c:	f7fb fb56 	bl	800fd2c <disk_write>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d002      	beq.n	801468c <f_mkfs+0x74c>
 8014686:	2301      	movs	r3, #1
 8014688:	f000 bd36 	b.w	80150f8 <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 801468c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014690:	461a      	mov	r2, r3
 8014692:	2100      	movs	r1, #0
 8014694:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014696:	f7fb fd8e 	bl	80101b6 <mem_set>
			sect += n; nsect -= n;
 801469a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801469e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146a2:	4413      	add	r3, r2
 80146a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80146a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80146ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80146b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d1cf      	bne.n	801465e <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 80146be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 80146c4:	2300      	movs	r3, #0
 80146c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80146ca:	e157      	b.n	801497c <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 80146cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80146d0:	461a      	mov	r2, r3
 80146d2:	2100      	movs	r1, #0
 80146d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80146d6:	f7fb fd6e 	bl	80101b6 <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 80146da:	220b      	movs	r2, #11
 80146dc:	49b5      	ldr	r1, [pc, #724]	@ (80149b4 <f_mkfs+0xa74>)
 80146de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80146e0:	f7fb fd48 	bl	8010174 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 80146e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146e6:	3340      	adds	r3, #64	@ 0x40
 80146e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fb fc8e 	bl	801000c <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 80146f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146f2:	3348      	adds	r3, #72	@ 0x48
 80146f4:	69fa      	ldr	r2, [r7, #28]
 80146f6:	4611      	mov	r1, r2
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7fb fc87 	bl	801000c <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 80146fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014700:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8014704:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	4619      	mov	r1, r3
 801470e:	f7fb fc7d 	bl	801000c <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 8014712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014714:	3354      	adds	r3, #84	@ 0x54
 8014716:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801471a:	4618      	mov	r0, r3
 801471c:	f7fb fc76 	bl	801000c <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 8014720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014722:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8014726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801472a:	1ad3      	subs	r3, r2, r3
 801472c:	4619      	mov	r1, r3
 801472e:	f7fb fc6d 	bl	801000c <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 8014732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014734:	335c      	adds	r3, #92	@ 0x5c
 8014736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014738:	4618      	mov	r0, r3
 801473a:	f7fb fc67 	bl	801000c <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 801473e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014740:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8014744:	693a      	ldr	r2, [r7, #16]
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	4413      	add	r3, r2
 801474a:	3302      	adds	r3, #2
 801474c:	4619      	mov	r1, r3
 801474e:	f7fb fc5d 	bl	801000c <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 8014752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014754:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8014758:	f7fb f830 	bl	800f7bc <get_fattime>
 801475c:	4603      	mov	r3, r0
 801475e:	4619      	mov	r1, r3
 8014760:	4620      	mov	r0, r4
 8014762:	f7fb fc53 	bl	801000c <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 8014766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014768:	3368      	adds	r3, #104	@ 0x68
 801476a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801476e:	4618      	mov	r0, r3
 8014770:	f7fb fc31 	bl	800ffd6 <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 8014774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014776:	336c      	adds	r3, #108	@ 0x6c
 8014778:	2200      	movs	r2, #0
 801477a:	701a      	strb	r2, [r3, #0]
 801477c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014782:	e005      	b.n	8014790 <f_mkfs+0x850>
 8014784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014786:	336c      	adds	r3, #108	@ 0x6c
 8014788:	781a      	ldrb	r2, [r3, #0]
 801478a:	3201      	adds	r2, #1
 801478c:	b2d2      	uxtb	r2, r2
 801478e:	701a      	strb	r2, [r3, #0]
 8014790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014792:	085b      	lsrs	r3, r3, #1
 8014794:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014798:	2b00      	cmp	r3, #0
 801479a:	d1f3      	bne.n	8014784 <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 801479c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801479e:	336d      	adds	r3, #109	@ 0x6d
 80147a0:	2200      	movs	r2, #0
 80147a2:	701a      	strb	r2, [r3, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80147a8:	e005      	b.n	80147b6 <f_mkfs+0x876>
 80147aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147ac:	336d      	adds	r3, #109	@ 0x6d
 80147ae:	781a      	ldrb	r2, [r3, #0]
 80147b0:	3201      	adds	r2, #1
 80147b2:	b2d2      	uxtb	r2, r2
 80147b4:	701a      	strb	r2, [r3, #0]
 80147b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147b8:	085b      	lsrs	r3, r3, #1
 80147ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80147bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d1f3      	bne.n	80147aa <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 80147c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147c4:	336e      	adds	r3, #110	@ 0x6e
 80147c6:	2201      	movs	r2, #1
 80147c8:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 80147ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147cc:	336f      	adds	r3, #111	@ 0x6f
 80147ce:	2280      	movs	r2, #128	@ 0x80
 80147d0:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 80147d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147d4:	3378      	adds	r3, #120	@ 0x78
 80147d6:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fb fbfb 	bl	800ffd6 <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 80147e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80147e6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fb fbf3 	bl	800ffd6 <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80147f0:	2300      	movs	r3, #0
 80147f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80147f4:	2300      	movs	r3, #0
 80147f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80147f8:	e014      	b.n	8014824 <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 80147fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147fc:	2b6a      	cmp	r3, #106	@ 0x6a
 80147fe:	d00e      	beq.n	801481e <f_mkfs+0x8de>
 8014800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014802:	2b6b      	cmp	r3, #107	@ 0x6b
 8014804:	d00b      	beq.n	801481e <f_mkfs+0x8de>
 8014806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014808:	2b70      	cmp	r3, #112	@ 0x70
 801480a:	d008      	beq.n	801481e <f_mkfs+0x8de>
 801480c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801480e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014810:	4413      	add	r3, r2
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014816:	4618      	mov	r0, r3
 8014818:	f7fd f915 	bl	8011a46 <xsum32>
 801481c:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 801481e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014820:	3301      	adds	r3, #1
 8014822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014824:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014828:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801482a:	429a      	cmp	r2, r3
 801482c:	d3e5      	bcc.n	80147fa <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 801482e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014832:	1c53      	adds	r3, r2, #1
 8014834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014838:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801483c:	2301      	movs	r3, #1
 801483e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014840:	f7fb fa74 	bl	800fd2c <disk_write>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d002      	beq.n	8014850 <f_mkfs+0x910>
 801484a:	2301      	movs	r3, #1
 801484c:	f000 bc54 	b.w	80150f8 <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 8014850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014854:	461a      	mov	r2, r3
 8014856:	2100      	movs	r1, #0
 8014858:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801485a:	f7fb fcac 	bl	80101b6 <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 801485e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014862:	3b02      	subs	r3, #2
 8014864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014866:	4413      	add	r3, r2
 8014868:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801486c:	4618      	mov	r0, r3
 801486e:	f7fb fbb2 	bl	800ffd6 <st_word>
			for (j = 1; j < 9; j++) {
 8014872:	2301      	movs	r3, #1
 8014874:	663b      	str	r3, [r7, #96]	@ 0x60
 8014876:	e026      	b.n	80148c6 <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8014878:	2300      	movs	r3, #0
 801487a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801487c:	e00a      	b.n	8014894 <f_mkfs+0x954>
 801487e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014880:	1c5a      	adds	r2, r3, #1
 8014882:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014886:	4413      	add	r3, r2
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801488c:	4618      	mov	r0, r3
 801488e:	f7fd f8da 	bl	8011a46 <xsum32>
 8014892:	6738      	str	r0, [r7, #112]	@ 0x70
 8014894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014898:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801489a:	429a      	cmp	r2, r3
 801489c:	d3ef      	bcc.n	801487e <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 801489e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80148a2:	1c53      	adds	r3, r2, #1
 80148a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80148a8:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80148ac:	2301      	movs	r3, #1
 80148ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80148b0:	f7fb fa3c 	bl	800fd2c <disk_write>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <f_mkfs+0x980>
 80148ba:	2301      	movs	r3, #1
 80148bc:	f000 bc1c 	b.w	80150f8 <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 80148c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148c2:	3301      	adds	r3, #1
 80148c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80148c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148c8:	2b08      	cmp	r3, #8
 80148ca:	d9d5      	bls.n	8014878 <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 80148cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80148d0:	461a      	mov	r2, r3
 80148d2:	2100      	movs	r1, #0
 80148d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80148d6:	f7fb fc6e 	bl	80101b6 <mem_set>
			for ( ; j < 11; j++) {
 80148da:	e025      	b.n	8014928 <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 80148dc:	2300      	movs	r3, #0
 80148de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80148e0:	e00a      	b.n	80148f8 <f_mkfs+0x9b8>
 80148e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80148e4:	1c5a      	adds	r2, r3, #1
 80148e6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80148e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80148ea:	4413      	add	r3, r2
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fd f8a8 	bl	8011a46 <xsum32>
 80148f6:	6738      	str	r0, [r7, #112]	@ 0x70
 80148f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80148fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80148fe:	429a      	cmp	r2, r3
 8014900:	d3ef      	bcc.n	80148e2 <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8014902:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014906:	1c53      	adds	r3, r2, #1
 8014908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801490c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014910:	2301      	movs	r3, #1
 8014912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014914:	f7fb fa0a 	bl	800fd2c <disk_write>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <f_mkfs+0x9e2>
 801491e:	2301      	movs	r3, #1
 8014920:	e3ea      	b.n	80150f8 <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 8014922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014924:	3301      	adds	r3, #1
 8014926:	663b      	str	r3, [r7, #96]	@ 0x60
 8014928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801492a:	2b0a      	cmp	r3, #10
 801492c:	d9d6      	bls.n	80148dc <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 801492e:	2300      	movs	r3, #0
 8014930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014932:	e009      	b.n	8014948 <f_mkfs+0xa08>
 8014934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014938:	4413      	add	r3, r2
 801493a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801493c:	4618      	mov	r0, r3
 801493e:	f7fb fb65 	bl	801000c <st_dword>
 8014942:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014944:	3304      	adds	r3, #4
 8014946:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014948:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801494c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801494e:	429a      	cmp	r2, r3
 8014950:	d3f0      	bcc.n	8014934 <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8014952:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014956:	1c53      	adds	r3, r2, #1
 8014958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801495c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014960:	2301      	movs	r3, #1
 8014962:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014964:	f7fb f9e2 	bl	800fd2c <disk_write>
 8014968:	4603      	mov	r3, r0
 801496a:	2b00      	cmp	r3, #0
 801496c:	d001      	beq.n	8014972 <f_mkfs+0xa32>
 801496e:	2301      	movs	r3, #1
 8014970:	e3c2      	b.n	80150f8 <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 8014972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014976:	3301      	adds	r3, #1
 8014978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014980:	2b01      	cmp	r3, #1
 8014982:	f67f aea3 	bls.w	80146cc <f_mkfs+0x78c>
 8014986:	e324      	b.n	8014fd2 <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801498e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014992:	2b03      	cmp	r3, #3
 8014994:	d14a      	bne.n	8014a2c <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 8014996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801499a:	2b00      	cmp	r3, #0
 801499c:	d123      	bne.n	80149e6 <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	0c5b      	lsrs	r3, r3, #17
 80149a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80149a6:	2300      	movs	r3, #0
 80149a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80149aa:	2301      	movs	r3, #1
 80149ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80149b0:	e00a      	b.n	80149c8 <f_mkfs+0xa88>
 80149b2:	bf00      	nop
 80149b4:	0801aa54 	.word	0x0801aa54
 80149b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149ba:	3301      	adds	r3, #1
 80149bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80149be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80149c8:	4aa0      	ldr	r2, [pc, #640]	@ (8014c4c <f_mkfs+0xd0c>)
 80149ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d008      	beq.n	80149e6 <f_mkfs+0xaa6>
 80149d4:	4a9d      	ldr	r2, [pc, #628]	@ (8014c4c <f_mkfs+0xd0c>)
 80149d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149dc:	461a      	mov	r2, r3
 80149de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d2e8      	bcs.n	80149b8 <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80149e6:	69fa      	ldr	r2, [r7, #28]
 80149e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80149ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80149f0:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80149f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f4:	3302      	adds	r3, #2
 80149f6:	009a      	lsls	r2, r3, #2
 80149f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80149fc:	4413      	add	r3, r2
 80149fe:	1e5a      	subs	r2, r3, #1
 8014a00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 8014a0c:	2320      	movs	r3, #32
 8014a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 8014a12:	2300      	movs	r3, #0
 8014a14:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8014a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a18:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d903      	bls.n	8014a28 <f_mkfs+0xae8>
 8014a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a22:	4a8b      	ldr	r2, [pc, #556]	@ (8014c50 <f_mkfs+0xd10>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d959      	bls.n	8014adc <f_mkfs+0xb9c>
 8014a28:	230e      	movs	r3, #14
 8014a2a:	e365      	b.n	80150f8 <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d120      	bne.n	8014a76 <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	0b1b      	lsrs	r3, r3, #12
 8014a38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014a40:	2301      	movs	r3, #1
 8014a42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014a46:	e007      	b.n	8014a58 <f_mkfs+0xb18>
 8014a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014a52:	005b      	lsls	r3, r3, #1
 8014a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014a58:	4a7e      	ldr	r2, [pc, #504]	@ (8014c54 <f_mkfs+0xd14>)
 8014a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d008      	beq.n	8014a76 <f_mkfs+0xb36>
 8014a64:	4a7b      	ldr	r2, [pc, #492]	@ (8014c54 <f_mkfs+0xd14>)
 8014a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d2e8      	bcs.n	8014a48 <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 8014a76:	69fa      	ldr	r2, [r7, #28]
 8014a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a80:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 8014a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a84:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d905      	bls.n	8014a98 <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8e:	3302      	adds	r3, #2
 8014a90:	005b      	lsls	r3, r3, #1
 8014a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014a96:	e00b      	b.n	8014ab0 <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	085b      	lsrs	r3, r3, #1
 8014aaa:	3303      	adds	r3, #3
 8014aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014ab0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014ab8:	4413      	add	r3, r2
 8014aba:	1e5a      	subs	r2, r3, #1
 8014abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 8014ac8:	2301      	movs	r3, #1
 8014aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8014ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ad0:	015a      	lsls	r2, r3, #5
 8014ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014ae2:	4413      	add	r3, r2
 8014ae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8014ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014aec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014aee:	fb03 f202 	mul.w	r2, r3, r2
 8014af2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014af6:	4413      	add	r3, r2
 8014af8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014afa:	4413      	add	r3, r2
 8014afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014afe:	6a3a      	ldr	r2, [r7, #32]
 8014b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b02:	4413      	add	r3, r2
 8014b04:	1e5a      	subs	r2, r3, #1
 8014b06:	6a3b      	ldr	r3, [r7, #32]
 8014b08:	425b      	negs	r3, r3
 8014b0a:	401a      	ands	r2, r3
 8014b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b0e:	1ad3      	subs	r3, r2, r3
 8014b10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014b14:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014b18:	2b03      	cmp	r3, #3
 8014b1a:	d10e      	bne.n	8014b3a <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 8014b1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b24:	4413      	add	r3, r2
 8014b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014b2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b32:	4413      	add	r3, r2
 8014b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014b38:	e009      	b.n	8014b4e <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014b3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014b48:	4413      	add	r3, r2
 8014b4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b52:	011a      	lsls	r2, r3, #4
 8014b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b56:	441a      	add	r2, r3
 8014b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b5a:	1ad2      	subs	r2, r2, r3
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d901      	bls.n	8014b66 <f_mkfs+0xc26>
 8014b62:	230e      	movs	r3, #14
 8014b64:	e2c8      	b.n	80150f8 <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014b66:	69fa      	ldr	r2, [r7, #28]
 8014b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b6c:	1ad2      	subs	r2, r2, r3
 8014b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014b74:	fb01 f303 	mul.w	r3, r1, r3
 8014b78:	1ad2      	subs	r2, r2, r3
 8014b7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b7c:	1ad2      	subs	r2, r2, r3
 8014b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b86:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 8014b88:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014b8c:	2b03      	cmp	r3, #3
 8014b8e:	d110      	bne.n	8014bb2 <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d80b      	bhi.n	8014bb2 <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d106      	bne.n	8014bae <f_mkfs+0xc6e>
 8014ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014ba4:	085b      	lsrs	r3, r3, #1
 8014ba6:	607b      	str	r3, [r7, #4]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d148      	bne.n	8014c40 <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 8014bae:	230e      	movs	r3, #14
 8014bb0:	e2a2      	b.n	80150f8 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 8014bb2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014bb6:	2b02      	cmp	r3, #2
 8014bb8:	d137      	bne.n	8014c2a <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bbc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	d921      	bls.n	8014c08 <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d109      	bne.n	8014bde <f_mkfs+0xc9e>
 8014bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014bce:	005b      	lsls	r3, r3, #1
 8014bd0:	2b40      	cmp	r3, #64	@ 0x40
 8014bd2:	d804      	bhi.n	8014bde <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014bd8:	005b      	lsls	r3, r3, #1
 8014bda:	607b      	str	r3, [r7, #4]
 8014bdc:	e035      	b.n	8014c4a <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 8014bde:	7afb      	ldrb	r3, [r7, #11]
 8014be0:	f003 0302 	and.w	r3, r3, #2
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d003      	beq.n	8014bf0 <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014be8:	2303      	movs	r3, #3
 8014bea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014bee:	e02c      	b.n	8014c4a <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d106      	bne.n	8014c04 <f_mkfs+0xcc4>
 8014bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	607b      	str	r3, [r7, #4]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b80      	cmp	r3, #128	@ 0x80
 8014c02:	d91f      	bls.n	8014c44 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 8014c04:	230e      	movs	r3, #14
 8014c06:	e277      	b.n	80150f8 <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c0a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	d80b      	bhi.n	8014c2a <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d106      	bne.n	8014c26 <f_mkfs+0xce6>
 8014c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	607b      	str	r3, [r7, #4]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2b80      	cmp	r3, #128	@ 0x80
 8014c24:	d910      	bls.n	8014c48 <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 8014c26:	230e      	movs	r3, #14
 8014c28:	e266      	b.n	80150f8 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014c2a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d112      	bne.n	8014c58 <f_mkfs+0xd18>
 8014c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c34:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d90d      	bls.n	8014c58 <f_mkfs+0xd18>
 8014c3c:	230e      	movs	r3, #14
 8014c3e:	e25b      	b.n	80150f8 <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014c40:	bf00      	nop
 8014c42:	e6a1      	b.n	8014988 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014c44:	bf00      	nop
 8014c46:	e69f      	b.n	8014988 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014c48:	bf00      	nop
			pau = au;
 8014c4a:	e69d      	b.n	8014988 <f_mkfs+0xa48>
 8014c4c:	0801b468 	.word	0x0801b468
 8014c50:	0ffffff5 	.word	0x0ffffff5
 8014c54:	0801b478 	.word	0x0801b478

			/* Ok, it is the valid cluster configuration */
			break;
 8014c58:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8014c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014c5e:	461a      	mov	r2, r3
 8014c60:	2100      	movs	r1, #0
 8014c62:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014c64:	f7fb faa7 	bl	80101b6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014c68:	220b      	movs	r2, #11
 8014c6a:	49be      	ldr	r1, [pc, #760]	@ (8014f64 <f_mkfs+0x1024>)
 8014c6c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014c6e:	f7fb fa81 	bl	8010174 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c74:	330b      	adds	r3, #11
 8014c76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014c7a:	4611      	mov	r1, r2
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fb f9aa 	bl	800ffd6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c84:	330d      	adds	r3, #13
 8014c86:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014c8a:	b2d2      	uxtb	r2, r2
 8014c8c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c90:	330e      	adds	r3, #14
 8014c92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014c96:	b292      	uxth	r2, r2
 8014c98:	4611      	mov	r1, r2
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7fb f99b 	bl	800ffd6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ca2:	3310      	adds	r3, #16
 8014ca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014ca6:	b2d2      	uxtb	r2, r2
 8014ca8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cac:	f103 0211 	add.w	r2, r3, #17
 8014cb0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014cb4:	2b03      	cmp	r3, #3
 8014cb6:	d002      	beq.n	8014cbe <f_mkfs+0xd7e>
 8014cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	e000      	b.n	8014cc0 <f_mkfs+0xd80>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	4610      	mov	r0, r2
 8014cc4:	f7fb f987 	bl	800ffd6 <st_word>
		if (sz_vol < 0x10000) {
 8014cc8:	69fb      	ldr	r3, [r7, #28]
 8014cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014cce:	d208      	bcs.n	8014ce2 <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cd2:	3313      	adds	r3, #19
 8014cd4:	69fa      	ldr	r2, [r7, #28]
 8014cd6:	b292      	uxth	r2, r2
 8014cd8:	4611      	mov	r1, r2
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fb f97b 	bl	800ffd6 <st_word>
 8014ce0:	e006      	b.n	8014cf0 <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ce4:	3320      	adds	r3, #32
 8014ce6:	69fa      	ldr	r2, [r7, #28]
 8014ce8:	4611      	mov	r1, r2
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fb f98e 	bl	801000c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cf2:	3315      	adds	r3, #21
 8014cf4:	22f8      	movs	r2, #248	@ 0xf8
 8014cf6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cfa:	3318      	adds	r3, #24
 8014cfc:	213f      	movs	r1, #63	@ 0x3f
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fb f969 	bl	800ffd6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d06:	331a      	adds	r3, #26
 8014d08:	21ff      	movs	r1, #255	@ 0xff
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fb f963 	bl	800ffd6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d12:	331c      	adds	r3, #28
 8014d14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fb f978 	bl	801000c <st_dword>
		if (fmt == FS_FAT32) {
 8014d1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014d20:	2b03      	cmp	r3, #3
 8014d22:	d132      	bne.n	8014d8a <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d26:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014d2a:	f7fa fd47 	bl	800f7bc <get_fattime>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	4619      	mov	r1, r3
 8014d32:	4620      	mov	r0, r4
 8014d34:	f7fb f96a 	bl	801000c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d3a:	3324      	adds	r3, #36	@ 0x24
 8014d3c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7fb f963 	bl	801000c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d48:	332c      	adds	r3, #44	@ 0x2c
 8014d4a:	2102      	movs	r1, #2
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fb f95d 	bl	801000c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d54:	3330      	adds	r3, #48	@ 0x30
 8014d56:	2101      	movs	r1, #1
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7fb f93c 	bl	800ffd6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d60:	3332      	adds	r3, #50	@ 0x32
 8014d62:	2106      	movs	r1, #6
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7fb f936 	bl	800ffd6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d6c:	3340      	adds	r3, #64	@ 0x40
 8014d6e:	2280      	movs	r2, #128	@ 0x80
 8014d70:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d74:	3342      	adds	r3, #66	@ 0x42
 8014d76:	2229      	movs	r2, #41	@ 0x29
 8014d78:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d7c:	3347      	adds	r3, #71	@ 0x47
 8014d7e:	2213      	movs	r2, #19
 8014d80:	4979      	ldr	r1, [pc, #484]	@ (8014f68 <f_mkfs+0x1028>)
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fb f9f6 	bl	8010174 <mem_cpy>
 8014d88:	e021      	b.n	8014dce <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d8c:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014d90:	f7fa fd14 	bl	800f7bc <get_fattime>
 8014d94:	4603      	mov	r3, r0
 8014d96:	4619      	mov	r1, r3
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f7fb f937 	bl	801000c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014da0:	3316      	adds	r3, #22
 8014da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014da6:	b292      	uxth	r2, r2
 8014da8:	4611      	mov	r1, r2
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fb f913 	bl	800ffd6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014db2:	3324      	adds	r3, #36	@ 0x24
 8014db4:	2280      	movs	r2, #128	@ 0x80
 8014db6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dba:	3326      	adds	r3, #38	@ 0x26
 8014dbc:	2229      	movs	r2, #41	@ 0x29
 8014dbe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dc2:	332b      	adds	r3, #43	@ 0x2b
 8014dc4:	2213      	movs	r2, #19
 8014dc6:	4969      	ldr	r1, [pc, #420]	@ (8014f6c <f_mkfs+0x102c>)
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fb f9d3 	bl	8010174 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dd0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014dd4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7fb f8fc 	bl	800ffd6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014dde:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014de2:	2301      	movs	r3, #1
 8014de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014de8:	f7fa ffa0 	bl	800fd2c <disk_write>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d001      	beq.n	8014df6 <f_mkfs+0xeb6>
 8014df2:	2301      	movs	r3, #1
 8014df4:	e180      	b.n	80150f8 <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014df6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014dfa:	2b03      	cmp	r3, #3
 8014dfc:	d141      	bne.n	8014e82 <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e00:	1d9a      	adds	r2, r3, #6
 8014e02:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014e06:	2301      	movs	r3, #1
 8014e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e0a:	f7fa ff8f 	bl	800fd2c <disk_write>
			mem_set(buf, 0, ss);
 8014e0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014e12:	461a      	mov	r2, r3
 8014e14:	2100      	movs	r1, #0
 8014e16:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014e18:	f7fb f9cd 	bl	80101b6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014e1c:	4954      	ldr	r1, [pc, #336]	@ (8014f70 <f_mkfs+0x1030>)
 8014e1e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014e20:	f7fb f8f4 	bl	801000c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014e2a:	4952      	ldr	r1, [pc, #328]	@ (8014f74 <f_mkfs+0x1034>)
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fb f8ed 	bl	801000c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e34:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e3a:	3b01      	subs	r3, #1
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	4610      	mov	r0, r2
 8014e40:	f7fb f8e4 	bl	801000c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e46:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014e4a:	2102      	movs	r1, #2
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fb f8dd 	bl	801000c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014e58:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fb f8ba 	bl	800ffd6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e64:	1dda      	adds	r2, r3, #7
 8014e66:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e6e:	f7fa ff5d 	bl	800fd2c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e74:	1c5a      	adds	r2, r3, #1
 8014e76:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e7e:	f7fa ff55 	bl	800fd2c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e84:	2100      	movs	r1, #0
 8014e86:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014e88:	f7fb f995 	bl	80101b6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014e94:	2300      	movs	r3, #0
 8014e96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014e98:	e059      	b.n	8014f4e <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 8014e9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d113      	bne.n	8014eca <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014ea2:	f06f 0107 	mvn.w	r1, #7
 8014ea6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014ea8:	f7fb f8b0 	bl	801000c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014eae:	3304      	adds	r3, #4
 8014eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fb f8a9 	bl	801000c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ebc:	3308      	adds	r3, #8
 8014ebe:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fb f8a2 	bl	801000c <st_dword>
 8014ec8:	e00b      	b.n	8014ee2 <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014eca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014ece:	2b01      	cmp	r3, #1
 8014ed0:	d101      	bne.n	8014ed6 <f_mkfs+0xf96>
 8014ed2:	4b29      	ldr	r3, [pc, #164]	@ (8014f78 <f_mkfs+0x1038>)
 8014ed4:	e001      	b.n	8014eda <f_mkfs+0xf9a>
 8014ed6:	f06f 0307 	mvn.w	r3, #7
 8014eda:	4619      	mov	r1, r3
 8014edc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014ede:	f7fb f895 	bl	801000c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014eea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	bf28      	it	cs
 8014ef4:	4613      	movcs	r3, r2
 8014ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014efa:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014f02:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014f06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014f08:	f7fa ff10 	bl	800fd2c <disk_write>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d001      	beq.n	8014f16 <f_mkfs+0xfd6>
 8014f12:	2301      	movs	r3, #1
 8014f14:	e0f0      	b.n	80150f8 <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 8014f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014f20:	f7fb f949 	bl	80101b6 <mem_set>
				sect += n; nsect -= n;
 8014f24:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014f2c:	4413      	add	r3, r2
 8014f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014f32:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014f3a:	1ad3      	subs	r3, r2, r3
 8014f3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 8014f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d1d0      	bne.n	8014eea <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014f4e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d3a1      	bcc.n	8014e9a <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014f56:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014f5a:	2b03      	cmp	r3, #3
 8014f5c:	d10e      	bne.n	8014f7c <f_mkfs+0x103c>
 8014f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014f62:	e00c      	b.n	8014f7e <f_mkfs+0x103e>
 8014f64:	0801aa60 	.word	0x0801aa60
 8014f68:	0801aa6c 	.word	0x0801aa6c
 8014f6c:	0801aa80 	.word	0x0801aa80
 8014f70:	41615252 	.word	0x41615252
 8014f74:	61417272 	.word	0x61417272
 8014f78:	00fffff8 	.word	0x00fffff8
 8014f7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014f82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	bf28      	it	cs
 8014f8c:	4613      	movcs	r3, r2
 8014f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014f92:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014f9a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014f9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014fa0:	f7fa fec4 	bl	800fd2c <disk_write>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d001      	beq.n	8014fae <f_mkfs+0x106e>
 8014faa:	2301      	movs	r3, #1
 8014fac:	e0a4      	b.n	80150f8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8014fae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014fb6:	4413      	add	r3, r2
 8014fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014fbc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014fc4:	1ad3      	subs	r3, r2, r3
 8014fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8014fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d1d7      	bne.n	8014f82 <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 8014fd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014fd6:	2b04      	cmp	r3, #4
 8014fd8:	d103      	bne.n	8014fe2 <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 8014fda:	2307      	movs	r3, #7
 8014fdc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014fe0:	e018      	b.n	8015014 <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 8014fe2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014fe6:	2b03      	cmp	r3, #3
 8014fe8:	d103      	bne.n	8014ff2 <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 8014fea:	230c      	movs	r3, #12
 8014fec:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014ff0:	e010      	b.n	8015014 <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 8014ff2:	69fb      	ldr	r3, [r7, #28]
 8014ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ff8:	d303      	bcc.n	8015002 <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014ffa:	2306      	movs	r3, #6
 8014ffc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015000:	e008      	b.n	8015014 <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8015002:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015006:	2b02      	cmp	r3, #2
 8015008:	d101      	bne.n	801500e <f_mkfs+0x10ce>
 801500a:	2304      	movs	r3, #4
 801500c:	e000      	b.n	8015010 <f_mkfs+0x10d0>
 801500e:	2301      	movs	r3, #1
 8015010:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8015014:	7afb      	ldrb	r3, [r7, #11]
 8015016:	f003 0308 	and.w	r3, r3, #8
 801501a:	2b00      	cmp	r3, #0
 801501c:	d15f      	bne.n	80150de <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 801501e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015022:	461a      	mov	r2, r3
 8015024:	2100      	movs	r1, #0
 8015026:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015028:	f7fb f8c5 	bl	80101b6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801502c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801502e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015032:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015036:	4618      	mov	r0, r3
 8015038:	f7fa ffcd 	bl	800ffd6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801503c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801503e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8015042:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8015044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015046:	2200      	movs	r2, #0
 8015048:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504c:	3301      	adds	r3, #1
 801504e:	2201      	movs	r2, #1
 8015050:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8015052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015054:	3302      	adds	r3, #2
 8015056:	2201      	movs	r2, #1
 8015058:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505c:	3303      	adds	r3, #3
 801505e:	2200      	movs	r2, #0
 8015060:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8015062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015064:	3304      	adds	r3, #4
 8015066:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801506a:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801506c:	69fa      	ldr	r2, [r7, #28]
 801506e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015070:	441a      	add	r2, r3
 8015072:	4b23      	ldr	r3, [pc, #140]	@ (8015100 <f_mkfs+0x11c0>)
 8015074:	fba3 1302 	umull	r1, r3, r3, r2
 8015078:	1ad2      	subs	r2, r2, r3
 801507a:	0852      	lsrs	r2, r2, #1
 801507c:	4413      	add	r3, r2
 801507e:	0b5b      	lsrs	r3, r3, #13
 8015080:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 8015084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015086:	3305      	adds	r3, #5
 8015088:	22fe      	movs	r2, #254	@ 0xfe
 801508a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 801508c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015090:	089b      	lsrs	r3, r3, #2
 8015092:	b2da      	uxtb	r2, r3
 8015094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015096:	3306      	adds	r3, #6
 8015098:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801509c:	b2d2      	uxtb	r2, r2
 801509e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	3307      	adds	r3, #7
 80150a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80150a8:	b2d2      	uxtb	r2, r2
 80150aa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80150ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ae:	3308      	adds	r3, #8
 80150b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7fa ffaa 	bl	801000c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80150b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ba:	330c      	adds	r3, #12
 80150bc:	69fa      	ldr	r2, [r7, #28]
 80150be:	4611      	mov	r1, r2
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fa ffa3 	bl	801000c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80150c6:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80150ca:	2301      	movs	r3, #1
 80150cc:	2200      	movs	r2, #0
 80150ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80150d0:	f7fa fe2c 	bl	800fd2c <disk_write>
 80150d4:	4603      	mov	r3, r0
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d001      	beq.n	80150de <f_mkfs+0x119e>
 80150da:	2301      	movs	r3, #1
 80150dc:	e00c      	b.n	80150f8 <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80150de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80150e2:	2200      	movs	r2, #0
 80150e4:	2100      	movs	r1, #0
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7fa fe40 	bl	800fd6c <disk_ioctl>
 80150ec:	4603      	mov	r3, r0
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d001      	beq.n	80150f6 <f_mkfs+0x11b6>
 80150f2:	2301      	movs	r3, #1
 80150f4:	e000      	b.n	80150f8 <f_mkfs+0x11b8>

	return FR_OK;
 80150f6:	2300      	movs	r3, #0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	37a4      	adds	r7, #164	@ 0xa4
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd90      	pop	{r4, r7, pc}
 8015100:	0515565b 	.word	0x0515565b

08015104 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015104:	b480      	push	{r7}
 8015106:	b087      	sub	sp, #28
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	4613      	mov	r3, r2
 8015110:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015112:	2301      	movs	r3, #1
 8015114:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015116:	2300      	movs	r3, #0
 8015118:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801511a:	4b1f      	ldr	r3, [pc, #124]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 801511c:	7a5b      	ldrb	r3, [r3, #9]
 801511e:	b2db      	uxtb	r3, r3
 8015120:	2b00      	cmp	r3, #0
 8015122:	d131      	bne.n	8015188 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015124:	4b1c      	ldr	r3, [pc, #112]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 8015126:	7a5b      	ldrb	r3, [r3, #9]
 8015128:	b2db      	uxtb	r3, r3
 801512a:	461a      	mov	r2, r3
 801512c:	4b1a      	ldr	r3, [pc, #104]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 801512e:	2100      	movs	r1, #0
 8015130:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015132:	4b19      	ldr	r3, [pc, #100]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 8015134:	7a5b      	ldrb	r3, [r3, #9]
 8015136:	b2db      	uxtb	r3, r3
 8015138:	4a17      	ldr	r2, [pc, #92]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 801513a:	009b      	lsls	r3, r3, #2
 801513c:	4413      	add	r3, r2
 801513e:	68fa      	ldr	r2, [r7, #12]
 8015140:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015142:	4b15      	ldr	r3, [pc, #84]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 8015144:	7a5b      	ldrb	r3, [r3, #9]
 8015146:	b2db      	uxtb	r3, r3
 8015148:	461a      	mov	r2, r3
 801514a:	4b13      	ldr	r3, [pc, #76]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 801514c:	4413      	add	r3, r2
 801514e:	79fa      	ldrb	r2, [r7, #7]
 8015150:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015152:	4b11      	ldr	r3, [pc, #68]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 8015154:	7a5b      	ldrb	r3, [r3, #9]
 8015156:	b2db      	uxtb	r3, r3
 8015158:	1c5a      	adds	r2, r3, #1
 801515a:	b2d1      	uxtb	r1, r2
 801515c:	4a0e      	ldr	r2, [pc, #56]	@ (8015198 <FATFS_LinkDriverEx+0x94>)
 801515e:	7251      	strb	r1, [r2, #9]
 8015160:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015162:	7dbb      	ldrb	r3, [r7, #22]
 8015164:	3330      	adds	r3, #48	@ 0x30
 8015166:	b2da      	uxtb	r2, r3
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	3301      	adds	r3, #1
 8015170:	223a      	movs	r2, #58	@ 0x3a
 8015172:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	3302      	adds	r3, #2
 8015178:	222f      	movs	r2, #47	@ 0x2f
 801517a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	3303      	adds	r3, #3
 8015180:	2200      	movs	r2, #0
 8015182:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015184:	2300      	movs	r3, #0
 8015186:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015188:	7dfb      	ldrb	r3, [r7, #23]
}
 801518a:	4618      	mov	r0, r3
 801518c:	371c      	adds	r7, #28
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	24001bf0 	.word	0x24001bf0

0801519c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b082      	sub	sp, #8
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
 80151a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80151a6:	2200      	movs	r2, #0
 80151a8:	6839      	ldr	r1, [r7, #0]
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f7ff ffaa 	bl	8015104 <FATFS_LinkDriverEx>
 80151b0:	4603      	mov	r3, r0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
	...

080151bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80151bc:	b480      	push	{r7}
 80151be:	b085      	sub	sp, #20
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	4603      	mov	r3, r0
 80151c4:	6039      	str	r1, [r7, #0]
 80151c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80151c8:	88fb      	ldrh	r3, [r7, #6]
 80151ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80151cc:	d802      	bhi.n	80151d4 <ff_convert+0x18>
		c = chr;
 80151ce:	88fb      	ldrh	r3, [r7, #6]
 80151d0:	81fb      	strh	r3, [r7, #14]
 80151d2:	e025      	b.n	8015220 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00b      	beq.n	80151f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80151da:	88fb      	ldrh	r3, [r7, #6]
 80151dc:	2bff      	cmp	r3, #255	@ 0xff
 80151de:	d805      	bhi.n	80151ec <ff_convert+0x30>
 80151e0:	88fb      	ldrh	r3, [r7, #6]
 80151e2:	3b80      	subs	r3, #128	@ 0x80
 80151e4:	4a12      	ldr	r2, [pc, #72]	@ (8015230 <ff_convert+0x74>)
 80151e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80151ea:	e000      	b.n	80151ee <ff_convert+0x32>
 80151ec:	2300      	movs	r3, #0
 80151ee:	81fb      	strh	r3, [r7, #14]
 80151f0:	e016      	b.n	8015220 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80151f2:	2300      	movs	r3, #0
 80151f4:	81fb      	strh	r3, [r7, #14]
 80151f6:	e009      	b.n	801520c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80151f8:	89fb      	ldrh	r3, [r7, #14]
 80151fa:	4a0d      	ldr	r2, [pc, #52]	@ (8015230 <ff_convert+0x74>)
 80151fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015200:	88fa      	ldrh	r2, [r7, #6]
 8015202:	429a      	cmp	r2, r3
 8015204:	d006      	beq.n	8015214 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015206:	89fb      	ldrh	r3, [r7, #14]
 8015208:	3301      	adds	r3, #1
 801520a:	81fb      	strh	r3, [r7, #14]
 801520c:	89fb      	ldrh	r3, [r7, #14]
 801520e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015210:	d9f2      	bls.n	80151f8 <ff_convert+0x3c>
 8015212:	e000      	b.n	8015216 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015214:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015216:	89fb      	ldrh	r3, [r7, #14]
 8015218:	3380      	adds	r3, #128	@ 0x80
 801521a:	b29b      	uxth	r3, r3
 801521c:	b2db      	uxtb	r3, r3
 801521e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015220:	89fb      	ldrh	r3, [r7, #14]
}
 8015222:	4618      	mov	r0, r3
 8015224:	3714      	adds	r7, #20
 8015226:	46bd      	mov	sp, r7
 8015228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522c:	4770      	bx	lr
 801522e:	bf00      	nop
 8015230:	0801b488 	.word	0x0801b488

08015234 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015234:	b480      	push	{r7}
 8015236:	b087      	sub	sp, #28
 8015238:	af00      	add	r7, sp, #0
 801523a:	4603      	mov	r3, r0
 801523c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801523e:	88fb      	ldrh	r3, [r7, #6]
 8015240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015244:	d201      	bcs.n	801524a <ff_wtoupper+0x16>
 8015246:	4b3e      	ldr	r3, [pc, #248]	@ (8015340 <ff_wtoupper+0x10c>)
 8015248:	e000      	b.n	801524c <ff_wtoupper+0x18>
 801524a:	4b3e      	ldr	r3, [pc, #248]	@ (8015344 <ff_wtoupper+0x110>)
 801524c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	1c9a      	adds	r2, r3, #2
 8015252:	617a      	str	r2, [r7, #20]
 8015254:	881b      	ldrh	r3, [r3, #0]
 8015256:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015258:	8a7b      	ldrh	r3, [r7, #18]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d068      	beq.n	8015330 <ff_wtoupper+0xfc>
 801525e:	88fa      	ldrh	r2, [r7, #6]
 8015260:	8a7b      	ldrh	r3, [r7, #18]
 8015262:	429a      	cmp	r2, r3
 8015264:	d364      	bcc.n	8015330 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	1c9a      	adds	r2, r3, #2
 801526a:	617a      	str	r2, [r7, #20]
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	823b      	strh	r3, [r7, #16]
 8015270:	8a3b      	ldrh	r3, [r7, #16]
 8015272:	0a1b      	lsrs	r3, r3, #8
 8015274:	81fb      	strh	r3, [r7, #14]
 8015276:	8a3b      	ldrh	r3, [r7, #16]
 8015278:	b2db      	uxtb	r3, r3
 801527a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801527c:	88fa      	ldrh	r2, [r7, #6]
 801527e:	8a79      	ldrh	r1, [r7, #18]
 8015280:	8a3b      	ldrh	r3, [r7, #16]
 8015282:	440b      	add	r3, r1
 8015284:	429a      	cmp	r2, r3
 8015286:	da49      	bge.n	801531c <ff_wtoupper+0xe8>
			switch (cmd) {
 8015288:	89fb      	ldrh	r3, [r7, #14]
 801528a:	2b08      	cmp	r3, #8
 801528c:	d84f      	bhi.n	801532e <ff_wtoupper+0xfa>
 801528e:	a201      	add	r2, pc, #4	@ (adr r2, 8015294 <ff_wtoupper+0x60>)
 8015290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015294:	080152b9 	.word	0x080152b9
 8015298:	080152cb 	.word	0x080152cb
 801529c:	080152e1 	.word	0x080152e1
 80152a0:	080152e9 	.word	0x080152e9
 80152a4:	080152f1 	.word	0x080152f1
 80152a8:	080152f9 	.word	0x080152f9
 80152ac:	08015301 	.word	0x08015301
 80152b0:	08015309 	.word	0x08015309
 80152b4:	08015311 	.word	0x08015311
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80152b8:	88fa      	ldrh	r2, [r7, #6]
 80152ba:	8a7b      	ldrh	r3, [r7, #18]
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	005b      	lsls	r3, r3, #1
 80152c0:	697a      	ldr	r2, [r7, #20]
 80152c2:	4413      	add	r3, r2
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	80fb      	strh	r3, [r7, #6]
 80152c8:	e027      	b.n	801531a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80152ca:	88fa      	ldrh	r2, [r7, #6]
 80152cc:	8a7b      	ldrh	r3, [r7, #18]
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	88fa      	ldrh	r2, [r7, #6]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	80fb      	strh	r3, [r7, #6]
 80152de:	e01c      	b.n	801531a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80152e0:	88fb      	ldrh	r3, [r7, #6]
 80152e2:	3b10      	subs	r3, #16
 80152e4:	80fb      	strh	r3, [r7, #6]
 80152e6:	e018      	b.n	801531a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80152e8:	88fb      	ldrh	r3, [r7, #6]
 80152ea:	3b20      	subs	r3, #32
 80152ec:	80fb      	strh	r3, [r7, #6]
 80152ee:	e014      	b.n	801531a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80152f0:	88fb      	ldrh	r3, [r7, #6]
 80152f2:	3b30      	subs	r3, #48	@ 0x30
 80152f4:	80fb      	strh	r3, [r7, #6]
 80152f6:	e010      	b.n	801531a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80152f8:	88fb      	ldrh	r3, [r7, #6]
 80152fa:	3b1a      	subs	r3, #26
 80152fc:	80fb      	strh	r3, [r7, #6]
 80152fe:	e00c      	b.n	801531a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015300:	88fb      	ldrh	r3, [r7, #6]
 8015302:	3308      	adds	r3, #8
 8015304:	80fb      	strh	r3, [r7, #6]
 8015306:	e008      	b.n	801531a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015308:	88fb      	ldrh	r3, [r7, #6]
 801530a:	3b50      	subs	r3, #80	@ 0x50
 801530c:	80fb      	strh	r3, [r7, #6]
 801530e:	e004      	b.n	801531a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015310:	88fb      	ldrh	r3, [r7, #6]
 8015312:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8015316:	80fb      	strh	r3, [r7, #6]
 8015318:	bf00      	nop
			}
			break;
 801531a:	e008      	b.n	801532e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801531c:	89fb      	ldrh	r3, [r7, #14]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d195      	bne.n	801524e <ff_wtoupper+0x1a>
 8015322:	8a3b      	ldrh	r3, [r7, #16]
 8015324:	005b      	lsls	r3, r3, #1
 8015326:	697a      	ldr	r2, [r7, #20]
 8015328:	4413      	add	r3, r2
 801532a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801532c:	e78f      	b.n	801524e <ff_wtoupper+0x1a>
			break;
 801532e:	bf00      	nop
	}

	return chr;
 8015330:	88fb      	ldrh	r3, [r7, #6]
}
 8015332:	4618      	mov	r0, r3
 8015334:	371c      	adds	r7, #28
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	0801b588 	.word	0x0801b588
 8015344:	0801b77c 	.word	0x0801b77c

08015348 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	4603      	mov	r3, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015354:	2200      	movs	r2, #0
 8015356:	2101      	movs	r1, #1
 8015358:	2001      	movs	r0, #1
 801535a:	f000 f9fd 	bl	8015758 <osSemaphoreNew>
 801535e:	4602      	mov	r2, r0
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	bf14      	ite	ne
 801536c:	2301      	movne	r3, #1
 801536e:	2300      	moveq	r3, #0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	60fb      	str	r3, [r7, #12]

    return ret;
 8015374:	68fb      	ldr	r3, [r7, #12]
}
 8015376:	4618      	mov	r0, r3
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b082      	sub	sp, #8
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f000 fb06 	bl	8015998 <osSemaphoreDelete>
#endif
    return 1;
 801538c:	2301      	movs	r3, #1
}
 801538e:	4618      	mov	r0, r3
 8015390:	3708      	adds	r7, #8
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80153a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f000 fa60 	bl	801586c <osSemaphoreAcquire>
 80153ac:	4603      	mov	r3, r0
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d101      	bne.n	80153b6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80153b2:	2301      	movs	r3, #1
 80153b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80153b6:	68fb      	ldr	r3, [r7, #12]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3710      	adds	r7, #16
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f000 faa1 	bl	8015910 <osSemaphoreRelease>
#endif
}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b082      	sub	sp, #8
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f003 fd0c 	bl	8018dfc <pvPortMalloc>
 80153e4:	4603      	mov	r3, r0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f003 fdce 	bl	8018f98 <vPortFree>
}
 80153fc:	bf00      	nop
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <__NVIC_SetPriority>:
{
 8015404:	b480      	push	{r7}
 8015406:	b083      	sub	sp, #12
 8015408:	af00      	add	r7, sp, #0
 801540a:	4603      	mov	r3, r0
 801540c:	6039      	str	r1, [r7, #0]
 801540e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015414:	2b00      	cmp	r3, #0
 8015416:	db0a      	blt.n	801542e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	b2da      	uxtb	r2, r3
 801541c:	490c      	ldr	r1, [pc, #48]	@ (8015450 <__NVIC_SetPriority+0x4c>)
 801541e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015422:	0112      	lsls	r2, r2, #4
 8015424:	b2d2      	uxtb	r2, r2
 8015426:	440b      	add	r3, r1
 8015428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801542c:	e00a      	b.n	8015444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	b2da      	uxtb	r2, r3
 8015432:	4908      	ldr	r1, [pc, #32]	@ (8015454 <__NVIC_SetPriority+0x50>)
 8015434:	88fb      	ldrh	r3, [r7, #6]
 8015436:	f003 030f 	and.w	r3, r3, #15
 801543a:	3b04      	subs	r3, #4
 801543c:	0112      	lsls	r2, r2, #4
 801543e:	b2d2      	uxtb	r2, r2
 8015440:	440b      	add	r3, r1
 8015442:	761a      	strb	r2, [r3, #24]
}
 8015444:	bf00      	nop
 8015446:	370c      	adds	r7, #12
 8015448:	46bd      	mov	sp, r7
 801544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544e:	4770      	bx	lr
 8015450:	e000e100 	.word	0xe000e100
 8015454:	e000ed00 	.word	0xe000ed00

08015458 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015458:	b580      	push	{r7, lr}
 801545a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801545c:	4b05      	ldr	r3, [pc, #20]	@ (8015474 <SysTick_Handler+0x1c>)
 801545e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015460:	f002 fc5a 	bl	8017d18 <xTaskGetSchedulerState>
 8015464:	4603      	mov	r3, r0
 8015466:	2b01      	cmp	r3, #1
 8015468:	d001      	beq.n	801546e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801546a:	f003 fc35 	bl	8018cd8 <xPortSysTickHandler>
  }
}
 801546e:	bf00      	nop
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	e000e010 	.word	0xe000e010

08015478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015478:	b580      	push	{r7, lr}
 801547a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801547c:	2100      	movs	r1, #0
 801547e:	f06f 0004 	mvn.w	r0, #4
 8015482:	f7ff ffbf 	bl	8015404 <__NVIC_SetPriority>
#endif
}
 8015486:	bf00      	nop
 8015488:	bd80      	pop	{r7, pc}
	...

0801548c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015492:	f3ef 8305 	mrs	r3, IPSR
 8015496:	603b      	str	r3, [r7, #0]
  return(result);
 8015498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801549a:	2b00      	cmp	r3, #0
 801549c:	d003      	beq.n	80154a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801549e:	f06f 0305 	mvn.w	r3, #5
 80154a2:	607b      	str	r3, [r7, #4]
 80154a4:	e00c      	b.n	80154c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80154a6:	4b0a      	ldr	r3, [pc, #40]	@ (80154d0 <osKernelInitialize+0x44>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d105      	bne.n	80154ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80154ae:	4b08      	ldr	r3, [pc, #32]	@ (80154d0 <osKernelInitialize+0x44>)
 80154b0:	2201      	movs	r2, #1
 80154b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80154b4:	2300      	movs	r3, #0
 80154b6:	607b      	str	r3, [r7, #4]
 80154b8:	e002      	b.n	80154c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80154ba:	f04f 33ff 	mov.w	r3, #4294967295
 80154be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80154c0:	687b      	ldr	r3, [r7, #4]
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr
 80154ce:	bf00      	nop
 80154d0:	24001bfc 	.word	0x24001bfc

080154d4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80154da:	f002 fc1d 	bl	8017d18 <xTaskGetSchedulerState>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d004      	beq.n	80154ee <osKernelGetState+0x1a>
 80154e4:	2b02      	cmp	r3, #2
 80154e6:	d105      	bne.n	80154f4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80154e8:	2302      	movs	r3, #2
 80154ea:	607b      	str	r3, [r7, #4]
      break;
 80154ec:	e00c      	b.n	8015508 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80154ee:	2303      	movs	r3, #3
 80154f0:	607b      	str	r3, [r7, #4]
      break;
 80154f2:	e009      	b.n	8015508 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80154f4:	4b07      	ldr	r3, [pc, #28]	@ (8015514 <osKernelGetState+0x40>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	2b01      	cmp	r3, #1
 80154fa:	d102      	bne.n	8015502 <osKernelGetState+0x2e>
        state = osKernelReady;
 80154fc:	2301      	movs	r3, #1
 80154fe:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015500:	e001      	b.n	8015506 <osKernelGetState+0x32>
        state = osKernelInactive;
 8015502:	2300      	movs	r3, #0
 8015504:	607b      	str	r3, [r7, #4]
      break;
 8015506:	bf00      	nop
  }

  return (state);
 8015508:	687b      	ldr	r3, [r7, #4]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	24001bfc 	.word	0x24001bfc

08015518 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801551e:	f3ef 8305 	mrs	r3, IPSR
 8015522:	603b      	str	r3, [r7, #0]
  return(result);
 8015524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015526:	2b00      	cmp	r3, #0
 8015528:	d003      	beq.n	8015532 <osKernelStart+0x1a>
    stat = osErrorISR;
 801552a:	f06f 0305 	mvn.w	r3, #5
 801552e:	607b      	str	r3, [r7, #4]
 8015530:	e010      	b.n	8015554 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015532:	4b0b      	ldr	r3, [pc, #44]	@ (8015560 <osKernelStart+0x48>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2b01      	cmp	r3, #1
 8015538:	d109      	bne.n	801554e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801553a:	f7ff ff9d 	bl	8015478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801553e:	4b08      	ldr	r3, [pc, #32]	@ (8015560 <osKernelStart+0x48>)
 8015540:	2202      	movs	r2, #2
 8015542:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015544:	f001 ff62 	bl	801740c <vTaskStartScheduler>
      stat = osOK;
 8015548:	2300      	movs	r3, #0
 801554a:	607b      	str	r3, [r7, #4]
 801554c:	e002      	b.n	8015554 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801554e:	f04f 33ff 	mov.w	r3, #4294967295
 8015552:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015554:	687b      	ldr	r3, [r7, #4]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3708      	adds	r7, #8
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	24001bfc 	.word	0x24001bfc

08015564 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015564:	b580      	push	{r7, lr}
 8015566:	b082      	sub	sp, #8
 8015568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801556a:	f3ef 8305 	mrs	r3, IPSR
 801556e:	603b      	str	r3, [r7, #0]
  return(result);
 8015570:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015572:	2b00      	cmp	r3, #0
 8015574:	d003      	beq.n	801557e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8015576:	f002 f875 	bl	8017664 <xTaskGetTickCountFromISR>
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	e002      	b.n	8015584 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801557e:	f002 f861 	bl	8017644 <xTaskGetTickCount>
 8015582:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015584:	687b      	ldr	r3, [r7, #4]
}
 8015586:	4618      	mov	r0, r3
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801558e:	b580      	push	{r7, lr}
 8015590:	b08e      	sub	sp, #56	@ 0x38
 8015592:	af04      	add	r7, sp, #16
 8015594:	60f8      	str	r0, [r7, #12]
 8015596:	60b9      	str	r1, [r7, #8]
 8015598:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801559a:	2300      	movs	r3, #0
 801559c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801559e:	f3ef 8305 	mrs	r3, IPSR
 80155a2:	617b      	str	r3, [r7, #20]
  return(result);
 80155a4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d17e      	bne.n	80156a8 <osThreadNew+0x11a>
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d07b      	beq.n	80156a8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80155b0:	2380      	movs	r3, #128	@ 0x80
 80155b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80155b4:	2318      	movs	r3, #24
 80155b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80155b8:	2300      	movs	r3, #0
 80155ba:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80155bc:	f04f 33ff 	mov.w	r3, #4294967295
 80155c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d045      	beq.n	8015654 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d002      	beq.n	80155d6 <osThreadNew+0x48>
        name = attr->name;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d002      	beq.n	80155e4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	699b      	ldr	r3, [r3, #24]
 80155e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d008      	beq.n	80155fc <osThreadNew+0x6e>
 80155ea:	69fb      	ldr	r3, [r7, #28]
 80155ec:	2b38      	cmp	r3, #56	@ 0x38
 80155ee:	d805      	bhi.n	80155fc <osThreadNew+0x6e>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	f003 0301 	and.w	r3, r3, #1
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d001      	beq.n	8015600 <osThreadNew+0x72>
        return (NULL);
 80155fc:	2300      	movs	r3, #0
 80155fe:	e054      	b.n	80156aa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	695b      	ldr	r3, [r3, #20]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d003      	beq.n	8015610 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	695b      	ldr	r3, [r3, #20]
 801560c:	089b      	lsrs	r3, r3, #2
 801560e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	689b      	ldr	r3, [r3, #8]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d00e      	beq.n	8015636 <osThreadNew+0xa8>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	2ba7      	cmp	r3, #167	@ 0xa7
 801561e:	d90a      	bls.n	8015636 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015624:	2b00      	cmp	r3, #0
 8015626:	d006      	beq.n	8015636 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	695b      	ldr	r3, [r3, #20]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d002      	beq.n	8015636 <osThreadNew+0xa8>
        mem = 1;
 8015630:	2301      	movs	r3, #1
 8015632:	61bb      	str	r3, [r7, #24]
 8015634:	e010      	b.n	8015658 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	689b      	ldr	r3, [r3, #8]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d10c      	bne.n	8015658 <osThreadNew+0xca>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d108      	bne.n	8015658 <osThreadNew+0xca>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	691b      	ldr	r3, [r3, #16]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d104      	bne.n	8015658 <osThreadNew+0xca>
          mem = 0;
 801564e:	2300      	movs	r3, #0
 8015650:	61bb      	str	r3, [r7, #24]
 8015652:	e001      	b.n	8015658 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015654:	2300      	movs	r3, #0
 8015656:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	2b01      	cmp	r3, #1
 801565c:	d110      	bne.n	8015680 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015662:	687a      	ldr	r2, [r7, #4]
 8015664:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015666:	9202      	str	r2, [sp, #8]
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	6a3a      	ldr	r2, [r7, #32]
 8015672:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f001 fbf9 	bl	8016e6c <xTaskCreateStatic>
 801567a:	4603      	mov	r3, r0
 801567c:	613b      	str	r3, [r7, #16]
 801567e:	e013      	b.n	80156a8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d110      	bne.n	80156a8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015686:	6a3b      	ldr	r3, [r7, #32]
 8015688:	b29a      	uxth	r2, r3
 801568a:	f107 0310 	add.w	r3, r7, #16
 801568e:	9301      	str	r3, [sp, #4]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f001 fc47 	bl	8016f2c <xTaskCreate>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d001      	beq.n	80156a8 <osThreadNew+0x11a>
            hTask = NULL;
 80156a4:	2300      	movs	r3, #0
 80156a6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80156a8:	693b      	ldr	r3, [r7, #16]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3728      	adds	r7, #40	@ 0x28
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80156b8:	f002 fb1e 	bl	8017cf8 <xTaskGetCurrentTaskHandle>
 80156bc:	6078      	str	r0, [r7, #4]

  return (id);
 80156be:	687b      	ldr	r3, [r7, #4]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b086      	sub	sp, #24
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156d4:	f3ef 8305 	mrs	r3, IPSR
 80156d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80156da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d003      	beq.n	80156e8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80156e0:	f06f 0305 	mvn.w	r3, #5
 80156e4:	617b      	str	r3, [r7, #20]
 80156e6:	e017      	b.n	8015718 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d103      	bne.n	80156f6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80156ee:	f06f 0303 	mvn.w	r3, #3
 80156f2:	617b      	str	r3, [r7, #20]
 80156f4:	e010      	b.n	8015718 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80156f6:	6938      	ldr	r0, [r7, #16]
 80156f8:	f001 fe20 	bl	801733c <eTaskGetState>
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015700:	7bfb      	ldrb	r3, [r7, #15]
 8015702:	2b04      	cmp	r3, #4
 8015704:	d005      	beq.n	8015712 <osThreadTerminate+0x4a>
      stat = osOK;
 8015706:	2300      	movs	r3, #0
 8015708:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 801570a:	6938      	ldr	r0, [r7, #16]
 801570c:	f001 fd6c 	bl	80171e8 <vTaskDelete>
 8015710:	e002      	b.n	8015718 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015712:	f06f 0302 	mvn.w	r3, #2
 8015716:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8015718:	697b      	ldr	r3, [r7, #20]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3718      	adds	r7, #24
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801572a:	f3ef 8305 	mrs	r3, IPSR
 801572e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015730:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015732:	2b00      	cmp	r3, #0
 8015734:	d003      	beq.n	801573e <osDelay+0x1c>
    stat = osErrorISR;
 8015736:	f06f 0305 	mvn.w	r3, #5
 801573a:	60fb      	str	r3, [r7, #12]
 801573c:	e007      	b.n	801574e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801573e:	2300      	movs	r3, #0
 8015740:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d002      	beq.n	801574e <osDelay+0x2c>
      vTaskDelay(ticks);
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f001 fdc1 	bl	80172d0 <vTaskDelay>
    }
  }

  return (stat);
 801574e:	68fb      	ldr	r3, [r7, #12]
}
 8015750:	4618      	mov	r0, r3
 8015752:	3710      	adds	r7, #16
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}

08015758 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015758:	b580      	push	{r7, lr}
 801575a:	b08a      	sub	sp, #40	@ 0x28
 801575c:	af02      	add	r7, sp, #8
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015764:	2300      	movs	r3, #0
 8015766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015768:	f3ef 8305 	mrs	r3, IPSR
 801576c:	613b      	str	r3, [r7, #16]
  return(result);
 801576e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015770:	2b00      	cmp	r3, #0
 8015772:	d175      	bne.n	8015860 <osSemaphoreNew+0x108>
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d072      	beq.n	8015860 <osSemaphoreNew+0x108>
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	429a      	cmp	r2, r3
 8015780:	d86e      	bhi.n	8015860 <osSemaphoreNew+0x108>
    mem = -1;
 8015782:	f04f 33ff 	mov.w	r3, #4294967295
 8015786:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d015      	beq.n	80157ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	689b      	ldr	r3, [r3, #8]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d006      	beq.n	80157a4 <osSemaphoreNew+0x4c>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	68db      	ldr	r3, [r3, #12]
 801579a:	2b4f      	cmp	r3, #79	@ 0x4f
 801579c:	d902      	bls.n	80157a4 <osSemaphoreNew+0x4c>
        mem = 1;
 801579e:	2301      	movs	r3, #1
 80157a0:	61bb      	str	r3, [r7, #24]
 80157a2:	e00c      	b.n	80157be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d108      	bne.n	80157be <osSemaphoreNew+0x66>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d104      	bne.n	80157be <osSemaphoreNew+0x66>
          mem = 0;
 80157b4:	2300      	movs	r3, #0
 80157b6:	61bb      	str	r3, [r7, #24]
 80157b8:	e001      	b.n	80157be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80157ba:	2300      	movs	r3, #0
 80157bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c4:	d04c      	beq.n	8015860 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d128      	bne.n	801581e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80157cc:	69bb      	ldr	r3, [r7, #24]
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d10a      	bne.n	80157e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	689b      	ldr	r3, [r3, #8]
 80157d6:	2203      	movs	r2, #3
 80157d8:	9200      	str	r2, [sp, #0]
 80157da:	2200      	movs	r2, #0
 80157dc:	2100      	movs	r1, #0
 80157de:	2001      	movs	r0, #1
 80157e0:	f000 fb82 	bl	8015ee8 <xQueueGenericCreateStatic>
 80157e4:	61f8      	str	r0, [r7, #28]
 80157e6:	e005      	b.n	80157f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80157e8:	2203      	movs	r2, #3
 80157ea:	2100      	movs	r1, #0
 80157ec:	2001      	movs	r0, #1
 80157ee:	f000 fbf8 	bl	8015fe2 <xQueueGenericCreate>
 80157f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d022      	beq.n	8015840 <osSemaphoreNew+0xe8>
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d01f      	beq.n	8015840 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015800:	2300      	movs	r3, #0
 8015802:	2200      	movs	r2, #0
 8015804:	2100      	movs	r1, #0
 8015806:	69f8      	ldr	r0, [r7, #28]
 8015808:	f000 fcb8 	bl	801617c <xQueueGenericSend>
 801580c:	4603      	mov	r3, r0
 801580e:	2b01      	cmp	r3, #1
 8015810:	d016      	beq.n	8015840 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015812:	69f8      	ldr	r0, [r7, #28]
 8015814:	f001 f956 	bl	8016ac4 <vQueueDelete>
            hSemaphore = NULL;
 8015818:	2300      	movs	r3, #0
 801581a:	61fb      	str	r3, [r7, #28]
 801581c:	e010      	b.n	8015840 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	2b01      	cmp	r3, #1
 8015822:	d108      	bne.n	8015836 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	461a      	mov	r2, r3
 801582a:	68b9      	ldr	r1, [r7, #8]
 801582c:	68f8      	ldr	r0, [r7, #12]
 801582e:	f000 fc36 	bl	801609e <xQueueCreateCountingSemaphoreStatic>
 8015832:	61f8      	str	r0, [r7, #28]
 8015834:	e004      	b.n	8015840 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015836:	68b9      	ldr	r1, [r7, #8]
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f000 fc69 	bl	8016110 <xQueueCreateCountingSemaphore>
 801583e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015840:	69fb      	ldr	r3, [r7, #28]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d00c      	beq.n	8015860 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d003      	beq.n	8015854 <osSemaphoreNew+0xfc>
          name = attr->name;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	617b      	str	r3, [r7, #20]
 8015852:	e001      	b.n	8015858 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015854:	2300      	movs	r3, #0
 8015856:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015858:	6979      	ldr	r1, [r7, #20]
 801585a:	69f8      	ldr	r0, [r7, #28]
 801585c:	f001 fa7e 	bl	8016d5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015860:	69fb      	ldr	r3, [r7, #28]
}
 8015862:	4618      	mov	r0, r3
 8015864:	3720      	adds	r7, #32
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
	...

0801586c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801587a:	2300      	movs	r3, #0
 801587c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d103      	bne.n	801588c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015884:	f06f 0303 	mvn.w	r3, #3
 8015888:	617b      	str	r3, [r7, #20]
 801588a:	e039      	b.n	8015900 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801588c:	f3ef 8305 	mrs	r3, IPSR
 8015890:	60fb      	str	r3, [r7, #12]
  return(result);
 8015892:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015894:	2b00      	cmp	r3, #0
 8015896:	d022      	beq.n	80158de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d003      	beq.n	80158a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801589e:	f06f 0303 	mvn.w	r3, #3
 80158a2:	617b      	str	r3, [r7, #20]
 80158a4:	e02c      	b.n	8015900 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80158a6:	2300      	movs	r3, #0
 80158a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80158aa:	f107 0308 	add.w	r3, r7, #8
 80158ae:	461a      	mov	r2, r3
 80158b0:	2100      	movs	r1, #0
 80158b2:	6938      	ldr	r0, [r7, #16]
 80158b4:	f001 f884 	bl	80169c0 <xQueueReceiveFromISR>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b01      	cmp	r3, #1
 80158bc:	d003      	beq.n	80158c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80158be:	f06f 0302 	mvn.w	r3, #2
 80158c2:	617b      	str	r3, [r7, #20]
 80158c4:	e01c      	b.n	8015900 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d019      	beq.n	8015900 <osSemaphoreAcquire+0x94>
 80158cc:	4b0f      	ldr	r3, [pc, #60]	@ (801590c <osSemaphoreAcquire+0xa0>)
 80158ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158d2:	601a      	str	r2, [r3, #0]
 80158d4:	f3bf 8f4f 	dsb	sy
 80158d8:	f3bf 8f6f 	isb	sy
 80158dc:	e010      	b.n	8015900 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	6938      	ldr	r0, [r7, #16]
 80158e2:	f000 ff5d 	bl	80167a0 <xQueueSemaphoreTake>
 80158e6:	4603      	mov	r3, r0
 80158e8:	2b01      	cmp	r3, #1
 80158ea:	d009      	beq.n	8015900 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d003      	beq.n	80158fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80158f2:	f06f 0301 	mvn.w	r3, #1
 80158f6:	617b      	str	r3, [r7, #20]
 80158f8:	e002      	b.n	8015900 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80158fa:	f06f 0302 	mvn.w	r3, #2
 80158fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015900:	697b      	ldr	r3, [r7, #20]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3718      	adds	r7, #24
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	e000ed04 	.word	0xe000ed04

08015910 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801591c:	2300      	movs	r3, #0
 801591e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d103      	bne.n	801592e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015926:	f06f 0303 	mvn.w	r3, #3
 801592a:	617b      	str	r3, [r7, #20]
 801592c:	e02c      	b.n	8015988 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801592e:	f3ef 8305 	mrs	r3, IPSR
 8015932:	60fb      	str	r3, [r7, #12]
  return(result);
 8015934:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015936:	2b00      	cmp	r3, #0
 8015938:	d01a      	beq.n	8015970 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801593a:	2300      	movs	r3, #0
 801593c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801593e:	f107 0308 	add.w	r3, r7, #8
 8015942:	4619      	mov	r1, r3
 8015944:	6938      	ldr	r0, [r7, #16]
 8015946:	f000 fdb9 	bl	80164bc <xQueueGiveFromISR>
 801594a:	4603      	mov	r3, r0
 801594c:	2b01      	cmp	r3, #1
 801594e:	d003      	beq.n	8015958 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015950:	f06f 0302 	mvn.w	r3, #2
 8015954:	617b      	str	r3, [r7, #20]
 8015956:	e017      	b.n	8015988 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d014      	beq.n	8015988 <osSemaphoreRelease+0x78>
 801595e:	4b0d      	ldr	r3, [pc, #52]	@ (8015994 <osSemaphoreRelease+0x84>)
 8015960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015964:	601a      	str	r2, [r3, #0]
 8015966:	f3bf 8f4f 	dsb	sy
 801596a:	f3bf 8f6f 	isb	sy
 801596e:	e00b      	b.n	8015988 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015970:	2300      	movs	r3, #0
 8015972:	2200      	movs	r2, #0
 8015974:	2100      	movs	r1, #0
 8015976:	6938      	ldr	r0, [r7, #16]
 8015978:	f000 fc00 	bl	801617c <xQueueGenericSend>
 801597c:	4603      	mov	r3, r0
 801597e:	2b01      	cmp	r3, #1
 8015980:	d002      	beq.n	8015988 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015982:	f06f 0302 	mvn.w	r3, #2
 8015986:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015988:	697b      	ldr	r3, [r7, #20]
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	e000ed04 	.word	0xe000ed04

08015998 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015998:	b580      	push	{r7, lr}
 801599a:	b086      	sub	sp, #24
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159a4:	f3ef 8305 	mrs	r3, IPSR
 80159a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80159aa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d003      	beq.n	80159b8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80159b0:	f06f 0305 	mvn.w	r3, #5
 80159b4:	617b      	str	r3, [r7, #20]
 80159b6:	e00e      	b.n	80159d6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d103      	bne.n	80159c6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80159be:	f06f 0303 	mvn.w	r3, #3
 80159c2:	617b      	str	r3, [r7, #20]
 80159c4:	e007      	b.n	80159d6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80159c6:	6938      	ldr	r0, [r7, #16]
 80159c8:	f001 f9f2 	bl	8016db0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80159cc:	2300      	movs	r3, #0
 80159ce:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80159d0:	6938      	ldr	r0, [r7, #16]
 80159d2:	f001 f877 	bl	8016ac4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80159d6:	697b      	ldr	r3, [r7, #20]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3718      	adds	r7, #24
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b08a      	sub	sp, #40	@ 0x28
 80159e4:	af02      	add	r7, sp, #8
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80159ec:	2300      	movs	r3, #0
 80159ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159f0:	f3ef 8305 	mrs	r3, IPSR
 80159f4:	613b      	str	r3, [r7, #16]
  return(result);
 80159f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d15f      	bne.n	8015abc <osMessageQueueNew+0xdc>
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d05c      	beq.n	8015abc <osMessageQueueNew+0xdc>
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d059      	beq.n	8015abc <osMessageQueueNew+0xdc>
    mem = -1;
 8015a08:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d029      	beq.n	8015a68 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d012      	beq.n	8015a42 <osMessageQueueNew+0x62>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	2b4f      	cmp	r3, #79	@ 0x4f
 8015a22:	d90e      	bls.n	8015a42 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d00a      	beq.n	8015a42 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	695a      	ldr	r2, [r3, #20]
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	68b9      	ldr	r1, [r7, #8]
 8015a34:	fb01 f303 	mul.w	r3, r1, r3
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d302      	bcc.n	8015a42 <osMessageQueueNew+0x62>
        mem = 1;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	61bb      	str	r3, [r7, #24]
 8015a40:	e014      	b.n	8015a6c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	689b      	ldr	r3, [r3, #8]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d110      	bne.n	8015a6c <osMessageQueueNew+0x8c>
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d10c      	bne.n	8015a6c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d108      	bne.n	8015a6c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	695b      	ldr	r3, [r3, #20]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d104      	bne.n	8015a6c <osMessageQueueNew+0x8c>
          mem = 0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	61bb      	str	r3, [r7, #24]
 8015a66:	e001      	b.n	8015a6c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d10b      	bne.n	8015a8a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	691a      	ldr	r2, [r3, #16]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	689b      	ldr	r3, [r3, #8]
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	9100      	str	r1, [sp, #0]
 8015a7e:	68b9      	ldr	r1, [r7, #8]
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f000 fa31 	bl	8015ee8 <xQueueGenericCreateStatic>
 8015a86:	61f8      	str	r0, [r7, #28]
 8015a88:	e008      	b.n	8015a9c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d105      	bne.n	8015a9c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015a90:	2200      	movs	r2, #0
 8015a92:	68b9      	ldr	r1, [r7, #8]
 8015a94:	68f8      	ldr	r0, [r7, #12]
 8015a96:	f000 faa4 	bl	8015fe2 <xQueueGenericCreate>
 8015a9a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015a9c:	69fb      	ldr	r3, [r7, #28]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d00c      	beq.n	8015abc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	617b      	str	r3, [r7, #20]
 8015aae:	e001      	b.n	8015ab4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015ab4:	6979      	ldr	r1, [r7, #20]
 8015ab6:	69f8      	ldr	r0, [r7, #28]
 8015ab8:	f001 f950 	bl	8016d5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015abc:	69fb      	ldr	r3, [r7, #28]
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3720      	adds	r7, #32
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
	...

08015ac8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b088      	sub	sp, #32
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	603b      	str	r3, [r7, #0]
 8015ad4:	4613      	mov	r3, r2
 8015ad6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015adc:	2300      	movs	r3, #0
 8015ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ae0:	f3ef 8305 	mrs	r3, IPSR
 8015ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8015ae6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d028      	beq.n	8015b3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d005      	beq.n	8015afe <osMessageQueuePut+0x36>
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d002      	beq.n	8015afe <osMessageQueuePut+0x36>
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d003      	beq.n	8015b06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015afe:	f06f 0303 	mvn.w	r3, #3
 8015b02:	61fb      	str	r3, [r7, #28]
 8015b04:	e038      	b.n	8015b78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015b06:	2300      	movs	r3, #0
 8015b08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015b0a:	f107 0210 	add.w	r2, r7, #16
 8015b0e:	2300      	movs	r3, #0
 8015b10:	68b9      	ldr	r1, [r7, #8]
 8015b12:	69b8      	ldr	r0, [r7, #24]
 8015b14:	f000 fc34 	bl	8016380 <xQueueGenericSendFromISR>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d003      	beq.n	8015b26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015b1e:	f06f 0302 	mvn.w	r3, #2
 8015b22:	61fb      	str	r3, [r7, #28]
 8015b24:	e028      	b.n	8015b78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d025      	beq.n	8015b78 <osMessageQueuePut+0xb0>
 8015b2c:	4b15      	ldr	r3, [pc, #84]	@ (8015b84 <osMessageQueuePut+0xbc>)
 8015b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b32:	601a      	str	r2, [r3, #0]
 8015b34:	f3bf 8f4f 	dsb	sy
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	e01c      	b.n	8015b78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015b3e:	69bb      	ldr	r3, [r7, #24]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d002      	beq.n	8015b4a <osMessageQueuePut+0x82>
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d103      	bne.n	8015b52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015b4a:	f06f 0303 	mvn.w	r3, #3
 8015b4e:	61fb      	str	r3, [r7, #28]
 8015b50:	e012      	b.n	8015b78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015b52:	2300      	movs	r3, #0
 8015b54:	683a      	ldr	r2, [r7, #0]
 8015b56:	68b9      	ldr	r1, [r7, #8]
 8015b58:	69b8      	ldr	r0, [r7, #24]
 8015b5a:	f000 fb0f 	bl	801617c <xQueueGenericSend>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d009      	beq.n	8015b78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d003      	beq.n	8015b72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015b6a:	f06f 0301 	mvn.w	r3, #1
 8015b6e:	61fb      	str	r3, [r7, #28]
 8015b70:	e002      	b.n	8015b78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015b72:	f06f 0302 	mvn.w	r3, #2
 8015b76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015b78:	69fb      	ldr	r3, [r7, #28]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	e000ed04 	.word	0xe000ed04

08015b88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b088      	sub	sp, #32
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
 8015b94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b9e:	f3ef 8305 	mrs	r3, IPSR
 8015ba2:	617b      	str	r3, [r7, #20]
  return(result);
 8015ba4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d028      	beq.n	8015bfc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015baa:	69bb      	ldr	r3, [r7, #24]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d005      	beq.n	8015bbc <osMessageQueueGet+0x34>
 8015bb0:	68bb      	ldr	r3, [r7, #8]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d002      	beq.n	8015bbc <osMessageQueueGet+0x34>
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d003      	beq.n	8015bc4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015bbc:	f06f 0303 	mvn.w	r3, #3
 8015bc0:	61fb      	str	r3, [r7, #28]
 8015bc2:	e037      	b.n	8015c34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015bc8:	f107 0310 	add.w	r3, r7, #16
 8015bcc:	461a      	mov	r2, r3
 8015bce:	68b9      	ldr	r1, [r7, #8]
 8015bd0:	69b8      	ldr	r0, [r7, #24]
 8015bd2:	f000 fef5 	bl	80169c0 <xQueueReceiveFromISR>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	d003      	beq.n	8015be4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015bdc:	f06f 0302 	mvn.w	r3, #2
 8015be0:	61fb      	str	r3, [r7, #28]
 8015be2:	e027      	b.n	8015c34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d024      	beq.n	8015c34 <osMessageQueueGet+0xac>
 8015bea:	4b15      	ldr	r3, [pc, #84]	@ (8015c40 <osMessageQueueGet+0xb8>)
 8015bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015bf0:	601a      	str	r2, [r3, #0]
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	e01b      	b.n	8015c34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <osMessageQueueGet+0x80>
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d103      	bne.n	8015c10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015c08:	f06f 0303 	mvn.w	r3, #3
 8015c0c:	61fb      	str	r3, [r7, #28]
 8015c0e:	e011      	b.n	8015c34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015c10:	683a      	ldr	r2, [r7, #0]
 8015c12:	68b9      	ldr	r1, [r7, #8]
 8015c14:	69b8      	ldr	r0, [r7, #24]
 8015c16:	f000 fce1 	bl	80165dc <xQueueReceive>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	2b01      	cmp	r3, #1
 8015c1e:	d009      	beq.n	8015c34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d003      	beq.n	8015c2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015c26:	f06f 0301 	mvn.w	r3, #1
 8015c2a:	61fb      	str	r3, [r7, #28]
 8015c2c:	e002      	b.n	8015c34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015c2e:	f06f 0302 	mvn.w	r3, #2
 8015c32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015c34:	69fb      	ldr	r3, [r7, #28]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3720      	adds	r7, #32
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	e000ed04 	.word	0xe000ed04

08015c44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015c44:	b480      	push	{r7}
 8015c46:	b085      	sub	sp, #20
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	60f8      	str	r0, [r7, #12]
 8015c4c:	60b9      	str	r1, [r7, #8]
 8015c4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	4a07      	ldr	r2, [pc, #28]	@ (8015c70 <vApplicationGetIdleTaskMemory+0x2c>)
 8015c54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	4a06      	ldr	r2, [pc, #24]	@ (8015c74 <vApplicationGetIdleTaskMemory+0x30>)
 8015c5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2280      	movs	r2, #128	@ 0x80
 8015c60:	601a      	str	r2, [r3, #0]
}
 8015c62:	bf00      	nop
 8015c64:	3714      	adds	r7, #20
 8015c66:	46bd      	mov	sp, r7
 8015c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop
 8015c70:	24001c00 	.word	0x24001c00
 8015c74:	24001ca8 	.word	0x24001ca8

08015c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015c78:	b480      	push	{r7}
 8015c7a:	b085      	sub	sp, #20
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	4a07      	ldr	r2, [pc, #28]	@ (8015ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	4a06      	ldr	r2, [pc, #24]	@ (8015ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8015c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015c96:	601a      	str	r2, [r3, #0]
}
 8015c98:	bf00      	nop
 8015c9a:	3714      	adds	r7, #20
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr
 8015ca4:	24001ea8 	.word	0x24001ea8
 8015ca8:	24001f50 	.word	0x24001f50

08015cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f103 0208 	add.w	r2, r3, #8
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8015cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f103 0208 	add.w	r2, r3, #8
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f103 0208 	add.w	r2, r3, #8
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015ce0:	bf00      	nop
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr

08015cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015cfa:	bf00      	nop
 8015cfc:	370c      	adds	r7, #12
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d04:	4770      	bx	lr

08015d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d06:	b480      	push	{r7}
 8015d08:	b085      	sub	sp, #20
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	6078      	str	r0, [r7, #4]
 8015d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	68fa      	ldr	r2, [r7, #12]
 8015d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	689a      	ldr	r2, [r3, #8]
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	689b      	ldr	r3, [r3, #8]
 8015d28:	683a      	ldr	r2, [r7, #0]
 8015d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	683a      	ldr	r2, [r7, #0]
 8015d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	1c5a      	adds	r2, r3, #1
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	601a      	str	r2, [r3, #0]
}
 8015d42:	bf00      	nop
 8015d44:	3714      	adds	r7, #20
 8015d46:	46bd      	mov	sp, r7
 8015d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4c:	4770      	bx	lr

08015d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d4e:	b480      	push	{r7}
 8015d50:	b085      	sub	sp, #20
 8015d52:	af00      	add	r7, sp, #0
 8015d54:	6078      	str	r0, [r7, #4]
 8015d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d64:	d103      	bne.n	8015d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	691b      	ldr	r3, [r3, #16]
 8015d6a:	60fb      	str	r3, [r7, #12]
 8015d6c:	e00c      	b.n	8015d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	3308      	adds	r3, #8
 8015d72:	60fb      	str	r3, [r7, #12]
 8015d74:	e002      	b.n	8015d7c <vListInsert+0x2e>
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	68ba      	ldr	r2, [r7, #8]
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d2f6      	bcs.n	8015d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	685a      	ldr	r2, [r3, #4]
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	685b      	ldr	r3, [r3, #4]
 8015d94:	683a      	ldr	r2, [r7, #0]
 8015d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	68fa      	ldr	r2, [r7, #12]
 8015d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	683a      	ldr	r2, [r7, #0]
 8015da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	687a      	ldr	r2, [r7, #4]
 8015da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	1c5a      	adds	r2, r3, #1
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	601a      	str	r2, [r3, #0]
}
 8015db4:	bf00      	nop
 8015db6:	3714      	adds	r7, #20
 8015db8:	46bd      	mov	sp, r7
 8015dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbe:	4770      	bx	lr

08015dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b085      	sub	sp, #20
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	691b      	ldr	r3, [r3, #16]
 8015dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	6892      	ldr	r2, [r2, #8]
 8015dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	6852      	ldr	r2, [r2, #4]
 8015de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	687a      	ldr	r2, [r7, #4]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d103      	bne.n	8015df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	689a      	ldr	r2, [r3, #8]
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	1e5a      	subs	r2, r3, #1
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	681b      	ldr	r3, [r3, #0]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3714      	adds	r7, #20
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b084      	sub	sp, #16
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d10b      	bne.n	8015e40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e2c:	f383 8811 	msr	BASEPRI, r3
 8015e30:	f3bf 8f6f 	isb	sy
 8015e34:	f3bf 8f4f 	dsb	sy
 8015e38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015e3a:	bf00      	nop
 8015e3c:	bf00      	nop
 8015e3e:	e7fd      	b.n	8015e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015e40:	f002 feba 	bl	8018bb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e4c:	68f9      	ldr	r1, [r7, #12]
 8015e4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015e50:	fb01 f303 	mul.w	r3, r1, r3
 8015e54:	441a      	add	r2, r3
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	681a      	ldr	r2, [r3, #0]
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e70:	3b01      	subs	r3, #1
 8015e72:	68f9      	ldr	r1, [r7, #12]
 8015e74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015e76:	fb01 f303 	mul.w	r3, r1, r3
 8015e7a:	441a      	add	r2, r3
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	22ff      	movs	r2, #255	@ 0xff
 8015e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	22ff      	movs	r2, #255	@ 0xff
 8015e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d114      	bne.n	8015ec0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	691b      	ldr	r3, [r3, #16]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d01a      	beq.n	8015ed4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	3310      	adds	r3, #16
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f001 fd62 	bl	801796c <xTaskRemoveFromEventList>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d012      	beq.n	8015ed4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015eae:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee4 <xQueueGenericReset+0xd0>)
 8015eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015eb4:	601a      	str	r2, [r3, #0]
 8015eb6:	f3bf 8f4f 	dsb	sy
 8015eba:	f3bf 8f6f 	isb	sy
 8015ebe:	e009      	b.n	8015ed4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	3310      	adds	r3, #16
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7ff fef1 	bl	8015cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	3324      	adds	r3, #36	@ 0x24
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7ff feec 	bl	8015cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015ed4:	f002 fea2 	bl	8018c1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015ed8:	2301      	movs	r3, #1
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	e000ed04 	.word	0xe000ed04

08015ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b08e      	sub	sp, #56	@ 0x38
 8015eec:	af02      	add	r7, sp, #8
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	60b9      	str	r1, [r7, #8]
 8015ef2:	607a      	str	r2, [r7, #4]
 8015ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10b      	bne.n	8015f14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f00:	f383 8811 	msr	BASEPRI, r3
 8015f04:	f3bf 8f6f 	isb	sy
 8015f08:	f3bf 8f4f 	dsb	sy
 8015f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015f0e:	bf00      	nop
 8015f10:	bf00      	nop
 8015f12:	e7fd      	b.n	8015f10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d10b      	bne.n	8015f32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8015f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f1e:	f383 8811 	msr	BASEPRI, r3
 8015f22:	f3bf 8f6f 	isb	sy
 8015f26:	f3bf 8f4f 	dsb	sy
 8015f2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015f2c:	bf00      	nop
 8015f2e:	bf00      	nop
 8015f30:	e7fd      	b.n	8015f2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d002      	beq.n	8015f3e <xQueueGenericCreateStatic+0x56>
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d001      	beq.n	8015f42 <xQueueGenericCreateStatic+0x5a>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	e000      	b.n	8015f44 <xQueueGenericCreateStatic+0x5c>
 8015f42:	2300      	movs	r3, #0
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d10b      	bne.n	8015f60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8015f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f4c:	f383 8811 	msr	BASEPRI, r3
 8015f50:	f3bf 8f6f 	isb	sy
 8015f54:	f3bf 8f4f 	dsb	sy
 8015f58:	623b      	str	r3, [r7, #32]
}
 8015f5a:	bf00      	nop
 8015f5c:	bf00      	nop
 8015f5e:	e7fd      	b.n	8015f5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d102      	bne.n	8015f6c <xQueueGenericCreateStatic+0x84>
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <xQueueGenericCreateStatic+0x88>
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	e000      	b.n	8015f72 <xQueueGenericCreateStatic+0x8a>
 8015f70:	2300      	movs	r3, #0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d10b      	bne.n	8015f8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8015f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f7a:	f383 8811 	msr	BASEPRI, r3
 8015f7e:	f3bf 8f6f 	isb	sy
 8015f82:	f3bf 8f4f 	dsb	sy
 8015f86:	61fb      	str	r3, [r7, #28]
}
 8015f88:	bf00      	nop
 8015f8a:	bf00      	nop
 8015f8c:	e7fd      	b.n	8015f8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015f8e:	2350      	movs	r3, #80	@ 0x50
 8015f90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	2b50      	cmp	r3, #80	@ 0x50
 8015f96:	d00b      	beq.n	8015fb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8015f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f9c:	f383 8811 	msr	BASEPRI, r3
 8015fa0:	f3bf 8f6f 	isb	sy
 8015fa4:	f3bf 8f4f 	dsb	sy
 8015fa8:	61bb      	str	r3, [r7, #24]
}
 8015faa:	bf00      	nop
 8015fac:	bf00      	nop
 8015fae:	e7fd      	b.n	8015fac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015fb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d00d      	beq.n	8015fd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fbe:	2201      	movs	r2, #1
 8015fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015fc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fca:	9300      	str	r3, [sp, #0]
 8015fcc:	4613      	mov	r3, r2
 8015fce:	687a      	ldr	r2, [r7, #4]
 8015fd0:	68b9      	ldr	r1, [r7, #8]
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	f000 f840 	bl	8016058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3730      	adds	r7, #48	@ 0x30
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}

08015fe2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015fe2:	b580      	push	{r7, lr}
 8015fe4:	b08a      	sub	sp, #40	@ 0x28
 8015fe6:	af02      	add	r7, sp, #8
 8015fe8:	60f8      	str	r0, [r7, #12]
 8015fea:	60b9      	str	r1, [r7, #8]
 8015fec:	4613      	mov	r3, r2
 8015fee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d10b      	bne.n	801600e <xQueueGenericCreate+0x2c>
	__asm volatile
 8015ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ffa:	f383 8811 	msr	BASEPRI, r3
 8015ffe:	f3bf 8f6f 	isb	sy
 8016002:	f3bf 8f4f 	dsb	sy
 8016006:	613b      	str	r3, [r7, #16]
}
 8016008:	bf00      	nop
 801600a:	bf00      	nop
 801600c:	e7fd      	b.n	801600a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	68ba      	ldr	r2, [r7, #8]
 8016012:	fb02 f303 	mul.w	r3, r2, r3
 8016016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	3350      	adds	r3, #80	@ 0x50
 801601c:	4618      	mov	r0, r3
 801601e:	f002 feed 	bl	8018dfc <pvPortMalloc>
 8016022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016024:	69bb      	ldr	r3, [r7, #24]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d011      	beq.n	801604e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	3350      	adds	r3, #80	@ 0x50
 8016032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	2200      	movs	r2, #0
 8016038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801603c:	79fa      	ldrb	r2, [r7, #7]
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	4613      	mov	r3, r2
 8016044:	697a      	ldr	r2, [r7, #20]
 8016046:	68b9      	ldr	r1, [r7, #8]
 8016048:	68f8      	ldr	r0, [r7, #12]
 801604a:	f000 f805 	bl	8016058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801604e:	69bb      	ldr	r3, [r7, #24]
	}
 8016050:	4618      	mov	r0, r3
 8016052:	3720      	adds	r7, #32
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d103      	bne.n	8016074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	601a      	str	r2, [r3, #0]
 8016072:	e002      	b.n	801607a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801607a:	69bb      	ldr	r3, [r7, #24]
 801607c:	68fa      	ldr	r2, [r7, #12]
 801607e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016080:	69bb      	ldr	r3, [r7, #24]
 8016082:	68ba      	ldr	r2, [r7, #8]
 8016084:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016086:	2101      	movs	r1, #1
 8016088:	69b8      	ldr	r0, [r7, #24]
 801608a:	f7ff fec3 	bl	8015e14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801608e:	69bb      	ldr	r3, [r7, #24]
 8016090:	78fa      	ldrb	r2, [r7, #3]
 8016092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016096:	bf00      	nop
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}

0801609e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801609e:	b580      	push	{r7, lr}
 80160a0:	b08a      	sub	sp, #40	@ 0x28
 80160a2:	af02      	add	r7, sp, #8
 80160a4:	60f8      	str	r0, [r7, #12]
 80160a6:	60b9      	str	r1, [r7, #8]
 80160a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10b      	bne.n	80160c8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80160b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160b4:	f383 8811 	msr	BASEPRI, r3
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	f3bf 8f4f 	dsb	sy
 80160c0:	61bb      	str	r3, [r7, #24]
}
 80160c2:	bf00      	nop
 80160c4:	bf00      	nop
 80160c6:	e7fd      	b.n	80160c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d90b      	bls.n	80160e8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80160d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160d4:	f383 8811 	msr	BASEPRI, r3
 80160d8:	f3bf 8f6f 	isb	sy
 80160dc:	f3bf 8f4f 	dsb	sy
 80160e0:	617b      	str	r3, [r7, #20]
}
 80160e2:	bf00      	nop
 80160e4:	bf00      	nop
 80160e6:	e7fd      	b.n	80160e4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80160e8:	2302      	movs	r3, #2
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	2100      	movs	r1, #0
 80160f2:	68f8      	ldr	r0, [r7, #12]
 80160f4:	f7ff fef8 	bl	8015ee8 <xQueueGenericCreateStatic>
 80160f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d002      	beq.n	8016106 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	68ba      	ldr	r2, [r7, #8]
 8016104:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016106:	69fb      	ldr	r3, [r7, #28]
	}
 8016108:	4618      	mov	r0, r3
 801610a:	3720      	adds	r7, #32
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016110:	b580      	push	{r7, lr}
 8016112:	b086      	sub	sp, #24
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d10b      	bne.n	8016138 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8016120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016124:	f383 8811 	msr	BASEPRI, r3
 8016128:	f3bf 8f6f 	isb	sy
 801612c:	f3bf 8f4f 	dsb	sy
 8016130:	613b      	str	r3, [r7, #16]
}
 8016132:	bf00      	nop
 8016134:	bf00      	nop
 8016136:	e7fd      	b.n	8016134 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016138:	683a      	ldr	r2, [r7, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	429a      	cmp	r2, r3
 801613e:	d90b      	bls.n	8016158 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8016140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016144:	f383 8811 	msr	BASEPRI, r3
 8016148:	f3bf 8f6f 	isb	sy
 801614c:	f3bf 8f4f 	dsb	sy
 8016150:	60fb      	str	r3, [r7, #12]
}
 8016152:	bf00      	nop
 8016154:	bf00      	nop
 8016156:	e7fd      	b.n	8016154 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016158:	2202      	movs	r2, #2
 801615a:	2100      	movs	r1, #0
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7ff ff40 	bl	8015fe2 <xQueueGenericCreate>
 8016162:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d002      	beq.n	8016170 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016170:	697b      	ldr	r3, [r7, #20]
	}
 8016172:	4618      	mov	r0, r3
 8016174:	3718      	adds	r7, #24
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
	...

0801617c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b08e      	sub	sp, #56	@ 0x38
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	60b9      	str	r1, [r7, #8]
 8016186:	607a      	str	r2, [r7, #4]
 8016188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801618a:	2300      	movs	r3, #0
 801618c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016194:	2b00      	cmp	r3, #0
 8016196:	d10b      	bne.n	80161b0 <xQueueGenericSend+0x34>
	__asm volatile
 8016198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801619c:	f383 8811 	msr	BASEPRI, r3
 80161a0:	f3bf 8f6f 	isb	sy
 80161a4:	f3bf 8f4f 	dsb	sy
 80161a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80161aa:	bf00      	nop
 80161ac:	bf00      	nop
 80161ae:	e7fd      	b.n	80161ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d103      	bne.n	80161be <xQueueGenericSend+0x42>
 80161b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d101      	bne.n	80161c2 <xQueueGenericSend+0x46>
 80161be:	2301      	movs	r3, #1
 80161c0:	e000      	b.n	80161c4 <xQueueGenericSend+0x48>
 80161c2:	2300      	movs	r3, #0
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d10b      	bne.n	80161e0 <xQueueGenericSend+0x64>
	__asm volatile
 80161c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161cc:	f383 8811 	msr	BASEPRI, r3
 80161d0:	f3bf 8f6f 	isb	sy
 80161d4:	f3bf 8f4f 	dsb	sy
 80161d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80161da:	bf00      	nop
 80161dc:	bf00      	nop
 80161de:	e7fd      	b.n	80161dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	2b02      	cmp	r3, #2
 80161e4:	d103      	bne.n	80161ee <xQueueGenericSend+0x72>
 80161e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	d101      	bne.n	80161f2 <xQueueGenericSend+0x76>
 80161ee:	2301      	movs	r3, #1
 80161f0:	e000      	b.n	80161f4 <xQueueGenericSend+0x78>
 80161f2:	2300      	movs	r3, #0
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10b      	bne.n	8016210 <xQueueGenericSend+0x94>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161fc:	f383 8811 	msr	BASEPRI, r3
 8016200:	f3bf 8f6f 	isb	sy
 8016204:	f3bf 8f4f 	dsb	sy
 8016208:	623b      	str	r3, [r7, #32]
}
 801620a:	bf00      	nop
 801620c:	bf00      	nop
 801620e:	e7fd      	b.n	801620c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016210:	f001 fd82 	bl	8017d18 <xTaskGetSchedulerState>
 8016214:	4603      	mov	r3, r0
 8016216:	2b00      	cmp	r3, #0
 8016218:	d102      	bne.n	8016220 <xQueueGenericSend+0xa4>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d101      	bne.n	8016224 <xQueueGenericSend+0xa8>
 8016220:	2301      	movs	r3, #1
 8016222:	e000      	b.n	8016226 <xQueueGenericSend+0xaa>
 8016224:	2300      	movs	r3, #0
 8016226:	2b00      	cmp	r3, #0
 8016228:	d10b      	bne.n	8016242 <xQueueGenericSend+0xc6>
	__asm volatile
 801622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801622e:	f383 8811 	msr	BASEPRI, r3
 8016232:	f3bf 8f6f 	isb	sy
 8016236:	f3bf 8f4f 	dsb	sy
 801623a:	61fb      	str	r3, [r7, #28]
}
 801623c:	bf00      	nop
 801623e:	bf00      	nop
 8016240:	e7fd      	b.n	801623e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016242:	f002 fcb9 	bl	8018bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801624c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801624e:	429a      	cmp	r2, r3
 8016250:	d302      	bcc.n	8016258 <xQueueGenericSend+0xdc>
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	2b02      	cmp	r3, #2
 8016256:	d129      	bne.n	80162ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016258:	683a      	ldr	r2, [r7, #0]
 801625a:	68b9      	ldr	r1, [r7, #8]
 801625c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801625e:	f000 fc6d 	bl	8016b3c <prvCopyDataToQueue>
 8016262:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016268:	2b00      	cmp	r3, #0
 801626a:	d010      	beq.n	801628e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801626e:	3324      	adds	r3, #36	@ 0x24
 8016270:	4618      	mov	r0, r3
 8016272:	f001 fb7b 	bl	801796c <xTaskRemoveFromEventList>
 8016276:	4603      	mov	r3, r0
 8016278:	2b00      	cmp	r3, #0
 801627a:	d013      	beq.n	80162a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801627c:	4b3f      	ldr	r3, [pc, #252]	@ (801637c <xQueueGenericSend+0x200>)
 801627e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016282:	601a      	str	r2, [r3, #0]
 8016284:	f3bf 8f4f 	dsb	sy
 8016288:	f3bf 8f6f 	isb	sy
 801628c:	e00a      	b.n	80162a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016290:	2b00      	cmp	r3, #0
 8016292:	d007      	beq.n	80162a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016294:	4b39      	ldr	r3, [pc, #228]	@ (801637c <xQueueGenericSend+0x200>)
 8016296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801629a:	601a      	str	r2, [r3, #0]
 801629c:	f3bf 8f4f 	dsb	sy
 80162a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80162a4:	f002 fcba 	bl	8018c1c <vPortExitCritical>
				return pdPASS;
 80162a8:	2301      	movs	r3, #1
 80162aa:	e063      	b.n	8016374 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d103      	bne.n	80162ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80162b2:	f002 fcb3 	bl	8018c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80162b6:	2300      	movs	r3, #0
 80162b8:	e05c      	b.n	8016374 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80162ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d106      	bne.n	80162ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80162c0:	f107 0314 	add.w	r3, r7, #20
 80162c4:	4618      	mov	r0, r3
 80162c6:	f001 fbb5 	bl	8017a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80162ca:	2301      	movs	r3, #1
 80162cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80162ce:	f002 fca5 	bl	8018c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80162d2:	f001 f90b 	bl	80174ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80162d6:	f002 fc6f 	bl	8018bb8 <vPortEnterCritical>
 80162da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80162e0:	b25b      	sxtb	r3, r3
 80162e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162e6:	d103      	bne.n	80162f0 <xQueueGenericSend+0x174>
 80162e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ea:	2200      	movs	r2, #0
 80162ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80162f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80162f6:	b25b      	sxtb	r3, r3
 80162f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162fc:	d103      	bne.n	8016306 <xQueueGenericSend+0x18a>
 80162fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016300:	2200      	movs	r2, #0
 8016302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016306:	f002 fc89 	bl	8018c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801630a:	1d3a      	adds	r2, r7, #4
 801630c:	f107 0314 	add.w	r3, r7, #20
 8016310:	4611      	mov	r1, r2
 8016312:	4618      	mov	r0, r3
 8016314:	f001 fba4 	bl	8017a60 <xTaskCheckForTimeOut>
 8016318:	4603      	mov	r3, r0
 801631a:	2b00      	cmp	r3, #0
 801631c:	d124      	bne.n	8016368 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801631e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016320:	f000 fd04 	bl	8016d2c <prvIsQueueFull>
 8016324:	4603      	mov	r3, r0
 8016326:	2b00      	cmp	r3, #0
 8016328:	d018      	beq.n	801635c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801632c:	3310      	adds	r3, #16
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	4611      	mov	r1, r2
 8016332:	4618      	mov	r0, r3
 8016334:	f001 fac8 	bl	80178c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801633a:	f000 fc8f 	bl	8016c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801633e:	f001 f8e3 	bl	8017508 <xTaskResumeAll>
 8016342:	4603      	mov	r3, r0
 8016344:	2b00      	cmp	r3, #0
 8016346:	f47f af7c 	bne.w	8016242 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801634a:	4b0c      	ldr	r3, [pc, #48]	@ (801637c <xQueueGenericSend+0x200>)
 801634c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016350:	601a      	str	r2, [r3, #0]
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	e772      	b.n	8016242 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801635c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801635e:	f000 fc7d 	bl	8016c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016362:	f001 f8d1 	bl	8017508 <xTaskResumeAll>
 8016366:	e76c      	b.n	8016242 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801636a:	f000 fc77 	bl	8016c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801636e:	f001 f8cb 	bl	8017508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016374:	4618      	mov	r0, r3
 8016376:	3738      	adds	r7, #56	@ 0x38
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	e000ed04 	.word	0xe000ed04

08016380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b090      	sub	sp, #64	@ 0x40
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
 801638c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8016392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016394:	2b00      	cmp	r3, #0
 8016396:	d10b      	bne.n	80163b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8016398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801639c:	f383 8811 	msr	BASEPRI, r3
 80163a0:	f3bf 8f6f 	isb	sy
 80163a4:	f3bf 8f4f 	dsb	sy
 80163a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80163aa:	bf00      	nop
 80163ac:	bf00      	nop
 80163ae:	e7fd      	b.n	80163ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d103      	bne.n	80163be <xQueueGenericSendFromISR+0x3e>
 80163b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d101      	bne.n	80163c2 <xQueueGenericSendFromISR+0x42>
 80163be:	2301      	movs	r3, #1
 80163c0:	e000      	b.n	80163c4 <xQueueGenericSendFromISR+0x44>
 80163c2:	2300      	movs	r3, #0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d10b      	bne.n	80163e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80163c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163cc:	f383 8811 	msr	BASEPRI, r3
 80163d0:	f3bf 8f6f 	isb	sy
 80163d4:	f3bf 8f4f 	dsb	sy
 80163d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80163da:	bf00      	nop
 80163dc:	bf00      	nop
 80163de:	e7fd      	b.n	80163dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	2b02      	cmp	r3, #2
 80163e4:	d103      	bne.n	80163ee <xQueueGenericSendFromISR+0x6e>
 80163e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d101      	bne.n	80163f2 <xQueueGenericSendFromISR+0x72>
 80163ee:	2301      	movs	r3, #1
 80163f0:	e000      	b.n	80163f4 <xQueueGenericSendFromISR+0x74>
 80163f2:	2300      	movs	r3, #0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10b      	bne.n	8016410 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80163f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163fc:	f383 8811 	msr	BASEPRI, r3
 8016400:	f3bf 8f6f 	isb	sy
 8016404:	f3bf 8f4f 	dsb	sy
 8016408:	623b      	str	r3, [r7, #32]
}
 801640a:	bf00      	nop
 801640c:	bf00      	nop
 801640e:	e7fd      	b.n	801640c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016410:	f002 fcb2 	bl	8018d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016414:	f3ef 8211 	mrs	r2, BASEPRI
 8016418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801641c:	f383 8811 	msr	BASEPRI, r3
 8016420:	f3bf 8f6f 	isb	sy
 8016424:	f3bf 8f4f 	dsb	sy
 8016428:	61fa      	str	r2, [r7, #28]
 801642a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801642c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801642e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016438:	429a      	cmp	r2, r3
 801643a:	d302      	bcc.n	8016442 <xQueueGenericSendFromISR+0xc2>
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	2b02      	cmp	r3, #2
 8016440:	d12f      	bne.n	80164a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016444:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016448:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016450:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016452:	683a      	ldr	r2, [r7, #0]
 8016454:	68b9      	ldr	r1, [r7, #8]
 8016456:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016458:	f000 fb70 	bl	8016b3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801645c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8016460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016464:	d112      	bne.n	801648c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801646a:	2b00      	cmp	r3, #0
 801646c:	d016      	beq.n	801649c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016470:	3324      	adds	r3, #36	@ 0x24
 8016472:	4618      	mov	r0, r3
 8016474:	f001 fa7a 	bl	801796c <xTaskRemoveFromEventList>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d00e      	beq.n	801649c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d00b      	beq.n	801649c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2201      	movs	r2, #1
 8016488:	601a      	str	r2, [r3, #0]
 801648a:	e007      	b.n	801649c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801648c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016490:	3301      	adds	r3, #1
 8016492:	b2db      	uxtb	r3, r3
 8016494:	b25a      	sxtb	r2, r3
 8016496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801649c:	2301      	movs	r3, #1
 801649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80164a0:	e001      	b.n	80164a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80164a2:	2300      	movs	r3, #0
 80164a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80164a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80164b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80164b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3740      	adds	r7, #64	@ 0x40
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}

080164bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08e      	sub	sp, #56	@ 0x38
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80164ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d10b      	bne.n	80164e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80164d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164d4:	f383 8811 	msr	BASEPRI, r3
 80164d8:	f3bf 8f6f 	isb	sy
 80164dc:	f3bf 8f4f 	dsb	sy
 80164e0:	623b      	str	r3, [r7, #32]
}
 80164e2:	bf00      	nop
 80164e4:	bf00      	nop
 80164e6:	e7fd      	b.n	80164e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80164e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d00b      	beq.n	8016508 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80164f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164f4:	f383 8811 	msr	BASEPRI, r3
 80164f8:	f3bf 8f6f 	isb	sy
 80164fc:	f3bf 8f4f 	dsb	sy
 8016500:	61fb      	str	r3, [r7, #28]
}
 8016502:	bf00      	nop
 8016504:	bf00      	nop
 8016506:	e7fd      	b.n	8016504 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d103      	bne.n	8016518 <xQueueGiveFromISR+0x5c>
 8016510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016512:	689b      	ldr	r3, [r3, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d101      	bne.n	801651c <xQueueGiveFromISR+0x60>
 8016518:	2301      	movs	r3, #1
 801651a:	e000      	b.n	801651e <xQueueGiveFromISR+0x62>
 801651c:	2300      	movs	r3, #0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d10b      	bne.n	801653a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8016522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016526:	f383 8811 	msr	BASEPRI, r3
 801652a:	f3bf 8f6f 	isb	sy
 801652e:	f3bf 8f4f 	dsb	sy
 8016532:	61bb      	str	r3, [r7, #24]
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop
 8016538:	e7fd      	b.n	8016536 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801653a:	f002 fc1d 	bl	8018d78 <vPortValidateInterruptPriority>
	__asm volatile
 801653e:	f3ef 8211 	mrs	r2, BASEPRI
 8016542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016546:	f383 8811 	msr	BASEPRI, r3
 801654a:	f3bf 8f6f 	isb	sy
 801654e:	f3bf 8f4f 	dsb	sy
 8016552:	617a      	str	r2, [r7, #20]
 8016554:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016556:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016558:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801655c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801655e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016566:	429a      	cmp	r2, r3
 8016568:	d22b      	bcs.n	80165c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801656c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016576:	1c5a      	adds	r2, r3, #1
 8016578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801657a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801657c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016584:	d112      	bne.n	80165ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801658a:	2b00      	cmp	r3, #0
 801658c:	d016      	beq.n	80165bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016590:	3324      	adds	r3, #36	@ 0x24
 8016592:	4618      	mov	r0, r3
 8016594:	f001 f9ea 	bl	801796c <xTaskRemoveFromEventList>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d00e      	beq.n	80165bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d00b      	beq.n	80165bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	2201      	movs	r2, #1
 80165a8:	601a      	str	r2, [r3, #0]
 80165aa:	e007      	b.n	80165bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80165ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165b0:	3301      	adds	r3, #1
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	b25a      	sxtb	r2, r3
 80165b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80165bc:	2301      	movs	r3, #1
 80165be:	637b      	str	r3, [r7, #52]	@ 0x34
 80165c0:	e001      	b.n	80165c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80165c2:	2300      	movs	r3, #0
 80165c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80165c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	f383 8811 	msr	BASEPRI, r3
}
 80165d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3738      	adds	r7, #56	@ 0x38
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b08c      	sub	sp, #48	@ 0x30
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	60f8      	str	r0, [r7, #12]
 80165e4:	60b9      	str	r1, [r7, #8]
 80165e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80165e8:	2300      	movs	r3, #0
 80165ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80165f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d10b      	bne.n	801660e <xQueueReceive+0x32>
	__asm volatile
 80165f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165fa:	f383 8811 	msr	BASEPRI, r3
 80165fe:	f3bf 8f6f 	isb	sy
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	623b      	str	r3, [r7, #32]
}
 8016608:	bf00      	nop
 801660a:	bf00      	nop
 801660c:	e7fd      	b.n	801660a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d103      	bne.n	801661c <xQueueReceive+0x40>
 8016614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016618:	2b00      	cmp	r3, #0
 801661a:	d101      	bne.n	8016620 <xQueueReceive+0x44>
 801661c:	2301      	movs	r3, #1
 801661e:	e000      	b.n	8016622 <xQueueReceive+0x46>
 8016620:	2300      	movs	r3, #0
 8016622:	2b00      	cmp	r3, #0
 8016624:	d10b      	bne.n	801663e <xQueueReceive+0x62>
	__asm volatile
 8016626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801662a:	f383 8811 	msr	BASEPRI, r3
 801662e:	f3bf 8f6f 	isb	sy
 8016632:	f3bf 8f4f 	dsb	sy
 8016636:	61fb      	str	r3, [r7, #28]
}
 8016638:	bf00      	nop
 801663a:	bf00      	nop
 801663c:	e7fd      	b.n	801663a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801663e:	f001 fb6b 	bl	8017d18 <xTaskGetSchedulerState>
 8016642:	4603      	mov	r3, r0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d102      	bne.n	801664e <xQueueReceive+0x72>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d101      	bne.n	8016652 <xQueueReceive+0x76>
 801664e:	2301      	movs	r3, #1
 8016650:	e000      	b.n	8016654 <xQueueReceive+0x78>
 8016652:	2300      	movs	r3, #0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10b      	bne.n	8016670 <xQueueReceive+0x94>
	__asm volatile
 8016658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801665c:	f383 8811 	msr	BASEPRI, r3
 8016660:	f3bf 8f6f 	isb	sy
 8016664:	f3bf 8f4f 	dsb	sy
 8016668:	61bb      	str	r3, [r7, #24]
}
 801666a:	bf00      	nop
 801666c:	bf00      	nop
 801666e:	e7fd      	b.n	801666c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016670:	f002 faa2 	bl	8018bb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016678:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801667c:	2b00      	cmp	r3, #0
 801667e:	d01f      	beq.n	80166c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016680:	68b9      	ldr	r1, [r7, #8]
 8016682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016684:	f000 fac4 	bl	8016c10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668a:	1e5a      	subs	r2, r3, #1
 801668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801668e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016692:	691b      	ldr	r3, [r3, #16]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d00f      	beq.n	80166b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801669a:	3310      	adds	r3, #16
 801669c:	4618      	mov	r0, r3
 801669e:	f001 f965 	bl	801796c <xTaskRemoveFromEventList>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d007      	beq.n	80166b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166a8:	4b3c      	ldr	r3, [pc, #240]	@ (801679c <xQueueReceive+0x1c0>)
 80166aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80166ae:	601a      	str	r2, [r3, #0]
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166b8:	f002 fab0 	bl	8018c1c <vPortExitCritical>
				return pdPASS;
 80166bc:	2301      	movs	r3, #1
 80166be:	e069      	b.n	8016794 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d103      	bne.n	80166ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80166c6:	f002 faa9 	bl	8018c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e062      	b.n	8016794 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80166ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d106      	bne.n	80166e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80166d4:	f107 0310 	add.w	r3, r7, #16
 80166d8:	4618      	mov	r0, r3
 80166da:	f001 f9ab 	bl	8017a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80166de:	2301      	movs	r3, #1
 80166e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80166e2:	f002 fa9b 	bl	8018c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80166e6:	f000 ff01 	bl	80174ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80166ea:	f002 fa65 	bl	8018bb8 <vPortEnterCritical>
 80166ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80166f4:	b25b      	sxtb	r3, r3
 80166f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166fa:	d103      	bne.n	8016704 <xQueueReceive+0x128>
 80166fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166fe:	2200      	movs	r2, #0
 8016700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801670a:	b25b      	sxtb	r3, r3
 801670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016710:	d103      	bne.n	801671a <xQueueReceive+0x13e>
 8016712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016714:	2200      	movs	r2, #0
 8016716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801671a:	f002 fa7f 	bl	8018c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801671e:	1d3a      	adds	r2, r7, #4
 8016720:	f107 0310 	add.w	r3, r7, #16
 8016724:	4611      	mov	r1, r2
 8016726:	4618      	mov	r0, r3
 8016728:	f001 f99a 	bl	8017a60 <xTaskCheckForTimeOut>
 801672c:	4603      	mov	r3, r0
 801672e:	2b00      	cmp	r3, #0
 8016730:	d123      	bne.n	801677a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016734:	f000 fae4 	bl	8016d00 <prvIsQueueEmpty>
 8016738:	4603      	mov	r3, r0
 801673a:	2b00      	cmp	r3, #0
 801673c:	d017      	beq.n	801676e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016740:	3324      	adds	r3, #36	@ 0x24
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	4611      	mov	r1, r2
 8016746:	4618      	mov	r0, r3
 8016748:	f001 f8be 	bl	80178c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801674c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801674e:	f000 fa85 	bl	8016c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016752:	f000 fed9 	bl	8017508 <xTaskResumeAll>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	d189      	bne.n	8016670 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801675c:	4b0f      	ldr	r3, [pc, #60]	@ (801679c <xQueueReceive+0x1c0>)
 801675e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016762:	601a      	str	r2, [r3, #0]
 8016764:	f3bf 8f4f 	dsb	sy
 8016768:	f3bf 8f6f 	isb	sy
 801676c:	e780      	b.n	8016670 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801676e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016770:	f000 fa74 	bl	8016c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016774:	f000 fec8 	bl	8017508 <xTaskResumeAll>
 8016778:	e77a      	b.n	8016670 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801677a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801677c:	f000 fa6e 	bl	8016c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016780:	f000 fec2 	bl	8017508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016786:	f000 fabb 	bl	8016d00 <prvIsQueueEmpty>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	f43f af6f 	beq.w	8016670 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016794:	4618      	mov	r0, r3
 8016796:	3730      	adds	r7, #48	@ 0x30
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	e000ed04 	.word	0xe000ed04

080167a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b08e      	sub	sp, #56	@ 0x38
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80167aa:	2300      	movs	r3, #0
 80167ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80167b2:	2300      	movs	r3, #0
 80167b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80167b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10b      	bne.n	80167d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80167bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c0:	f383 8811 	msr	BASEPRI, r3
 80167c4:	f3bf 8f6f 	isb	sy
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	623b      	str	r3, [r7, #32]
}
 80167ce:	bf00      	nop
 80167d0:	bf00      	nop
 80167d2:	e7fd      	b.n	80167d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80167d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d00b      	beq.n	80167f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80167dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167e0:	f383 8811 	msr	BASEPRI, r3
 80167e4:	f3bf 8f6f 	isb	sy
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	61fb      	str	r3, [r7, #28]
}
 80167ee:	bf00      	nop
 80167f0:	bf00      	nop
 80167f2:	e7fd      	b.n	80167f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80167f4:	f001 fa90 	bl	8017d18 <xTaskGetSchedulerState>
 80167f8:	4603      	mov	r3, r0
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d102      	bne.n	8016804 <xQueueSemaphoreTake+0x64>
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d101      	bne.n	8016808 <xQueueSemaphoreTake+0x68>
 8016804:	2301      	movs	r3, #1
 8016806:	e000      	b.n	801680a <xQueueSemaphoreTake+0x6a>
 8016808:	2300      	movs	r3, #0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d10b      	bne.n	8016826 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	61bb      	str	r3, [r7, #24]
}
 8016820:	bf00      	nop
 8016822:	bf00      	nop
 8016824:	e7fd      	b.n	8016822 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016826:	f002 f9c7 	bl	8018bb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801682e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016832:	2b00      	cmp	r3, #0
 8016834:	d024      	beq.n	8016880 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016838:	1e5a      	subs	r2, r3, #1
 801683a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801683c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d104      	bne.n	8016850 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016846:	f001 fbe1 	bl	801800c <pvTaskIncrementMutexHeldCount>
 801684a:	4602      	mov	r2, r0
 801684c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801684e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016852:	691b      	ldr	r3, [r3, #16]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d00f      	beq.n	8016878 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801685a:	3310      	adds	r3, #16
 801685c:	4618      	mov	r0, r3
 801685e:	f001 f885 	bl	801796c <xTaskRemoveFromEventList>
 8016862:	4603      	mov	r3, r0
 8016864:	2b00      	cmp	r3, #0
 8016866:	d007      	beq.n	8016878 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016868:	4b54      	ldr	r3, [pc, #336]	@ (80169bc <xQueueSemaphoreTake+0x21c>)
 801686a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	f3bf 8f4f 	dsb	sy
 8016874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016878:	f002 f9d0 	bl	8018c1c <vPortExitCritical>
				return pdPASS;
 801687c:	2301      	movs	r3, #1
 801687e:	e098      	b.n	80169b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d112      	bne.n	80168ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016888:	2b00      	cmp	r3, #0
 801688a:	d00b      	beq.n	80168a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016890:	f383 8811 	msr	BASEPRI, r3
 8016894:	f3bf 8f6f 	isb	sy
 8016898:	f3bf 8f4f 	dsb	sy
 801689c:	617b      	str	r3, [r7, #20]
}
 801689e:	bf00      	nop
 80168a0:	bf00      	nop
 80168a2:	e7fd      	b.n	80168a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80168a4:	f002 f9ba 	bl	8018c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80168a8:	2300      	movs	r3, #0
 80168aa:	e082      	b.n	80169b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80168ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d106      	bne.n	80168c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80168b2:	f107 030c 	add.w	r3, r7, #12
 80168b6:	4618      	mov	r0, r3
 80168b8:	f001 f8bc 	bl	8017a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80168bc:	2301      	movs	r3, #1
 80168be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80168c0:	f002 f9ac 	bl	8018c1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80168c4:	f000 fe12 	bl	80174ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80168c8:	f002 f976 	bl	8018bb8 <vPortEnterCritical>
 80168cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80168d2:	b25b      	sxtb	r3, r3
 80168d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d8:	d103      	bne.n	80168e2 <xQueueSemaphoreTake+0x142>
 80168da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168dc:	2200      	movs	r2, #0
 80168de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80168e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80168e8:	b25b      	sxtb	r3, r3
 80168ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ee:	d103      	bne.n	80168f8 <xQueueSemaphoreTake+0x158>
 80168f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f2:	2200      	movs	r2, #0
 80168f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80168f8:	f002 f990 	bl	8018c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80168fc:	463a      	mov	r2, r7
 80168fe:	f107 030c 	add.w	r3, r7, #12
 8016902:	4611      	mov	r1, r2
 8016904:	4618      	mov	r0, r3
 8016906:	f001 f8ab 	bl	8017a60 <xTaskCheckForTimeOut>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d132      	bne.n	8016976 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016910:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016912:	f000 f9f5 	bl	8016d00 <prvIsQueueEmpty>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d026      	beq.n	801696a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d109      	bne.n	8016938 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8016924:	f002 f948 	bl	8018bb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	4618      	mov	r0, r3
 801692e:	f001 fa11 	bl	8017d54 <xTaskPriorityInherit>
 8016932:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8016934:	f002 f972 	bl	8018c1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801693a:	3324      	adds	r3, #36	@ 0x24
 801693c:	683a      	ldr	r2, [r7, #0]
 801693e:	4611      	mov	r1, r2
 8016940:	4618      	mov	r0, r3
 8016942:	f000 ffc1 	bl	80178c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016946:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016948:	f000 f988 	bl	8016c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801694c:	f000 fddc 	bl	8017508 <xTaskResumeAll>
 8016950:	4603      	mov	r3, r0
 8016952:	2b00      	cmp	r3, #0
 8016954:	f47f af67 	bne.w	8016826 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8016958:	4b18      	ldr	r3, [pc, #96]	@ (80169bc <xQueueSemaphoreTake+0x21c>)
 801695a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801695e:	601a      	str	r2, [r3, #0]
 8016960:	f3bf 8f4f 	dsb	sy
 8016964:	f3bf 8f6f 	isb	sy
 8016968:	e75d      	b.n	8016826 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801696a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801696c:	f000 f976 	bl	8016c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016970:	f000 fdca 	bl	8017508 <xTaskResumeAll>
 8016974:	e757      	b.n	8016826 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016978:	f000 f970 	bl	8016c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801697c:	f000 fdc4 	bl	8017508 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016980:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016982:	f000 f9bd 	bl	8016d00 <prvIsQueueEmpty>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	f43f af4c 	beq.w	8016826 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00d      	beq.n	80169b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8016994:	f002 f910 	bl	8018bb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801699a:	f000 f8b7 	bl	8016b0c <prvGetDisinheritPriorityAfterTimeout>
 801699e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80169a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169a2:	689b      	ldr	r3, [r3, #8]
 80169a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80169a6:	4618      	mov	r0, r3
 80169a8:	f001 faac 	bl	8017f04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80169ac:	f002 f936 	bl	8018c1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3738      	adds	r7, #56	@ 0x38
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	e000ed04 	.word	0xe000ed04

080169c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b08e      	sub	sp, #56	@ 0x38
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	60b9      	str	r1, [r7, #8]
 80169ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80169d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d10b      	bne.n	80169ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80169d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169da:	f383 8811 	msr	BASEPRI, r3
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	623b      	str	r3, [r7, #32]
}
 80169e8:	bf00      	nop
 80169ea:	bf00      	nop
 80169ec:	e7fd      	b.n	80169ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d103      	bne.n	80169fc <xQueueReceiveFromISR+0x3c>
 80169f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d101      	bne.n	8016a00 <xQueueReceiveFromISR+0x40>
 80169fc:	2301      	movs	r3, #1
 80169fe:	e000      	b.n	8016a02 <xQueueReceiveFromISR+0x42>
 8016a00:	2300      	movs	r3, #0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d10b      	bne.n	8016a1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8016a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a0a:	f383 8811 	msr	BASEPRI, r3
 8016a0e:	f3bf 8f6f 	isb	sy
 8016a12:	f3bf 8f4f 	dsb	sy
 8016a16:	61fb      	str	r3, [r7, #28]
}
 8016a18:	bf00      	nop
 8016a1a:	bf00      	nop
 8016a1c:	e7fd      	b.n	8016a1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a1e:	f002 f9ab 	bl	8018d78 <vPortValidateInterruptPriority>
	__asm volatile
 8016a22:	f3ef 8211 	mrs	r2, BASEPRI
 8016a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a2a:	f383 8811 	msr	BASEPRI, r3
 8016a2e:	f3bf 8f6f 	isb	sy
 8016a32:	f3bf 8f4f 	dsb	sy
 8016a36:	61ba      	str	r2, [r7, #24]
 8016a38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016a3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d02f      	beq.n	8016aaa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016a54:	68b9      	ldr	r1, [r7, #8]
 8016a56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016a58:	f000 f8da 	bl	8016c10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a5e:	1e5a      	subs	r2, r3, #1
 8016a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016a64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a6c:	d112      	bne.n	8016a94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a70:	691b      	ldr	r3, [r3, #16]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d016      	beq.n	8016aa4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a78:	3310      	adds	r3, #16
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f000 ff76 	bl	801796c <xTaskRemoveFromEventList>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d00e      	beq.n	8016aa4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d00b      	beq.n	8016aa4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2201      	movs	r2, #1
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	e007      	b.n	8016aa4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a98:	3301      	adds	r3, #1
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	b25a      	sxtb	r2, r3
 8016a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016aa8:	e001      	b.n	8016aae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8016aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ab0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	f383 8811 	msr	BASEPRI, r3
}
 8016ab8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3738      	adds	r7, #56	@ 0x38
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}

08016ac4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b084      	sub	sp, #16
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d10b      	bne.n	8016aee <vQueueDelete+0x2a>
	__asm volatile
 8016ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ada:	f383 8811 	msr	BASEPRI, r3
 8016ade:	f3bf 8f6f 	isb	sy
 8016ae2:	f3bf 8f4f 	dsb	sy
 8016ae6:	60bb      	str	r3, [r7, #8]
}
 8016ae8:	bf00      	nop
 8016aea:	bf00      	nop
 8016aec:	e7fd      	b.n	8016aea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f000 f95e 	bl	8016db0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d102      	bne.n	8016b04 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8016afe:	68f8      	ldr	r0, [r7, #12]
 8016b00:	f002 fa4a 	bl	8018f98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016b04:	bf00      	nop
 8016b06:	3710      	adds	r7, #16
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016b0c:	b480      	push	{r7}
 8016b0e:	b085      	sub	sp, #20
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8016b26:	60fb      	str	r3, [r7, #12]
 8016b28:	e001      	b.n	8016b2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3714      	adds	r7, #20
 8016b34:	46bd      	mov	sp, r7
 8016b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3a:	4770      	bx	lr

08016b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b086      	sub	sp, #24
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	60b9      	str	r1, [r7, #8]
 8016b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d10d      	bne.n	8016b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d14d      	bne.n	8016bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	689b      	ldr	r3, [r3, #8]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f001 f95c 	bl	8017e24 <xTaskPriorityDisinherit>
 8016b6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	2200      	movs	r2, #0
 8016b72:	609a      	str	r2, [r3, #8]
 8016b74:	e043      	b.n	8016bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d119      	bne.n	8016bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	6858      	ldr	r0, [r3, #4]
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b84:	461a      	mov	r2, r3
 8016b86:	68b9      	ldr	r1, [r7, #8]
 8016b88:	f003 f8c9 	bl	8019d1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	685a      	ldr	r2, [r3, #4]
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b94:	441a      	add	r2, r3
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	685a      	ldr	r2, [r3, #4]
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	689b      	ldr	r3, [r3, #8]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d32b      	bcc.n	8016bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	605a      	str	r2, [r3, #4]
 8016bae:	e026      	b.n	8016bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	68d8      	ldr	r0, [r3, #12]
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bb8:	461a      	mov	r2, r3
 8016bba:	68b9      	ldr	r1, [r7, #8]
 8016bbc:	f003 f8af 	bl	8019d1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	68da      	ldr	r2, [r3, #12]
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bc8:	425b      	negs	r3, r3
 8016bca:	441a      	add	r2, r3
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d207      	bcs.n	8016bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	689a      	ldr	r2, [r3, #8]
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016be4:	425b      	negs	r3, r3
 8016be6:	441a      	add	r2, r3
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d105      	bne.n	8016bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d002      	beq.n	8016bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	1c5a      	adds	r2, r3, #1
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016c06:	697b      	ldr	r3, [r7, #20]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3718      	adds	r7, #24
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d018      	beq.n	8016c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	68da      	ldr	r2, [r3, #12]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c2a:	441a      	add	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	68da      	ldr	r2, [r3, #12]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	689b      	ldr	r3, [r3, #8]
 8016c38:	429a      	cmp	r2, r3
 8016c3a:	d303      	bcc.n	8016c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	68d9      	ldr	r1, [r3, #12]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	6838      	ldr	r0, [r7, #0]
 8016c50:	f003 f865 	bl	8019d1e <memcpy>
	}
}
 8016c54:	bf00      	nop
 8016c56:	3708      	adds	r7, #8
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}

08016c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b084      	sub	sp, #16
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016c64:	f001 ffa8 	bl	8018bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c70:	e011      	b.n	8016c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d012      	beq.n	8016ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	3324      	adds	r3, #36	@ 0x24
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f000 fe74 	bl	801796c <xTaskRemoveFromEventList>
 8016c84:	4603      	mov	r3, r0
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d001      	beq.n	8016c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016c8a:	f000 ff4d 	bl	8017b28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016c8e:	7bfb      	ldrb	r3, [r7, #15]
 8016c90:	3b01      	subs	r3, #1
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	dce9      	bgt.n	8016c72 <prvUnlockQueue+0x16>
 8016c9e:	e000      	b.n	8016ca2 <prvUnlockQueue+0x46>
					break;
 8016ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	22ff      	movs	r2, #255	@ 0xff
 8016ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8016caa:	f001 ffb7 	bl	8018c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016cae:	f001 ff83 	bl	8018bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016cba:	e011      	b.n	8016ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	691b      	ldr	r3, [r3, #16]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d012      	beq.n	8016cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	3310      	adds	r3, #16
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f000 fe4f 	bl	801796c <xTaskRemoveFromEventList>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d001      	beq.n	8016cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016cd4:	f000 ff28 	bl	8017b28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016cd8:	7bbb      	ldrb	r3, [r7, #14]
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	dce9      	bgt.n	8016cbc <prvUnlockQueue+0x60>
 8016ce8:	e000      	b.n	8016cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	22ff      	movs	r2, #255	@ 0xff
 8016cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8016cf4:	f001 ff92 	bl	8018c1c <vPortExitCritical>
}
 8016cf8:	bf00      	nop
 8016cfa:	3710      	adds	r7, #16
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b084      	sub	sp, #16
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d08:	f001 ff56 	bl	8018bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d102      	bne.n	8016d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016d14:	2301      	movs	r3, #1
 8016d16:	60fb      	str	r3, [r7, #12]
 8016d18:	e001      	b.n	8016d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d1e:	f001 ff7d 	bl	8018c1c <vPortExitCritical>

	return xReturn;
 8016d22:	68fb      	ldr	r3, [r7, #12]
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3710      	adds	r7, #16
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d34:	f001 ff40 	bl	8018bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d102      	bne.n	8016d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016d44:	2301      	movs	r3, #1
 8016d46:	60fb      	str	r3, [r7, #12]
 8016d48:	e001      	b.n	8016d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d4e:	f001 ff65 	bl	8018c1c <vPortExitCritical>

	return xReturn;
 8016d52:	68fb      	ldr	r3, [r7, #12]
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	3710      	adds	r7, #16
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}

08016d5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016d5c:	b480      	push	{r7}
 8016d5e:	b085      	sub	sp, #20
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016d66:	2300      	movs	r3, #0
 8016d68:	60fb      	str	r3, [r7, #12]
 8016d6a:	e014      	b.n	8016d96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8016dac <vQueueAddToRegistry+0x50>)
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d10b      	bne.n	8016d90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016d78:	490c      	ldr	r1, [pc, #48]	@ (8016dac <vQueueAddToRegistry+0x50>)
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	683a      	ldr	r2, [r7, #0]
 8016d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016d82:	4a0a      	ldr	r2, [pc, #40]	@ (8016dac <vQueueAddToRegistry+0x50>)
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	4413      	add	r3, r2
 8016d8a:	687a      	ldr	r2, [r7, #4]
 8016d8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016d8e:	e006      	b.n	8016d9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	3301      	adds	r3, #1
 8016d94:	60fb      	str	r3, [r7, #12]
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	2b07      	cmp	r3, #7
 8016d9a:	d9e7      	bls.n	8016d6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016d9c:	bf00      	nop
 8016d9e:	bf00      	nop
 8016da0:	3714      	adds	r7, #20
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr
 8016daa:	bf00      	nop
 8016dac:	24002350 	.word	0x24002350

08016db0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016db8:	2300      	movs	r3, #0
 8016dba:	60fb      	str	r3, [r7, #12]
 8016dbc:	e016      	b.n	8016dec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016dbe:	4a10      	ldr	r2, [pc, #64]	@ (8016e00 <vQueueUnregisterQueue+0x50>)
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	4413      	add	r3, r2
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d10b      	bne.n	8016de6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016dce:	4a0c      	ldr	r2, [pc, #48]	@ (8016e00 <vQueueUnregisterQueue+0x50>)
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	2100      	movs	r1, #0
 8016dd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016dd8:	4a09      	ldr	r2, [pc, #36]	@ (8016e00 <vQueueUnregisterQueue+0x50>)
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	00db      	lsls	r3, r3, #3
 8016dde:	4413      	add	r3, r2
 8016de0:	2200      	movs	r2, #0
 8016de2:	605a      	str	r2, [r3, #4]
				break;
 8016de4:	e006      	b.n	8016df4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	3301      	adds	r3, #1
 8016dea:	60fb      	str	r3, [r7, #12]
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2b07      	cmp	r3, #7
 8016df0:	d9e5      	bls.n	8016dbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016df2:	bf00      	nop
 8016df4:	bf00      	nop
 8016df6:	3714      	adds	r7, #20
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr
 8016e00:	24002350 	.word	0x24002350

08016e04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016e14:	f001 fed0 	bl	8018bb8 <vPortEnterCritical>
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016e1e:	b25b      	sxtb	r3, r3
 8016e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e24:	d103      	bne.n	8016e2e <vQueueWaitForMessageRestricted+0x2a>
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016e34:	b25b      	sxtb	r3, r3
 8016e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e3a:	d103      	bne.n	8016e44 <vQueueWaitForMessageRestricted+0x40>
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016e44:	f001 feea 	bl	8018c1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d106      	bne.n	8016e5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	3324      	adds	r3, #36	@ 0x24
 8016e54:	687a      	ldr	r2, [r7, #4]
 8016e56:	68b9      	ldr	r1, [r7, #8]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f000 fd5b 	bl	8017914 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016e5e:	6978      	ldr	r0, [r7, #20]
 8016e60:	f7ff fefc 	bl	8016c5c <prvUnlockQueue>
	}
 8016e64:	bf00      	nop
 8016e66:	3718      	adds	r7, #24
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b08e      	sub	sp, #56	@ 0x38
 8016e70:	af04      	add	r7, sp, #16
 8016e72:	60f8      	str	r0, [r7, #12]
 8016e74:	60b9      	str	r1, [r7, #8]
 8016e76:	607a      	str	r2, [r7, #4]
 8016e78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d10b      	bne.n	8016e98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8016e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e84:	f383 8811 	msr	BASEPRI, r3
 8016e88:	f3bf 8f6f 	isb	sy
 8016e8c:	f3bf 8f4f 	dsb	sy
 8016e90:	623b      	str	r3, [r7, #32]
}
 8016e92:	bf00      	nop
 8016e94:	bf00      	nop
 8016e96:	e7fd      	b.n	8016e94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d10b      	bne.n	8016eb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8016e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ea2:	f383 8811 	msr	BASEPRI, r3
 8016ea6:	f3bf 8f6f 	isb	sy
 8016eaa:	f3bf 8f4f 	dsb	sy
 8016eae:	61fb      	str	r3, [r7, #28]
}
 8016eb0:	bf00      	nop
 8016eb2:	bf00      	nop
 8016eb4:	e7fd      	b.n	8016eb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016eb6:	23a8      	movs	r3, #168	@ 0xa8
 8016eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	2ba8      	cmp	r3, #168	@ 0xa8
 8016ebe:	d00b      	beq.n	8016ed8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8016ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ec4:	f383 8811 	msr	BASEPRI, r3
 8016ec8:	f3bf 8f6f 	isb	sy
 8016ecc:	f3bf 8f4f 	dsb	sy
 8016ed0:	61bb      	str	r3, [r7, #24]
}
 8016ed2:	bf00      	nop
 8016ed4:	bf00      	nop
 8016ed6:	e7fd      	b.n	8016ed4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ed8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d01e      	beq.n	8016f1e <xTaskCreateStatic+0xb2>
 8016ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d01b      	beq.n	8016f1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ee8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016eee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef2:	2202      	movs	r2, #2
 8016ef4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016ef8:	2300      	movs	r3, #0
 8016efa:	9303      	str	r3, [sp, #12]
 8016efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016efe:	9302      	str	r3, [sp, #8]
 8016f00:	f107 0314 	add.w	r3, r7, #20
 8016f04:	9301      	str	r3, [sp, #4]
 8016f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f08:	9300      	str	r3, [sp, #0]
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	687a      	ldr	r2, [r7, #4]
 8016f0e:	68b9      	ldr	r1, [r7, #8]
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f000 f851 	bl	8016fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016f18:	f000 f8f6 	bl	8017108 <prvAddNewTaskToReadyList>
 8016f1c:	e001      	b.n	8016f22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016f22:	697b      	ldr	r3, [r7, #20]
	}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3728      	adds	r7, #40	@ 0x28
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b08c      	sub	sp, #48	@ 0x30
 8016f30:	af04      	add	r7, sp, #16
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	60b9      	str	r1, [r7, #8]
 8016f36:	603b      	str	r3, [r7, #0]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016f3c:	88fb      	ldrh	r3, [r7, #6]
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	4618      	mov	r0, r3
 8016f42:	f001 ff5b 	bl	8018dfc <pvPortMalloc>
 8016f46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d00e      	beq.n	8016f6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016f4e:	20a8      	movs	r0, #168	@ 0xa8
 8016f50:	f001 ff54 	bl	8018dfc <pvPortMalloc>
 8016f54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016f56:	69fb      	ldr	r3, [r7, #28]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d003      	beq.n	8016f64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	697a      	ldr	r2, [r7, #20]
 8016f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8016f62:	e005      	b.n	8016f70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016f64:	6978      	ldr	r0, [r7, #20]
 8016f66:	f002 f817 	bl	8018f98 <vPortFree>
 8016f6a:	e001      	b.n	8016f70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d017      	beq.n	8016fa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016f76:	69fb      	ldr	r3, [r7, #28]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016f7e:	88fa      	ldrh	r2, [r7, #6]
 8016f80:	2300      	movs	r3, #0
 8016f82:	9303      	str	r3, [sp, #12]
 8016f84:	69fb      	ldr	r3, [r7, #28]
 8016f86:	9302      	str	r3, [sp, #8]
 8016f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f8a:	9301      	str	r3, [sp, #4]
 8016f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	68b9      	ldr	r1, [r7, #8]
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f000 f80f 	bl	8016fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f9a:	69f8      	ldr	r0, [r7, #28]
 8016f9c:	f000 f8b4 	bl	8017108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	61bb      	str	r3, [r7, #24]
 8016fa4:	e002      	b.n	8016fac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8016faa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016fac:	69bb      	ldr	r3, [r7, #24]
	}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3720      	adds	r7, #32
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
	...

08016fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b088      	sub	sp, #32
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	60f8      	str	r0, [r7, #12]
 8016fc0:	60b9      	str	r1, [r7, #8]
 8016fc2:	607a      	str	r2, [r7, #4]
 8016fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	461a      	mov	r2, r3
 8016fd0:	21a5      	movs	r1, #165	@ 0xa5
 8016fd2:	f002 fdcb 	bl	8019b6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016fda:	6879      	ldr	r1, [r7, #4]
 8016fdc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016fe0:	440b      	add	r3, r1
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	4413      	add	r3, r2
 8016fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016fe8:	69bb      	ldr	r3, [r7, #24]
 8016fea:	f023 0307 	bic.w	r3, r3, #7
 8016fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ff0:	69bb      	ldr	r3, [r7, #24]
 8016ff2:	f003 0307 	and.w	r3, r3, #7
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d00b      	beq.n	8017012 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8016ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	617b      	str	r3, [r7, #20]
}
 801700c:	bf00      	nop
 801700e:	bf00      	nop
 8017010:	e7fd      	b.n	801700e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d01f      	beq.n	8017058 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017018:	2300      	movs	r3, #0
 801701a:	61fb      	str	r3, [r7, #28]
 801701c:	e012      	b.n	8017044 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801701e:	68ba      	ldr	r2, [r7, #8]
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	4413      	add	r3, r2
 8017024:	7819      	ldrb	r1, [r3, #0]
 8017026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	4413      	add	r3, r2
 801702c:	3334      	adds	r3, #52	@ 0x34
 801702e:	460a      	mov	r2, r1
 8017030:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	69fb      	ldr	r3, [r7, #28]
 8017036:	4413      	add	r3, r2
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d006      	beq.n	801704c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801703e:	69fb      	ldr	r3, [r7, #28]
 8017040:	3301      	adds	r3, #1
 8017042:	61fb      	str	r3, [r7, #28]
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	2b0f      	cmp	r3, #15
 8017048:	d9e9      	bls.n	801701e <prvInitialiseNewTask+0x66>
 801704a:	e000      	b.n	801704e <prvInitialiseNewTask+0x96>
			{
				break;
 801704c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017050:	2200      	movs	r2, #0
 8017052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017056:	e003      	b.n	8017060 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705a:	2200      	movs	r2, #0
 801705c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017062:	2b37      	cmp	r3, #55	@ 0x37
 8017064:	d901      	bls.n	801706a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017066:	2337      	movs	r3, #55	@ 0x37
 8017068:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801706c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801706e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017074:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017078:	2200      	movs	r2, #0
 801707a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801707e:	3304      	adds	r3, #4
 8017080:	4618      	mov	r0, r3
 8017082:	f7fe fe33 	bl	8015cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017088:	3318      	adds	r3, #24
 801708a:	4618      	mov	r0, r3
 801708c:	f7fe fe2e 	bl	8015cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017098:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801709e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80170a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80170a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a8:	2200      	movs	r2, #0
 80170aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80170ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170b0:	2200      	movs	r2, #0
 80170b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80170b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170b8:	3354      	adds	r3, #84	@ 0x54
 80170ba:	224c      	movs	r2, #76	@ 0x4c
 80170bc:	2100      	movs	r1, #0
 80170be:	4618      	mov	r0, r3
 80170c0:	f002 fd54 	bl	8019b6c <memset>
 80170c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c6:	4a0d      	ldr	r2, [pc, #52]	@ (80170fc <prvInitialiseNewTask+0x144>)
 80170c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80170ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170cc:	4a0c      	ldr	r2, [pc, #48]	@ (8017100 <prvInitialiseNewTask+0x148>)
 80170ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80170d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170d2:	4a0c      	ldr	r2, [pc, #48]	@ (8017104 <prvInitialiseNewTask+0x14c>)
 80170d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	68f9      	ldr	r1, [r7, #12]
 80170da:	69b8      	ldr	r0, [r7, #24]
 80170dc:	f001 fc3a 	bl	8018954 <pxPortInitialiseStack>
 80170e0:	4602      	mov	r2, r0
 80170e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80170e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d002      	beq.n	80170f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80170ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80170f2:	bf00      	nop
 80170f4:	3720      	adds	r7, #32
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	240229e4 	.word	0x240229e4
 8017100:	24022a4c 	.word	0x24022a4c
 8017104:	24022ab4 	.word	0x24022ab4

08017108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b082      	sub	sp, #8
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017110:	f001 fd52 	bl	8018bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017114:	4b2d      	ldr	r3, [pc, #180]	@ (80171cc <prvAddNewTaskToReadyList+0xc4>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	3301      	adds	r3, #1
 801711a:	4a2c      	ldr	r2, [pc, #176]	@ (80171cc <prvAddNewTaskToReadyList+0xc4>)
 801711c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801711e:	4b2c      	ldr	r3, [pc, #176]	@ (80171d0 <prvAddNewTaskToReadyList+0xc8>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d109      	bne.n	801713a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017126:	4a2a      	ldr	r2, [pc, #168]	@ (80171d0 <prvAddNewTaskToReadyList+0xc8>)
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801712c:	4b27      	ldr	r3, [pc, #156]	@ (80171cc <prvAddNewTaskToReadyList+0xc4>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	2b01      	cmp	r3, #1
 8017132:	d110      	bne.n	8017156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017134:	f000 fd1c 	bl	8017b70 <prvInitialiseTaskLists>
 8017138:	e00d      	b.n	8017156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801713a:	4b26      	ldr	r3, [pc, #152]	@ (80171d4 <prvAddNewTaskToReadyList+0xcc>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d109      	bne.n	8017156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017142:	4b23      	ldr	r3, [pc, #140]	@ (80171d0 <prvAddNewTaskToReadyList+0xc8>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801714c:	429a      	cmp	r2, r3
 801714e:	d802      	bhi.n	8017156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017150:	4a1f      	ldr	r2, [pc, #124]	@ (80171d0 <prvAddNewTaskToReadyList+0xc8>)
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017156:	4b20      	ldr	r3, [pc, #128]	@ (80171d8 <prvAddNewTaskToReadyList+0xd0>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	3301      	adds	r3, #1
 801715c:	4a1e      	ldr	r2, [pc, #120]	@ (80171d8 <prvAddNewTaskToReadyList+0xd0>)
 801715e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017160:	4b1d      	ldr	r3, [pc, #116]	@ (80171d8 <prvAddNewTaskToReadyList+0xd0>)
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801716c:	4b1b      	ldr	r3, [pc, #108]	@ (80171dc <prvAddNewTaskToReadyList+0xd4>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	429a      	cmp	r2, r3
 8017172:	d903      	bls.n	801717c <prvAddNewTaskToReadyList+0x74>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017178:	4a18      	ldr	r2, [pc, #96]	@ (80171dc <prvAddNewTaskToReadyList+0xd4>)
 801717a:	6013      	str	r3, [r2, #0]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017180:	4613      	mov	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	4413      	add	r3, r2
 8017186:	009b      	lsls	r3, r3, #2
 8017188:	4a15      	ldr	r2, [pc, #84]	@ (80171e0 <prvAddNewTaskToReadyList+0xd8>)
 801718a:	441a      	add	r2, r3
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	3304      	adds	r3, #4
 8017190:	4619      	mov	r1, r3
 8017192:	4610      	mov	r0, r2
 8017194:	f7fe fdb7 	bl	8015d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017198:	f001 fd40 	bl	8018c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801719c:	4b0d      	ldr	r3, [pc, #52]	@ (80171d4 <prvAddNewTaskToReadyList+0xcc>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00e      	beq.n	80171c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80171a4:	4b0a      	ldr	r3, [pc, #40]	@ (80171d0 <prvAddNewTaskToReadyList+0xc8>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d207      	bcs.n	80171c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80171b2:	4b0c      	ldr	r3, [pc, #48]	@ (80171e4 <prvAddNewTaskToReadyList+0xdc>)
 80171b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171b8:	601a      	str	r2, [r3, #0]
 80171ba:	f3bf 8f4f 	dsb	sy
 80171be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171c2:	bf00      	nop
 80171c4:	3708      	adds	r7, #8
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop
 80171cc:	24002864 	.word	0x24002864
 80171d0:	24002390 	.word	0x24002390
 80171d4:	24002870 	.word	0x24002870
 80171d8:	24002880 	.word	0x24002880
 80171dc:	2400286c 	.word	0x2400286c
 80171e0:	24002394 	.word	0x24002394
 80171e4:	e000ed04 	.word	0xe000ed04

080171e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80171f0:	f001 fce2 	bl	8018bb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d102      	bne.n	8017200 <vTaskDelete+0x18>
 80171fa:	4b2d      	ldr	r3, [pc, #180]	@ (80172b0 <vTaskDelete+0xc8>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	e000      	b.n	8017202 <vTaskDelete+0x1a>
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	3304      	adds	r3, #4
 8017208:	4618      	mov	r0, r3
 801720a:	f7fe fdd9 	bl	8015dc0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017212:	2b00      	cmp	r3, #0
 8017214:	d004      	beq.n	8017220 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	3318      	adds	r3, #24
 801721a:	4618      	mov	r0, r3
 801721c:	f7fe fdd0 	bl	8015dc0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017220:	4b24      	ldr	r3, [pc, #144]	@ (80172b4 <vTaskDelete+0xcc>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	3301      	adds	r3, #1
 8017226:	4a23      	ldr	r2, [pc, #140]	@ (80172b4 <vTaskDelete+0xcc>)
 8017228:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801722a:	4b21      	ldr	r3, [pc, #132]	@ (80172b0 <vTaskDelete+0xc8>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	68fa      	ldr	r2, [r7, #12]
 8017230:	429a      	cmp	r2, r3
 8017232:	d10b      	bne.n	801724c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	3304      	adds	r3, #4
 8017238:	4619      	mov	r1, r3
 801723a:	481f      	ldr	r0, [pc, #124]	@ (80172b8 <vTaskDelete+0xd0>)
 801723c:	f7fe fd63 	bl	8015d06 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017240:	4b1e      	ldr	r3, [pc, #120]	@ (80172bc <vTaskDelete+0xd4>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	3301      	adds	r3, #1
 8017246:	4a1d      	ldr	r2, [pc, #116]	@ (80172bc <vTaskDelete+0xd4>)
 8017248:	6013      	str	r3, [r2, #0]
 801724a:	e009      	b.n	8017260 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801724c:	4b1c      	ldr	r3, [pc, #112]	@ (80172c0 <vTaskDelete+0xd8>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	3b01      	subs	r3, #1
 8017252:	4a1b      	ldr	r2, [pc, #108]	@ (80172c0 <vTaskDelete+0xd8>)
 8017254:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f000 fcf8 	bl	8017c4c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801725c:	f000 fd2c 	bl	8017cb8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017260:	f001 fcdc 	bl	8018c1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017264:	4b17      	ldr	r3, [pc, #92]	@ (80172c4 <vTaskDelete+0xdc>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d01c      	beq.n	80172a6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 801726c:	4b10      	ldr	r3, [pc, #64]	@ (80172b0 <vTaskDelete+0xc8>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	68fa      	ldr	r2, [r7, #12]
 8017272:	429a      	cmp	r2, r3
 8017274:	d117      	bne.n	80172a6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8017276:	4b14      	ldr	r3, [pc, #80]	@ (80172c8 <vTaskDelete+0xe0>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d00b      	beq.n	8017296 <vTaskDelete+0xae>
	__asm volatile
 801727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017282:	f383 8811 	msr	BASEPRI, r3
 8017286:	f3bf 8f6f 	isb	sy
 801728a:	f3bf 8f4f 	dsb	sy
 801728e:	60bb      	str	r3, [r7, #8]
}
 8017290:	bf00      	nop
 8017292:	bf00      	nop
 8017294:	e7fd      	b.n	8017292 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8017296:	4b0d      	ldr	r3, [pc, #52]	@ (80172cc <vTaskDelete+0xe4>)
 8017298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801729c:	601a      	str	r2, [r3, #0]
 801729e:	f3bf 8f4f 	dsb	sy
 80172a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80172a6:	bf00      	nop
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	24002390 	.word	0x24002390
 80172b4:	24002880 	.word	0x24002880
 80172b8:	24002838 	.word	0x24002838
 80172bc:	2400284c 	.word	0x2400284c
 80172c0:	24002864 	.word	0x24002864
 80172c4:	24002870 	.word	0x24002870
 80172c8:	2400288c 	.word	0x2400288c
 80172cc:	e000ed04 	.word	0xe000ed04

080172d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b084      	sub	sp, #16
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80172d8:	2300      	movs	r3, #0
 80172da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d018      	beq.n	8017314 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80172e2:	4b14      	ldr	r3, [pc, #80]	@ (8017334 <vTaskDelay+0x64>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d00b      	beq.n	8017302 <vTaskDelay+0x32>
	__asm volatile
 80172ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172ee:	f383 8811 	msr	BASEPRI, r3
 80172f2:	f3bf 8f6f 	isb	sy
 80172f6:	f3bf 8f4f 	dsb	sy
 80172fa:	60bb      	str	r3, [r7, #8]
}
 80172fc:	bf00      	nop
 80172fe:	bf00      	nop
 8017300:	e7fd      	b.n	80172fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017302:	f000 f8f3 	bl	80174ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017306:	2100      	movs	r1, #0
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f000 ff75 	bl	80181f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801730e:	f000 f8fb 	bl	8017508 <xTaskResumeAll>
 8017312:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d107      	bne.n	801732a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801731a:	4b07      	ldr	r3, [pc, #28]	@ (8017338 <vTaskDelay+0x68>)
 801731c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017320:	601a      	str	r2, [r3, #0]
 8017322:	f3bf 8f4f 	dsb	sy
 8017326:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801732a:	bf00      	nop
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	2400288c 	.word	0x2400288c
 8017338:	e000ed04 	.word	0xe000ed04

0801733c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801733c:	b580      	push	{r7, lr}
 801733e:	b088      	sub	sp, #32
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017348:	69bb      	ldr	r3, [r7, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10b      	bne.n	8017366 <eTaskGetState+0x2a>
	__asm volatile
 801734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017352:	f383 8811 	msr	BASEPRI, r3
 8017356:	f3bf 8f6f 	isb	sy
 801735a:	f3bf 8f4f 	dsb	sy
 801735e:	60bb      	str	r3, [r7, #8]
}
 8017360:	bf00      	nop
 8017362:	bf00      	nop
 8017364:	e7fd      	b.n	8017362 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017366:	4b24      	ldr	r3, [pc, #144]	@ (80173f8 <eTaskGetState+0xbc>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	69ba      	ldr	r2, [r7, #24]
 801736c:	429a      	cmp	r2, r3
 801736e:	d102      	bne.n	8017376 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017370:	2300      	movs	r3, #0
 8017372:	77fb      	strb	r3, [r7, #31]
 8017374:	e03a      	b.n	80173ec <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8017376:	f001 fc1f 	bl	8018bb8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801737a:	69bb      	ldr	r3, [r7, #24]
 801737c:	695b      	ldr	r3, [r3, #20]
 801737e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017380:	4b1e      	ldr	r3, [pc, #120]	@ (80173fc <eTaskGetState+0xc0>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8017386:	4b1e      	ldr	r3, [pc, #120]	@ (8017400 <eTaskGetState+0xc4>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801738c:	f001 fc46 	bl	8018c1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8017390:	697a      	ldr	r2, [r7, #20]
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	429a      	cmp	r2, r3
 8017396:	d003      	beq.n	80173a0 <eTaskGetState+0x64>
 8017398:	697a      	ldr	r2, [r7, #20]
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	429a      	cmp	r2, r3
 801739e:	d102      	bne.n	80173a6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80173a0:	2302      	movs	r3, #2
 80173a2:	77fb      	strb	r3, [r7, #31]
 80173a4:	e022      	b.n	80173ec <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	4a16      	ldr	r2, [pc, #88]	@ (8017404 <eTaskGetState+0xc8>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d112      	bne.n	80173d4 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d10b      	bne.n	80173ce <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	2b01      	cmp	r3, #1
 80173c0:	d102      	bne.n	80173c8 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80173c2:	2302      	movs	r3, #2
 80173c4:	77fb      	strb	r3, [r7, #31]
 80173c6:	e011      	b.n	80173ec <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80173c8:	2303      	movs	r3, #3
 80173ca:	77fb      	strb	r3, [r7, #31]
 80173cc:	e00e      	b.n	80173ec <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80173ce:	2302      	movs	r3, #2
 80173d0:	77fb      	strb	r3, [r7, #31]
 80173d2:	e00b      	b.n	80173ec <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	4a0c      	ldr	r2, [pc, #48]	@ (8017408 <eTaskGetState+0xcc>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d002      	beq.n	80173e2 <eTaskGetState+0xa6>
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d102      	bne.n	80173e8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80173e2:	2304      	movs	r3, #4
 80173e4:	77fb      	strb	r3, [r7, #31]
 80173e6:	e001      	b.n	80173ec <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80173e8:	2301      	movs	r3, #1
 80173ea:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80173ec:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80173ee:	4618      	mov	r0, r3
 80173f0:	3720      	adds	r7, #32
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}
 80173f6:	bf00      	nop
 80173f8:	24002390 	.word	0x24002390
 80173fc:	2400281c 	.word	0x2400281c
 8017400:	24002820 	.word	0x24002820
 8017404:	24002850 	.word	0x24002850
 8017408:	24002838 	.word	0x24002838

0801740c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b08a      	sub	sp, #40	@ 0x28
 8017410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017412:	2300      	movs	r3, #0
 8017414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017416:	2300      	movs	r3, #0
 8017418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801741a:	463a      	mov	r2, r7
 801741c:	1d39      	adds	r1, r7, #4
 801741e:	f107 0308 	add.w	r3, r7, #8
 8017422:	4618      	mov	r0, r3
 8017424:	f7fe fc0e 	bl	8015c44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017428:	6839      	ldr	r1, [r7, #0]
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	68ba      	ldr	r2, [r7, #8]
 801742e:	9202      	str	r2, [sp, #8]
 8017430:	9301      	str	r3, [sp, #4]
 8017432:	2300      	movs	r3, #0
 8017434:	9300      	str	r3, [sp, #0]
 8017436:	2300      	movs	r3, #0
 8017438:	460a      	mov	r2, r1
 801743a:	4924      	ldr	r1, [pc, #144]	@ (80174cc <vTaskStartScheduler+0xc0>)
 801743c:	4824      	ldr	r0, [pc, #144]	@ (80174d0 <vTaskStartScheduler+0xc4>)
 801743e:	f7ff fd15 	bl	8016e6c <xTaskCreateStatic>
 8017442:	4603      	mov	r3, r0
 8017444:	4a23      	ldr	r2, [pc, #140]	@ (80174d4 <vTaskStartScheduler+0xc8>)
 8017446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017448:	4b22      	ldr	r3, [pc, #136]	@ (80174d4 <vTaskStartScheduler+0xc8>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d002      	beq.n	8017456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017450:	2301      	movs	r3, #1
 8017452:	617b      	str	r3, [r7, #20]
 8017454:	e001      	b.n	801745a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017456:	2300      	movs	r3, #0
 8017458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	2b01      	cmp	r3, #1
 801745e:	d102      	bne.n	8017466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017460:	f000 ff1e 	bl	80182a0 <xTimerCreateTimerTask>
 8017464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017466:	697b      	ldr	r3, [r7, #20]
 8017468:	2b01      	cmp	r3, #1
 801746a:	d11b      	bne.n	80174a4 <vTaskStartScheduler+0x98>
	__asm volatile
 801746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	613b      	str	r3, [r7, #16]
}
 801747e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017480:	4b15      	ldr	r3, [pc, #84]	@ (80174d8 <vTaskStartScheduler+0xcc>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	3354      	adds	r3, #84	@ 0x54
 8017486:	4a15      	ldr	r2, [pc, #84]	@ (80174dc <vTaskStartScheduler+0xd0>)
 8017488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801748a:	4b15      	ldr	r3, [pc, #84]	@ (80174e0 <vTaskStartScheduler+0xd4>)
 801748c:	f04f 32ff 	mov.w	r2, #4294967295
 8017490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017492:	4b14      	ldr	r3, [pc, #80]	@ (80174e4 <vTaskStartScheduler+0xd8>)
 8017494:	2201      	movs	r2, #1
 8017496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017498:	4b13      	ldr	r3, [pc, #76]	@ (80174e8 <vTaskStartScheduler+0xdc>)
 801749a:	2200      	movs	r2, #0
 801749c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801749e:	f001 fae7 	bl	8018a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80174a2:	e00f      	b.n	80174c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80174a4:	697b      	ldr	r3, [r7, #20]
 80174a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174aa:	d10b      	bne.n	80174c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80174ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174b0:	f383 8811 	msr	BASEPRI, r3
 80174b4:	f3bf 8f6f 	isb	sy
 80174b8:	f3bf 8f4f 	dsb	sy
 80174bc:	60fb      	str	r3, [r7, #12]
}
 80174be:	bf00      	nop
 80174c0:	bf00      	nop
 80174c2:	e7fd      	b.n	80174c0 <vTaskStartScheduler+0xb4>
}
 80174c4:	bf00      	nop
 80174c6:	3718      	adds	r7, #24
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}
 80174cc:	0801aa94 	.word	0x0801aa94
 80174d0:	08017b41 	.word	0x08017b41
 80174d4:	24002888 	.word	0x24002888
 80174d8:	24002390 	.word	0x24002390
 80174dc:	24000028 	.word	0x24000028
 80174e0:	24002884 	.word	0x24002884
 80174e4:	24002870 	.word	0x24002870
 80174e8:	24002868 	.word	0x24002868

080174ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80174ec:	b480      	push	{r7}
 80174ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80174f0:	4b04      	ldr	r3, [pc, #16]	@ (8017504 <vTaskSuspendAll+0x18>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	3301      	adds	r3, #1
 80174f6:	4a03      	ldr	r2, [pc, #12]	@ (8017504 <vTaskSuspendAll+0x18>)
 80174f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80174fa:	bf00      	nop
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr
 8017504:	2400288c 	.word	0x2400288c

08017508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b084      	sub	sp, #16
 801750c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801750e:	2300      	movs	r3, #0
 8017510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017512:	2300      	movs	r3, #0
 8017514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017516:	4b42      	ldr	r3, [pc, #264]	@ (8017620 <xTaskResumeAll+0x118>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d10b      	bne.n	8017536 <xTaskResumeAll+0x2e>
	__asm volatile
 801751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017522:	f383 8811 	msr	BASEPRI, r3
 8017526:	f3bf 8f6f 	isb	sy
 801752a:	f3bf 8f4f 	dsb	sy
 801752e:	603b      	str	r3, [r7, #0]
}
 8017530:	bf00      	nop
 8017532:	bf00      	nop
 8017534:	e7fd      	b.n	8017532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017536:	f001 fb3f 	bl	8018bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801753a:	4b39      	ldr	r3, [pc, #228]	@ (8017620 <xTaskResumeAll+0x118>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	3b01      	subs	r3, #1
 8017540:	4a37      	ldr	r2, [pc, #220]	@ (8017620 <xTaskResumeAll+0x118>)
 8017542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017544:	4b36      	ldr	r3, [pc, #216]	@ (8017620 <xTaskResumeAll+0x118>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d162      	bne.n	8017612 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801754c:	4b35      	ldr	r3, [pc, #212]	@ (8017624 <xTaskResumeAll+0x11c>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d05e      	beq.n	8017612 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017554:	e02f      	b.n	80175b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017556:	4b34      	ldr	r3, [pc, #208]	@ (8017628 <xTaskResumeAll+0x120>)
 8017558:	68db      	ldr	r3, [r3, #12]
 801755a:	68db      	ldr	r3, [r3, #12]
 801755c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	3318      	adds	r3, #24
 8017562:	4618      	mov	r0, r3
 8017564:	f7fe fc2c 	bl	8015dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	3304      	adds	r3, #4
 801756c:	4618      	mov	r0, r3
 801756e:	f7fe fc27 	bl	8015dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017576:	4b2d      	ldr	r3, [pc, #180]	@ (801762c <xTaskResumeAll+0x124>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	429a      	cmp	r2, r3
 801757c:	d903      	bls.n	8017586 <xTaskResumeAll+0x7e>
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017582:	4a2a      	ldr	r2, [pc, #168]	@ (801762c <xTaskResumeAll+0x124>)
 8017584:	6013      	str	r3, [r2, #0]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801758a:	4613      	mov	r3, r2
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	4413      	add	r3, r2
 8017590:	009b      	lsls	r3, r3, #2
 8017592:	4a27      	ldr	r2, [pc, #156]	@ (8017630 <xTaskResumeAll+0x128>)
 8017594:	441a      	add	r2, r3
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	3304      	adds	r3, #4
 801759a:	4619      	mov	r1, r3
 801759c:	4610      	mov	r0, r2
 801759e:	f7fe fbb2 	bl	8015d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80175a6:	4b23      	ldr	r3, [pc, #140]	@ (8017634 <xTaskResumeAll+0x12c>)
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d302      	bcc.n	80175b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80175b0:	4b21      	ldr	r3, [pc, #132]	@ (8017638 <xTaskResumeAll+0x130>)
 80175b2:	2201      	movs	r2, #1
 80175b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80175b6:	4b1c      	ldr	r3, [pc, #112]	@ (8017628 <xTaskResumeAll+0x120>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1cb      	bne.n	8017556 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d001      	beq.n	80175c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80175c4:	f000 fb78 	bl	8017cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80175c8:	4b1c      	ldr	r3, [pc, #112]	@ (801763c <xTaskResumeAll+0x134>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d010      	beq.n	80175f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80175d4:	f000 f858 	bl	8017688 <xTaskIncrementTick>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d002      	beq.n	80175e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80175de:	4b16      	ldr	r3, [pc, #88]	@ (8017638 <xTaskResumeAll+0x130>)
 80175e0:	2201      	movs	r2, #1
 80175e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	3b01      	subs	r3, #1
 80175e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d1f1      	bne.n	80175d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80175f0:	4b12      	ldr	r3, [pc, #72]	@ (801763c <xTaskResumeAll+0x134>)
 80175f2:	2200      	movs	r2, #0
 80175f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80175f6:	4b10      	ldr	r3, [pc, #64]	@ (8017638 <xTaskResumeAll+0x130>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d009      	beq.n	8017612 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80175fe:	2301      	movs	r3, #1
 8017600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017602:	4b0f      	ldr	r3, [pc, #60]	@ (8017640 <xTaskResumeAll+0x138>)
 8017604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	f3bf 8f4f 	dsb	sy
 801760e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017612:	f001 fb03 	bl	8018c1c <vPortExitCritical>

	return xAlreadyYielded;
 8017616:	68bb      	ldr	r3, [r7, #8]
}
 8017618:	4618      	mov	r0, r3
 801761a:	3710      	adds	r7, #16
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	2400288c 	.word	0x2400288c
 8017624:	24002864 	.word	0x24002864
 8017628:	24002824 	.word	0x24002824
 801762c:	2400286c 	.word	0x2400286c
 8017630:	24002394 	.word	0x24002394
 8017634:	24002390 	.word	0x24002390
 8017638:	24002878 	.word	0x24002878
 801763c:	24002874 	.word	0x24002874
 8017640:	e000ed04 	.word	0xe000ed04

08017644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801764a:	4b05      	ldr	r3, [pc, #20]	@ (8017660 <xTaskGetTickCount+0x1c>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017650:	687b      	ldr	r3, [r7, #4]
}
 8017652:	4618      	mov	r0, r3
 8017654:	370c      	adds	r7, #12
 8017656:	46bd      	mov	sp, r7
 8017658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765c:	4770      	bx	lr
 801765e:	bf00      	nop
 8017660:	24002868 	.word	0x24002868

08017664 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801766a:	f001 fb85 	bl	8018d78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801766e:	2300      	movs	r3, #0
 8017670:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017672:	4b04      	ldr	r3, [pc, #16]	@ (8017684 <xTaskGetTickCountFromISR+0x20>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017678:	683b      	ldr	r3, [r7, #0]
}
 801767a:	4618      	mov	r0, r3
 801767c:	3708      	adds	r7, #8
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	24002868 	.word	0x24002868

08017688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b086      	sub	sp, #24
 801768c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801768e:	2300      	movs	r3, #0
 8017690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017692:	4b4f      	ldr	r3, [pc, #316]	@ (80177d0 <xTaskIncrementTick+0x148>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	f040 8090 	bne.w	80177bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801769c:	4b4d      	ldr	r3, [pc, #308]	@ (80177d4 <xTaskIncrementTick+0x14c>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	3301      	adds	r3, #1
 80176a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80176a4:	4a4b      	ldr	r2, [pc, #300]	@ (80177d4 <xTaskIncrementTick+0x14c>)
 80176a6:	693b      	ldr	r3, [r7, #16]
 80176a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d121      	bne.n	80176f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80176b0:	4b49      	ldr	r3, [pc, #292]	@ (80177d8 <xTaskIncrementTick+0x150>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00b      	beq.n	80176d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80176ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176be:	f383 8811 	msr	BASEPRI, r3
 80176c2:	f3bf 8f6f 	isb	sy
 80176c6:	f3bf 8f4f 	dsb	sy
 80176ca:	603b      	str	r3, [r7, #0]
}
 80176cc:	bf00      	nop
 80176ce:	bf00      	nop
 80176d0:	e7fd      	b.n	80176ce <xTaskIncrementTick+0x46>
 80176d2:	4b41      	ldr	r3, [pc, #260]	@ (80177d8 <xTaskIncrementTick+0x150>)
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	60fb      	str	r3, [r7, #12]
 80176d8:	4b40      	ldr	r3, [pc, #256]	@ (80177dc <xTaskIncrementTick+0x154>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	4a3e      	ldr	r2, [pc, #248]	@ (80177d8 <xTaskIncrementTick+0x150>)
 80176de:	6013      	str	r3, [r2, #0]
 80176e0:	4a3e      	ldr	r2, [pc, #248]	@ (80177dc <xTaskIncrementTick+0x154>)
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	6013      	str	r3, [r2, #0]
 80176e6:	4b3e      	ldr	r3, [pc, #248]	@ (80177e0 <xTaskIncrementTick+0x158>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	3301      	adds	r3, #1
 80176ec:	4a3c      	ldr	r2, [pc, #240]	@ (80177e0 <xTaskIncrementTick+0x158>)
 80176ee:	6013      	str	r3, [r2, #0]
 80176f0:	f000 fae2 	bl	8017cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80176f4:	4b3b      	ldr	r3, [pc, #236]	@ (80177e4 <xTaskIncrementTick+0x15c>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	693a      	ldr	r2, [r7, #16]
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d349      	bcc.n	8017792 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80176fe:	4b36      	ldr	r3, [pc, #216]	@ (80177d8 <xTaskIncrementTick+0x150>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d104      	bne.n	8017712 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017708:	4b36      	ldr	r3, [pc, #216]	@ (80177e4 <xTaskIncrementTick+0x15c>)
 801770a:	f04f 32ff 	mov.w	r2, #4294967295
 801770e:	601a      	str	r2, [r3, #0]
					break;
 8017710:	e03f      	b.n	8017792 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017712:	4b31      	ldr	r3, [pc, #196]	@ (80177d8 <xTaskIncrementTick+0x150>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	68db      	ldr	r3, [r3, #12]
 801771a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801771c:	68bb      	ldr	r3, [r7, #8]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	429a      	cmp	r2, r3
 8017728:	d203      	bcs.n	8017732 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801772a:	4a2e      	ldr	r2, [pc, #184]	@ (80177e4 <xTaskIncrementTick+0x15c>)
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017730:	e02f      	b.n	8017792 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	3304      	adds	r3, #4
 8017736:	4618      	mov	r0, r3
 8017738:	f7fe fb42 	bl	8015dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017740:	2b00      	cmp	r3, #0
 8017742:	d004      	beq.n	801774e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	3318      	adds	r3, #24
 8017748:	4618      	mov	r0, r3
 801774a:	f7fe fb39 	bl	8015dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017752:	4b25      	ldr	r3, [pc, #148]	@ (80177e8 <xTaskIncrementTick+0x160>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	429a      	cmp	r2, r3
 8017758:	d903      	bls.n	8017762 <xTaskIncrementTick+0xda>
 801775a:	68bb      	ldr	r3, [r7, #8]
 801775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801775e:	4a22      	ldr	r2, [pc, #136]	@ (80177e8 <xTaskIncrementTick+0x160>)
 8017760:	6013      	str	r3, [r2, #0]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017766:	4613      	mov	r3, r2
 8017768:	009b      	lsls	r3, r3, #2
 801776a:	4413      	add	r3, r2
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	4a1f      	ldr	r2, [pc, #124]	@ (80177ec <xTaskIncrementTick+0x164>)
 8017770:	441a      	add	r2, r3
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	3304      	adds	r3, #4
 8017776:	4619      	mov	r1, r3
 8017778:	4610      	mov	r0, r2
 801777a:	f7fe fac4 	bl	8015d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017782:	4b1b      	ldr	r3, [pc, #108]	@ (80177f0 <xTaskIncrementTick+0x168>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017788:	429a      	cmp	r2, r3
 801778a:	d3b8      	bcc.n	80176fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801778c:	2301      	movs	r3, #1
 801778e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017790:	e7b5      	b.n	80176fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017792:	4b17      	ldr	r3, [pc, #92]	@ (80177f0 <xTaskIncrementTick+0x168>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017798:	4914      	ldr	r1, [pc, #80]	@ (80177ec <xTaskIncrementTick+0x164>)
 801779a:	4613      	mov	r3, r2
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	4413      	add	r3, r2
 80177a0:	009b      	lsls	r3, r3, #2
 80177a2:	440b      	add	r3, r1
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d901      	bls.n	80177ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80177aa:	2301      	movs	r3, #1
 80177ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80177ae:	4b11      	ldr	r3, [pc, #68]	@ (80177f4 <xTaskIncrementTick+0x16c>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d007      	beq.n	80177c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80177b6:	2301      	movs	r3, #1
 80177b8:	617b      	str	r3, [r7, #20]
 80177ba:	e004      	b.n	80177c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80177bc:	4b0e      	ldr	r3, [pc, #56]	@ (80177f8 <xTaskIncrementTick+0x170>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	3301      	adds	r3, #1
 80177c2:	4a0d      	ldr	r2, [pc, #52]	@ (80177f8 <xTaskIncrementTick+0x170>)
 80177c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80177c6:	697b      	ldr	r3, [r7, #20]
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3718      	adds	r7, #24
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	2400288c 	.word	0x2400288c
 80177d4:	24002868 	.word	0x24002868
 80177d8:	2400281c 	.word	0x2400281c
 80177dc:	24002820 	.word	0x24002820
 80177e0:	2400287c 	.word	0x2400287c
 80177e4:	24002884 	.word	0x24002884
 80177e8:	2400286c 	.word	0x2400286c
 80177ec:	24002394 	.word	0x24002394
 80177f0:	24002390 	.word	0x24002390
 80177f4:	24002878 	.word	0x24002878
 80177f8:	24002874 	.word	0x24002874

080177fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80177fc:	b480      	push	{r7}
 80177fe:	b085      	sub	sp, #20
 8017800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017802:	4b2b      	ldr	r3, [pc, #172]	@ (80178b0 <vTaskSwitchContext+0xb4>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d003      	beq.n	8017812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801780a:	4b2a      	ldr	r3, [pc, #168]	@ (80178b4 <vTaskSwitchContext+0xb8>)
 801780c:	2201      	movs	r2, #1
 801780e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017810:	e047      	b.n	80178a2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8017812:	4b28      	ldr	r3, [pc, #160]	@ (80178b4 <vTaskSwitchContext+0xb8>)
 8017814:	2200      	movs	r2, #0
 8017816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017818:	4b27      	ldr	r3, [pc, #156]	@ (80178b8 <vTaskSwitchContext+0xbc>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	60fb      	str	r3, [r7, #12]
 801781e:	e011      	b.n	8017844 <vTaskSwitchContext+0x48>
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d10b      	bne.n	801783e <vTaskSwitchContext+0x42>
	__asm volatile
 8017826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801782a:	f383 8811 	msr	BASEPRI, r3
 801782e:	f3bf 8f6f 	isb	sy
 8017832:	f3bf 8f4f 	dsb	sy
 8017836:	607b      	str	r3, [r7, #4]
}
 8017838:	bf00      	nop
 801783a:	bf00      	nop
 801783c:	e7fd      	b.n	801783a <vTaskSwitchContext+0x3e>
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	3b01      	subs	r3, #1
 8017842:	60fb      	str	r3, [r7, #12]
 8017844:	491d      	ldr	r1, [pc, #116]	@ (80178bc <vTaskSwitchContext+0xc0>)
 8017846:	68fa      	ldr	r2, [r7, #12]
 8017848:	4613      	mov	r3, r2
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	4413      	add	r3, r2
 801784e:	009b      	lsls	r3, r3, #2
 8017850:	440b      	add	r3, r1
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d0e3      	beq.n	8017820 <vTaskSwitchContext+0x24>
 8017858:	68fa      	ldr	r2, [r7, #12]
 801785a:	4613      	mov	r3, r2
 801785c:	009b      	lsls	r3, r3, #2
 801785e:	4413      	add	r3, r2
 8017860:	009b      	lsls	r3, r3, #2
 8017862:	4a16      	ldr	r2, [pc, #88]	@ (80178bc <vTaskSwitchContext+0xc0>)
 8017864:	4413      	add	r3, r2
 8017866:	60bb      	str	r3, [r7, #8]
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	685a      	ldr	r2, [r3, #4]
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	605a      	str	r2, [r3, #4]
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	685a      	ldr	r2, [r3, #4]
 8017876:	68bb      	ldr	r3, [r7, #8]
 8017878:	3308      	adds	r3, #8
 801787a:	429a      	cmp	r2, r3
 801787c:	d104      	bne.n	8017888 <vTaskSwitchContext+0x8c>
 801787e:	68bb      	ldr	r3, [r7, #8]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	685a      	ldr	r2, [r3, #4]
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	605a      	str	r2, [r3, #4]
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	685b      	ldr	r3, [r3, #4]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	4a0c      	ldr	r2, [pc, #48]	@ (80178c0 <vTaskSwitchContext+0xc4>)
 8017890:	6013      	str	r3, [r2, #0]
 8017892:	4a09      	ldr	r2, [pc, #36]	@ (80178b8 <vTaskSwitchContext+0xbc>)
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017898:	4b09      	ldr	r3, [pc, #36]	@ (80178c0 <vTaskSwitchContext+0xc4>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	3354      	adds	r3, #84	@ 0x54
 801789e:	4a09      	ldr	r2, [pc, #36]	@ (80178c4 <vTaskSwitchContext+0xc8>)
 80178a0:	6013      	str	r3, [r2, #0]
}
 80178a2:	bf00      	nop
 80178a4:	3714      	adds	r7, #20
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	2400288c 	.word	0x2400288c
 80178b4:	24002878 	.word	0x24002878
 80178b8:	2400286c 	.word	0x2400286c
 80178bc:	24002394 	.word	0x24002394
 80178c0:	24002390 	.word	0x24002390
 80178c4:	24000028 	.word	0x24000028

080178c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d10b      	bne.n	80178f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80178d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178dc:	f383 8811 	msr	BASEPRI, r3
 80178e0:	f3bf 8f6f 	isb	sy
 80178e4:	f3bf 8f4f 	dsb	sy
 80178e8:	60fb      	str	r3, [r7, #12]
}
 80178ea:	bf00      	nop
 80178ec:	bf00      	nop
 80178ee:	e7fd      	b.n	80178ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80178f0:	4b07      	ldr	r3, [pc, #28]	@ (8017910 <vTaskPlaceOnEventList+0x48>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	3318      	adds	r3, #24
 80178f6:	4619      	mov	r1, r3
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f7fe fa28 	bl	8015d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80178fe:	2101      	movs	r1, #1
 8017900:	6838      	ldr	r0, [r7, #0]
 8017902:	f000 fc79 	bl	80181f8 <prvAddCurrentTaskToDelayedList>
}
 8017906:	bf00      	nop
 8017908:	3710      	adds	r7, #16
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	24002390 	.word	0x24002390

08017914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017914:	b580      	push	{r7, lr}
 8017916:	b086      	sub	sp, #24
 8017918:	af00      	add	r7, sp, #0
 801791a:	60f8      	str	r0, [r7, #12]
 801791c:	60b9      	str	r1, [r7, #8]
 801791e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d10b      	bne.n	801793e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8017926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801792a:	f383 8811 	msr	BASEPRI, r3
 801792e:	f3bf 8f6f 	isb	sy
 8017932:	f3bf 8f4f 	dsb	sy
 8017936:	617b      	str	r3, [r7, #20]
}
 8017938:	bf00      	nop
 801793a:	bf00      	nop
 801793c:	e7fd      	b.n	801793a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801793e:	4b0a      	ldr	r3, [pc, #40]	@ (8017968 <vTaskPlaceOnEventListRestricted+0x54>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	3318      	adds	r3, #24
 8017944:	4619      	mov	r1, r3
 8017946:	68f8      	ldr	r0, [r7, #12]
 8017948:	f7fe f9dd 	bl	8015d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d002      	beq.n	8017958 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8017952:	f04f 33ff 	mov.w	r3, #4294967295
 8017956:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017958:	6879      	ldr	r1, [r7, #4]
 801795a:	68b8      	ldr	r0, [r7, #8]
 801795c:	f000 fc4c 	bl	80181f8 <prvAddCurrentTaskToDelayedList>
	}
 8017960:	bf00      	nop
 8017962:	3718      	adds	r7, #24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	24002390 	.word	0x24002390

0801796c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b086      	sub	sp, #24
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	68db      	ldr	r3, [r3, #12]
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801797c:	693b      	ldr	r3, [r7, #16]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d10b      	bne.n	801799a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8017982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	60fb      	str	r3, [r7, #12]
}
 8017994:	bf00      	nop
 8017996:	bf00      	nop
 8017998:	e7fd      	b.n	8017996 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	3318      	adds	r3, #24
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fe fa0e 	bl	8015dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80179a4:	4b1d      	ldr	r3, [pc, #116]	@ (8017a1c <xTaskRemoveFromEventList+0xb0>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d11d      	bne.n	80179e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	3304      	adds	r3, #4
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7fe fa05 	bl	8015dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179ba:	4b19      	ldr	r3, [pc, #100]	@ (8017a20 <xTaskRemoveFromEventList+0xb4>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d903      	bls.n	80179ca <xTaskRemoveFromEventList+0x5e>
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179c6:	4a16      	ldr	r2, [pc, #88]	@ (8017a20 <xTaskRemoveFromEventList+0xb4>)
 80179c8:	6013      	str	r3, [r2, #0]
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179ce:	4613      	mov	r3, r2
 80179d0:	009b      	lsls	r3, r3, #2
 80179d2:	4413      	add	r3, r2
 80179d4:	009b      	lsls	r3, r3, #2
 80179d6:	4a13      	ldr	r2, [pc, #76]	@ (8017a24 <xTaskRemoveFromEventList+0xb8>)
 80179d8:	441a      	add	r2, r3
 80179da:	693b      	ldr	r3, [r7, #16]
 80179dc:	3304      	adds	r3, #4
 80179de:	4619      	mov	r1, r3
 80179e0:	4610      	mov	r0, r2
 80179e2:	f7fe f990 	bl	8015d06 <vListInsertEnd>
 80179e6:	e005      	b.n	80179f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	3318      	adds	r3, #24
 80179ec:	4619      	mov	r1, r3
 80179ee:	480e      	ldr	r0, [pc, #56]	@ (8017a28 <xTaskRemoveFromEventList+0xbc>)
 80179f0:	f7fe f989 	bl	8015d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179f8:	4b0c      	ldr	r3, [pc, #48]	@ (8017a2c <xTaskRemoveFromEventList+0xc0>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d905      	bls.n	8017a0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017a02:	2301      	movs	r3, #1
 8017a04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017a06:	4b0a      	ldr	r3, [pc, #40]	@ (8017a30 <xTaskRemoveFromEventList+0xc4>)
 8017a08:	2201      	movs	r2, #1
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	e001      	b.n	8017a12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017a12:	697b      	ldr	r3, [r7, #20]
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3718      	adds	r7, #24
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}
 8017a1c:	2400288c 	.word	0x2400288c
 8017a20:	2400286c 	.word	0x2400286c
 8017a24:	24002394 	.word	0x24002394
 8017a28:	24002824 	.word	0x24002824
 8017a2c:	24002390 	.word	0x24002390
 8017a30:	24002878 	.word	0x24002878

08017a34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017a3c:	4b06      	ldr	r3, [pc, #24]	@ (8017a58 <vTaskInternalSetTimeOutState+0x24>)
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017a44:	4b05      	ldr	r3, [pc, #20]	@ (8017a5c <vTaskInternalSetTimeOutState+0x28>)
 8017a46:	681a      	ldr	r2, [r3, #0]
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	605a      	str	r2, [r3, #4]
}
 8017a4c:	bf00      	nop
 8017a4e:	370c      	adds	r7, #12
 8017a50:	46bd      	mov	sp, r7
 8017a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a56:	4770      	bx	lr
 8017a58:	2400287c 	.word	0x2400287c
 8017a5c:	24002868 	.word	0x24002868

08017a60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b088      	sub	sp, #32
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d10b      	bne.n	8017a88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8017a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a74:	f383 8811 	msr	BASEPRI, r3
 8017a78:	f3bf 8f6f 	isb	sy
 8017a7c:	f3bf 8f4f 	dsb	sy
 8017a80:	613b      	str	r3, [r7, #16]
}
 8017a82:	bf00      	nop
 8017a84:	bf00      	nop
 8017a86:	e7fd      	b.n	8017a84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d10b      	bne.n	8017aa6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8017a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a92:	f383 8811 	msr	BASEPRI, r3
 8017a96:	f3bf 8f6f 	isb	sy
 8017a9a:	f3bf 8f4f 	dsb	sy
 8017a9e:	60fb      	str	r3, [r7, #12]
}
 8017aa0:	bf00      	nop
 8017aa2:	bf00      	nop
 8017aa4:	e7fd      	b.n	8017aa2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8017aa6:	f001 f887 	bl	8018bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8017b20 <xTaskCheckForTimeOut+0xc0>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	69ba      	ldr	r2, [r7, #24]
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ac2:	d102      	bne.n	8017aca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	61fb      	str	r3, [r7, #28]
 8017ac8:	e023      	b.n	8017b12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681a      	ldr	r2, [r3, #0]
 8017ace:	4b15      	ldr	r3, [pc, #84]	@ (8017b24 <xTaskCheckForTimeOut+0xc4>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d007      	beq.n	8017ae6 <xTaskCheckForTimeOut+0x86>
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	69ba      	ldr	r2, [r7, #24]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d302      	bcc.n	8017ae6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	61fb      	str	r3, [r7, #28]
 8017ae4:	e015      	b.n	8017b12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	697a      	ldr	r2, [r7, #20]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d20b      	bcs.n	8017b08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	681a      	ldr	r2, [r3, #0]
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	1ad2      	subs	r2, r2, r3
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f7ff ff99 	bl	8017a34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017b02:	2300      	movs	r3, #0
 8017b04:	61fb      	str	r3, [r7, #28]
 8017b06:	e004      	b.n	8017b12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017b12:	f001 f883 	bl	8018c1c <vPortExitCritical>

	return xReturn;
 8017b16:	69fb      	ldr	r3, [r7, #28]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3720      	adds	r7, #32
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	24002868 	.word	0x24002868
 8017b24:	2400287c 	.word	0x2400287c

08017b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017b28:	b480      	push	{r7}
 8017b2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017b2c:	4b03      	ldr	r3, [pc, #12]	@ (8017b3c <vTaskMissedYield+0x14>)
 8017b2e:	2201      	movs	r2, #1
 8017b30:	601a      	str	r2, [r3, #0]
}
 8017b32:	bf00      	nop
 8017b34:	46bd      	mov	sp, r7
 8017b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3a:	4770      	bx	lr
 8017b3c:	24002878 	.word	0x24002878

08017b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017b48:	f000 f852 	bl	8017bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017b4c:	4b06      	ldr	r3, [pc, #24]	@ (8017b68 <prvIdleTask+0x28>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b01      	cmp	r3, #1
 8017b52:	d9f9      	bls.n	8017b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017b54:	4b05      	ldr	r3, [pc, #20]	@ (8017b6c <prvIdleTask+0x2c>)
 8017b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017b5a:	601a      	str	r2, [r3, #0]
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017b64:	e7f0      	b.n	8017b48 <prvIdleTask+0x8>
 8017b66:	bf00      	nop
 8017b68:	24002394 	.word	0x24002394
 8017b6c:	e000ed04 	.word	0xe000ed04

08017b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017b76:	2300      	movs	r3, #0
 8017b78:	607b      	str	r3, [r7, #4]
 8017b7a:	e00c      	b.n	8017b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017b7c:	687a      	ldr	r2, [r7, #4]
 8017b7e:	4613      	mov	r3, r2
 8017b80:	009b      	lsls	r3, r3, #2
 8017b82:	4413      	add	r3, r2
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	4a12      	ldr	r2, [pc, #72]	@ (8017bd0 <prvInitialiseTaskLists+0x60>)
 8017b88:	4413      	add	r3, r2
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7fe f88e 	bl	8015cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	3301      	adds	r3, #1
 8017b94:	607b      	str	r3, [r7, #4]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2b37      	cmp	r3, #55	@ 0x37
 8017b9a:	d9ef      	bls.n	8017b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017b9c:	480d      	ldr	r0, [pc, #52]	@ (8017bd4 <prvInitialiseTaskLists+0x64>)
 8017b9e:	f7fe f885 	bl	8015cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017ba2:	480d      	ldr	r0, [pc, #52]	@ (8017bd8 <prvInitialiseTaskLists+0x68>)
 8017ba4:	f7fe f882 	bl	8015cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017ba8:	480c      	ldr	r0, [pc, #48]	@ (8017bdc <prvInitialiseTaskLists+0x6c>)
 8017baa:	f7fe f87f 	bl	8015cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017bae:	480c      	ldr	r0, [pc, #48]	@ (8017be0 <prvInitialiseTaskLists+0x70>)
 8017bb0:	f7fe f87c 	bl	8015cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017bb4:	480b      	ldr	r0, [pc, #44]	@ (8017be4 <prvInitialiseTaskLists+0x74>)
 8017bb6:	f7fe f879 	bl	8015cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017bba:	4b0b      	ldr	r3, [pc, #44]	@ (8017be8 <prvInitialiseTaskLists+0x78>)
 8017bbc:	4a05      	ldr	r2, [pc, #20]	@ (8017bd4 <prvInitialiseTaskLists+0x64>)
 8017bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8017bec <prvInitialiseTaskLists+0x7c>)
 8017bc2:	4a05      	ldr	r2, [pc, #20]	@ (8017bd8 <prvInitialiseTaskLists+0x68>)
 8017bc4:	601a      	str	r2, [r3, #0]
}
 8017bc6:	bf00      	nop
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	24002394 	.word	0x24002394
 8017bd4:	240027f4 	.word	0x240027f4
 8017bd8:	24002808 	.word	0x24002808
 8017bdc:	24002824 	.word	0x24002824
 8017be0:	24002838 	.word	0x24002838
 8017be4:	24002850 	.word	0x24002850
 8017be8:	2400281c 	.word	0x2400281c
 8017bec:	24002820 	.word	0x24002820

08017bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017bf6:	e019      	b.n	8017c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017bf8:	f000 ffde 	bl	8018bb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bfc:	4b10      	ldr	r3, [pc, #64]	@ (8017c40 <prvCheckTasksWaitingTermination+0x50>)
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	68db      	ldr	r3, [r3, #12]
 8017c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	3304      	adds	r3, #4
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7fe f8d9 	bl	8015dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8017c44 <prvCheckTasksWaitingTermination+0x54>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	3b01      	subs	r3, #1
 8017c14:	4a0b      	ldr	r2, [pc, #44]	@ (8017c44 <prvCheckTasksWaitingTermination+0x54>)
 8017c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017c18:	4b0b      	ldr	r3, [pc, #44]	@ (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	3b01      	subs	r3, #1
 8017c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017c22:	f000 fffb 	bl	8018c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f000 f810 	bl	8017c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017c2c:	4b06      	ldr	r3, [pc, #24]	@ (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d1e1      	bne.n	8017bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	24002838 	.word	0x24002838
 8017c44:	24002864 	.word	0x24002864
 8017c48:	2400284c 	.word	0x2400284c

08017c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3354      	adds	r3, #84	@ 0x54
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f001 ff9f 	bl	8019b9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d108      	bne.n	8017c7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f001 f993 	bl	8018f98 <vPortFree>
				vPortFree( pxTCB );
 8017c72:	6878      	ldr	r0, [r7, #4]
 8017c74:	f001 f990 	bl	8018f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017c78:	e019      	b.n	8017cae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d103      	bne.n	8017c8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017c84:	6878      	ldr	r0, [r7, #4]
 8017c86:	f001 f987 	bl	8018f98 <vPortFree>
	}
 8017c8a:	e010      	b.n	8017cae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017c92:	2b02      	cmp	r3, #2
 8017c94:	d00b      	beq.n	8017cae <prvDeleteTCB+0x62>
	__asm volatile
 8017c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	60fb      	str	r3, [r7, #12]
}
 8017ca8:	bf00      	nop
 8017caa:	bf00      	nop
 8017cac:	e7fd      	b.n	8017caa <prvDeleteTCB+0x5e>
	}
 8017cae:	bf00      	nop
 8017cb0:	3710      	adds	r7, #16
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
	...

08017cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8017cf0 <prvResetNextTaskUnblockTime+0x38>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d104      	bne.n	8017cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8017cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8017cca:	f04f 32ff 	mov.w	r2, #4294967295
 8017cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017cd0:	e008      	b.n	8017ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cd2:	4b07      	ldr	r3, [pc, #28]	@ (8017cf0 <prvResetNextTaskUnblockTime+0x38>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	68db      	ldr	r3, [r3, #12]
 8017cd8:	68db      	ldr	r3, [r3, #12]
 8017cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	4a04      	ldr	r2, [pc, #16]	@ (8017cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8017ce2:	6013      	str	r3, [r2, #0]
}
 8017ce4:	bf00      	nop
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr
 8017cf0:	2400281c 	.word	0x2400281c
 8017cf4:	24002884 	.word	0x24002884

08017cf8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017cf8:	b480      	push	{r7}
 8017cfa:	b083      	sub	sp, #12
 8017cfc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017cfe:	4b05      	ldr	r3, [pc, #20]	@ (8017d14 <xTaskGetCurrentTaskHandle+0x1c>)
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017d04:	687b      	ldr	r3, [r7, #4]
	}
 8017d06:	4618      	mov	r0, r3
 8017d08:	370c      	adds	r7, #12
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d10:	4770      	bx	lr
 8017d12:	bf00      	nop
 8017d14:	24002390 	.word	0x24002390

08017d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017d18:	b480      	push	{r7}
 8017d1a:	b083      	sub	sp, #12
 8017d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8017d4c <xTaskGetSchedulerState+0x34>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d102      	bne.n	8017d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017d26:	2301      	movs	r3, #1
 8017d28:	607b      	str	r3, [r7, #4]
 8017d2a:	e008      	b.n	8017d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d2c:	4b08      	ldr	r3, [pc, #32]	@ (8017d50 <xTaskGetSchedulerState+0x38>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d102      	bne.n	8017d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017d34:	2302      	movs	r3, #2
 8017d36:	607b      	str	r3, [r7, #4]
 8017d38:	e001      	b.n	8017d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017d3e:	687b      	ldr	r3, [r7, #4]
	}
 8017d40:	4618      	mov	r0, r3
 8017d42:	370c      	adds	r7, #12
 8017d44:	46bd      	mov	sp, r7
 8017d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4a:	4770      	bx	lr
 8017d4c:	24002870 	.word	0x24002870
 8017d50:	2400288c 	.word	0x2400288c

08017d54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b084      	sub	sp, #16
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017d60:	2300      	movs	r3, #0
 8017d62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d051      	beq.n	8017e0e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8017e18 <xTaskPriorityInherit+0xc4>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d241      	bcs.n	8017dfc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	699b      	ldr	r3, [r3, #24]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	db06      	blt.n	8017d8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d80:	4b25      	ldr	r3, [pc, #148]	@ (8017e18 <xTaskPriorityInherit+0xc4>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	6959      	ldr	r1, [r3, #20]
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d96:	4613      	mov	r3, r2
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	4413      	add	r3, r2
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8017e1c <xTaskPriorityInherit+0xc8>)
 8017da0:	4413      	add	r3, r2
 8017da2:	4299      	cmp	r1, r3
 8017da4:	d122      	bne.n	8017dec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017da6:	68bb      	ldr	r3, [r7, #8]
 8017da8:	3304      	adds	r3, #4
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fe f808 	bl	8015dc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017db0:	4b19      	ldr	r3, [pc, #100]	@ (8017e18 <xTaskPriorityInherit+0xc4>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dbe:	4b18      	ldr	r3, [pc, #96]	@ (8017e20 <xTaskPriorityInherit+0xcc>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d903      	bls.n	8017dce <xTaskPriorityInherit+0x7a>
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dca:	4a15      	ldr	r2, [pc, #84]	@ (8017e20 <xTaskPriorityInherit+0xcc>)
 8017dcc:	6013      	str	r3, [r2, #0]
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4413      	add	r3, r2
 8017dd8:	009b      	lsls	r3, r3, #2
 8017dda:	4a10      	ldr	r2, [pc, #64]	@ (8017e1c <xTaskPriorityInherit+0xc8>)
 8017ddc:	441a      	add	r2, r3
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	3304      	adds	r3, #4
 8017de2:	4619      	mov	r1, r3
 8017de4:	4610      	mov	r0, r2
 8017de6:	f7fd ff8e 	bl	8015d06 <vListInsertEnd>
 8017dea:	e004      	b.n	8017df6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017dec:	4b0a      	ldr	r3, [pc, #40]	@ (8017e18 <xTaskPriorityInherit+0xc4>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017df6:	2301      	movs	r3, #1
 8017df8:	60fb      	str	r3, [r7, #12]
 8017dfa:	e008      	b.n	8017e0e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017e00:	4b05      	ldr	r3, [pc, #20]	@ (8017e18 <xTaskPriorityInherit+0xc4>)
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d201      	bcs.n	8017e0e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
	}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3710      	adds	r7, #16
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}
 8017e18:	24002390 	.word	0x24002390
 8017e1c:	24002394 	.word	0x24002394
 8017e20:	2400286c 	.word	0x2400286c

08017e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b086      	sub	sp, #24
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017e30:	2300      	movs	r3, #0
 8017e32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d058      	beq.n	8017eec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8017ef8 <xTaskPriorityDisinherit+0xd4>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	693a      	ldr	r2, [r7, #16]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d00b      	beq.n	8017e5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8017e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e48:	f383 8811 	msr	BASEPRI, r3
 8017e4c:	f3bf 8f6f 	isb	sy
 8017e50:	f3bf 8f4f 	dsb	sy
 8017e54:	60fb      	str	r3, [r7, #12]
}
 8017e56:	bf00      	nop
 8017e58:	bf00      	nop
 8017e5a:	e7fd      	b.n	8017e58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d10b      	bne.n	8017e7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8017e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e68:	f383 8811 	msr	BASEPRI, r3
 8017e6c:	f3bf 8f6f 	isb	sy
 8017e70:	f3bf 8f4f 	dsb	sy
 8017e74:	60bb      	str	r3, [r7, #8]
}
 8017e76:	bf00      	nop
 8017e78:	bf00      	nop
 8017e7a:	e7fd      	b.n	8017e78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e80:	1e5a      	subs	r2, r3, #1
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d02c      	beq.n	8017eec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d128      	bne.n	8017eec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	3304      	adds	r3, #4
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7fd ff8e 	bl	8015dc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017ea8:	693b      	ldr	r3, [r7, #16]
 8017eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8017efc <xTaskPriorityDisinherit+0xd8>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d903      	bls.n	8017ecc <xTaskPriorityDisinherit+0xa8>
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8017efc <xTaskPriorityDisinherit+0xd8>)
 8017eca:	6013      	str	r3, [r2, #0]
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	4413      	add	r3, r2
 8017ed6:	009b      	lsls	r3, r3, #2
 8017ed8:	4a09      	ldr	r2, [pc, #36]	@ (8017f00 <xTaskPriorityDisinherit+0xdc>)
 8017eda:	441a      	add	r2, r3
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	3304      	adds	r3, #4
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	4610      	mov	r0, r2
 8017ee4:	f7fd ff0f 	bl	8015d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017ee8:	2301      	movs	r3, #1
 8017eea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017eec:	697b      	ldr	r3, [r7, #20]
	}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3718      	adds	r7, #24
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}
 8017ef6:	bf00      	nop
 8017ef8:	24002390 	.word	0x24002390
 8017efc:	2400286c 	.word	0x2400286c
 8017f00:	24002394 	.word	0x24002394

08017f04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b088      	sub	sp, #32
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017f12:	2301      	movs	r3, #1
 8017f14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d06c      	beq.n	8017ff6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017f1c:	69bb      	ldr	r3, [r7, #24]
 8017f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d10b      	bne.n	8017f3c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8017f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f28:	f383 8811 	msr	BASEPRI, r3
 8017f2c:	f3bf 8f6f 	isb	sy
 8017f30:	f3bf 8f4f 	dsb	sy
 8017f34:	60fb      	str	r3, [r7, #12]
}
 8017f36:	bf00      	nop
 8017f38:	bf00      	nop
 8017f3a:	e7fd      	b.n	8017f38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017f3c:	69bb      	ldr	r3, [r7, #24]
 8017f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f40:	683a      	ldr	r2, [r7, #0]
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d902      	bls.n	8017f4c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	61fb      	str	r3, [r7, #28]
 8017f4a:	e002      	b.n	8017f52 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017f4c:	69bb      	ldr	r3, [r7, #24]
 8017f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f56:	69fa      	ldr	r2, [r7, #28]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d04c      	beq.n	8017ff6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d147      	bne.n	8017ff6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017f66:	4b26      	ldr	r3, [pc, #152]	@ (8018000 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	69ba      	ldr	r2, [r7, #24]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d10b      	bne.n	8017f88 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8017f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f74:	f383 8811 	msr	BASEPRI, r3
 8017f78:	f3bf 8f6f 	isb	sy
 8017f7c:	f3bf 8f4f 	dsb	sy
 8017f80:	60bb      	str	r3, [r7, #8]
}
 8017f82:	bf00      	nop
 8017f84:	bf00      	nop
 8017f86:	e7fd      	b.n	8017f84 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017f88:	69bb      	ldr	r3, [r7, #24]
 8017f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	69fa      	ldr	r2, [r7, #28]
 8017f92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017f94:	69bb      	ldr	r3, [r7, #24]
 8017f96:	699b      	ldr	r3, [r3, #24]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	db04      	blt.n	8017fa6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017fa6:	69bb      	ldr	r3, [r7, #24]
 8017fa8:	6959      	ldr	r1, [r3, #20]
 8017faa:	693a      	ldr	r2, [r7, #16]
 8017fac:	4613      	mov	r3, r2
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	4413      	add	r3, r2
 8017fb2:	009b      	lsls	r3, r3, #2
 8017fb4:	4a13      	ldr	r2, [pc, #76]	@ (8018004 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017fb6:	4413      	add	r3, r2
 8017fb8:	4299      	cmp	r1, r3
 8017fba:	d11c      	bne.n	8017ff6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	3304      	adds	r3, #4
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7fd fefd 	bl	8015dc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017fc6:	69bb      	ldr	r3, [r7, #24]
 8017fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fca:	4b0f      	ldr	r3, [pc, #60]	@ (8018008 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d903      	bls.n	8017fda <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8017fd2:	69bb      	ldr	r3, [r7, #24]
 8017fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8018008 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017fd8:	6013      	str	r3, [r2, #0]
 8017fda:	69bb      	ldr	r3, [r7, #24]
 8017fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fde:	4613      	mov	r3, r2
 8017fe0:	009b      	lsls	r3, r3, #2
 8017fe2:	4413      	add	r3, r2
 8017fe4:	009b      	lsls	r3, r3, #2
 8017fe6:	4a07      	ldr	r2, [pc, #28]	@ (8018004 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017fe8:	441a      	add	r2, r3
 8017fea:	69bb      	ldr	r3, [r7, #24]
 8017fec:	3304      	adds	r3, #4
 8017fee:	4619      	mov	r1, r3
 8017ff0:	4610      	mov	r0, r2
 8017ff2:	f7fd fe88 	bl	8015d06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017ff6:	bf00      	nop
 8017ff8:	3720      	adds	r7, #32
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
 8017ffe:	bf00      	nop
 8018000:	24002390 	.word	0x24002390
 8018004:	24002394 	.word	0x24002394
 8018008:	2400286c 	.word	0x2400286c

0801800c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801800c:	b480      	push	{r7}
 801800e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018010:	4b07      	ldr	r3, [pc, #28]	@ (8018030 <pvTaskIncrementMutexHeldCount+0x24>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d004      	beq.n	8018022 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018018:	4b05      	ldr	r3, [pc, #20]	@ (8018030 <pvTaskIncrementMutexHeldCount+0x24>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801801e:	3201      	adds	r2, #1
 8018020:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8018022:	4b03      	ldr	r3, [pc, #12]	@ (8018030 <pvTaskIncrementMutexHeldCount+0x24>)
 8018024:	681b      	ldr	r3, [r3, #0]
	}
 8018026:	4618      	mov	r0, r3
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr
 8018030:	24002390 	.word	0x24002390

08018034 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8018034:	b580      	push	{r7, lr}
 8018036:	b084      	sub	sp, #16
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801803e:	f000 fdbb 	bl	8018bb8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8018042:	4b20      	ldr	r3, [pc, #128]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801804a:	2b00      	cmp	r3, #0
 801804c:	d113      	bne.n	8018076 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801804e:	4b1d      	ldr	r3, [pc, #116]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	2201      	movs	r2, #1
 8018054:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d00b      	beq.n	8018076 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801805e:	2101      	movs	r1, #1
 8018060:	6838      	ldr	r0, [r7, #0]
 8018062:	f000 f8c9 	bl	80181f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8018066:	4b18      	ldr	r3, [pc, #96]	@ (80180c8 <ulTaskNotifyTake+0x94>)
 8018068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801806c:	601a      	str	r2, [r3, #0]
 801806e:	f3bf 8f4f 	dsb	sy
 8018072:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018076:	f000 fdd1 	bl	8018c1c <vPortExitCritical>

		taskENTER_CRITICAL();
 801807a:	f000 fd9d 	bl	8018bb8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801807e:	4b11      	ldr	r3, [pc, #68]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018086:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d00e      	beq.n	80180ac <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d005      	beq.n	80180a0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8018094:	4b0b      	ldr	r3, [pc, #44]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2200      	movs	r2, #0
 801809a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801809e:	e005      	b.n	80180ac <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80180a0:	4b08      	ldr	r3, [pc, #32]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	68fa      	ldr	r2, [r7, #12]
 80180a6:	3a01      	subs	r2, #1
 80180a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80180ac:	4b05      	ldr	r3, [pc, #20]	@ (80180c4 <ulTaskNotifyTake+0x90>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2200      	movs	r2, #0
 80180b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80180b6:	f000 fdb1 	bl	8018c1c <vPortExitCritical>

		return ulReturn;
 80180ba:	68fb      	ldr	r3, [r7, #12]
	}
 80180bc:	4618      	mov	r0, r3
 80180be:	3710      	adds	r7, #16
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	24002390 	.word	0x24002390
 80180c8:	e000ed04 	.word	0xe000ed04

080180cc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b08a      	sub	sp, #40	@ 0x28
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d10b      	bne.n	80180f4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80180dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180e0:	f383 8811 	msr	BASEPRI, r3
 80180e4:	f3bf 8f6f 	isb	sy
 80180e8:	f3bf 8f4f 	dsb	sy
 80180ec:	61bb      	str	r3, [r7, #24]
}
 80180ee:	bf00      	nop
 80180f0:	bf00      	nop
 80180f2:	e7fd      	b.n	80180f0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80180f4:	f000 fe40 	bl	8018d78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80180fc:	f3ef 8211 	mrs	r2, BASEPRI
 8018100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018104:	f383 8811 	msr	BASEPRI, r3
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	f3bf 8f4f 	dsb	sy
 8018110:	617a      	str	r2, [r7, #20]
 8018112:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018114:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018116:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801811a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801811e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018122:	2202      	movs	r2, #2
 8018124:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8018128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801812a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801812e:	1c5a      	adds	r2, r3, #1
 8018130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018132:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018136:	7ffb      	ldrb	r3, [r7, #31]
 8018138:	2b01      	cmp	r3, #1
 801813a:	d147      	bne.n	80181cc <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018140:	2b00      	cmp	r3, #0
 8018142:	d00b      	beq.n	801815c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8018144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018148:	f383 8811 	msr	BASEPRI, r3
 801814c:	f3bf 8f6f 	isb	sy
 8018150:	f3bf 8f4f 	dsb	sy
 8018154:	60fb      	str	r3, [r7, #12]
}
 8018156:	bf00      	nop
 8018158:	bf00      	nop
 801815a:	e7fd      	b.n	8018158 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801815c:	4b20      	ldr	r3, [pc, #128]	@ (80181e0 <vTaskNotifyGiveFromISR+0x114>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d11d      	bne.n	80181a0 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018166:	3304      	adds	r3, #4
 8018168:	4618      	mov	r0, r3
 801816a:	f7fd fe29 	bl	8015dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018172:	4b1c      	ldr	r3, [pc, #112]	@ (80181e4 <vTaskNotifyGiveFromISR+0x118>)
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	429a      	cmp	r2, r3
 8018178:	d903      	bls.n	8018182 <vTaskNotifyGiveFromISR+0xb6>
 801817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801817e:	4a19      	ldr	r2, [pc, #100]	@ (80181e4 <vTaskNotifyGiveFromISR+0x118>)
 8018180:	6013      	str	r3, [r2, #0]
 8018182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018186:	4613      	mov	r3, r2
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	4413      	add	r3, r2
 801818c:	009b      	lsls	r3, r3, #2
 801818e:	4a16      	ldr	r2, [pc, #88]	@ (80181e8 <vTaskNotifyGiveFromISR+0x11c>)
 8018190:	441a      	add	r2, r3
 8018192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018194:	3304      	adds	r3, #4
 8018196:	4619      	mov	r1, r3
 8018198:	4610      	mov	r0, r2
 801819a:	f7fd fdb4 	bl	8015d06 <vListInsertEnd>
 801819e:	e005      	b.n	80181ac <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80181a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a2:	3318      	adds	r3, #24
 80181a4:	4619      	mov	r1, r3
 80181a6:	4811      	ldr	r0, [pc, #68]	@ (80181ec <vTaskNotifyGiveFromISR+0x120>)
 80181a8:	f7fd fdad 	bl	8015d06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80181ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80181b0:	4b0f      	ldr	r3, [pc, #60]	@ (80181f0 <vTaskNotifyGiveFromISR+0x124>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d908      	bls.n	80181cc <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d002      	beq.n	80181c6 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	2201      	movs	r2, #1
 80181c4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80181c6:	4b0b      	ldr	r3, [pc, #44]	@ (80181f4 <vTaskNotifyGiveFromISR+0x128>)
 80181c8:	2201      	movs	r2, #1
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	6a3b      	ldr	r3, [r7, #32]
 80181ce:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f383 8811 	msr	BASEPRI, r3
}
 80181d6:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80181d8:	bf00      	nop
 80181da:	3728      	adds	r7, #40	@ 0x28
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	2400288c 	.word	0x2400288c
 80181e4:	2400286c 	.word	0x2400286c
 80181e8:	24002394 	.word	0x24002394
 80181ec:	24002824 	.word	0x24002824
 80181f0:	24002390 	.word	0x24002390
 80181f4:	24002878 	.word	0x24002878

080181f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b084      	sub	sp, #16
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018202:	4b21      	ldr	r3, [pc, #132]	@ (8018288 <prvAddCurrentTaskToDelayedList+0x90>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018208:	4b20      	ldr	r3, [pc, #128]	@ (801828c <prvAddCurrentTaskToDelayedList+0x94>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	3304      	adds	r3, #4
 801820e:	4618      	mov	r0, r3
 8018210:	f7fd fdd6 	bl	8015dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801821a:	d10a      	bne.n	8018232 <prvAddCurrentTaskToDelayedList+0x3a>
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d007      	beq.n	8018232 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018222:	4b1a      	ldr	r3, [pc, #104]	@ (801828c <prvAddCurrentTaskToDelayedList+0x94>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	3304      	adds	r3, #4
 8018228:	4619      	mov	r1, r3
 801822a:	4819      	ldr	r0, [pc, #100]	@ (8018290 <prvAddCurrentTaskToDelayedList+0x98>)
 801822c:	f7fd fd6b 	bl	8015d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018230:	e026      	b.n	8018280 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018232:	68fa      	ldr	r2, [r7, #12]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	4413      	add	r3, r2
 8018238:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801823a:	4b14      	ldr	r3, [pc, #80]	@ (801828c <prvAddCurrentTaskToDelayedList+0x94>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	68ba      	ldr	r2, [r7, #8]
 8018240:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018242:	68ba      	ldr	r2, [r7, #8]
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	429a      	cmp	r2, r3
 8018248:	d209      	bcs.n	801825e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801824a:	4b12      	ldr	r3, [pc, #72]	@ (8018294 <prvAddCurrentTaskToDelayedList+0x9c>)
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	4b0f      	ldr	r3, [pc, #60]	@ (801828c <prvAddCurrentTaskToDelayedList+0x94>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	3304      	adds	r3, #4
 8018254:	4619      	mov	r1, r3
 8018256:	4610      	mov	r0, r2
 8018258:	f7fd fd79 	bl	8015d4e <vListInsert>
}
 801825c:	e010      	b.n	8018280 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801825e:	4b0e      	ldr	r3, [pc, #56]	@ (8018298 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018260:	681a      	ldr	r2, [r3, #0]
 8018262:	4b0a      	ldr	r3, [pc, #40]	@ (801828c <prvAddCurrentTaskToDelayedList+0x94>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	3304      	adds	r3, #4
 8018268:	4619      	mov	r1, r3
 801826a:	4610      	mov	r0, r2
 801826c:	f7fd fd6f 	bl	8015d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018270:	4b0a      	ldr	r3, [pc, #40]	@ (801829c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	68ba      	ldr	r2, [r7, #8]
 8018276:	429a      	cmp	r2, r3
 8018278:	d202      	bcs.n	8018280 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801827a:	4a08      	ldr	r2, [pc, #32]	@ (801829c <prvAddCurrentTaskToDelayedList+0xa4>)
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	6013      	str	r3, [r2, #0]
}
 8018280:	bf00      	nop
 8018282:	3710      	adds	r7, #16
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	24002868 	.word	0x24002868
 801828c:	24002390 	.word	0x24002390
 8018290:	24002850 	.word	0x24002850
 8018294:	24002820 	.word	0x24002820
 8018298:	2400281c 	.word	0x2400281c
 801829c:	24002884 	.word	0x24002884

080182a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b08a      	sub	sp, #40	@ 0x28
 80182a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80182a6:	2300      	movs	r3, #0
 80182a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80182aa:	f000 fb13 	bl	80188d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80182ae:	4b1d      	ldr	r3, [pc, #116]	@ (8018324 <xTimerCreateTimerTask+0x84>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d021      	beq.n	80182fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80182b6:	2300      	movs	r3, #0
 80182b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80182ba:	2300      	movs	r3, #0
 80182bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80182be:	1d3a      	adds	r2, r7, #4
 80182c0:	f107 0108 	add.w	r1, r7, #8
 80182c4:	f107 030c 	add.w	r3, r7, #12
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7fd fcd5 	bl	8015c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80182ce:	6879      	ldr	r1, [r7, #4]
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	68fa      	ldr	r2, [r7, #12]
 80182d4:	9202      	str	r2, [sp, #8]
 80182d6:	9301      	str	r3, [sp, #4]
 80182d8:	2302      	movs	r3, #2
 80182da:	9300      	str	r3, [sp, #0]
 80182dc:	2300      	movs	r3, #0
 80182de:	460a      	mov	r2, r1
 80182e0:	4911      	ldr	r1, [pc, #68]	@ (8018328 <xTimerCreateTimerTask+0x88>)
 80182e2:	4812      	ldr	r0, [pc, #72]	@ (801832c <xTimerCreateTimerTask+0x8c>)
 80182e4:	f7fe fdc2 	bl	8016e6c <xTaskCreateStatic>
 80182e8:	4603      	mov	r3, r0
 80182ea:	4a11      	ldr	r2, [pc, #68]	@ (8018330 <xTimerCreateTimerTask+0x90>)
 80182ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80182ee:	4b10      	ldr	r3, [pc, #64]	@ (8018330 <xTimerCreateTimerTask+0x90>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d001      	beq.n	80182fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80182f6:	2301      	movs	r3, #1
 80182f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d10b      	bne.n	8018318 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8018300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018304:	f383 8811 	msr	BASEPRI, r3
 8018308:	f3bf 8f6f 	isb	sy
 801830c:	f3bf 8f4f 	dsb	sy
 8018310:	613b      	str	r3, [r7, #16]
}
 8018312:	bf00      	nop
 8018314:	bf00      	nop
 8018316:	e7fd      	b.n	8018314 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018318:	697b      	ldr	r3, [r7, #20]
}
 801831a:	4618      	mov	r0, r3
 801831c:	3718      	adds	r7, #24
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}
 8018322:	bf00      	nop
 8018324:	240028c0 	.word	0x240028c0
 8018328:	0801aa9c 	.word	0x0801aa9c
 801832c:	0801846d 	.word	0x0801846d
 8018330:	240028c4 	.word	0x240028c4

08018334 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b08a      	sub	sp, #40	@ 0x28
 8018338:	af00      	add	r7, sp, #0
 801833a:	60f8      	str	r0, [r7, #12]
 801833c:	60b9      	str	r1, [r7, #8]
 801833e:	607a      	str	r2, [r7, #4]
 8018340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018342:	2300      	movs	r3, #0
 8018344:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d10b      	bne.n	8018364 <xTimerGenericCommand+0x30>
	__asm volatile
 801834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018350:	f383 8811 	msr	BASEPRI, r3
 8018354:	f3bf 8f6f 	isb	sy
 8018358:	f3bf 8f4f 	dsb	sy
 801835c:	623b      	str	r3, [r7, #32]
}
 801835e:	bf00      	nop
 8018360:	bf00      	nop
 8018362:	e7fd      	b.n	8018360 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018364:	4b19      	ldr	r3, [pc, #100]	@ (80183cc <xTimerGenericCommand+0x98>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d02a      	beq.n	80183c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	2b05      	cmp	r3, #5
 801837c:	dc18      	bgt.n	80183b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801837e:	f7ff fccb 	bl	8017d18 <xTaskGetSchedulerState>
 8018382:	4603      	mov	r3, r0
 8018384:	2b02      	cmp	r3, #2
 8018386:	d109      	bne.n	801839c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018388:	4b10      	ldr	r3, [pc, #64]	@ (80183cc <xTimerGenericCommand+0x98>)
 801838a:	6818      	ldr	r0, [r3, #0]
 801838c:	f107 0110 	add.w	r1, r7, #16
 8018390:	2300      	movs	r3, #0
 8018392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018394:	f7fd fef2 	bl	801617c <xQueueGenericSend>
 8018398:	6278      	str	r0, [r7, #36]	@ 0x24
 801839a:	e012      	b.n	80183c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801839c:	4b0b      	ldr	r3, [pc, #44]	@ (80183cc <xTimerGenericCommand+0x98>)
 801839e:	6818      	ldr	r0, [r3, #0]
 80183a0:	f107 0110 	add.w	r1, r7, #16
 80183a4:	2300      	movs	r3, #0
 80183a6:	2200      	movs	r2, #0
 80183a8:	f7fd fee8 	bl	801617c <xQueueGenericSend>
 80183ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80183ae:	e008      	b.n	80183c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80183b0:	4b06      	ldr	r3, [pc, #24]	@ (80183cc <xTimerGenericCommand+0x98>)
 80183b2:	6818      	ldr	r0, [r3, #0]
 80183b4:	f107 0110 	add.w	r1, r7, #16
 80183b8:	2300      	movs	r3, #0
 80183ba:	683a      	ldr	r2, [r7, #0]
 80183bc:	f7fd ffe0 	bl	8016380 <xQueueGenericSendFromISR>
 80183c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80183c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3728      	adds	r7, #40	@ 0x28
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}
 80183cc:	240028c0 	.word	0x240028c0

080183d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b088      	sub	sp, #32
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183da:	4b23      	ldr	r3, [pc, #140]	@ (8018468 <prvProcessExpiredTimer+0x98>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	68db      	ldr	r3, [r3, #12]
 80183e0:	68db      	ldr	r3, [r3, #12]
 80183e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	3304      	adds	r3, #4
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7fd fce9 	bl	8015dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80183ee:	697b      	ldr	r3, [r7, #20]
 80183f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80183f4:	f003 0304 	and.w	r3, r3, #4
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d023      	beq.n	8018444 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80183fc:	697b      	ldr	r3, [r7, #20]
 80183fe:	699a      	ldr	r2, [r3, #24]
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	18d1      	adds	r1, r2, r3
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	683a      	ldr	r2, [r7, #0]
 8018408:	6978      	ldr	r0, [r7, #20]
 801840a:	f000 f8d5 	bl	80185b8 <prvInsertTimerInActiveList>
 801840e:	4603      	mov	r3, r0
 8018410:	2b00      	cmp	r3, #0
 8018412:	d020      	beq.n	8018456 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018414:	2300      	movs	r3, #0
 8018416:	9300      	str	r3, [sp, #0]
 8018418:	2300      	movs	r3, #0
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	2100      	movs	r1, #0
 801841e:	6978      	ldr	r0, [r7, #20]
 8018420:	f7ff ff88 	bl	8018334 <xTimerGenericCommand>
 8018424:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018426:	693b      	ldr	r3, [r7, #16]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d114      	bne.n	8018456 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018430:	f383 8811 	msr	BASEPRI, r3
 8018434:	f3bf 8f6f 	isb	sy
 8018438:	f3bf 8f4f 	dsb	sy
 801843c:	60fb      	str	r3, [r7, #12]
}
 801843e:	bf00      	nop
 8018440:	bf00      	nop
 8018442:	e7fd      	b.n	8018440 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018444:	697b      	ldr	r3, [r7, #20]
 8018446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801844a:	f023 0301 	bic.w	r3, r3, #1
 801844e:	b2da      	uxtb	r2, r3
 8018450:	697b      	ldr	r3, [r7, #20]
 8018452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	6a1b      	ldr	r3, [r3, #32]
 801845a:	6978      	ldr	r0, [r7, #20]
 801845c:	4798      	blx	r3
}
 801845e:	bf00      	nop
 8018460:	3718      	adds	r7, #24
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
 8018466:	bf00      	nop
 8018468:	240028b8 	.word	0x240028b8

0801846c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018474:	f107 0308 	add.w	r3, r7, #8
 8018478:	4618      	mov	r0, r3
 801847a:	f000 f859 	bl	8018530 <prvGetNextExpireTime>
 801847e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	4619      	mov	r1, r3
 8018484:	68f8      	ldr	r0, [r7, #12]
 8018486:	f000 f805 	bl	8018494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801848a:	f000 f8d7 	bl	801863c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801848e:	bf00      	nop
 8018490:	e7f0      	b.n	8018474 <prvTimerTask+0x8>
	...

08018494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b084      	sub	sp, #16
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801849e:	f7ff f825 	bl	80174ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80184a2:	f107 0308 	add.w	r3, r7, #8
 80184a6:	4618      	mov	r0, r3
 80184a8:	f000 f866 	bl	8018578 <prvSampleTimeNow>
 80184ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d130      	bne.n	8018516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d10a      	bne.n	80184d0 <prvProcessTimerOrBlockTask+0x3c>
 80184ba:	687a      	ldr	r2, [r7, #4]
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	429a      	cmp	r2, r3
 80184c0:	d806      	bhi.n	80184d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80184c2:	f7ff f821 	bl	8017508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80184c6:	68f9      	ldr	r1, [r7, #12]
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7ff ff81 	bl	80183d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80184ce:	e024      	b.n	801851a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d008      	beq.n	80184e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80184d6:	4b13      	ldr	r3, [pc, #76]	@ (8018524 <prvProcessTimerOrBlockTask+0x90>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d101      	bne.n	80184e4 <prvProcessTimerOrBlockTask+0x50>
 80184e0:	2301      	movs	r3, #1
 80184e2:	e000      	b.n	80184e6 <prvProcessTimerOrBlockTask+0x52>
 80184e4:	2300      	movs	r3, #0
 80184e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80184e8:	4b0f      	ldr	r3, [pc, #60]	@ (8018528 <prvProcessTimerOrBlockTask+0x94>)
 80184ea:	6818      	ldr	r0, [r3, #0]
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	683a      	ldr	r2, [r7, #0]
 80184f4:	4619      	mov	r1, r3
 80184f6:	f7fe fc85 	bl	8016e04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80184fa:	f7ff f805 	bl	8017508 <xTaskResumeAll>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d10a      	bne.n	801851a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018504:	4b09      	ldr	r3, [pc, #36]	@ (801852c <prvProcessTimerOrBlockTask+0x98>)
 8018506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801850a:	601a      	str	r2, [r3, #0]
 801850c:	f3bf 8f4f 	dsb	sy
 8018510:	f3bf 8f6f 	isb	sy
}
 8018514:	e001      	b.n	801851a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018516:	f7fe fff7 	bl	8017508 <xTaskResumeAll>
}
 801851a:	bf00      	nop
 801851c:	3710      	adds	r7, #16
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	240028bc 	.word	0x240028bc
 8018528:	240028c0 	.word	0x240028c0
 801852c:	e000ed04 	.word	0xe000ed04

08018530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018530:	b480      	push	{r7}
 8018532:	b085      	sub	sp, #20
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018538:	4b0e      	ldr	r3, [pc, #56]	@ (8018574 <prvGetNextExpireTime+0x44>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d101      	bne.n	8018546 <prvGetNextExpireTime+0x16>
 8018542:	2201      	movs	r2, #1
 8018544:	e000      	b.n	8018548 <prvGetNextExpireTime+0x18>
 8018546:	2200      	movs	r2, #0
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d105      	bne.n	8018560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018554:	4b07      	ldr	r3, [pc, #28]	@ (8018574 <prvGetNextExpireTime+0x44>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	60fb      	str	r3, [r7, #12]
 801855e:	e001      	b.n	8018564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018560:	2300      	movs	r3, #0
 8018562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018564:	68fb      	ldr	r3, [r7, #12]
}
 8018566:	4618      	mov	r0, r3
 8018568:	3714      	adds	r7, #20
 801856a:	46bd      	mov	sp, r7
 801856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018570:	4770      	bx	lr
 8018572:	bf00      	nop
 8018574:	240028b8 	.word	0x240028b8

08018578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b084      	sub	sp, #16
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018580:	f7ff f860 	bl	8017644 <xTaskGetTickCount>
 8018584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018586:	4b0b      	ldr	r3, [pc, #44]	@ (80185b4 <prvSampleTimeNow+0x3c>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	68fa      	ldr	r2, [r7, #12]
 801858c:	429a      	cmp	r2, r3
 801858e:	d205      	bcs.n	801859c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018590:	f000 f93a 	bl	8018808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	2201      	movs	r2, #1
 8018598:	601a      	str	r2, [r3, #0]
 801859a:	e002      	b.n	80185a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2200      	movs	r2, #0
 80185a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80185a2:	4a04      	ldr	r2, [pc, #16]	@ (80185b4 <prvSampleTimeNow+0x3c>)
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80185a8:	68fb      	ldr	r3, [r7, #12]
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3710      	adds	r7, #16
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	240028c8 	.word	0x240028c8

080185b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b086      	sub	sp, #24
 80185bc:	af00      	add	r7, sp, #0
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
 80185c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80185c6:	2300      	movs	r3, #0
 80185c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	68ba      	ldr	r2, [r7, #8]
 80185ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	68fa      	ldr	r2, [r7, #12]
 80185d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80185d6:	68ba      	ldr	r2, [r7, #8]
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d812      	bhi.n	8018604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185de:	687a      	ldr	r2, [r7, #4]
 80185e0:	683b      	ldr	r3, [r7, #0]
 80185e2:	1ad2      	subs	r2, r2, r3
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	699b      	ldr	r3, [r3, #24]
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d302      	bcc.n	80185f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80185ec:	2301      	movs	r3, #1
 80185ee:	617b      	str	r3, [r7, #20]
 80185f0:	e01b      	b.n	801862a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80185f2:	4b10      	ldr	r3, [pc, #64]	@ (8018634 <prvInsertTimerInActiveList+0x7c>)
 80185f4:	681a      	ldr	r2, [r3, #0]
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	3304      	adds	r3, #4
 80185fa:	4619      	mov	r1, r3
 80185fc:	4610      	mov	r0, r2
 80185fe:	f7fd fba6 	bl	8015d4e <vListInsert>
 8018602:	e012      	b.n	801862a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018604:	687a      	ldr	r2, [r7, #4]
 8018606:	683b      	ldr	r3, [r7, #0]
 8018608:	429a      	cmp	r2, r3
 801860a:	d206      	bcs.n	801861a <prvInsertTimerInActiveList+0x62>
 801860c:	68ba      	ldr	r2, [r7, #8]
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	429a      	cmp	r2, r3
 8018612:	d302      	bcc.n	801861a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018614:	2301      	movs	r3, #1
 8018616:	617b      	str	r3, [r7, #20]
 8018618:	e007      	b.n	801862a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801861a:	4b07      	ldr	r3, [pc, #28]	@ (8018638 <prvInsertTimerInActiveList+0x80>)
 801861c:	681a      	ldr	r2, [r3, #0]
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	3304      	adds	r3, #4
 8018622:	4619      	mov	r1, r3
 8018624:	4610      	mov	r0, r2
 8018626:	f7fd fb92 	bl	8015d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801862a:	697b      	ldr	r3, [r7, #20]
}
 801862c:	4618      	mov	r0, r3
 801862e:	3718      	adds	r7, #24
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	240028bc 	.word	0x240028bc
 8018638:	240028b8 	.word	0x240028b8

0801863c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b08e      	sub	sp, #56	@ 0x38
 8018640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018642:	e0ce      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2b00      	cmp	r3, #0
 8018648:	da19      	bge.n	801867e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801864a:	1d3b      	adds	r3, r7, #4
 801864c:	3304      	adds	r3, #4
 801864e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018652:	2b00      	cmp	r3, #0
 8018654:	d10b      	bne.n	801866e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8018656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801865a:	f383 8811 	msr	BASEPRI, r3
 801865e:	f3bf 8f6f 	isb	sy
 8018662:	f3bf 8f4f 	dsb	sy
 8018666:	61fb      	str	r3, [r7, #28]
}
 8018668:	bf00      	nop
 801866a:	bf00      	nop
 801866c:	e7fd      	b.n	801866a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801866e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018674:	6850      	ldr	r0, [r2, #4]
 8018676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018678:	6892      	ldr	r2, [r2, #8]
 801867a:	4611      	mov	r1, r2
 801867c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2b00      	cmp	r3, #0
 8018682:	f2c0 80ae 	blt.w	80187e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801868c:	695b      	ldr	r3, [r3, #20]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d004      	beq.n	801869c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018694:	3304      	adds	r3, #4
 8018696:	4618      	mov	r0, r3
 8018698:	f7fd fb92 	bl	8015dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801869c:	463b      	mov	r3, r7
 801869e:	4618      	mov	r0, r3
 80186a0:	f7ff ff6a 	bl	8018578 <prvSampleTimeNow>
 80186a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2b09      	cmp	r3, #9
 80186aa:	f200 8097 	bhi.w	80187dc <prvProcessReceivedCommands+0x1a0>
 80186ae:	a201      	add	r2, pc, #4	@ (adr r2, 80186b4 <prvProcessReceivedCommands+0x78>)
 80186b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b4:	080186dd 	.word	0x080186dd
 80186b8:	080186dd 	.word	0x080186dd
 80186bc:	080186dd 	.word	0x080186dd
 80186c0:	08018753 	.word	0x08018753
 80186c4:	08018767 	.word	0x08018767
 80186c8:	080187b3 	.word	0x080187b3
 80186cc:	080186dd 	.word	0x080186dd
 80186d0:	080186dd 	.word	0x080186dd
 80186d4:	08018753 	.word	0x08018753
 80186d8:	08018767 	.word	0x08018767
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80186dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80186e2:	f043 0301 	orr.w	r3, r3, #1
 80186e6:	b2da      	uxtb	r2, r3
 80186e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80186ee:	68ba      	ldr	r2, [r7, #8]
 80186f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186f2:	699b      	ldr	r3, [r3, #24]
 80186f4:	18d1      	adds	r1, r2, r3
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80186fc:	f7ff ff5c 	bl	80185b8 <prvInsertTimerInActiveList>
 8018700:	4603      	mov	r3, r0
 8018702:	2b00      	cmp	r3, #0
 8018704:	d06c      	beq.n	80187e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018708:	6a1b      	ldr	r3, [r3, #32]
 801870a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801870c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018714:	f003 0304 	and.w	r3, r3, #4
 8018718:	2b00      	cmp	r3, #0
 801871a:	d061      	beq.n	80187e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801871c:	68ba      	ldr	r2, [r7, #8]
 801871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018720:	699b      	ldr	r3, [r3, #24]
 8018722:	441a      	add	r2, r3
 8018724:	2300      	movs	r3, #0
 8018726:	9300      	str	r3, [sp, #0]
 8018728:	2300      	movs	r3, #0
 801872a:	2100      	movs	r1, #0
 801872c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801872e:	f7ff fe01 	bl	8018334 <xTimerGenericCommand>
 8018732:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018734:	6a3b      	ldr	r3, [r7, #32]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d152      	bne.n	80187e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801873e:	f383 8811 	msr	BASEPRI, r3
 8018742:	f3bf 8f6f 	isb	sy
 8018746:	f3bf 8f4f 	dsb	sy
 801874a:	61bb      	str	r3, [r7, #24]
}
 801874c:	bf00      	nop
 801874e:	bf00      	nop
 8018750:	e7fd      	b.n	801874e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018758:	f023 0301 	bic.w	r3, r3, #1
 801875c:	b2da      	uxtb	r2, r3
 801875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018760:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018764:	e03d      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801876c:	f043 0301 	orr.w	r3, r3, #1
 8018770:	b2da      	uxtb	r2, r3
 8018772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018774:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018778:	68ba      	ldr	r2, [r7, #8]
 801877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801877c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018780:	699b      	ldr	r3, [r3, #24]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d10b      	bne.n	801879e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8018786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801878a:	f383 8811 	msr	BASEPRI, r3
 801878e:	f3bf 8f6f 	isb	sy
 8018792:	f3bf 8f4f 	dsb	sy
 8018796:	617b      	str	r3, [r7, #20]
}
 8018798:	bf00      	nop
 801879a:	bf00      	nop
 801879c:	e7fd      	b.n	801879a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801879e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187a0:	699a      	ldr	r2, [r3, #24]
 80187a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a4:	18d1      	adds	r1, r2, r3
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187ac:	f7ff ff04 	bl	80185b8 <prvInsertTimerInActiveList>
					break;
 80187b0:	e017      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80187b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80187b8:	f003 0302 	and.w	r3, r3, #2
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d103      	bne.n	80187c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80187c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187c2:	f000 fbe9 	bl	8018f98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80187c6:	e00c      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80187c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80187ce:	f023 0301 	bic.w	r3, r3, #1
 80187d2:	b2da      	uxtb	r2, r3
 80187d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80187da:	e002      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80187dc:	bf00      	nop
 80187de:	e000      	b.n	80187e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80187e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80187e2:	4b08      	ldr	r3, [pc, #32]	@ (8018804 <prvProcessReceivedCommands+0x1c8>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	1d39      	adds	r1, r7, #4
 80187e8:	2200      	movs	r2, #0
 80187ea:	4618      	mov	r0, r3
 80187ec:	f7fd fef6 	bl	80165dc <xQueueReceive>
 80187f0:	4603      	mov	r3, r0
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f47f af26 	bne.w	8018644 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80187f8:	bf00      	nop
 80187fa:	bf00      	nop
 80187fc:	3730      	adds	r7, #48	@ 0x30
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	240028c0 	.word	0x240028c0

08018808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b088      	sub	sp, #32
 801880c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801880e:	e049      	b.n	80188a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018810:	4b2e      	ldr	r3, [pc, #184]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	68db      	ldr	r3, [r3, #12]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801881a:	4b2c      	ldr	r3, [pc, #176]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	68db      	ldr	r3, [r3, #12]
 8018822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	3304      	adds	r3, #4
 8018828:	4618      	mov	r0, r3
 801882a:	f7fd fac9 	bl	8015dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	6a1b      	ldr	r3, [r3, #32]
 8018832:	68f8      	ldr	r0, [r7, #12]
 8018834:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801883c:	f003 0304 	and.w	r3, r3, #4
 8018840:	2b00      	cmp	r3, #0
 8018842:	d02f      	beq.n	80188a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	699b      	ldr	r3, [r3, #24]
 8018848:	693a      	ldr	r2, [r7, #16]
 801884a:	4413      	add	r3, r2
 801884c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801884e:	68ba      	ldr	r2, [r7, #8]
 8018850:	693b      	ldr	r3, [r7, #16]
 8018852:	429a      	cmp	r2, r3
 8018854:	d90e      	bls.n	8018874 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	68ba      	ldr	r2, [r7, #8]
 801885a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	68fa      	ldr	r2, [r7, #12]
 8018860:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018862:	4b1a      	ldr	r3, [pc, #104]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 8018864:	681a      	ldr	r2, [r3, #0]
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	3304      	adds	r3, #4
 801886a:	4619      	mov	r1, r3
 801886c:	4610      	mov	r0, r2
 801886e:	f7fd fa6e 	bl	8015d4e <vListInsert>
 8018872:	e017      	b.n	80188a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018874:	2300      	movs	r3, #0
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	2300      	movs	r3, #0
 801887a:	693a      	ldr	r2, [r7, #16]
 801887c:	2100      	movs	r1, #0
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	f7ff fd58 	bl	8018334 <xTimerGenericCommand>
 8018884:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d10b      	bne.n	80188a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018890:	f383 8811 	msr	BASEPRI, r3
 8018894:	f3bf 8f6f 	isb	sy
 8018898:	f3bf 8f4f 	dsb	sy
 801889c:	603b      	str	r3, [r7, #0]
}
 801889e:	bf00      	nop
 80188a0:	bf00      	nop
 80188a2:	e7fd      	b.n	80188a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188a4:	4b09      	ldr	r3, [pc, #36]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d1b0      	bne.n	8018810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80188ae:	4b07      	ldr	r3, [pc, #28]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80188b4:	4b06      	ldr	r3, [pc, #24]	@ (80188d0 <prvSwitchTimerLists+0xc8>)
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	4a04      	ldr	r2, [pc, #16]	@ (80188cc <prvSwitchTimerLists+0xc4>)
 80188ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80188bc:	4a04      	ldr	r2, [pc, #16]	@ (80188d0 <prvSwitchTimerLists+0xc8>)
 80188be:	697b      	ldr	r3, [r7, #20]
 80188c0:	6013      	str	r3, [r2, #0]
}
 80188c2:	bf00      	nop
 80188c4:	3718      	adds	r7, #24
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	240028b8 	.word	0x240028b8
 80188d0:	240028bc 	.word	0x240028bc

080188d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80188da:	f000 f96d 	bl	8018bb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80188de:	4b15      	ldr	r3, [pc, #84]	@ (8018934 <prvCheckForValidListAndQueue+0x60>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d120      	bne.n	8018928 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80188e6:	4814      	ldr	r0, [pc, #80]	@ (8018938 <prvCheckForValidListAndQueue+0x64>)
 80188e8:	f7fd f9e0 	bl	8015cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80188ec:	4813      	ldr	r0, [pc, #76]	@ (801893c <prvCheckForValidListAndQueue+0x68>)
 80188ee:	f7fd f9dd 	bl	8015cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80188f2:	4b13      	ldr	r3, [pc, #76]	@ (8018940 <prvCheckForValidListAndQueue+0x6c>)
 80188f4:	4a10      	ldr	r2, [pc, #64]	@ (8018938 <prvCheckForValidListAndQueue+0x64>)
 80188f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80188f8:	4b12      	ldr	r3, [pc, #72]	@ (8018944 <prvCheckForValidListAndQueue+0x70>)
 80188fa:	4a10      	ldr	r2, [pc, #64]	@ (801893c <prvCheckForValidListAndQueue+0x68>)
 80188fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80188fe:	2300      	movs	r3, #0
 8018900:	9300      	str	r3, [sp, #0]
 8018902:	4b11      	ldr	r3, [pc, #68]	@ (8018948 <prvCheckForValidListAndQueue+0x74>)
 8018904:	4a11      	ldr	r2, [pc, #68]	@ (801894c <prvCheckForValidListAndQueue+0x78>)
 8018906:	2110      	movs	r1, #16
 8018908:	200a      	movs	r0, #10
 801890a:	f7fd faed 	bl	8015ee8 <xQueueGenericCreateStatic>
 801890e:	4603      	mov	r3, r0
 8018910:	4a08      	ldr	r2, [pc, #32]	@ (8018934 <prvCheckForValidListAndQueue+0x60>)
 8018912:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018914:	4b07      	ldr	r3, [pc, #28]	@ (8018934 <prvCheckForValidListAndQueue+0x60>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d005      	beq.n	8018928 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801891c:	4b05      	ldr	r3, [pc, #20]	@ (8018934 <prvCheckForValidListAndQueue+0x60>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	490b      	ldr	r1, [pc, #44]	@ (8018950 <prvCheckForValidListAndQueue+0x7c>)
 8018922:	4618      	mov	r0, r3
 8018924:	f7fe fa1a 	bl	8016d5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018928:	f000 f978 	bl	8018c1c <vPortExitCritical>
}
 801892c:	bf00      	nop
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	240028c0 	.word	0x240028c0
 8018938:	24002890 	.word	0x24002890
 801893c:	240028a4 	.word	0x240028a4
 8018940:	240028b8 	.word	0x240028b8
 8018944:	240028bc 	.word	0x240028bc
 8018948:	2400296c 	.word	0x2400296c
 801894c:	240028cc 	.word	0x240028cc
 8018950:	0801aaa4 	.word	0x0801aaa4

08018954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018954:	b480      	push	{r7}
 8018956:	b085      	sub	sp, #20
 8018958:	af00      	add	r7, sp, #0
 801895a:	60f8      	str	r0, [r7, #12]
 801895c:	60b9      	str	r1, [r7, #8]
 801895e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	3b04      	subs	r3, #4
 8018964:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	3b04      	subs	r3, #4
 8018972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	f023 0201 	bic.w	r2, r3, #1
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	3b04      	subs	r3, #4
 8018982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018984:	4a0c      	ldr	r2, [pc, #48]	@ (80189b8 <pxPortInitialiseStack+0x64>)
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	3b14      	subs	r3, #20
 801898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	3b04      	subs	r3, #4
 801899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	f06f 0202 	mvn.w	r2, #2
 80189a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	3b20      	subs	r3, #32
 80189a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80189aa:	68fb      	ldr	r3, [r7, #12]
}
 80189ac:	4618      	mov	r0, r3
 80189ae:	3714      	adds	r7, #20
 80189b0:	46bd      	mov	sp, r7
 80189b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b6:	4770      	bx	lr
 80189b8:	080189bd 	.word	0x080189bd

080189bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80189bc:	b480      	push	{r7}
 80189be:	b085      	sub	sp, #20
 80189c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80189c2:	2300      	movs	r3, #0
 80189c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80189c6:	4b13      	ldr	r3, [pc, #76]	@ (8018a14 <prvTaskExitError+0x58>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189ce:	d00b      	beq.n	80189e8 <prvTaskExitError+0x2c>
	__asm volatile
 80189d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189d4:	f383 8811 	msr	BASEPRI, r3
 80189d8:	f3bf 8f6f 	isb	sy
 80189dc:	f3bf 8f4f 	dsb	sy
 80189e0:	60fb      	str	r3, [r7, #12]
}
 80189e2:	bf00      	nop
 80189e4:	bf00      	nop
 80189e6:	e7fd      	b.n	80189e4 <prvTaskExitError+0x28>
	__asm volatile
 80189e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189ec:	f383 8811 	msr	BASEPRI, r3
 80189f0:	f3bf 8f6f 	isb	sy
 80189f4:	f3bf 8f4f 	dsb	sy
 80189f8:	60bb      	str	r3, [r7, #8]
}
 80189fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80189fc:	bf00      	nop
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d0fc      	beq.n	80189fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018a04:	bf00      	nop
 8018a06:	bf00      	nop
 8018a08:	3714      	adds	r7, #20
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a10:	4770      	bx	lr
 8018a12:	bf00      	nop
 8018a14:	24000018 	.word	0x24000018
	...

08018a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018a20:	4b07      	ldr	r3, [pc, #28]	@ (8018a40 <pxCurrentTCBConst2>)
 8018a22:	6819      	ldr	r1, [r3, #0]
 8018a24:	6808      	ldr	r0, [r1, #0]
 8018a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a2a:	f380 8809 	msr	PSP, r0
 8018a2e:	f3bf 8f6f 	isb	sy
 8018a32:	f04f 0000 	mov.w	r0, #0
 8018a36:	f380 8811 	msr	BASEPRI, r0
 8018a3a:	4770      	bx	lr
 8018a3c:	f3af 8000 	nop.w

08018a40 <pxCurrentTCBConst2>:
 8018a40:	24002390 	.word	0x24002390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018a44:	bf00      	nop
 8018a46:	bf00      	nop

08018a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018a48:	4808      	ldr	r0, [pc, #32]	@ (8018a6c <prvPortStartFirstTask+0x24>)
 8018a4a:	6800      	ldr	r0, [r0, #0]
 8018a4c:	6800      	ldr	r0, [r0, #0]
 8018a4e:	f380 8808 	msr	MSP, r0
 8018a52:	f04f 0000 	mov.w	r0, #0
 8018a56:	f380 8814 	msr	CONTROL, r0
 8018a5a:	b662      	cpsie	i
 8018a5c:	b661      	cpsie	f
 8018a5e:	f3bf 8f4f 	dsb	sy
 8018a62:	f3bf 8f6f 	isb	sy
 8018a66:	df00      	svc	0
 8018a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018a6a:	bf00      	nop
 8018a6c:	e000ed08 	.word	0xe000ed08

08018a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b086      	sub	sp, #24
 8018a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018a76:	4b47      	ldr	r3, [pc, #284]	@ (8018b94 <xPortStartScheduler+0x124>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	4a47      	ldr	r2, [pc, #284]	@ (8018b98 <xPortStartScheduler+0x128>)
 8018a7c:	4293      	cmp	r3, r2
 8018a7e:	d10b      	bne.n	8018a98 <xPortStartScheduler+0x28>
	__asm volatile
 8018a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a84:	f383 8811 	msr	BASEPRI, r3
 8018a88:	f3bf 8f6f 	isb	sy
 8018a8c:	f3bf 8f4f 	dsb	sy
 8018a90:	60fb      	str	r3, [r7, #12]
}
 8018a92:	bf00      	nop
 8018a94:	bf00      	nop
 8018a96:	e7fd      	b.n	8018a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018a98:	4b3e      	ldr	r3, [pc, #248]	@ (8018b94 <xPortStartScheduler+0x124>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8018b9c <xPortStartScheduler+0x12c>)
 8018a9e:	4293      	cmp	r3, r2
 8018aa0:	d10b      	bne.n	8018aba <xPortStartScheduler+0x4a>
	__asm volatile
 8018aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018aa6:	f383 8811 	msr	BASEPRI, r3
 8018aaa:	f3bf 8f6f 	isb	sy
 8018aae:	f3bf 8f4f 	dsb	sy
 8018ab2:	613b      	str	r3, [r7, #16]
}
 8018ab4:	bf00      	nop
 8018ab6:	bf00      	nop
 8018ab8:	e7fd      	b.n	8018ab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018aba:	4b39      	ldr	r3, [pc, #228]	@ (8018ba0 <xPortStartScheduler+0x130>)
 8018abc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	22ff      	movs	r2, #255	@ 0xff
 8018aca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018acc:	697b      	ldr	r3, [r7, #20]
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ad4:	78fb      	ldrb	r3, [r7, #3]
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018adc:	b2da      	uxtb	r2, r3
 8018ade:	4b31      	ldr	r3, [pc, #196]	@ (8018ba4 <xPortStartScheduler+0x134>)
 8018ae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018ae2:	4b31      	ldr	r3, [pc, #196]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018ae4:	2207      	movs	r2, #7
 8018ae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018ae8:	e009      	b.n	8018afe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8018aea:	4b2f      	ldr	r3, [pc, #188]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	3b01      	subs	r3, #1
 8018af0:	4a2d      	ldr	r2, [pc, #180]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018af2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018af4:	78fb      	ldrb	r3, [r7, #3]
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	005b      	lsls	r3, r3, #1
 8018afa:	b2db      	uxtb	r3, r3
 8018afc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018afe:	78fb      	ldrb	r3, [r7, #3]
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018b06:	2b80      	cmp	r3, #128	@ 0x80
 8018b08:	d0ef      	beq.n	8018aea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018b0a:	4b27      	ldr	r3, [pc, #156]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	f1c3 0307 	rsb	r3, r3, #7
 8018b12:	2b04      	cmp	r3, #4
 8018b14:	d00b      	beq.n	8018b2e <xPortStartScheduler+0xbe>
	__asm volatile
 8018b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b1a:	f383 8811 	msr	BASEPRI, r3
 8018b1e:	f3bf 8f6f 	isb	sy
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	60bb      	str	r3, [r7, #8]
}
 8018b28:	bf00      	nop
 8018b2a:	bf00      	nop
 8018b2c:	e7fd      	b.n	8018b2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	021b      	lsls	r3, r3, #8
 8018b34:	4a1c      	ldr	r2, [pc, #112]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018b38:	4b1b      	ldr	r3, [pc, #108]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018b40:	4a19      	ldr	r2, [pc, #100]	@ (8018ba8 <xPortStartScheduler+0x138>)
 8018b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	b2da      	uxtb	r2, r3
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018b4c:	4b17      	ldr	r3, [pc, #92]	@ (8018bac <xPortStartScheduler+0x13c>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	4a16      	ldr	r2, [pc, #88]	@ (8018bac <xPortStartScheduler+0x13c>)
 8018b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018b58:	4b14      	ldr	r3, [pc, #80]	@ (8018bac <xPortStartScheduler+0x13c>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	4a13      	ldr	r2, [pc, #76]	@ (8018bac <xPortStartScheduler+0x13c>)
 8018b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018b64:	f000 f8da 	bl	8018d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018b68:	4b11      	ldr	r3, [pc, #68]	@ (8018bb0 <xPortStartScheduler+0x140>)
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018b6e:	f000 f8f9 	bl	8018d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018b72:	4b10      	ldr	r3, [pc, #64]	@ (8018bb4 <xPortStartScheduler+0x144>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a0f      	ldr	r2, [pc, #60]	@ (8018bb4 <xPortStartScheduler+0x144>)
 8018b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018b7e:	f7ff ff63 	bl	8018a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018b82:	f7fe fe3b 	bl	80177fc <vTaskSwitchContext>
	prvTaskExitError();
 8018b86:	f7ff ff19 	bl	80189bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018b8a:	2300      	movs	r3, #0
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3718      	adds	r7, #24
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	e000ed00 	.word	0xe000ed00
 8018b98:	410fc271 	.word	0x410fc271
 8018b9c:	410fc270 	.word	0x410fc270
 8018ba0:	e000e400 	.word	0xe000e400
 8018ba4:	240029bc 	.word	0x240029bc
 8018ba8:	240029c0 	.word	0x240029c0
 8018bac:	e000ed20 	.word	0xe000ed20
 8018bb0:	24000018 	.word	0x24000018
 8018bb4:	e000ef34 	.word	0xe000ef34

08018bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018bb8:	b480      	push	{r7}
 8018bba:	b083      	sub	sp, #12
 8018bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8018bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bc2:	f383 8811 	msr	BASEPRI, r3
 8018bc6:	f3bf 8f6f 	isb	sy
 8018bca:	f3bf 8f4f 	dsb	sy
 8018bce:	607b      	str	r3, [r7, #4]
}
 8018bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018bd2:	4b10      	ldr	r3, [pc, #64]	@ (8018c14 <vPortEnterCritical+0x5c>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	3301      	adds	r3, #1
 8018bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8018c14 <vPortEnterCritical+0x5c>)
 8018bda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8018c14 <vPortEnterCritical+0x5c>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	2b01      	cmp	r3, #1
 8018be2:	d110      	bne.n	8018c06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018be4:	4b0c      	ldr	r3, [pc, #48]	@ (8018c18 <vPortEnterCritical+0x60>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	b2db      	uxtb	r3, r3
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d00b      	beq.n	8018c06 <vPortEnterCritical+0x4e>
	__asm volatile
 8018bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bf2:	f383 8811 	msr	BASEPRI, r3
 8018bf6:	f3bf 8f6f 	isb	sy
 8018bfa:	f3bf 8f4f 	dsb	sy
 8018bfe:	603b      	str	r3, [r7, #0]
}
 8018c00:	bf00      	nop
 8018c02:	bf00      	nop
 8018c04:	e7fd      	b.n	8018c02 <vPortEnterCritical+0x4a>
	}
}
 8018c06:	bf00      	nop
 8018c08:	370c      	adds	r7, #12
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c10:	4770      	bx	lr
 8018c12:	bf00      	nop
 8018c14:	24000018 	.word	0x24000018
 8018c18:	e000ed04 	.word	0xe000ed04

08018c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018c22:	4b12      	ldr	r3, [pc, #72]	@ (8018c6c <vPortExitCritical+0x50>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d10b      	bne.n	8018c42 <vPortExitCritical+0x26>
	__asm volatile
 8018c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c2e:	f383 8811 	msr	BASEPRI, r3
 8018c32:	f3bf 8f6f 	isb	sy
 8018c36:	f3bf 8f4f 	dsb	sy
 8018c3a:	607b      	str	r3, [r7, #4]
}
 8018c3c:	bf00      	nop
 8018c3e:	bf00      	nop
 8018c40:	e7fd      	b.n	8018c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018c42:	4b0a      	ldr	r3, [pc, #40]	@ (8018c6c <vPortExitCritical+0x50>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	3b01      	subs	r3, #1
 8018c48:	4a08      	ldr	r2, [pc, #32]	@ (8018c6c <vPortExitCritical+0x50>)
 8018c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018c4c:	4b07      	ldr	r3, [pc, #28]	@ (8018c6c <vPortExitCritical+0x50>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d105      	bne.n	8018c60 <vPortExitCritical+0x44>
 8018c54:	2300      	movs	r3, #0
 8018c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c58:	683b      	ldr	r3, [r7, #0]
 8018c5a:	f383 8811 	msr	BASEPRI, r3
}
 8018c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018c60:	bf00      	nop
 8018c62:	370c      	adds	r7, #12
 8018c64:	46bd      	mov	sp, r7
 8018c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6a:	4770      	bx	lr
 8018c6c:	24000018 	.word	0x24000018

08018c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018c70:	f3ef 8009 	mrs	r0, PSP
 8018c74:	f3bf 8f6f 	isb	sy
 8018c78:	4b15      	ldr	r3, [pc, #84]	@ (8018cd0 <pxCurrentTCBConst>)
 8018c7a:	681a      	ldr	r2, [r3, #0]
 8018c7c:	f01e 0f10 	tst.w	lr, #16
 8018c80:	bf08      	it	eq
 8018c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8a:	6010      	str	r0, [r2, #0]
 8018c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018c94:	f380 8811 	msr	BASEPRI, r0
 8018c98:	f3bf 8f4f 	dsb	sy
 8018c9c:	f3bf 8f6f 	isb	sy
 8018ca0:	f7fe fdac 	bl	80177fc <vTaskSwitchContext>
 8018ca4:	f04f 0000 	mov.w	r0, #0
 8018ca8:	f380 8811 	msr	BASEPRI, r0
 8018cac:	bc09      	pop	{r0, r3}
 8018cae:	6819      	ldr	r1, [r3, #0]
 8018cb0:	6808      	ldr	r0, [r1, #0]
 8018cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb6:	f01e 0f10 	tst.w	lr, #16
 8018cba:	bf08      	it	eq
 8018cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018cc0:	f380 8809 	msr	PSP, r0
 8018cc4:	f3bf 8f6f 	isb	sy
 8018cc8:	4770      	bx	lr
 8018cca:	bf00      	nop
 8018ccc:	f3af 8000 	nop.w

08018cd0 <pxCurrentTCBConst>:
 8018cd0:	24002390 	.word	0x24002390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018cd4:	bf00      	nop
 8018cd6:	bf00      	nop

08018cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8018cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ce2:	f383 8811 	msr	BASEPRI, r3
 8018ce6:	f3bf 8f6f 	isb	sy
 8018cea:	f3bf 8f4f 	dsb	sy
 8018cee:	607b      	str	r3, [r7, #4]
}
 8018cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018cf2:	f7fe fcc9 	bl	8017688 <xTaskIncrementTick>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d003      	beq.n	8018d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018cfc:	4b06      	ldr	r3, [pc, #24]	@ (8018d18 <xPortSysTickHandler+0x40>)
 8018cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d02:	601a      	str	r2, [r3, #0]
 8018d04:	2300      	movs	r3, #0
 8018d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	f383 8811 	msr	BASEPRI, r3
}
 8018d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018d10:	bf00      	nop
 8018d12:	3708      	adds	r7, #8
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	e000ed04 	.word	0xe000ed04

08018d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018d20:	4b0b      	ldr	r3, [pc, #44]	@ (8018d50 <vPortSetupTimerInterrupt+0x34>)
 8018d22:	2200      	movs	r2, #0
 8018d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018d26:	4b0b      	ldr	r3, [pc, #44]	@ (8018d54 <vPortSetupTimerInterrupt+0x38>)
 8018d28:	2200      	movs	r2, #0
 8018d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8018d58 <vPortSetupTimerInterrupt+0x3c>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4a0a      	ldr	r2, [pc, #40]	@ (8018d5c <vPortSetupTimerInterrupt+0x40>)
 8018d32:	fba2 2303 	umull	r2, r3, r2, r3
 8018d36:	099b      	lsrs	r3, r3, #6
 8018d38:	4a09      	ldr	r2, [pc, #36]	@ (8018d60 <vPortSetupTimerInterrupt+0x44>)
 8018d3a:	3b01      	subs	r3, #1
 8018d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018d3e:	4b04      	ldr	r3, [pc, #16]	@ (8018d50 <vPortSetupTimerInterrupt+0x34>)
 8018d40:	2207      	movs	r2, #7
 8018d42:	601a      	str	r2, [r3, #0]
}
 8018d44:	bf00      	nop
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	e000e010 	.word	0xe000e010
 8018d54:	e000e018 	.word	0xe000e018
 8018d58:	24000008 	.word	0x24000008
 8018d5c:	10624dd3 	.word	0x10624dd3
 8018d60:	e000e014 	.word	0xe000e014

08018d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018d74 <vPortEnableVFP+0x10>
 8018d68:	6801      	ldr	r1, [r0, #0]
 8018d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018d6e:	6001      	str	r1, [r0, #0]
 8018d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018d72:	bf00      	nop
 8018d74:	e000ed88 	.word	0xe000ed88

08018d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018d78:	b480      	push	{r7}
 8018d7a:	b085      	sub	sp, #20
 8018d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018d7e:	f3ef 8305 	mrs	r3, IPSR
 8018d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	2b0f      	cmp	r3, #15
 8018d88:	d915      	bls.n	8018db6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d8a:	4a18      	ldr	r2, [pc, #96]	@ (8018dec <vPortValidateInterruptPriority+0x74>)
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	4413      	add	r3, r2
 8018d90:	781b      	ldrb	r3, [r3, #0]
 8018d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d94:	4b16      	ldr	r3, [pc, #88]	@ (8018df0 <vPortValidateInterruptPriority+0x78>)
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	7afa      	ldrb	r2, [r7, #11]
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d20b      	bcs.n	8018db6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8018d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018da2:	f383 8811 	msr	BASEPRI, r3
 8018da6:	f3bf 8f6f 	isb	sy
 8018daa:	f3bf 8f4f 	dsb	sy
 8018dae:	607b      	str	r3, [r7, #4]
}
 8018db0:	bf00      	nop
 8018db2:	bf00      	nop
 8018db4:	e7fd      	b.n	8018db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018db6:	4b0f      	ldr	r3, [pc, #60]	@ (8018df4 <vPortValidateInterruptPriority+0x7c>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8018df8 <vPortValidateInterruptPriority+0x80>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d90b      	bls.n	8018dde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8018dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dca:	f383 8811 	msr	BASEPRI, r3
 8018dce:	f3bf 8f6f 	isb	sy
 8018dd2:	f3bf 8f4f 	dsb	sy
 8018dd6:	603b      	str	r3, [r7, #0]
}
 8018dd8:	bf00      	nop
 8018dda:	bf00      	nop
 8018ddc:	e7fd      	b.n	8018dda <vPortValidateInterruptPriority+0x62>
	}
 8018dde:	bf00      	nop
 8018de0:	3714      	adds	r7, #20
 8018de2:	46bd      	mov	sp, r7
 8018de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop
 8018dec:	e000e3f0 	.word	0xe000e3f0
 8018df0:	240029bc 	.word	0x240029bc
 8018df4:	e000ed0c 	.word	0xe000ed0c
 8018df8:	240029c0 	.word	0x240029c0

08018dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b08a      	sub	sp, #40	@ 0x28
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018e04:	2300      	movs	r3, #0
 8018e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018e08:	f7fe fb70 	bl	80174ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8018f80 <pvPortMalloc+0x184>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d101      	bne.n	8018e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018e14:	f000 f924 	bl	8019060 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018e18:	4b5a      	ldr	r3, [pc, #360]	@ (8018f84 <pvPortMalloc+0x188>)
 8018e1a:	681a      	ldr	r2, [r3, #0]
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	4013      	ands	r3, r2
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	f040 8095 	bne.w	8018f50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d01e      	beq.n	8018e6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8018e2c:	2208      	movs	r2, #8
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	4413      	add	r3, r2
 8018e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f003 0307 	and.w	r3, r3, #7
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d015      	beq.n	8018e6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	f023 0307 	bic.w	r3, r3, #7
 8018e44:	3308      	adds	r3, #8
 8018e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	f003 0307 	and.w	r3, r3, #7
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d00b      	beq.n	8018e6a <pvPortMalloc+0x6e>
	__asm volatile
 8018e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e56:	f383 8811 	msr	BASEPRI, r3
 8018e5a:	f3bf 8f6f 	isb	sy
 8018e5e:	f3bf 8f4f 	dsb	sy
 8018e62:	617b      	str	r3, [r7, #20]
}
 8018e64:	bf00      	nop
 8018e66:	bf00      	nop
 8018e68:	e7fd      	b.n	8018e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d06f      	beq.n	8018f50 <pvPortMalloc+0x154>
 8018e70:	4b45      	ldr	r3, [pc, #276]	@ (8018f88 <pvPortMalloc+0x18c>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	687a      	ldr	r2, [r7, #4]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d86a      	bhi.n	8018f50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018e7a:	4b44      	ldr	r3, [pc, #272]	@ (8018f8c <pvPortMalloc+0x190>)
 8018e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018e7e:	4b43      	ldr	r3, [pc, #268]	@ (8018f8c <pvPortMalloc+0x190>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e84:	e004      	b.n	8018e90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d903      	bls.n	8018ea2 <pvPortMalloc+0xa6>
 8018e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d1f1      	bne.n	8018e86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018ea2:	4b37      	ldr	r3, [pc, #220]	@ (8018f80 <pvPortMalloc+0x184>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d051      	beq.n	8018f50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018eac:	6a3b      	ldr	r3, [r7, #32]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	2208      	movs	r2, #8
 8018eb2:	4413      	add	r3, r2
 8018eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eb8:	681a      	ldr	r2, [r3, #0]
 8018eba:	6a3b      	ldr	r3, [r7, #32]
 8018ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ec0:	685a      	ldr	r2, [r3, #4]
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	1ad2      	subs	r2, r2, r3
 8018ec6:	2308      	movs	r3, #8
 8018ec8:	005b      	lsls	r3, r3, #1
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d920      	bls.n	8018f10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	4413      	add	r3, r2
 8018ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ed6:	69bb      	ldr	r3, [r7, #24]
 8018ed8:	f003 0307 	and.w	r3, r3, #7
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d00b      	beq.n	8018ef8 <pvPortMalloc+0xfc>
	__asm volatile
 8018ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ee4:	f383 8811 	msr	BASEPRI, r3
 8018ee8:	f3bf 8f6f 	isb	sy
 8018eec:	f3bf 8f4f 	dsb	sy
 8018ef0:	613b      	str	r3, [r7, #16]
}
 8018ef2:	bf00      	nop
 8018ef4:	bf00      	nop
 8018ef6:	e7fd      	b.n	8018ef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018efa:	685a      	ldr	r2, [r3, #4]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	1ad2      	subs	r2, r2, r3
 8018f00:	69bb      	ldr	r3, [r7, #24]
 8018f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f06:	687a      	ldr	r2, [r7, #4]
 8018f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018f0a:	69b8      	ldr	r0, [r7, #24]
 8018f0c:	f000 f90a 	bl	8019124 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018f10:	4b1d      	ldr	r3, [pc, #116]	@ (8018f88 <pvPortMalloc+0x18c>)
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f16:	685b      	ldr	r3, [r3, #4]
 8018f18:	1ad3      	subs	r3, r2, r3
 8018f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8018f88 <pvPortMalloc+0x18c>)
 8018f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8018f88 <pvPortMalloc+0x18c>)
 8018f20:	681a      	ldr	r2, [r3, #0]
 8018f22:	4b1b      	ldr	r3, [pc, #108]	@ (8018f90 <pvPortMalloc+0x194>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d203      	bcs.n	8018f32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018f2a:	4b17      	ldr	r3, [pc, #92]	@ (8018f88 <pvPortMalloc+0x18c>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4a18      	ldr	r2, [pc, #96]	@ (8018f90 <pvPortMalloc+0x194>)
 8018f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f34:	685a      	ldr	r2, [r3, #4]
 8018f36:	4b13      	ldr	r3, [pc, #76]	@ (8018f84 <pvPortMalloc+0x188>)
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	431a      	orrs	r2, r3
 8018f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f42:	2200      	movs	r2, #0
 8018f44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018f46:	4b13      	ldr	r3, [pc, #76]	@ (8018f94 <pvPortMalloc+0x198>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	4a11      	ldr	r2, [pc, #68]	@ (8018f94 <pvPortMalloc+0x198>)
 8018f4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018f50:	f7fe fada 	bl	8017508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	f003 0307 	and.w	r3, r3, #7
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d00b      	beq.n	8018f76 <pvPortMalloc+0x17a>
	__asm volatile
 8018f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f62:	f383 8811 	msr	BASEPRI, r3
 8018f66:	f3bf 8f6f 	isb	sy
 8018f6a:	f3bf 8f4f 	dsb	sy
 8018f6e:	60fb      	str	r3, [r7, #12]
}
 8018f70:	bf00      	nop
 8018f72:	bf00      	nop
 8018f74:	e7fd      	b.n	8018f72 <pvPortMalloc+0x176>
	return pvReturn;
 8018f76:	69fb      	ldr	r3, [r7, #28]
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	3728      	adds	r7, #40	@ 0x28
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	240229cc 	.word	0x240229cc
 8018f84:	240229e0 	.word	0x240229e0
 8018f88:	240229d0 	.word	0x240229d0
 8018f8c:	240229c4 	.word	0x240229c4
 8018f90:	240229d4 	.word	0x240229d4
 8018f94:	240229d8 	.word	0x240229d8

08018f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b086      	sub	sp, #24
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d04f      	beq.n	801904a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018faa:	2308      	movs	r3, #8
 8018fac:	425b      	negs	r3, r3
 8018fae:	697a      	ldr	r2, [r7, #20]
 8018fb0:	4413      	add	r3, r2
 8018fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018fb4:	697b      	ldr	r3, [r7, #20]
 8018fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018fb8:	693b      	ldr	r3, [r7, #16]
 8018fba:	685a      	ldr	r2, [r3, #4]
 8018fbc:	4b25      	ldr	r3, [pc, #148]	@ (8019054 <vPortFree+0xbc>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	4013      	ands	r3, r2
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d10b      	bne.n	8018fde <vPortFree+0x46>
	__asm volatile
 8018fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fca:	f383 8811 	msr	BASEPRI, r3
 8018fce:	f3bf 8f6f 	isb	sy
 8018fd2:	f3bf 8f4f 	dsb	sy
 8018fd6:	60fb      	str	r3, [r7, #12]
}
 8018fd8:	bf00      	nop
 8018fda:	bf00      	nop
 8018fdc:	e7fd      	b.n	8018fda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d00b      	beq.n	8018ffe <vPortFree+0x66>
	__asm volatile
 8018fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fea:	f383 8811 	msr	BASEPRI, r3
 8018fee:	f3bf 8f6f 	isb	sy
 8018ff2:	f3bf 8f4f 	dsb	sy
 8018ff6:	60bb      	str	r3, [r7, #8]
}
 8018ff8:	bf00      	nop
 8018ffa:	bf00      	nop
 8018ffc:	e7fd      	b.n	8018ffa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	685a      	ldr	r2, [r3, #4]
 8019002:	4b14      	ldr	r3, [pc, #80]	@ (8019054 <vPortFree+0xbc>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	4013      	ands	r3, r2
 8019008:	2b00      	cmp	r3, #0
 801900a:	d01e      	beq.n	801904a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d11a      	bne.n	801904a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	685a      	ldr	r2, [r3, #4]
 8019018:	4b0e      	ldr	r3, [pc, #56]	@ (8019054 <vPortFree+0xbc>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	43db      	mvns	r3, r3
 801901e:	401a      	ands	r2, r3
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019024:	f7fe fa62 	bl	80174ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	685a      	ldr	r2, [r3, #4]
 801902c:	4b0a      	ldr	r3, [pc, #40]	@ (8019058 <vPortFree+0xc0>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	4413      	add	r3, r2
 8019032:	4a09      	ldr	r2, [pc, #36]	@ (8019058 <vPortFree+0xc0>)
 8019034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019036:	6938      	ldr	r0, [r7, #16]
 8019038:	f000 f874 	bl	8019124 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801903c:	4b07      	ldr	r3, [pc, #28]	@ (801905c <vPortFree+0xc4>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	3301      	adds	r3, #1
 8019042:	4a06      	ldr	r2, [pc, #24]	@ (801905c <vPortFree+0xc4>)
 8019044:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019046:	f7fe fa5f 	bl	8017508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801904a:	bf00      	nop
 801904c:	3718      	adds	r7, #24
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	240229e0 	.word	0x240229e0
 8019058:	240229d0 	.word	0x240229d0
 801905c:	240229dc 	.word	0x240229dc

08019060 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019060:	b480      	push	{r7}
 8019062:	b085      	sub	sp, #20
 8019064:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019066:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801906a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801906c:	4b27      	ldr	r3, [pc, #156]	@ (801910c <prvHeapInit+0xac>)
 801906e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	f003 0307 	and.w	r3, r3, #7
 8019076:	2b00      	cmp	r3, #0
 8019078:	d00c      	beq.n	8019094 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	3307      	adds	r3, #7
 801907e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	f023 0307 	bic.w	r3, r3, #7
 8019086:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019088:	68ba      	ldr	r2, [r7, #8]
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	1ad3      	subs	r3, r2, r3
 801908e:	4a1f      	ldr	r2, [pc, #124]	@ (801910c <prvHeapInit+0xac>)
 8019090:	4413      	add	r3, r2
 8019092:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019098:	4a1d      	ldr	r2, [pc, #116]	@ (8019110 <prvHeapInit+0xb0>)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801909e:	4b1c      	ldr	r3, [pc, #112]	@ (8019110 <prvHeapInit+0xb0>)
 80190a0:	2200      	movs	r2, #0
 80190a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	68ba      	ldr	r2, [r7, #8]
 80190a8:	4413      	add	r3, r2
 80190aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80190ac:	2208      	movs	r2, #8
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	1a9b      	subs	r3, r3, r2
 80190b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	f023 0307 	bic.w	r3, r3, #7
 80190ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	4a15      	ldr	r2, [pc, #84]	@ (8019114 <prvHeapInit+0xb4>)
 80190c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80190c2:	4b14      	ldr	r3, [pc, #80]	@ (8019114 <prvHeapInit+0xb4>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	2200      	movs	r2, #0
 80190c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80190ca:	4b12      	ldr	r3, [pc, #72]	@ (8019114 <prvHeapInit+0xb4>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	2200      	movs	r2, #0
 80190d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	68fa      	ldr	r2, [r7, #12]
 80190da:	1ad2      	subs	r2, r2, r3
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80190e0:	4b0c      	ldr	r3, [pc, #48]	@ (8019114 <prvHeapInit+0xb4>)
 80190e2:	681a      	ldr	r2, [r3, #0]
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190e8:	683b      	ldr	r3, [r7, #0]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	4a0a      	ldr	r2, [pc, #40]	@ (8019118 <prvHeapInit+0xb8>)
 80190ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	685b      	ldr	r3, [r3, #4]
 80190f4:	4a09      	ldr	r2, [pc, #36]	@ (801911c <prvHeapInit+0xbc>)
 80190f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80190f8:	4b09      	ldr	r3, [pc, #36]	@ (8019120 <prvHeapInit+0xc0>)
 80190fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80190fe:	601a      	str	r2, [r3, #0]
}
 8019100:	bf00      	nop
 8019102:	3714      	adds	r7, #20
 8019104:	46bd      	mov	sp, r7
 8019106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910a:	4770      	bx	lr
 801910c:	240029c4 	.word	0x240029c4
 8019110:	240229c4 	.word	0x240229c4
 8019114:	240229cc 	.word	0x240229cc
 8019118:	240229d4 	.word	0x240229d4
 801911c:	240229d0 	.word	0x240229d0
 8019120:	240229e0 	.word	0x240229e0

08019124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019124:	b480      	push	{r7}
 8019126:	b085      	sub	sp, #20
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801912c:	4b28      	ldr	r3, [pc, #160]	@ (80191d0 <prvInsertBlockIntoFreeList+0xac>)
 801912e:	60fb      	str	r3, [r7, #12]
 8019130:	e002      	b.n	8019138 <prvInsertBlockIntoFreeList+0x14>
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	60fb      	str	r3, [r7, #12]
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	687a      	ldr	r2, [r7, #4]
 801913e:	429a      	cmp	r2, r3
 8019140:	d8f7      	bhi.n	8019132 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	68ba      	ldr	r2, [r7, #8]
 801914c:	4413      	add	r3, r2
 801914e:	687a      	ldr	r2, [r7, #4]
 8019150:	429a      	cmp	r2, r3
 8019152:	d108      	bne.n	8019166 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	685a      	ldr	r2, [r3, #4]
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	441a      	add	r2, r3
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	68ba      	ldr	r2, [r7, #8]
 8019170:	441a      	add	r2, r3
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	429a      	cmp	r2, r3
 8019178:	d118      	bne.n	80191ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	681a      	ldr	r2, [r3, #0]
 801917e:	4b15      	ldr	r3, [pc, #84]	@ (80191d4 <prvInsertBlockIntoFreeList+0xb0>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	429a      	cmp	r2, r3
 8019184:	d00d      	beq.n	80191a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	685a      	ldr	r2, [r3, #4]
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	441a      	add	r2, r3
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	681a      	ldr	r2, [r3, #0]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	601a      	str	r2, [r3, #0]
 80191a0:	e008      	b.n	80191b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80191a2:	4b0c      	ldr	r3, [pc, #48]	@ (80191d4 <prvInsertBlockIntoFreeList+0xb0>)
 80191a4:	681a      	ldr	r2, [r3, #0]
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	601a      	str	r2, [r3, #0]
 80191aa:	e003      	b.n	80191b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681a      	ldr	r2, [r3, #0]
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80191b4:	68fa      	ldr	r2, [r7, #12]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	429a      	cmp	r2, r3
 80191ba:	d002      	beq.n	80191c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80191c2:	bf00      	nop
 80191c4:	3714      	adds	r7, #20
 80191c6:	46bd      	mov	sp, r7
 80191c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191cc:	4770      	bx	lr
 80191ce:	bf00      	nop
 80191d0:	240229c4 	.word	0x240229c4
 80191d4:	240229cc 	.word	0x240229cc

080191d8 <asm330lhh_read_reg>:
 * @param  len   number of consecutive register to read
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len) {
 80191d8:	b590      	push	{r4, r7, lr}
 80191da:	b087      	sub	sp, #28
 80191dc:	af00      	add	r7, sp, #0
 80191de:	60f8      	str	r0, [r7, #12]
 80191e0:	607a      	str	r2, [r7, #4]
 80191e2:	461a      	mov	r2, r3
 80191e4:	460b      	mov	r3, r1
 80191e6:	72fb      	strb	r3, [r7, #11]
 80191e8:	4613      	mov	r3, r2
 80191ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d102      	bne.n	80191f8 <asm330lhh_read_reg+0x20>
    return -1;
 80191f2:	f04f 33ff 	mov.w	r3, #4294967295
 80191f6:	e009      	b.n	801920c <asm330lhh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	685c      	ldr	r4, [r3, #4]
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	68d8      	ldr	r0, [r3, #12]
 8019200:	893b      	ldrh	r3, [r7, #8]
 8019202:	7af9      	ldrb	r1, [r7, #11]
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	47a0      	blx	r4
 8019208:	6178      	str	r0, [r7, #20]

  return ret;
 801920a:	697b      	ldr	r3, [r7, #20]
}
 801920c:	4618      	mov	r0, r3
 801920e:	371c      	adds	r7, #28
 8019210:	46bd      	mov	sp, r7
 8019212:	bd90      	pop	{r4, r7, pc}

08019214 <asm330lhh_write_reg>:
 * @param  len   number of consecutive register to write
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len) {
 8019214:	b590      	push	{r4, r7, lr}
 8019216:	b087      	sub	sp, #28
 8019218:	af00      	add	r7, sp, #0
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	607a      	str	r2, [r7, #4]
 801921e:	461a      	mov	r2, r3
 8019220:	460b      	mov	r3, r1
 8019222:	72fb      	strb	r3, [r7, #11]
 8019224:	4613      	mov	r3, r2
 8019226:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d102      	bne.n	8019234 <asm330lhh_write_reg+0x20>
    return -1;
 801922e:	f04f 33ff 	mov.w	r3, #4294967295
 8019232:	e009      	b.n	8019248 <asm330lhh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681c      	ldr	r4, [r3, #0]
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	68d8      	ldr	r0, [r3, #12]
 801923c:	893b      	ldrh	r3, [r7, #8]
 801923e:	7af9      	ldrb	r1, [r7, #11]
 8019240:	687a      	ldr	r2, [r7, #4]
 8019242:	47a0      	blx	r4
 8019244:	6178      	str	r0, [r7, #20]

  return ret;
 8019246:	697b      	ldr	r3, [r7, #20]
}
 8019248:	4618      	mov	r0, r3
 801924a:	371c      	adds	r7, #28
 801924c:	46bd      	mov	sp, r7
 801924e:	bd90      	pop	{r4, r7, pc}

08019250 <asm330lhh_xl_full_scale_set>:
 * @param  val    Change the values of fs_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_xl_t val) {
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	460b      	mov	r3, r1
 801925a:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801925c:	f107 0208 	add.w	r2, r7, #8
 8019260:	2301      	movs	r3, #1
 8019262:	2110      	movs	r1, #16
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f7ff ffb7 	bl	80191d8 <asm330lhh_read_reg>
 801926a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d10f      	bne.n	8019292 <asm330lhh_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8019272:	78fb      	ldrb	r3, [r7, #3]
 8019274:	f003 0303 	and.w	r3, r3, #3
 8019278:	b2da      	uxtb	r2, r3
 801927a:	7a3b      	ldrb	r3, [r7, #8]
 801927c:	f362 0383 	bfi	r3, r2, #2, #2
 8019280:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8019282:	f107 0208 	add.w	r2, r7, #8
 8019286:	2301      	movs	r3, #1
 8019288:	2110      	movs	r1, #16
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f7ff ffc2 	bl	8019214 <asm330lhh_write_reg>
 8019290:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8019292:	68fb      	ldr	r3, [r7, #12]
}
 8019294:	4618      	mov	r0, r3
 8019296:	3710      	adds	r7, #16
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}

0801929c <asm330lhh_xl_data_rate_set>:
 * @param  val    Change the values of odr_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_xl_t val) {
 801929c:	b580      	push	{r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	460b      	mov	r3, r1
 80192a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_xl_t odr_xl = val;
 80192a8:	78fb      	ldrb	r3, [r7, #3]
 80192aa:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret = 0;
 80192ac:	2300      	movs	r3, #0
 80192ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d107      	bne.n	80192c6 <asm330lhh_xl_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80192b6:	f107 0208 	add.w	r2, r7, #8
 80192ba:	2301      	movs	r3, #1
 80192bc:	2110      	movs	r1, #16
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f7ff ff8a 	bl	80191d8 <asm330lhh_read_reg>
 80192c4:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d10f      	bne.n	80192ec <asm330lhh_xl_data_rate_set+0x50>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80192cc:	7afb      	ldrb	r3, [r7, #11]
 80192ce:	f003 030f 	and.w	r3, r3, #15
 80192d2:	b2da      	uxtb	r2, r3
 80192d4:	7a3b      	ldrb	r3, [r7, #8]
 80192d6:	f362 1307 	bfi	r3, r2, #4, #4
 80192da:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80192dc:	f107 0208 	add.w	r2, r7, #8
 80192e0:	2301      	movs	r3, #1
 80192e2:	2110      	movs	r1, #16
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff ff95 	bl	8019214 <asm330lhh_write_reg>
 80192ea:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80192ec:	68fb      	ldr	r3, [r7, #12]
}
 80192ee:	4618      	mov	r0, r3
 80192f0:	3710      	adds	r7, #16
 80192f2:	46bd      	mov	sp, r7
 80192f4:	bd80      	pop	{r7, pc}

080192f6 <asm330lhh_gy_full_scale_set>:
 * @param  val    Change the values of fs_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_g_t val) {
 80192f6:	b580      	push	{r7, lr}
 80192f8:	b084      	sub	sp, #16
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	6078      	str	r0, [r7, #4]
 80192fe:	460b      	mov	r3, r1
 8019300:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019302:	f107 0208 	add.w	r2, r7, #8
 8019306:	2301      	movs	r3, #1
 8019308:	2111      	movs	r1, #17
 801930a:	6878      	ldr	r0, [r7, #4]
 801930c:	f7ff ff64 	bl	80191d8 <asm330lhh_read_reg>
 8019310:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d10f      	bne.n	8019338 <asm330lhh_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8019318:	78fb      	ldrb	r3, [r7, #3]
 801931a:	f003 030f 	and.w	r3, r3, #15
 801931e:	b2da      	uxtb	r2, r3
 8019320:	7a3b      	ldrb	r3, [r7, #8]
 8019322:	f362 0303 	bfi	r3, r2, #0, #4
 8019326:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019328:	f107 0208 	add.w	r2, r7, #8
 801932c:	2301      	movs	r3, #1
 801932e:	2111      	movs	r1, #17
 8019330:	6878      	ldr	r0, [r7, #4]
 8019332:	f7ff ff6f 	bl	8019214 <asm330lhh_write_reg>
 8019336:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019338:	68fb      	ldr	r3, [r7, #12]
}
 801933a:	4618      	mov	r0, r3
 801933c:	3710      	adds	r7, #16
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}

08019342 <asm330lhh_gy_data_rate_set>:
 * @param  val    Change the values of odr_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_g_t val) {
 8019342:	b580      	push	{r7, lr}
 8019344:	b084      	sub	sp, #16
 8019346:	af00      	add	r7, sp, #0
 8019348:	6078      	str	r0, [r7, #4]
 801934a:	460b      	mov	r3, r1
 801934c:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_g_t odr_gy = val;
 801934e:	78fb      	ldrb	r3, [r7, #3]
 8019350:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret = 0;
 8019352:	2300      	movs	r3, #0
 8019354:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d107      	bne.n	801936c <asm330lhh_gy_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801935c:	f107 0208 	add.w	r2, r7, #8
 8019360:	2301      	movs	r3, #1
 8019362:	2111      	movs	r1, #17
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f7ff ff37 	bl	80191d8 <asm330lhh_read_reg>
 801936a:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d10f      	bne.n	8019392 <asm330lhh_gy_data_rate_set+0x50>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8019372:	7afb      	ldrb	r3, [r7, #11]
 8019374:	f003 030f 	and.w	r3, r3, #15
 8019378:	b2da      	uxtb	r2, r3
 801937a:	7a3b      	ldrb	r3, [r7, #8]
 801937c:	f362 1307 	bfi	r3, r2, #4, #4
 8019380:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019382:	f107 0208 	add.w	r2, r7, #8
 8019386:	2301      	movs	r3, #1
 8019388:	2111      	movs	r1, #17
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7ff ff42 	bl	8019214 <asm330lhh_write_reg>
 8019390:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019392:	68fb      	ldr	r3, [r7, #12]
}
 8019394:	4618      	mov	r0, r3
 8019396:	3710      	adds	r7, #16
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}

0801939c <asm330lhh_block_data_update_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of bdu in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val) {
 801939c:	b580      	push	{r7, lr}
 801939e:	b084      	sub	sp, #16
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
 80193a4:	460b      	mov	r3, r1
 80193a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80193a8:	f107 0208 	add.w	r2, r7, #8
 80193ac:	2301      	movs	r3, #1
 80193ae:	2112      	movs	r1, #18
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f7ff ff11 	bl	80191d8 <asm330lhh_read_reg>
 80193b6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d10f      	bne.n	80193de <asm330lhh_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80193be:	78fb      	ldrb	r3, [r7, #3]
 80193c0:	f003 0301 	and.w	r3, r3, #1
 80193c4:	b2da      	uxtb	r2, r3
 80193c6:	7a3b      	ldrb	r3, [r7, #8]
 80193c8:	f362 1386 	bfi	r3, r2, #6, #1
 80193cc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80193ce:	f107 0208 	add.w	r2, r7, #8
 80193d2:	2301      	movs	r3, #1
 80193d4:	2112      	movs	r1, #18
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f7ff ff1c 	bl	8019214 <asm330lhh_write_reg>
 80193dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80193de:	68fb      	ldr	r3, [r7, #12]
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3710      	adds	r7, #16
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd80      	pop	{r7, pc}

080193e8 <asm330lhh_angular_rate_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b086      	sub	sp, #24
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
 80193f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_G, buff, 6);
 80193f2:	f107 020c 	add.w	r2, r7, #12
 80193f6:	2306      	movs	r3, #6
 80193f8:	2122      	movs	r1, #34	@ 0x22
 80193fa:	6878      	ldr	r0, [r7, #4]
 80193fc:	f7ff feec 	bl	80191d8 <asm330lhh_read_reg>
 8019400:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 8019402:	7b7b      	ldrb	r3, [r7, #13]
 8019404:	b21a      	sxth	r2, r3
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019410:	b29b      	uxth	r3, r3
 8019412:	021b      	lsls	r3, r3, #8
 8019414:	b29b      	uxth	r3, r3
 8019416:	7b3a      	ldrb	r2, [r7, #12]
 8019418:	4413      	add	r3, r2
 801941a:	b29b      	uxth	r3, r3
 801941c:	b21a      	sxth	r2, r3
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8019422:	7bfa      	ldrb	r2, [r7, #15]
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	3302      	adds	r3, #2
 8019428:	b212      	sxth	r2, r2
 801942a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	3302      	adds	r3, #2
 8019430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019434:	b29b      	uxth	r3, r3
 8019436:	021b      	lsls	r3, r3, #8
 8019438:	b29b      	uxth	r3, r3
 801943a:	7bba      	ldrb	r2, [r7, #14]
 801943c:	4413      	add	r3, r2
 801943e:	b29a      	uxth	r2, r3
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	3302      	adds	r3, #2
 8019444:	b212      	sxth	r2, r2
 8019446:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8019448:	7c7a      	ldrb	r2, [r7, #17]
 801944a:	683b      	ldr	r3, [r7, #0]
 801944c:	3304      	adds	r3, #4
 801944e:	b212      	sxth	r2, r2
 8019450:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	3304      	adds	r3, #4
 8019456:	f9b3 3000 	ldrsh.w	r3, [r3]
 801945a:	b29b      	uxth	r3, r3
 801945c:	021b      	lsls	r3, r3, #8
 801945e:	b29b      	uxth	r3, r3
 8019460:	7c3a      	ldrb	r2, [r7, #16]
 8019462:	4413      	add	r3, r2
 8019464:	b29a      	uxth	r2, r3
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	3304      	adds	r3, #4
 801946a:	b212      	sxth	r2, r2
 801946c:	801a      	strh	r2, [r3, #0]

  return ret;
 801946e:	697b      	ldr	r3, [r7, #20]
}
 8019470:	4618      	mov	r0, r3
 8019472:	3718      	adds	r7, #24
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}

08019478 <asm330lhh_acceleration_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 8019478:	b580      	push	{r7, lr}
 801947a:	b086      	sub	sp, #24
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
 8019480:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_A, buff, 6);
 8019482:	f107 020c 	add.w	r2, r7, #12
 8019486:	2306      	movs	r3, #6
 8019488:	2128      	movs	r1, #40	@ 0x28
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f7ff fea4 	bl	80191d8 <asm330lhh_read_reg>
 8019490:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 8019492:	7b7b      	ldrb	r3, [r7, #13]
 8019494:	b21a      	sxth	r2, r3
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801949a:	683b      	ldr	r3, [r7, #0]
 801949c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	021b      	lsls	r3, r3, #8
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	7b3a      	ldrb	r2, [r7, #12]
 80194a8:	4413      	add	r3, r2
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	b21a      	sxth	r2, r3
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80194b2:	7bfa      	ldrb	r2, [r7, #15]
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	3302      	adds	r3, #2
 80194b8:	b212      	sxth	r2, r2
 80194ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	3302      	adds	r3, #2
 80194c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	021b      	lsls	r3, r3, #8
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	7bba      	ldrb	r2, [r7, #14]
 80194cc:	4413      	add	r3, r2
 80194ce:	b29a      	uxth	r2, r3
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	3302      	adds	r3, #2
 80194d4:	b212      	sxth	r2, r2
 80194d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80194d8:	7c7a      	ldrb	r2, [r7, #17]
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	3304      	adds	r3, #4
 80194de:	b212      	sxth	r2, r2
 80194e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	3304      	adds	r3, #4
 80194e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194ea:	b29b      	uxth	r3, r3
 80194ec:	021b      	lsls	r3, r3, #8
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	7c3a      	ldrb	r2, [r7, #16]
 80194f2:	4413      	add	r3, r2
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	3304      	adds	r3, #4
 80194fa:	b212      	sxth	r2, r2
 80194fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80194fe:	697b      	ldr	r3, [r7, #20]
}
 8019500:	4618      	mov	r0, r3
 8019502:	3718      	adds	r7, #24
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}

08019508 <asm330lhh_device_conf_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of device_conf in reg CTRL9_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_conf_set(const stmdev_ctx_t *ctx, uint8_t val) {
 8019508:	b580      	push	{r7, lr}
 801950a:	b084      	sub	sp, #16
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
 8019510:	460b      	mov	r3, r1
 8019512:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8019514:	f107 0208 	add.w	r2, r7, #8
 8019518:	2301      	movs	r3, #1
 801951a:	2118      	movs	r1, #24
 801951c:	6878      	ldr	r0, [r7, #4]
 801951e:	f7ff fe5b 	bl	80191d8 <asm330lhh_read_reg>
 8019522:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d10f      	bne.n	801954a <asm330lhh_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 801952a:	78fb      	ldrb	r3, [r7, #3]
 801952c:	f003 0301 	and.w	r3, r3, #1
 8019530:	b2da      	uxtb	r2, r3
 8019532:	7a3b      	ldrb	r3, [r7, #8]
 8019534:	f362 0341 	bfi	r3, r2, #1, #1
 8019538:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 801953a:	f107 0208 	add.w	r2, r7, #8
 801953e:	2301      	movs	r3, #1
 8019540:	2118      	movs	r1, #24
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f7ff fe66 	bl	8019214 <asm330lhh_write_reg>
 8019548:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801954a:	68fb      	ldr	r3, [r7, #12]
}
 801954c:	4618      	mov	r0, r3
 801954e:	3710      	adds	r7, #16
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}

08019554 <asm330lhh_data_ready_mode_set>:
 *                reg COUNTER_BDR_REG1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_data_ready_mode_set(const stmdev_ctx_t *ctx,
                                      asm330lhh_dataready_pulsed_t val) {
 8019554:	b580      	push	{r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	460b      	mov	r3, r1
 801955e:	70fb      	strb	r3, [r7, #3]
  asm330lhh_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 8019560:	f107 0208 	add.w	r2, r7, #8
 8019564:	2301      	movs	r3, #1
 8019566:	210b      	movs	r1, #11
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7ff fe35 	bl	80191d8 <asm330lhh_read_reg>
 801956e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0) {
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d10f      	bne.n	8019596 <asm330lhh_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 8019576:	78fb      	ldrb	r3, [r7, #3]
 8019578:	f003 0301 	and.w	r3, r3, #1
 801957c:	b2da      	uxtb	r2, r3
 801957e:	7a3b      	ldrb	r3, [r7, #8]
 8019580:	f362 13c7 	bfi	r3, r2, #7, #1
 8019584:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 8019586:	f107 0208 	add.w	r2, r7, #8
 801958a:	2301      	movs	r3, #1
 801958c:	210b      	movs	r1, #11
 801958e:	6878      	ldr	r0, [r7, #4]
 8019590:	f7ff fe40 	bl	8019214 <asm330lhh_write_reg>
 8019594:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&counter_bdr_reg1, 1);
  }
  return ret;
 8019596:	68fb      	ldr	r3, [r7, #12]
}
 8019598:	4618      	mov	r0, r3
 801959a:	3710      	adds	r7, #16
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}

080195a0 <asm330lhh_device_id_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff) {
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b084      	sub	sp, #16
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
 80195a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_WHO_AM_I, buff, 1);
 80195aa:	2301      	movs	r3, #1
 80195ac:	683a      	ldr	r2, [r7, #0]
 80195ae:	210f      	movs	r1, #15
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f7ff fe11 	bl	80191d8 <asm330lhh_read_reg>
 80195b6:	60f8      	str	r0, [r7, #12]
  return ret;
 80195b8:	68fb      	ldr	r3, [r7, #12]
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	3710      	adds	r7, #16
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}

080195c2 <asm330lhh_reset_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_set(const stmdev_ctx_t *ctx, uint8_t val) {
 80195c2:	b580      	push	{r7, lr}
 80195c4:	b084      	sub	sp, #16
 80195c6:	af00      	add	r7, sp, #0
 80195c8:	6078      	str	r0, [r7, #4]
 80195ca:	460b      	mov	r3, r1
 80195cc:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80195ce:	f107 0208 	add.w	r2, r7, #8
 80195d2:	2301      	movs	r3, #1
 80195d4:	2112      	movs	r1, #18
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f7ff fdfe 	bl	80191d8 <asm330lhh_read_reg>
 80195dc:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d10f      	bne.n	8019604 <asm330lhh_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 80195e4:	78fb      	ldrb	r3, [r7, #3]
 80195e6:	f003 0301 	and.w	r3, r3, #1
 80195ea:	b2da      	uxtb	r2, r3
 80195ec:	7a3b      	ldrb	r3, [r7, #8]
 80195ee:	f362 0300 	bfi	r3, r2, #0, #1
 80195f2:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80195f4:	f107 0208 	add.w	r2, r7, #8
 80195f8:	2301      	movs	r3, #1
 80195fa:	2112      	movs	r1, #18
 80195fc:	6878      	ldr	r0, [r7, #4]
 80195fe:	f7ff fe09 	bl	8019214 <asm330lhh_write_reg>
 8019602:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019604:	68fb      	ldr	r3, [r7, #12]
}
 8019606:	4618      	mov	r0, r3
 8019608:	3710      	adds	r7, #16
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <asm330lhh_reset_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val) {
 801960e:	b580      	push	{r7, lr}
 8019610:	b084      	sub	sp, #16
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
 8019616:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8019618:	f107 0208 	add.w	r2, r7, #8
 801961c:	2301      	movs	r3, #1
 801961e:	2112      	movs	r1, #18
 8019620:	6878      	ldr	r0, [r7, #4]
 8019622:	f7ff fdd9 	bl	80191d8 <asm330lhh_read_reg>
 8019626:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8019628:	7a3b      	ldrb	r3, [r7, #8]
 801962a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801962e:	b2db      	uxtb	r3, r3
 8019630:	461a      	mov	r2, r3
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	701a      	strb	r2, [r3, #0]

  return ret;
 8019636:	68fb      	ldr	r3, [r7, #12]
}
 8019638:	4618      	mov	r0, r3
 801963a:	3710      	adds	r7, #16
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}

08019640 <asm330lhh_pin_int1_route_set>:
 *                  MD1_CFG, EMB_FUNC_INT1, FSM_INT1_A,
 *                  FSM_INT1_B
 *
 */
int32_t asm330lhh_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                     asm330lhh_pin_int1_route_t *val) {
 8019640:	b580      	push	{r7, lr}
 8019642:	b084      	sub	sp, #16
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	6039      	str	r1, [r7, #0]
  asm330lhh_int_cfg1_t int_cfg1;
  int32_t ret;

  ret =
      asm330lhh_write_reg(ctx, ASM330LHH_MD1_CFG, (uint8_t *)&val->md1_cfg, 1);
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	1c5a      	adds	r2, r3, #1
 801964e:	2301      	movs	r3, #1
 8019650:	215e      	movs	r1, #94	@ 0x5e
 8019652:	6878      	ldr	r0, [r7, #4]
 8019654:	f7ff fdde 	bl	8019214 <asm330lhh_write_reg>
 8019658:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d107      	bne.n	8019670 <asm330lhh_pin_int1_route_set+0x30>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 8019660:	f107 0208 	add.w	r2, r7, #8
 8019664:	2301      	movs	r3, #1
 8019666:	2158      	movs	r1, #88	@ 0x58
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7ff fdb5 	bl	80191d8 <asm330lhh_read_reg>
 801966e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d16a      	bne.n	801974c <asm330lhh_pin_int1_route_set+0x10c>
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	781b      	ldrb	r3, [r3, #0]
 801967a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801967e:	b2da      	uxtb	r2, r3
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	781b      	ldrb	r3, [r3, #0]
 8019684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019688:	b2db      	uxtb	r3, r3
 801968a:	4313      	orrs	r3, r2
 801968c:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019696:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 8019698:	4313      	orrs	r3, r2
 801969a:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80196a4:	b2db      	uxtb	r3, r3
 80196a6:	4313      	orrs	r3, r2
 80196a8:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80196b2:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 80196b4:	4313      	orrs	r3, r2
 80196b6:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	781b      	ldrb	r3, [r3, #0]
 80196bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80196c0:	b2db      	uxtb	r3, r3
 80196c2:	4313      	orrs	r3, r2
 80196c4:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80196c6:	683b      	ldr	r3, [r7, #0]
 80196c8:	781b      	ldrb	r3, [r3, #0]
 80196ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80196ce:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80196d0:	4313      	orrs	r3, r2
 80196d2:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80196dc:	b2db      	uxtb	r3, r3
 80196de:	4313      	orrs	r3, r2
 80196e0:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	785b      	ldrb	r3, [r3, #1]
 80196e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80196ea:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80196ec:	4313      	orrs	r3, r2
 80196ee:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	785b      	ldrb	r3, [r3, #1]
 80196f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80196f8:	b2db      	uxtb	r3, r3
 80196fa:	4313      	orrs	r3, r2
 80196fc:	b2da      	uxtb	r2, r3
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	785b      	ldrb	r3, [r3, #1]
 8019702:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019706:	b2db      	uxtb	r3, r3
 8019708:	4313      	orrs	r3, r2
 801970a:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE) {
 801970c:	683b      	ldr	r3, [r7, #0]
 801970e:	785b      	ldrb	r3, [r3, #1]
 8019710:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8019714:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 8019716:	4313      	orrs	r3, r2
 8019718:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 801971a:	2b00      	cmp	r3, #0
 801971c:	d00a      	beq.n	8019734 <asm330lhh_pin_int1_route_set+0xf4>
      int_cfg1.interrupts_enable = PROPERTY_ENABLE;
 801971e:	7a3b      	ldrb	r3, [r7, #8]
 8019720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019724:	723b      	strb	r3, [r7, #8]
      asm330lhh_write_reg(ctx, ASM330LHH_INT1_CTRL, (uint8_t *)&val->int1_ctrl,
 8019726:	683a      	ldr	r2, [r7, #0]
 8019728:	2301      	movs	r3, #1
 801972a:	210d      	movs	r1, #13
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7ff fd71 	bl	8019214 <asm330lhh_write_reg>
 8019732:	e003      	b.n	801973c <asm330lhh_pin_int1_route_set+0xfc>
                          1);
    } else {
      int_cfg1.interrupts_enable = PROPERTY_DISABLE;
 8019734:	7a3b      	ldrb	r3, [r7, #8]
 8019736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801973a:	723b      	strb	r3, [r7, #8]
    }
    ret = asm330lhh_write_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 801973c:	f107 0208 	add.w	r2, r7, #8
 8019740:	2301      	movs	r3, #1
 8019742:	2158      	movs	r1, #88	@ 0x58
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f7ff fd65 	bl	8019214 <asm330lhh_write_reg>
 801974a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801974c:	68fb      	ldr	r3, [r7, #12]
}
 801974e:	4618      	mov	r0, r3
 8019750:	3710      	adds	r7, #16
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
	...

08019758 <std>:
 8019758:	2300      	movs	r3, #0
 801975a:	b510      	push	{r4, lr}
 801975c:	4604      	mov	r4, r0
 801975e:	e9c0 3300 	strd	r3, r3, [r0]
 8019762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019766:	6083      	str	r3, [r0, #8]
 8019768:	8181      	strh	r1, [r0, #12]
 801976a:	6643      	str	r3, [r0, #100]	@ 0x64
 801976c:	81c2      	strh	r2, [r0, #14]
 801976e:	6183      	str	r3, [r0, #24]
 8019770:	4619      	mov	r1, r3
 8019772:	2208      	movs	r2, #8
 8019774:	305c      	adds	r0, #92	@ 0x5c
 8019776:	f000 f9f9 	bl	8019b6c <memset>
 801977a:	4b0d      	ldr	r3, [pc, #52]	@ (80197b0 <std+0x58>)
 801977c:	6263      	str	r3, [r4, #36]	@ 0x24
 801977e:	4b0d      	ldr	r3, [pc, #52]	@ (80197b4 <std+0x5c>)
 8019780:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019782:	4b0d      	ldr	r3, [pc, #52]	@ (80197b8 <std+0x60>)
 8019784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019786:	4b0d      	ldr	r3, [pc, #52]	@ (80197bc <std+0x64>)
 8019788:	6323      	str	r3, [r4, #48]	@ 0x30
 801978a:	4b0d      	ldr	r3, [pc, #52]	@ (80197c0 <std+0x68>)
 801978c:	6224      	str	r4, [r4, #32]
 801978e:	429c      	cmp	r4, r3
 8019790:	d006      	beq.n	80197a0 <std+0x48>
 8019792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019796:	4294      	cmp	r4, r2
 8019798:	d002      	beq.n	80197a0 <std+0x48>
 801979a:	33d0      	adds	r3, #208	@ 0xd0
 801979c:	429c      	cmp	r4, r3
 801979e:	d105      	bne.n	80197ac <std+0x54>
 80197a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80197a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197a8:	f000 bab6 	b.w	8019d18 <__retarget_lock_init_recursive>
 80197ac:	bd10      	pop	{r4, pc}
 80197ae:	bf00      	nop
 80197b0:	080199bd 	.word	0x080199bd
 80197b4:	080199df 	.word	0x080199df
 80197b8:	08019a17 	.word	0x08019a17
 80197bc:	08019a3b 	.word	0x08019a3b
 80197c0:	240229e4 	.word	0x240229e4

080197c4 <stdio_exit_handler>:
 80197c4:	4a02      	ldr	r2, [pc, #8]	@ (80197d0 <stdio_exit_handler+0xc>)
 80197c6:	4903      	ldr	r1, [pc, #12]	@ (80197d4 <stdio_exit_handler+0x10>)
 80197c8:	4803      	ldr	r0, [pc, #12]	@ (80197d8 <stdio_exit_handler+0x14>)
 80197ca:	f000 b869 	b.w	80198a0 <_fwalk_sglue>
 80197ce:	bf00      	nop
 80197d0:	2400001c 	.word	0x2400001c
 80197d4:	0801a5d1 	.word	0x0801a5d1
 80197d8:	2400002c 	.word	0x2400002c

080197dc <cleanup_stdio>:
 80197dc:	6841      	ldr	r1, [r0, #4]
 80197de:	4b0c      	ldr	r3, [pc, #48]	@ (8019810 <cleanup_stdio+0x34>)
 80197e0:	4299      	cmp	r1, r3
 80197e2:	b510      	push	{r4, lr}
 80197e4:	4604      	mov	r4, r0
 80197e6:	d001      	beq.n	80197ec <cleanup_stdio+0x10>
 80197e8:	f000 fef2 	bl	801a5d0 <_fflush_r>
 80197ec:	68a1      	ldr	r1, [r4, #8]
 80197ee:	4b09      	ldr	r3, [pc, #36]	@ (8019814 <cleanup_stdio+0x38>)
 80197f0:	4299      	cmp	r1, r3
 80197f2:	d002      	beq.n	80197fa <cleanup_stdio+0x1e>
 80197f4:	4620      	mov	r0, r4
 80197f6:	f000 feeb 	bl	801a5d0 <_fflush_r>
 80197fa:	68e1      	ldr	r1, [r4, #12]
 80197fc:	4b06      	ldr	r3, [pc, #24]	@ (8019818 <cleanup_stdio+0x3c>)
 80197fe:	4299      	cmp	r1, r3
 8019800:	d004      	beq.n	801980c <cleanup_stdio+0x30>
 8019802:	4620      	mov	r0, r4
 8019804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019808:	f000 bee2 	b.w	801a5d0 <_fflush_r>
 801980c:	bd10      	pop	{r4, pc}
 801980e:	bf00      	nop
 8019810:	240229e4 	.word	0x240229e4
 8019814:	24022a4c 	.word	0x24022a4c
 8019818:	24022ab4 	.word	0x24022ab4

0801981c <global_stdio_init.part.0>:
 801981c:	b510      	push	{r4, lr}
 801981e:	4b0b      	ldr	r3, [pc, #44]	@ (801984c <global_stdio_init.part.0+0x30>)
 8019820:	4c0b      	ldr	r4, [pc, #44]	@ (8019850 <global_stdio_init.part.0+0x34>)
 8019822:	4a0c      	ldr	r2, [pc, #48]	@ (8019854 <global_stdio_init.part.0+0x38>)
 8019824:	601a      	str	r2, [r3, #0]
 8019826:	4620      	mov	r0, r4
 8019828:	2200      	movs	r2, #0
 801982a:	2104      	movs	r1, #4
 801982c:	f7ff ff94 	bl	8019758 <std>
 8019830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019834:	2201      	movs	r2, #1
 8019836:	2109      	movs	r1, #9
 8019838:	f7ff ff8e 	bl	8019758 <std>
 801983c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019840:	2202      	movs	r2, #2
 8019842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019846:	2112      	movs	r1, #18
 8019848:	f7ff bf86 	b.w	8019758 <std>
 801984c:	24022b1c 	.word	0x24022b1c
 8019850:	240229e4 	.word	0x240229e4
 8019854:	080197c5 	.word	0x080197c5

08019858 <__sfp_lock_acquire>:
 8019858:	4801      	ldr	r0, [pc, #4]	@ (8019860 <__sfp_lock_acquire+0x8>)
 801985a:	f000 ba5e 	b.w	8019d1a <__retarget_lock_acquire_recursive>
 801985e:	bf00      	nop
 8019860:	24022b25 	.word	0x24022b25

08019864 <__sfp_lock_release>:
 8019864:	4801      	ldr	r0, [pc, #4]	@ (801986c <__sfp_lock_release+0x8>)
 8019866:	f000 ba59 	b.w	8019d1c <__retarget_lock_release_recursive>
 801986a:	bf00      	nop
 801986c:	24022b25 	.word	0x24022b25

08019870 <__sinit>:
 8019870:	b510      	push	{r4, lr}
 8019872:	4604      	mov	r4, r0
 8019874:	f7ff fff0 	bl	8019858 <__sfp_lock_acquire>
 8019878:	6a23      	ldr	r3, [r4, #32]
 801987a:	b11b      	cbz	r3, 8019884 <__sinit+0x14>
 801987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019880:	f7ff bff0 	b.w	8019864 <__sfp_lock_release>
 8019884:	4b04      	ldr	r3, [pc, #16]	@ (8019898 <__sinit+0x28>)
 8019886:	6223      	str	r3, [r4, #32]
 8019888:	4b04      	ldr	r3, [pc, #16]	@ (801989c <__sinit+0x2c>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d1f5      	bne.n	801987c <__sinit+0xc>
 8019890:	f7ff ffc4 	bl	801981c <global_stdio_init.part.0>
 8019894:	e7f2      	b.n	801987c <__sinit+0xc>
 8019896:	bf00      	nop
 8019898:	080197dd 	.word	0x080197dd
 801989c:	24022b1c 	.word	0x24022b1c

080198a0 <_fwalk_sglue>:
 80198a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198a4:	4607      	mov	r7, r0
 80198a6:	4688      	mov	r8, r1
 80198a8:	4614      	mov	r4, r2
 80198aa:	2600      	movs	r6, #0
 80198ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198b0:	f1b9 0901 	subs.w	r9, r9, #1
 80198b4:	d505      	bpl.n	80198c2 <_fwalk_sglue+0x22>
 80198b6:	6824      	ldr	r4, [r4, #0]
 80198b8:	2c00      	cmp	r4, #0
 80198ba:	d1f7      	bne.n	80198ac <_fwalk_sglue+0xc>
 80198bc:	4630      	mov	r0, r6
 80198be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198c2:	89ab      	ldrh	r3, [r5, #12]
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d907      	bls.n	80198d8 <_fwalk_sglue+0x38>
 80198c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198cc:	3301      	adds	r3, #1
 80198ce:	d003      	beq.n	80198d8 <_fwalk_sglue+0x38>
 80198d0:	4629      	mov	r1, r5
 80198d2:	4638      	mov	r0, r7
 80198d4:	47c0      	blx	r8
 80198d6:	4306      	orrs	r6, r0
 80198d8:	3568      	adds	r5, #104	@ 0x68
 80198da:	e7e9      	b.n	80198b0 <_fwalk_sglue+0x10>

080198dc <iprintf>:
 80198dc:	b40f      	push	{r0, r1, r2, r3}
 80198de:	b507      	push	{r0, r1, r2, lr}
 80198e0:	4906      	ldr	r1, [pc, #24]	@ (80198fc <iprintf+0x20>)
 80198e2:	ab04      	add	r3, sp, #16
 80198e4:	6808      	ldr	r0, [r1, #0]
 80198e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80198ea:	6881      	ldr	r1, [r0, #8]
 80198ec:	9301      	str	r3, [sp, #4]
 80198ee:	f000 fb47 	bl	8019f80 <_vfiprintf_r>
 80198f2:	b003      	add	sp, #12
 80198f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80198f8:	b004      	add	sp, #16
 80198fa:	4770      	bx	lr
 80198fc:	24000028 	.word	0x24000028

08019900 <_puts_r>:
 8019900:	6a03      	ldr	r3, [r0, #32]
 8019902:	b570      	push	{r4, r5, r6, lr}
 8019904:	6884      	ldr	r4, [r0, #8]
 8019906:	4605      	mov	r5, r0
 8019908:	460e      	mov	r6, r1
 801990a:	b90b      	cbnz	r3, 8019910 <_puts_r+0x10>
 801990c:	f7ff ffb0 	bl	8019870 <__sinit>
 8019910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019912:	07db      	lsls	r3, r3, #31
 8019914:	d405      	bmi.n	8019922 <_puts_r+0x22>
 8019916:	89a3      	ldrh	r3, [r4, #12]
 8019918:	0598      	lsls	r0, r3, #22
 801991a:	d402      	bmi.n	8019922 <_puts_r+0x22>
 801991c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801991e:	f000 f9fc 	bl	8019d1a <__retarget_lock_acquire_recursive>
 8019922:	89a3      	ldrh	r3, [r4, #12]
 8019924:	0719      	lsls	r1, r3, #28
 8019926:	d502      	bpl.n	801992e <_puts_r+0x2e>
 8019928:	6923      	ldr	r3, [r4, #16]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d135      	bne.n	801999a <_puts_r+0x9a>
 801992e:	4621      	mov	r1, r4
 8019930:	4628      	mov	r0, r5
 8019932:	f000 f8c5 	bl	8019ac0 <__swsetup_r>
 8019936:	b380      	cbz	r0, 801999a <_puts_r+0x9a>
 8019938:	f04f 35ff 	mov.w	r5, #4294967295
 801993c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801993e:	07da      	lsls	r2, r3, #31
 8019940:	d405      	bmi.n	801994e <_puts_r+0x4e>
 8019942:	89a3      	ldrh	r3, [r4, #12]
 8019944:	059b      	lsls	r3, r3, #22
 8019946:	d402      	bmi.n	801994e <_puts_r+0x4e>
 8019948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801994a:	f000 f9e7 	bl	8019d1c <__retarget_lock_release_recursive>
 801994e:	4628      	mov	r0, r5
 8019950:	bd70      	pop	{r4, r5, r6, pc}
 8019952:	2b00      	cmp	r3, #0
 8019954:	da04      	bge.n	8019960 <_puts_r+0x60>
 8019956:	69a2      	ldr	r2, [r4, #24]
 8019958:	429a      	cmp	r2, r3
 801995a:	dc17      	bgt.n	801998c <_puts_r+0x8c>
 801995c:	290a      	cmp	r1, #10
 801995e:	d015      	beq.n	801998c <_puts_r+0x8c>
 8019960:	6823      	ldr	r3, [r4, #0]
 8019962:	1c5a      	adds	r2, r3, #1
 8019964:	6022      	str	r2, [r4, #0]
 8019966:	7019      	strb	r1, [r3, #0]
 8019968:	68a3      	ldr	r3, [r4, #8]
 801996a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801996e:	3b01      	subs	r3, #1
 8019970:	60a3      	str	r3, [r4, #8]
 8019972:	2900      	cmp	r1, #0
 8019974:	d1ed      	bne.n	8019952 <_puts_r+0x52>
 8019976:	2b00      	cmp	r3, #0
 8019978:	da11      	bge.n	801999e <_puts_r+0x9e>
 801997a:	4622      	mov	r2, r4
 801997c:	210a      	movs	r1, #10
 801997e:	4628      	mov	r0, r5
 8019980:	f000 f85f 	bl	8019a42 <__swbuf_r>
 8019984:	3001      	adds	r0, #1
 8019986:	d0d7      	beq.n	8019938 <_puts_r+0x38>
 8019988:	250a      	movs	r5, #10
 801998a:	e7d7      	b.n	801993c <_puts_r+0x3c>
 801998c:	4622      	mov	r2, r4
 801998e:	4628      	mov	r0, r5
 8019990:	f000 f857 	bl	8019a42 <__swbuf_r>
 8019994:	3001      	adds	r0, #1
 8019996:	d1e7      	bne.n	8019968 <_puts_r+0x68>
 8019998:	e7ce      	b.n	8019938 <_puts_r+0x38>
 801999a:	3e01      	subs	r6, #1
 801999c:	e7e4      	b.n	8019968 <_puts_r+0x68>
 801999e:	6823      	ldr	r3, [r4, #0]
 80199a0:	1c5a      	adds	r2, r3, #1
 80199a2:	6022      	str	r2, [r4, #0]
 80199a4:	220a      	movs	r2, #10
 80199a6:	701a      	strb	r2, [r3, #0]
 80199a8:	e7ee      	b.n	8019988 <_puts_r+0x88>
	...

080199ac <puts>:
 80199ac:	4b02      	ldr	r3, [pc, #8]	@ (80199b8 <puts+0xc>)
 80199ae:	4601      	mov	r1, r0
 80199b0:	6818      	ldr	r0, [r3, #0]
 80199b2:	f7ff bfa5 	b.w	8019900 <_puts_r>
 80199b6:	bf00      	nop
 80199b8:	24000028 	.word	0x24000028

080199bc <__sread>:
 80199bc:	b510      	push	{r4, lr}
 80199be:	460c      	mov	r4, r1
 80199c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199c4:	f000 f95a 	bl	8019c7c <_read_r>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	bfab      	itete	ge
 80199cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80199ce:	89a3      	ldrhlt	r3, [r4, #12]
 80199d0:	181b      	addge	r3, r3, r0
 80199d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80199d6:	bfac      	ite	ge
 80199d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80199da:	81a3      	strhlt	r3, [r4, #12]
 80199dc:	bd10      	pop	{r4, pc}

080199de <__swrite>:
 80199de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199e2:	461f      	mov	r7, r3
 80199e4:	898b      	ldrh	r3, [r1, #12]
 80199e6:	05db      	lsls	r3, r3, #23
 80199e8:	4605      	mov	r5, r0
 80199ea:	460c      	mov	r4, r1
 80199ec:	4616      	mov	r6, r2
 80199ee:	d505      	bpl.n	80199fc <__swrite+0x1e>
 80199f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199f4:	2302      	movs	r3, #2
 80199f6:	2200      	movs	r2, #0
 80199f8:	f000 f92e 	bl	8019c58 <_lseek_r>
 80199fc:	89a3      	ldrh	r3, [r4, #12]
 80199fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019a06:	81a3      	strh	r3, [r4, #12]
 8019a08:	4632      	mov	r2, r6
 8019a0a:	463b      	mov	r3, r7
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a12:	f000 b945 	b.w	8019ca0 <_write_r>

08019a16 <__sseek>:
 8019a16:	b510      	push	{r4, lr}
 8019a18:	460c      	mov	r4, r1
 8019a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a1e:	f000 f91b 	bl	8019c58 <_lseek_r>
 8019a22:	1c43      	adds	r3, r0, #1
 8019a24:	89a3      	ldrh	r3, [r4, #12]
 8019a26:	bf15      	itete	ne
 8019a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019a32:	81a3      	strheq	r3, [r4, #12]
 8019a34:	bf18      	it	ne
 8019a36:	81a3      	strhne	r3, [r4, #12]
 8019a38:	bd10      	pop	{r4, pc}

08019a3a <__sclose>:
 8019a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a3e:	f000 b89d 	b.w	8019b7c <_close_r>

08019a42 <__swbuf_r>:
 8019a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a44:	460e      	mov	r6, r1
 8019a46:	4614      	mov	r4, r2
 8019a48:	4605      	mov	r5, r0
 8019a4a:	b118      	cbz	r0, 8019a54 <__swbuf_r+0x12>
 8019a4c:	6a03      	ldr	r3, [r0, #32]
 8019a4e:	b90b      	cbnz	r3, 8019a54 <__swbuf_r+0x12>
 8019a50:	f7ff ff0e 	bl	8019870 <__sinit>
 8019a54:	69a3      	ldr	r3, [r4, #24]
 8019a56:	60a3      	str	r3, [r4, #8]
 8019a58:	89a3      	ldrh	r3, [r4, #12]
 8019a5a:	071a      	lsls	r2, r3, #28
 8019a5c:	d501      	bpl.n	8019a62 <__swbuf_r+0x20>
 8019a5e:	6923      	ldr	r3, [r4, #16]
 8019a60:	b943      	cbnz	r3, 8019a74 <__swbuf_r+0x32>
 8019a62:	4621      	mov	r1, r4
 8019a64:	4628      	mov	r0, r5
 8019a66:	f000 f82b 	bl	8019ac0 <__swsetup_r>
 8019a6a:	b118      	cbz	r0, 8019a74 <__swbuf_r+0x32>
 8019a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8019a70:	4638      	mov	r0, r7
 8019a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a74:	6823      	ldr	r3, [r4, #0]
 8019a76:	6922      	ldr	r2, [r4, #16]
 8019a78:	1a98      	subs	r0, r3, r2
 8019a7a:	6963      	ldr	r3, [r4, #20]
 8019a7c:	b2f6      	uxtb	r6, r6
 8019a7e:	4283      	cmp	r3, r0
 8019a80:	4637      	mov	r7, r6
 8019a82:	dc05      	bgt.n	8019a90 <__swbuf_r+0x4e>
 8019a84:	4621      	mov	r1, r4
 8019a86:	4628      	mov	r0, r5
 8019a88:	f000 fda2 	bl	801a5d0 <_fflush_r>
 8019a8c:	2800      	cmp	r0, #0
 8019a8e:	d1ed      	bne.n	8019a6c <__swbuf_r+0x2a>
 8019a90:	68a3      	ldr	r3, [r4, #8]
 8019a92:	3b01      	subs	r3, #1
 8019a94:	60a3      	str	r3, [r4, #8]
 8019a96:	6823      	ldr	r3, [r4, #0]
 8019a98:	1c5a      	adds	r2, r3, #1
 8019a9a:	6022      	str	r2, [r4, #0]
 8019a9c:	701e      	strb	r6, [r3, #0]
 8019a9e:	6962      	ldr	r2, [r4, #20]
 8019aa0:	1c43      	adds	r3, r0, #1
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d004      	beq.n	8019ab0 <__swbuf_r+0x6e>
 8019aa6:	89a3      	ldrh	r3, [r4, #12]
 8019aa8:	07db      	lsls	r3, r3, #31
 8019aaa:	d5e1      	bpl.n	8019a70 <__swbuf_r+0x2e>
 8019aac:	2e0a      	cmp	r6, #10
 8019aae:	d1df      	bne.n	8019a70 <__swbuf_r+0x2e>
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	4628      	mov	r0, r5
 8019ab4:	f000 fd8c 	bl	801a5d0 <_fflush_r>
 8019ab8:	2800      	cmp	r0, #0
 8019aba:	d0d9      	beq.n	8019a70 <__swbuf_r+0x2e>
 8019abc:	e7d6      	b.n	8019a6c <__swbuf_r+0x2a>
	...

08019ac0 <__swsetup_r>:
 8019ac0:	b538      	push	{r3, r4, r5, lr}
 8019ac2:	4b29      	ldr	r3, [pc, #164]	@ (8019b68 <__swsetup_r+0xa8>)
 8019ac4:	4605      	mov	r5, r0
 8019ac6:	6818      	ldr	r0, [r3, #0]
 8019ac8:	460c      	mov	r4, r1
 8019aca:	b118      	cbz	r0, 8019ad4 <__swsetup_r+0x14>
 8019acc:	6a03      	ldr	r3, [r0, #32]
 8019ace:	b90b      	cbnz	r3, 8019ad4 <__swsetup_r+0x14>
 8019ad0:	f7ff fece 	bl	8019870 <__sinit>
 8019ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ad8:	0719      	lsls	r1, r3, #28
 8019ada:	d422      	bmi.n	8019b22 <__swsetup_r+0x62>
 8019adc:	06da      	lsls	r2, r3, #27
 8019ade:	d407      	bmi.n	8019af0 <__swsetup_r+0x30>
 8019ae0:	2209      	movs	r2, #9
 8019ae2:	602a      	str	r2, [r5, #0]
 8019ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ae8:	81a3      	strh	r3, [r4, #12]
 8019aea:	f04f 30ff 	mov.w	r0, #4294967295
 8019aee:	e033      	b.n	8019b58 <__swsetup_r+0x98>
 8019af0:	0758      	lsls	r0, r3, #29
 8019af2:	d512      	bpl.n	8019b1a <__swsetup_r+0x5a>
 8019af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019af6:	b141      	cbz	r1, 8019b0a <__swsetup_r+0x4a>
 8019af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019afc:	4299      	cmp	r1, r3
 8019afe:	d002      	beq.n	8019b06 <__swsetup_r+0x46>
 8019b00:	4628      	mov	r0, r5
 8019b02:	f000 f91b 	bl	8019d3c <_free_r>
 8019b06:	2300      	movs	r3, #0
 8019b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b0a:	89a3      	ldrh	r3, [r4, #12]
 8019b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019b10:	81a3      	strh	r3, [r4, #12]
 8019b12:	2300      	movs	r3, #0
 8019b14:	6063      	str	r3, [r4, #4]
 8019b16:	6923      	ldr	r3, [r4, #16]
 8019b18:	6023      	str	r3, [r4, #0]
 8019b1a:	89a3      	ldrh	r3, [r4, #12]
 8019b1c:	f043 0308 	orr.w	r3, r3, #8
 8019b20:	81a3      	strh	r3, [r4, #12]
 8019b22:	6923      	ldr	r3, [r4, #16]
 8019b24:	b94b      	cbnz	r3, 8019b3a <__swsetup_r+0x7a>
 8019b26:	89a3      	ldrh	r3, [r4, #12]
 8019b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019b30:	d003      	beq.n	8019b3a <__swsetup_r+0x7a>
 8019b32:	4621      	mov	r1, r4
 8019b34:	4628      	mov	r0, r5
 8019b36:	f000 fd99 	bl	801a66c <__smakebuf_r>
 8019b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b3e:	f013 0201 	ands.w	r2, r3, #1
 8019b42:	d00a      	beq.n	8019b5a <__swsetup_r+0x9a>
 8019b44:	2200      	movs	r2, #0
 8019b46:	60a2      	str	r2, [r4, #8]
 8019b48:	6962      	ldr	r2, [r4, #20]
 8019b4a:	4252      	negs	r2, r2
 8019b4c:	61a2      	str	r2, [r4, #24]
 8019b4e:	6922      	ldr	r2, [r4, #16]
 8019b50:	b942      	cbnz	r2, 8019b64 <__swsetup_r+0xa4>
 8019b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b56:	d1c5      	bne.n	8019ae4 <__swsetup_r+0x24>
 8019b58:	bd38      	pop	{r3, r4, r5, pc}
 8019b5a:	0799      	lsls	r1, r3, #30
 8019b5c:	bf58      	it	pl
 8019b5e:	6962      	ldrpl	r2, [r4, #20]
 8019b60:	60a2      	str	r2, [r4, #8]
 8019b62:	e7f4      	b.n	8019b4e <__swsetup_r+0x8e>
 8019b64:	2000      	movs	r0, #0
 8019b66:	e7f7      	b.n	8019b58 <__swsetup_r+0x98>
 8019b68:	24000028 	.word	0x24000028

08019b6c <memset>:
 8019b6c:	4402      	add	r2, r0
 8019b6e:	4603      	mov	r3, r0
 8019b70:	4293      	cmp	r3, r2
 8019b72:	d100      	bne.n	8019b76 <memset+0xa>
 8019b74:	4770      	bx	lr
 8019b76:	f803 1b01 	strb.w	r1, [r3], #1
 8019b7a:	e7f9      	b.n	8019b70 <memset+0x4>

08019b7c <_close_r>:
 8019b7c:	b538      	push	{r3, r4, r5, lr}
 8019b7e:	4d06      	ldr	r5, [pc, #24]	@ (8019b98 <_close_r+0x1c>)
 8019b80:	2300      	movs	r3, #0
 8019b82:	4604      	mov	r4, r0
 8019b84:	4608      	mov	r0, r1
 8019b86:	602b      	str	r3, [r5, #0]
 8019b88:	f7e8 fb05 	bl	8002196 <_close>
 8019b8c:	1c43      	adds	r3, r0, #1
 8019b8e:	d102      	bne.n	8019b96 <_close_r+0x1a>
 8019b90:	682b      	ldr	r3, [r5, #0]
 8019b92:	b103      	cbz	r3, 8019b96 <_close_r+0x1a>
 8019b94:	6023      	str	r3, [r4, #0]
 8019b96:	bd38      	pop	{r3, r4, r5, pc}
 8019b98:	24022b20 	.word	0x24022b20

08019b9c <_reclaim_reent>:
 8019b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8019c54 <_reclaim_reent+0xb8>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	4283      	cmp	r3, r0
 8019ba2:	b570      	push	{r4, r5, r6, lr}
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	d053      	beq.n	8019c50 <_reclaim_reent+0xb4>
 8019ba8:	69c3      	ldr	r3, [r0, #28]
 8019baa:	b31b      	cbz	r3, 8019bf4 <_reclaim_reent+0x58>
 8019bac:	68db      	ldr	r3, [r3, #12]
 8019bae:	b163      	cbz	r3, 8019bca <_reclaim_reent+0x2e>
 8019bb0:	2500      	movs	r5, #0
 8019bb2:	69e3      	ldr	r3, [r4, #28]
 8019bb4:	68db      	ldr	r3, [r3, #12]
 8019bb6:	5959      	ldr	r1, [r3, r5]
 8019bb8:	b9b1      	cbnz	r1, 8019be8 <_reclaim_reent+0x4c>
 8019bba:	3504      	adds	r5, #4
 8019bbc:	2d80      	cmp	r5, #128	@ 0x80
 8019bbe:	d1f8      	bne.n	8019bb2 <_reclaim_reent+0x16>
 8019bc0:	69e3      	ldr	r3, [r4, #28]
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	68d9      	ldr	r1, [r3, #12]
 8019bc6:	f000 f8b9 	bl	8019d3c <_free_r>
 8019bca:	69e3      	ldr	r3, [r4, #28]
 8019bcc:	6819      	ldr	r1, [r3, #0]
 8019bce:	b111      	cbz	r1, 8019bd6 <_reclaim_reent+0x3a>
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	f000 f8b3 	bl	8019d3c <_free_r>
 8019bd6:	69e3      	ldr	r3, [r4, #28]
 8019bd8:	689d      	ldr	r5, [r3, #8]
 8019bda:	b15d      	cbz	r5, 8019bf4 <_reclaim_reent+0x58>
 8019bdc:	4629      	mov	r1, r5
 8019bde:	4620      	mov	r0, r4
 8019be0:	682d      	ldr	r5, [r5, #0]
 8019be2:	f000 f8ab 	bl	8019d3c <_free_r>
 8019be6:	e7f8      	b.n	8019bda <_reclaim_reent+0x3e>
 8019be8:	680e      	ldr	r6, [r1, #0]
 8019bea:	4620      	mov	r0, r4
 8019bec:	f000 f8a6 	bl	8019d3c <_free_r>
 8019bf0:	4631      	mov	r1, r6
 8019bf2:	e7e1      	b.n	8019bb8 <_reclaim_reent+0x1c>
 8019bf4:	6961      	ldr	r1, [r4, #20]
 8019bf6:	b111      	cbz	r1, 8019bfe <_reclaim_reent+0x62>
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	f000 f89f 	bl	8019d3c <_free_r>
 8019bfe:	69e1      	ldr	r1, [r4, #28]
 8019c00:	b111      	cbz	r1, 8019c08 <_reclaim_reent+0x6c>
 8019c02:	4620      	mov	r0, r4
 8019c04:	f000 f89a 	bl	8019d3c <_free_r>
 8019c08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019c0a:	b111      	cbz	r1, 8019c12 <_reclaim_reent+0x76>
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	f000 f895 	bl	8019d3c <_free_r>
 8019c12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c14:	b111      	cbz	r1, 8019c1c <_reclaim_reent+0x80>
 8019c16:	4620      	mov	r0, r4
 8019c18:	f000 f890 	bl	8019d3c <_free_r>
 8019c1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019c1e:	b111      	cbz	r1, 8019c26 <_reclaim_reent+0x8a>
 8019c20:	4620      	mov	r0, r4
 8019c22:	f000 f88b 	bl	8019d3c <_free_r>
 8019c26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019c28:	b111      	cbz	r1, 8019c30 <_reclaim_reent+0x94>
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f000 f886 	bl	8019d3c <_free_r>
 8019c30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019c32:	b111      	cbz	r1, 8019c3a <_reclaim_reent+0x9e>
 8019c34:	4620      	mov	r0, r4
 8019c36:	f000 f881 	bl	8019d3c <_free_r>
 8019c3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019c3c:	b111      	cbz	r1, 8019c44 <_reclaim_reent+0xa8>
 8019c3e:	4620      	mov	r0, r4
 8019c40:	f000 f87c 	bl	8019d3c <_free_r>
 8019c44:	6a23      	ldr	r3, [r4, #32]
 8019c46:	b11b      	cbz	r3, 8019c50 <_reclaim_reent+0xb4>
 8019c48:	4620      	mov	r0, r4
 8019c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c4e:	4718      	bx	r3
 8019c50:	bd70      	pop	{r4, r5, r6, pc}
 8019c52:	bf00      	nop
 8019c54:	24000028 	.word	0x24000028

08019c58 <_lseek_r>:
 8019c58:	b538      	push	{r3, r4, r5, lr}
 8019c5a:	4d07      	ldr	r5, [pc, #28]	@ (8019c78 <_lseek_r+0x20>)
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	4608      	mov	r0, r1
 8019c60:	4611      	mov	r1, r2
 8019c62:	2200      	movs	r2, #0
 8019c64:	602a      	str	r2, [r5, #0]
 8019c66:	461a      	mov	r2, r3
 8019c68:	f7e8 fabc 	bl	80021e4 <_lseek>
 8019c6c:	1c43      	adds	r3, r0, #1
 8019c6e:	d102      	bne.n	8019c76 <_lseek_r+0x1e>
 8019c70:	682b      	ldr	r3, [r5, #0]
 8019c72:	b103      	cbz	r3, 8019c76 <_lseek_r+0x1e>
 8019c74:	6023      	str	r3, [r4, #0]
 8019c76:	bd38      	pop	{r3, r4, r5, pc}
 8019c78:	24022b20 	.word	0x24022b20

08019c7c <_read_r>:
 8019c7c:	b538      	push	{r3, r4, r5, lr}
 8019c7e:	4d07      	ldr	r5, [pc, #28]	@ (8019c9c <_read_r+0x20>)
 8019c80:	4604      	mov	r4, r0
 8019c82:	4608      	mov	r0, r1
 8019c84:	4611      	mov	r1, r2
 8019c86:	2200      	movs	r2, #0
 8019c88:	602a      	str	r2, [r5, #0]
 8019c8a:	461a      	mov	r2, r3
 8019c8c:	f7e8 fa4a 	bl	8002124 <_read>
 8019c90:	1c43      	adds	r3, r0, #1
 8019c92:	d102      	bne.n	8019c9a <_read_r+0x1e>
 8019c94:	682b      	ldr	r3, [r5, #0]
 8019c96:	b103      	cbz	r3, 8019c9a <_read_r+0x1e>
 8019c98:	6023      	str	r3, [r4, #0]
 8019c9a:	bd38      	pop	{r3, r4, r5, pc}
 8019c9c:	24022b20 	.word	0x24022b20

08019ca0 <_write_r>:
 8019ca0:	b538      	push	{r3, r4, r5, lr}
 8019ca2:	4d07      	ldr	r5, [pc, #28]	@ (8019cc0 <_write_r+0x20>)
 8019ca4:	4604      	mov	r4, r0
 8019ca6:	4608      	mov	r0, r1
 8019ca8:	4611      	mov	r1, r2
 8019caa:	2200      	movs	r2, #0
 8019cac:	602a      	str	r2, [r5, #0]
 8019cae:	461a      	mov	r2, r3
 8019cb0:	f7e8 fa55 	bl	800215e <_write>
 8019cb4:	1c43      	adds	r3, r0, #1
 8019cb6:	d102      	bne.n	8019cbe <_write_r+0x1e>
 8019cb8:	682b      	ldr	r3, [r5, #0]
 8019cba:	b103      	cbz	r3, 8019cbe <_write_r+0x1e>
 8019cbc:	6023      	str	r3, [r4, #0]
 8019cbe:	bd38      	pop	{r3, r4, r5, pc}
 8019cc0:	24022b20 	.word	0x24022b20

08019cc4 <__errno>:
 8019cc4:	4b01      	ldr	r3, [pc, #4]	@ (8019ccc <__errno+0x8>)
 8019cc6:	6818      	ldr	r0, [r3, #0]
 8019cc8:	4770      	bx	lr
 8019cca:	bf00      	nop
 8019ccc:	24000028 	.word	0x24000028

08019cd0 <__libc_init_array>:
 8019cd0:	b570      	push	{r4, r5, r6, lr}
 8019cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8019d08 <__libc_init_array+0x38>)
 8019cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8019d0c <__libc_init_array+0x3c>)
 8019cd6:	1b64      	subs	r4, r4, r5
 8019cd8:	10a4      	asrs	r4, r4, #2
 8019cda:	2600      	movs	r6, #0
 8019cdc:	42a6      	cmp	r6, r4
 8019cde:	d109      	bne.n	8019cf4 <__libc_init_array+0x24>
 8019ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8019d10 <__libc_init_array+0x40>)
 8019ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8019d14 <__libc_init_array+0x44>)
 8019ce4:	f000 fd30 	bl	801a748 <_init>
 8019ce8:	1b64      	subs	r4, r4, r5
 8019cea:	10a4      	asrs	r4, r4, #2
 8019cec:	2600      	movs	r6, #0
 8019cee:	42a6      	cmp	r6, r4
 8019cf0:	d105      	bne.n	8019cfe <__libc_init_array+0x2e>
 8019cf2:	bd70      	pop	{r4, r5, r6, pc}
 8019cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cf8:	4798      	blx	r3
 8019cfa:	3601      	adds	r6, #1
 8019cfc:	e7ee      	b.n	8019cdc <__libc_init_array+0xc>
 8019cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d02:	4798      	blx	r3
 8019d04:	3601      	adds	r6, #1
 8019d06:	e7f2      	b.n	8019cee <__libc_init_array+0x1e>
 8019d08:	0801b874 	.word	0x0801b874
 8019d0c:	0801b874 	.word	0x0801b874
 8019d10:	0801b874 	.word	0x0801b874
 8019d14:	0801b878 	.word	0x0801b878

08019d18 <__retarget_lock_init_recursive>:
 8019d18:	4770      	bx	lr

08019d1a <__retarget_lock_acquire_recursive>:
 8019d1a:	4770      	bx	lr

08019d1c <__retarget_lock_release_recursive>:
 8019d1c:	4770      	bx	lr

08019d1e <memcpy>:
 8019d1e:	440a      	add	r2, r1
 8019d20:	4291      	cmp	r1, r2
 8019d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d26:	d100      	bne.n	8019d2a <memcpy+0xc>
 8019d28:	4770      	bx	lr
 8019d2a:	b510      	push	{r4, lr}
 8019d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d34:	4291      	cmp	r1, r2
 8019d36:	d1f9      	bne.n	8019d2c <memcpy+0xe>
 8019d38:	bd10      	pop	{r4, pc}
	...

08019d3c <_free_r>:
 8019d3c:	b538      	push	{r3, r4, r5, lr}
 8019d3e:	4605      	mov	r5, r0
 8019d40:	2900      	cmp	r1, #0
 8019d42:	d041      	beq.n	8019dc8 <_free_r+0x8c>
 8019d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d48:	1f0c      	subs	r4, r1, #4
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	bfb8      	it	lt
 8019d4e:	18e4      	addlt	r4, r4, r3
 8019d50:	f000 f8e0 	bl	8019f14 <__malloc_lock>
 8019d54:	4a1d      	ldr	r2, [pc, #116]	@ (8019dcc <_free_r+0x90>)
 8019d56:	6813      	ldr	r3, [r2, #0]
 8019d58:	b933      	cbnz	r3, 8019d68 <_free_r+0x2c>
 8019d5a:	6063      	str	r3, [r4, #4]
 8019d5c:	6014      	str	r4, [r2, #0]
 8019d5e:	4628      	mov	r0, r5
 8019d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d64:	f000 b8dc 	b.w	8019f20 <__malloc_unlock>
 8019d68:	42a3      	cmp	r3, r4
 8019d6a:	d908      	bls.n	8019d7e <_free_r+0x42>
 8019d6c:	6820      	ldr	r0, [r4, #0]
 8019d6e:	1821      	adds	r1, r4, r0
 8019d70:	428b      	cmp	r3, r1
 8019d72:	bf01      	itttt	eq
 8019d74:	6819      	ldreq	r1, [r3, #0]
 8019d76:	685b      	ldreq	r3, [r3, #4]
 8019d78:	1809      	addeq	r1, r1, r0
 8019d7a:	6021      	streq	r1, [r4, #0]
 8019d7c:	e7ed      	b.n	8019d5a <_free_r+0x1e>
 8019d7e:	461a      	mov	r2, r3
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	b10b      	cbz	r3, 8019d88 <_free_r+0x4c>
 8019d84:	42a3      	cmp	r3, r4
 8019d86:	d9fa      	bls.n	8019d7e <_free_r+0x42>
 8019d88:	6811      	ldr	r1, [r2, #0]
 8019d8a:	1850      	adds	r0, r2, r1
 8019d8c:	42a0      	cmp	r0, r4
 8019d8e:	d10b      	bne.n	8019da8 <_free_r+0x6c>
 8019d90:	6820      	ldr	r0, [r4, #0]
 8019d92:	4401      	add	r1, r0
 8019d94:	1850      	adds	r0, r2, r1
 8019d96:	4283      	cmp	r3, r0
 8019d98:	6011      	str	r1, [r2, #0]
 8019d9a:	d1e0      	bne.n	8019d5e <_free_r+0x22>
 8019d9c:	6818      	ldr	r0, [r3, #0]
 8019d9e:	685b      	ldr	r3, [r3, #4]
 8019da0:	6053      	str	r3, [r2, #4]
 8019da2:	4408      	add	r0, r1
 8019da4:	6010      	str	r0, [r2, #0]
 8019da6:	e7da      	b.n	8019d5e <_free_r+0x22>
 8019da8:	d902      	bls.n	8019db0 <_free_r+0x74>
 8019daa:	230c      	movs	r3, #12
 8019dac:	602b      	str	r3, [r5, #0]
 8019dae:	e7d6      	b.n	8019d5e <_free_r+0x22>
 8019db0:	6820      	ldr	r0, [r4, #0]
 8019db2:	1821      	adds	r1, r4, r0
 8019db4:	428b      	cmp	r3, r1
 8019db6:	bf04      	itt	eq
 8019db8:	6819      	ldreq	r1, [r3, #0]
 8019dba:	685b      	ldreq	r3, [r3, #4]
 8019dbc:	6063      	str	r3, [r4, #4]
 8019dbe:	bf04      	itt	eq
 8019dc0:	1809      	addeq	r1, r1, r0
 8019dc2:	6021      	streq	r1, [r4, #0]
 8019dc4:	6054      	str	r4, [r2, #4]
 8019dc6:	e7ca      	b.n	8019d5e <_free_r+0x22>
 8019dc8:	bd38      	pop	{r3, r4, r5, pc}
 8019dca:	bf00      	nop
 8019dcc:	24022b2c 	.word	0x24022b2c

08019dd0 <sbrk_aligned>:
 8019dd0:	b570      	push	{r4, r5, r6, lr}
 8019dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8019e10 <sbrk_aligned+0x40>)
 8019dd4:	460c      	mov	r4, r1
 8019dd6:	6831      	ldr	r1, [r6, #0]
 8019dd8:	4605      	mov	r5, r0
 8019dda:	b911      	cbnz	r1, 8019de2 <sbrk_aligned+0x12>
 8019ddc:	f000 fca4 	bl	801a728 <_sbrk_r>
 8019de0:	6030      	str	r0, [r6, #0]
 8019de2:	4621      	mov	r1, r4
 8019de4:	4628      	mov	r0, r5
 8019de6:	f000 fc9f 	bl	801a728 <_sbrk_r>
 8019dea:	1c43      	adds	r3, r0, #1
 8019dec:	d103      	bne.n	8019df6 <sbrk_aligned+0x26>
 8019dee:	f04f 34ff 	mov.w	r4, #4294967295
 8019df2:	4620      	mov	r0, r4
 8019df4:	bd70      	pop	{r4, r5, r6, pc}
 8019df6:	1cc4      	adds	r4, r0, #3
 8019df8:	f024 0403 	bic.w	r4, r4, #3
 8019dfc:	42a0      	cmp	r0, r4
 8019dfe:	d0f8      	beq.n	8019df2 <sbrk_aligned+0x22>
 8019e00:	1a21      	subs	r1, r4, r0
 8019e02:	4628      	mov	r0, r5
 8019e04:	f000 fc90 	bl	801a728 <_sbrk_r>
 8019e08:	3001      	adds	r0, #1
 8019e0a:	d1f2      	bne.n	8019df2 <sbrk_aligned+0x22>
 8019e0c:	e7ef      	b.n	8019dee <sbrk_aligned+0x1e>
 8019e0e:	bf00      	nop
 8019e10:	24022b28 	.word	0x24022b28

08019e14 <_malloc_r>:
 8019e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e18:	1ccd      	adds	r5, r1, #3
 8019e1a:	f025 0503 	bic.w	r5, r5, #3
 8019e1e:	3508      	adds	r5, #8
 8019e20:	2d0c      	cmp	r5, #12
 8019e22:	bf38      	it	cc
 8019e24:	250c      	movcc	r5, #12
 8019e26:	2d00      	cmp	r5, #0
 8019e28:	4606      	mov	r6, r0
 8019e2a:	db01      	blt.n	8019e30 <_malloc_r+0x1c>
 8019e2c:	42a9      	cmp	r1, r5
 8019e2e:	d904      	bls.n	8019e3a <_malloc_r+0x26>
 8019e30:	230c      	movs	r3, #12
 8019e32:	6033      	str	r3, [r6, #0]
 8019e34:	2000      	movs	r0, #0
 8019e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019f10 <_malloc_r+0xfc>
 8019e3e:	f000 f869 	bl	8019f14 <__malloc_lock>
 8019e42:	f8d8 3000 	ldr.w	r3, [r8]
 8019e46:	461c      	mov	r4, r3
 8019e48:	bb44      	cbnz	r4, 8019e9c <_malloc_r+0x88>
 8019e4a:	4629      	mov	r1, r5
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	f7ff ffbf 	bl	8019dd0 <sbrk_aligned>
 8019e52:	1c43      	adds	r3, r0, #1
 8019e54:	4604      	mov	r4, r0
 8019e56:	d158      	bne.n	8019f0a <_malloc_r+0xf6>
 8019e58:	f8d8 4000 	ldr.w	r4, [r8]
 8019e5c:	4627      	mov	r7, r4
 8019e5e:	2f00      	cmp	r7, #0
 8019e60:	d143      	bne.n	8019eea <_malloc_r+0xd6>
 8019e62:	2c00      	cmp	r4, #0
 8019e64:	d04b      	beq.n	8019efe <_malloc_r+0xea>
 8019e66:	6823      	ldr	r3, [r4, #0]
 8019e68:	4639      	mov	r1, r7
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	eb04 0903 	add.w	r9, r4, r3
 8019e70:	f000 fc5a 	bl	801a728 <_sbrk_r>
 8019e74:	4581      	cmp	r9, r0
 8019e76:	d142      	bne.n	8019efe <_malloc_r+0xea>
 8019e78:	6821      	ldr	r1, [r4, #0]
 8019e7a:	1a6d      	subs	r5, r5, r1
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	4630      	mov	r0, r6
 8019e80:	f7ff ffa6 	bl	8019dd0 <sbrk_aligned>
 8019e84:	3001      	adds	r0, #1
 8019e86:	d03a      	beq.n	8019efe <_malloc_r+0xea>
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	442b      	add	r3, r5
 8019e8c:	6023      	str	r3, [r4, #0]
 8019e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8019e92:	685a      	ldr	r2, [r3, #4]
 8019e94:	bb62      	cbnz	r2, 8019ef0 <_malloc_r+0xdc>
 8019e96:	f8c8 7000 	str.w	r7, [r8]
 8019e9a:	e00f      	b.n	8019ebc <_malloc_r+0xa8>
 8019e9c:	6822      	ldr	r2, [r4, #0]
 8019e9e:	1b52      	subs	r2, r2, r5
 8019ea0:	d420      	bmi.n	8019ee4 <_malloc_r+0xd0>
 8019ea2:	2a0b      	cmp	r2, #11
 8019ea4:	d917      	bls.n	8019ed6 <_malloc_r+0xc2>
 8019ea6:	1961      	adds	r1, r4, r5
 8019ea8:	42a3      	cmp	r3, r4
 8019eaa:	6025      	str	r5, [r4, #0]
 8019eac:	bf18      	it	ne
 8019eae:	6059      	strne	r1, [r3, #4]
 8019eb0:	6863      	ldr	r3, [r4, #4]
 8019eb2:	bf08      	it	eq
 8019eb4:	f8c8 1000 	streq.w	r1, [r8]
 8019eb8:	5162      	str	r2, [r4, r5]
 8019eba:	604b      	str	r3, [r1, #4]
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	f000 f82f 	bl	8019f20 <__malloc_unlock>
 8019ec2:	f104 000b 	add.w	r0, r4, #11
 8019ec6:	1d23      	adds	r3, r4, #4
 8019ec8:	f020 0007 	bic.w	r0, r0, #7
 8019ecc:	1ac2      	subs	r2, r0, r3
 8019ece:	bf1c      	itt	ne
 8019ed0:	1a1b      	subne	r3, r3, r0
 8019ed2:	50a3      	strne	r3, [r4, r2]
 8019ed4:	e7af      	b.n	8019e36 <_malloc_r+0x22>
 8019ed6:	6862      	ldr	r2, [r4, #4]
 8019ed8:	42a3      	cmp	r3, r4
 8019eda:	bf0c      	ite	eq
 8019edc:	f8c8 2000 	streq.w	r2, [r8]
 8019ee0:	605a      	strne	r2, [r3, #4]
 8019ee2:	e7eb      	b.n	8019ebc <_malloc_r+0xa8>
 8019ee4:	4623      	mov	r3, r4
 8019ee6:	6864      	ldr	r4, [r4, #4]
 8019ee8:	e7ae      	b.n	8019e48 <_malloc_r+0x34>
 8019eea:	463c      	mov	r4, r7
 8019eec:	687f      	ldr	r7, [r7, #4]
 8019eee:	e7b6      	b.n	8019e5e <_malloc_r+0x4a>
 8019ef0:	461a      	mov	r2, r3
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	42a3      	cmp	r3, r4
 8019ef6:	d1fb      	bne.n	8019ef0 <_malloc_r+0xdc>
 8019ef8:	2300      	movs	r3, #0
 8019efa:	6053      	str	r3, [r2, #4]
 8019efc:	e7de      	b.n	8019ebc <_malloc_r+0xa8>
 8019efe:	230c      	movs	r3, #12
 8019f00:	6033      	str	r3, [r6, #0]
 8019f02:	4630      	mov	r0, r6
 8019f04:	f000 f80c 	bl	8019f20 <__malloc_unlock>
 8019f08:	e794      	b.n	8019e34 <_malloc_r+0x20>
 8019f0a:	6005      	str	r5, [r0, #0]
 8019f0c:	e7d6      	b.n	8019ebc <_malloc_r+0xa8>
 8019f0e:	bf00      	nop
 8019f10:	24022b2c 	.word	0x24022b2c

08019f14 <__malloc_lock>:
 8019f14:	4801      	ldr	r0, [pc, #4]	@ (8019f1c <__malloc_lock+0x8>)
 8019f16:	f7ff bf00 	b.w	8019d1a <__retarget_lock_acquire_recursive>
 8019f1a:	bf00      	nop
 8019f1c:	24022b24 	.word	0x24022b24

08019f20 <__malloc_unlock>:
 8019f20:	4801      	ldr	r0, [pc, #4]	@ (8019f28 <__malloc_unlock+0x8>)
 8019f22:	f7ff befb 	b.w	8019d1c <__retarget_lock_release_recursive>
 8019f26:	bf00      	nop
 8019f28:	24022b24 	.word	0x24022b24

08019f2c <__sfputc_r>:
 8019f2c:	6893      	ldr	r3, [r2, #8]
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	b410      	push	{r4}
 8019f34:	6093      	str	r3, [r2, #8]
 8019f36:	da08      	bge.n	8019f4a <__sfputc_r+0x1e>
 8019f38:	6994      	ldr	r4, [r2, #24]
 8019f3a:	42a3      	cmp	r3, r4
 8019f3c:	db01      	blt.n	8019f42 <__sfputc_r+0x16>
 8019f3e:	290a      	cmp	r1, #10
 8019f40:	d103      	bne.n	8019f4a <__sfputc_r+0x1e>
 8019f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f46:	f7ff bd7c 	b.w	8019a42 <__swbuf_r>
 8019f4a:	6813      	ldr	r3, [r2, #0]
 8019f4c:	1c58      	adds	r0, r3, #1
 8019f4e:	6010      	str	r0, [r2, #0]
 8019f50:	7019      	strb	r1, [r3, #0]
 8019f52:	4608      	mov	r0, r1
 8019f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f58:	4770      	bx	lr

08019f5a <__sfputs_r>:
 8019f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	460f      	mov	r7, r1
 8019f60:	4614      	mov	r4, r2
 8019f62:	18d5      	adds	r5, r2, r3
 8019f64:	42ac      	cmp	r4, r5
 8019f66:	d101      	bne.n	8019f6c <__sfputs_r+0x12>
 8019f68:	2000      	movs	r0, #0
 8019f6a:	e007      	b.n	8019f7c <__sfputs_r+0x22>
 8019f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f70:	463a      	mov	r2, r7
 8019f72:	4630      	mov	r0, r6
 8019f74:	f7ff ffda 	bl	8019f2c <__sfputc_r>
 8019f78:	1c43      	adds	r3, r0, #1
 8019f7a:	d1f3      	bne.n	8019f64 <__sfputs_r+0xa>
 8019f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f80 <_vfiprintf_r>:
 8019f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f84:	460d      	mov	r5, r1
 8019f86:	b09d      	sub	sp, #116	@ 0x74
 8019f88:	4614      	mov	r4, r2
 8019f8a:	4698      	mov	r8, r3
 8019f8c:	4606      	mov	r6, r0
 8019f8e:	b118      	cbz	r0, 8019f98 <_vfiprintf_r+0x18>
 8019f90:	6a03      	ldr	r3, [r0, #32]
 8019f92:	b90b      	cbnz	r3, 8019f98 <_vfiprintf_r+0x18>
 8019f94:	f7ff fc6c 	bl	8019870 <__sinit>
 8019f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f9a:	07d9      	lsls	r1, r3, #31
 8019f9c:	d405      	bmi.n	8019faa <_vfiprintf_r+0x2a>
 8019f9e:	89ab      	ldrh	r3, [r5, #12]
 8019fa0:	059a      	lsls	r2, r3, #22
 8019fa2:	d402      	bmi.n	8019faa <_vfiprintf_r+0x2a>
 8019fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fa6:	f7ff feb8 	bl	8019d1a <__retarget_lock_acquire_recursive>
 8019faa:	89ab      	ldrh	r3, [r5, #12]
 8019fac:	071b      	lsls	r3, r3, #28
 8019fae:	d501      	bpl.n	8019fb4 <_vfiprintf_r+0x34>
 8019fb0:	692b      	ldr	r3, [r5, #16]
 8019fb2:	b99b      	cbnz	r3, 8019fdc <_vfiprintf_r+0x5c>
 8019fb4:	4629      	mov	r1, r5
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	f7ff fd82 	bl	8019ac0 <__swsetup_r>
 8019fbc:	b170      	cbz	r0, 8019fdc <_vfiprintf_r+0x5c>
 8019fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019fc0:	07dc      	lsls	r4, r3, #31
 8019fc2:	d504      	bpl.n	8019fce <_vfiprintf_r+0x4e>
 8019fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc8:	b01d      	add	sp, #116	@ 0x74
 8019fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fce:	89ab      	ldrh	r3, [r5, #12]
 8019fd0:	0598      	lsls	r0, r3, #22
 8019fd2:	d4f7      	bmi.n	8019fc4 <_vfiprintf_r+0x44>
 8019fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fd6:	f7ff fea1 	bl	8019d1c <__retarget_lock_release_recursive>
 8019fda:	e7f3      	b.n	8019fc4 <_vfiprintf_r+0x44>
 8019fdc:	2300      	movs	r3, #0
 8019fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fe0:	2320      	movs	r3, #32
 8019fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fea:	2330      	movs	r3, #48	@ 0x30
 8019fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a19c <_vfiprintf_r+0x21c>
 8019ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ff4:	f04f 0901 	mov.w	r9, #1
 8019ff8:	4623      	mov	r3, r4
 8019ffa:	469a      	mov	sl, r3
 8019ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a000:	b10a      	cbz	r2, 801a006 <_vfiprintf_r+0x86>
 801a002:	2a25      	cmp	r2, #37	@ 0x25
 801a004:	d1f9      	bne.n	8019ffa <_vfiprintf_r+0x7a>
 801a006:	ebba 0b04 	subs.w	fp, sl, r4
 801a00a:	d00b      	beq.n	801a024 <_vfiprintf_r+0xa4>
 801a00c:	465b      	mov	r3, fp
 801a00e:	4622      	mov	r2, r4
 801a010:	4629      	mov	r1, r5
 801a012:	4630      	mov	r0, r6
 801a014:	f7ff ffa1 	bl	8019f5a <__sfputs_r>
 801a018:	3001      	adds	r0, #1
 801a01a:	f000 80a7 	beq.w	801a16c <_vfiprintf_r+0x1ec>
 801a01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a020:	445a      	add	r2, fp
 801a022:	9209      	str	r2, [sp, #36]	@ 0x24
 801a024:	f89a 3000 	ldrb.w	r3, [sl]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f000 809f 	beq.w	801a16c <_vfiprintf_r+0x1ec>
 801a02e:	2300      	movs	r3, #0
 801a030:	f04f 32ff 	mov.w	r2, #4294967295
 801a034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a038:	f10a 0a01 	add.w	sl, sl, #1
 801a03c:	9304      	str	r3, [sp, #16]
 801a03e:	9307      	str	r3, [sp, #28]
 801a040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a044:	931a      	str	r3, [sp, #104]	@ 0x68
 801a046:	4654      	mov	r4, sl
 801a048:	2205      	movs	r2, #5
 801a04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a04e:	4853      	ldr	r0, [pc, #332]	@ (801a19c <_vfiprintf_r+0x21c>)
 801a050:	f7e6 f946 	bl	80002e0 <memchr>
 801a054:	9a04      	ldr	r2, [sp, #16]
 801a056:	b9d8      	cbnz	r0, 801a090 <_vfiprintf_r+0x110>
 801a058:	06d1      	lsls	r1, r2, #27
 801a05a:	bf44      	itt	mi
 801a05c:	2320      	movmi	r3, #32
 801a05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a062:	0713      	lsls	r3, r2, #28
 801a064:	bf44      	itt	mi
 801a066:	232b      	movmi	r3, #43	@ 0x2b
 801a068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a06c:	f89a 3000 	ldrb.w	r3, [sl]
 801a070:	2b2a      	cmp	r3, #42	@ 0x2a
 801a072:	d015      	beq.n	801a0a0 <_vfiprintf_r+0x120>
 801a074:	9a07      	ldr	r2, [sp, #28]
 801a076:	4654      	mov	r4, sl
 801a078:	2000      	movs	r0, #0
 801a07a:	f04f 0c0a 	mov.w	ip, #10
 801a07e:	4621      	mov	r1, r4
 801a080:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a084:	3b30      	subs	r3, #48	@ 0x30
 801a086:	2b09      	cmp	r3, #9
 801a088:	d94b      	bls.n	801a122 <_vfiprintf_r+0x1a2>
 801a08a:	b1b0      	cbz	r0, 801a0ba <_vfiprintf_r+0x13a>
 801a08c:	9207      	str	r2, [sp, #28]
 801a08e:	e014      	b.n	801a0ba <_vfiprintf_r+0x13a>
 801a090:	eba0 0308 	sub.w	r3, r0, r8
 801a094:	fa09 f303 	lsl.w	r3, r9, r3
 801a098:	4313      	orrs	r3, r2
 801a09a:	9304      	str	r3, [sp, #16]
 801a09c:	46a2      	mov	sl, r4
 801a09e:	e7d2      	b.n	801a046 <_vfiprintf_r+0xc6>
 801a0a0:	9b03      	ldr	r3, [sp, #12]
 801a0a2:	1d19      	adds	r1, r3, #4
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	9103      	str	r1, [sp, #12]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	bfbb      	ittet	lt
 801a0ac:	425b      	neglt	r3, r3
 801a0ae:	f042 0202 	orrlt.w	r2, r2, #2
 801a0b2:	9307      	strge	r3, [sp, #28]
 801a0b4:	9307      	strlt	r3, [sp, #28]
 801a0b6:	bfb8      	it	lt
 801a0b8:	9204      	strlt	r2, [sp, #16]
 801a0ba:	7823      	ldrb	r3, [r4, #0]
 801a0bc:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0be:	d10a      	bne.n	801a0d6 <_vfiprintf_r+0x156>
 801a0c0:	7863      	ldrb	r3, [r4, #1]
 801a0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0c4:	d132      	bne.n	801a12c <_vfiprintf_r+0x1ac>
 801a0c6:	9b03      	ldr	r3, [sp, #12]
 801a0c8:	1d1a      	adds	r2, r3, #4
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	9203      	str	r2, [sp, #12]
 801a0ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0d2:	3402      	adds	r4, #2
 801a0d4:	9305      	str	r3, [sp, #20]
 801a0d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a1ac <_vfiprintf_r+0x22c>
 801a0da:	7821      	ldrb	r1, [r4, #0]
 801a0dc:	2203      	movs	r2, #3
 801a0de:	4650      	mov	r0, sl
 801a0e0:	f7e6 f8fe 	bl	80002e0 <memchr>
 801a0e4:	b138      	cbz	r0, 801a0f6 <_vfiprintf_r+0x176>
 801a0e6:	9b04      	ldr	r3, [sp, #16]
 801a0e8:	eba0 000a 	sub.w	r0, r0, sl
 801a0ec:	2240      	movs	r2, #64	@ 0x40
 801a0ee:	4082      	lsls	r2, r0
 801a0f0:	4313      	orrs	r3, r2
 801a0f2:	3401      	adds	r4, #1
 801a0f4:	9304      	str	r3, [sp, #16]
 801a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0fa:	4829      	ldr	r0, [pc, #164]	@ (801a1a0 <_vfiprintf_r+0x220>)
 801a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a100:	2206      	movs	r2, #6
 801a102:	f7e6 f8ed 	bl	80002e0 <memchr>
 801a106:	2800      	cmp	r0, #0
 801a108:	d03f      	beq.n	801a18a <_vfiprintf_r+0x20a>
 801a10a:	4b26      	ldr	r3, [pc, #152]	@ (801a1a4 <_vfiprintf_r+0x224>)
 801a10c:	bb1b      	cbnz	r3, 801a156 <_vfiprintf_r+0x1d6>
 801a10e:	9b03      	ldr	r3, [sp, #12]
 801a110:	3307      	adds	r3, #7
 801a112:	f023 0307 	bic.w	r3, r3, #7
 801a116:	3308      	adds	r3, #8
 801a118:	9303      	str	r3, [sp, #12]
 801a11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a11c:	443b      	add	r3, r7
 801a11e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a120:	e76a      	b.n	8019ff8 <_vfiprintf_r+0x78>
 801a122:	fb0c 3202 	mla	r2, ip, r2, r3
 801a126:	460c      	mov	r4, r1
 801a128:	2001      	movs	r0, #1
 801a12a:	e7a8      	b.n	801a07e <_vfiprintf_r+0xfe>
 801a12c:	2300      	movs	r3, #0
 801a12e:	3401      	adds	r4, #1
 801a130:	9305      	str	r3, [sp, #20]
 801a132:	4619      	mov	r1, r3
 801a134:	f04f 0c0a 	mov.w	ip, #10
 801a138:	4620      	mov	r0, r4
 801a13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a13e:	3a30      	subs	r2, #48	@ 0x30
 801a140:	2a09      	cmp	r2, #9
 801a142:	d903      	bls.n	801a14c <_vfiprintf_r+0x1cc>
 801a144:	2b00      	cmp	r3, #0
 801a146:	d0c6      	beq.n	801a0d6 <_vfiprintf_r+0x156>
 801a148:	9105      	str	r1, [sp, #20]
 801a14a:	e7c4      	b.n	801a0d6 <_vfiprintf_r+0x156>
 801a14c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a150:	4604      	mov	r4, r0
 801a152:	2301      	movs	r3, #1
 801a154:	e7f0      	b.n	801a138 <_vfiprintf_r+0x1b8>
 801a156:	ab03      	add	r3, sp, #12
 801a158:	9300      	str	r3, [sp, #0]
 801a15a:	462a      	mov	r2, r5
 801a15c:	4b12      	ldr	r3, [pc, #72]	@ (801a1a8 <_vfiprintf_r+0x228>)
 801a15e:	a904      	add	r1, sp, #16
 801a160:	4630      	mov	r0, r6
 801a162:	f3af 8000 	nop.w
 801a166:	4607      	mov	r7, r0
 801a168:	1c78      	adds	r0, r7, #1
 801a16a:	d1d6      	bne.n	801a11a <_vfiprintf_r+0x19a>
 801a16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a16e:	07d9      	lsls	r1, r3, #31
 801a170:	d405      	bmi.n	801a17e <_vfiprintf_r+0x1fe>
 801a172:	89ab      	ldrh	r3, [r5, #12]
 801a174:	059a      	lsls	r2, r3, #22
 801a176:	d402      	bmi.n	801a17e <_vfiprintf_r+0x1fe>
 801a178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a17a:	f7ff fdcf 	bl	8019d1c <__retarget_lock_release_recursive>
 801a17e:	89ab      	ldrh	r3, [r5, #12]
 801a180:	065b      	lsls	r3, r3, #25
 801a182:	f53f af1f 	bmi.w	8019fc4 <_vfiprintf_r+0x44>
 801a186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a188:	e71e      	b.n	8019fc8 <_vfiprintf_r+0x48>
 801a18a:	ab03      	add	r3, sp, #12
 801a18c:	9300      	str	r3, [sp, #0]
 801a18e:	462a      	mov	r2, r5
 801a190:	4b05      	ldr	r3, [pc, #20]	@ (801a1a8 <_vfiprintf_r+0x228>)
 801a192:	a904      	add	r1, sp, #16
 801a194:	4630      	mov	r0, r6
 801a196:	f000 f879 	bl	801a28c <_printf_i>
 801a19a:	e7e4      	b.n	801a166 <_vfiprintf_r+0x1e6>
 801a19c:	0801b838 	.word	0x0801b838
 801a1a0:	0801b842 	.word	0x0801b842
 801a1a4:	00000000 	.word	0x00000000
 801a1a8:	08019f5b 	.word	0x08019f5b
 801a1ac:	0801b83e 	.word	0x0801b83e

0801a1b0 <_printf_common>:
 801a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1b4:	4616      	mov	r6, r2
 801a1b6:	4698      	mov	r8, r3
 801a1b8:	688a      	ldr	r2, [r1, #8]
 801a1ba:	690b      	ldr	r3, [r1, #16]
 801a1bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	bfb8      	it	lt
 801a1c4:	4613      	movlt	r3, r2
 801a1c6:	6033      	str	r3, [r6, #0]
 801a1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a1cc:	4607      	mov	r7, r0
 801a1ce:	460c      	mov	r4, r1
 801a1d0:	b10a      	cbz	r2, 801a1d6 <_printf_common+0x26>
 801a1d2:	3301      	adds	r3, #1
 801a1d4:	6033      	str	r3, [r6, #0]
 801a1d6:	6823      	ldr	r3, [r4, #0]
 801a1d8:	0699      	lsls	r1, r3, #26
 801a1da:	bf42      	ittt	mi
 801a1dc:	6833      	ldrmi	r3, [r6, #0]
 801a1de:	3302      	addmi	r3, #2
 801a1e0:	6033      	strmi	r3, [r6, #0]
 801a1e2:	6825      	ldr	r5, [r4, #0]
 801a1e4:	f015 0506 	ands.w	r5, r5, #6
 801a1e8:	d106      	bne.n	801a1f8 <_printf_common+0x48>
 801a1ea:	f104 0a19 	add.w	sl, r4, #25
 801a1ee:	68e3      	ldr	r3, [r4, #12]
 801a1f0:	6832      	ldr	r2, [r6, #0]
 801a1f2:	1a9b      	subs	r3, r3, r2
 801a1f4:	42ab      	cmp	r3, r5
 801a1f6:	dc26      	bgt.n	801a246 <_printf_common+0x96>
 801a1f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a1fc:	6822      	ldr	r2, [r4, #0]
 801a1fe:	3b00      	subs	r3, #0
 801a200:	bf18      	it	ne
 801a202:	2301      	movne	r3, #1
 801a204:	0692      	lsls	r2, r2, #26
 801a206:	d42b      	bmi.n	801a260 <_printf_common+0xb0>
 801a208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a20c:	4641      	mov	r1, r8
 801a20e:	4638      	mov	r0, r7
 801a210:	47c8      	blx	r9
 801a212:	3001      	adds	r0, #1
 801a214:	d01e      	beq.n	801a254 <_printf_common+0xa4>
 801a216:	6823      	ldr	r3, [r4, #0]
 801a218:	6922      	ldr	r2, [r4, #16]
 801a21a:	f003 0306 	and.w	r3, r3, #6
 801a21e:	2b04      	cmp	r3, #4
 801a220:	bf02      	ittt	eq
 801a222:	68e5      	ldreq	r5, [r4, #12]
 801a224:	6833      	ldreq	r3, [r6, #0]
 801a226:	1aed      	subeq	r5, r5, r3
 801a228:	68a3      	ldr	r3, [r4, #8]
 801a22a:	bf0c      	ite	eq
 801a22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a230:	2500      	movne	r5, #0
 801a232:	4293      	cmp	r3, r2
 801a234:	bfc4      	itt	gt
 801a236:	1a9b      	subgt	r3, r3, r2
 801a238:	18ed      	addgt	r5, r5, r3
 801a23a:	2600      	movs	r6, #0
 801a23c:	341a      	adds	r4, #26
 801a23e:	42b5      	cmp	r5, r6
 801a240:	d11a      	bne.n	801a278 <_printf_common+0xc8>
 801a242:	2000      	movs	r0, #0
 801a244:	e008      	b.n	801a258 <_printf_common+0xa8>
 801a246:	2301      	movs	r3, #1
 801a248:	4652      	mov	r2, sl
 801a24a:	4641      	mov	r1, r8
 801a24c:	4638      	mov	r0, r7
 801a24e:	47c8      	blx	r9
 801a250:	3001      	adds	r0, #1
 801a252:	d103      	bne.n	801a25c <_printf_common+0xac>
 801a254:	f04f 30ff 	mov.w	r0, #4294967295
 801a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a25c:	3501      	adds	r5, #1
 801a25e:	e7c6      	b.n	801a1ee <_printf_common+0x3e>
 801a260:	18e1      	adds	r1, r4, r3
 801a262:	1c5a      	adds	r2, r3, #1
 801a264:	2030      	movs	r0, #48	@ 0x30
 801a266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a26a:	4422      	add	r2, r4
 801a26c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a274:	3302      	adds	r3, #2
 801a276:	e7c7      	b.n	801a208 <_printf_common+0x58>
 801a278:	2301      	movs	r3, #1
 801a27a:	4622      	mov	r2, r4
 801a27c:	4641      	mov	r1, r8
 801a27e:	4638      	mov	r0, r7
 801a280:	47c8      	blx	r9
 801a282:	3001      	adds	r0, #1
 801a284:	d0e6      	beq.n	801a254 <_printf_common+0xa4>
 801a286:	3601      	adds	r6, #1
 801a288:	e7d9      	b.n	801a23e <_printf_common+0x8e>
	...

0801a28c <_printf_i>:
 801a28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a290:	7e0f      	ldrb	r7, [r1, #24]
 801a292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a294:	2f78      	cmp	r7, #120	@ 0x78
 801a296:	4691      	mov	r9, r2
 801a298:	4680      	mov	r8, r0
 801a29a:	460c      	mov	r4, r1
 801a29c:	469a      	mov	sl, r3
 801a29e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a2a2:	d807      	bhi.n	801a2b4 <_printf_i+0x28>
 801a2a4:	2f62      	cmp	r7, #98	@ 0x62
 801a2a6:	d80a      	bhi.n	801a2be <_printf_i+0x32>
 801a2a8:	2f00      	cmp	r7, #0
 801a2aa:	f000 80d1 	beq.w	801a450 <_printf_i+0x1c4>
 801a2ae:	2f58      	cmp	r7, #88	@ 0x58
 801a2b0:	f000 80b8 	beq.w	801a424 <_printf_i+0x198>
 801a2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a2b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a2bc:	e03a      	b.n	801a334 <_printf_i+0xa8>
 801a2be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a2c2:	2b15      	cmp	r3, #21
 801a2c4:	d8f6      	bhi.n	801a2b4 <_printf_i+0x28>
 801a2c6:	a101      	add	r1, pc, #4	@ (adr r1, 801a2cc <_printf_i+0x40>)
 801a2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a2cc:	0801a325 	.word	0x0801a325
 801a2d0:	0801a339 	.word	0x0801a339
 801a2d4:	0801a2b5 	.word	0x0801a2b5
 801a2d8:	0801a2b5 	.word	0x0801a2b5
 801a2dc:	0801a2b5 	.word	0x0801a2b5
 801a2e0:	0801a2b5 	.word	0x0801a2b5
 801a2e4:	0801a339 	.word	0x0801a339
 801a2e8:	0801a2b5 	.word	0x0801a2b5
 801a2ec:	0801a2b5 	.word	0x0801a2b5
 801a2f0:	0801a2b5 	.word	0x0801a2b5
 801a2f4:	0801a2b5 	.word	0x0801a2b5
 801a2f8:	0801a437 	.word	0x0801a437
 801a2fc:	0801a363 	.word	0x0801a363
 801a300:	0801a3f1 	.word	0x0801a3f1
 801a304:	0801a2b5 	.word	0x0801a2b5
 801a308:	0801a2b5 	.word	0x0801a2b5
 801a30c:	0801a459 	.word	0x0801a459
 801a310:	0801a2b5 	.word	0x0801a2b5
 801a314:	0801a363 	.word	0x0801a363
 801a318:	0801a2b5 	.word	0x0801a2b5
 801a31c:	0801a2b5 	.word	0x0801a2b5
 801a320:	0801a3f9 	.word	0x0801a3f9
 801a324:	6833      	ldr	r3, [r6, #0]
 801a326:	1d1a      	adds	r2, r3, #4
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	6032      	str	r2, [r6, #0]
 801a32c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a334:	2301      	movs	r3, #1
 801a336:	e09c      	b.n	801a472 <_printf_i+0x1e6>
 801a338:	6833      	ldr	r3, [r6, #0]
 801a33a:	6820      	ldr	r0, [r4, #0]
 801a33c:	1d19      	adds	r1, r3, #4
 801a33e:	6031      	str	r1, [r6, #0]
 801a340:	0606      	lsls	r6, r0, #24
 801a342:	d501      	bpl.n	801a348 <_printf_i+0xbc>
 801a344:	681d      	ldr	r5, [r3, #0]
 801a346:	e003      	b.n	801a350 <_printf_i+0xc4>
 801a348:	0645      	lsls	r5, r0, #25
 801a34a:	d5fb      	bpl.n	801a344 <_printf_i+0xb8>
 801a34c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a350:	2d00      	cmp	r5, #0
 801a352:	da03      	bge.n	801a35c <_printf_i+0xd0>
 801a354:	232d      	movs	r3, #45	@ 0x2d
 801a356:	426d      	negs	r5, r5
 801a358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a35c:	4858      	ldr	r0, [pc, #352]	@ (801a4c0 <_printf_i+0x234>)
 801a35e:	230a      	movs	r3, #10
 801a360:	e011      	b.n	801a386 <_printf_i+0xfa>
 801a362:	6821      	ldr	r1, [r4, #0]
 801a364:	6833      	ldr	r3, [r6, #0]
 801a366:	0608      	lsls	r0, r1, #24
 801a368:	f853 5b04 	ldr.w	r5, [r3], #4
 801a36c:	d402      	bmi.n	801a374 <_printf_i+0xe8>
 801a36e:	0649      	lsls	r1, r1, #25
 801a370:	bf48      	it	mi
 801a372:	b2ad      	uxthmi	r5, r5
 801a374:	2f6f      	cmp	r7, #111	@ 0x6f
 801a376:	4852      	ldr	r0, [pc, #328]	@ (801a4c0 <_printf_i+0x234>)
 801a378:	6033      	str	r3, [r6, #0]
 801a37a:	bf14      	ite	ne
 801a37c:	230a      	movne	r3, #10
 801a37e:	2308      	moveq	r3, #8
 801a380:	2100      	movs	r1, #0
 801a382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a386:	6866      	ldr	r6, [r4, #4]
 801a388:	60a6      	str	r6, [r4, #8]
 801a38a:	2e00      	cmp	r6, #0
 801a38c:	db05      	blt.n	801a39a <_printf_i+0x10e>
 801a38e:	6821      	ldr	r1, [r4, #0]
 801a390:	432e      	orrs	r6, r5
 801a392:	f021 0104 	bic.w	r1, r1, #4
 801a396:	6021      	str	r1, [r4, #0]
 801a398:	d04b      	beq.n	801a432 <_printf_i+0x1a6>
 801a39a:	4616      	mov	r6, r2
 801a39c:	fbb5 f1f3 	udiv	r1, r5, r3
 801a3a0:	fb03 5711 	mls	r7, r3, r1, r5
 801a3a4:	5dc7      	ldrb	r7, [r0, r7]
 801a3a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a3aa:	462f      	mov	r7, r5
 801a3ac:	42bb      	cmp	r3, r7
 801a3ae:	460d      	mov	r5, r1
 801a3b0:	d9f4      	bls.n	801a39c <_printf_i+0x110>
 801a3b2:	2b08      	cmp	r3, #8
 801a3b4:	d10b      	bne.n	801a3ce <_printf_i+0x142>
 801a3b6:	6823      	ldr	r3, [r4, #0]
 801a3b8:	07df      	lsls	r7, r3, #31
 801a3ba:	d508      	bpl.n	801a3ce <_printf_i+0x142>
 801a3bc:	6923      	ldr	r3, [r4, #16]
 801a3be:	6861      	ldr	r1, [r4, #4]
 801a3c0:	4299      	cmp	r1, r3
 801a3c2:	bfde      	ittt	le
 801a3c4:	2330      	movle	r3, #48	@ 0x30
 801a3c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a3ce:	1b92      	subs	r2, r2, r6
 801a3d0:	6122      	str	r2, [r4, #16]
 801a3d2:	f8cd a000 	str.w	sl, [sp]
 801a3d6:	464b      	mov	r3, r9
 801a3d8:	aa03      	add	r2, sp, #12
 801a3da:	4621      	mov	r1, r4
 801a3dc:	4640      	mov	r0, r8
 801a3de:	f7ff fee7 	bl	801a1b0 <_printf_common>
 801a3e2:	3001      	adds	r0, #1
 801a3e4:	d14a      	bne.n	801a47c <_printf_i+0x1f0>
 801a3e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ea:	b004      	add	sp, #16
 801a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f0:	6823      	ldr	r3, [r4, #0]
 801a3f2:	f043 0320 	orr.w	r3, r3, #32
 801a3f6:	6023      	str	r3, [r4, #0]
 801a3f8:	4832      	ldr	r0, [pc, #200]	@ (801a4c4 <_printf_i+0x238>)
 801a3fa:	2778      	movs	r7, #120	@ 0x78
 801a3fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a400:	6823      	ldr	r3, [r4, #0]
 801a402:	6831      	ldr	r1, [r6, #0]
 801a404:	061f      	lsls	r7, r3, #24
 801a406:	f851 5b04 	ldr.w	r5, [r1], #4
 801a40a:	d402      	bmi.n	801a412 <_printf_i+0x186>
 801a40c:	065f      	lsls	r7, r3, #25
 801a40e:	bf48      	it	mi
 801a410:	b2ad      	uxthmi	r5, r5
 801a412:	6031      	str	r1, [r6, #0]
 801a414:	07d9      	lsls	r1, r3, #31
 801a416:	bf44      	itt	mi
 801a418:	f043 0320 	orrmi.w	r3, r3, #32
 801a41c:	6023      	strmi	r3, [r4, #0]
 801a41e:	b11d      	cbz	r5, 801a428 <_printf_i+0x19c>
 801a420:	2310      	movs	r3, #16
 801a422:	e7ad      	b.n	801a380 <_printf_i+0xf4>
 801a424:	4826      	ldr	r0, [pc, #152]	@ (801a4c0 <_printf_i+0x234>)
 801a426:	e7e9      	b.n	801a3fc <_printf_i+0x170>
 801a428:	6823      	ldr	r3, [r4, #0]
 801a42a:	f023 0320 	bic.w	r3, r3, #32
 801a42e:	6023      	str	r3, [r4, #0]
 801a430:	e7f6      	b.n	801a420 <_printf_i+0x194>
 801a432:	4616      	mov	r6, r2
 801a434:	e7bd      	b.n	801a3b2 <_printf_i+0x126>
 801a436:	6833      	ldr	r3, [r6, #0]
 801a438:	6825      	ldr	r5, [r4, #0]
 801a43a:	6961      	ldr	r1, [r4, #20]
 801a43c:	1d18      	adds	r0, r3, #4
 801a43e:	6030      	str	r0, [r6, #0]
 801a440:	062e      	lsls	r6, r5, #24
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	d501      	bpl.n	801a44a <_printf_i+0x1be>
 801a446:	6019      	str	r1, [r3, #0]
 801a448:	e002      	b.n	801a450 <_printf_i+0x1c4>
 801a44a:	0668      	lsls	r0, r5, #25
 801a44c:	d5fb      	bpl.n	801a446 <_printf_i+0x1ba>
 801a44e:	8019      	strh	r1, [r3, #0]
 801a450:	2300      	movs	r3, #0
 801a452:	6123      	str	r3, [r4, #16]
 801a454:	4616      	mov	r6, r2
 801a456:	e7bc      	b.n	801a3d2 <_printf_i+0x146>
 801a458:	6833      	ldr	r3, [r6, #0]
 801a45a:	1d1a      	adds	r2, r3, #4
 801a45c:	6032      	str	r2, [r6, #0]
 801a45e:	681e      	ldr	r6, [r3, #0]
 801a460:	6862      	ldr	r2, [r4, #4]
 801a462:	2100      	movs	r1, #0
 801a464:	4630      	mov	r0, r6
 801a466:	f7e5 ff3b 	bl	80002e0 <memchr>
 801a46a:	b108      	cbz	r0, 801a470 <_printf_i+0x1e4>
 801a46c:	1b80      	subs	r0, r0, r6
 801a46e:	6060      	str	r0, [r4, #4]
 801a470:	6863      	ldr	r3, [r4, #4]
 801a472:	6123      	str	r3, [r4, #16]
 801a474:	2300      	movs	r3, #0
 801a476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a47a:	e7aa      	b.n	801a3d2 <_printf_i+0x146>
 801a47c:	6923      	ldr	r3, [r4, #16]
 801a47e:	4632      	mov	r2, r6
 801a480:	4649      	mov	r1, r9
 801a482:	4640      	mov	r0, r8
 801a484:	47d0      	blx	sl
 801a486:	3001      	adds	r0, #1
 801a488:	d0ad      	beq.n	801a3e6 <_printf_i+0x15a>
 801a48a:	6823      	ldr	r3, [r4, #0]
 801a48c:	079b      	lsls	r3, r3, #30
 801a48e:	d413      	bmi.n	801a4b8 <_printf_i+0x22c>
 801a490:	68e0      	ldr	r0, [r4, #12]
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	4298      	cmp	r0, r3
 801a496:	bfb8      	it	lt
 801a498:	4618      	movlt	r0, r3
 801a49a:	e7a6      	b.n	801a3ea <_printf_i+0x15e>
 801a49c:	2301      	movs	r3, #1
 801a49e:	4632      	mov	r2, r6
 801a4a0:	4649      	mov	r1, r9
 801a4a2:	4640      	mov	r0, r8
 801a4a4:	47d0      	blx	sl
 801a4a6:	3001      	adds	r0, #1
 801a4a8:	d09d      	beq.n	801a3e6 <_printf_i+0x15a>
 801a4aa:	3501      	adds	r5, #1
 801a4ac:	68e3      	ldr	r3, [r4, #12]
 801a4ae:	9903      	ldr	r1, [sp, #12]
 801a4b0:	1a5b      	subs	r3, r3, r1
 801a4b2:	42ab      	cmp	r3, r5
 801a4b4:	dcf2      	bgt.n	801a49c <_printf_i+0x210>
 801a4b6:	e7eb      	b.n	801a490 <_printf_i+0x204>
 801a4b8:	2500      	movs	r5, #0
 801a4ba:	f104 0619 	add.w	r6, r4, #25
 801a4be:	e7f5      	b.n	801a4ac <_printf_i+0x220>
 801a4c0:	0801b849 	.word	0x0801b849
 801a4c4:	0801b85a 	.word	0x0801b85a

0801a4c8 <__sflush_r>:
 801a4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d0:	0716      	lsls	r6, r2, #28
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	460c      	mov	r4, r1
 801a4d6:	d454      	bmi.n	801a582 <__sflush_r+0xba>
 801a4d8:	684b      	ldr	r3, [r1, #4]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	dc02      	bgt.n	801a4e4 <__sflush_r+0x1c>
 801a4de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	dd48      	ble.n	801a576 <__sflush_r+0xae>
 801a4e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4e6:	2e00      	cmp	r6, #0
 801a4e8:	d045      	beq.n	801a576 <__sflush_r+0xae>
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a4f0:	682f      	ldr	r7, [r5, #0]
 801a4f2:	6a21      	ldr	r1, [r4, #32]
 801a4f4:	602b      	str	r3, [r5, #0]
 801a4f6:	d030      	beq.n	801a55a <__sflush_r+0x92>
 801a4f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a4fa:	89a3      	ldrh	r3, [r4, #12]
 801a4fc:	0759      	lsls	r1, r3, #29
 801a4fe:	d505      	bpl.n	801a50c <__sflush_r+0x44>
 801a500:	6863      	ldr	r3, [r4, #4]
 801a502:	1ad2      	subs	r2, r2, r3
 801a504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a506:	b10b      	cbz	r3, 801a50c <__sflush_r+0x44>
 801a508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a50a:	1ad2      	subs	r2, r2, r3
 801a50c:	2300      	movs	r3, #0
 801a50e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a510:	6a21      	ldr	r1, [r4, #32]
 801a512:	4628      	mov	r0, r5
 801a514:	47b0      	blx	r6
 801a516:	1c43      	adds	r3, r0, #1
 801a518:	89a3      	ldrh	r3, [r4, #12]
 801a51a:	d106      	bne.n	801a52a <__sflush_r+0x62>
 801a51c:	6829      	ldr	r1, [r5, #0]
 801a51e:	291d      	cmp	r1, #29
 801a520:	d82b      	bhi.n	801a57a <__sflush_r+0xb2>
 801a522:	4a2a      	ldr	r2, [pc, #168]	@ (801a5cc <__sflush_r+0x104>)
 801a524:	40ca      	lsrs	r2, r1
 801a526:	07d6      	lsls	r6, r2, #31
 801a528:	d527      	bpl.n	801a57a <__sflush_r+0xb2>
 801a52a:	2200      	movs	r2, #0
 801a52c:	6062      	str	r2, [r4, #4]
 801a52e:	04d9      	lsls	r1, r3, #19
 801a530:	6922      	ldr	r2, [r4, #16]
 801a532:	6022      	str	r2, [r4, #0]
 801a534:	d504      	bpl.n	801a540 <__sflush_r+0x78>
 801a536:	1c42      	adds	r2, r0, #1
 801a538:	d101      	bne.n	801a53e <__sflush_r+0x76>
 801a53a:	682b      	ldr	r3, [r5, #0]
 801a53c:	b903      	cbnz	r3, 801a540 <__sflush_r+0x78>
 801a53e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a542:	602f      	str	r7, [r5, #0]
 801a544:	b1b9      	cbz	r1, 801a576 <__sflush_r+0xae>
 801a546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a54a:	4299      	cmp	r1, r3
 801a54c:	d002      	beq.n	801a554 <__sflush_r+0x8c>
 801a54e:	4628      	mov	r0, r5
 801a550:	f7ff fbf4 	bl	8019d3c <_free_r>
 801a554:	2300      	movs	r3, #0
 801a556:	6363      	str	r3, [r4, #52]	@ 0x34
 801a558:	e00d      	b.n	801a576 <__sflush_r+0xae>
 801a55a:	2301      	movs	r3, #1
 801a55c:	4628      	mov	r0, r5
 801a55e:	47b0      	blx	r6
 801a560:	4602      	mov	r2, r0
 801a562:	1c50      	adds	r0, r2, #1
 801a564:	d1c9      	bne.n	801a4fa <__sflush_r+0x32>
 801a566:	682b      	ldr	r3, [r5, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d0c6      	beq.n	801a4fa <__sflush_r+0x32>
 801a56c:	2b1d      	cmp	r3, #29
 801a56e:	d001      	beq.n	801a574 <__sflush_r+0xac>
 801a570:	2b16      	cmp	r3, #22
 801a572:	d11e      	bne.n	801a5b2 <__sflush_r+0xea>
 801a574:	602f      	str	r7, [r5, #0]
 801a576:	2000      	movs	r0, #0
 801a578:	e022      	b.n	801a5c0 <__sflush_r+0xf8>
 801a57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a57e:	b21b      	sxth	r3, r3
 801a580:	e01b      	b.n	801a5ba <__sflush_r+0xf2>
 801a582:	690f      	ldr	r7, [r1, #16]
 801a584:	2f00      	cmp	r7, #0
 801a586:	d0f6      	beq.n	801a576 <__sflush_r+0xae>
 801a588:	0793      	lsls	r3, r2, #30
 801a58a:	680e      	ldr	r6, [r1, #0]
 801a58c:	bf08      	it	eq
 801a58e:	694b      	ldreq	r3, [r1, #20]
 801a590:	600f      	str	r7, [r1, #0]
 801a592:	bf18      	it	ne
 801a594:	2300      	movne	r3, #0
 801a596:	eba6 0807 	sub.w	r8, r6, r7
 801a59a:	608b      	str	r3, [r1, #8]
 801a59c:	f1b8 0f00 	cmp.w	r8, #0
 801a5a0:	dde9      	ble.n	801a576 <__sflush_r+0xae>
 801a5a2:	6a21      	ldr	r1, [r4, #32]
 801a5a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a5a6:	4643      	mov	r3, r8
 801a5a8:	463a      	mov	r2, r7
 801a5aa:	4628      	mov	r0, r5
 801a5ac:	47b0      	blx	r6
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	dc08      	bgt.n	801a5c4 <__sflush_r+0xfc>
 801a5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a5ba:	81a3      	strh	r3, [r4, #12]
 801a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5c4:	4407      	add	r7, r0
 801a5c6:	eba8 0800 	sub.w	r8, r8, r0
 801a5ca:	e7e7      	b.n	801a59c <__sflush_r+0xd4>
 801a5cc:	20400001 	.word	0x20400001

0801a5d0 <_fflush_r>:
 801a5d0:	b538      	push	{r3, r4, r5, lr}
 801a5d2:	690b      	ldr	r3, [r1, #16]
 801a5d4:	4605      	mov	r5, r0
 801a5d6:	460c      	mov	r4, r1
 801a5d8:	b913      	cbnz	r3, 801a5e0 <_fflush_r+0x10>
 801a5da:	2500      	movs	r5, #0
 801a5dc:	4628      	mov	r0, r5
 801a5de:	bd38      	pop	{r3, r4, r5, pc}
 801a5e0:	b118      	cbz	r0, 801a5ea <_fflush_r+0x1a>
 801a5e2:	6a03      	ldr	r3, [r0, #32]
 801a5e4:	b90b      	cbnz	r3, 801a5ea <_fflush_r+0x1a>
 801a5e6:	f7ff f943 	bl	8019870 <__sinit>
 801a5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d0f3      	beq.n	801a5da <_fflush_r+0xa>
 801a5f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a5f4:	07d0      	lsls	r0, r2, #31
 801a5f6:	d404      	bmi.n	801a602 <_fflush_r+0x32>
 801a5f8:	0599      	lsls	r1, r3, #22
 801a5fa:	d402      	bmi.n	801a602 <_fflush_r+0x32>
 801a5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5fe:	f7ff fb8c 	bl	8019d1a <__retarget_lock_acquire_recursive>
 801a602:	4628      	mov	r0, r5
 801a604:	4621      	mov	r1, r4
 801a606:	f7ff ff5f 	bl	801a4c8 <__sflush_r>
 801a60a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a60c:	07da      	lsls	r2, r3, #31
 801a60e:	4605      	mov	r5, r0
 801a610:	d4e4      	bmi.n	801a5dc <_fflush_r+0xc>
 801a612:	89a3      	ldrh	r3, [r4, #12]
 801a614:	059b      	lsls	r3, r3, #22
 801a616:	d4e1      	bmi.n	801a5dc <_fflush_r+0xc>
 801a618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a61a:	f7ff fb7f 	bl	8019d1c <__retarget_lock_release_recursive>
 801a61e:	e7dd      	b.n	801a5dc <_fflush_r+0xc>

0801a620 <__swhatbuf_r>:
 801a620:	b570      	push	{r4, r5, r6, lr}
 801a622:	460c      	mov	r4, r1
 801a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a628:	2900      	cmp	r1, #0
 801a62a:	b096      	sub	sp, #88	@ 0x58
 801a62c:	4615      	mov	r5, r2
 801a62e:	461e      	mov	r6, r3
 801a630:	da0d      	bge.n	801a64e <__swhatbuf_r+0x2e>
 801a632:	89a3      	ldrh	r3, [r4, #12]
 801a634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a638:	f04f 0100 	mov.w	r1, #0
 801a63c:	bf14      	ite	ne
 801a63e:	2340      	movne	r3, #64	@ 0x40
 801a640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a644:	2000      	movs	r0, #0
 801a646:	6031      	str	r1, [r6, #0]
 801a648:	602b      	str	r3, [r5, #0]
 801a64a:	b016      	add	sp, #88	@ 0x58
 801a64c:	bd70      	pop	{r4, r5, r6, pc}
 801a64e:	466a      	mov	r2, sp
 801a650:	f000 f848 	bl	801a6e4 <_fstat_r>
 801a654:	2800      	cmp	r0, #0
 801a656:	dbec      	blt.n	801a632 <__swhatbuf_r+0x12>
 801a658:	9901      	ldr	r1, [sp, #4]
 801a65a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a65e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a662:	4259      	negs	r1, r3
 801a664:	4159      	adcs	r1, r3
 801a666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a66a:	e7eb      	b.n	801a644 <__swhatbuf_r+0x24>

0801a66c <__smakebuf_r>:
 801a66c:	898b      	ldrh	r3, [r1, #12]
 801a66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a670:	079d      	lsls	r5, r3, #30
 801a672:	4606      	mov	r6, r0
 801a674:	460c      	mov	r4, r1
 801a676:	d507      	bpl.n	801a688 <__smakebuf_r+0x1c>
 801a678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a67c:	6023      	str	r3, [r4, #0]
 801a67e:	6123      	str	r3, [r4, #16]
 801a680:	2301      	movs	r3, #1
 801a682:	6163      	str	r3, [r4, #20]
 801a684:	b003      	add	sp, #12
 801a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a688:	ab01      	add	r3, sp, #4
 801a68a:	466a      	mov	r2, sp
 801a68c:	f7ff ffc8 	bl	801a620 <__swhatbuf_r>
 801a690:	9f00      	ldr	r7, [sp, #0]
 801a692:	4605      	mov	r5, r0
 801a694:	4639      	mov	r1, r7
 801a696:	4630      	mov	r0, r6
 801a698:	f7ff fbbc 	bl	8019e14 <_malloc_r>
 801a69c:	b948      	cbnz	r0, 801a6b2 <__smakebuf_r+0x46>
 801a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6a2:	059a      	lsls	r2, r3, #22
 801a6a4:	d4ee      	bmi.n	801a684 <__smakebuf_r+0x18>
 801a6a6:	f023 0303 	bic.w	r3, r3, #3
 801a6aa:	f043 0302 	orr.w	r3, r3, #2
 801a6ae:	81a3      	strh	r3, [r4, #12]
 801a6b0:	e7e2      	b.n	801a678 <__smakebuf_r+0xc>
 801a6b2:	89a3      	ldrh	r3, [r4, #12]
 801a6b4:	6020      	str	r0, [r4, #0]
 801a6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a6ba:	81a3      	strh	r3, [r4, #12]
 801a6bc:	9b01      	ldr	r3, [sp, #4]
 801a6be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a6c2:	b15b      	cbz	r3, 801a6dc <__smakebuf_r+0x70>
 801a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	f000 f81d 	bl	801a708 <_isatty_r>
 801a6ce:	b128      	cbz	r0, 801a6dc <__smakebuf_r+0x70>
 801a6d0:	89a3      	ldrh	r3, [r4, #12]
 801a6d2:	f023 0303 	bic.w	r3, r3, #3
 801a6d6:	f043 0301 	orr.w	r3, r3, #1
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	89a3      	ldrh	r3, [r4, #12]
 801a6de:	431d      	orrs	r5, r3
 801a6e0:	81a5      	strh	r5, [r4, #12]
 801a6e2:	e7cf      	b.n	801a684 <__smakebuf_r+0x18>

0801a6e4 <_fstat_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4d07      	ldr	r5, [pc, #28]	@ (801a704 <_fstat_r+0x20>)
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	4604      	mov	r4, r0
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	4611      	mov	r1, r2
 801a6f0:	602b      	str	r3, [r5, #0]
 801a6f2:	f7e7 fd5c 	bl	80021ae <_fstat>
 801a6f6:	1c43      	adds	r3, r0, #1
 801a6f8:	d102      	bne.n	801a700 <_fstat_r+0x1c>
 801a6fa:	682b      	ldr	r3, [r5, #0]
 801a6fc:	b103      	cbz	r3, 801a700 <_fstat_r+0x1c>
 801a6fe:	6023      	str	r3, [r4, #0]
 801a700:	bd38      	pop	{r3, r4, r5, pc}
 801a702:	bf00      	nop
 801a704:	24022b20 	.word	0x24022b20

0801a708 <_isatty_r>:
 801a708:	b538      	push	{r3, r4, r5, lr}
 801a70a:	4d06      	ldr	r5, [pc, #24]	@ (801a724 <_isatty_r+0x1c>)
 801a70c:	2300      	movs	r3, #0
 801a70e:	4604      	mov	r4, r0
 801a710:	4608      	mov	r0, r1
 801a712:	602b      	str	r3, [r5, #0]
 801a714:	f7e7 fd5b 	bl	80021ce <_isatty>
 801a718:	1c43      	adds	r3, r0, #1
 801a71a:	d102      	bne.n	801a722 <_isatty_r+0x1a>
 801a71c:	682b      	ldr	r3, [r5, #0]
 801a71e:	b103      	cbz	r3, 801a722 <_isatty_r+0x1a>
 801a720:	6023      	str	r3, [r4, #0]
 801a722:	bd38      	pop	{r3, r4, r5, pc}
 801a724:	24022b20 	.word	0x24022b20

0801a728 <_sbrk_r>:
 801a728:	b538      	push	{r3, r4, r5, lr}
 801a72a:	4d06      	ldr	r5, [pc, #24]	@ (801a744 <_sbrk_r+0x1c>)
 801a72c:	2300      	movs	r3, #0
 801a72e:	4604      	mov	r4, r0
 801a730:	4608      	mov	r0, r1
 801a732:	602b      	str	r3, [r5, #0]
 801a734:	f7e7 fd64 	bl	8002200 <_sbrk>
 801a738:	1c43      	adds	r3, r0, #1
 801a73a:	d102      	bne.n	801a742 <_sbrk_r+0x1a>
 801a73c:	682b      	ldr	r3, [r5, #0]
 801a73e:	b103      	cbz	r3, 801a742 <_sbrk_r+0x1a>
 801a740:	6023      	str	r3, [r4, #0]
 801a742:	bd38      	pop	{r3, r4, r5, pc}
 801a744:	24022b20 	.word	0x24022b20

0801a748 <_init>:
 801a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74a:	bf00      	nop
 801a74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a74e:	bc08      	pop	{r3}
 801a750:	469e      	mov	lr, r3
 801a752:	4770      	bx	lr

0801a754 <_fini>:
 801a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a756:	bf00      	nop
 801a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a75a:	bc08      	pop	{r3}
 801a75c:	469e      	mov	lr, r3
 801a75e:	4770      	bx	lr
