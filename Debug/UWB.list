
UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db64  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0801de08  0801de08  0001ee08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f33c  0801f33c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f344  0801f344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801f348  0801f348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  24000000  0801f34c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000238f8  240001f0  0801f53c  000211f0  2**3
                  ALLOC
  8 ._user_heap_stack 00003000  24023ae8  0801f53c  00021ae8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000211f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003de0d  00000000  00000000  0002121e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000835c  00000000  00000000  0005f02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003010  00000000  00000000  00067388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000024c2  00000000  00000000  0006a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046aa7  00000000  00000000  0006c85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046c34  00000000  00000000  000b3301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00188219  00000000  00000000  000f9f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0028214e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d3a4  00000000  00000000  00282194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  0028f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ddec 	.word	0x0801ddec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0801ddec 	.word	0x0801ddec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <HAL_GPIO_EXTI_Callback>:
#include "bphero_uwb.h"

extern void (*bphero_rxcallback)(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b10      	cmp	r3, #16
 80006ca:	d119      	bne.n	8000700 <HAL_GPIO_EXTI_Callback+0x44>
        if (imusamplingTaskNotifyHandle != NULL) {
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x68>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
            vTaskNotifyGiveFromISR(imusamplingTaskNotifyHandle,
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f107 020c 	add.w	r2, r7, #12
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f018 fc20 	bl	8018f28 <vTaskNotifyGiveFromISR>
                                   &xHigherPriorityTaskWoken);
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x6c>)
 80006f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	f3bf 8f6f 	isb	sy

    }

    else {
    }
}
 80006fe:	e00d      	b.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
    else if (GPIO_Pin == GPIO_PIN_2) {
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d00a      	beq.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
    else if (GPIO_Pin == GPIO_PIN_8) {
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800070c:	d106      	bne.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
        if (bphero_rxcallback != NULL) { bphero_rxcallback(); }
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_GPIO_EXTI_Callback+0x70>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <HAL_GPIO_EXTI_Callback+0x60>
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_GPIO_EXTI_Callback+0x70>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4798      	blx	r3
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2400228c 	.word	0x2400228c
 8000728:	e000ed04 	.word	0xe000ed04
 800072c:	24000308 	.word	0x24000308

08000730 <SPI_CS_Control>:

extern SPI_HandleTypeDef hspi1;

stmdev_ctx_t dev_ctx;  // imu设备

static void SPI_CS_Control(uint8_t state) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if (state == 0)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d105      	bne.n	800074c <SPI_CS_Control+0x1c>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4806      	ldr	r0, [pc, #24]	@ (8000760 <SPI_CS_Control+0x30>)
 8000746:	f006 fa81 	bl	8006c4c <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
}
 800074a:	e004      	b.n	8000756 <SPI_CS_Control+0x26>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2110      	movs	r1, #16
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <SPI_CS_Control+0x30>)
 8000752:	f006 fa7b 	bl	8006c4c <HAL_GPIO_WritePin>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58020800 	.word	0x58020800

08000764 <Asm330_write>:

static int32_t Asm330_write(void *handle, uint8_t reg, const uint8_t *bufp,
                            uint16_t len) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	461a      	mov	r2, r3
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
 8000774:	4613      	mov	r3, r2
 8000776:	813b      	strh	r3, [r7, #8]
  if (bufp == NULL || len == 0) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <Asm330_write+0x20>
 800077e:	893b      	ldrh	r3, [r7, #8]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <Asm330_write+0x26>
    return -1;
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	e02e      	b.n	80007e8 <Asm330_write+0x84>
  }
  SPI_CS_Control(0);  // 拉低cs
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ffd0 	bl	8000730 <SPI_CS_Control>
  uint8_t temp = reg;
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	75fb      	strb	r3, [r7, #23]
  temp &= 0x7F;  // 确保最高位为0，表示写操作
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800079a:	b2db      	uxtb	r3, r3
 800079c:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 800079e:	f107 0117 	add.w	r1, r7, #23
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	2201      	movs	r2, #1
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <Asm330_write+0x8c>)
 80007aa:	f00b fdaf 	bl	800c30c <HAL_SPI_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <Asm330_write+0x5c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ffbb 	bl	8000730 <SPI_CS_Control>
    return -2;          // 地址发送失败
 80007ba:	f06f 0301 	mvn.w	r3, #1
 80007be:	e013      	b.n	80007e8 <Asm330_write+0x84>
  }
  // 发送要写入的数据（长度为len）
  if (HAL_SPI_Transmit(&hspi1, bufp, len, 1000) != HAL_OK) {
 80007c0:	893a      	ldrh	r2, [r7, #8]
 80007c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <Asm330_write+0x8c>)
 80007ca:	f00b fd9f 	bl	800c30c <HAL_SPI_Transmit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d005      	beq.n	80007e0 <Asm330_write+0x7c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ffab 	bl	8000730 <SPI_CS_Control>
    return -3;          // 数据发送失败
 80007da:	f06f 0302 	mvn.w	r3, #2
 80007de:	e003      	b.n	80007e8 <Asm330_write+0x84>
  }

  SPI_CS_Control(1);  // 拉高cs
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffa5 	bl	8000730 <SPI_CS_Control>
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	24002338 	.word	0x24002338

080007f4 <Asm330_read>:

static int32_t Asm330_read(void *handle, uint8_t reg, uint8_t *bufp,
                           uint16_t len) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	461a      	mov	r2, r3
 8000800:	460b      	mov	r3, r1
 8000802:	72fb      	strb	r3, [r7, #11]
 8000804:	4613      	mov	r3, r2
 8000806:	813b      	strh	r3, [r7, #8]
  if (len == 0) {
 8000808:	893b      	ldrh	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <Asm330_read+0x20>
    return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e02e      	b.n	8000872 <Asm330_read+0x7e>
  }
  SPI_CS_Control(0);  // 拉低cs
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff8b 	bl	8000730 <SPI_CS_Control>

  uint8_t temp = reg;
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	75fb      	strb	r3, [r7, #23]
  temp |= 0x80;  // 确保最高位为1，表示读操作
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 8000828:	f107 0117 	add.w	r1, r7, #23
 800082c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000830:	2201      	movs	r2, #1
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <Asm330_read+0x88>)
 8000834:	f00b fd6a 	bl	800c30c <HAL_SPI_Transmit>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <Asm330_read+0x56>
    SPI_CS_Control(1);  // 出错时及时释放片选
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ff76 	bl	8000730 <SPI_CS_Control>
    return -2;          // 地址发送失败
 8000844:	f06f 0301 	mvn.w	r3, #1
 8000848:	e013      	b.n	8000872 <Asm330_read+0x7e>
  }

  // 读出数据（长度为len）
  if (HAL_SPI_Receive(&hspi1, bufp, len, 1000) != HAL_OK) {
 800084a:	893a      	ldrh	r2, [r7, #8]
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	480a      	ldr	r0, [pc, #40]	@ (800087c <Asm330_read+0x88>)
 8000854:	f00b ff48 	bl	800c6e8 <HAL_SPI_Receive>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <Asm330_read+0x76>
    SPI_CS_Control(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff66 	bl	8000730 <SPI_CS_Control>
    return -3;
 8000864:	f06f 0302 	mvn.w	r3, #2
 8000868:	e003      	b.n	8000872 <Asm330_read+0x7e>
  }
  SPI_CS_Control(1);  // 拉高cs
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff60 	bl	8000730 <SPI_CS_Control>

  return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24002338 	.word	0x24002338

08000880 <Asm330_Drive_Init>:

int32_t Asm330_Drive_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  SPI_CS_Control(1);  // CS high
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff ff53 	bl	8000730 <SPI_CS_Control>
  dev_ctx.write_reg = Asm330_write;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <Asm330_Drive_Init+0x24>)
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <Asm330_Drive_Init+0x28>)
 800088e:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = Asm330_read;
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <Asm330_Drive_Init+0x24>)
 8000892:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <Asm330_Drive_Init+0x2c>)
 8000894:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = HAL_Delay;
 8000896:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <Asm330_Drive_Init+0x24>)
 8000898:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <Asm330_Drive_Init+0x30>)
 800089a:	609a      	str	r2, [r3, #8]

  return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2400020c 	.word	0x2400020c
 80008a8:	08000765 	.word	0x08000765
 80008ac:	080007f5 	.word	0x080007f5
 80008b0:	08003811 	.word	0x08003811

080008b4 <BPhero_UWB_Message_Init>:
/* Hold copy of status register state here for reference, so reader can examine it at a breakpoint. */
/* Hold copy of frame length of frame received (if good), so reader can examine it at a breakpoint. */
uint16 frame_len = 0;

void BPhero_UWB_Message_Init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
    // set frame type (0-2), SEC (3), Pending (4), ACK (5), PanIDcomp(6)
    msg_f_send.frameCtrl[0] = 0x1 /*frame type 0x1 == data*/ | 0x40 /*PID comp*/ | 0x20 /* ACK request*/;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008ba:	2261      	movs	r2, #97	@ 0x61
 80008bc:	701a      	strb	r2, [r3, #0]
    // source/dest addressing modes and frame version
    // msg_f.frameCtrl[0] = 0x41;
    msg_f_send.frameCtrl[1] = 0x8 /*dest extended address (16bits)*/ | 0x80 /*src extended address (16bits)*/;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008c0:	2288      	movs	r2, #136	@ 0x88
 80008c2:	705a      	strb	r2, [r3, #1]
    msg_f_send.panID[0]     = 0xF0;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008c6:	22f0      	movs	r2, #240	@ 0xf0
 80008c8:	70da      	strb	r2, [r3, #3]
    msg_f_send.panID[1]     = 0xF0;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008cc:	22f0      	movs	r2, #240	@ 0xf0
 80008ce:	711a      	strb	r2, [r3, #4]

    msg_f_send.seqNum                 = 0;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	709a      	strb	r2, [r3, #2]
    msg_f_send.messageData[POLL_RNUM] = 3;                       // copy new range number
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008d8:	2203      	movs	r2, #3
 80008da:	729a      	strb	r2, [r3, #10]
    msg_f_send.messageData[FCODE]     = RTLS_DEMO_MSG_ANCH_POLL; // message function code (specifies if message is a poll, response or other...)
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008de:	2271      	movs	r2, #113	@ 0x71
 80008e0:	725a      	strb	r2, [r3, #9]
    psduLength                        = (TAG_POLL_MSG_LEN + FRAME_CRTL_AND_ADDRESS_S + FRAME_CRC);
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <BPhero_UWB_Message_Init+0x60>)
 80008e4:	2219      	movs	r2, #25
 80008e6:	601a      	str	r2, [r3, #0]

    msg_f_send.seqNum        = 0;                        // copy sequence number and then increment
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	709a      	strb	r2, [r3, #2]
    msg_f_send.sourceAddr[0] = SHORT_ADDR & 0xFF;        // copy the address
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008f0:	2232      	movs	r2, #50	@ 0x32
 80008f2:	71da      	strb	r2, [r3, #7]
    msg_f_send.sourceAddr[1] = (SHORT_ADDR >> 8) & 0xFF; // copy the address
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	721a      	strb	r2, [r3, #8]

    msg_f_send.destAddr[0] = 0x01; // set the destination address (broadcast == 0xffff)
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	715a      	strb	r2, [r3, #5]
    msg_f_send.destAddr[1] = 0x01; // set the destination address (broadcast == 0xffff)
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <BPhero_UWB_Message_Init+0x5c>)
 8000902:	2201      	movs	r2, #1
 8000904:	719a      	strb	r2, [r3, #6]
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	24000224 	.word	0x24000224
 8000914:	24000220 	.word	0x24000220

08000918 <BPhero_UWB_Init>:
                         //    DWT_PHRMODE_STD, /* PHY header mode. */
                         //    (129 + 8 - 8)    /* SFD timeout (preamble length + 1 + SFD length - PAC size). Used in RX only. */
};

void BPhero_UWB_Init(void) // dwm1000 init related
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800091c:	f000 f8fa 	bl	8000b14 <reset_DW1000>
    spi_set_rate_low();
 8000920:	f000 f92e 	bl	8000b80 <spi_set_rate_low>

    dwt_rxreset();
 8000924:	f01a fd6b 	bl	801b3fe <dwt_rxreset>
    if (dwt_initialise(DWT_LOADUCODE) == -1) {
 8000928:	2001      	movs	r0, #1
 800092a:	f019 fe45 	bl	801a5b8 <dwt_initialise>
 800092e:	4603      	mov	r3, r0
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d101      	bne.n	800093a <BPhero_UWB_Init+0x22>
        while (1) {
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <BPhero_UWB_Init+0x1e>
        }
    }
    // dwt_configuresleepcnt(2);
    spi_set_rate_high();
 800093a:	f000 f939 	bl	8000bb0 <spi_set_rate_high>
    dwt_configure(&config);
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <BPhero_UWB_Init+0x5c>)
 8000940:	f019 fef2 	bl	801a728 <dwt_configure>
    dwt_setleds(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f01a fafc 	bl	801af42 <dwt_setleds>

    dwt_setpanid(0xF0F0);
 800094a:	f24f 00f0 	movw	r0, #61680	@ 0xf0f0
 800094e:	f01a fa4d 	bl	801adec <dwt_setpanid>
    dwt_setaddress16(SHORT_ADDR);
 8000952:	2032      	movs	r0, #50	@ 0x32
 8000954:	f01a fa59 	bl	801ae0a <dwt_setaddress16>
    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8000958:	f248 00b6 	movw	r0, #32950	@ 0x80b6
 800095c:	f01a f84c 	bl	801a9f8 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8000960:	2000      	movs	r0, #0
 8000962:	f01a f859 	bl	801aa18 <dwt_settxantennadelay>
    dwt_setinterrupt(DWT_INT_RFCG | (DWT_INT_ARFE | DWT_INT_RFSL | DWT_INT_SFDT | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFTO /*| DWT_INT_RXPTO*/), 1);
 8000966:	2101      	movs	r1, #1
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <BPhero_UWB_Init+0x60>)
 800096a:	f01a fd21 	bl	801b3b0 <dwt_setinterrupt>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	24000000 	.word	0x24000000
 8000978:	2403d000 	.word	0x2403d000

0800097c <bphero_setcallbacks>:

void (*bphero_rxcallback)(void) = NULL; // 初始化为NULL

void bphero_setcallbacks(void (*rxcallback)(void))
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    bphero_rxcallback = rxcallback;
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <bphero_setcallbacks+0x1c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	24000308 	.word	0x24000308

0800099c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = 1; //为了兼容给的函数，没有意义
 80009a2:	2301      	movs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]

	if(s) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <decamutexon+0x14>
		taskENTER_CRITICAL(); //disable the external interrupt line
 80009ac:	f019 f834 	bl	8019a18 <vPortEnterCritical>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <decamutexoff+0x12>
		taskEXIT_CRITICAL();
 80009c8:	f019 f858 	bl	8019a7c <vPortExitCritical>
	}
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <deca_sleep>:
#include "cmsis_os.h"



void deca_sleep(unsigned int time_ms)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
      osDelay(time_ms);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f015 fdce 	bl	801657e <osDelay>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi_serial(uint16 headerLength, const uint8 *headerBuffer,
                      uint32 bodylength, const uint8 *bodyBuffer)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4603      	mov	r3, r0
 80009fa:	81fb      	strh	r3, [r7, #14]

    decaIrqStatus_t stat;

    stat = decamutexon();
 80009fc:	f7ff ffce 	bl	800099c <decamutexon>
 8000a00:	6178      	str	r0, [r7, #20]

    // 1. 开始SPI事务：将CS引脚拉低
    HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a08:	481b      	ldr	r0, [pc, #108]	@ (8000a78 <writetospi+0x8c>)
 8000a0a:	f006 f91f 	bl	8006c4c <HAL_GPIO_WritePin>

    // 2. 发送命令头
    // 使用(uint8_t*)进行强制类型转换以匹配HAL函数的参数类型
    if (HAL_SPI_Transmit(DW1000_SPI_HANDLE, (uint8_t *)headerBuffer, headerLength, SPI_TIMEOUT) != HAL_OK) {
 8000a0e:	89fa      	ldrh	r2, [r7, #14]
 8000a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	4819      	ldr	r0, [pc, #100]	@ (8000a7c <writetospi+0x90>)
 8000a18:	f00b fc78 	bl	800c30c <HAL_SPI_Transmit>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <writetospi+0x48>
        // 如果发送失败，立即结束事务并返回错误
        HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a28:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <writetospi+0x8c>)
 8000a2a:	f006 f90f 	bl	8006c4c <HAL_GPIO_WritePin>
        return SPI_ERROR;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e01d      	b.n	8000a70 <writetospi+0x84>
    }

    // 3. 发送数据体
    if (HAL_SPI_Transmit(DW1000_SPI_HANDLE, (uint8_t *)bodyBuffer, bodylength, SPI_TIMEOUT) != HAL_OK) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a3c:	6839      	ldr	r1, [r7, #0]
 8000a3e:	480f      	ldr	r0, [pc, #60]	@ (8000a7c <writetospi+0x90>)
 8000a40:	f00b fc64 	bl	800c30c <HAL_SPI_Transmit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d008      	beq.n	8000a5c <writetospi+0x70>
        // 如果发送失败，立即结束事务并返回错误
        HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <writetospi+0x8c>)
 8000a52:	f006 f8fb 	bl	8006c4c <HAL_GPIO_WritePin>
        return SPI_ERROR;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <writetospi+0x84>
    }

    // 4. 结束SPI事务：将CS引脚拉高
    HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <writetospi+0x8c>)
 8000a64:	f006 f8f2 	bl	8006c4c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000a68:	6978      	ldr	r0, [r7, #20]
 8000a6a:	f7ff ffa6 	bl	80009ba <decamutexoff>

    return 0;
 8000a6e:	2300      	movs	r3, #0
} // end writetospi()
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58020400 	.word	0x58020400
 8000a7c:	240023c0 	.word	0x240023c0

08000a80 <readfromspi>:
 * found, or returns -1 if there was an error
 */

int readfromspi_serial(uint16 headerLength, const uint8 *headerBuffer,
                       uint32 readlength, uint8 *readBuffer)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	81fb      	strh	r3, [r7, #14]

    decaIrqStatus_t stat;

    stat = decamutexon();
 8000a90:	f7ff ff84 	bl	800099c <decamutexon>
 8000a94:	6178      	str	r0, [r7, #20]

    HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a9c:	481b      	ldr	r0, [pc, #108]	@ (8000b0c <readfromspi+0x8c>)
 8000a9e:	f006 f8d5 	bl	8006c4c <HAL_GPIO_WritePin>

    // 2. 发送命令头。在发送的同时，DW1000也会在MISO线上返回数据，但我们忽略这些数据。
    if (HAL_SPI_Transmit(DW1000_SPI_HANDLE, (uint8_t *)headerBuffer, headerLength, SPI_TIMEOUT) != HAL_OK) {
 8000aa2:	89fa      	ldrh	r2, [r7, #14]
 8000aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	4819      	ldr	r0, [pc, #100]	@ (8000b10 <readfromspi+0x90>)
 8000aac:	f00b fc2e 	bl	800c30c <HAL_SPI_Transmit>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <readfromspi+0x48>
        // 如果发送失败，立即结束事务并返回错误
        HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <readfromspi+0x8c>)
 8000abe:	f006 f8c5 	bl	8006c4c <HAL_GPIO_WritePin>
        return SPI_ERROR;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e01d      	b.n	8000b04 <readfromspi+0x84>
    }

    // 3. 接收数据。为了接收数据，主机必须发送等量的虚拟数据(dummy bytes)来产生时钟信号。
    // HAL_SPI_Receive函数会自动处理发送虚拟数据的过程。
    if (HAL_SPI_Receive(DW1000_SPI_HANDLE, readBuffer, readlength, SPI_TIMEOUT) != HAL_OK) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <readfromspi+0x90>)
 8000ad4:	f00b fe08 	bl	800c6e8 <HAL_SPI_Receive>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <readfromspi+0x70>
        // 如果接收失败，立即结束事务并返回错误
        HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <readfromspi+0x8c>)
 8000ae6:	f006 f8b1 	bl	8006c4c <HAL_GPIO_WritePin>
        return SPI_ERROR;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <readfromspi+0x84>
    }

    // 4. 结束SPI事务：将CS引脚拉高
    HAL_GPIO_WritePin(DW1000_CS_GPIO_Port, DW1000_CS_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <readfromspi+0x8c>)
 8000af8:	f006 f8a8 	bl	8006c4c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000afc:	6978      	ldr	r0, [r7, #20]
 8000afe:	f7ff ff5c 	bl	80009ba <decamutexoff>

    return 0;
 8000b02:	2300      	movs	r3, #0
} // end readfromspi()
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	240023c0 	.word	0x240023c0

08000b14 <reset_DW1000>:
#include "dw1000port.h"

void reset_DW1000(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

    HAL_GPIO_WritePin(DWRSTnGPIOx, DWRSTnGPIOPINx, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <reset_DW1000+0x68>)
 8000b30:	f006 f88c 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PD9 */
    GPIO_InitStruct.Pin   = DWRSTnGPIOPINx;
 8000b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b38:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DWRSTnGPIOx, &GPIO_InitStruct);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <reset_DW1000+0x68>)
 8000b4c:	f005 fdac 	bl	80066a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = DWRSTnGPIOPINx;
 8000b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b54:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DWRSTnGPIOx, &GPIO_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <reset_DW1000+0x68>)
 8000b68:	f005 fd9e 	bl	80066a8 <HAL_GPIO_Init>
    HAL_Delay(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f002 fe4f 	bl	8003810 <HAL_Delay>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020c00 	.word	0x58020c00

08000b80 <spi_set_rate_low>:

/**
 * @brief  将SPI2设置为低速模式，用于DW1000初始化。
 */
void spi_set_rate_low(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    // 等待SPI总线空闲
    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000b84:	bf00      	nop
 8000b86:	4809      	ldr	r0, [pc, #36]	@ (8000bac <spi_set_rate_low+0x2c>)
 8000b88:	f00c f820 	bl	800cbcc <HAL_SPI_GetState>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1f9      	bne.n	8000b86 <spi_set_rate_low+0x6>

    // 取消初始化SPI
    HAL_SPI_DeInit(&hspi2);
 8000b92:	4806      	ldr	r0, [pc, #24]	@ (8000bac <spi_set_rate_low+0x2c>)
 8000b94:	f00b fb90 	bl	800c2b8 <HAL_SPI_DeInit>

    // 修改SPI句柄中的分频系数为低速配置
    hspi2.Init.BaudRatePrescaler = LOW_SPEED_PRESCALER;
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <spi_set_rate_low+0x2c>)
 8000b9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b9e:	61da      	str	r2, [r3, #28]

    // 使用新的配置重新初始化SPI
    HAL_SPI_Init(&hspi2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <spi_set_rate_low+0x2c>)
 8000ba2:	f00b fa65 	bl	800c070 <HAL_SPI_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240023c0 	.word	0x240023c0

08000bb0 <spi_set_rate_high>:

/**
 * @brief  将SPI2设置为高速模式，用于DW1000正常数据通信。
 */
void spi_set_rate_high(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    // 等待SPI总线空闲
    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000bb4:	bf00      	nop
 8000bb6:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <spi_set_rate_high+0x2c>)
 8000bb8:	f00c f808 	bl	800cbcc <HAL_SPI_GetState>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d1f9      	bne.n	8000bb6 <spi_set_rate_high+0x6>

    // 取消初始化SPI
    HAL_SPI_DeInit(&hspi2);
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <spi_set_rate_high+0x2c>)
 8000bc4:	f00b fb78 	bl	800c2b8 <HAL_SPI_DeInit>

    // 修改SPI句柄中的分频系数为高速配置
    hspi2.Init.BaudRatePrescaler = HIGH_SPEED_PRESCALER;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <spi_set_rate_high+0x2c>)
 8000bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bce:	61da      	str	r2, [r3, #28]

    // 使用新的配置重新初始化SPI
    HAL_SPI_Init(&hspi2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <spi_set_rate_high+0x2c>)
 8000bd2:	f00b fa4d 	bl	800c070 <HAL_SPI_Init>
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240023c0 	.word	0x240023c0

08000be0 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64 get_tx_timestamp_u64(void)
{
 8000be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f019 ff6a 	bl	801aad0 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--) {
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e01e      	b.n	8000c40 <get_tx_timestamp_u64+0x60>
        ts <<= 8;
 8000c02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	020b      	lsls	r3, r1, #8
 8000c10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000c14:	0202      	lsls	r2, r0, #8
 8000c16:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8000c1a:	1d3a      	adds	r2, r7, #4
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c2e:	ea42 0804 	orr.w	r8, r2, r4
 8000c32:	ea43 0905 	orr.w	r9, r3, r5
 8000c36:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dadd      	bge.n	8000c02 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8000c46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000c56 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64 get_rx_timestamp_u64(void)
{
 8000c56:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f019 ff3d 	bl	801aaec <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--) {
 8000c72:	2304      	movs	r3, #4
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e01e      	b.n	8000cb6 <get_rx_timestamp_u64+0x60>
        ts <<= 8;
 8000c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	020b      	lsls	r3, r1, #8
 8000c86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000c8a:	0202      	lsls	r2, r0, #8
 8000c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ca4:	ea42 0804 	orr.w	r8, r2, r4
 8000ca8:	ea43 0905 	orr.w	r9, r3, r5
 8000cac:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--) {
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dadd      	bge.n	8000c78 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8000cbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ccc <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e010      	b.n	8000d04 <final_msg_get_ts+0x38>
        *ts += ts_field[i] << (i * 8);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	440a      	add	r2, r1
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	00d2      	lsls	r2, r2, #3
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	441a      	add	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	ddeb      	ble.n	8000ce2 <final_msg_get_ts+0x16>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <Simple_Rx_Callback>:

static srd_msg_dsss *msg_f;

/* Private functions ---------------------------------------------------------*/
void Simple_Rx_Callback()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
    uint32 status_reg = 0, i = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < FRAME_LEN_MAX; i++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e007      	b.n	8000d3c <Simple_Rx_Callback+0x24>
        rx_buffer[i] = '\0';
 8000d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee8 <Simple_Rx_Callback+0x1d0>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4413      	add	r3, r2
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FRAME_LEN_MAX; i++) {
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d40:	d9f4      	bls.n	8000d2c <Simple_Rx_Callback+0x14>
    }
    /* Activate reception immediately. See NOTE 2 below. */
    dwt_enableframefilter(DWT_FF_RSVD_EN); // disable recevie
 8000d42:	2040      	movs	r0, #64	@ 0x40
 8000d44:	f01a f820 	bl	801ad88 <dwt_enableframefilter>
    status_reg = dwt_read32bitreg(SYS_STATUS_ID);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f019 ff89 	bl	801ac62 <dwt_read32bitoffsetreg>
 8000d50:	60b8      	str	r0, [r7, #8]

    if (status_reg & SYS_STATUS_RXFCG) // good message
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80af 	beq.w	8000ebc <Simple_Rx_Callback+0x1a4>
    {
        /* A frame has been received, copy it to our local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2010      	movs	r0, #16
 8000d62:	f019 ff7e 	bl	801ac62 <dwt_read32bitoffsetreg>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b5e      	ldr	r3, [pc, #376]	@ (8000eec <Simple_Rx_Callback+0x1d4>)
 8000d72:	801a      	strh	r2, [r3, #0]
        if (frame_len <= FRAME_LEN_MAX) {
 8000d74:	4b5d      	ldr	r3, [pc, #372]	@ (8000eec <Simple_Rx_Callback+0x1d4>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d7a:	f200 8095 	bhi.w	8000ea8 <Simple_Rx_Callback+0x190>
            dwt_readrxdata(rx_buffer, frame_len, 0);
 8000d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8000eec <Simple_Rx_Callback+0x1d4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	4858      	ldr	r0, [pc, #352]	@ (8000ee8 <Simple_Rx_Callback+0x1d0>)
 8000d88:	f019 fe90 	bl	801aaac <dwt_readrxdata>
            msg_f = (srd_msg_dsss *)rx_buffer;
 8000d8c:	4b58      	ldr	r3, [pc, #352]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000d8e:	4a56      	ldr	r2, [pc, #344]	@ (8000ee8 <Simple_Rx_Callback+0x1d0>)
 8000d90:	601a      	str	r2, [r3, #0]
            // copy source address as dest address
            msg_f_send.destAddr[0] = msg_f->sourceAddr[0];
 8000d92:	4b57      	ldr	r3, [pc, #348]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79da      	ldrb	r2, [r3, #7]
 8000d98:	4b56      	ldr	r3, [pc, #344]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000d9a:	715a      	strb	r2, [r3, #5]
            msg_f_send.destAddr[1] = msg_f->sourceAddr[1];
 8000d9c:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7a1a      	ldrb	r2, [r3, #8]
 8000da2:	4b54      	ldr	r3, [pc, #336]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000da4:	719a      	strb	r2, [r3, #6]
            // copy source seqNum
            msg_f_send.seqNum = msg_f->seqNum;
 8000da6:	4b52      	ldr	r3, [pc, #328]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	789a      	ldrb	r2, [r3, #2]
 8000dac:	4b51      	ldr	r3, [pc, #324]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000dae:	709a      	strb	r2, [r3, #2]

            switch (msg_f->messageData[0]) {
 8000db0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7a5b      	ldrb	r3, [r3, #9]
 8000db6:	2b44      	cmp	r3, #68	@ 0x44
 8000db8:	d175      	bne.n	8000ea6 <Simple_Rx_Callback+0x18e>
                case 'D': // distance
                    msg_f_send.messageData[0] = 'd';
 8000dba:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000dbc:	2264      	movs	r2, #100	@ 0x64
 8000dbe:	725a      	strb	r2, [r3, #9]
                    msg_f_send.messageData[1] = msg_f->messageData[1];
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	7a9a      	ldrb	r2, [r3, #10]
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000dc8:	729a      	strb	r2, [r3, #10]
                    if (bphero_distance[msg_f->sourceAddr[0]].count > 0) {
 8000dca:	4b49      	ldr	r3, [pc, #292]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	79db      	ldrb	r3, [r3, #7]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4a49      	ldr	r2, [pc, #292]	@ (8000ef8 <Simple_Rx_Callback+0x1e0>)
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4413      	add	r3, r2
 8000dde:	334c      	adds	r3, #76	@ 0x4c
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	dd30      	ble.n	8000e48 <Simple_Rx_Callback+0x130>
                        msg_f_send.messageData[2] = 'V';
 8000de6:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000de8:	2256      	movs	r2, #86	@ 0x56
 8000dea:	72da      	strb	r2, [r3, #11]
                        int distance0             = (int)(bphero_distance[msg_f->sourceAddr[0]].rx_distance * 100); // distance 0
 8000dec:	4b40      	ldr	r3, [pc, #256]	@ (8000ef0 <Simple_Rx_Callback+0x1d8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	79db      	ldrb	r3, [r3, #7]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4a40      	ldr	r2, [pc, #256]	@ (8000ef8 <Simple_Rx_Callback+0x1e0>)
 8000df6:	460b      	mov	r3, r1
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	4413      	add	r3, r2
 8000e00:	ed93 7b00 	vldr	d7, [r3]
 8000e04:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8000ee0 <Simple_Rx_Callback+0x1c8>
 8000e08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e10:	ee17 3a90 	vmov	r3, s15
 8000e14:	607b      	str	r3, [r7, #4]
                        msg_f_send.messageData[3] = (uint8)(distance0 / 100);                                       // ����m
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a38      	ldr	r2, [pc, #224]	@ (8000efc <Simple_Rx_Callback+0x1e4>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1152      	asrs	r2, r2, #5
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b33      	ldr	r3, [pc, #204]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e28:	731a      	strb	r2, [r3, #12]
                        msg_f_send.messageData[4] = (uint8)(distance0 % 100);                                       // С��cm
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a33      	ldr	r2, [pc, #204]	@ (8000efc <Simple_Rx_Callback+0x1e4>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1151      	asrs	r1, r2, #5
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	1a8a      	subs	r2, r1, r2
 8000e38:	2164      	movs	r1, #100	@ 0x64
 8000e3a:	fb01 f202 	mul.w	r2, r1, r2
 8000e3e:	1a9a      	subs	r2, r3, r2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e44:	735a      	strb	r2, [r3, #13]
 8000e46:	e008      	b.n	8000e5a <Simple_Rx_Callback+0x142>
                    } else {
                        msg_f_send.messageData[2] = 'N';
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e4a:	224e      	movs	r2, #78	@ 0x4e
 8000e4c:	72da      	strb	r2, [r3, #11]
                        msg_f_send.messageData[3] = 0xFF;
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e50:	22ff      	movs	r2, #255	@ 0xff
 8000e52:	731a      	strb	r2, [r3, #12]
                        msg_f_send.messageData[4] = 0xFF;
 8000e54:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	735a      	strb	r2, [r3, #13]
                    }
                    dwt_writetxdata(psduLength, (uint8 *)&msg_f_send, 0); // write the frame data
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <Simple_Rx_Callback+0x1e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	4924      	ldr	r1, [pc, #144]	@ (8000ef4 <Simple_Rx_Callback+0x1dc>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f019 fde6 	bl	801aa36 <dwt_writetxdata>
                    dwt_writetxfctrl(psduLength, 0);
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <Simple_Rx_Callback+0x1e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f019 fdfe 	bl	801aa74 <dwt_writetxfctrl>
                    /* Start transmission. */
                    dwt_starttx(DWT_START_TX_IMMEDIATE);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f01a f969 	bl	801b150 <dwt_starttx>
                    // MUST WAIT!!!!!
                    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_TXFRS))) {};
 8000e7e:	bf00      	nop
 8000e80:	2100      	movs	r1, #0
 8000e82:	200f      	movs	r0, #15
 8000e84:	f019 feed 	bl	801ac62 <dwt_read32bitoffsetreg>
 8000e88:	60b8      	str	r0, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f5      	beq.n	8000e80 <Simple_Rx_Callback+0x168>
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS | SYS_STATUS_RXFCG);
 8000e94:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f019 ff4b 	bl	801ad36 <dwt_write32bitoffsetreg>

                    Handle_TimeStamp();
 8000ea0:	f000 f832 	bl	8000f08 <Handle_TimeStamp>
                    break;
 8000ea4:	e000      	b.n	8000ea8 <Simple_Rx_Callback+0x190>
                default:
                    break;
 8000ea6:	bf00      	nop
            }
        }
        // enable recive again
        dwt_enableframefilter(DWT_FF_DATA_EN);
 8000ea8:	2008      	movs	r0, #8
 8000eaa:	f019 ff6d 	bl	801ad88 <dwt_enableframefilter>
        dwt_setrxtimeout(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f01a fa3e 	bl	801b330 <dwt_setrxtimeout>
        dwt_rxenable(0);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f01a fa01 	bl	801b2bc <dwt_rxenable>
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR));
        // enable recive again
        dwt_enableframefilter(DWT_FF_DATA_EN);
        dwt_rxenable(0);
    }
}
 8000eba:	e00a      	b.n	8000ed2 <Simple_Rx_Callback+0x1ba>
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR));
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <Simple_Rx_Callback+0x1ec>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	200f      	movs	r0, #15
 8000ec2:	f019 ff38 	bl	801ad36 <dwt_write32bitoffsetreg>
        dwt_enableframefilter(DWT_FF_DATA_EN);
 8000ec6:	2008      	movs	r0, #8
 8000ec8:	f019 ff5e 	bl	801ad88 <dwt_enableframefilter>
        dwt_rxenable(0);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f01a f9f5 	bl	801b2bc <dwt_rxenable>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40590000 	.word	0x40590000
 8000ee8:	24000284 	.word	0x24000284
 8000eec:	24000304 	.word	0x24000304
 8000ef0:	24000f90 	.word	0x24000f90
 8000ef4:	24000224 	.word	0x24000224
 8000ef8:	24000310 	.word	0x24000310
 8000efc:	51eb851f 	.word	0x51eb851f
 8000f00:	24000220 	.word	0x24000220
 8000f04:	2427d000 	.word	0x2427d000

08000f08 <Handle_TimeStamp>:

static void Handle_TimeStamp(void)
{
 8000f08:	b598      	push	{r3, r4, r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    bphero_distance[msg_f->sourceAddr[0]].present          = true;
 8000f0c:	4b78      	ldr	r3, [pc, #480]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	79db      	ldrb	r3, [r3, #7]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4a77      	ldr	r2, [pc, #476]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f16:	460b      	mov	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4413      	add	r3, r2
 8000f20:	3348      	adds	r3, #72	@ 0x48
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
    bphero_distance[msg_f->sourceAddr[0]].rx_node.tx_ts[0] = bphero_distance[msg_f->sourceAddr[0]].rx_node.tx_ts[1];
 8000f26:	4b72      	ldr	r3, [pc, #456]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	79db      	ldrb	r3, [r3, #7]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4b70      	ldr	r3, [pc, #448]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	79db      	ldrb	r3, [r3, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	4a6f      	ldr	r2, [pc, #444]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	332c      	adds	r3, #44	@ 0x2c
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	496b      	ldr	r1, [pc, #428]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f48:	4603      	mov	r3, r0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4403      	add	r3, r0
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	3328      	adds	r3, #40	@ 0x28
 8000f54:	601a      	str	r2, [r3, #0]
    bphero_distance[msg_f->sourceAddr[0]].rx_node.rx_ts[0] = bphero_distance[msg_f->sourceAddr[0]].rx_node.rx_ts[1];
 8000f56:	4b66      	ldr	r3, [pc, #408]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	79db      	ldrb	r3, [r3, #7]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4b64      	ldr	r3, [pc, #400]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	79db      	ldrb	r3, [r3, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	4a63      	ldr	r2, [pc, #396]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	3334      	adds	r3, #52	@ 0x34
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	495f      	ldr	r1, [pc, #380]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f78:	4603      	mov	r3, r0
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4403      	add	r3, r0
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	440b      	add	r3, r1
 8000f82:	3330      	adds	r3, #48	@ 0x30
 8000f84:	601a      	str	r2, [r3, #0]
    bphero_distance[msg_f->sourceAddr[0]].rx_node.tx_ts[1] = get_tx_timestamp_u64();
 8000f86:	f7ff fe2b 	bl	8000be0 <get_tx_timestamp_u64>
 8000f8a:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	79db      	ldrb	r3, [r3, #7]
 8000f90:	461c      	mov	r4, r3
 8000f92:	4601      	mov	r1, r0
 8000f94:	4a57      	ldr	r2, [pc, #348]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000f96:	4623      	mov	r3, r4
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4423      	add	r3, r4
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	332c      	adds	r3, #44	@ 0x2c
 8000fa2:	6019      	str	r1, [r3, #0]
    bphero_distance[msg_f->sourceAddr[0]].rx_node.rx_ts[1] = get_rx_timestamp_u64();
 8000fa4:	f7ff fe57 	bl	8000c56 <get_rx_timestamp_u64>
 8000fa8:	4b51      	ldr	r3, [pc, #324]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79db      	ldrb	r3, [r3, #7]
 8000fae:	461c      	mov	r4, r3
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	4a50      	ldr	r2, [pc, #320]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000fb4:	4623      	mov	r3, r4
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4423      	add	r3, r4
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3334      	adds	r3, #52	@ 0x34
 8000fc0:	6019      	str	r1, [r3, #0]

    final_msg_get_ts((uint8 *)&(msg_f->messageData[FIRST_TX]), &bphero_distance[msg_f->sourceAddr[0]].tx_node.tx_ts[0]);
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f103 020b 	add.w	r2, r3, #11
 8000fca:	4b49      	ldr	r3, [pc, #292]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	79db      	ldrb	r3, [r3, #7]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	3308      	adds	r3, #8
 8000fdc:	4945      	ldr	r1, [pc, #276]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8000fde:	440b      	add	r3, r1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f7ff fe72 	bl	8000ccc <final_msg_get_ts>
    final_msg_get_ts((uint8 *)&(msg_f->messageData[FIRST_RX]), &bphero_distance[msg_f->sourceAddr[0]].tx_node.rx_ts[0]);
 8000fe8:	4b41      	ldr	r3, [pc, #260]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f103 020f 	add.w	r2, r3, #15
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	79db      	ldrb	r3, [r3, #7]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	3310      	adds	r3, #16
 8001002:	493c      	ldr	r1, [pc, #240]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8001004:	440b      	add	r3, r1
 8001006:	4619      	mov	r1, r3
 8001008:	4610      	mov	r0, r2
 800100a:	f7ff fe5f 	bl	8000ccc <final_msg_get_ts>
    {
        bphero_distance[msg_f->sourceAddr[0]].rx_distance = (((bphero_distance[msg_f->sourceAddr[0]].tx_node.rx_ts[0] - bphero_distance[msg_f->sourceAddr[0]].tx_node.tx_ts[0]) - (bphero_distance[msg_f->sourceAddr[0]].rx_node.tx_ts[0] - bphero_distance[msg_f->sourceAddr[0]].rx_node.rx_ts[0])) / 2.0) * DWT_TIME_UNITS * SPEED_OF_LIGHT;
 800100e:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	79db      	ldrb	r3, [r3, #7]
 8001014:	4619      	mov	r1, r3
 8001016:	4a37      	ldr	r2, [pc, #220]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8001018:	460b      	mov	r3, r1
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	3310      	adds	r3, #16
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	79db      	ldrb	r3, [r3, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	4931      	ldr	r1, [pc, #196]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8001030:	4603      	mov	r3, r0
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4403      	add	r3, r0
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	79db      	ldrb	r3, [r3, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	492a      	ldr	r1, [pc, #168]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 800104a:	4603      	mov	r3, r0
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4403      	add	r3, r0
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	3330      	adds	r3, #48	@ 0x30
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	79db      	ldrb	r3, [r3, #7]
 800105e:	461c      	mov	r4, r3
 8001060:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 8001062:	4623      	mov	r3, r4
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4423      	add	r3, r4
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	4403      	add	r3, r0
 800106c:	3328      	adds	r3, #40	@ 0x28
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1acb      	subs	r3, r1, r3
 8001072:	4413      	add	r3, r2
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800107c:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001080:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001084:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80010e0 <Handle_TimeStamp+0x1d8>
 8001088:	ee27 7b06 	vmul.f64	d7, d7, d6
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	79db      	ldrb	r3, [r3, #7]
 8001092:	4619      	mov	r1, r3
 8001094:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80010e8 <Handle_TimeStamp+0x1e0>
 8001098:	ee27 7b06 	vmul.f64	d7, d7, d6
 800109c:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 800109e:	460b      	mov	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	ed83 7b00 	vstr	d7, [r3]
        bphero_distance[msg_f->sourceAddr[0]].count++;
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <Handle_TimeStamp+0x1e8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	79db      	ldrb	r3, [r3, #7]
 80010b2:	461a      	mov	r2, r3
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	334c      	adds	r3, #76	@ 0x4c
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1c59      	adds	r1, r3, #1
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <Handle_TimeStamp+0x1ec>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4403      	add	r3, r0
 80010d2:	334c      	adds	r3, #76	@ 0x4c
 80010d4:	6019      	str	r1, [r3, #0]
    }
}
 80010d6:	bf00      	nop
 80010d8:	bd98      	pop	{r3, r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	3bce48fa 	.word	0x3bce48fa
 80010e4:	3db13518 	.word	0x3db13518
 80010e8:	13000000 	.word	0x13000000
 80010ec:	41b1dd19 	.word	0x41b1dd19
 80010f0:	24000f90 	.word	0x24000f90
 80010f4:	24000310 	.word	0x24000310

080010f8 <rx_main>:

int rx_main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    bphero_distance[0].rx_distance = 0;
 80010fc:	490a      	ldr	r1, [pc, #40]	@ (8001128 <rx_main+0x30>)
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c1 2300 	strd	r2, r3, [r1]
    // Enable RX
    dwt_setrxtimeout(0);
 800110a:	2000      	movs	r0, #0
 800110c:	f01a f910 	bl	801b330 <dwt_setrxtimeout>
    dwt_enableframefilter(DWT_FF_DATA_EN);
 8001110:	2008      	movs	r0, #8
 8001112:	f019 fe39 	bl	801ad88 <dwt_enableframefilter>
    dwt_rxenable(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f01a f8d0 	bl	801b2bc <dwt_rxenable>
    // Set Rx callback
    bphero_setcallbacks(Simple_Rx_Callback);
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <rx_main+0x34>)
 800111e:	f7ff fc2d 	bl	800097c <bphero_setcallbacks>
    while (1) {
 8001122:	bf00      	nop
 8001124:	e7fd      	b.n	8001122 <rx_main+0x2a>
 8001126:	bf00      	nop
 8001128:	24000310 	.word	0x24000310
 800112c:	08000d19 	.word	0x08000d19

08001130 <RB_Init>:
#include "DoubleRingBuffer.h"

#include "string.h"

int RB_Init(RingBuffer *rb, uint8_t *memPool, size_t bufSize) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  if (!rb || !memPool || bufSize == 0) return -1;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <RB_Init+0x20>
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <RB_Init+0x20>
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <RB_Init+0x26>
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e034      	b.n	80011c0 <RB_Init+0x90>

  rb->bufferSize = bufSize;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	811a      	strh	r2, [r3, #8]
  rb->activeBuf = 0;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2200      	movs	r2, #0
 8001160:	749a      	strb	r2, [r3, #18]

  rb->buffers[0] = memPool;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	601a      	str	r2, [r3, #0]
  rb->buffers[1] = memPool + bufSize;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	441a      	add	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	605a      	str	r2, [r3, #4]

  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e01f      	b.n	80011b8 <RB_Init+0x88>
    rb->writePos[i] = 0;
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3304      	adds	r3, #4
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	2200      	movs	r2, #0
 8001184:	805a      	strh	r2, [r3, #2]
    rb->readPos[i] = 0;
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3304      	adds	r3, #4
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	80da      	strh	r2, [r3, #6]
    rb->bufFullFlag[i] = 0;
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4413      	add	r3, r2
 800119a:	3313      	adds	r3, #19
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    memset(rb->buffers[i], 0, bufSize);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f01a ff9f 	bl	801c0f0 <memset>
  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	dddc      	ble.n	8001178 <RB_Init+0x48>
  }
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <RB_Write>:

int RB_Write(RingBuffer *rb, const uint8_t *data, size_t len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80fb      	strh	r3, [r7, #6]
  if (!rb || !data || len == 0) return -1;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <RB_Write+0x20>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <RB_Write+0x20>
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <RB_Write+0x26>
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e065      	b.n	80012ba <RB_Write+0xf2>

  size_t remaining = len;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	83fb      	strh	r3, [r7, #30]
  size_t offset = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	83bb      	strh	r3, [r7, #28]

  while (remaining > 0) {
 80011f6:	e05c      	b.n	80012b2 <RB_Write+0xea>
    uint8_t bufIdx = rb->activeBuf;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	7c9b      	ldrb	r3, [r3, #18]
 80011fc:	76fb      	strb	r3, [r7, #27]
    size_t spaceLeft = rb->bufferSize - rb->writePos[bufIdx];
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	891a      	ldrh	r2, [r3, #8]
 8001202:	7efb      	ldrb	r3, [r7, #27]
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	3304      	adds	r3, #4
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	440b      	add	r3, r1
 800120c:	885b      	ldrh	r3, [r3, #2]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	833b      	strh	r3, [r7, #24]

    if (spaceLeft == 0) {
 8001212:	8b3b      	ldrh	r3, [r7, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10d      	bne.n	8001234 <RB_Write+0x6c>
      // 当前缓冲区已满 -> 标志置位
      rb->bufFullFlag[bufIdx] = 1;
 8001218:	7efb      	ldrb	r3, [r7, #27]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	2201      	movs	r2, #1
 8001220:	74da      	strb	r2, [r3, #19]
      // 切换到另一缓冲区
      RB_SwitchBuffer(rb);
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f8c2 	bl	80013ac <RB_SwitchBuffer>
      bufIdx = rb->activeBuf;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	7c9b      	ldrb	r3, [r3, #18]
 800122c:	76fb      	strb	r3, [r7, #27]
      spaceLeft = rb->bufferSize;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	891b      	ldrh	r3, [r3, #8]
 8001232:	833b      	strh	r3, [r7, #24]
    }

    size_t toWrite = (remaining < spaceLeft) ? remaining : spaceLeft;
 8001234:	8b3a      	ldrh	r2, [r7, #24]
 8001236:	8bfb      	ldrh	r3, [r7, #30]
 8001238:	4293      	cmp	r3, r2
 800123a:	bf28      	it	cs
 800123c:	4613      	movcs	r3, r2
 800123e:	82fb      	strh	r3, [r7, #22]
    memcpy(rb->buffers[bufIdx] + rb->writePos[bufIdx], data + offset, toWrite);
 8001240:	7efa      	ldrb	r2, [r7, #27]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001248:	7efb      	ldrb	r3, [r7, #27]
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	3304      	adds	r3, #4
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	440b      	add	r3, r1
 8001252:	885b      	ldrh	r3, [r3, #2]
 8001254:	18d0      	adds	r0, r2, r3
 8001256:	8bbb      	ldrh	r3, [r7, #28]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	8afa      	ldrh	r2, [r7, #22]
 800125e:	4619      	mov	r1, r3
 8001260:	f01b f823 	bl	801c2aa <memcpy>
    rb->writePos[bufIdx] += toWrite;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	8859      	ldrh	r1, [r3, #2]
 8001270:	7efb      	ldrb	r3, [r7, #27]
 8001272:	8afa      	ldrh	r2, [r7, #22]
 8001274:	440a      	add	r2, r1
 8001276:	b291      	uxth	r1, r2
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	3304      	adds	r3, #4
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	805a      	strh	r2, [r3, #2]
    offset += toWrite;
 8001284:	8bba      	ldrh	r2, [r7, #28]
 8001286:	8afb      	ldrh	r3, [r7, #22]
 8001288:	4413      	add	r3, r2
 800128a:	83bb      	strh	r3, [r7, #28]
    remaining -= toWrite;
 800128c:	8bfa      	ldrh	r2, [r7, #30]
 800128e:	8afb      	ldrh	r3, [r7, #22]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	83fb      	strh	r3, [r7, #30]

    // 如果正好写满，则置标志可用
    if (rb->writePos[bufIdx] >= rb->bufferSize) {
 8001294:	7efb      	ldrb	r3, [r7, #27]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	885a      	ldrh	r2, [r3, #2]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	891b      	ldrh	r3, [r3, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d304      	bcc.n	80012b2 <RB_Write+0xea>
      rb->bufFullFlag[bufIdx] = 1;
 80012a8:	7efb      	ldrb	r3, [r7, #27]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	2201      	movs	r2, #1
 80012b0:	74da      	strb	r2, [r3, #19]
  while (remaining > 0) {
 80012b2:	8bfb      	ldrh	r3, [r7, #30]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d19f      	bne.n	80011f8 <RB_Write+0x30>
    }
  }

  return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <RB_Read>:

size_t RB_Read(RingBuffer *rb, uint8_t *outBuf, size_t len) {
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80fb      	strh	r3, [r7, #6]
  if (!rb || !outBuf || len == 0) return 0;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <RB_Read+0x20>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <RB_Read+0x20>
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <RB_Read+0x24>
 80012e2:	2300      	movs	r3, #0
 80012e4:	e05e      	b.n	80013a4 <RB_Read+0xe2>

  uint8_t bufIdx = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	7c9b      	ldrb	r3, [r3, #18]
 80012ea:	3301      	adds	r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	bfb8      	it	lt
 80012f4:	425b      	neglt	r3, r3
 80012f6:	75fb      	strb	r3, [r7, #23]
  size_t available = rb->writePos[bufIdx] - rb->readPos[bufIdx];
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	885a      	ldrh	r2, [r3, #2]
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	88db      	ldrh	r3, [r3, #6]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	82bb      	strh	r3, [r7, #20]
  size_t toRead = (len < available) ? len : available;
 8001314:	8aba      	ldrh	r2, [r7, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4293      	cmp	r3, r2
 800131a:	bf28      	it	cs
 800131c:	4613      	movcs	r3, r2
 800131e:	827b      	strh	r3, [r7, #18]

  memcpy(outBuf, rb->buffers[bufIdx] + rb->readPos[bufIdx], toRead);
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	88db      	ldrh	r3, [r3, #6]
 8001334:	4413      	add	r3, r2
 8001336:	8a7a      	ldrh	r2, [r7, #18]
 8001338:	4619      	mov	r1, r3
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f01a ffb5 	bl	801c2aa <memcpy>
  rb->readPos[bufIdx] += toRead;
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	88d9      	ldrh	r1, [r3, #6]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	8a7a      	ldrh	r2, [r7, #18]
 8001350:	440a      	add	r2, r1
 8001352:	b291      	uxth	r1, r2
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	3304      	adds	r3, #4
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	80da      	strh	r2, [r3, #6]

  if (rb->readPos[bufIdx] >= rb->writePos[bufIdx]) {
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	3304      	adds	r3, #4
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	68f9      	ldr	r1, [r7, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	440b      	add	r3, r1
 8001376:	885b      	ldrh	r3, [r3, #2]
 8001378:	429a      	cmp	r2, r3
 800137a:	d312      	bcc.n	80013a2 <RB_Read+0xe0>
    rb->readPos[bufIdx] = 0;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	80da      	strh	r2, [r3, #6]
    rb->writePos[bufIdx] = 0;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	3304      	adds	r3, #4
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2200      	movs	r2, #0
 8001396:	805a      	strh	r2, [r3, #2]
    rb->bufFullFlag[bufIdx] = 0;  // 清除满标志
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	74da      	strb	r2, [r3, #19]
  }

  return toRead;
 80013a2:	8a7b      	ldrh	r3, [r7, #18]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <RB_SwitchBuffer>:

void RB_SwitchBuffer(RingBuffer *rb) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  rb->activeBuf = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7c9b      	ldrb	r3, [r3, #18]
 80013b8:	3301      	adds	r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	bfb8      	it	lt
 80013c2:	425b      	neglt	r3, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	749a      	strb	r2, [r3, #18]
  rb->writePos[rb->activeBuf] = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7c9b      	ldrb	r3, [r3, #18]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	3304      	adds	r3, #4
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	805a      	strh	r2, [r3, #2]
  rb->readPos[rb->activeBuf] = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7c9b      	ldrb	r3, [r3, #18]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	3304      	adds	r3, #4
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	80da      	strh	r2, [r3, #6]
  rb->bufFullFlag[rb->activeBuf] = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7c9b      	ldrb	r3, [r3, #18]
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	2200      	movs	r2, #0
 80013f6:	74da      	strb	r2, [r3, #19]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <RB_IsBufferFull>:
size_t RB_GetDataLength(const RingBuffer *rb, uint8_t bufIndex) {
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
  return rb->writePos[bufIndex] - rb->readPos[bufIndex];
}

int RB_IsBufferFull(const RingBuffer *rb, uint8_t bufIndex) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <RB_IsBufferFull+0x18>
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d901      	bls.n	8001420 <RB_IsBufferFull+0x1c>
 800141c:	2300      	movs	r3, #0
 800141e:	e003      	b.n	8001428 <RB_IsBufferFull+0x24>
  return rb->bufFullFlag[bufIndex];
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	7cdb      	ldrb	r3, [r3, #19]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <RB_ClearBufferFlag>:

void RB_ClearBufferFlag(RingBuffer *rb, uint8_t bufIndex) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <RB_ClearBufferFlag+0x24>
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d805      	bhi.n	8001458 <RB_ClearBufferFlag+0x24>
  rb->bufFullFlag[bufIndex] = 0;
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	74da      	strb	r2, [r3, #19]
 8001456:	e000      	b.n	800145a <RB_ClearBufferFlag+0x26>
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8001458:	bf00      	nop
}
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <rb_init>:

#include "gnss_parser.h"

// --- 循环缓冲区实现 ---

void rb_init(ring_buffer_t *rb, uint8_t *buffer, size_t size) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
  rb->head = 0;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  rb->tail = 0;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <rb_read_byte>:
  rb->head = next_head;
  return true;
}

// 供解析器任务调用，从缓冲区读取数据
bool rb_read_byte(ring_buffer_t *rb, uint8_t *byte) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  if (rb->head == rb->tail) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d101      	bne.n	80014ae <rb_read_byte+0x1a>
    // 缓冲区为空
    return false;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e014      	b.n	80014d8 <rb_read_byte+0x44>
  }
  *byte = rb->buffer[rb->tail];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
  rb->tail = (rb->tail + 1) % rb->size;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6852      	ldr	r2, [r2, #4]
 80014c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80014cc:	fb01 f202 	mul.w	r2, r1, r2
 80014d0:	1a9a      	subs	r2, r3, r2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60da      	str	r2, [r3, #12]
  return true;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <calculate_crc32>:
    0x2d02ef8dUL};



uint32_t calculate_crc32(uint8_t *szBuf, uint16_t iSize)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 int iIndex;
 uint32_t ulCRC = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 for (iIndex=0; iIndex<iSize; iIndex++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e011      	b.n	800151e <calculate_crc32+0x3a>
 {
 ulCRC = CrcTable32[(ulCRC ^ szBuf[iIndex]) & 0xff] ^ (ulCRC >> 8);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4053      	eors	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <calculate_crc32+0x50>)
 800150c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	4053      	eors	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
 for (iIndex=0; iIndex<iSize; iIndex++)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe9      	blt.n	80014fa <calculate_crc32+0x16>
 }
 return ulCRC;
 8001526:	68bb      	ldr	r3, [r7, #8]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	0801e164 	.word	0x0801e164

08001538 <gnss_parser_init>:

// --- 解析器实现 ---
// g_gnss_rb

void gnss_parser_init(gnss_parser_t *parser, ring_buffer_t *rb,
                      gnss_message_handler_t handler) {
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  parser->rb = rb;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	601a      	str	r2, [r3, #0]
  parser->handler = handler;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
  parser->state = PARSER_STATE_WAIT_SYNC_1;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	711a      	strb	r2, [r3, #4]
  parser->bytes_read = 0;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
  parser->payload_length = 0;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <gnss_parser_process>:

// 这是解析器的核心，在后台任务中被循环调用
void gnss_parser_process(gnss_parser_t *parser) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint8_t byte;

  // 持续处理缓冲区中的所有数据，直到为空
  while (rb_read_byte(parser->rb, &byte)) {
 800157c:	e109      	b.n	8001792 <gnss_parser_process+0x21e>
    switch (parser->state) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	f200 8105 	bhi.w	8001792 <gnss_parser_process+0x21e>
 8001588:	a201      	add	r2, pc, #4	@ (adr r2, 8001590 <gnss_parser_process+0x1c>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015ad 	.word	0x080015ad
 8001594:	080015cb 	.word	0x080015cb
 8001598:	080015ef 	.word	0x080015ef
 800159c:	08001613 	.word	0x08001613
 80015a0:	0800165d 	.word	0x0800165d
 80015a4:	080016bb 	.word	0x080016bb
 80015a8:	080016f1 	.word	0x080016f1
      case PARSER_STATE_WAIT_SYNC_1:
        if (byte == GNSS_SYNC_BYTE_1) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2baa      	cmp	r3, #170	@ 0xaa
 80015b0:	f040 80e6 	bne.w	8001780 <gnss_parser_process+0x20c>
          parser->msg_buffer[0] = byte;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	731a      	strb	r2, [r3, #12]
          parser->bytes_read = 1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	711a      	strb	r2, [r3, #4]
        }
        break;
 80015c8:	e0da      	b.n	8001780 <gnss_parser_process+0x20c>

      case PARSER_STATE_WAIT_SYNC_2:
        if (byte == GNSS_SYNC_BYTE_2) {
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	2b44      	cmp	r3, #68	@ 0x44
 80015ce:	d10a      	bne.n	80015e6 <gnss_parser_process+0x72>
          parser->msg_buffer[1] = byte;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	735a      	strb	r2, [r3, #13]
          parser->bytes_read = 2;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_3;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2202      	movs	r2, #2
 80015e2:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 80015e4:	e0d5      	b.n	8001792 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
        break;
 80015ec:	e0d1      	b.n	8001792 <gnss_parser_process+0x21e>

      case PARSER_STATE_WAIT_SYNC_3:
        if (byte == GNSS_SYNC_BYTE_3) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2bb5      	cmp	r3, #181	@ 0xb5
 80015f2:	d10a      	bne.n	800160a <gnss_parser_process+0x96>
          parser->msg_buffer[2] = byte;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	739a      	strb	r2, [r3, #14]
          parser->bytes_read = 3;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_READ_MSG_ID;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 8001608:	e0c3      	b.n	8001792 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	711a      	strb	r2, [r3, #4]
        break;
 8001610:	e0bf      	b.n	8001792 <gnss_parser_process+0x21e>

      case PARSER_STATE_READ_MSG_ID:

        parser->msg_buffer[parser->bytes_read++] = byte;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	b291      	uxth	r1, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8001622:	4619      	mov	r1, r3
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	440b      	add	r3, r1
 800162a:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_MSG_ID_OFFSET + GNSS_MSG_ID_SIZE) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8001632:	2b06      	cmp	r3, #6
 8001634:	f040 80a6 	bne.w	8001784 <gnss_parser_process+0x210>
          // 消息ID是小端格式
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7c5b      	ldrb	r3, [r3, #17]
                               << 8 |
 800163c:	b21b      	sxth	r3, r3
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
                           parser->msg_buffer[GNSS_MSG_ID_OFFSET];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7c1b      	ldrb	r3, [r3, #16]
 8001646:	b21b      	sxth	r3, r3
                               << 8 |
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	b29a      	uxth	r2, r3
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          parser->state = PARSER_STATE_READ_LENGTH;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	711a      	strb	r2, [r3, #4]
        }
        break;
 800165a:	e093      	b.n	8001784 <gnss_parser_process+0x210>

      case PARSER_STATE_READ_LENGTH:
        parser->msg_buffer[parser->bytes_read++] = byte;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	b291      	uxth	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 800166c:	4619      	mov	r1, r3
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	440b      	add	r3, r1
 8001674:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_LENGTH_OFFSET + GNSS_LENGTH_SIZE) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 800167c:	2b08      	cmp	r3, #8
 800167e:	f040 8083 	bne.w	8001788 <gnss_parser_process+0x214>
          // 长度是小端格式
          parser->payload_length =
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7cdb      	ldrb	r3, [r3, #19]
 8001686:	b21b      	sxth	r3, r3
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
              parser->msg_buffer[GNSS_LENGTH_OFFSET];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7c9b      	ldrb	r3, [r3, #18]
 8001690:	b21b      	sxth	r3, r3
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	b29a      	uxth	r2, r3
          parser->payload_length =
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
          if (parser->payload_length > GNSS_MAX_PAYLOAD_SIZE) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016a8:	d903      	bls.n	80016b2 <gnss_parser_process+0x13e>
            // 载荷过长，可能是错误的数据帧，复位状态机
            parser->state = PARSER_STATE_WAIT_SYNC_1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	711a      	strb	r2, [r3, #4]
          } else {
            parser->state = PARSER_STATE_READ_PAYLOAD;
          }
        }
        break;
 80016b0:	e06a      	b.n	8001788 <gnss_parser_process+0x214>
            parser->state = PARSER_STATE_READ_PAYLOAD;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	711a      	strb	r2, [r3, #4]
        break;
 80016b8:	e066      	b.n	8001788 <gnss_parser_process+0x214>

      case PARSER_STATE_READ_PAYLOAD:
        parser->msg_buffer[parser->bytes_read++] = byte;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	b291      	uxth	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 80016ca:	4619      	mov	r1, r3
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	440b      	add	r3, r1
 80016d2:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 80016da:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 80016e2:	3318      	adds	r3, #24
        if (parser->bytes_read ==
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d151      	bne.n	800178c <gnss_parser_process+0x218>
          parser->state = PARSER_STATE_READ_CRC;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2206      	movs	r2, #6
 80016ec:	711a      	strb	r2, [r3, #4]
        }
        break;
 80016ee:	e04d      	b.n	800178c <gnss_parser_process+0x218>

      case PARSER_STATE_READ_CRC:
        parser->msg_buffer[parser->bytes_read++] = byte;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	b291      	uxth	r1, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8001700:	4619      	mov	r1, r3
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	440b      	add	r3, r1
 8001708:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8001710:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length + GNSS_CRC_SIZE) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8001718:	331c      	adds	r3, #28
        if (parser->bytes_read ==
 800171a:	429a      	cmp	r2, r3
 800171c:	d138      	bne.n	8001790 <gnss_parser_process+0x21c>
          // --- 消息接收完整，开始校验 ---
          uint32_t received_crc =
              *(uint32_t *)&parser
                   ->msg_buffer[parser->bytes_read - GNSS_CRC_SIZE];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8001724:	3b04      	subs	r3, #4
              *(uint32_t *)&parser
 8001726:	3308      	adds	r3, #8
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
          uint32_t received_crc =
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]

          // CRC校验的范围是从消息ID开始，到Payload结束
          size_t crc_check_len =
              GNSS_MESSAGE_OFFSET  + parser->payload_length;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8001738:	3318      	adds	r3, #24
          size_t crc_check_len =
 800173a:	61bb      	str	r3, [r7, #24]
          uint32_t calculated_crc = calculate_crc32(
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	330c      	adds	r3, #12
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	b292      	uxth	r2, r2
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fecc 	bl	80014e4 <calculate_crc32>
 800174c:	6178      	str	r0, [r7, #20]
              &parser->msg_buffer[0], crc_check_len);

          if (received_crc == calculated_crc) {
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	429a      	cmp	r2, r3
 8001754:	d110      	bne.n	8001778 <gnss_parser_process+0x204>
            // CRC校验成功！调用回调函数处理数据
            if (parser->handler) {
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <gnss_parser_process+0x204>
              const uint8_t *payload_ptr =
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3324      	adds	r3, #36	@ 0x24
 8001762:	613b      	str	r3, [r7, #16]
                  &parser->msg_buffer[GNSS_MESSAGE_OFFSET];
              parser->handler(parser->msg_id, payload_ptr,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	f8b2 240e 	ldrh.w	r2, [r2, #1038]	@ 0x40e
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	4798      	blx	r3
                              parser->payload_length);
            }
          }

          // 不论校验成功与否，一帧处理完毕，复位状态机寻找下一帧
          parser->state = PARSER_STATE_WAIT_SYNC_1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	711a      	strb	r2, [r3, #4]
        }
        break;
 800177e:	e007      	b.n	8001790 <gnss_parser_process+0x21c>
        break;
 8001780:	bf00      	nop
 8001782:	e006      	b.n	8001792 <gnss_parser_process+0x21e>
        break;
 8001784:	bf00      	nop
 8001786:	e004      	b.n	8001792 <gnss_parser_process+0x21e>
        break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <gnss_parser_process+0x21e>
        break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <gnss_parser_process+0x21e>
        break;
 8001790:	bf00      	nop
  while (rb_read_byte(parser->rb, &byte)) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f107 020f 	add.w	r2, r7, #15
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe79 	bl	8001494 <rb_read_byte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f aeea 	bne.w	800157e <gnss_parser_process+0xa>
    }
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <DW1000samplingtask>:

extern int rx_main(void);
extern int tx_main(void);

void DW1000samplingtask(void *argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    BPhero_UWB_Message_Init();
 80017bc:	f7ff f87a 	bl	80008b4 <BPhero_UWB_Message_Init>
    BPhero_UWB_Init(); // dwm1000 init related
 80017c0:	f7ff f8aa 	bl	8000918 <BPhero_UWB_Init>

    rx_main();
 80017c4:	f7ff fc98 	bl	80010f8 <rx_main>
    // tx_main();
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <FatFs_Check>:

//	函数：FatFs_Check
//	功能：进行FatFs文件系统的挂载

void FatFs_Check(void)  // 判断FatFs是否挂载成功，若没有创建FatFs则格式化SD卡
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80017d6:	af02      	add	r7, sp, #8
  BYTE work[_MAX_SS];
  uint8_t MyFile_Res;
  //	FATFS_LinkDriver(&SD_Driver, SDPath);	  // 初始化驱动
  MyFile_Res = f_mount(&SDFatFS, (const TCHAR *)SDPath, 1);  //	挂载SD卡
 80017d8:	2201      	movs	r2, #1
 80017da:	4917      	ldr	r1, [pc, #92]	@ (8001838 <FatFs_Check+0x68>)
 80017dc:	4817      	ldr	r0, [pc, #92]	@ (800183c <FatFs_Check+0x6c>)
 80017de:	f012 fc6d 	bl	80140bc <f_mount>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207

  if (MyFile_Res == FR_OK)  // 判断是否挂载成功
 80017e8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <FatFs_Check+0x28>
  {
    // f_setlabel("UFO");
    printf("\r\nSD文件系统挂载成功\r\n");
 80017f0:	4813      	ldr	r0, [pc, #76]	@ (8001840 <FatFs_Check+0x70>)
 80017f2:	f01a fb9d 	bl	801bf30 <puts>
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
      printf("SD卡格式化成功！\r\n");
    else
      printf("格式化失败，请检查或更换SD卡！\r\n");
  }
}
 80017f6:	e019      	b.n	800182c <FatFs_Check+0x5c>
    printf("SD卡还未创建文件系统，即将格式化\r\n");
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <FatFs_Check+0x74>)
 80017fa:	f01a fb99 	bl	801bf30 <puts>
    MyFile_Res = f_mkfs("0:", FM_FAT32, 0, work,
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	2102      	movs	r1, #2
 800180a:	480f      	ldr	r0, [pc, #60]	@ (8001848 <FatFs_Check+0x78>)
 800180c:	f013 fac6 	bl	8014d9c <f_mkfs>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
 8001816:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <FatFs_Check+0x56>
      printf("SD卡格式化成功！\r\n");
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <FatFs_Check+0x7c>)
 8001820:	f01a fb86 	bl	801bf30 <puts>
}
 8001824:	e002      	b.n	800182c <FatFs_Check+0x5c>
      printf("格式化失败，请检查或更换SD卡！\r\n");
 8001826:	480a      	ldr	r0, [pc, #40]	@ (8001850 <FatFs_Check+0x80>)
 8001828:	f01a fb82 	bl	801bf30 <puts>
}
 800182c:	bf00      	nop
 800182e:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24002900 	.word	0x24002900
 800183c:	24002904 	.word	0x24002904
 8001840:	0801de08 	.word	0x0801de08
 8001844:	0801de28 	.word	0x0801de28
 8001848:	0801de5c 	.word	0x0801de5c
 800184c:	0801de60 	.word	0x0801de60
 8001850:	0801de7c 	.word	0x0801de7c

08001854 <SDCardTaskFunc>:
    return -1;
  }
  return 0;
}

int16_t SDCardTaskFunc(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800185a:	af00      	add	r7, sp, #0
  static uint8_t FullBufferIndex = 0;  // 0表示都不满，1-2分别表示两段满
  static uint8_t WriteToSdData[SDLength];
  static uint16_t bufferDataLength;

  // 初始化内存池
  if (RB_Init(&rb, ToSDdataPool, SDLength) != 0) {
 800185c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001860:	4940      	ldr	r1, [pc, #256]	@ (8001964 <SDCardTaskFunc+0x110>)
 8001862:	4841      	ldr	r0, [pc, #260]	@ (8001968 <SDCardTaskFunc+0x114>)
 8001864:	f7ff fc64 	bl	8001130 <RB_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <SDCardTaskFunc+0x26>
    printf("RingBuffer 初始化失败！\n");
 800186e:	483f      	ldr	r0, [pc, #252]	@ (800196c <SDCardTaskFunc+0x118>)
 8001870:	f01a fb5e 	bl	801bf30 <puts>
    return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e06e      	b.n	8001958 <SDCardTaskFunc+0x104>
  }

  MyFile_Res = f_open(
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	220a      	movs	r2, #10
 8001880:	493b      	ldr	r1, [pc, #236]	@ (8001970 <SDCardTaskFunc+0x11c>)
 8001882:	4618      	mov	r0, r3
 8001884:	f012 fc7e 	bl	8014184 <f_open>
 8001888:	4603      	mov	r3, r0
 800188a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
      &MyFile, "IMUNewData.txt",
      FA_CREATE_ALWAYS | FA_WRITE);  // 打开文件，若不存在,则在sd卡中，创建文件

  if (MyFile_Res == FR_OK) {
 800188e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8001892:	2b00      	cmp	r3, #0
 8001894:	d15b      	bne.n	800194e <SDCardTaskFunc+0xfa>
    printf("文件打开/创建成功，准备写入数据...\r\n");
 8001896:	4837      	ldr	r0, [pc, #220]	@ (8001974 <SDCardTaskFunc+0x120>)
 8001898:	f01a fb4a 	bl	801bf30 <puts>

    while (1) {
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <SDCardTaskFunc+0x124>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	4935      	ldr	r1, [pc, #212]	@ (800197c <SDCardTaskFunc+0x128>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f015 fdc6 	bl	8017438 <xQueueReceive>
      FileWriteBufferPoint = (uint8_t *)&MsgSD;
 80018ac:	4b33      	ldr	r3, [pc, #204]	@ (800197c <SDCardTaskFunc+0x128>)
 80018ae:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
      RB_Write(&rb, FileWriteBufferPoint, sizeof(MsgIMU_t));
 80018b2:	2231      	movs	r2, #49	@ 0x31
 80018b4:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80018b8:	482b      	ldr	r0, [pc, #172]	@ (8001968 <SDCardTaskFunc+0x114>)
 80018ba:	f7ff fc85 	bl	80011c8 <RB_Write>

      if (RB_IsBufferFull(&rb, 0)) {
 80018be:	2100      	movs	r1, #0
 80018c0:	4829      	ldr	r0, [pc, #164]	@ (8001968 <SDCardTaskFunc+0x114>)
 80018c2:	f7ff fd9f 	bl	8001404 <RB_IsBufferFull>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <SDCardTaskFunc+0x80>
        FullBufferIndex = 1;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <SDCardTaskFunc+0x12c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e009      	b.n	80018e8 <SDCardTaskFunc+0x94>
      }

      else if (RB_IsBufferFull(&rb, 1)) {
 80018d4:	2101      	movs	r1, #1
 80018d6:	4824      	ldr	r0, [pc, #144]	@ (8001968 <SDCardTaskFunc+0x114>)
 80018d8:	f7ff fd94 	bl	8001404 <RB_IsBufferFull>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <SDCardTaskFunc+0x94>
        FullBufferIndex = 2;
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <SDCardTaskFunc+0x12c>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      }

      else {
      }

      if (FullBufferIndex) {
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <SDCardTaskFunc+0x12c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0d5      	beq.n	800189c <SDCardTaskFunc+0x48>
        bufferDataLength = RB_Read(&rb, WriteToSdData, SDLength);
 80018f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f4:	4923      	ldr	r1, [pc, #140]	@ (8001984 <SDCardTaskFunc+0x130>)
 80018f6:	481c      	ldr	r0, [pc, #112]	@ (8001968 <SDCardTaskFunc+0x114>)
 80018f8:	f7ff fce3 	bl	80012c2 <RB_Read>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <SDCardTaskFunc+0x134>)
 8001902:	801a      	strh	r2, [r3, #0]
        if (bufferDataLength > 0) {
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <SDCardTaskFunc+0x134>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d014      	beq.n	8001936 <SDCardTaskFunc+0xe2>
          MyFile_Res =
              f_write(&MyFile, WriteToSdData, bufferDataLength, &MyFile_Num);
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <SDCardTaskFunc+0x134>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	f107 0008 	add.w	r0, r7, #8
 8001918:	491a      	ldr	r1, [pc, #104]	@ (8001984 <SDCardTaskFunc+0x130>)
 800191a:	f012 ff19 	bl	8014750 <f_write>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267

          f_sync(&MyFile);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4618      	mov	r0, r3
 800192a:	f013 f8f4 	bl	8014b16 <f_sync>
          HAL_GPIO_TogglePin(SDLEDGPIOx, SDLEDPINx);
 800192e:	2110      	movs	r1, #16
 8001930:	4816      	ldr	r0, [pc, #88]	@ (800198c <SDCardTaskFunc+0x138>)
 8001932:	f005 f9a4 	bl	8006c7e <HAL_GPIO_TogglePin>
        } else {
        }

        RB_ClearBufferFlag(&rb, FullBufferIndex - 1);  // 清除标志
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <SDCardTaskFunc+0x12c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3b01      	subs	r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4619      	mov	r1, r3
 8001940:	4809      	ldr	r0, [pc, #36]	@ (8001968 <SDCardTaskFunc+0x114>)
 8001942:	f7ff fd77 	bl	8001434 <RB_ClearBufferFlag>
        FullBufferIndex = 0;
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <SDCardTaskFunc+0x12c>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 800194c:	e7a6      	b.n	800189c <SDCardTaskFunc+0x48>

    f_close(&MyFile);  // 关闭文件
  }

  else {
    printf("文件打开/创建失败...\r\n");
 800194e:	4810      	ldr	r0, [pc, #64]	@ (8001990 <SDCardTaskFunc+0x13c>)
 8001950:	f01a faee 	bl	801bf30 <puts>
    return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
  }
  return 0;
}
 8001958:	4618      	mov	r0, r3
 800195a:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24000fac 	.word	0x24000fac
 8001968:	24000f94 	.word	0x24000f94
 800196c:	0801df74 	.word	0x0801df74
 8001970:	0801df94 	.word	0x0801df94
 8001974:	0801df20 	.word	0x0801df20
 8001978:	24002210 	.word	0x24002210
 800197c:	240013ac 	.word	0x240013ac
 8001980:	240013dd 	.word	0x240013dd
 8001984:	240013e0 	.word	0x240013e0
 8001988:	240015e0 	.word	0x240015e0
 800198c:	58021000 	.word	0x58021000
 8001990:	0801df54 	.word	0x0801df54

08001994 <UM960SamplingTaskFunc>:
TaskHandle_t UM960samplingTaskNotifyHandle = NULL;

// 2. 定义队列句柄
QueueHandle_t gnss_data_queue = NULL;

void UM960SamplingTaskFunc(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  UM960samplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 8001998:	f017 f8dc 	bl	8018b54 <xTaskGetCurrentTaskHandle>
 800199c:	4603      	mov	r3, r0
  UM960samplingTaskNotifyHandle =
 800199e:	4a38      	ldr	r2, [pc, #224]	@ (8001a80 <UM960SamplingTaskFunc+0xec>)
 80019a0:	6013      	str	r3, [r2, #0]

  rb_init(&g_gnss_rb, gnss_rx_buffer, RING_BUFFER_SIZE);
 80019a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019a6:	4937      	ldr	r1, [pc, #220]	@ (8001a84 <UM960SamplingTaskFunc+0xf0>)
 80019a8:	4837      	ldr	r0, [pc, #220]	@ (8001a88 <UM960SamplingTaskFunc+0xf4>)
 80019aa:	f7ff fd5b 	bl	8001464 <rb_init>
  gnss_parser_init(&g_gnss_parser, &g_gnss_rb, my_gnss_message_handler);
 80019ae:	4a37      	ldr	r2, [pc, #220]	@ (8001a8c <UM960SamplingTaskFunc+0xf8>)
 80019b0:	4935      	ldr	r1, [pc, #212]	@ (8001a88 <UM960SamplingTaskFunc+0xf4>)
 80019b2:	4837      	ldr	r0, [pc, #220]	@ (8001a90 <UM960SamplingTaskFunc+0xfc>)
 80019b4:	f7ff fdc0 	bl	8001538 <gnss_parser_init>

  // b. 任务主循环
  for (;;) {
    // 调用解析器，它会处理缓冲区中所有的新数据
    g_gnss_rb.head =
        g_gnss_rb.size - __HAL_DMA_GET_COUNTER(&GNSSUSART_RX);  // 更新头指针
 80019b8:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <UM960SamplingTaskFunc+0xf4>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4935      	ldr	r1, [pc, #212]	@ (8001a98 <UM960SamplingTaskFunc+0x104>)
 80019c2:	428b      	cmp	r3, r1
 80019c4:	d04a      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4934      	ldr	r1, [pc, #208]	@ (8001a9c <UM960SamplingTaskFunc+0x108>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d045      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019d0:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4932      	ldr	r1, [pc, #200]	@ (8001aa0 <UM960SamplingTaskFunc+0x10c>)
 80019d6:	428b      	cmp	r3, r1
 80019d8:	d040      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019da:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4931      	ldr	r1, [pc, #196]	@ (8001aa4 <UM960SamplingTaskFunc+0x110>)
 80019e0:	428b      	cmp	r3, r1
 80019e2:	d03b      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	492f      	ldr	r1, [pc, #188]	@ (8001aa8 <UM960SamplingTaskFunc+0x114>)
 80019ea:	428b      	cmp	r3, r1
 80019ec:	d036      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	492e      	ldr	r1, [pc, #184]	@ (8001aac <UM960SamplingTaskFunc+0x118>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d031      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	492c      	ldr	r1, [pc, #176]	@ (8001ab0 <UM960SamplingTaskFunc+0x11c>)
 80019fe:	428b      	cmp	r3, r1
 8001a00:	d02c      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	492b      	ldr	r1, [pc, #172]	@ (8001ab4 <UM960SamplingTaskFunc+0x120>)
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d027      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4929      	ldr	r1, [pc, #164]	@ (8001ab8 <UM960SamplingTaskFunc+0x124>)
 8001a12:	428b      	cmp	r3, r1
 8001a14:	d022      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4928      	ldr	r1, [pc, #160]	@ (8001abc <UM960SamplingTaskFunc+0x128>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d01d      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4926      	ldr	r1, [pc, #152]	@ (8001ac0 <UM960SamplingTaskFunc+0x12c>)
 8001a26:	428b      	cmp	r3, r1
 8001a28:	d018      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4925      	ldr	r1, [pc, #148]	@ (8001ac4 <UM960SamplingTaskFunc+0x130>)
 8001a30:	428b      	cmp	r3, r1
 8001a32:	d013      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4923      	ldr	r1, [pc, #140]	@ (8001ac8 <UM960SamplingTaskFunc+0x134>)
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d00e      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4922      	ldr	r1, [pc, #136]	@ (8001acc <UM960SamplingTaskFunc+0x138>)
 8001a44:	428b      	cmp	r3, r1
 8001a46:	d009      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4920      	ldr	r1, [pc, #128]	@ (8001ad0 <UM960SamplingTaskFunc+0x13c>)
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d004      	beq.n	8001a5c <UM960SamplingTaskFunc+0xc8>
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	491f      	ldr	r1, [pc, #124]	@ (8001ad4 <UM960SamplingTaskFunc+0x140>)
 8001a58:	428b      	cmp	r3, r1
 8001a5a:	d103      	bne.n	8001a64 <UM960SamplingTaskFunc+0xd0>
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	e002      	b.n	8001a6a <UM960SamplingTaskFunc+0xd6>
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <UM960SamplingTaskFunc+0x100>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
    g_gnss_rb.head =
 8001a6c:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <UM960SamplingTaskFunc+0xf4>)
 8001a6e:	6093      	str	r3, [r2, #8]
    gnss_parser_process(&g_gnss_parser);
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <UM960SamplingTaskFunc+0xfc>)
 8001a72:	f7ff fd7f 	bl	8001574 <gnss_parser_process>

    // 让出CPU，避免空转。
    // 10ms的延时意味着任务每秒最多轮询100次。
    osDelay(10);
 8001a76:	200a      	movs	r0, #10
 8001a78:	f014 fd81 	bl	801657e <osDelay>
    g_gnss_rb.head =
 8001a7c:	e79c      	b.n	80019b8 <UM960SamplingTaskFunc+0x24>
 8001a7e:	bf00      	nop
 8001a80:	24002208 	.word	0x24002208
 8001a84:	240015e4 	.word	0x240015e4
 8001a88:	24001de4 	.word	0x24001de4
 8001a8c:	08001ad9 	.word	0x08001ad9
 8001a90:	24001df4 	.word	0x24001df4
 8001a94:	24002808 	.word	0x24002808
 8001a98:	40020010 	.word	0x40020010
 8001a9c:	40020028 	.word	0x40020028
 8001aa0:	40020040 	.word	0x40020040
 8001aa4:	40020058 	.word	0x40020058
 8001aa8:	40020070 	.word	0x40020070
 8001aac:	40020088 	.word	0x40020088
 8001ab0:	400200a0 	.word	0x400200a0
 8001ab4:	400200b8 	.word	0x400200b8
 8001ab8:	40020410 	.word	0x40020410
 8001abc:	40020428 	.word	0x40020428
 8001ac0:	40020440 	.word	0x40020440
 8001ac4:	40020458 	.word	0x40020458
 8001ac8:	40020470 	.word	0x40020470
 8001acc:	40020488 	.word	0x40020488
 8001ad0:	400204a0 	.word	0x400204a0
 8001ad4:	400204b8 	.word	0x400204b8

08001ad8 <my_gnss_message_handler>:
  }
}

// length 数据长度
void my_gnss_message_handler(uint16_t msg_id, const uint8_t* payload,
                             uint16_t length) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	80fb      	strh	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
  // 根据消息ID来解析不同的消息
  switch (msg_id) {
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	f640 0246 	movw	r2, #2118	@ 0x846
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d132      	bne.n	8001b58 <my_gnss_message_handler+0x80>
    case 0x0846:  // 假设这是BESTPOSA消息的ID
      if (length == sizeof(bestnav_t)) {
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	2b78      	cmp	r3, #120	@ 0x78
 8001af6:	d131      	bne.n	8001b5c <my_gnss_message_handler+0x84>
        const bestnav_t* nav = (const bestnav_t*)payload;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
        // 在这里使用解析出的数据，例如打印或更新全局变量
        // 打印一些关键信息进行验证
        HAL_GPIO_TogglePin(gnss_parser_LEDGPIOx, gnss_parser_LEDGPINx);
 8001afc:	2120      	movs	r1, #32
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <my_gnss_message_handler+0x90>)
 8001b00:	f005 f8bd 	bl	8006c7e <HAL_GPIO_TogglePin>
        printf("--- BESTNAV Received ---\n");
 8001b04:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <my_gnss_message_handler+0x94>)
 8001b06:	f01a fa13 	bl	801bf30 <puts>
        printf("  Position Type: %u\n", (unsigned int)nav->pos_type);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <my_gnss_message_handler+0x98>)
 8001b12:	f01a f9a5 	bl	801be60 <iprintf>
        printf("  Latitude:  %.8f\n", nav->lat);
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	688a      	ldr	r2, [r1, #8]
 8001b1a:	68cb      	ldr	r3, [r1, #12]
 8001b1c:	4815      	ldr	r0, [pc, #84]	@ (8001b74 <my_gnss_message_handler+0x9c>)
 8001b1e:	f01a f99f 	bl	801be60 <iprintf>
        printf("  Longitude: %.8f\n", nav->lon);
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	690a      	ldr	r2, [r1, #16]
 8001b26:	694b      	ldr	r3, [r1, #20]
 8001b28:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <my_gnss_message_handler+0xa0>)
 8001b2a:	f01a f999 	bl	801be60 <iprintf>
        printf("  Height:    %.4f m\n", nav->hgt);
 8001b2e:	68f9      	ldr	r1, [r7, #12]
 8001b30:	698a      	ldr	r2, [r1, #24]
 8001b32:	69cb      	ldr	r3, [r1, #28]
 8001b34:	4811      	ldr	r0, [pc, #68]	@ (8001b7c <my_gnss_message_handler+0xa4>)
 8001b36:	f01a f993 	bl	801be60 <iprintf>
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b40:	4619      	mov	r1, r3
               nav->svs_in_sol);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 8001b48:	461a      	mov	r2, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <my_gnss_message_handler+0xa8>)
 8001b4c:	f01a f988 	bl	801be60 <iprintf>
        printf("--------------------------\n\n");
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <my_gnss_message_handler+0xac>)
 8001b52:	f01a f9ed 	bl	801bf30 <puts>
      }
      break;
 8001b56:	e001      	b.n	8001b5c <my_gnss_message_handler+0x84>
      // case 0x...: // 处理其他您关心的消息
      //     break;

    default:
      // 不关心的消息可以忽略
      break;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <my_gnss_message_handler+0x86>
      break;
 8001b5c:	bf00      	nop
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	58021000 	.word	0x58021000
 8001b6c:	0801dfa4 	.word	0x0801dfa4
 8001b70:	0801dfc0 	.word	0x0801dfc0
 8001b74:	0801dfd8 	.word	0x0801dfd8
 8001b78:	0801dfec 	.word	0x0801dfec
 8001b7c:	0801e000 	.word	0x0801e000
 8001b80:	0801e018 	.word	0x0801e018
 8001b84:	0801e040 	.word	0x0801e040

08001b88 <GNSSInit>:

int16_t GNSSInit(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&GNSSUartFx, gnss_rx_buffer,
 8001b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b90:	4903      	ldr	r1, [pc, #12]	@ (8001ba0 <GNSSInit+0x18>)
 8001b92:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <GNSSInit+0x1c>)
 8001b94:	f00c f84c 	bl	800dc30 <HAL_UART_Receive_DMA>
                       RING_BUFFER_SIZE);  // 启动 DMA 循环接收
  //__HAL_UART_ENABLE_IT(&GNSSUartFx, UART_IT_IDLE);
  // 开启空闲中断,循环解析的，中断不需要了

  return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	240015e4 	.word	0x240015e4
 8001ba4:	2400260c 	.word	0x2400260c

08001ba8 <imuDataDealTaskFunc>:

QueueHandle_t IMUDataToSDTaskQueue = NULL;  // 创建队列来完成数据的传输;

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size);

void imuDataDealTaskFunc(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
  IMUOrigData_t IMU_DatatoSD;

  /* Infinite loop */
  for (;;) {
    static MsgIMU_t msg = {0};
    xQueueReceive(xIMUDataQueue, &IMU_DatatoSD, portMAX_DELAY);
 8001bae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <imuDataDealTaskFunc+0x100>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4639      	mov	r1, r7
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f015 fc3d 	bl	8017438 <xQueueReceive>
    msg.hdr.sync1 = 0xAA;
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bc0:	22aa      	movs	r2, #170	@ 0xaa
 8001bc2:	701a      	strb	r2, [r3, #0]
    msg.hdr.sync2 = 0x44;
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bc6:	2244      	movs	r2, #68	@ 0x44
 8001bc8:	705a      	strb	r2, [r3, #1]
    msg.hdr.sync3 = 0x55;
 8001bca:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bcc:	2255      	movs	r2, #85	@ 0x55
 8001bce:	709a      	strb	r2, [r3, #2]
    msg.hdr.cpuIdle = 0;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	70da      	strb	r2, [r3, #3]
    msg.hdr.msgID = 1;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	809a      	strh	r2, [r3, #4]
    msg.hdr.msgLen = sizeof(MsgIMU_t);
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bde:	2231      	movs	r2, #49	@ 0x31
 8001be0:	80da      	strh	r2, [r3, #6]
    msg.hdr.timeRef = 0;
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	721a      	strb	r2, [r3, #8]

    msg.hdr.timeStatus = 0;
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	725a      	strb	r2, [r3, #9]
    msg.hdr.time = IMU_DatatoSD.sec;
 8001bee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf2:	492e      	ldr	r1, [pc, #184]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001bf4:	3110      	adds	r1, #16
 8001bf6:	3906      	subs	r1, #6
 8001bf8:	600a      	str	r2, [r1, #0]
 8001bfa:	604b      	str	r3, [r1, #4]
    msg.hdr.sec = IMU_DatatoSD._50us;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c00:	f8c3 2012 	str.w	r2, [r3, #18]
    msg.hdr.version = 0;
 8001c04:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	769a      	strb	r2, [r3, #26]
    msg.hdr.leapSec = 0;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	76da      	strb	r2, [r3, #27]
    msg.hdr.delayMs = 0;
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	839a      	strh	r2, [r3, #28]

    msg.body.sensor = 0;
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	779a      	strb	r2, [r3, #30]
    msg.body.sensitivity = (asm_config.g_fs << 8) | asm_config.xl_fs;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <imuDataDealTaskFunc+0x108>)
 8001c1e:	78db      	ldrb	r3, [r3, #3]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <imuDataDealTaskFunc+0x108>)
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c34:	f8a3 201f 	strh.w	r2, [r3, #31]

    msg.body.gyro[0] = IMU_DatatoSD.gyro[0];
 8001c38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c3e:	f8a3 2021 	strh.w	r2, [r3, #33]	@ 0x21
    msg.body.gyro[1] = IMU_DatatoSD.gyro[1];
 8001c42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c48:	f8a3 2023 	strh.w	r2, [r3, #35]	@ 0x23
    msg.body.gyro[2] = IMU_DatatoSD.gyro[2];
 8001c4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c52:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25

    msg.body.accel[0] = IMU_DatatoSD.accel[0];
 8001c56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c5c:	f8a3 2027 	strh.w	r2, [r3, #39]	@ 0x27
    msg.body.accel[1] = IMU_DatatoSD.accel[1];
 8001c60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c66:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29
    msg.body.accel[2] = IMU_DatatoSD.accel[2];
 8001c6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c70:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b

    msg.body.crc =
        CalculateCRC32((uint8_t *)&msg, sizeof(msg) - sizeof(msg.body.crc));
 8001c74:	212d      	movs	r1, #45	@ 0x2d
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c78:	f000 f820 	bl	8001cbc <CalculateCRC32>
 8001c7c:	4603      	mov	r3, r0
    msg.body.crc =
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c80:	f8c2 302d 	str.w	r3, [r2, #45]	@ 0x2d

    BaseType_t Xsendresult = xQueueSend(IMUDataToSDTaskQueue, &msg, 0);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <imuDataDealTaskFunc+0x10c>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <imuDataDealTaskFunc+0x104>)
 8001c8e:	f015 f9a3 	bl	8016fd8 <xQueueGenericSend>
 8001c92:	6278      	str	r0, [r7, #36]	@ 0x24

    if (Xsendresult != pdPASS) {
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d002      	beq.n	8001ca0 <imuDataDealTaskFunc+0xf8>
      printf("datadeal queue full\r\n");
 8001c9a:	4807      	ldr	r0, [pc, #28]	@ (8001cb8 <imuDataDealTaskFunc+0x110>)
 8001c9c:	f01a f948 	bl	801bf30 <puts>
    }

    osDelay(5);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f014 fc6c 	bl	801657e <osDelay>
  for (;;) {
 8001ca6:	e782      	b.n	8001bae <imuDataDealTaskFunc+0x6>
 8001ca8:	24002288 	.word	0x24002288
 8001cac:	24002214 	.word	0x24002214
 8001cb0:	2400000c 	.word	0x2400000c
 8001cb4:	24002210 	.word	0x24002210
 8001cb8:	0801e05c 	.word	0x0801e05c

08001cbc <CalculateCRC32>:
    0xbdbdf21cUL, 0xcabac28aUL, 0x53b39330UL, 0x24b4a3a6UL, 0xbad03605UL,
    0xcdd70693UL, 0x54de5729UL, 0x23d967bfUL, 0xb3667a2eUL, 0xc4614ab8UL,
    0x5d681b02UL, 0x2a6f2b94UL, 0xb40bbe37UL, 0xc30c8ea1UL, 0x5a05df1bUL,
    0x2d02ef8dUL};

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t crc = 0x00;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	e011      	b.n	8001cf6 <CalculateCRC32+0x3a>
    crc = aulCrcTable[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4053      	eors	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <CalculateCRC32+0x50>)
 8001ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	4053      	eors	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbe9      	blt.n	8001cd2 <CalculateCRC32+0x16>
  }
  return crc;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	0801e564 	.word	0x0801e564

08001d10 <IMUSamplingTaskFunc>:
static timestamp_def timestampOrig;  // 时间戳原始数据

QueueHandle_t xIMUDataQueue = NULL;               // 创建队列来完成数据的传输
TaskHandle_t imusamplingTaskNotifyHandle = NULL;  // 创建imu采样线程句柄

int16_t IMUSamplingTaskFunc(void *argument) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6178      	str	r0, [r7, #20]
  imusamplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 8001d18:	f016 ff1c 	bl	8018b54 <xTaskGetCurrentTaskHandle>
 8001d1c:	4603      	mov	r3, r0
  imusamplingTaskNotifyHandle =
 8001d1e:	4a27      	ldr	r2, [pc, #156]	@ (8001dbc <IMUSamplingTaskFunc+0xac>)
 8001d20:	6013      	str	r3, [r2, #0]

  static int16_t IMUInitResult;

  IMUInitResult = Imu_Init();
 8001d22:	f000 f85f 	bl	8001de4 <Imu_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <IMUSamplingTaskFunc+0xb0>)
 8001d2c:	801a      	strh	r2, [r3, #0]

  while (!IMUInitResult) {
 8001d2e:	e03e      	b.n	8001dae <IMUSamplingTaskFunc+0x9e>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	2001      	movs	r0, #1
 8001d36:	f017 f8ab 	bl	8018e90 <ulTaskNotifyTake>
    asm330lhh_acceleration_raw_get(&dev_ctx,
 8001d3a:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <IMUSamplingTaskFunc+0xb4>)
 8001d3c:	4822      	ldr	r0, [pc, #136]	@ (8001dc8 <IMUSamplingTaskFunc+0xb8>)
 8001d3e:	f018 facb 	bl	801a2d8 <asm330lhh_acceleration_raw_get>
                                   (int16_t *)dmaBuffer);  // 读取加速度计
    asm330lhh_angular_rate_raw_get(&dev_ctx,
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <IMUSamplingTaskFunc+0xbc>)
 8001d44:	4619      	mov	r1, r3
 8001d46:	4820      	ldr	r0, [pc, #128]	@ (8001dc8 <IMUSamplingTaskFunc+0xb8>)
 8001d48:	f018 fa7e 	bl	801a248 <asm330lhh_angular_rate_raw_get>
                                   (int16_t *)(dmaBuffer + 6));  // 读取陀螺仪

    memcpy(imuData.accel, dmaBuffer, 6);
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <IMUSamplingTaskFunc+0xc0>)
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <IMUSamplingTaskFunc+0xb4>)
 8001d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d54:	6018      	str	r0, [r3, #0]
 8001d56:	3304      	adds	r3, #4
 8001d58:	8019      	strh	r1, [r3, #0]
    memcpy(imuData.gyro, dmaBuffer + 6, 6);
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <IMUSamplingTaskFunc+0xbc>)
 8001d5c:	2206      	movs	r2, #6
 8001d5e:	4619      	mov	r1, r3
 8001d60:	481c      	ldr	r0, [pc, #112]	@ (8001dd4 <IMUSamplingTaskFunc+0xc4>)
 8001d62:	f01a faa2 	bl	801c2aa <memcpy>

    timestampOrig = GetCurrentTimestamp();
 8001d66:	4c1c      	ldr	r4, [pc, #112]	@ (8001dd8 <IMUSamplingTaskFunc+0xc8>)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f8b4 	bl	8001ed8 <GetCurrentTimestamp>
 8001d70:	463b      	mov	r3, r7
 8001d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    imuData.sec = timestampOrig.sec;
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <IMUSamplingTaskFunc+0xc8>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	4914      	ldr	r1, [pc, #80]	@ (8001dd0 <IMUSamplingTaskFunc+0xc0>)
 8001d80:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imuData._50us = timestampOrig._50us;
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <IMUSamplingTaskFunc+0xc8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <IMUSamplingTaskFunc+0xc0>)
 8001d8a:	6193      	str	r3, [r2, #24]

    BaseType_t Xsendresult = xQueueSend(xIMUDataQueue, &imuData, 0);
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <IMUSamplingTaskFunc+0xcc>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	2200      	movs	r2, #0
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <IMUSamplingTaskFunc+0xc0>)
 8001d96:	f015 f91f 	bl	8016fd8 <xQueueGenericSend>
 8001d9a:	61f8      	str	r0, [r7, #28]
    if (Xsendresult != pdPASS) {
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <IMUSamplingTaskFunc+0x98>
      printf("sampling queue full\r\n");
 8001da2:	480f      	ldr	r0, [pc, #60]	@ (8001de0 <IMUSamplingTaskFunc+0xd0>)
 8001da4:	f01a f8c4 	bl	801bf30 <puts>
    }
    osDelay(1);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f014 fbe8 	bl	801657e <osDelay>
  while (!IMUInitResult) {
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <IMUSamplingTaskFunc+0xb0>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0bb      	beq.n	8001d30 <IMUSamplingTaskFunc+0x20>
  }

  for (;;) {
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <IMUSamplingTaskFunc+0xa8>
 8001dbc:	2400228c 	.word	0x2400228c
 8001dc0:	24002290 	.word	0x24002290
 8001dc4:	24002248 	.word	0x24002248
 8001dc8:	2400020c 	.word	0x2400020c
 8001dcc:	2400224e 	.word	0x2400224e
 8001dd0:	24002258 	.word	0x24002258
 8001dd4:	2400225e 	.word	0x2400225e
 8001dd8:	24002278 	.word	0x24002278
 8001ddc:	24002288 	.word	0x24002288
 8001de0:	0801e074 	.word	0x0801e074

08001de4 <Imu_Init>:

  return 0;
}

// 初始化，如果有系统的存在，请在系统初始化之前完成初始化
int16_t Imu_Init(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  Asm330_Drive_Init();  // 驱动库初始化代码
 8001dea:	f7fe fd49 	bl	8000880 <Asm330_Drive_Init>

  // 软件复位
  static uint8_t rst;
  asm330lhh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001dee:	2101      	movs	r1, #1
 8001df0:	482a      	ldr	r0, [pc, #168]	@ (8001e9c <Imu_Init+0xb8>)
 8001df2:	f018 fb16 	bl	801a422 <asm330lhh_reset_set>
  do {
    asm330lhh_reset_get(&dev_ctx, &rst);
 8001df6:	492a      	ldr	r1, [pc, #168]	@ (8001ea0 <Imu_Init+0xbc>)
 8001df8:	4828      	ldr	r0, [pc, #160]	@ (8001e9c <Imu_Init+0xb8>)
 8001dfa:	f018 fb38 	bl	801a46e <asm330lhh_reset_get>
  } while (rst);
 8001dfe:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <Imu_Init+0xbc>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f7      	bne.n	8001df6 <Imu_Init+0x12>

  /* Start device configuration. */
  asm330lhh_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 8001e06:	2101      	movs	r1, #1
 8001e08:	4824      	ldr	r0, [pc, #144]	@ (8001e9c <Imu_Init+0xb8>)
 8001e0a:	f018 faad 	bl	801a368 <asm330lhh_device_conf_set>
  /* Enable Block Data Update */
  asm330lhh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4822      	ldr	r0, [pc, #136]	@ (8001e9c <Imu_Init+0xb8>)
 8001e12:	f018 f9f3 	bl	801a1fc <asm330lhh_block_data_update_set>
  /* Set Output Data Rate */
  asm330lhh_xl_data_rate_set(&dev_ctx, asm_config.xl_odr);
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <Imu_Init+0xc0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481f      	ldr	r0, [pc, #124]	@ (8001e9c <Imu_Init+0xb8>)
 8001e1e:	f018 f96d 	bl	801a0fc <asm330lhh_xl_data_rate_set>
  asm330lhh_gy_data_rate_set(&dev_ctx, asm_config.g_odr);
 8001e22:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <Imu_Init+0xc0>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	4619      	mov	r1, r3
 8001e28:	481c      	ldr	r0, [pc, #112]	@ (8001e9c <Imu_Init+0xb8>)
 8001e2a:	f018 f9ba 	bl	801a1a2 <asm330lhh_gy_data_rate_set>
  /* Set full scale */
  asm330lhh_xl_full_scale_set(&dev_ctx, asm_config.xl_fs);
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <Imu_Init+0xc0>)
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4819      	ldr	r0, [pc, #100]	@ (8001e9c <Imu_Init+0xb8>)
 8001e36:	f018 f93b 	bl	801a0b0 <asm330lhh_xl_full_scale_set>
  asm330lhh_gy_full_scale_set(&dev_ctx, asm_config.g_fs);
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <Imu_Init+0xc0>)
 8001e3c:	78db      	ldrb	r3, [r3, #3]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	@ (8001e9c <Imu_Init+0xb8>)
 8001e42:	f018 f988 	bl	801a156 <asm330lhh_gy_full_scale_set>

  asm330lhh_data_ready_mode_set(&dev_ctx, asm_config.dr_p);
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <Imu_Init+0xc0>)
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4813      	ldr	r0, [pc, #76]	@ (8001e9c <Imu_Init+0xb8>)
 8001e4e:	f018 fab1 	bl	801a3b4 <asm330lhh_data_ready_mode_set>

  asm330lhh_pin_int1_route_t route_val = {0};
 8001e52:	2300      	movs	r3, #0
 8001e54:	80bb      	strh	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_xl = 1;
 8001e56:	793b      	ldrb	r3, [r7, #4]
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	713b      	strb	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_g = 1;
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	713b      	strb	r3, [r7, #4]
  asm330lhh_pin_int1_route_set(&dev_ctx, &route_val);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <Imu_Init+0xb8>)
 8001e6c:	f018 fb18 	bl	801a4a0 <asm330lhh_pin_int1_route_set>

  uint8_t IDdata;
  asm330lhh_device_id_get(&dev_ctx, &IDdata);
 8001e70:	1cfb      	adds	r3, r7, #3
 8001e72:	4619      	mov	r1, r3
 8001e74:	4809      	ldr	r0, [pc, #36]	@ (8001e9c <Imu_Init+0xb8>)
 8001e76:	f018 fac3 	bl	801a400 <asm330lhh_device_id_get>

  if (IDdata != asm330_id) {
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	2b6b      	cmp	r3, #107	@ 0x6b
 8001e7e:	d005      	beq.n	8001e8c <Imu_Init+0xa8>
    printf("ASM330 Init error\r\n");
 8001e80:	4809      	ldr	r0, [pc, #36]	@ (8001ea8 <Imu_Init+0xc4>)
 8001e82:	f01a f855 	bl	801bf30 <puts>
    return -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e003      	b.n	8001e94 <Imu_Init+0xb0>
  }
  printf("ASM330 Init succeed\r\n");
 8001e8c:	4807      	ldr	r0, [pc, #28]	@ (8001eac <Imu_Init+0xc8>)
 8001e8e:	f01a f84f 	bl	801bf30 <puts>

  return 0;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2400020c 	.word	0x2400020c
 8001ea0:	24002292 	.word	0x24002292
 8001ea4:	2400000c 	.word	0x2400000c
 8001ea8:	0801e08c 	.word	0x0801e08c
 8001eac:	0801e0a0 	.word	0x0801e0a0

08001eb0 <TIM_Call_Callback>:

// 时间戳变量
static volatile uint64_t system_seconds = 0;

// 定时器中断回调函数，每1s触发一次
void TIM_Call_Callback(void) { system_seconds++; }
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <TIM_Call_Callback+0x20>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	1c50      	adds	r0, r2, #1
 8001ebc:	f143 0100 	adc.w	r1, r3, #0
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <TIM_Call_Callback+0x20>)
 8001ec2:	e9c3 0100 	strd	r0, r1, [r3]
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	24002298 	.word	0x24002298
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <GetCurrentTimestamp>:

// 获取当前时间戳
timestamp_def GetCurrentTimestamp(void) {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  timestamp_def time;

  // 关中断或使用临界区确保读取的一致性
  taskENTER_CRITICAL();
 8001ee0:	f017 fd9a 	bl	8019a18 <vPortEnterCritical>

  time.sec = system_seconds;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <GetCurrentTimestamp+0x58>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	e9c7 2302 	strd	r2, r3, [r7, #8]

  time._50us = __HAL_TIM_GET_COUNTER(&htim16) * 0.00005;  // 0.05ms为单位
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <GetCurrentTimestamp+0x5c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001efc:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001f28 <GetCurrentTimestamp+0x50>
 8001f00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f08:	edc7 7a04 	vstr	s15, [r7, #16]

  taskEXIT_CRITICAL();
 8001f0c:	f017 fdb6 	bl	8019a7c <vPortExitCritical>

  return time;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	461c      	mov	r4, r3
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	eb1c432d 	.word	0xeb1c432d
 8001f2c:	3f0a36e2 	.word	0x3f0a36e2
 8001f30:	24002298 	.word	0x24002298
 8001f34:	24002498 	.word	0x24002498

08001f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <MX_DMA_Init+0x7c>)
 8001f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <MX_DMA_Init+0x7c>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <MX_DMA_Init+0x7c>)
 8001f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2105      	movs	r1, #5
 8001f60:	200b      	movs	r0, #11
 8001f62:	f001 fd3d 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f66:	200b      	movs	r0, #11
 8001f68:	f001 fd54 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2105      	movs	r1, #5
 8001f70:	200c      	movs	r0, #12
 8001f72:	f001 fd35 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f76:	200c      	movs	r0, #12
 8001f78:	f001 fd4c 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2105      	movs	r1, #5
 8001f80:	200d      	movs	r0, #13
 8001f82:	f001 fd2d 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001f86:	200d      	movs	r0, #13
 8001f88:	f001 fd44 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2105      	movs	r1, #5
 8001f90:	200e      	movs	r0, #14
 8001f92:	f001 fd25 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f96:	200e      	movs	r0, #14
 8001f98:	f001 fd3c 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	200f      	movs	r0, #15
 8001fa2:	f001 fd1d 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f001 fd34 	bl	8003a14 <HAL_NVIC_EnableIRQ>

}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	58024400 	.word	0x58024400

08001fb8 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */

    gnss_data_queue = xQueueCreate(10, sizeof(GNSS_Message_t));
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	200a      	movs	r0, #10
 8001fc2:	f014 ff3c 	bl	8016e3e <xQueueGenericCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <MX_FREERTOS_Init+0xa8>)
 8001fca:	6013      	str	r3, [r2, #0]

    xIMUDataQueue = xQueueCreate(128, sizeof(IMUOrigData_t)); // 128 帧
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2120      	movs	r1, #32
 8001fd0:	2080      	movs	r0, #128	@ 0x80
 8001fd2:	f014 ff34 	bl	8016e3e <xQueueGenericCreate>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <MX_FREERTOS_Init+0xac>)
 8001fda:	6013      	str	r3, [r2, #0]

    IMUDataToSDTaskQueue =
        xQueueCreate(64, sizeof(MsgIMU_t)); // 64 帧 一帧 49字节
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2131      	movs	r1, #49	@ 0x31
 8001fe0:	2040      	movs	r0, #64	@ 0x40
 8001fe2:	f014 ff2c 	bl	8016e3e <xQueueGenericCreate>
 8001fe6:	4603      	mov	r3, r0
    IMUDataToSDTaskQueue =
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <MX_FREERTOS_Init+0xb0>)
 8001fea:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <MX_FREERTOS_Init+0xb4>)
 8001fee:	2100      	movs	r1, #0
 8001ff0:	481f      	ldr	r0, [pc, #124]	@ (8002070 <MX_FREERTOS_Init+0xb8>)
 8001ff2:	f014 f9fa 	bl	80163ea <osThreadNew>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8002074 <MX_FREERTOS_Init+0xbc>)
 8001ffa:	6013      	str	r3, [r2, #0]

    /* creation of IMU */
    IMUHandle = osThreadNew(IMUTask, NULL, &IMU_attributes);
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <MX_FREERTOS_Init+0xc0>)
 8001ffe:	2100      	movs	r1, #0
 8002000:	481e      	ldr	r0, [pc, #120]	@ (800207c <MX_FREERTOS_Init+0xc4>)
 8002002:	f014 f9f2 	bl	80163ea <osThreadNew>
 8002006:	4603      	mov	r3, r0
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <MX_FREERTOS_Init+0xc8>)
 800200a:	6013      	str	r3, [r2, #0]

    /* creation of SDMMC */
    SDMMCHandle = osThreadNew(SDMMCTask, NULL, &SDMMC_attributes);
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <MX_FREERTOS_Init+0xcc>)
 800200e:	2100      	movs	r1, #0
 8002010:	481d      	ldr	r0, [pc, #116]	@ (8002088 <MX_FREERTOS_Init+0xd0>)
 8002012:	f014 f9ea 	bl	80163ea <osThreadNew>
 8002016:	4603      	mov	r3, r0
 8002018:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <MX_FREERTOS_Init+0xd4>)
 800201a:	6013      	str	r3, [r2, #0]

    /* creation of GNSS */
    GNSSHandle = osThreadNew(GNSSTask, NULL, &GNSS_attributes);
 800201c:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <MX_FREERTOS_Init+0xd8>)
 800201e:	2100      	movs	r1, #0
 8002020:	481c      	ldr	r0, [pc, #112]	@ (8002094 <MX_FREERTOS_Init+0xdc>)
 8002022:	f014 f9e2 	bl	80163ea <osThreadNew>
 8002026:	4603      	mov	r3, r0
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <MX_FREERTOS_Init+0xe0>)
 800202a:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    IMUDealHandle            = osThreadNew(IMUDataDealTask, NULL, &IMuUDeal_attributes);
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <MX_FREERTOS_Init+0xe4>)
 800202e:	2100      	movs	r1, #0
 8002030:	481b      	ldr	r0, [pc, #108]	@ (80020a0 <MX_FREERTOS_Init+0xe8>)
 8002032:	f014 f9da 	bl	80163ea <osThreadNew>
 8002036:	4603      	mov	r3, r0
 8002038:	4a1a      	ldr	r2, [pc, #104]	@ (80020a4 <MX_FREERTOS_Init+0xec>)
 800203a:	6013      	str	r3, [r2, #0]
    InitHandle               = osThreadNew(InitTask, NULL, &Init_attributes);
 800203c:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <MX_FREERTOS_Init+0xf0>)
 800203e:	2100      	movs	r1, #0
 8002040:	481a      	ldr	r0, [pc, #104]	@ (80020ac <MX_FREERTOS_Init+0xf4>)
 8002042:	f014 f9d2 	bl	80163ea <osThreadNew>
 8002046:	4603      	mov	r3, r0
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <MX_FREERTOS_Init+0xf8>)
 800204a:	6013      	str	r3, [r2, #0]
    dw1000samplingtaskHandle = osThreadNew(DW1000samplingtask, NULL, &dw1000sampling_attributes);
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <MX_FREERTOS_Init+0xfc>)
 800204e:	2100      	movs	r1, #0
 8002050:	4819      	ldr	r0, [pc, #100]	@ (80020b8 <MX_FREERTOS_Init+0x100>)
 8002052:	f014 f9ca 	bl	80163ea <osThreadNew>
 8002056:	4603      	mov	r3, r0
 8002058:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <MX_FREERTOS_Init+0x104>)
 800205a:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2400220c 	.word	0x2400220c
 8002064:	24002288 	.word	0x24002288
 8002068:	24002210 	.word	0x24002210
 800206c:	0801e964 	.word	0x0801e964
 8002070:	080020c1 	.word	0x080020c1
 8002074:	240022a0 	.word	0x240022a0
 8002078:	0801e988 	.word	0x0801e988
 800207c:	080020d1 	.word	0x080020d1
 8002080:	240022a4 	.word	0x240022a4
 8002084:	0801e9ac 	.word	0x0801e9ac
 8002088:	080020e7 	.word	0x080020e7
 800208c:	240022a8 	.word	0x240022a8
 8002090:	0801e9d0 	.word	0x0801e9d0
 8002094:	080020ff 	.word	0x080020ff
 8002098:	240022ac 	.word	0x240022ac
 800209c:	0801e9f4 	.word	0x0801e9f4
 80020a0:	08002113 	.word	0x08002113
 80020a4:	240022b0 	.word	0x240022b0
 80020a8:	0801ea18 	.word	0x0801ea18
 80020ac:	08002129 	.word	0x08002129
 80020b0:	240022b4 	.word	0x240022b4
 80020b4:	0801ea3c 	.word	0x0801ea3c
 80020b8:	080017b5 	.word	0x080017b5
 80020bc:	240022b8 	.word	0x240022b8

080020c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */

    /* Infinite loop */
    for (;;) {
        osDelay(1);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f014 fa58 	bl	801657e <osDelay>
 80020ce:	e7fb      	b.n	80020c8 <StartDefaultTask+0x8>

080020d0 <IMUTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IMUTask */
void IMUTask(void *argument)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN IMUTask */

    IMUSamplingTaskFunc(argument);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fe19 	bl	8001d10 <IMUSamplingTaskFunc>
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f014 fa4d 	bl	801657e <osDelay>
 80020e4:	e7fb      	b.n	80020de <IMUTask+0xe>

080020e6 <SDMMCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDMMCTask */
void SDMMCTask(void *argument)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN SDMMCTask */
    /* Infinite loop */
    FatFs_Check();
 80020ee:	f7ff fb6f 	bl	80017d0 <FatFs_Check>
    SDCardTaskFunc();
 80020f2:	f7ff fbaf 	bl	8001854 <SDCardTaskFunc>
    // FatFs_FileTest();
    // sd_wirte_IMU();

    for (;;) {
        osDelay(1);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f014 fa41 	bl	801657e <osDelay>
 80020fc:	e7fb      	b.n	80020f6 <SDMMCTask+0x10>

080020fe <GNSSTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GNSSTask */
void GNSSTask(void *argument)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN GNSSTask */

    UM960SamplingTaskFunc();
 8002106:	f7ff fc45 	bl	8001994 <UM960SamplingTaskFunc>

        // UartRx_CopyToRB();

        // ParseFrames();

        osDelay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f014 fa37 	bl	801657e <osDelay>
 8002110:	e7fb      	b.n	800210a <GNSSTask+0xc>

08002112 <IMUDataDealTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMUDataDealTask(void *argument)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
    imuDataDealTaskFunc();
 800211a:	f7ff fd45 	bl	8001ba8 <imuDataDealTaskFunc>
    for (;;) {
        osDelay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f014 fa2d 	bl	801657e <osDelay>
 8002124:	e7fb      	b.n	800211e <IMUDataDealTask+0xc>
	...

08002128 <InitTask>:
    }
}

void InitTask(void *argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    // 此线程优先级极高，在线程中完成各个中断的初始化，然后删除该线程
    //  中断初始化代码，禁止在main函数中初始化
    GNSSInit();
 8002130:	f7ff fd2a 	bl	8001b88 <GNSSInit>
    HAL_TIM_Base_Start_IT(&htim16);
 8002134:	4812      	ldr	r0, [pc, #72]	@ (8002180 <InitTask+0x58>)
 8002136:	f00a fe97 	bl	800ce68 <HAL_TIM_Base_Start_IT>

    // 2. 在所有准备工作都完成后，最后再使能中断
    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2008      	movs	r0, #8
 8002140:	f001 fc4e 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002144:	2008      	movs	r0, #8
 8002146:	f001 fc65 	bl	8003a14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2105      	movs	r1, #5
 800214e:	200a      	movs	r0, #10
 8002150:	f001 fc46 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002154:	200a      	movs	r0, #10
 8002156:	f001 fc5d 	bl	8003a14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	2006      	movs	r0, #6
 8002160:	f001 fc3e 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002164:	2006      	movs	r0, #6
 8002166:	f001 fc55 	bl	8003a14 <HAL_NVIC_EnableIRQ>

    // HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
    // HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

    // 3. 删除任务
    osThreadTerminate(osThreadGetId());
 800216a:	f014 f9d0 	bl	801650e <osThreadGetId>
 800216e:	4603      	mov	r3, r0
 8002170:	4618      	mov	r0, r3
 8002172:	f014 f9d7 	bl	8016524 <osThreadTerminate>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	24002498 	.word	0x24002498

08002184 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800219a:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <MX_GPIO_Init+0x208>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a0:	4a7a      	ldr	r2, [pc, #488]	@ (800238c <MX_GPIO_Init+0x208>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021aa:	4b78      	ldr	r3, [pc, #480]	@ (800238c <MX_GPIO_Init+0x208>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b8:	4b74      	ldr	r3, [pc, #464]	@ (800238c <MX_GPIO_Init+0x208>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021be:	4a73      	ldr	r2, [pc, #460]	@ (800238c <MX_GPIO_Init+0x208>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c8:	4b70      	ldr	r3, [pc, #448]	@ (800238c <MX_GPIO_Init+0x208>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d6:	4b6d      	ldr	r3, [pc, #436]	@ (800238c <MX_GPIO_Init+0x208>)
 80021d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021dc:	4a6b      	ldr	r2, [pc, #428]	@ (800238c <MX_GPIO_Init+0x208>)
 80021de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e6:	4b69      	ldr	r3, [pc, #420]	@ (800238c <MX_GPIO_Init+0x208>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4b65      	ldr	r3, [pc, #404]	@ (800238c <MX_GPIO_Init+0x208>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	4a64      	ldr	r2, [pc, #400]	@ (800238c <MX_GPIO_Init+0x208>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002204:	4b61      	ldr	r3, [pc, #388]	@ (800238c <MX_GPIO_Init+0x208>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <MX_GPIO_Init+0x208>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002218:	4a5c      	ldr	r2, [pc, #368]	@ (800238c <MX_GPIO_Init+0x208>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002222:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <MX_GPIO_Init+0x208>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002230:	4b56      	ldr	r3, [pc, #344]	@ (800238c <MX_GPIO_Init+0x208>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002236:	4a55      	ldr	r2, [pc, #340]	@ (800238c <MX_GPIO_Init+0x208>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002240:	4b52      	ldr	r3, [pc, #328]	@ (800238c <MX_GPIO_Init+0x208>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	2170      	movs	r1, #112	@ 0x70
 8002252:	484f      	ldr	r0, [pc, #316]	@ (8002390 <MX_GPIO_Init+0x20c>)
 8002254:	f004 fcfa 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_4, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	f242 0110 	movw	r1, #8208	@ 0x2010
 800225e:	484d      	ldr	r0, [pc, #308]	@ (8002394 <MX_GPIO_Init+0x210>)
 8002260:	f004 fcf4 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800226a:	4849      	ldr	r0, [pc, #292]	@ (8002390 <MX_GPIO_Init+0x20c>)
 800226c:	f004 fcee 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002276:	4848      	ldr	r0, [pc, #288]	@ (8002398 <MX_GPIO_Init+0x214>)
 8002278:	f004 fce8 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002282:	4846      	ldr	r0, [pc, #280]	@ (800239c <MX_GPIO_Init+0x218>)
 8002284:	f004 fce2 	bl	8006c4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PE2 */
    GPIO_InitStruct.Pin  = GPIO_PIN_2;
 8002288:	2304      	movs	r3, #4
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	483c      	ldr	r0, [pc, #240]	@ (8002390 <MX_GPIO_Init+0x20c>)
 800229e:	f004 fa03 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE4 PE5 PE6 PE13
                             PE14 */
    GPIO_InitStruct.Pin   = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_13 | GPIO_PIN_14;
 80022a2:	f246 0370 	movw	r3, #24688	@ 0x6070
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4835      	ldr	r0, [pc, #212]	@ (8002390 <MX_GPIO_Init+0x20c>)
 80022bc:	f004 f9f4 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 PC4 */
    GPIO_InitStruct.Pin   = GPIO_PIN_13 | GPIO_PIN_4;
 80022c0:	f242 0310 	movw	r3, #8208	@ 0x2010
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	482e      	ldr	r0, [pc, #184]	@ (8002394 <MX_GPIO_Init+0x210>)
 80022da:	f004 f9e5 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC0 */
    GPIO_InitStruct.Pin  = GPIO_PIN_0;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4828      	ldr	r0, [pc, #160]	@ (8002394 <MX_GPIO_Init+0x210>)
 80022f4:	f004 f9d8 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
    GPIO_InitStruct.Pin  = GPIO_PIN_4;
 80022f8:	2310      	movs	r3, #16
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	4824      	ldr	r0, [pc, #144]	@ (80023a0 <MX_GPIO_Init+0x21c>)
 800230e:	f004 f9cb 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB12 */
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8002312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	481b      	ldr	r0, [pc, #108]	@ (8002398 <MX_GPIO_Init+0x214>)
 800232c:	f004 f9bc 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PD8 */
    GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8002330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002336:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4815      	ldr	r0, [pc, #84]	@ (800239c <MX_GPIO_Init+0x218>)
 8002348:	f004 f9ae 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PD9 */
    GPIO_InitStruct.Pin   = GPIO_PIN_9;
 800234c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002352:	2301      	movs	r3, #1
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	480d      	ldr	r0, [pc, #52]	@ (800239c <MX_GPIO_Init+0x218>)
 8002366:	f004 f99f 	bl	80066a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB5 */
    GPIO_InitStruct.Pin  = GPIO_PIN_5;
 800236a:	2320      	movs	r3, #32
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4806      	ldr	r0, [pc, #24]	@ (8002398 <MX_GPIO_Init+0x214>)
 800237e:	f004 f993 	bl	80066a8 <HAL_GPIO_Init>
    // HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
    // HAL_NVIC_EnableIRQ(EXTI4_IRQn);

    // HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
    // HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
}
 8002382:	bf00      	nop
 8002384:	3730      	adds	r7, #48	@ 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	58024400 	.word	0x58024400
 8002390:	58021000 	.word	0x58021000
 8002394:	58020800 	.word	0x58020800
 8002398:	58020400 	.word	0x58020400
 800239c:	58020c00 	.word	0x58020c00
 80023a0:	58020000 	.word	0x58020000

080023a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80023a8:	f001 f9d6 	bl	8003758 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80023ac:	f000 f81e 	bl	80023ec <SystemClock_Config>

    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
 80023b0:	f000 f898 	bl	80024e4 <PeriphCommonClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80023b4:	f7ff fee6 	bl	8002184 <MX_GPIO_Init>
    MX_DMA_Init();
 80023b8:	f7ff fdbe 	bl	8001f38 <MX_DMA_Init>
    MX_SPI1_Init();
 80023bc:	f000 f98a 	bl	80026d4 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 80023c0:	f000 fee4 	bl	800318c <MX_USART1_UART_Init>
    MX_SDMMC1_SD_Init();
 80023c4:	f000 f8cc 	bl	8002560 <MX_SDMMC1_SD_Init>
    MX_FATFS_Init();
 80023c8:	f00e f914 	bl	80105f4 <MX_FATFS_Init>
    MX_TIM16_Init();
 80023cc:	f000 fdf2 	bl	8002fb4 <MX_TIM16_Init>
    MX_USART3_UART_Init();
 80023d0:	f000 ff28 	bl	8003224 <MX_USART3_UART_Init>
    MX_UART4_Init();
 80023d4:	f000 fe8e 	bl	80030f4 <MX_UART4_Init>
    MX_SPI2_Init();
 80023d8:	f000 f9d4 	bl	8002784 <MX_SPI2_Init>
    /* USER CODE BEGIN 2 */

    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize(); /* Call init function for freertos objects (in cmsis_os2.c) */
 80023dc:	f013 ff84 	bl	80162e8 <osKernelInitialize>
    MX_FREERTOS_Init();
 80023e0:	f7ff fdea 	bl	8001fb8 <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 80023e4:	f013 ffc6 	bl	8016374 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <main+0x44>

080023ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09c      	sub	sp, #112	@ 0x70
 80023f0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	224c      	movs	r2, #76	@ 0x4c
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f019 fe78 	bl	801c0f0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2220      	movs	r2, #32
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f019 fe72 	bl	801c0f0 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800240c:	2002      	movs	r0, #2
 800240e:	f004 fc6b 	bl	8006ce8 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4b31      	ldr	r3, [pc, #196]	@ (80024dc <SystemClock_Config+0xf0>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	4a30      	ldr	r2, [pc, #192]	@ (80024dc <SystemClock_Config+0xf0>)
 800241c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002420:	6193      	str	r3, [r2, #24]
 8002422:	4b2e      	ldr	r3, [pc, #184]	@ (80024dc <SystemClock_Config+0xf0>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <SystemClock_Config+0xf4>)
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <SystemClock_Config+0xf4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002438:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <SystemClock_Config+0xf4>)
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002444:	bf00      	nop
 8002446:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <SystemClock_Config+0xf0>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800244e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002452:	d1f8      	bne.n	8002446 <SystemClock_Config+0x5a>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002454:	2302      	movs	r3, #2
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState            = RCC_HSI_DIV1;
 8002458:	2301      	movs	r3, #1
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800245c:	2340      	movs	r3, #64	@ 0x40
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002460:	2302      	movs	r3, #2
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLM            = 4;
 8002468:	2304      	movs	r3, #4
 800246a:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLN            = 60;
 800246c:	233c      	movs	r3, #60	@ 0x3c
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP            = 2;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLQ            = 5;
 8002474:	2305      	movs	r3, #5
 8002476:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLR            = 2;
 8002478:	2302      	movs	r3, #2
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLL1VCIRANGE_3;
 800247c:	230c      	movs	r3, #12
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL       = RCC_PLL1VCOWIDE;
 8002480:	2300      	movs	r3, #0
 8002482:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248c:	4618      	mov	r0, r3
 800248e:	f004 fc65 	bl	8006d5c <HAL_RCC_OscConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <SystemClock_Config+0xb0>
        Error_Handler();
 8002498:	f000 f85c 	bl	8002554 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 800249c:	233f      	movs	r3, #63	@ 0x3f
 800249e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80024a0:	2303      	movs	r3, #3
 80024a2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV2;
 80024a8:	2308      	movs	r3, #8
 80024aa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024ac:	2340      	movs	r3, #64	@ 0x40
 80024ae:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024b0:	2340      	movs	r3, #64	@ 0x40
 80024b2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024ba:	2340      	movs	r3, #64	@ 0x40
 80024bc:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2104      	movs	r1, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 f8a4 	bl	8007610 <HAL_RCC_ClockConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <SystemClock_Config+0xe6>
        Error_Handler();
 80024ce:	f000 f841 	bl	8002554 <Error_Handler>
    }
}
 80024d2:	bf00      	nop
 80024d4:	3770      	adds	r7, #112	@ 0x70
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	58024800 	.word	0x58024800
 80024e0:	58000400 	.word	0x58000400

080024e4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0b0      	sub	sp, #192	@ 0xc0
 80024e8:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	22c0      	movs	r2, #192	@ 0xc0
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f019 fdfd 	bl	801c0f0 <memset>

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80024f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9c7 2300 	strd	r2, r3, [r7]
    PeriphClkInitStruct.CkperClockSelection  = RCC_CLKPSOURCE_HSI;
 8002502:	2300      	movs	r3, #0
 8002504:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002506:	463b      	mov	r3, r7
 8002508:	4618      	mov	r0, r3
 800250a:	f005 fc4f 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <PeriphCommonClock_Config+0x34>
        Error_Handler();
 8002514:	f000 f81e 	bl	8002554 <Error_Handler>
    }
}
 8002518:	bf00      	nop
 800251a:	37c0      	adds	r7, #192	@ 0xc0
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM17) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8002532:	f001 f94d 	bl	80037d0 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM16) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x24>
        TIM_Call_Callback();
 8002540:	f7ff fcb6 	bl	8001eb0 <TIM_Call_Callback>
    }

    /* USER CODE END Callback 1 */
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40014800 	.word	0x40014800
 8002550:	40014400 	.word	0x40014400

08002554 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <Error_Handler+0x8>

08002560 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 8002566:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <MX_SDMMC1_SD_Init+0x44>)
 8002568:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 8002578:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800257c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 8002586:	2205      	movs	r2, #5
 8002588:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <MX_SDMMC1_SD_Init+0x40>)
 800258c:	f008 f90c 	bl	800a7a8 <HAL_SD_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8002596:	f7ff ffdd 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	240022bc 	.word	0x240022bc
 80025a4:	52007000 	.word	0x52007000

080025a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0bc      	sub	sp, #240	@ 0xf0
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	22c0      	movs	r2, #192	@ 0xc0
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f019 fd91 	bl	801c0f0 <memset>
  if(sdHandle->Instance==SDMMC1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <HAL_SD_MspInit+0x11c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d171      	bne.n	80026bc <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80025d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 fbdd 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80025f8:	f7ff ffac 	bl	8002554 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 80025fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002602:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 800260e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	4a29      	ldr	r2, [pc, #164]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002638:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 800263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263e:	4a22      	ldr	r2, [pc, #136]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002648:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <HAL_SD_MspInit+0x120>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002656:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800265a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002670:	230c      	movs	r3, #12
 8002672:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002676:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800267a:	4619      	mov	r1, r3
 800267c:	4813      	ldr	r0, [pc, #76]	@ (80026cc <HAL_SD_MspInit+0x124>)
 800267e:	f004 f813 	bl	80066a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002682:	2304      	movs	r3, #4
 8002684:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800269a:	230c      	movs	r3, #12
 800269c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026a4:	4619      	mov	r1, r3
 80026a6:	480a      	ldr	r0, [pc, #40]	@ (80026d0 <HAL_SD_MspInit+0x128>)
 80026a8:	f003 fffe 	bl	80066a8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2105      	movs	r1, #5
 80026b0:	2031      	movs	r0, #49	@ 0x31
 80026b2:	f001 f995 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80026b6:	2031      	movs	r0, #49	@ 0x31
 80026b8:	f001 f9ac 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80026bc:	bf00      	nop
 80026be:	37f0      	adds	r7, #240	@ 0xf0
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	52007000 	.word	0x52007000
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020800 	.word	0x58020800
 80026d0:	58020c00 	.word	0x58020c00

080026d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026da:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <MX_SPI1_Init+0xac>)
 80026dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026de:	4b27      	ldr	r3, [pc, #156]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026e6:	4b25      	ldr	r3, [pc, #148]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ec:	4b23      	ldr	r3, [pc, #140]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026ee:	2207      	movs	r2, #7
 80026f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <MX_SPI1_Init+0xa8>)
 80026fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002704:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MX_SPI1_Init+0xa8>)
 800270c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002710:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <MX_SPI1_Init+0xa8>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002726:	2200      	movs	r2, #0
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <MX_SPI1_Init+0xa8>)
 800272c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002730:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002734:	2200      	movs	r2, #0
 8002736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <MX_SPI1_Init+0xa8>)
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002744:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <MX_SPI1_Init+0xa8>)
 800274c:	2200      	movs	r2, #0
 800274e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002752:	2200      	movs	r2, #0
 8002754:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002758:	2200      	movs	r2, #0
 800275a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <MX_SPI1_Init+0xa8>)
 800275e:	2200      	movs	r2, #0
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_SPI1_Init+0xa8>)
 8002764:	2200      	movs	r2, #0
 8002766:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002768:	4804      	ldr	r0, [pc, #16]	@ (800277c <MX_SPI1_Init+0xa8>)
 800276a:	f009 fc81 	bl	800c070 <HAL_SPI_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8002774:	f7ff feee 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	24002338 	.word	0x24002338
 8002780:	40013000 	.word	0x40013000

08002784 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002788:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <MX_SPI2_Init+0xa4>)
 800278a:	4a28      	ldr	r2, [pc, #160]	@ (800282c <MX_SPI2_Init+0xa8>)
 800278c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800278e:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <MX_SPI2_Init+0xa4>)
 8002790:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002794:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <MX_SPI2_Init+0xa4>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800279c:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <MX_SPI2_Init+0xa4>)
 800279e:	2207      	movs	r2, #7
 80027a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a2:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80027bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027c4:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80027d0:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <MX_SPI2_Init+0xa4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MX_SPI2_Init+0xa4>)
 8002804:	2200      	movs	r2, #0
 8002806:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <MX_SPI2_Init+0xa4>)
 800280a:	2200      	movs	r2, #0
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <MX_SPI2_Init+0xa4>)
 8002810:	2200      	movs	r2, #0
 8002812:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002814:	4804      	ldr	r0, [pc, #16]	@ (8002828 <MX_SPI2_Init+0xa4>)
 8002816:	f009 fc2b 	bl	800c070 <HAL_SPI_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002820:	f7ff fe98 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	240023c0 	.word	0x240023c0
 800282c:	40003800 	.word	0x40003800

08002830 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0be      	sub	sp, #248	@ 0xf8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002848:	f107 0320 	add.w	r3, r7, #32
 800284c:	22c0      	movs	r2, #192	@ 0xc0
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f019 fc4d 	bl	801c0f0 <memset>
  if(spiHandle->Instance==SPI1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a60      	ldr	r2, [pc, #384]	@ (80029dc <HAL_SPI_MspInit+0x1ac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d147      	bne.n	80028f0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002860:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800286c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002874:	f107 0320 	add.w	r3, r7, #32
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fa97 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002884:	f7ff fe66 	bl	8002554 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002888:	4b55      	ldr	r3, [pc, #340]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 800288a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800288e:	4a54      	ldr	r2, [pc, #336]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002898:	4b51      	ldr	r3, [pc, #324]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 80028a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ac:	4a4c      	ldr	r2, [pc, #304]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b6:	4b4a      	ldr	r3, [pc, #296]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028c4:	23e0      	movs	r3, #224	@ 0xe0
 80028c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028dc:	2305      	movs	r3, #5
 80028de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028e6:	4619      	mov	r1, r3
 80028e8:	483e      	ldr	r0, [pc, #248]	@ (80029e4 <HAL_SPI_MspInit+0x1b4>)
 80028ea:	f003 fedd 	bl	80066a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028ee:	e070      	b.n	80029d2 <HAL_SPI_MspInit+0x1a2>
  else if(spiHandle->Instance==SPI2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <HAL_SPI_MspInit+0x1b8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d16b      	bne.n	80029d2 <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80028fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002906:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800290a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290e:	f107 0320 	add.w	r3, r7, #32
 8002912:	4618      	mov	r0, r3
 8002914:	f005 fa4a 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 800291e:	f7ff fe19 	bl	8002554 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002922:	4b2f      	ldr	r3, [pc, #188]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002928:	4a2d      	ldr	r2, [pc, #180]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 800292a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002932:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002946:	4a26      	ldr	r2, [pc, #152]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002964:	4a1e      	ldr	r2, [pc, #120]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <HAL_SPI_MspInit+0x1b0>)
 8002970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800297c:	2306      	movs	r3, #6
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002994:	2305      	movs	r3, #5
 8002996:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800299e:	4619      	mov	r1, r3
 80029a0:	4812      	ldr	r0, [pc, #72]	@ (80029ec <HAL_SPI_MspInit+0x1bc>)
 80029a2:	f003 fe81 	bl	80066a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c0:	2305      	movs	r3, #5
 80029c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4808      	ldr	r0, [pc, #32]	@ (80029f0 <HAL_SPI_MspInit+0x1c0>)
 80029ce:	f003 fe6b 	bl	80066a8 <HAL_GPIO_Init>
}
 80029d2:	bf00      	nop
 80029d4:	37f8      	adds	r7, #248	@ 0xf8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40013000 	.word	0x40013000
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58020000 	.word	0x58020000
 80029e8:	40003800 	.word	0x40003800
 80029ec:	58020800 	.word	0x58020800
 80029f0:	58020400 	.word	0x58020400

080029f4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <HAL_SPI_MspDeInit+0x60>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_SPI_MspDeInit+0x64>)
 8002a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a0c:	4a12      	ldr	r2, [pc, #72]	@ (8002a58 <HAL_SPI_MspDeInit+0x64>)
 8002a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8002a16:	21e0      	movs	r1, #224	@ 0xe0
 8002a18:	4810      	ldr	r0, [pc, #64]	@ (8002a5c <HAL_SPI_MspDeInit+0x68>)
 8002a1a:	f003 fff5 	bl	8006a08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8002a1e:	e015      	b.n	8002a4c <HAL_SPI_MspDeInit+0x58>
  else if(spiHandle->Instance==SPI2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	@ (8002a60 <HAL_SPI_MspDeInit+0x6c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d110      	bne.n	8002a4c <HAL_SPI_MspDeInit+0x58>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_SPI_MspDeInit+0x64>)
 8002a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a30:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <HAL_SPI_MspDeInit+0x64>)
 8002a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_2);
 8002a3a:	2106      	movs	r1, #6
 8002a3c:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <HAL_SPI_MspDeInit+0x70>)
 8002a3e:	f003 ffe3 	bl	8006a08 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8002a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a46:	4808      	ldr	r0, [pc, #32]	@ (8002a68 <HAL_SPI_MspDeInit+0x74>)
 8002a48:	f003 ffde 	bl	8006a08 <HAL_GPIO_DeInit>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013000 	.word	0x40013000
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	58020000 	.word	0x58020000
 8002a60:	40003800 	.word	0x40003800
 8002a64:	58020800 	.word	0x58020800
 8002a68:	58020400 	.word	0x58020400

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a82:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	210f      	movs	r1, #15
 8002a94:	f06f 0001 	mvn.w	r0, #1
 8002a98:	f000 ffa2 	bl	80039e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	58024400 	.word	0x58024400

08002aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	@ 0x38
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	d844      	bhi.n	8002b40 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	2076      	movs	r0, #118	@ 0x76
 8002abc:	f000 ff90 	bl	80039e0 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002ac0:	2076      	movs	r0, #118	@ 0x76
 8002ac2:	f000 ffa7 	bl	8003a14 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002ac6:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <HAL_InitTick+0xb0>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aea:	f107 020c 	add.w	r2, r7, #12
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 f917 	bl	8007d28 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002afa:	f005 f8ff 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 8002afe:	4603      	mov	r3, r0
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	4a16      	ldr	r2, [pc, #88]	@ (8002b60 <HAL_InitTick+0xb8>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b14:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <HAL_InitTick+0xc0>)
 8002b16:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b1e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002b20:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002b32:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b34:	f00a f941 	bl	800cdba <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_InitTick+0xa6>
 8002b3e:	e001      	b.n	8002b44 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e005      	b.n	8002b50 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002b44:	4807      	ldr	r0, [pc, #28]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b46:	f00a f98f 	bl	800ce68 <HAL_TIM_Base_Start_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3738      	adds	r7, #56	@ 0x38
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2400001c 	.word	0x2400001c
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	24002448 	.word	0x24002448
 8002b68:	40014800 	.word	0x40014800

08002b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <NMI_Handler+0x4>

08002b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <MemManage_Handler+0x4>

08002b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <BusFault_Handler+0x4>

08002b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <UsageFault_Handler+0x4>

08002b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f004 f883 	bl	8006cb2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	f004 f87c 	bl	8006cb2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002bc2:	2010      	movs	r0, #16
 8002bc4:	f004 f875 	bl	8006cb2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA1_Stream0_IRQHandler+0x10>)
 8002bd2:	f002 fa57 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	24002790 	.word	0x24002790

08002be0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <DMA1_Stream1_IRQHandler+0x10>)
 8002be6:	f002 fa4d 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	24002808 	.word	0x24002808

08002bf4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <DMA1_Stream2_IRQHandler+0x10>)
 8002bfa:	f002 fa43 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	24002880 	.word	0x24002880

08002c08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <DMA1_Stream3_IRQHandler+0x10>)
 8002c0e:	f002 fa39 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	240026a0 	.word	0x240026a0

08002c1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002c20:	4802      	ldr	r0, [pc, #8]	@ (8002c2c <DMA1_Stream4_IRQHandler+0x10>)
 8002c22:	f002 fa2f 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	24002718 	.word	0x24002718

08002c30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c34:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c38:	f004 f83b 	bl	8006cb2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <USART1_IRQHandler+0x10>)
 8002c46:	f00b f83f 	bl	800dcc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	24002578 	.word	0x24002578

08002c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <USART3_IRQHandler+0x10>)
 8002c5a:	f00b f835 	bl	800dcc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2400260c 	.word	0x2400260c

08002c68 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <SDMMC1_IRQHandler+0x10>)
 8002c6e:	f008 f80b 	bl	800ac88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	240022bc 	.word	0x240022bc

08002c7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <UART4_IRQHandler+0x10>)
 8002c82:	f00b f821 	bl	800dcc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	240024e4 	.word	0x240024e4

08002c90 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <TIM16_IRQHandler+0x10>)
 8002c96:	f00a f9c0 	bl	800d01a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	24002498 	.word	0x24002498

08002ca4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <TIM17_IRQHandler+0x10>)
 8002caa:	f00a f9b6 	bl	800d01a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	24002448 	.word	0x24002448

08002cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_kill>:

int _kill(int pid, int sig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd2:	f019 fabd 	bl	801c250 <__errno>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2216      	movs	r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
  return -1;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_exit>:

void _exit (int status)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffe7 	bl	8002cc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <_exit+0x12>

08002cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e00a      	b.n	8002d26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d10:	f3af 8000 	nop.w
 8002d14:	4601      	mov	r1, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	60ba      	str	r2, [r7, #8]
 8002d1c:	b2ca      	uxtb	r2, r1
 8002d1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbf0      	blt.n	8002d10 <_read+0x12>
  }

  return len;
 8002d2e:	687b      	ldr	r3, [r7, #4]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e009      	b.n	8002d5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	60ba      	str	r2, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dbf1      	blt.n	8002d4a <_write+0x12>
  }
  return len;
 8002d66:	687b      	ldr	r3, [r7, #4]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_close>:

int _close(int file)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d98:	605a      	str	r2, [r3, #4]
  return 0;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_isatty>:

int _isatty(int file)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db0:	2301      	movs	r3, #1
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f019 fa22 	bl	801c250 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	24080000 	.word	0x24080000
 8002e38:	00002000 	.word	0x00002000
 8002e3c:	24002494 	.word	0x24002494
 8002e40:	24023ae8 	.word	0x24023ae8

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e48:	4b43      	ldr	r3, [pc, #268]	@ (8002f58 <SystemInit+0x114>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	4a42      	ldr	r2, [pc, #264]	@ (8002f58 <SystemInit+0x114>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e58:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <SystemInit+0x118>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d807      	bhi.n	8002e74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e64:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <SystemInit+0x118>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 030f 	bic.w	r3, r3, #15
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f5c <SystemInit+0x118>)
 8002e6e:	f043 0307 	orr.w	r3, r3, #7
 8002e72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e74:	4b3a      	ldr	r3, [pc, #232]	@ (8002f60 <SystemInit+0x11c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a39      	ldr	r2, [pc, #228]	@ (8002f60 <SystemInit+0x11c>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <SystemInit+0x11c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <SystemInit+0x11c>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4935      	ldr	r1, [pc, #212]	@ (8002f60 <SystemInit+0x11c>)
 8002e8c:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <SystemInit+0x120>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e92:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <SystemInit+0x118>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <SystemInit+0x118>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 030f 	bic.w	r3, r3, #15
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <SystemInit+0x118>)
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002eae:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <SystemInit+0x11c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <SystemInit+0x11c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <SystemInit+0x11c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <SystemInit+0x11c>)
 8002ec2:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <SystemInit+0x124>)
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ec6:	4b26      	ldr	r3, [pc, #152]	@ (8002f60 <SystemInit+0x11c>)
 8002ec8:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <SystemInit+0x128>)
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <SystemInit+0x11c>)
 8002ece:	4a28      	ldr	r2, [pc, #160]	@ (8002f70 <SystemInit+0x12c>)
 8002ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ed2:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <SystemInit+0x11c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ed8:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <SystemInit+0x11c>)
 8002eda:	4a25      	ldr	r2, [pc, #148]	@ (8002f70 <SystemInit+0x12c>)
 8002edc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <SystemInit+0x11c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <SystemInit+0x11c>)
 8002ee6:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <SystemInit+0x12c>)
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <SystemInit+0x11c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <SystemInit+0x11c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f60 <SystemInit+0x11c>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002efc:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <SystemInit+0x11c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f02:	4b1c      	ldr	r3, [pc, #112]	@ (8002f74 <SystemInit+0x130>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <SystemInit+0x134>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0e:	d202      	bcs.n	8002f16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <SystemInit+0x138>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002f16:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <SystemInit+0x11c>)
 8002f18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002f24:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <SystemInit+0x11c>)
 8002f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <SystemInit+0x11c>)
 8002f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f34:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <SystemInit+0x13c>)
 8002f36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <SystemInit+0x11c>)
 8002f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <SystemInit+0x11c>)
 8002f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00
 8002f5c:	52002000 	.word	0x52002000
 8002f60:	58024400 	.word	0x58024400
 8002f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f68:	02020200 	.word	0x02020200
 8002f6c:	01ff0000 	.word	0x01ff0000
 8002f70:	01010280 	.word	0x01010280
 8002f74:	5c001000 	.word	0x5c001000
 8002f78:	ffff0000 	.word	0xffff0000
 8002f7c:	51008108 	.word	0x51008108
 8002f80:	52004000 	.word	0x52004000

08002f84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <ExitRun0Mode+0x2c>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <ExitRun0Mode+0x2c>)
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002f94:	bf00      	nop
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <ExitRun0Mode+0x2c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f9      	beq.n	8002f96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	58024800 	.word	0x58024800

08002fb4 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	@ 0x48
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fce:	463b      	mov	r3, r7
 8002fd0:	222c      	movs	r2, #44	@ 0x2c
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f019 f88b 	bl	801c0f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002fda:	4b30      	ldr	r3, [pc, #192]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002fdc:	4a30      	ldr	r2, [pc, #192]	@ (80030a0 <MX_TIM16_Init+0xec>)
 8002fde:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 11999;
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002fe2:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8002fe6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8002fee:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002ff0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ff4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff6:	4b29      	ldr	r3, [pc, #164]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ffc:	4b27      	ldr	r3, [pc, #156]	@ (800309c <MX_TIM16_Init+0xe8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003002:	4b26      	ldr	r3, [pc, #152]	@ (800309c <MX_TIM16_Init+0xe8>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003008:	4824      	ldr	r0, [pc, #144]	@ (800309c <MX_TIM16_Init+0xe8>)
 800300a:	f009 fed6 	bl	800cdba <HAL_TIM_Base_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8003014:	f7ff fa9e 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8003018:	4820      	ldr	r0, [pc, #128]	@ (800309c <MX_TIM16_Init+0xe8>)
 800301a:	f009 ff9d 	bl	800cf58 <HAL_TIM_OC_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8003024:	f7ff fa96 	bl	8002554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003028:	2300      	movs	r3, #0
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003034:	2300      	movs	r3, #0
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003048:	2200      	movs	r2, #0
 800304a:	4619      	mov	r1, r3
 800304c:	4813      	ldr	r0, [pc, #76]	@ (800309c <MX_TIM16_Init+0xe8>)
 800304e:	f00a f8eb 	bl	800d228 <HAL_TIM_OC_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8003058:	f7ff fa7c 	bl	8002554 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003074:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800307e:	463b      	mov	r3, r7
 8003080:	4619      	mov	r1, r3
 8003082:	4806      	ldr	r0, [pc, #24]	@ (800309c <MX_TIM16_Init+0xe8>)
 8003084:	f00a fce8 	bl	800da58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800308e:	f7ff fa61 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	3748      	adds	r7, #72	@ 0x48
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	24002498 	.word	0x24002498
 80030a0:	40014400 	.word	0x40014400

080030a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <HAL_TIM_Base_MspInit+0x48>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d116      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030b6:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <HAL_TIM_Base_MspInit+0x4c>)
 80030b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030bc:	4a0c      	ldr	r2, [pc, #48]	@ (80030f0 <HAL_TIM_Base_MspInit+0x4c>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030c6:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <HAL_TIM_Base_MspInit+0x4c>)
 80030c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2105      	movs	r1, #5
 80030d8:	2075      	movs	r0, #117	@ 0x75
 80030da:	f000 fc81 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80030de:	2075      	movs	r0, #117	@ 0x75
 80030e0:	f000 fc98 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40014400 	.word	0x40014400
 80030f0:	58024400 	.word	0x58024400

080030f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030f8:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <MX_UART4_Init+0x90>)
 80030fa:	4a23      	ldr	r2, [pc, #140]	@ (8003188 <MX_UART4_Init+0x94>)
 80030fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030fe:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <MX_UART4_Init+0x90>)
 8003100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003104:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003106:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <MX_UART4_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <MX_UART4_Init+0x90>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003112:	4b1c      	ldr	r3, [pc, #112]	@ (8003184 <MX_UART4_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003118:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <MX_UART4_Init+0x90>)
 800311a:	220c      	movs	r2, #12
 800311c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311e:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <MX_UART4_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <MX_UART4_Init+0x90>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312a:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <MX_UART4_Init+0x90>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003130:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <MX_UART4_Init+0x90>)
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003136:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <MX_UART4_Init+0x90>)
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800313c:	4811      	ldr	r0, [pc, #68]	@ (8003184 <MX_UART4_Init+0x90>)
 800313e:	f00a fd27 	bl	800db90 <HAL_UART_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003148:	f7ff fa04 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314c:	2100      	movs	r1, #0
 800314e:	480d      	ldr	r0, [pc, #52]	@ (8003184 <MX_UART4_Init+0x90>)
 8003150:	f00c fbbb 	bl	800f8ca <HAL_UARTEx_SetTxFifoThreshold>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800315a:	f7ff f9fb 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800315e:	2100      	movs	r1, #0
 8003160:	4808      	ldr	r0, [pc, #32]	@ (8003184 <MX_UART4_Init+0x90>)
 8003162:	f00c fbf0 	bl	800f946 <HAL_UARTEx_SetRxFifoThreshold>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800316c:	f7ff f9f2 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003170:	4804      	ldr	r0, [pc, #16]	@ (8003184 <MX_UART4_Init+0x90>)
 8003172:	f00c fb71 	bl	800f858 <HAL_UARTEx_DisableFifoMode>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800317c:	f7ff f9ea 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	240024e4 	.word	0x240024e4
 8003188:	40004c00 	.word	0x40004c00

0800318c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003190:	4b22      	ldr	r3, [pc, #136]	@ (800321c <MX_USART1_UART_Init+0x90>)
 8003192:	4a23      	ldr	r2, [pc, #140]	@ (8003220 <MX_USART1_UART_Init+0x94>)
 8003194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003196:	4b21      	ldr	r3, [pc, #132]	@ (800321c <MX_USART1_UART_Init+0x90>)
 8003198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800319c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800319e:	4b1f      	ldr	r3, [pc, #124]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031b2:	220c      	movs	r2, #12
 80031b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b6:	4b19      	ldr	r3, [pc, #100]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ce:	4b13      	ldr	r3, [pc, #76]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031d4:	4811      	ldr	r0, [pc, #68]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031d6:	f00a fcdb 	bl	800db90 <HAL_UART_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031e0:	f7ff f9b8 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031e4:	2100      	movs	r1, #0
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031e8:	f00c fb6f 	bl	800f8ca <HAL_UARTEx_SetTxFifoThreshold>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031f2:	f7ff f9af 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031f6:	2100      	movs	r1, #0
 80031f8:	4808      	ldr	r0, [pc, #32]	@ (800321c <MX_USART1_UART_Init+0x90>)
 80031fa:	f00c fba4 	bl	800f946 <HAL_UARTEx_SetRxFifoThreshold>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003204:	f7ff f9a6 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	@ (800321c <MX_USART1_UART_Init+0x90>)
 800320a:	f00c fb25 	bl	800f858 <HAL_UARTEx_DisableFifoMode>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003214:	f7ff f99e 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	24002578 	.word	0x24002578
 8003220:	40011000 	.word	0x40011000

08003224 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003228:	4b22      	ldr	r3, [pc, #136]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 800322a:	4a23      	ldr	r2, [pc, #140]	@ (80032b8 <MX_USART3_UART_Init+0x94>)
 800322c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800322e:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003230:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8003234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003236:	4b1f      	ldr	r3, [pc, #124]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003242:	4b1c      	ldr	r3, [pc, #112]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003248:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 800324a:	220c      	movs	r2, #12
 800324c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003254:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003260:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003268:	2200      	movs	r2, #0
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800326c:	4811      	ldr	r0, [pc, #68]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 800326e:	f00a fc8f 	bl	800db90 <HAL_UART_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003278:	f7ff f96c 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800327c:	2100      	movs	r1, #0
 800327e:	480d      	ldr	r0, [pc, #52]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003280:	f00c fb23 	bl	800f8ca <HAL_UARTEx_SetTxFifoThreshold>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800328a:	f7ff f963 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800328e:	2100      	movs	r1, #0
 8003290:	4808      	ldr	r0, [pc, #32]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 8003292:	f00c fb58 	bl	800f946 <HAL_UARTEx_SetRxFifoThreshold>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800329c:	f7ff f95a 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80032a0:	4804      	ldr	r0, [pc, #16]	@ (80032b4 <MX_USART3_UART_Init+0x90>)
 80032a2:	f00c fad9 	bl	800f858 <HAL_UARTEx_DisableFifoMode>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80032ac:	f7ff f952 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	2400260c 	.word	0x2400260c
 80032b8:	40004800 	.word	0x40004800

080032bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0be      	sub	sp, #248	@ 0xf8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d4:	f107 0320 	add.w	r3, r7, #32
 80032d8:	22c0      	movs	r2, #192	@ 0xc0
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f018 ff07 	bl	801c0f0 <memset>
  if(uartHandle->Instance==UART4)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a9a      	ldr	r2, [pc, #616]	@ (8003550 <HAL_UART_MspInit+0x294>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	f040 80ab 	bne.w	8003444 <HAL_UART_MspInit+0x188>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032ee:	f04f 0202 	mov.w	r2, #2
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fd51 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003310:	f7ff f920 	bl	8002554 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003314:	4b8f      	ldr	r3, [pc, #572]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800331a:	4a8e      	ldr	r2, [pc, #568]	@ (8003554 <HAL_UART_MspInit+0x298>)
 800331c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003320:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003324:	4b8b      	ldr	r3, [pc, #556]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800332a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	4a86      	ldr	r2, [pc, #536]	@ (8003554 <HAL_UART_MspInit+0x298>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003342:	4b84      	ldr	r3, [pc, #528]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003350:	2303      	movs	r3, #3
 8003352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003368:	2308      	movs	r3, #8
 800336a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003372:	4619      	mov	r1, r3
 8003374:	4878      	ldr	r0, [pc, #480]	@ (8003558 <HAL_UART_MspInit+0x29c>)
 8003376:	f003 f997 	bl	80066a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800337a:	4b78      	ldr	r3, [pc, #480]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 800337c:	4a78      	ldr	r2, [pc, #480]	@ (8003560 <HAL_UART_MspInit+0x2a4>)
 800337e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003380:	4b76      	ldr	r3, [pc, #472]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 8003382:	223f      	movs	r2, #63	@ 0x3f
 8003384:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003386:	4b75      	ldr	r3, [pc, #468]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338c:	4b73      	ldr	r3, [pc, #460]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003392:	4b72      	ldr	r3, [pc, #456]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 8003394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003398:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800339a:	4b70      	ldr	r3, [pc, #448]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a0:	4b6e      	ldr	r3, [pc, #440]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80033a6:	4b6d      	ldr	r3, [pc, #436]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ac:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033ae:	4b6b      	ldr	r3, [pc, #428]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b4:	4b69      	ldr	r3, [pc, #420]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80033ba:	4868      	ldr	r0, [pc, #416]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033bc:	f000 fb38 	bl	8003a30 <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80033c6:	f7ff f8c5 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a63      	ldr	r2, [pc, #396]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033d2:	4a62      	ldr	r2, [pc, #392]	@ (800355c <HAL_UART_MspInit+0x2a0>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80033d8:	4b62      	ldr	r3, [pc, #392]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033da:	4a63      	ldr	r2, [pc, #396]	@ (8003568 <HAL_UART_MspInit+0x2ac>)
 80033dc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80033de:	4b61      	ldr	r3, [pc, #388]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033e0:	2240      	movs	r2, #64	@ 0x40
 80033e2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033e4:	4b5f      	ldr	r3, [pc, #380]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033e6:	2240      	movs	r2, #64	@ 0x40
 80033e8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033f6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fe:	4b59      	ldr	r3, [pc, #356]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003404:	4b57      	ldr	r3, [pc, #348]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800340a:	4b56      	ldr	r3, [pc, #344]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003410:	4b54      	ldr	r3, [pc, #336]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003416:	4853      	ldr	r0, [pc, #332]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 8003418:	f000 fb0a 	bl	8003a30 <HAL_DMA_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003422:	f7ff f897 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4e      	ldr	r2, [pc, #312]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 800342a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800342c:	4a4d      	ldr	r2, [pc, #308]	@ (8003564 <HAL_UART_MspInit+0x2a8>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2105      	movs	r1, #5
 8003436:	2034      	movs	r0, #52	@ 0x34
 8003438:	f000 fad2 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800343c:	2034      	movs	r0, #52	@ 0x34
 800343e:	f000 fae9 	bl	8003a14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003442:	e14a      	b.n	80036da <HAL_UART_MspInit+0x41e>
  else if(uartHandle->Instance==USART1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a48      	ldr	r2, [pc, #288]	@ (800356c <HAL_UART_MspInit+0x2b0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 8094 	bne.w	8003578 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003450:	f04f 0201 	mov.w	r2, #1
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003462:	f107 0320 	add.w	r3, r7, #32
 8003466:	4618      	mov	r0, r3
 8003468:	f004 fca0 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8003472:	f7ff f86f 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800347c:	4a35      	ldr	r2, [pc, #212]	@ (8003554 <HAL_UART_MspInit+0x298>)
 800347e:	f043 0310 	orr.w	r3, r3, #16
 8003482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003486:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <HAL_UART_MspInit+0x298>)
 8003496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800349a:	4a2e      	ldr	r2, [pc, #184]	@ (8003554 <HAL_UART_MspInit+0x298>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_UART_MspInit+0x298>)
 80034a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80034b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034cc:	2307      	movs	r3, #7
 80034ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80034d6:	4619      	mov	r1, r3
 80034d8:	481f      	ldr	r0, [pc, #124]	@ (8003558 <HAL_UART_MspInit+0x29c>)
 80034da:	f003 f8e5 	bl	80066a8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 80034e0:	4a24      	ldr	r2, [pc, #144]	@ (8003574 <HAL_UART_MspInit+0x2b8>)
 80034e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034e4:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 80034e6:	2229      	movs	r2, #41	@ 0x29
 80034e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ea:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 80034f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800350a:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 800350c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003510:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003512:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003518:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800351e:	4814      	ldr	r0, [pc, #80]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003520:	f000 fa86 	bl	8003a30 <HAL_DMA_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0x272>
      Error_Handler();
 800352a:	f7ff f813 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0f      	ldr	r2, [pc, #60]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003536:	4a0e      	ldr	r2, [pc, #56]	@ (8003570 <HAL_UART_MspInit+0x2b4>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2105      	movs	r1, #5
 8003540:	2025      	movs	r0, #37	@ 0x25
 8003542:	f000 fa4d 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003546:	2025      	movs	r0, #37	@ 0x25
 8003548:	f000 fa64 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 800354c:	e0c5      	b.n	80036da <HAL_UART_MspInit+0x41e>
 800354e:	bf00      	nop
 8003550:	40004c00 	.word	0x40004c00
 8003554:	58024400 	.word	0x58024400
 8003558:	58020000 	.word	0x58020000
 800355c:	240026a0 	.word	0x240026a0
 8003560:	40020058 	.word	0x40020058
 8003564:	24002718 	.word	0x24002718
 8003568:	40020070 	.word	0x40020070
 800356c:	40011000 	.word	0x40011000
 8003570:	24002790 	.word	0x24002790
 8003574:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a59      	ldr	r2, [pc, #356]	@ (80036e4 <HAL_UART_MspInit+0x428>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f040 80ab 	bne.w	80036da <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003584:	f04f 0202 	mov.w	r2, #2
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fc06 	bl	8007dac <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80035a6:	f7fe ffd5 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035aa:	4b4f      	ldr	r3, [pc, #316]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035b0:	4a4d      	ldr	r2, [pc, #308]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035ba:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ce:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035d8:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_UART_MspInit+0x42c>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003600:	2307      	movs	r3, #7
 8003602:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003606:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800360a:	4619      	mov	r1, r3
 800360c:	4837      	ldr	r0, [pc, #220]	@ (80036ec <HAL_UART_MspInit+0x430>)
 800360e:	f003 f84b 	bl	80066a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003612:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003614:	4a37      	ldr	r2, [pc, #220]	@ (80036f4 <HAL_UART_MspInit+0x438>)
 8003616:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003618:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 800361a:	222d      	movs	r2, #45	@ 0x2d
 800361c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003624:	4b32      	ldr	r3, [pc, #200]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800362a:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 800362c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003630:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003632:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003638:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800363e:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003644:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003646:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003648:	2200      	movs	r2, #0
 800364a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364c:	4b28      	ldr	r3, [pc, #160]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 800364e:	2200      	movs	r2, #0
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003652:	4827      	ldr	r0, [pc, #156]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003654:	f000 f9ec 	bl	8003a30 <HAL_DMA_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800365e:	f7fe ff79 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a22      	ldr	r2, [pc, #136]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 8003666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800366a:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_UART_MspInit+0x434>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003670:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 8003672:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_UART_MspInit+0x440>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 8003678:	222e      	movs	r2, #46	@ 0x2e
 800367a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367c:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 800367e:	2240      	movs	r2, #64	@ 0x40
 8003680:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003682:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 800368a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800368e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036ae:	4812      	ldr	r0, [pc, #72]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 80036b0:	f000 f9be 	bl	8003a30 <HAL_DMA_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_UART_MspInit+0x402>
      Error_Handler();
 80036ba:	f7fe ff4b 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 80036c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <HAL_UART_MspInit+0x43c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2105      	movs	r1, #5
 80036ce:	2027      	movs	r0, #39	@ 0x27
 80036d0:	f000 f986 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036d4:	2027      	movs	r0, #39	@ 0x27
 80036d6:	f000 f99d 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	37f8      	adds	r7, #248	@ 0xf8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40004800 	.word	0x40004800
 80036e8:	58024400 	.word	0x58024400
 80036ec:	58020400 	.word	0x58020400
 80036f0:	24002808 	.word	0x24002808
 80036f4:	40020028 	.word	0x40020028
 80036f8:	24002880 	.word	0x24002880
 80036fc:	40020040 	.word	0x40020040

08003700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003700:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800373c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003704:	f7ff fc3e 	bl	8002f84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003708:	f7ff fb9c 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800370c:	480c      	ldr	r0, [pc, #48]	@ (8003740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800370e:	490d      	ldr	r1, [pc, #52]	@ (8003744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003724:	4c0a      	ldr	r4, [pc, #40]	@ (8003750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003732:	f018 fd93 	bl	801c25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7fe fe35 	bl	80023a4 <main>
  bx  lr
 800373a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003740:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003744:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003748:	0801f34c 	.word	0x0801f34c
  ldr r2, =_sbss
 800374c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8003750:	24023ae8 	.word	0x24023ae8

08003754 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC3_IRQHandler>
	...

08003758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375e:	2003      	movs	r0, #3
 8003760:	f000 f933 	bl	80039ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003764:	f004 f90a 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_Init+0x68>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	4913      	ldr	r1, [pc, #76]	@ (80037c4 <HAL_Init+0x6c>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
 8003780:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_Init+0x68>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a0e      	ldr	r2, [pc, #56]	@ (80037c4 <HAL_Init+0x6c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	4a0b      	ldr	r2, [pc, #44]	@ (80037c8 <HAL_Init+0x70>)
 800379a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_Init+0x74>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a2:	200f      	movs	r0, #15
 80037a4:	f7ff f980 	bl	8002aa8 <HAL_InitTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e002      	b.n	80037b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037b2:	f7ff f95b 	bl	8002a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58024400 	.word	0x58024400
 80037c4:	0801ea60 	.word	0x0801ea60
 80037c8:	24000018 	.word	0x24000018
 80037cc:	24000014 	.word	0x24000014

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	24000020 	.word	0x24000020
 80037f4:	240028f8 	.word	0x240028f8

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	240028f8 	.word	0x240028f8

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	24000020 	.word	0x24000020

08003858 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <HAL_GetREVID+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0c1b      	lsrs	r3, r3, #16
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	5c001000 	.word	0x5c001000

08003870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <__NVIC_SetPriorityGrouping+0x40>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00
 80038b4:	05fa0000 	.word	0x05fa0000

080038b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0b      	blt.n	80038fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	@ (800390c <__NVIC_EnableIRQ+0x38>)
 80038ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	@ (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	@ (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	@ 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff4c 	bl	8003870 <__NVIC_SetPriorityGrouping>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039ee:	f7ff ff63 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 80039f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f7ff ffb3 	bl	8003964 <NVIC_EncodePriority>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff82 	bl	8003910 <__NVIC_SetPriority>
}
 8003a0c:	bf00      	nop
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff56 	bl	80038d4 <__NVIC_EnableIRQ>
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7ff fede 	bl	80037f8 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e316      	b.n	8004076 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a66      	ldr	r2, [pc, #408]	@ (8003be8 <HAL_DMA_Init+0x1b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d04a      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a65      	ldr	r2, [pc, #404]	@ (8003bec <HAL_DMA_Init+0x1bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d045      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a63      	ldr	r2, [pc, #396]	@ (8003bf0 <HAL_DMA_Init+0x1c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d040      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a62      	ldr	r2, [pc, #392]	@ (8003bf4 <HAL_DMA_Init+0x1c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d03b      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a60      	ldr	r2, [pc, #384]	@ (8003bf8 <HAL_DMA_Init+0x1c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d036      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bfc <HAL_DMA_Init+0x1cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d031      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a5d      	ldr	r2, [pc, #372]	@ (8003c00 <HAL_DMA_Init+0x1d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02c      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5c      	ldr	r2, [pc, #368]	@ (8003c04 <HAL_DMA_Init+0x1d4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d027      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c08 <HAL_DMA_Init+0x1d8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a59      	ldr	r2, [pc, #356]	@ (8003c0c <HAL_DMA_Init+0x1dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a57      	ldr	r2, [pc, #348]	@ (8003c10 <HAL_DMA_Init+0x1e0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a56      	ldr	r2, [pc, #344]	@ (8003c14 <HAL_DMA_Init+0x1e4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a54      	ldr	r2, [pc, #336]	@ (8003c18 <HAL_DMA_Init+0x1e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a53      	ldr	r2, [pc, #332]	@ (8003c1c <HAL_DMA_Init+0x1ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a51      	ldr	r2, [pc, #324]	@ (8003c20 <HAL_DMA_Init+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_Init+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a50      	ldr	r2, [pc, #320]	@ (8003c24 <HAL_DMA_Init+0x1f4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Init+0xbc>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_DMA_Init+0xbe>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 813b 	beq.w	8003d6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a37      	ldr	r2, [pc, #220]	@ (8003be8 <HAL_DMA_Init+0x1b8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a36      	ldr	r2, [pc, #216]	@ (8003bec <HAL_DMA_Init+0x1bc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a34      	ldr	r2, [pc, #208]	@ (8003bf0 <HAL_DMA_Init+0x1c0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a33      	ldr	r2, [pc, #204]	@ (8003bf4 <HAL_DMA_Init+0x1c4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_DMA_Init+0x1c8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <HAL_DMA_Init+0x1cc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_DMA_Init+0x1d0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c04 <HAL_DMA_Init+0x1d4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2b      	ldr	r2, [pc, #172]	@ (8003c08 <HAL_DMA_Init+0x1d8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <HAL_DMA_Init+0x1dc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	@ (8003c10 <HAL_DMA_Init+0x1e0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a27      	ldr	r2, [pc, #156]	@ (8003c14 <HAL_DMA_Init+0x1e4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a25      	ldr	r2, [pc, #148]	@ (8003c18 <HAL_DMA_Init+0x1e8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <HAL_DMA_Init+0x1ec>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <HAL_DMA_Init+0x1f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Init+0x174>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <HAL_DMA_Init+0x1f4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <HAL_DMA_Init+0x186>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <HAL_DMA_Init+0x196>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bc6:	e02f      	b.n	8003c28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc8:	f7ff fe16 	bl	80037f8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d928      	bls.n	8003c28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2203      	movs	r2, #3
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e246      	b.n	8004076 <HAL_DMA_Init+0x646>
 8003be8:	40020010 	.word	0x40020010
 8003bec:	40020028 	.word	0x40020028
 8003bf0:	40020040 	.word	0x40020040
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	40020070 	.word	0x40020070
 8003bfc:	40020088 	.word	0x40020088
 8003c00:	400200a0 	.word	0x400200a0
 8003c04:	400200b8 	.word	0x400200b8
 8003c08:	40020410 	.word	0x40020410
 8003c0c:	40020428 	.word	0x40020428
 8003c10:	40020440 	.word	0x40020440
 8003c14:	40020458 	.word	0x40020458
 8003c18:	40020470 	.word	0x40020470
 8003c1c:	40020488 	.word	0x40020488
 8003c20:	400204a0 	.word	0x400204a0
 8003c24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1c8      	bne.n	8003bc8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4b83      	ldr	r3, [pc, #524]	@ (8003e50 <HAL_DMA_Init+0x420>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	4313      	orrs	r3, r2
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c8c:	4b71      	ldr	r3, [pc, #452]	@ (8003e54 <HAL_DMA_Init+0x424>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b71      	ldr	r3, [pc, #452]	@ (8003e58 <HAL_DMA_Init+0x428>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c98:	d328      	bcc.n	8003cec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b28      	cmp	r3, #40	@ 0x28
 8003ca0:	d903      	bls.n	8003caa <HAL_DMA_Init+0x27a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ca8:	d917      	bls.n	8003cda <HAL_DMA_Init+0x2aa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cb0:	d903      	bls.n	8003cba <HAL_DMA_Init+0x28a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b42      	cmp	r3, #66	@ 0x42
 8003cb8:	d90f      	bls.n	8003cda <HAL_DMA_Init+0x2aa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b46      	cmp	r3, #70	@ 0x46
 8003cc0:	d903      	bls.n	8003cca <HAL_DMA_Init+0x29a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b48      	cmp	r3, #72	@ 0x48
 8003cc8:	d907      	bls.n	8003cda <HAL_DMA_Init+0x2aa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cd0:	d905      	bls.n	8003cde <HAL_DMA_Init+0x2ae>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b52      	cmp	r3, #82	@ 0x52
 8003cd8:	d801      	bhi.n	8003cde <HAL_DMA_Init+0x2ae>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_DMA_Init+0x2b0>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d117      	bne.n	8003d46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f002 fb33 	bl	8006394 <DMA_CheckFifoParam>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e197      	b.n	8004076 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f002 fa6e 	bl	8006230 <DMA_CalcBaseAndBitshift>
 8003d54:	4603      	mov	r3, r0
 8003d56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	223f      	movs	r2, #63	@ 0x3f
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	e0cd      	b.n	8003f06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e5c <HAL_DMA_Init+0x42c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a39      	ldr	r2, [pc, #228]	@ (8003e60 <HAL_DMA_Init+0x430>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a38      	ldr	r2, [pc, #224]	@ (8003e64 <HAL_DMA_Init+0x434>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a36      	ldr	r2, [pc, #216]	@ (8003e68 <HAL_DMA_Init+0x438>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a35      	ldr	r2, [pc, #212]	@ (8003e6c <HAL_DMA_Init+0x43c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <HAL_DMA_Init+0x440>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a32      	ldr	r2, [pc, #200]	@ (8003e74 <HAL_DMA_Init+0x444>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Init+0x38a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <HAL_DMA_Init+0x448>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Init+0x38e>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_DMA_Init+0x390>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8097 	beq.w	8003ef4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a24      	ldr	r2, [pc, #144]	@ (8003e5c <HAL_DMA_Init+0x42c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d021      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	@ (8003e60 <HAL_DMA_Init+0x430>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01c      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	@ (8003e64 <HAL_DMA_Init+0x434>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d017      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e68 <HAL_DMA_Init+0x438>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d012      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_DMA_Init+0x43c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00d      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <HAL_DMA_Init+0x440>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d008      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <HAL_DMA_Init+0x444>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <HAL_DMA_Init+0x3e4>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_DMA_Init+0x448>)
 8003e12:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <HAL_DMA_Init+0x44c>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d021      	beq.n	8003e80 <HAL_DMA_Init+0x450>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b80      	cmp	r3, #128	@ 0x80
 8003e42:	d102      	bne.n	8003e4a <HAL_DMA_Init+0x41a>
 8003e44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e48:	e01b      	b.n	8003e82 <HAL_DMA_Init+0x452>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e019      	b.n	8003e82 <HAL_DMA_Init+0x452>
 8003e4e:	bf00      	nop
 8003e50:	fe10803f 	.word	0xfe10803f
 8003e54:	5c001000 	.word	0x5c001000
 8003e58:	ffff0000 	.word	0xffff0000
 8003e5c:	58025408 	.word	0x58025408
 8003e60:	5802541c 	.word	0x5802541c
 8003e64:	58025430 	.word	0x58025430
 8003e68:	58025444 	.word	0x58025444
 8003e6c:	58025458 	.word	0x58025458
 8003e70:	5802546c 	.word	0x5802546c
 8003e74:	58025480 	.word	0x58025480
 8003e78:	58025494 	.word	0x58025494
 8003e7c:	fffe000f 	.word	0xfffe000f
 8003e80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8004080 <HAL_DMA_Init+0x650>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	4a6e      	ldr	r2, [pc, #440]	@ (8004084 <HAL_DMA_Init+0x654>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f002 f9a9 	bl	8006230 <DMA_CalcBaseAndBitshift>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2201      	movs	r2, #1
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	e008      	b.n	8003f06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2240      	movs	r2, #64	@ 0x40
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2203      	movs	r2, #3
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0b7      	b.n	8004076 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8004088 <HAL_DMA_Init+0x658>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d072      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a5d      	ldr	r2, [pc, #372]	@ (800408c <HAL_DMA_Init+0x65c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d06d      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8004090 <HAL_DMA_Init+0x660>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d068      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5a      	ldr	r2, [pc, #360]	@ (8004094 <HAL_DMA_Init+0x664>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d063      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a59      	ldr	r2, [pc, #356]	@ (8004098 <HAL_DMA_Init+0x668>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d05e      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a57      	ldr	r2, [pc, #348]	@ (800409c <HAL_DMA_Init+0x66c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d059      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a56      	ldr	r2, [pc, #344]	@ (80040a0 <HAL_DMA_Init+0x670>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d054      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a54      	ldr	r2, [pc, #336]	@ (80040a4 <HAL_DMA_Init+0x674>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04f      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a53      	ldr	r2, [pc, #332]	@ (80040a8 <HAL_DMA_Init+0x678>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a51      	ldr	r2, [pc, #324]	@ (80040ac <HAL_DMA_Init+0x67c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a50      	ldr	r2, [pc, #320]	@ (80040b0 <HAL_DMA_Init+0x680>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <HAL_DMA_Init+0x684>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4d      	ldr	r2, [pc, #308]	@ (80040b8 <HAL_DMA_Init+0x688>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80040bc <HAL_DMA_Init+0x68c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4a      	ldr	r2, [pc, #296]	@ (80040c0 <HAL_DMA_Init+0x690>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a48      	ldr	r2, [pc, #288]	@ (80040c4 <HAL_DMA_Init+0x694>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a47      	ldr	r2, [pc, #284]	@ (80040c8 <HAL_DMA_Init+0x698>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a45      	ldr	r2, [pc, #276]	@ (80040cc <HAL_DMA_Init+0x69c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a44      	ldr	r2, [pc, #272]	@ (80040d0 <HAL_DMA_Init+0x6a0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a42      	ldr	r2, [pc, #264]	@ (80040d4 <HAL_DMA_Init+0x6a4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a41      	ldr	r2, [pc, #260]	@ (80040d8 <HAL_DMA_Init+0x6a8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80040dc <HAL_DMA_Init+0x6ac>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80040e0 <HAL_DMA_Init+0x6b0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Init+0x5c6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80040e4 <HAL_DMA_Init+0x6b4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Init+0x5ca>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_Init+0x5cc>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d032      	beq.n	8004066 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f002 fa43 	bl	800648c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b80      	cmp	r3, #128	@ 0x80
 800400c:	d102      	bne.n	8004014 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004028:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_DMA_Init+0x624>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b08      	cmp	r3, #8
 8004038:	d80c      	bhi.n	8004054 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f002 fac0 	bl	80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e008      	b.n	8004066 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	a7fdabf8 	.word	0xa7fdabf8
 8004084:	cccccccd 	.word	0xcccccccd
 8004088:	40020010 	.word	0x40020010
 800408c:	40020028 	.word	0x40020028
 8004090:	40020040 	.word	0x40020040
 8004094:	40020058 	.word	0x40020058
 8004098:	40020070 	.word	0x40020070
 800409c:	40020088 	.word	0x40020088
 80040a0:	400200a0 	.word	0x400200a0
 80040a4:	400200b8 	.word	0x400200b8
 80040a8:	40020410 	.word	0x40020410
 80040ac:	40020428 	.word	0x40020428
 80040b0:	40020440 	.word	0x40020440
 80040b4:	40020458 	.word	0x40020458
 80040b8:	40020470 	.word	0x40020470
 80040bc:	40020488 	.word	0x40020488
 80040c0:	400204a0 	.word	0x400204a0
 80040c4:	400204b8 	.word	0x400204b8
 80040c8:	58025408 	.word	0x58025408
 80040cc:	5802541c 	.word	0x5802541c
 80040d0:	58025430 	.word	0x58025430
 80040d4:	58025444 	.word	0x58025444
 80040d8:	58025458 	.word	0x58025458
 80040dc:	5802546c 	.word	0x5802546c
 80040e0:	58025480 	.word	0x58025480
 80040e4:	58025494 	.word	0x58025494

080040e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e226      	b.n	8004552 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Start_IT+0x2a>
 800410e:	2302      	movs	r3, #2
 8004110:	e21f      	b.n	8004552 <HAL_DMA_Start_IT+0x46a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	f040 820a 	bne.w	800453c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a68      	ldr	r2, [pc, #416]	@ (80042dc <HAL_DMA_Start_IT+0x1f4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a66      	ldr	r2, [pc, #408]	@ (80042e0 <HAL_DMA_Start_IT+0x1f8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <HAL_DMA_Start_IT+0x1fc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a63      	ldr	r2, [pc, #396]	@ (80042e8 <HAL_DMA_Start_IT+0x200>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a62      	ldr	r2, [pc, #392]	@ (80042ec <HAL_DMA_Start_IT+0x204>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a60      	ldr	r2, [pc, #384]	@ (80042f0 <HAL_DMA_Start_IT+0x208>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5f      	ldr	r2, [pc, #380]	@ (80042f4 <HAL_DMA_Start_IT+0x20c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5d      	ldr	r2, [pc, #372]	@ (80042f8 <HAL_DMA_Start_IT+0x210>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5c      	ldr	r2, [pc, #368]	@ (80042fc <HAL_DMA_Start_IT+0x214>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5a      	ldr	r2, [pc, #360]	@ (8004300 <HAL_DMA_Start_IT+0x218>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a59      	ldr	r2, [pc, #356]	@ (8004304 <HAL_DMA_Start_IT+0x21c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a57      	ldr	r2, [pc, #348]	@ (8004308 <HAL_DMA_Start_IT+0x220>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a56      	ldr	r2, [pc, #344]	@ (800430c <HAL_DMA_Start_IT+0x224>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a54      	ldr	r2, [pc, #336]	@ (8004310 <HAL_DMA_Start_IT+0x228>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a53      	ldr	r2, [pc, #332]	@ (8004314 <HAL_DMA_Start_IT+0x22c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_Start_IT+0xee>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a51      	ldr	r2, [pc, #324]	@ (8004318 <HAL_DMA_Start_IT+0x230>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <HAL_DMA_Start_IT+0x100>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e007      	b.n	80041f8 <HAL_DMA_Start_IT+0x110>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f001 fe6a 	bl	8005ed8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <HAL_DMA_Start_IT+0x1f4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04a      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <HAL_DMA_Start_IT+0x1f8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d045      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <HAL_DMA_Start_IT+0x1fc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d040      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a30      	ldr	r2, [pc, #192]	@ (80042e8 <HAL_DMA_Start_IT+0x200>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d03b      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2e      	ldr	r2, [pc, #184]	@ (80042ec <HAL_DMA_Start_IT+0x204>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d036      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <HAL_DMA_Start_IT+0x208>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d031      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_DMA_Start_IT+0x20c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02c      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_DMA_Start_IT+0x210>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d027      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a28      	ldr	r2, [pc, #160]	@ (80042fc <HAL_DMA_Start_IT+0x214>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <HAL_DMA_Start_IT+0x218>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a25      	ldr	r2, [pc, #148]	@ (8004304 <HAL_DMA_Start_IT+0x21c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <HAL_DMA_Start_IT+0x220>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_DMA_Start_IT+0x224>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <HAL_DMA_Start_IT+0x228>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_DMA_Start_IT+0x22c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_DMA_Start_IT+0x1bc>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <HAL_DMA_Start_IT+0x230>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_DMA_Start_IT+0x1c0>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_DMA_Start_IT+0x1c2>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d036      	beq.n	800431c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 021e 	bic.w	r2, r3, #30
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0216 	orr.w	r2, r2, #22
 80042c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03e      	beq.n	8004348 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0208 	orr.w	r2, r2, #8
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e035      	b.n	8004348 <HAL_DMA_Start_IT+0x260>
 80042dc:	40020010 	.word	0x40020010
 80042e0:	40020028 	.word	0x40020028
 80042e4:	40020040 	.word	0x40020040
 80042e8:	40020058 	.word	0x40020058
 80042ec:	40020070 	.word	0x40020070
 80042f0:	40020088 	.word	0x40020088
 80042f4:	400200a0 	.word	0x400200a0
 80042f8:	400200b8 	.word	0x400200b8
 80042fc:	40020410 	.word	0x40020410
 8004300:	40020428 	.word	0x40020428
 8004304:	40020440 	.word	0x40020440
 8004308:	40020458 	.word	0x40020458
 800430c:	40020470 	.word	0x40020470
 8004310:	40020488 	.word	0x40020488
 8004314:	400204a0 	.word	0x400204a0
 8004318:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 020e 	bic.w	r2, r3, #14
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 020a 	orr.w	r2, r2, #10
 800432e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0204 	orr.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a83      	ldr	r2, [pc, #524]	@ (800455c <HAL_DMA_Start_IT+0x474>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d072      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a82      	ldr	r2, [pc, #520]	@ (8004560 <HAL_DMA_Start_IT+0x478>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d06d      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a80      	ldr	r2, [pc, #512]	@ (8004564 <HAL_DMA_Start_IT+0x47c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d068      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7f      	ldr	r2, [pc, #508]	@ (8004568 <HAL_DMA_Start_IT+0x480>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d063      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7d      	ldr	r2, [pc, #500]	@ (800456c <HAL_DMA_Start_IT+0x484>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d05e      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7c      	ldr	r2, [pc, #496]	@ (8004570 <HAL_DMA_Start_IT+0x488>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d059      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a7a      	ldr	r2, [pc, #488]	@ (8004574 <HAL_DMA_Start_IT+0x48c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d054      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a79      	ldr	r2, [pc, #484]	@ (8004578 <HAL_DMA_Start_IT+0x490>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04f      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a77      	ldr	r2, [pc, #476]	@ (800457c <HAL_DMA_Start_IT+0x494>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d04a      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a76      	ldr	r2, [pc, #472]	@ (8004580 <HAL_DMA_Start_IT+0x498>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d045      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a74      	ldr	r2, [pc, #464]	@ (8004584 <HAL_DMA_Start_IT+0x49c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d040      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a73      	ldr	r2, [pc, #460]	@ (8004588 <HAL_DMA_Start_IT+0x4a0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d03b      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a71      	ldr	r2, [pc, #452]	@ (800458c <HAL_DMA_Start_IT+0x4a4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d036      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a70      	ldr	r2, [pc, #448]	@ (8004590 <HAL_DMA_Start_IT+0x4a8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d031      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004594 <HAL_DMA_Start_IT+0x4ac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d02c      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004598 <HAL_DMA_Start_IT+0x4b0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d027      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6b      	ldr	r2, [pc, #428]	@ (800459c <HAL_DMA_Start_IT+0x4b4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d022      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <HAL_DMA_Start_IT+0x4b8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d01d      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a68      	ldr	r2, [pc, #416]	@ (80045a4 <HAL_DMA_Start_IT+0x4bc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d018      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a67      	ldr	r2, [pc, #412]	@ (80045a8 <HAL_DMA_Start_IT+0x4c0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a65      	ldr	r2, [pc, #404]	@ (80045ac <HAL_DMA_Start_IT+0x4c4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00e      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a64      	ldr	r2, [pc, #400]	@ (80045b0 <HAL_DMA_Start_IT+0x4c8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a62      	ldr	r2, [pc, #392]	@ (80045b4 <HAL_DMA_Start_IT+0x4cc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_DMA_Start_IT+0x350>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a61      	ldr	r2, [pc, #388]	@ (80045b8 <HAL_DMA_Start_IT+0x4d0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_DMA_Start_IT+0x354>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_DMA_Start_IT+0x356>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01a      	beq.n	8004478 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004476:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a37      	ldr	r2, [pc, #220]	@ (800455c <HAL_DMA_Start_IT+0x474>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04a      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <HAL_DMA_Start_IT+0x478>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d045      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	@ (8004564 <HAL_DMA_Start_IT+0x47c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d040      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a33      	ldr	r2, [pc, #204]	@ (8004568 <HAL_DMA_Start_IT+0x480>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d03b      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a31      	ldr	r2, [pc, #196]	@ (800456c <HAL_DMA_Start_IT+0x484>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d036      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a30      	ldr	r2, [pc, #192]	@ (8004570 <HAL_DMA_Start_IT+0x488>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d031      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004574 <HAL_DMA_Start_IT+0x48c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004578 <HAL_DMA_Start_IT+0x490>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d027      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2b      	ldr	r2, [pc, #172]	@ (800457c <HAL_DMA_Start_IT+0x494>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004580 <HAL_DMA_Start_IT+0x498>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a28      	ldr	r2, [pc, #160]	@ (8004584 <HAL_DMA_Start_IT+0x49c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <HAL_DMA_Start_IT+0x4a0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a25      	ldr	r2, [pc, #148]	@ (800458c <HAL_DMA_Start_IT+0x4a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <HAL_DMA_Start_IT+0x4a8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a22      	ldr	r2, [pc, #136]	@ (8004594 <HAL_DMA_Start_IT+0x4ac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_DMA_Start_IT+0x430>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <HAL_DMA_Start_IT+0x4b0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <HAL_DMA_Start_IT+0x442>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e012      	b.n	8004550 <HAL_DMA_Start_IT+0x468>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e009      	b.n	8004550 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40020010 	.word	0x40020010
 8004560:	40020028 	.word	0x40020028
 8004564:	40020040 	.word	0x40020040
 8004568:	40020058 	.word	0x40020058
 800456c:	40020070 	.word	0x40020070
 8004570:	40020088 	.word	0x40020088
 8004574:	400200a0 	.word	0x400200a0
 8004578:	400200b8 	.word	0x400200b8
 800457c:	40020410 	.word	0x40020410
 8004580:	40020428 	.word	0x40020428
 8004584:	40020440 	.word	0x40020440
 8004588:	40020458 	.word	0x40020458
 800458c:	40020470 	.word	0x40020470
 8004590:	40020488 	.word	0x40020488
 8004594:	400204a0 	.word	0x400204a0
 8004598:	400204b8 	.word	0x400204b8
 800459c:	58025408 	.word	0x58025408
 80045a0:	5802541c 	.word	0x5802541c
 80045a4:	58025430 	.word	0x58025430
 80045a8:	58025444 	.word	0x58025444
 80045ac:	58025458 	.word	0x58025458
 80045b0:	5802546c 	.word	0x5802546c
 80045b4:	58025480 	.word	0x58025480
 80045b8:	58025494 	.word	0x58025494

080045bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff f918 	bl	80037f8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e2dc      	b.n	8004b8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d008      	beq.n	80045f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2280      	movs	r2, #128	@ 0x80
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e2cd      	b.n	8004b8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a76      	ldr	r2, [pc, #472]	@ (80047d0 <HAL_DMA_Abort+0x214>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04a      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a74      	ldr	r2, [pc, #464]	@ (80047d4 <HAL_DMA_Abort+0x218>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d045      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a73      	ldr	r2, [pc, #460]	@ (80047d8 <HAL_DMA_Abort+0x21c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a71      	ldr	r2, [pc, #452]	@ (80047dc <HAL_DMA_Abort+0x220>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d03b      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a70      	ldr	r2, [pc, #448]	@ (80047e0 <HAL_DMA_Abort+0x224>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d036      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6e      	ldr	r2, [pc, #440]	@ (80047e4 <HAL_DMA_Abort+0x228>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6d      	ldr	r2, [pc, #436]	@ (80047e8 <HAL_DMA_Abort+0x22c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d02c      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6b      	ldr	r2, [pc, #428]	@ (80047ec <HAL_DMA_Abort+0x230>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d027      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6a      	ldr	r2, [pc, #424]	@ (80047f0 <HAL_DMA_Abort+0x234>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	@ (80047f4 <HAL_DMA_Abort+0x238>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a67      	ldr	r2, [pc, #412]	@ (80047f8 <HAL_DMA_Abort+0x23c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a65      	ldr	r2, [pc, #404]	@ (80047fc <HAL_DMA_Abort+0x240>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a64      	ldr	r2, [pc, #400]	@ (8004800 <HAL_DMA_Abort+0x244>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a62      	ldr	r2, [pc, #392]	@ (8004804 <HAL_DMA_Abort+0x248>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a61      	ldr	r2, [pc, #388]	@ (8004808 <HAL_DMA_Abort+0x24c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_DMA_Abort+0xd6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5f      	ldr	r2, [pc, #380]	@ (800480c <HAL_DMA_Abort+0x250>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_DMA_Abort+0xda>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_DMA_Abort+0xdc>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 021e 	bic.w	r2, r2, #30
 80046aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e00a      	b.n	80046da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 020e 	bic.w	r2, r2, #14
 80046d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3c      	ldr	r2, [pc, #240]	@ (80047d0 <HAL_DMA_Abort+0x214>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d072      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3a      	ldr	r2, [pc, #232]	@ (80047d4 <HAL_DMA_Abort+0x218>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d06d      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a39      	ldr	r2, [pc, #228]	@ (80047d8 <HAL_DMA_Abort+0x21c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d068      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a37      	ldr	r2, [pc, #220]	@ (80047dc <HAL_DMA_Abort+0x220>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d063      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a36      	ldr	r2, [pc, #216]	@ (80047e0 <HAL_DMA_Abort+0x224>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d05e      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	@ (80047e4 <HAL_DMA_Abort+0x228>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d059      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <HAL_DMA_Abort+0x22c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d054      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a31      	ldr	r2, [pc, #196]	@ (80047ec <HAL_DMA_Abort+0x230>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04f      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a30      	ldr	r2, [pc, #192]	@ (80047f0 <HAL_DMA_Abort+0x234>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d04a      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2e      	ldr	r2, [pc, #184]	@ (80047f4 <HAL_DMA_Abort+0x238>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d045      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2d      	ldr	r2, [pc, #180]	@ (80047f8 <HAL_DMA_Abort+0x23c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d040      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <HAL_DMA_Abort+0x240>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d03b      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <HAL_DMA_Abort+0x244>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d036      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a28      	ldr	r2, [pc, #160]	@ (8004804 <HAL_DMA_Abort+0x248>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d031      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a27      	ldr	r2, [pc, #156]	@ (8004808 <HAL_DMA_Abort+0x24c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d02c      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	@ (800480c <HAL_DMA_Abort+0x250>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d027      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <HAL_DMA_Abort+0x254>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <HAL_DMA_Abort+0x258>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01d      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_DMA_Abort+0x25c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	@ (800481c <HAL_DMA_Abort+0x260>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_DMA_Abort+0x264>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_DMA_Abort+0x268>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_DMA_Abort+0x26c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Abort+0x20e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <HAL_DMA_Abort+0x270>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d132      	bne.n	8004830 <HAL_DMA_Abort+0x274>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e031      	b.n	8004832 <HAL_DMA_Abort+0x276>
 80047ce:	bf00      	nop
 80047d0:	40020010 	.word	0x40020010
 80047d4:	40020028 	.word	0x40020028
 80047d8:	40020040 	.word	0x40020040
 80047dc:	40020058 	.word	0x40020058
 80047e0:	40020070 	.word	0x40020070
 80047e4:	40020088 	.word	0x40020088
 80047e8:	400200a0 	.word	0x400200a0
 80047ec:	400200b8 	.word	0x400200b8
 80047f0:	40020410 	.word	0x40020410
 80047f4:	40020428 	.word	0x40020428
 80047f8:	40020440 	.word	0x40020440
 80047fc:	40020458 	.word	0x40020458
 8004800:	40020470 	.word	0x40020470
 8004804:	40020488 	.word	0x40020488
 8004808:	400204a0 	.word	0x400204a0
 800480c:	400204b8 	.word	0x400204b8
 8004810:	58025408 	.word	0x58025408
 8004814:	5802541c 	.word	0x5802541c
 8004818:	58025430 	.word	0x58025430
 800481c:	58025444 	.word	0x58025444
 8004820:	58025458 	.word	0x58025458
 8004824:	5802546c 	.word	0x5802546c
 8004828:	58025480 	.word	0x58025480
 800482c:	58025494 	.word	0x58025494
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004844:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6d      	ldr	r2, [pc, #436]	@ (8004a00 <HAL_DMA_Abort+0x444>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04a      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6b      	ldr	r2, [pc, #428]	@ (8004a04 <HAL_DMA_Abort+0x448>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d045      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a08 <HAL_DMA_Abort+0x44c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a68      	ldr	r2, [pc, #416]	@ (8004a0c <HAL_DMA_Abort+0x450>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d03b      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a67      	ldr	r2, [pc, #412]	@ (8004a10 <HAL_DMA_Abort+0x454>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d036      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a65      	ldr	r2, [pc, #404]	@ (8004a14 <HAL_DMA_Abort+0x458>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a64      	ldr	r2, [pc, #400]	@ (8004a18 <HAL_DMA_Abort+0x45c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02c      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a62      	ldr	r2, [pc, #392]	@ (8004a1c <HAL_DMA_Abort+0x460>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d027      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a61      	ldr	r2, [pc, #388]	@ (8004a20 <HAL_DMA_Abort+0x464>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5f      	ldr	r2, [pc, #380]	@ (8004a24 <HAL_DMA_Abort+0x468>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004a28 <HAL_DMA_Abort+0x46c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5c      	ldr	r2, [pc, #368]	@ (8004a2c <HAL_DMA_Abort+0x470>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a30 <HAL_DMA_Abort+0x474>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a59      	ldr	r2, [pc, #356]	@ (8004a34 <HAL_DMA_Abort+0x478>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a58      	ldr	r2, [pc, #352]	@ (8004a38 <HAL_DMA_Abort+0x47c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_Abort+0x32a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a56      	ldr	r2, [pc, #344]	@ (8004a3c <HAL_DMA_Abort+0x480>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <HAL_DMA_Abort+0x33c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e007      	b.n	8004908 <HAL_DMA_Abort+0x34c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004908:	e013      	b.n	8004932 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800490a:	f7fe ff75 	bl	80037f8 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b05      	cmp	r3, #5
 8004916:	d90c      	bls.n	8004932 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2203      	movs	r2, #3
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e12d      	b.n	8004b8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <HAL_DMA_Abort+0x444>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04a      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <HAL_DMA_Abort+0x448>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d045      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2c      	ldr	r2, [pc, #176]	@ (8004a08 <HAL_DMA_Abort+0x44c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_DMA_Abort+0x422>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2a      	ldr	r2, [pc, #168]	@ (8004a0c <HAL_DMA_Abort+0x450>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03b      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a29      	ldr	r2, [pc, #164]	@ (8004a10 <HAL_DMA_Abort+0x454>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a27      	ldr	r2, [pc, #156]	@ (8004a14 <HAL_DMA_Abort+0x458>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_DMA_Abort+0x422>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <HAL_DMA_Abort+0x45c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02c      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_DMA_Abort+0x460>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d027      	beq.n	80049de <HAL_DMA_Abort+0x422>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_DMA_Abort+0x464>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_DMA_Abort+0x422>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <HAL_DMA_Abort+0x468>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <HAL_DMA_Abort+0x46c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <HAL_DMA_Abort+0x470>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004a30 <HAL_DMA_Abort+0x474>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_DMA_Abort+0x478>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004a38 <HAL_DMA_Abort+0x47c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_DMA_Abort+0x422>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <HAL_DMA_Abort+0x480>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <HAL_DMA_Abort+0x426>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_DMA_Abort+0x428>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02b      	beq.n	8004a40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	223f      	movs	r2, #63	@ 0x3f
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e02a      	b.n	8004a56 <HAL_DMA_Abort+0x49a>
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2201      	movs	r2, #1
 8004a50:	409a      	lsls	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a4f      	ldr	r2, [pc, #316]	@ (8004b98 <HAL_DMA_Abort+0x5dc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d072      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a4d      	ldr	r2, [pc, #308]	@ (8004b9c <HAL_DMA_Abort+0x5e0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d06d      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba0 <HAL_DMA_Abort+0x5e4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d068      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba4 <HAL_DMA_Abort+0x5e8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d063      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a49      	ldr	r2, [pc, #292]	@ (8004ba8 <HAL_DMA_Abort+0x5ec>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d05e      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a47      	ldr	r2, [pc, #284]	@ (8004bac <HAL_DMA_Abort+0x5f0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d059      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a46      	ldr	r2, [pc, #280]	@ (8004bb0 <HAL_DMA_Abort+0x5f4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d054      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a44      	ldr	r2, [pc, #272]	@ (8004bb4 <HAL_DMA_Abort+0x5f8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d04f      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a43      	ldr	r2, [pc, #268]	@ (8004bb8 <HAL_DMA_Abort+0x5fc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d04a      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a41      	ldr	r2, [pc, #260]	@ (8004bbc <HAL_DMA_Abort+0x600>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d045      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a40      	ldr	r2, [pc, #256]	@ (8004bc0 <HAL_DMA_Abort+0x604>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d040      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8004bc4 <HAL_DMA_Abort+0x608>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d03b      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc8 <HAL_DMA_Abort+0x60c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d036      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <HAL_DMA_Abort+0x610>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d031      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd0 <HAL_DMA_Abort+0x614>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d02c      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a38      	ldr	r2, [pc, #224]	@ (8004bd4 <HAL_DMA_Abort+0x618>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d027      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <HAL_DMA_Abort+0x61c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a35      	ldr	r2, [pc, #212]	@ (8004bdc <HAL_DMA_Abort+0x620>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a34      	ldr	r2, [pc, #208]	@ (8004be0 <HAL_DMA_Abort+0x624>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <HAL_DMA_Abort+0x628>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a31      	ldr	r2, [pc, #196]	@ (8004be8 <HAL_DMA_Abort+0x62c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004bec <HAL_DMA_Abort+0x630>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <HAL_DMA_Abort+0x634>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_DMA_Abort+0x58a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <HAL_DMA_Abort+0x638>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_DMA_Abort+0x58e>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_DMA_Abort+0x590>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40020010 	.word	0x40020010
 8004b9c:	40020028 	.word	0x40020028
 8004ba0:	40020040 	.word	0x40020040
 8004ba4:	40020058 	.word	0x40020058
 8004ba8:	40020070 	.word	0x40020070
 8004bac:	40020088 	.word	0x40020088
 8004bb0:	400200a0 	.word	0x400200a0
 8004bb4:	400200b8 	.word	0x400200b8
 8004bb8:	40020410 	.word	0x40020410
 8004bbc:	40020428 	.word	0x40020428
 8004bc0:	40020440 	.word	0x40020440
 8004bc4:	40020458 	.word	0x40020458
 8004bc8:	40020470 	.word	0x40020470
 8004bcc:	40020488 	.word	0x40020488
 8004bd0:	400204a0 	.word	0x400204a0
 8004bd4:	400204b8 	.word	0x400204b8
 8004bd8:	58025408 	.word	0x58025408
 8004bdc:	5802541c 	.word	0x5802541c
 8004be0:	58025430 	.word	0x58025430
 8004be4:	58025444 	.word	0x58025444
 8004be8:	58025458 	.word	0x58025458
 8004bec:	5802546c 	.word	0x5802546c
 8004bf0:	58025480 	.word	0x58025480
 8004bf4:	58025494 	.word	0x58025494

08004bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e237      	b.n	800507a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d004      	beq.n	8004c20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2280      	movs	r2, #128	@ 0x80
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e22c      	b.n	800507a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5c      	ldr	r2, [pc, #368]	@ (8004d98 <HAL_DMA_Abort_IT+0x1a0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04a      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004d9c <HAL_DMA_Abort_IT+0x1a4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d045      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a59      	ldr	r2, [pc, #356]	@ (8004da0 <HAL_DMA_Abort_IT+0x1a8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d040      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a58      	ldr	r2, [pc, #352]	@ (8004da4 <HAL_DMA_Abort_IT+0x1ac>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d03b      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a56      	ldr	r2, [pc, #344]	@ (8004da8 <HAL_DMA_Abort_IT+0x1b0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d036      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a55      	ldr	r2, [pc, #340]	@ (8004dac <HAL_DMA_Abort_IT+0x1b4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d031      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a53      	ldr	r2, [pc, #332]	@ (8004db0 <HAL_DMA_Abort_IT+0x1b8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02c      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a52      	ldr	r2, [pc, #328]	@ (8004db4 <HAL_DMA_Abort_IT+0x1bc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d027      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a50      	ldr	r2, [pc, #320]	@ (8004db8 <HAL_DMA_Abort_IT+0x1c0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d022      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4f      	ldr	r2, [pc, #316]	@ (8004dbc <HAL_DMA_Abort_IT+0x1c4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01d      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a4c      	ldr	r2, [pc, #304]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a49      	ldr	r2, [pc, #292]	@ (8004dcc <HAL_DMA_Abort_IT+0x1d4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a47      	ldr	r2, [pc, #284]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0xc8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a46      	ldr	r2, [pc, #280]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Abort_IT+0xcc>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_DMA_Abort_IT+0xce>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8086 	beq.w	8004dd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d98 <HAL_DMA_Abort_IT+0x1a0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04a      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d9c <HAL_DMA_Abort_IT+0x1a4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d045      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <HAL_DMA_Abort_IT+0x1a8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d040      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8004da4 <HAL_DMA_Abort_IT+0x1ac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d03b      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a29      	ldr	r2, [pc, #164]	@ (8004da8 <HAL_DMA_Abort_IT+0x1b0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d036      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a28      	ldr	r2, [pc, #160]	@ (8004dac <HAL_DMA_Abort_IT+0x1b4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d031      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <HAL_DMA_Abort_IT+0x1b8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d02c      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a25      	ldr	r2, [pc, #148]	@ (8004db4 <HAL_DMA_Abort_IT+0x1bc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d027      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a23      	ldr	r2, [pc, #140]	@ (8004db8 <HAL_DMA_Abort_IT+0x1c0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a22      	ldr	r2, [pc, #136]	@ (8004dbc <HAL_DMA_Abort_IT+0x1c4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dcc <HAL_DMA_Abort_IT+0x1d4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x17c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <HAL_DMA_Abort_IT+0x18e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e178      	b.n	8005078 <HAL_DMA_Abort_IT+0x480>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e16f      	b.n	8005078 <HAL_DMA_Abort_IT+0x480>
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	40020040 	.word	0x40020040
 8004da4:	40020058 	.word	0x40020058
 8004da8:	40020070 	.word	0x40020070
 8004dac:	40020088 	.word	0x40020088
 8004db0:	400200a0 	.word	0x400200a0
 8004db4:	400200b8 	.word	0x400200b8
 8004db8:	40020410 	.word	0x40020410
 8004dbc:	40020428 	.word	0x40020428
 8004dc0:	40020440 	.word	0x40020440
 8004dc4:	40020458 	.word	0x40020458
 8004dc8:	40020470 	.word	0x40020470
 8004dcc:	40020488 	.word	0x40020488
 8004dd0:	400204a0 	.word	0x400204a0
 8004dd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 020e 	bic.w	r2, r2, #14
 8004de6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6b      	ldr	r2, [pc, #428]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d045      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a69      	ldr	r2, [pc, #420]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d040      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a68      	ldr	r2, [pc, #416]	@ (8004fac <HAL_DMA_Abort_IT+0x3b4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d03b      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a66      	ldr	r2, [pc, #408]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d036      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a65      	ldr	r2, [pc, #404]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a63      	ldr	r2, [pc, #396]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02c      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a62      	ldr	r2, [pc, #392]	@ (8004fbc <HAL_DMA_Abort_IT+0x3c4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a60      	ldr	r2, [pc, #384]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5f      	ldr	r2, [pc, #380]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01d      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fcc <HAL_DMA_Abort_IT+0x3d4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a59      	ldr	r2, [pc, #356]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a57      	ldr	r2, [pc, #348]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x290>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a56      	ldr	r2, [pc, #344]	@ (8004fdc <HAL_DMA_Abort_IT+0x3e4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_DMA_Abort_IT+0x2a2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e007      	b.n	8004eaa <HAL_DMA_Abort_IT+0x2b2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d072      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d06d      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a39      	ldr	r2, [pc, #228]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d068      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a37      	ldr	r2, [pc, #220]	@ (8004fac <HAL_DMA_Abort_IT+0x3b4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d063      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a36      	ldr	r2, [pc, #216]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d05e      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d059      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a33      	ldr	r2, [pc, #204]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d054      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <HAL_DMA_Abort_IT+0x3c4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04f      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d04a      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d045      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d040      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <HAL_DMA_Abort_IT+0x3d4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d03b      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d036      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a28      	ldr	r2, [pc, #160]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d031      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d02c      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <HAL_DMA_Abort_IT+0x3e4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d027      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a24      	ldr	r2, [pc, #144]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3e8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d022      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3ec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3f0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_DMA_Abort_IT+0x3f4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_DMA_Abort_IT+0x3f8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_DMA_Abort_IT+0x3fc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_DMA_Abort_IT+0x400>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x3a2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a19      	ldr	r2, [pc, #100]	@ (8004ffc <HAL_DMA_Abort_IT+0x404>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d132      	bne.n	8005000 <HAL_DMA_Abort_IT+0x408>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e031      	b.n	8005002 <HAL_DMA_Abort_IT+0x40a>
 8004f9e:	bf00      	nop
 8004fa0:	40020010 	.word	0x40020010
 8004fa4:	40020028 	.word	0x40020028
 8004fa8:	40020040 	.word	0x40020040
 8004fac:	40020058 	.word	0x40020058
 8004fb0:	40020070 	.word	0x40020070
 8004fb4:	40020088 	.word	0x40020088
 8004fb8:	400200a0 	.word	0x400200a0
 8004fbc:	400200b8 	.word	0x400200b8
 8004fc0:	40020410 	.word	0x40020410
 8004fc4:	40020428 	.word	0x40020428
 8004fc8:	40020440 	.word	0x40020440
 8004fcc:	40020458 	.word	0x40020458
 8004fd0:	40020470 	.word	0x40020470
 8004fd4:	40020488 	.word	0x40020488
 8004fd8:	400204a0 	.word	0x400204a0
 8004fdc:	400204b8 	.word	0x400204b8
 8004fe0:	58025408 	.word	0x58025408
 8004fe4:	5802541c 	.word	0x5802541c
 8004fe8:	58025430 	.word	0x58025430
 8004fec:	58025444 	.word	0x58025444
 8004ff0:	58025458 	.word	0x58025458
 8004ff4:	5802546c 	.word	0x5802546c
 8004ff8:	58025480 	.word	0x58025480
 8004ffc:	58025494 	.word	0x58025494
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d028      	beq.n	8005058 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005014:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005034:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800504c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005056:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop

08005084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	@ 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005090:	4b67      	ldr	r3, [pc, #412]	@ (8005230 <HAL_DMA_IRQHandler+0x1ac>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a67      	ldr	r2, [pc, #412]	@ (8005234 <HAL_DMA_IRQHandler+0x1b0>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005238 <HAL_DMA_IRQHandler+0x1b4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04a      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5d      	ldr	r2, [pc, #372]	@ (800523c <HAL_DMA_IRQHandler+0x1b8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d045      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005240 <HAL_DMA_IRQHandler+0x1bc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d040      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005244 <HAL_DMA_IRQHandler+0x1c0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d03b      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a59      	ldr	r2, [pc, #356]	@ (8005248 <HAL_DMA_IRQHandler+0x1c4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d036      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a57      	ldr	r2, [pc, #348]	@ (800524c <HAL_DMA_IRQHandler+0x1c8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d031      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a56      	ldr	r2, [pc, #344]	@ (8005250 <HAL_DMA_IRQHandler+0x1cc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d02c      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a54      	ldr	r2, [pc, #336]	@ (8005254 <HAL_DMA_IRQHandler+0x1d0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a53      	ldr	r2, [pc, #332]	@ (8005258 <HAL_DMA_IRQHandler+0x1d4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a51      	ldr	r2, [pc, #324]	@ (800525c <HAL_DMA_IRQHandler+0x1d8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a50      	ldr	r2, [pc, #320]	@ (8005260 <HAL_DMA_IRQHandler+0x1dc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4e      	ldr	r2, [pc, #312]	@ (8005264 <HAL_DMA_IRQHandler+0x1e0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a4d      	ldr	r2, [pc, #308]	@ (8005268 <HAL_DMA_IRQHandler+0x1e4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a4b      	ldr	r2, [pc, #300]	@ (800526c <HAL_DMA_IRQHandler+0x1e8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4a      	ldr	r2, [pc, #296]	@ (8005270 <HAL_DMA_IRQHandler+0x1ec>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_DMA_IRQHandler+0xd2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a48      	ldr	r2, [pc, #288]	@ (8005274 <HAL_DMA_IRQHandler+0x1f0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <HAL_DMA_IRQHandler+0xd6>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_DMA_IRQHandler+0xd8>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 842b 	beq.w	80059b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2208      	movs	r2, #8
 800516c:	409a      	lsls	r2, r3
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a2 	beq.w	80052bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2e      	ldr	r2, [pc, #184]	@ (8005238 <HAL_DMA_IRQHandler+0x1b4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d04a      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2d      	ldr	r2, [pc, #180]	@ (800523c <HAL_DMA_IRQHandler+0x1b8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d045      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2b      	ldr	r2, [pc, #172]	@ (8005240 <HAL_DMA_IRQHandler+0x1bc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d040      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2a      	ldr	r2, [pc, #168]	@ (8005244 <HAL_DMA_IRQHandler+0x1c0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d03b      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a28      	ldr	r2, [pc, #160]	@ (8005248 <HAL_DMA_IRQHandler+0x1c4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d036      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a27      	ldr	r2, [pc, #156]	@ (800524c <HAL_DMA_IRQHandler+0x1c8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d031      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a25      	ldr	r2, [pc, #148]	@ (8005250 <HAL_DMA_IRQHandler+0x1cc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02c      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a24      	ldr	r2, [pc, #144]	@ (8005254 <HAL_DMA_IRQHandler+0x1d0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d027      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a22      	ldr	r2, [pc, #136]	@ (8005258 <HAL_DMA_IRQHandler+0x1d4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a21      	ldr	r2, [pc, #132]	@ (800525c <HAL_DMA_IRQHandler+0x1d8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005260 <HAL_DMA_IRQHandler+0x1dc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005264 <HAL_DMA_IRQHandler+0x1e0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <HAL_DMA_IRQHandler+0x1e4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1b      	ldr	r2, [pc, #108]	@ (800526c <HAL_DMA_IRQHandler+0x1e8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <HAL_DMA_IRQHandler+0x1ec>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_DMA_IRQHandler+0x194>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a18      	ldr	r2, [pc, #96]	@ (8005274 <HAL_DMA_IRQHandler+0x1f0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d12f      	bne.n	8005278 <HAL_DMA_IRQHandler+0x1f4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf14      	ite	ne
 8005226:	2301      	movne	r3, #1
 8005228:	2300      	moveq	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	e02e      	b.n	800528c <HAL_DMA_IRQHandler+0x208>
 800522e:	bf00      	nop
 8005230:	24000014 	.word	0x24000014
 8005234:	1b4e81b5 	.word	0x1b4e81b5
 8005238:	40020010 	.word	0x40020010
 800523c:	40020028 	.word	0x40020028
 8005240:	40020040 	.word	0x40020040
 8005244:	40020058 	.word	0x40020058
 8005248:	40020070 	.word	0x40020070
 800524c:	40020088 	.word	0x40020088
 8005250:	400200a0 	.word	0x400200a0
 8005254:	400200b8 	.word	0x400200b8
 8005258:	40020410 	.word	0x40020410
 800525c:	40020428 	.word	0x40020428
 8005260:	40020440 	.word	0x40020440
 8005264:	40020458 	.word	0x40020458
 8005268:	40020470 	.word	0x40020470
 800526c:	40020488 	.word	0x40020488
 8005270:	400204a0 	.word	0x400204a0
 8005274:	400204b8 	.word	0x400204b8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2208      	movs	r2, #8
 80052aa:	409a      	lsls	r2, r3
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d06e      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a69      	ldr	r2, [pc, #420]	@ (800547c <HAL_DMA_IRQHandler+0x3f8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a67      	ldr	r2, [pc, #412]	@ (8005480 <HAL_DMA_IRQHandler+0x3fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a66      	ldr	r2, [pc, #408]	@ (8005484 <HAL_DMA_IRQHandler+0x400>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a64      	ldr	r2, [pc, #400]	@ (8005488 <HAL_DMA_IRQHandler+0x404>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a63      	ldr	r2, [pc, #396]	@ (800548c <HAL_DMA_IRQHandler+0x408>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a61      	ldr	r2, [pc, #388]	@ (8005490 <HAL_DMA_IRQHandler+0x40c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a60      	ldr	r2, [pc, #384]	@ (8005494 <HAL_DMA_IRQHandler+0x410>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5e      	ldr	r2, [pc, #376]	@ (8005498 <HAL_DMA_IRQHandler+0x414>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5d      	ldr	r2, [pc, #372]	@ (800549c <HAL_DMA_IRQHandler+0x418>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5b      	ldr	r2, [pc, #364]	@ (80054a0 <HAL_DMA_IRQHandler+0x41c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a5a      	ldr	r2, [pc, #360]	@ (80054a4 <HAL_DMA_IRQHandler+0x420>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a58      	ldr	r2, [pc, #352]	@ (80054a8 <HAL_DMA_IRQHandler+0x424>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a57      	ldr	r2, [pc, #348]	@ (80054ac <HAL_DMA_IRQHandler+0x428>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a55      	ldr	r2, [pc, #340]	@ (80054b0 <HAL_DMA_IRQHandler+0x42c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a54      	ldr	r2, [pc, #336]	@ (80054b4 <HAL_DMA_IRQHandler+0x430>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2ee>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a52      	ldr	r2, [pc, #328]	@ (80054b8 <HAL_DMA_IRQHandler+0x434>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d10a      	bne.n	8005388 <HAL_DMA_IRQHandler+0x304>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e003      	b.n	8005390 <HAL_DMA_IRQHandler+0x30c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00d      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2204      	movs	r2, #4
 80053ba:	409a      	lsls	r2, r3
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 808f 	beq.w	80054e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2c      	ldr	r2, [pc, #176]	@ (800547c <HAL_DMA_IRQHandler+0x3f8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d04a      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <HAL_DMA_IRQHandler+0x3fc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d045      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a29      	ldr	r2, [pc, #164]	@ (8005484 <HAL_DMA_IRQHandler+0x400>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d040      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a27      	ldr	r2, [pc, #156]	@ (8005488 <HAL_DMA_IRQHandler+0x404>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d03b      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a26      	ldr	r2, [pc, #152]	@ (800548c <HAL_DMA_IRQHandler+0x408>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d036      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a24      	ldr	r2, [pc, #144]	@ (8005490 <HAL_DMA_IRQHandler+0x40c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d031      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a23      	ldr	r2, [pc, #140]	@ (8005494 <HAL_DMA_IRQHandler+0x410>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d02c      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a21      	ldr	r2, [pc, #132]	@ (8005498 <HAL_DMA_IRQHandler+0x414>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d027      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a20      	ldr	r2, [pc, #128]	@ (800549c <HAL_DMA_IRQHandler+0x418>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d022      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_DMA_IRQHandler+0x41c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01d      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <HAL_DMA_IRQHandler+0x420>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d018      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <HAL_DMA_IRQHandler+0x424>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1a      	ldr	r2, [pc, #104]	@ (80054ac <HAL_DMA_IRQHandler+0x428>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_DMA_IRQHandler+0x42c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <HAL_DMA_IRQHandler+0x430>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_DMA_IRQHandler+0x3e2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <HAL_DMA_IRQHandler+0x434>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d12a      	bne.n	80054bc <HAL_DMA_IRQHandler+0x438>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e023      	b.n	80054c4 <HAL_DMA_IRQHandler+0x440>
 800547c:	40020010 	.word	0x40020010
 8005480:	40020028 	.word	0x40020028
 8005484:	40020040 	.word	0x40020040
 8005488:	40020058 	.word	0x40020058
 800548c:	40020070 	.word	0x40020070
 8005490:	40020088 	.word	0x40020088
 8005494:	400200a0 	.word	0x400200a0
 8005498:	400200b8 	.word	0x400200b8
 800549c:	40020410 	.word	0x40020410
 80054a0:	40020428 	.word	0x40020428
 80054a4:	40020440 	.word	0x40020440
 80054a8:	40020458 	.word	0x40020458
 80054ac:	40020470 	.word	0x40020470
 80054b0:	40020488 	.word	0x40020488
 80054b4:	400204a0 	.word	0x400204a0
 80054b8:	400204b8 	.word	0x400204b8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2204      	movs	r2, #4
 80054d2:	409a      	lsls	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	f043 0204 	orr.w	r2, r3, #4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2210      	movs	r2, #16
 80054ee:	409a      	lsls	r2, r3
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a6 	beq.w	8005646 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a85      	ldr	r2, [pc, #532]	@ (8005714 <HAL_DMA_IRQHandler+0x690>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d04a      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a83      	ldr	r2, [pc, #524]	@ (8005718 <HAL_DMA_IRQHandler+0x694>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d045      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a82      	ldr	r2, [pc, #520]	@ (800571c <HAL_DMA_IRQHandler+0x698>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a80      	ldr	r2, [pc, #512]	@ (8005720 <HAL_DMA_IRQHandler+0x69c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d03b      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7f      	ldr	r2, [pc, #508]	@ (8005724 <HAL_DMA_IRQHandler+0x6a0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d036      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a7d      	ldr	r2, [pc, #500]	@ (8005728 <HAL_DMA_IRQHandler+0x6a4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d031      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a7c      	ldr	r2, [pc, #496]	@ (800572c <HAL_DMA_IRQHandler+0x6a8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02c      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a7a      	ldr	r2, [pc, #488]	@ (8005730 <HAL_DMA_IRQHandler+0x6ac>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d027      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a79      	ldr	r2, [pc, #484]	@ (8005734 <HAL_DMA_IRQHandler+0x6b0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a77      	ldr	r2, [pc, #476]	@ (8005738 <HAL_DMA_IRQHandler+0x6b4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a76      	ldr	r2, [pc, #472]	@ (800573c <HAL_DMA_IRQHandler+0x6b8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a74      	ldr	r2, [pc, #464]	@ (8005740 <HAL_DMA_IRQHandler+0x6bc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a73      	ldr	r2, [pc, #460]	@ (8005744 <HAL_DMA_IRQHandler+0x6c0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a71      	ldr	r2, [pc, #452]	@ (8005748 <HAL_DMA_IRQHandler+0x6c4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a70      	ldr	r2, [pc, #448]	@ (800574c <HAL_DMA_IRQHandler+0x6c8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_DMA_IRQHandler+0x516>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a6e      	ldr	r2, [pc, #440]	@ (8005750 <HAL_DMA_IRQHandler+0x6cc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10a      	bne.n	80055b0 <HAL_DMA_IRQHandler+0x52c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e009      	b.n	80055c4 <HAL_DMA_IRQHandler+0x540>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d03e      	beq.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2210      	movs	r2, #16
 80055d2:	409a      	lsls	r2, r3
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d024      	beq.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	e01f      	b.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e016      	b.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0208 	bic.w	r2, r2, #8
 8005634:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2220      	movs	r2, #32
 8005650:	409a      	lsls	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8110 	beq.w	800587c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a2c      	ldr	r2, [pc, #176]	@ (8005714 <HAL_DMA_IRQHandler+0x690>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d04a      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2b      	ldr	r2, [pc, #172]	@ (8005718 <HAL_DMA_IRQHandler+0x694>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d045      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a29      	ldr	r2, [pc, #164]	@ (800571c <HAL_DMA_IRQHandler+0x698>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d040      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a28      	ldr	r2, [pc, #160]	@ (8005720 <HAL_DMA_IRQHandler+0x69c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d03b      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a26      	ldr	r2, [pc, #152]	@ (8005724 <HAL_DMA_IRQHandler+0x6a0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d036      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a25      	ldr	r2, [pc, #148]	@ (8005728 <HAL_DMA_IRQHandler+0x6a4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d031      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a23      	ldr	r2, [pc, #140]	@ (800572c <HAL_DMA_IRQHandler+0x6a8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02c      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a22      	ldr	r2, [pc, #136]	@ (8005730 <HAL_DMA_IRQHandler+0x6ac>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d027      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a20      	ldr	r2, [pc, #128]	@ (8005734 <HAL_DMA_IRQHandler+0x6b0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d022      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <HAL_DMA_IRQHandler+0x6b4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d01d      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	@ (800573c <HAL_DMA_IRQHandler+0x6b8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d018      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <HAL_DMA_IRQHandler+0x6bc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005744 <HAL_DMA_IRQHandler+0x6c0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a19      	ldr	r2, [pc, #100]	@ (8005748 <HAL_DMA_IRQHandler+0x6c4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a17      	ldr	r2, [pc, #92]	@ (800574c <HAL_DMA_IRQHandler+0x6c8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_DMA_IRQHandler+0x678>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <HAL_DMA_IRQHandler+0x6cc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d12b      	bne.n	8005754 <HAL_DMA_IRQHandler+0x6d0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	e02a      	b.n	8005768 <HAL_DMA_IRQHandler+0x6e4>
 8005712:	bf00      	nop
 8005714:	40020010 	.word	0x40020010
 8005718:	40020028 	.word	0x40020028
 800571c:	40020040 	.word	0x40020040
 8005720:	40020058 	.word	0x40020058
 8005724:	40020070 	.word	0x40020070
 8005728:	40020088 	.word	0x40020088
 800572c:	400200a0 	.word	0x400200a0
 8005730:	400200b8 	.word	0x400200b8
 8005734:	40020410 	.word	0x40020410
 8005738:	40020428 	.word	0x40020428
 800573c:	40020440 	.word	0x40020440
 8005740:	40020458 	.word	0x40020458
 8005744:	40020470 	.word	0x40020470
 8005748:	40020488 	.word	0x40020488
 800574c:	400204a0 	.word	0x400204a0
 8005750:	400204b8 	.word	0x400204b8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8087 	beq.w	800587c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2220      	movs	r2, #32
 8005778:	409a      	lsls	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b04      	cmp	r3, #4
 8005788:	d139      	bne.n	80057fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0216 	bic.w	r2, r2, #22
 8005798:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <HAL_DMA_IRQHandler+0x736>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0208 	bic.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	223f      	movs	r2, #63	@ 0x3f
 80057d4:	409a      	lsls	r2, r3
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 834a 	beq.w	8005e88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
          }
          return;
 80057fc:	e344      	b.n	8005e88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d018      	beq.n	800583e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02c      	beq.n	800587c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
 800582a:	e027      	b.n	800587c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d023      	beq.n	800587c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	e01e      	b.n	800587c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10f      	bne.n	800586c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0210 	bic.w	r2, r2, #16
 800585a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8306 	beq.w	8005e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8088 	beq.w	80059a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2204      	movs	r2, #4
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7a      	ldr	r2, [pc, #488]	@ (8005a8c <HAL_DMA_IRQHandler+0xa08>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d04a      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a79      	ldr	r2, [pc, #484]	@ (8005a90 <HAL_DMA_IRQHandler+0xa0c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d045      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a77      	ldr	r2, [pc, #476]	@ (8005a94 <HAL_DMA_IRQHandler+0xa10>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d040      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a76      	ldr	r2, [pc, #472]	@ (8005a98 <HAL_DMA_IRQHandler+0xa14>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d03b      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a74      	ldr	r2, [pc, #464]	@ (8005a9c <HAL_DMA_IRQHandler+0xa18>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d036      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a73      	ldr	r2, [pc, #460]	@ (8005aa0 <HAL_DMA_IRQHandler+0xa1c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d031      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a71      	ldr	r2, [pc, #452]	@ (8005aa4 <HAL_DMA_IRQHandler+0xa20>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02c      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a70      	ldr	r2, [pc, #448]	@ (8005aa8 <HAL_DMA_IRQHandler+0xa24>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d027      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a6e      	ldr	r2, [pc, #440]	@ (8005aac <HAL_DMA_IRQHandler+0xa28>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6d      	ldr	r2, [pc, #436]	@ (8005ab0 <HAL_DMA_IRQHandler+0xa2c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d01d      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a6b      	ldr	r2, [pc, #428]	@ (8005ab4 <HAL_DMA_IRQHandler+0xa30>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ab8 <HAL_DMA_IRQHandler+0xa34>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a68      	ldr	r2, [pc, #416]	@ (8005abc <HAL_DMA_IRQHandler+0xa38>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a67      	ldr	r2, [pc, #412]	@ (8005ac0 <HAL_DMA_IRQHandler+0xa3c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a65      	ldr	r2, [pc, #404]	@ (8005ac4 <HAL_DMA_IRQHandler+0xa40>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_DMA_IRQHandler+0x8b8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a64      	ldr	r2, [pc, #400]	@ (8005ac8 <HAL_DMA_IRQHandler+0xa44>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <HAL_DMA_IRQHandler+0x8ca>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e007      	b.n	800595e <HAL_DMA_IRQHandler+0x8da>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005966:	429a      	cmp	r2, r3
 8005968:	d307      	bcc.n	800597a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f2      	bne.n	800595e <HAL_DMA_IRQHandler+0x8da>
 8005978:	e000      	b.n	800597c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800597a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005992:	e003      	b.n	800599c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8272 	beq.w	8005e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	e26c      	b.n	8005e92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a43      	ldr	r2, [pc, #268]	@ (8005acc <HAL_DMA_IRQHandler+0xa48>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a42      	ldr	r2, [pc, #264]	@ (8005ad0 <HAL_DMA_IRQHandler+0xa4c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a40      	ldr	r2, [pc, #256]	@ (8005ad4 <HAL_DMA_IRQHandler+0xa50>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad8 <HAL_DMA_IRQHandler+0xa54>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3d      	ldr	r2, [pc, #244]	@ (8005adc <HAL_DMA_IRQHandler+0xa58>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae0 <HAL_DMA_IRQHandler+0xa5c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ae4 <HAL_DMA_IRQHandler+0xa60>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x984>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a39      	ldr	r2, [pc, #228]	@ (8005ae8 <HAL_DMA_IRQHandler+0xa64>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x988>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_DMA_IRQHandler+0x98a>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 823f 	beq.w	8005e92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2204      	movs	r2, #4
 8005a26:	409a      	lsls	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80cd 	beq.w	8005bcc <HAL_DMA_IRQHandler+0xb48>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80c7 	beq.w	8005bcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2204      	movs	r2, #4
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d049      	beq.n	8005aec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8210 	beq.w	8005e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a74:	e20a      	b.n	8005e8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8206 	beq.w	8005e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a88:	e200      	b.n	8005e8c <HAL_DMA_IRQHandler+0xe08>
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d160      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a7f      	ldr	r2, [pc, #508]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc74>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04a      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a7d      	ldr	r2, [pc, #500]	@ (8005cfc <HAL_DMA_IRQHandler+0xc78>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d045      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d00 <HAL_DMA_IRQHandler+0xc7c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d040      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a7a      	ldr	r2, [pc, #488]	@ (8005d04 <HAL_DMA_IRQHandler+0xc80>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d03b      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a79      	ldr	r2, [pc, #484]	@ (8005d08 <HAL_DMA_IRQHandler+0xc84>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d036      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a77      	ldr	r2, [pc, #476]	@ (8005d0c <HAL_DMA_IRQHandler+0xc88>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a76      	ldr	r2, [pc, #472]	@ (8005d10 <HAL_DMA_IRQHandler+0xc8c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a74      	ldr	r2, [pc, #464]	@ (8005d14 <HAL_DMA_IRQHandler+0xc90>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d027      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a73      	ldr	r2, [pc, #460]	@ (8005d18 <HAL_DMA_IRQHandler+0xc94>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a71      	ldr	r2, [pc, #452]	@ (8005d1c <HAL_DMA_IRQHandler+0xc98>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a70      	ldr	r2, [pc, #448]	@ (8005d20 <HAL_DMA_IRQHandler+0xc9c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a6e      	ldr	r2, [pc, #440]	@ (8005d24 <HAL_DMA_IRQHandler+0xca0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6d      	ldr	r2, [pc, #436]	@ (8005d28 <HAL_DMA_IRQHandler+0xca4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d2c <HAL_DMA_IRQHandler+0xca8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6a      	ldr	r2, [pc, #424]	@ (8005d30 <HAL_DMA_IRQHandler+0xcac>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xb12>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a68      	ldr	r2, [pc, #416]	@ (8005d34 <HAL_DMA_IRQHandler+0xcb0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d108      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0xb24>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0208 	bic.w	r2, r2, #8
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e007      	b.n	8005bb8 <HAL_DMA_IRQHandler+0xb34>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8165 	beq.w	8005e8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bca:	e15f      	b.n	8005e8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80c5 	beq.w	8005d6c <HAL_DMA_IRQHandler+0xce8>
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80bf 	beq.w	8005d6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d018      	beq.n	8005c3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 813a 	beq.w	8005e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c24:	e134      	b.n	8005e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8130 	beq.w	8005e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c38:	e12a      	b.n	8005e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8089 	bne.w	8005d58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc74>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04a      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a29      	ldr	r2, [pc, #164]	@ (8005cfc <HAL_DMA_IRQHandler+0xc78>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d045      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a28      	ldr	r2, [pc, #160]	@ (8005d00 <HAL_DMA_IRQHandler+0xc7c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <HAL_DMA_IRQHandler+0xc80>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a25      	ldr	r2, [pc, #148]	@ (8005d08 <HAL_DMA_IRQHandler+0xc84>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d036      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	@ (8005d0c <HAL_DMA_IRQHandler+0xc88>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d031      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <HAL_DMA_IRQHandler+0xc8c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a20      	ldr	r2, [pc, #128]	@ (8005d14 <HAL_DMA_IRQHandler+0xc90>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d027      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <HAL_DMA_IRQHandler+0xc94>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d022      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <HAL_DMA_IRQHandler+0xc98>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <HAL_DMA_IRQHandler+0xc9c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d018      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_DMA_IRQHandler+0xca0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <HAL_DMA_IRQHandler+0xca4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <HAL_DMA_IRQHandler+0xca8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <HAL_DMA_IRQHandler+0xcac>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xc62>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	@ (8005d34 <HAL_DMA_IRQHandler+0xcb0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d128      	bne.n	8005d38 <HAL_DMA_IRQHandler+0xcb4>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0214 	bic.w	r2, r2, #20
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e027      	b.n	8005d48 <HAL_DMA_IRQHandler+0xcc4>
 8005cf8:	40020010 	.word	0x40020010
 8005cfc:	40020028 	.word	0x40020028
 8005d00:	40020040 	.word	0x40020040
 8005d04:	40020058 	.word	0x40020058
 8005d08:	40020070 	.word	0x40020070
 8005d0c:	40020088 	.word	0x40020088
 8005d10:	400200a0 	.word	0x400200a0
 8005d14:	400200b8 	.word	0x400200b8
 8005d18:	40020410 	.word	0x40020410
 8005d1c:	40020428 	.word	0x40020428
 8005d20:	40020440 	.word	0x40020440
 8005d24:	40020458 	.word	0x40020458
 8005d28:	40020470 	.word	0x40020470
 8005d2c:	40020488 	.word	0x40020488
 8005d30:	400204a0 	.word	0x400204a0
 8005d34:	400204b8 	.word	0x400204b8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 020a 	bic.w	r2, r2, #10
 8005d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8097 	beq.w	8005e90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d6a:	e091      	b.n	8005e90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2208      	movs	r2, #8
 8005d76:	409a      	lsls	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8088 	beq.w	8005e92 <HAL_DMA_IRQHandler+0xe0e>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8082 	beq.w	8005e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a41      	ldr	r2, [pc, #260]	@ (8005e98 <HAL_DMA_IRQHandler+0xe14>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d04a      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e9c <HAL_DMA_IRQHandler+0xe18>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d045      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea0 <HAL_DMA_IRQHandler+0xe1c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d040      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea4 <HAL_DMA_IRQHandler+0xe20>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d03b      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a3b      	ldr	r2, [pc, #236]	@ (8005ea8 <HAL_DMA_IRQHandler+0xe24>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d036      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a39      	ldr	r2, [pc, #228]	@ (8005eac <HAL_DMA_IRQHandler+0xe28>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d031      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a38      	ldr	r2, [pc, #224]	@ (8005eb0 <HAL_DMA_IRQHandler+0xe2c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d02c      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a36      	ldr	r2, [pc, #216]	@ (8005eb4 <HAL_DMA_IRQHandler+0xe30>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d027      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a35      	ldr	r2, [pc, #212]	@ (8005eb8 <HAL_DMA_IRQHandler+0xe34>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d022      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a33      	ldr	r2, [pc, #204]	@ (8005ebc <HAL_DMA_IRQHandler+0xe38>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a32      	ldr	r2, [pc, #200]	@ (8005ec0 <HAL_DMA_IRQHandler+0xe3c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d018      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a30      	ldr	r2, [pc, #192]	@ (8005ec4 <HAL_DMA_IRQHandler+0xe40>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec8 <HAL_DMA_IRQHandler+0xe44>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2d      	ldr	r2, [pc, #180]	@ (8005ecc <HAL_DMA_IRQHandler+0xe48>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed0 <HAL_DMA_IRQHandler+0xe4c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xdaa>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed4 <HAL_DMA_IRQHandler+0xe50>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d108      	bne.n	8005e40 <HAL_DMA_IRQHandler+0xdbc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 021c 	bic.w	r2, r2, #28
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e007      	b.n	8005e50 <HAL_DMA_IRQHandler+0xdcc>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 020e 	bic.w	r2, r2, #14
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	2201      	movs	r2, #1
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
 8005e86:	e004      	b.n	8005e92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e88:	bf00      	nop
 8005e8a:	e002      	b.n	8005e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e8c:	bf00      	nop
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e92:	3728      	adds	r7, #40	@ 0x28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8

08005ed8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a7f      	ldr	r2, [pc, #508]	@ (80060f4 <DMA_SetConfig+0x21c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d072      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a7d      	ldr	r2, [pc, #500]	@ (80060f8 <DMA_SetConfig+0x220>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d06d      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80060fc <DMA_SetConfig+0x224>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d068      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a7a      	ldr	r2, [pc, #488]	@ (8006100 <DMA_SetConfig+0x228>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d063      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a79      	ldr	r2, [pc, #484]	@ (8006104 <DMA_SetConfig+0x22c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d05e      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a77      	ldr	r2, [pc, #476]	@ (8006108 <DMA_SetConfig+0x230>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d059      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a76      	ldr	r2, [pc, #472]	@ (800610c <DMA_SetConfig+0x234>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d054      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a74      	ldr	r2, [pc, #464]	@ (8006110 <DMA_SetConfig+0x238>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d04f      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a73      	ldr	r2, [pc, #460]	@ (8006114 <DMA_SetConfig+0x23c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04a      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a71      	ldr	r2, [pc, #452]	@ (8006118 <DMA_SetConfig+0x240>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d045      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a70      	ldr	r2, [pc, #448]	@ (800611c <DMA_SetConfig+0x244>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d040      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	@ (8006120 <DMA_SetConfig+0x248>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d03b      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006124 <DMA_SetConfig+0x24c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d036      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a6b      	ldr	r2, [pc, #428]	@ (8006128 <DMA_SetConfig+0x250>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d031      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6a      	ldr	r2, [pc, #424]	@ (800612c <DMA_SetConfig+0x254>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02c      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a68      	ldr	r2, [pc, #416]	@ (8006130 <DMA_SetConfig+0x258>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d027      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a67      	ldr	r2, [pc, #412]	@ (8006134 <DMA_SetConfig+0x25c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a65      	ldr	r2, [pc, #404]	@ (8006138 <DMA_SetConfig+0x260>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a64      	ldr	r2, [pc, #400]	@ (800613c <DMA_SetConfig+0x264>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a62      	ldr	r2, [pc, #392]	@ (8006140 <DMA_SetConfig+0x268>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a61      	ldr	r2, [pc, #388]	@ (8006144 <DMA_SetConfig+0x26c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8006148 <DMA_SetConfig+0x270>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800614c <DMA_SetConfig+0x274>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8006150 <DMA_SetConfig+0x278>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <DMA_SetConfig+0x10e>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <DMA_SetConfig+0x110>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ff4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006006:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a39      	ldr	r2, [pc, #228]	@ (80060f4 <DMA_SetConfig+0x21c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d04a      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a38      	ldr	r2, [pc, #224]	@ (80060f8 <DMA_SetConfig+0x220>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d045      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a36      	ldr	r2, [pc, #216]	@ (80060fc <DMA_SetConfig+0x224>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d040      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a35      	ldr	r2, [pc, #212]	@ (8006100 <DMA_SetConfig+0x228>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d03b      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a33      	ldr	r2, [pc, #204]	@ (8006104 <DMA_SetConfig+0x22c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d036      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a32      	ldr	r2, [pc, #200]	@ (8006108 <DMA_SetConfig+0x230>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d031      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	@ (800610c <DMA_SetConfig+0x234>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02c      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2f      	ldr	r2, [pc, #188]	@ (8006110 <DMA_SetConfig+0x238>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d027      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2d      	ldr	r2, [pc, #180]	@ (8006114 <DMA_SetConfig+0x23c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d022      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2c      	ldr	r2, [pc, #176]	@ (8006118 <DMA_SetConfig+0x240>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d01d      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2a      	ldr	r2, [pc, #168]	@ (800611c <DMA_SetConfig+0x244>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d018      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a29      	ldr	r2, [pc, #164]	@ (8006120 <DMA_SetConfig+0x248>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a27      	ldr	r2, [pc, #156]	@ (8006124 <DMA_SetConfig+0x24c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a26      	ldr	r2, [pc, #152]	@ (8006128 <DMA_SetConfig+0x250>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a24      	ldr	r2, [pc, #144]	@ (800612c <DMA_SetConfig+0x254>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <DMA_SetConfig+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a23      	ldr	r2, [pc, #140]	@ (8006130 <DMA_SetConfig+0x258>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <DMA_SetConfig+0x1d4>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <DMA_SetConfig+0x1d6>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d059      	beq.n	8006166 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	223f      	movs	r2, #63	@ 0x3f
 80060bc:	409a      	lsls	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d138      	bne.n	8006154 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060f2:	e086      	b.n	8006202 <DMA_SetConfig+0x32a>
 80060f4:	40020010 	.word	0x40020010
 80060f8:	40020028 	.word	0x40020028
 80060fc:	40020040 	.word	0x40020040
 8006100:	40020058 	.word	0x40020058
 8006104:	40020070 	.word	0x40020070
 8006108:	40020088 	.word	0x40020088
 800610c:	400200a0 	.word	0x400200a0
 8006110:	400200b8 	.word	0x400200b8
 8006114:	40020410 	.word	0x40020410
 8006118:	40020428 	.word	0x40020428
 800611c:	40020440 	.word	0x40020440
 8006120:	40020458 	.word	0x40020458
 8006124:	40020470 	.word	0x40020470
 8006128:	40020488 	.word	0x40020488
 800612c:	400204a0 	.word	0x400204a0
 8006130:	400204b8 	.word	0x400204b8
 8006134:	58025408 	.word	0x58025408
 8006138:	5802541c 	.word	0x5802541c
 800613c:	58025430 	.word	0x58025430
 8006140:	58025444 	.word	0x58025444
 8006144:	58025458 	.word	0x58025458
 8006148:	5802546c 	.word	0x5802546c
 800614c:	58025480 	.word	0x58025480
 8006150:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]
}
 8006164:	e04d      	b.n	8006202 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a29      	ldr	r2, [pc, #164]	@ (8006210 <DMA_SetConfig+0x338>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d022      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <DMA_SetConfig+0x33c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01d      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <DMA_SetConfig+0x340>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d018      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a24      	ldr	r2, [pc, #144]	@ (800621c <DMA_SetConfig+0x344>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a23      	ldr	r2, [pc, #140]	@ (8006220 <DMA_SetConfig+0x348>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00e      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <DMA_SetConfig+0x34c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a20      	ldr	r2, [pc, #128]	@ (8006228 <DMA_SetConfig+0x350>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <DMA_SetConfig+0x2de>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1e      	ldr	r2, [pc, #120]	@ (800622c <DMA_SetConfig+0x354>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <DMA_SetConfig+0x2e2>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <DMA_SetConfig+0x2e4>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2201      	movs	r2, #1
 80061ca:	409a      	lsls	r2, r3
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	d108      	bne.n	80061f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	60da      	str	r2, [r3, #12]
}
 80061f0:	e007      	b.n	8006202 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	58025408 	.word	0x58025408
 8006214:	5802541c 	.word	0x5802541c
 8006218:	58025430 	.word	0x58025430
 800621c:	58025444 	.word	0x58025444
 8006220:	58025458 	.word	0x58025458
 8006224:	5802546c 	.word	0x5802546c
 8006228:	58025480 	.word	0x58025480
 800622c:	58025494 	.word	0x58025494

08006230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a42      	ldr	r2, [pc, #264]	@ (8006348 <DMA_CalcBaseAndBitshift+0x118>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04a      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a41      	ldr	r2, [pc, #260]	@ (800634c <DMA_CalcBaseAndBitshift+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d045      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a3f      	ldr	r2, [pc, #252]	@ (8006350 <DMA_CalcBaseAndBitshift+0x120>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d040      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3e      	ldr	r2, [pc, #248]	@ (8006354 <DMA_CalcBaseAndBitshift+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d03b      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3c      	ldr	r2, [pc, #240]	@ (8006358 <DMA_CalcBaseAndBitshift+0x128>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d036      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3b      	ldr	r2, [pc, #236]	@ (800635c <DMA_CalcBaseAndBitshift+0x12c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d031      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a39      	ldr	r2, [pc, #228]	@ (8006360 <DMA_CalcBaseAndBitshift+0x130>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d02c      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a38      	ldr	r2, [pc, #224]	@ (8006364 <DMA_CalcBaseAndBitshift+0x134>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d027      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a36      	ldr	r2, [pc, #216]	@ (8006368 <DMA_CalcBaseAndBitshift+0x138>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d022      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a35      	ldr	r2, [pc, #212]	@ (800636c <DMA_CalcBaseAndBitshift+0x13c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d01d      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a33      	ldr	r2, [pc, #204]	@ (8006370 <DMA_CalcBaseAndBitshift+0x140>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d018      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a32      	ldr	r2, [pc, #200]	@ (8006374 <DMA_CalcBaseAndBitshift+0x144>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d013      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a30      	ldr	r2, [pc, #192]	@ (8006378 <DMA_CalcBaseAndBitshift+0x148>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00e      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2f      	ldr	r2, [pc, #188]	@ (800637c <DMA_CalcBaseAndBitshift+0x14c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d009      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006380 <DMA_CalcBaseAndBitshift+0x150>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xa8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006384 <DMA_CalcBaseAndBitshift+0x154>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d101      	bne.n	80062dc <DMA_CalcBaseAndBitshift+0xac>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <DMA_CalcBaseAndBitshift+0xae>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d024      	beq.n	800632c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	3b10      	subs	r3, #16
 80062ea:	4a27      	ldr	r2, [pc, #156]	@ (8006388 <DMA_CalcBaseAndBitshift+0x158>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	4a24      	ldr	r2, [pc, #144]	@ (800638c <DMA_CalcBaseAndBitshift+0x15c>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d908      	bls.n	800631c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	4b1f      	ldr	r3, [pc, #124]	@ (8006390 <DMA_CalcBaseAndBitshift+0x160>)
 8006312:	4013      	ands	r3, r2
 8006314:	1d1a      	adds	r2, r3, #4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	659a      	str	r2, [r3, #88]	@ 0x58
 800631a:	e00d      	b.n	8006338 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	4b1b      	ldr	r3, [pc, #108]	@ (8006390 <DMA_CalcBaseAndBitshift+0x160>)
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6593      	str	r3, [r2, #88]	@ 0x58
 800632a:	e005      	b.n	8006338 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	aaaaaaab 	.word	0xaaaaaaab
 800638c:	0801ea70 	.word	0x0801ea70
 8006390:	fffffc00 	.word	0xfffffc00

08006394 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d120      	bne.n	80063ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d858      	bhi.n	8006462 <DMA_CheckFifoParam+0xce>
 80063b0:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <DMA_CheckFifoParam+0x24>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063db 	.word	0x080063db
 80063c0:	080063c9 	.word	0x080063c9
 80063c4:	08006463 	.word	0x08006463
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d048      	beq.n	8006466 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063d8:	e045      	b.n	8006466 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063e2:	d142      	bne.n	800646a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063e8:	e03f      	b.n	800646a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f2:	d123      	bne.n	800643c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d838      	bhi.n	800646e <DMA_CheckFifoParam+0xda>
 80063fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006404 <DMA_CheckFifoParam+0x70>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	08006415 	.word	0x08006415
 8006408:	0800641b 	.word	0x0800641b
 800640c:	08006415 	.word	0x08006415
 8006410:	0800642d 	.word	0x0800642d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
        break;
 8006418:	e030      	b.n	800647c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d025      	beq.n	8006472 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800642a:	e022      	b.n	8006472 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006434:	d11f      	bne.n	8006476 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800643a:	e01c      	b.n	8006476 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	2b02      	cmp	r3, #2
 8006442:	d902      	bls.n	800644a <DMA_CheckFifoParam+0xb6>
 8006444:	2b03      	cmp	r3, #3
 8006446:	d003      	beq.n	8006450 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006448:	e018      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
        break;
 800644e:	e015      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
    break;
 8006460:	e00b      	b.n	800647a <DMA_CheckFifoParam+0xe6>
        break;
 8006462:	bf00      	nop
 8006464:	e00a      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        break;
 8006466:	bf00      	nop
 8006468:	e008      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        break;
 800646a:	bf00      	nop
 800646c:	e006      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        break;
 800646e:	bf00      	nop
 8006470:	e004      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        break;
 8006472:	bf00      	nop
 8006474:	e002      	b.n	800647c <DMA_CheckFifoParam+0xe8>
        break;
 8006476:	bf00      	nop
 8006478:	e000      	b.n	800647c <DMA_CheckFifoParam+0xe8>
    break;
 800647a:	bf00      	nop
    }
  }

  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a38      	ldr	r2, [pc, #224]	@ (8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a36      	ldr	r2, [pc, #216]	@ (8006584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01d      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a35      	ldr	r2, [pc, #212]	@ (8006588 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a33      	ldr	r2, [pc, #204]	@ (800658c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a32      	ldr	r2, [pc, #200]	@ (8006590 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a30      	ldr	r2, [pc, #192]	@ (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2f      	ldr	r2, [pc, #188]	@ (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2d      	ldr	r2, [pc, #180]	@ (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01a      	beq.n	800652a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	3b08      	subs	r3, #8
 80064fc:	4a28      	ldr	r2, [pc, #160]	@ (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	091b      	lsrs	r3, r3, #4
 8006504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4b26      	ldr	r3, [pc, #152]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a24      	ldr	r2, [pc, #144]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006518:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2201      	movs	r2, #1
 8006522:	409a      	lsls	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006528:	e024      	b.n	8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3b10      	subs	r3, #16
 8006532:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4a1c      	ldr	r2, [pc, #112]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d806      	bhi.n	8006552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a1b      	ldr	r2, [pc, #108]	@ (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d902      	bls.n	8006552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3308      	adds	r3, #8
 8006550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4b18      	ldr	r3, [pc, #96]	@ (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006564:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494
 80065a0:	cccccccd 	.word	0xcccccccd
 80065a4:	16009600 	.word	0x16009600
 80065a8:	58025880 	.word	0x58025880
 80065ac:	aaaaaaab 	.word	0xaaaaaaab
 80065b0:	400204b8 	.word	0x400204b8
 80065b4:	4002040f 	.word	0x4002040f
 80065b8:	10008200 	.word	0x10008200
 80065bc:	40020880 	.word	0x40020880

080065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04a      	beq.n	800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d847      	bhi.n	800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a25      	ldr	r2, [pc, #148]	@ (8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a24      	ldr	r2, [pc, #144]	@ (800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a22      	ldr	r2, [pc, #136]	@ (8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a21      	ldr	r2, [pc, #132]	@ (8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1f      	ldr	r2, [pc, #124]	@ (8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1e      	ldr	r2, [pc, #120]	@ (800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1c      	ldr	r2, [pc, #112]	@ (8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1b      	ldr	r2, [pc, #108]	@ (8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4b17      	ldr	r3, [pc, #92]	@ (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a15      	ldr	r2, [pc, #84]	@ (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006648:	671a      	str	r2, [r3, #112]	@ 0x70
 800664a:	e009      	b.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4b14      	ldr	r3, [pc, #80]	@ (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	461a      	mov	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a11      	ldr	r2, [pc, #68]	@ (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800665e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3b01      	subs	r3, #1
 8006664:	2201      	movs	r2, #1
 8006666:	409a      	lsls	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	58025408 	.word	0x58025408
 800667c:	5802541c 	.word	0x5802541c
 8006680:	58025430 	.word	0x58025430
 8006684:	58025444 	.word	0x58025444
 8006688:	58025458 	.word	0x58025458
 800668c:	5802546c 	.word	0x5802546c
 8006690:	58025480 	.word	0x58025480
 8006694:	58025494 	.word	0x58025494
 8006698:	1600963f 	.word	0x1600963f
 800669c:	58025940 	.word	0x58025940
 80066a0:	1000823f 	.word	0x1000823f
 80066a4:	40020940 	.word	0x40020940

080066a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	@ 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066b6:	4b89      	ldr	r3, [pc, #548]	@ (80068dc <HAL_GPIO_Init+0x234>)
 80066b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066ba:	e194      	b.n	80069e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	2101      	movs	r1, #1
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	fa01 f303 	lsl.w	r3, r1, r3
 80066c8:	4013      	ands	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8186 	beq.w	80069e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d005      	beq.n	80066ec <HAL_GPIO_Init+0x44>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d130      	bne.n	800674e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	2203      	movs	r2, #3
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006722:	2201      	movs	r2, #1
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	f003 0201 	and.w	r2, r3, #1
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4313      	orrs	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d017      	beq.n	800678a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	2203      	movs	r2, #3
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4013      	ands	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d123      	bne.n	80067de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	08da      	lsrs	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3208      	adds	r2, #8
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	220f      	movs	r2, #15
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	08da      	lsrs	r2, r3, #3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3208      	adds	r2, #8
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	2203      	movs	r2, #3
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0203 	and.w	r2, r3, #3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80e0 	beq.w	80069e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006820:	4b2f      	ldr	r3, [pc, #188]	@ (80068e0 <HAL_GPIO_Init+0x238>)
 8006822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006826:	4a2e      	ldr	r2, [pc, #184]	@ (80068e0 <HAL_GPIO_Init+0x238>)
 8006828:	f043 0302 	orr.w	r3, r3, #2
 800682c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006830:	4b2b      	ldr	r3, [pc, #172]	@ (80068e0 <HAL_GPIO_Init+0x238>)
 8006832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800683e:	4a29      	ldr	r2, [pc, #164]	@ (80068e4 <HAL_GPIO_Init+0x23c>)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	3302      	adds	r3, #2
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	220f      	movs	r2, #15
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	43db      	mvns	r3, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4013      	ands	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a20      	ldr	r2, [pc, #128]	@ (80068e8 <HAL_GPIO_Init+0x240>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d052      	beq.n	8006910 <HAL_GPIO_Init+0x268>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <HAL_GPIO_Init+0x244>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_GPIO_Init+0x22e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1e      	ldr	r2, [pc, #120]	@ (80068f0 <HAL_GPIO_Init+0x248>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d02b      	beq.n	80068d2 <HAL_GPIO_Init+0x22a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <HAL_GPIO_Init+0x24c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d025      	beq.n	80068ce <HAL_GPIO_Init+0x226>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <HAL_GPIO_Init+0x250>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01f      	beq.n	80068ca <HAL_GPIO_Init+0x222>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	@ (80068fc <HAL_GPIO_Init+0x254>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d019      	beq.n	80068c6 <HAL_GPIO_Init+0x21e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	@ (8006900 <HAL_GPIO_Init+0x258>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_GPIO_Init+0x21a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a19      	ldr	r2, [pc, #100]	@ (8006904 <HAL_GPIO_Init+0x25c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00d      	beq.n	80068be <HAL_GPIO_Init+0x216>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <HAL_GPIO_Init+0x260>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <HAL_GPIO_Init+0x212>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a17      	ldr	r2, [pc, #92]	@ (800690c <HAL_GPIO_Init+0x264>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d101      	bne.n	80068b6 <HAL_GPIO_Init+0x20e>
 80068b2:	2309      	movs	r3, #9
 80068b4:	e02d      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068b6:	230a      	movs	r3, #10
 80068b8:	e02b      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068ba:	2308      	movs	r3, #8
 80068bc:	e029      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068be:	2307      	movs	r3, #7
 80068c0:	e027      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068c2:	2306      	movs	r3, #6
 80068c4:	e025      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068c6:	2305      	movs	r3, #5
 80068c8:	e023      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e021      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068ce:	2303      	movs	r3, #3
 80068d0:	e01f      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e01d      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e01b      	b.n	8006912 <HAL_GPIO_Init+0x26a>
 80068da:	bf00      	nop
 80068dc:	58000080 	.word	0x58000080
 80068e0:	58024400 	.word	0x58024400
 80068e4:	58000400 	.word	0x58000400
 80068e8:	58020000 	.word	0x58020000
 80068ec:	58020400 	.word	0x58020400
 80068f0:	58020800 	.word	0x58020800
 80068f4:	58020c00 	.word	0x58020c00
 80068f8:	58021000 	.word	0x58021000
 80068fc:	58021400 	.word	0x58021400
 8006900:	58021800 	.word	0x58021800
 8006904:	58021c00 	.word	0x58021c00
 8006908:	58022000 	.word	0x58022000
 800690c:	58022400 	.word	0x58022400
 8006910:	2300      	movs	r3, #0
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	f002 0203 	and.w	r2, r2, #3
 8006918:	0092      	lsls	r2, r2, #2
 800691a:	4093      	lsls	r3, r2
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4313      	orrs	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006922:	4938      	ldr	r1, [pc, #224]	@ (8006a04 <HAL_GPIO_Init+0x35c>)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	3302      	adds	r3, #2
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	43db      	mvns	r3, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4013      	ands	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	43db      	mvns	r3, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	43db      	mvns	r3, r3
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	4013      	ands	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	43db      	mvns	r3, r3
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	4013      	ands	r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f47f ae63 	bne.w	80066bc <HAL_GPIO_Init+0x14>
  }
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	3724      	adds	r7, #36	@ 0x24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	58000400 	.word	0x58000400

08006a08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a16:	4b75      	ldr	r3, [pc, #468]	@ (8006bec <HAL_GPIO_DeInit+0x1e4>)
 8006a18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006a1a:	e0d9      	b.n	8006bd0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	4013      	ands	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80cc 	beq.w	8006bca <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006a32:	4a6f      	ldr	r2, [pc, #444]	@ (8006bf0 <HAL_GPIO_DeInit+0x1e8>)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	3302      	adds	r3, #2
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	220f      	movs	r2, #15
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a67      	ldr	r2, [pc, #412]	@ (8006bf4 <HAL_GPIO_DeInit+0x1ec>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d037      	beq.n	8006acc <HAL_GPIO_DeInit+0xc4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a66      	ldr	r2, [pc, #408]	@ (8006bf8 <HAL_GPIO_DeInit+0x1f0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d031      	beq.n	8006ac8 <HAL_GPIO_DeInit+0xc0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a65      	ldr	r2, [pc, #404]	@ (8006bfc <HAL_GPIO_DeInit+0x1f4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d02b      	beq.n	8006ac4 <HAL_GPIO_DeInit+0xbc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a64      	ldr	r2, [pc, #400]	@ (8006c00 <HAL_GPIO_DeInit+0x1f8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d025      	beq.n	8006ac0 <HAL_GPIO_DeInit+0xb8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a63      	ldr	r2, [pc, #396]	@ (8006c04 <HAL_GPIO_DeInit+0x1fc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d01f      	beq.n	8006abc <HAL_GPIO_DeInit+0xb4>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a62      	ldr	r2, [pc, #392]	@ (8006c08 <HAL_GPIO_DeInit+0x200>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d019      	beq.n	8006ab8 <HAL_GPIO_DeInit+0xb0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a61      	ldr	r2, [pc, #388]	@ (8006c0c <HAL_GPIO_DeInit+0x204>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_GPIO_DeInit+0xac>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a60      	ldr	r2, [pc, #384]	@ (8006c10 <HAL_GPIO_DeInit+0x208>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00d      	beq.n	8006ab0 <HAL_GPIO_DeInit+0xa8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a5f      	ldr	r2, [pc, #380]	@ (8006c14 <HAL_GPIO_DeInit+0x20c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <HAL_GPIO_DeInit+0xa4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8006c18 <HAL_GPIO_DeInit+0x210>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d101      	bne.n	8006aa8 <HAL_GPIO_DeInit+0xa0>
 8006aa4:	2309      	movs	r3, #9
 8006aa6:	e012      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006aa8:	230a      	movs	r3, #10
 8006aaa:	e010      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006aac:	2308      	movs	r3, #8
 8006aae:	e00e      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ab0:	2307      	movs	r3, #7
 8006ab2:	e00c      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ab4:	2306      	movs	r3, #6
 8006ab6:	e00a      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ab8:	2305      	movs	r3, #5
 8006aba:	e008      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006abc:	2304      	movs	r3, #4
 8006abe:	e006      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e004      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e002      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_GPIO_DeInit+0xc6>
 8006acc:	2300      	movs	r3, #0
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f002 0203 	and.w	r2, r2, #3
 8006ad4:	0092      	lsls	r2, r2, #2
 8006ad6:	4093      	lsls	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d136      	bne.n	8006b4c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	401a      	ands	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	401a      	ands	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b08:	4013      	ands	r3, r2
 8006b0a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	43db      	mvns	r3, r3
 8006b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	220f      	movs	r2, #15
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006b2e:	4a30      	ldr	r2, [pc, #192]	@ (8006bf0 <HAL_GPIO_DeInit+0x1e8>)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	3302      	adds	r3, #2
 8006b36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	482c      	ldr	r0, [pc, #176]	@ (8006bf0 <HAL_GPIO_DeInit+0x1e8>)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	400a      	ands	r2, r1
 8006b46:	3302      	adds	r3, #2
 8006b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	2103      	movs	r1, #3
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	08da      	lsrs	r2, r3, #3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3208      	adds	r2, #8
 8006b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	220f      	movs	r2, #15
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	08d2      	lsrs	r2, r2, #3
 8006b80:	4019      	ands	r1, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3208      	adds	r2, #8
 8006b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	2103      	movs	r1, #3
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	401a      	ands	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	2103      	movs	r1, #3
 8006bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	401a      	ands	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f af1f 	bne.w	8006a1c <HAL_GPIO_DeInit+0x14>
  }
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	58000080 	.word	0x58000080
 8006bf0:	58000400 	.word	0x58000400
 8006bf4:	58020000 	.word	0x58020000
 8006bf8:	58020400 	.word	0x58020400
 8006bfc:	58020800 	.word	0x58020800
 8006c00:	58020c00 	.word	0x58020c00
 8006c04:	58021000 	.word	0x58021000
 8006c08:	58021400 	.word	0x58021400
 8006c0c:	58021800 	.word	0x58021800
 8006c10:	58021c00 	.word	0x58021c00
 8006c14:	58022000 	.word	0x58022000
 8006c18:	58022400 	.word	0x58022400

08006c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e001      	b.n	8006c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c5c:	787b      	ldrb	r3, [r7, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c68:	e003      	b.n	8006c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c6a:	887b      	ldrh	r3, [r7, #2]
 8006c6c:	041a      	lsls	r2, r3, #16
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	619a      	str	r2, [r3, #24]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c90:	887a      	ldrh	r2, [r7, #2]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4013      	ands	r3, r2
 8006c96:	041a      	lsls	r2, r3, #16
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	43d9      	mvns	r1, r3
 8006c9c:	887b      	ldrh	r3, [r7, #2]
 8006c9e:	400b      	ands	r3, r1
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	619a      	str	r2, [r3, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fcef 	bl	80006bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cf0:	4b19      	ldr	r3, [pc, #100]	@ (8006d58 <HAL_PWREx_ConfigSupply+0x70>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d00a      	beq.n	8006d12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cfc:	4b16      	ldr	r3, [pc, #88]	@ (8006d58 <HAL_PWREx_ConfigSupply+0x70>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d001      	beq.n	8006d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e01f      	b.n	8006d4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e01d      	b.n	8006d4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d12:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <HAL_PWREx_ConfigSupply+0x70>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f023 0207 	bic.w	r2, r3, #7
 8006d1a:	490f      	ldr	r1, [pc, #60]	@ (8006d58 <HAL_PWREx_ConfigSupply+0x70>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d22:	f7fc fd69 	bl	80037f8 <HAL_GetTick>
 8006d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d28:	e009      	b.n	8006d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d2a:	f7fc fd65 	bl	80037f8 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d38:	d901      	bls.n	8006d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e007      	b.n	8006d4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d3e:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <HAL_PWREx_ConfigSupply+0x70>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4a:	d1ee      	bne.n	8006d2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	58024800 	.word	0x58024800

08006d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08c      	sub	sp, #48	@ 0x30
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f000 bc48 	b.w	8007600 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8088 	beq.w	8006e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d7e:	4b99      	ldr	r3, [pc, #612]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d88:	4b96      	ldr	r3, [pc, #600]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d007      	beq.n	8006da4 <HAL_RCC_OscConfig+0x48>
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d96:	2b18      	cmp	r3, #24
 8006d98:	d111      	bne.n	8006dbe <HAL_RCC_OscConfig+0x62>
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d10c      	bne.n	8006dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da4:	4b8f      	ldr	r3, [pc, #572]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d06d      	beq.n	8006e8c <HAL_RCC_OscConfig+0x130>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d169      	bne.n	8006e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f000 bc21 	b.w	8007600 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x7a>
 8006dc8:	4b86      	ldr	r3, [pc, #536]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a85      	ldr	r2, [pc, #532]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e02e      	b.n	8006e34 <HAL_RCC_OscConfig+0xd8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x9c>
 8006dde:	4b81      	ldr	r3, [pc, #516]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a80      	ldr	r2, [pc, #512]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a7d      	ldr	r2, [pc, #500]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e01d      	b.n	8006e34 <HAL_RCC_OscConfig+0xd8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCC_OscConfig+0xc0>
 8006e02:	4b78      	ldr	r3, [pc, #480]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a77      	ldr	r2, [pc, #476]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	4b75      	ldr	r3, [pc, #468]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a74      	ldr	r2, [pc, #464]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCC_OscConfig+0xd8>
 8006e1c:	4b71      	ldr	r3, [pc, #452]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a70      	ldr	r2, [pc, #448]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	4b6e      	ldr	r3, [pc, #440]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d013      	beq.n	8006e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fc fcdc 	bl	80037f8 <HAL_GetTick>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e44:	f7fc fcd8 	bl	80037f8 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	@ 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e3d4      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e56:	4b63      	ldr	r3, [pc, #396]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0xe8>
 8006e62:	e014      	b.n	8006e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fc fcc8 	bl	80037f8 <HAL_GetTick>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e6c:	f7fc fcc4 	bl	80037f8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b64      	cmp	r3, #100	@ 0x64
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e3c0      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e7e:	4b59      	ldr	r3, [pc, #356]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x110>
 8006e8a:	e000      	b.n	8006e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80ca 	beq.w	8007030 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e9c:	4b51      	ldr	r3, [pc, #324]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ea4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x166>
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b18      	cmp	r3, #24
 8006eb6:	d156      	bne.n	8006f66 <HAL_RCC_OscConfig+0x20a>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d151      	bne.n	8006f66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ec2:	4b48      	ldr	r3, [pc, #288]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_RCC_OscConfig+0x17e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e392      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006eda:	4b42      	ldr	r3, [pc, #264]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 0219 	bic.w	r2, r3, #25
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	493f      	ldr	r1, [pc, #252]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fc fc84 	bl	80037f8 <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef4:	f7fc fc80 	bl	80037f8 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e37c      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f06:	4b37      	ldr	r3, [pc, #220]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f12:	f7fc fca1 	bl	8003858 <HAL_GetREVID>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d817      	bhi.n	8006f50 <HAL_RCC_OscConfig+0x1f4>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d108      	bne.n	8006f3a <HAL_RCC_OscConfig+0x1de>
 8006f28:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f30:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f38:	e07a      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	4926      	ldr	r1, [pc, #152]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f4e:	e06f      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f50:	4b24      	ldr	r3, [pc, #144]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	4921      	ldr	r1, [pc, #132]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f64:	e064      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d047      	beq.n	8006ffe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 0219 	bic.w	r2, r3, #25
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	491a      	ldr	r1, [pc, #104]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fc fc3a 	bl	80037f8 <HAL_GetTick>
 8006f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f88:	f7fc fc36 	bl	80037f8 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e332      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f9a:	4b12      	ldr	r3, [pc, #72]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa6:	f7fc fc57 	bl	8003858 <HAL_GetREVID>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d819      	bhi.n	8006fe8 <HAL_RCC_OscConfig+0x28c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b40      	cmp	r3, #64	@ 0x40
 8006fba:	d108      	bne.n	8006fce <HAL_RCC_OscConfig+0x272>
 8006fbc:	4b09      	ldr	r3, [pc, #36]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006fc4:	4a07      	ldr	r2, [pc, #28]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fca:	6053      	str	r3, [r2, #4]
 8006fcc:	e030      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
 8006fce:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	031b      	lsls	r3, r3, #12
 8006fdc:	4901      	ldr	r1, [pc, #4]	@ (8006fe4 <HAL_RCC_OscConfig+0x288>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	604b      	str	r3, [r1, #4]
 8006fe2:	e025      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	4b9a      	ldr	r3, [pc, #616]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	061b      	lsls	r3, r3, #24
 8006ff6:	4997      	ldr	r1, [pc, #604]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	604b      	str	r3, [r1, #4]
 8006ffc:	e018      	b.n	8007030 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffe:	4b95      	ldr	r3, [pc, #596]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a94      	ldr	r2, [pc, #592]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700a:	f7fc fbf5 	bl	80037f8 <HAL_GetTick>
 800700e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007012:	f7fc fbf1 	bl	80037f8 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e2ed      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007024:	4b8b      	ldr	r3, [pc, #556]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f0      	bne.n	8007012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a9 	beq.w	8007190 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703e:	4b85      	ldr	r3, [pc, #532]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007046:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007048:	4b82      	ldr	r3, [pc, #520]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b08      	cmp	r3, #8
 8007052:	d007      	beq.n	8007064 <HAL_RCC_OscConfig+0x308>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b18      	cmp	r3, #24
 8007058:	d13a      	bne.n	80070d0 <HAL_RCC_OscConfig+0x374>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d135      	bne.n	80070d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007064:	4b7b      	ldr	r3, [pc, #492]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_RCC_OscConfig+0x320>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	2b80      	cmp	r3, #128	@ 0x80
 8007076:	d001      	beq.n	800707c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e2c1      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800707c:	f7fc fbec 	bl	8003858 <HAL_GetREVID>
 8007080:	4603      	mov	r3, r0
 8007082:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007086:	4293      	cmp	r3, r2
 8007088:	d817      	bhi.n	80070ba <HAL_RCC_OscConfig+0x35e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	2b20      	cmp	r3, #32
 8007090:	d108      	bne.n	80070a4 <HAL_RCC_OscConfig+0x348>
 8007092:	4b70      	ldr	r3, [pc, #448]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800709a:	4a6e      	ldr	r2, [pc, #440]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800709c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070a2:	e075      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	069b      	lsls	r3, r3, #26
 80070b2:	4968      	ldr	r1, [pc, #416]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070b8:	e06a      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ba:	4b66      	ldr	r3, [pc, #408]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	061b      	lsls	r3, r3, #24
 80070c8:	4962      	ldr	r1, [pc, #392]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070ce:	e05f      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d042      	beq.n	800715e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5d      	ldr	r2, [pc, #372]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80070de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fc fb88 	bl	80037f8 <HAL_GetTick>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070ec:	f7fc fb84 	bl	80037f8 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e280      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070fe:	4b55      	ldr	r3, [pc, #340]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800710a:	f7fc fba5 	bl	8003858 <HAL_GetREVID>
 800710e:	4603      	mov	r3, r0
 8007110:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007114:	4293      	cmp	r3, r2
 8007116:	d817      	bhi.n	8007148 <HAL_RCC_OscConfig+0x3ec>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	2b20      	cmp	r3, #32
 800711e:	d108      	bne.n	8007132 <HAL_RCC_OscConfig+0x3d6>
 8007120:	4b4c      	ldr	r3, [pc, #304]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007128:	4a4a      	ldr	r2, [pc, #296]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800712a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800712e:	6053      	str	r3, [r2, #4]
 8007130:	e02e      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
 8007132:	4b48      	ldr	r3, [pc, #288]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	069b      	lsls	r3, r3, #26
 8007140:	4944      	ldr	r1, [pc, #272]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
 8007146:	e023      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
 8007148:	4b42      	ldr	r3, [pc, #264]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	493f      	ldr	r1, [pc, #252]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007158:	4313      	orrs	r3, r2
 800715a:	60cb      	str	r3, [r1, #12]
 800715c:	e018      	b.n	8007190 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800715e:	4b3d      	ldr	r3, [pc, #244]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a3c      	ldr	r2, [pc, #240]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fc fb45 	bl	80037f8 <HAL_GetTick>
 800716e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007172:	f7fc fb41 	bl	80037f8 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e23d      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007184:	4b33      	ldr	r3, [pc, #204]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d036      	beq.n	800720a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80071a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b0:	f7fc fb22 	bl	80037f8 <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b8:	f7fc fb1e 	bl	80037f8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e21a      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071ca:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80071cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x45c>
 80071d6:	e018      	b.n	800720a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80071da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 80071de:	f023 0301 	bic.w	r3, r3, #1
 80071e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e4:	f7fc fb08 	bl	80037f8 <HAL_GetTick>
 80071e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ec:	f7fc fb04 	bl	80037f8 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e200      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071fe:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d039      	beq.n	800728a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01c      	beq.n	8007258 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800721e:	4b0d      	ldr	r3, [pc, #52]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a0c      	ldr	r2, [pc, #48]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007224:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007228:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800722a:	f7fc fae5 	bl	80037f8 <HAL_GetTick>
 800722e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007232:	f7fc fae1 	bl	80037f8 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e1dd      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007244:	4b03      	ldr	r3, [pc, #12]	@ (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <HAL_RCC_OscConfig+0x4d6>
 8007250:	e01b      	b.n	800728a <HAL_RCC_OscConfig+0x52e>
 8007252:	bf00      	nop
 8007254:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007258:	4b9b      	ldr	r3, [pc, #620]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a9a      	ldr	r2, [pc, #616]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800725e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007262:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007264:	f7fc fac8 	bl	80037f8 <HAL_GetTick>
 8007268:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800726c:	f7fc fac4 	bl	80037f8 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e1c0      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800727e:	4b92      	ldr	r3, [pc, #584]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8081 	beq.w	800739a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007298:	4b8c      	ldr	r3, [pc, #560]	@ (80074cc <HAL_RCC_OscConfig+0x770>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a8b      	ldr	r2, [pc, #556]	@ (80074cc <HAL_RCC_OscConfig+0x770>)
 800729e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072a4:	f7fc faa8 	bl	80037f8 <HAL_GetTick>
 80072a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ac:	f7fc faa4 	bl	80037f8 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	@ 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e1a0      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072be:	4b83      	ldr	r3, [pc, #524]	@ (80074cc <HAL_RCC_OscConfig+0x770>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d106      	bne.n	80072e0 <HAL_RCC_OscConfig+0x584>
 80072d2:	4b7d      	ldr	r3, [pc, #500]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a7c      	ldr	r2, [pc, #496]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	e02d      	b.n	800733c <HAL_RCC_OscConfig+0x5e0>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10c      	bne.n	8007302 <HAL_RCC_OscConfig+0x5a6>
 80072e8:	4b77      	ldr	r3, [pc, #476]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ec:	4a76      	ldr	r2, [pc, #472]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f4:	4b74      	ldr	r3, [pc, #464]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f8:	4a73      	ldr	r2, [pc, #460]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80072fa:	f023 0304 	bic.w	r3, r3, #4
 80072fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007300:	e01c      	b.n	800733c <HAL_RCC_OscConfig+0x5e0>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b05      	cmp	r3, #5
 8007308:	d10c      	bne.n	8007324 <HAL_RCC_OscConfig+0x5c8>
 800730a:	4b6f      	ldr	r3, [pc, #444]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730e:	4a6e      	ldr	r2, [pc, #440]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007310:	f043 0304 	orr.w	r3, r3, #4
 8007314:	6713      	str	r3, [r2, #112]	@ 0x70
 8007316:	4b6c      	ldr	r3, [pc, #432]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731a:	4a6b      	ldr	r2, [pc, #428]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	6713      	str	r3, [r2, #112]	@ 0x70
 8007322:	e00b      	b.n	800733c <HAL_RCC_OscConfig+0x5e0>
 8007324:	4b68      	ldr	r3, [pc, #416]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007328:	4a67      	ldr	r2, [pc, #412]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800732a:	f023 0301 	bic.w	r3, r3, #1
 800732e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007330:	4b65      	ldr	r3, [pc, #404]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007334:	4a64      	ldr	r2, [pc, #400]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007336:	f023 0304 	bic.w	r3, r3, #4
 800733a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d015      	beq.n	8007370 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fc fa58 	bl	80037f8 <HAL_GetTick>
 8007348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800734a:	e00a      	b.n	8007362 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800734c:	f7fc fa54 	bl	80037f8 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e14e      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007362:	4b59      	ldr	r3, [pc, #356]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0ee      	beq.n	800734c <HAL_RCC_OscConfig+0x5f0>
 800736e:	e014      	b.n	800739a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007370:	f7fc fa42 	bl	80037f8 <HAL_GetTick>
 8007374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007376:	e00a      	b.n	800738e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007378:	f7fc fa3e 	bl	80037f8 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e138      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800738e:	4b4e      	ldr	r3, [pc, #312]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1ee      	bne.n	8007378 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 812d 	beq.w	80075fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073a4:	4b48      	ldr	r3, [pc, #288]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ac:	2b18      	cmp	r3, #24
 80073ae:	f000 80bd 	beq.w	800752c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	f040 809e 	bne.w	80074f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073bc:	4b42      	ldr	r3, [pc, #264]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a41      	ldr	r2, [pc, #260]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80073c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fc fa16 	bl	80037f8 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fc fa12 	bl	80037f8 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e10e      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073e2:	4b39      	ldr	r3, [pc, #228]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ee:	4b36      	ldr	r3, [pc, #216]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80073f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073f2:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <HAL_RCC_OscConfig+0x774>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073fe:	0112      	lsls	r2, r2, #4
 8007400:	430a      	orrs	r2, r1
 8007402:	4931      	ldr	r1, [pc, #196]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007404:	4313      	orrs	r3, r2
 8007406:	628b      	str	r3, [r1, #40]	@ 0x28
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740c:	3b01      	subs	r3, #1
 800740e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	3b01      	subs	r3, #1
 8007418:	025b      	lsls	r3, r3, #9
 800741a:	b29b      	uxth	r3, r3
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	3b01      	subs	r3, #1
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007430:	3b01      	subs	r3, #1
 8007432:	061b      	lsls	r3, r3, #24
 8007434:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007438:	4923      	ldr	r1, [pc, #140]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800743e:	4b22      	ldr	r3, [pc, #136]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800744a:	4b1f      	ldr	r3, [pc, #124]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800744c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800744e:	4b21      	ldr	r3, [pc, #132]	@ (80074d4 <HAL_RCC_OscConfig+0x778>)
 8007450:	4013      	ands	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007456:	00d2      	lsls	r2, r2, #3
 8007458:	491b      	ldr	r1, [pc, #108]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800745e:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	f023 020c 	bic.w	r2, r3, #12
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	4917      	ldr	r1, [pc, #92]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800746c:	4313      	orrs	r3, r2
 800746e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007470:	4b15      	ldr	r3, [pc, #84]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	f023 0202 	bic.w	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747c:	4912      	ldr	r1, [pc, #72]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800747e:	4313      	orrs	r3, r2
 8007480:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007482:	4b11      	ldr	r3, [pc, #68]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	4a10      	ldr	r2, [pc, #64]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800748c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748e:	4b0e      	ldr	r3, [pc, #56]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4a0d      	ldr	r2, [pc, #52]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 8007494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800749a:	4b0b      	ldr	r3, [pc, #44]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	4a0a      	ldr	r2, [pc, #40]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80074a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074a6:	4b08      	ldr	r3, [pc, #32]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	4a07      	ldr	r2, [pc, #28]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b2:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a04      	ldr	r2, [pc, #16]	@ (80074c8 <HAL_RCC_OscConfig+0x76c>)
 80074b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074be:	f7fc f99b 	bl	80037f8 <HAL_GetTick>
 80074c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c4:	e011      	b.n	80074ea <HAL_RCC_OscConfig+0x78e>
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
 80074cc:	58024800 	.word	0x58024800
 80074d0:	fffffc0c 	.word	0xfffffc0c
 80074d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d8:	f7fc f98e 	bl	80037f8 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e08a      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ea:	4b47      	ldr	r3, [pc, #284]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x77c>
 80074f6:	e082      	b.n	80075fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f8:	4b43      	ldr	r3, [pc, #268]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a42      	ldr	r2, [pc, #264]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80074fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fc f978 	bl	80037f8 <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7fc f974 	bl	80037f8 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e070      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800751e:	4b3a      	ldr	r3, [pc, #232]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x7b0>
 800752a:	e068      	b.n	80075fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800752c:	4b36      	ldr	r3, [pc, #216]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007532:	4b35      	ldr	r3, [pc, #212]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007536:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	2b01      	cmp	r3, #1
 800753e:	d031      	beq.n	80075a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f003 0203 	and.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d12a      	bne.n	80075a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	091b      	lsrs	r3, r3, #4
 8007552:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755a:	429a      	cmp	r2, r3
 800755c:	d122      	bne.n	80075a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d11a      	bne.n	80075a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800757a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800757c:	429a      	cmp	r2, r3
 800757e:	d111      	bne.n	80075a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800758e:	429a      	cmp	r2, r3
 8007590:	d108      	bne.n	80075a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	0e1b      	lsrs	r3, r3, #24
 8007596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e02b      	b.n	8007600 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80075a8:	4b17      	ldr	r3, [pc, #92]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	08db      	lsrs	r3, r3, #3
 80075ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d01f      	beq.n	80075fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80075be:	4b12      	ldr	r3, [pc, #72]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c2:	4a11      	ldr	r2, [pc, #68]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075ca:	f7fc f915 	bl	80037f8 <HAL_GetTick>
 80075ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80075d0:	bf00      	nop
 80075d2:	f7fc f911 	bl	80037f8 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	4293      	cmp	r3, r2
 80075dc:	d0f9      	beq.n	80075d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075de:	4b0a      	ldr	r3, [pc, #40]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e2:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <HAL_RCC_OscConfig+0x8b0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075ea:	00d2      	lsls	r2, r2, #3
 80075ec:	4906      	ldr	r1, [pc, #24]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075f2:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <HAL_RCC_OscConfig+0x8ac>)
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3730      	adds	r7, #48	@ 0x30
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	58024400 	.word	0x58024400
 800760c:	ffff0007 	.word	0xffff0007

08007610 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e19c      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b8a      	ldr	r3, [pc, #552]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d910      	bls.n	8007654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b87      	ldr	r3, [pc, #540]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 020f 	bic.w	r2, r3, #15
 800763a:	4985      	ldr	r1, [pc, #532]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b83      	ldr	r3, [pc, #524]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e184      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	4b7b      	ldr	r3, [pc, #492]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800766c:	429a      	cmp	r2, r3
 800766e:	d908      	bls.n	8007682 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007670:	4b78      	ldr	r3, [pc, #480]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	4975      	ldr	r1, [pc, #468]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 800767e:	4313      	orrs	r3, r2
 8007680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d010      	beq.n	80076b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	4b70      	ldr	r3, [pc, #448]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800769a:	429a      	cmp	r2, r3
 800769c:	d908      	bls.n	80076b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800769e:	4b6d      	ldr	r3, [pc, #436]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	496a      	ldr	r1, [pc, #424]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d010      	beq.n	80076de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	4b64      	ldr	r3, [pc, #400]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d908      	bls.n	80076de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076cc:	4b61      	ldr	r3, [pc, #388]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	495e      	ldr	r1, [pc, #376]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d010      	beq.n	800770c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	4b59      	ldr	r3, [pc, #356]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d908      	bls.n	800770c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076fa:	4b56      	ldr	r3, [pc, #344]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	4953      	ldr	r1, [pc, #332]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007708:	4313      	orrs	r3, r2
 800770a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	4b4d      	ldr	r3, [pc, #308]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	429a      	cmp	r2, r3
 8007726:	d908      	bls.n	800773a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007728:	4b4a      	ldr	r3, [pc, #296]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f023 020f 	bic.w	r2, r3, #15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4947      	ldr	r1, [pc, #284]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007736:	4313      	orrs	r3, r2
 8007738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d055      	beq.n	80077f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007746:	4b43      	ldr	r3, [pc, #268]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4940      	ldr	r1, [pc, #256]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007754:	4313      	orrs	r3, r2
 8007756:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d107      	bne.n	8007770 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007760:	4b3c      	ldr	r3, [pc, #240]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d121      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0f6      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d107      	bne.n	8007788 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007778:	4b36      	ldr	r3, [pc, #216]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d115      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0ea      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007790:	4b30      	ldr	r3, [pc, #192]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0de      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077a0:	4b2c      	ldr	r3, [pc, #176]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0d6      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077b0:	4b28      	ldr	r3, [pc, #160]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f023 0207 	bic.w	r2, r3, #7
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4925      	ldr	r1, [pc, #148]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c2:	f7fc f819 	bl	80037f8 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c8:	e00a      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ca:	f7fc f815 	bl	80037f8 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e0be      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d1eb      	bne.n	80077ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	4b14      	ldr	r3, [pc, #80]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	429a      	cmp	r2, r3
 800780c:	d208      	bcs.n	8007820 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800780e:	4b11      	ldr	r3, [pc, #68]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f023 020f 	bic.w	r2, r3, #15
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	490e      	ldr	r1, [pc, #56]	@ (8007854 <HAL_RCC_ClockConfig+0x244>)
 800781c:	4313      	orrs	r3, r2
 800781e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007820:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d214      	bcs.n	8007858 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782e:	4b08      	ldr	r3, [pc, #32]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f023 020f 	bic.w	r2, r3, #15
 8007836:	4906      	ldr	r1, [pc, #24]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	4313      	orrs	r3, r2
 800783c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800783e:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d005      	beq.n	8007858 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e086      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
 8007850:	52002000 	.word	0x52002000
 8007854:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d010      	beq.n	8007886 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	4b3f      	ldr	r3, [pc, #252]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007870:	429a      	cmp	r2, r3
 8007872:	d208      	bcs.n	8007886 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007874:	4b3c      	ldr	r3, [pc, #240]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	4939      	ldr	r1, [pc, #228]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007882:	4313      	orrs	r3, r2
 8007884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	4b34      	ldr	r3, [pc, #208]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800789e:	429a      	cmp	r2, r3
 80078a0:	d208      	bcs.n	80078b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078a2:	4b31      	ldr	r3, [pc, #196]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	492e      	ldr	r1, [pc, #184]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d010      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	4b28      	ldr	r3, [pc, #160]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d208      	bcs.n	80078e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078d0:	4b25      	ldr	r3, [pc, #148]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4922      	ldr	r1, [pc, #136]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d208      	bcs.n	8007910 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	4917      	ldr	r1, [pc, #92]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 800790c:	4313      	orrs	r3, r2
 800790e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007910:	f000 f834 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b14      	ldr	r3, [pc, #80]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	4912      	ldr	r1, [pc, #72]	@ (800796c <HAL_RCC_ClockConfig+0x35c>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800792e:	4b0e      	ldr	r3, [pc, #56]	@ (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	4a0d      	ldr	r2, [pc, #52]	@ (800796c <HAL_RCC_ClockConfig+0x35c>)
 8007938:	5cd3      	ldrb	r3, [r2, r3]
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	4a0a      	ldr	r2, [pc, #40]	@ (8007970 <HAL_RCC_ClockConfig+0x360>)
 8007946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007948:	4a0a      	ldr	r2, [pc, #40]	@ (8007974 <HAL_RCC_ClockConfig+0x364>)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800794e:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <HAL_RCC_ClockConfig+0x368>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fb f8a8 	bl	8002aa8 <HAL_InitTick>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	0801ea60 	.word	0x0801ea60
 8007970:	24000018 	.word	0x24000018
 8007974:	24000014 	.word	0x24000014
 8007978:	2400001c 	.word	0x2400001c

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	@ 0x24
 8007980:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007982:	4bb3      	ldr	r3, [pc, #716]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800798a:	2b18      	cmp	r3, #24
 800798c:	f200 8155 	bhi.w	8007c3a <HAL_RCC_GetSysClockFreq+0x2be>
 8007990:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079fd 	.word	0x080079fd
 800799c:	08007c3b 	.word	0x08007c3b
 80079a0:	08007c3b 	.word	0x08007c3b
 80079a4:	08007c3b 	.word	0x08007c3b
 80079a8:	08007c3b 	.word	0x08007c3b
 80079ac:	08007c3b 	.word	0x08007c3b
 80079b0:	08007c3b 	.word	0x08007c3b
 80079b4:	08007c3b 	.word	0x08007c3b
 80079b8:	08007a23 	.word	0x08007a23
 80079bc:	08007c3b 	.word	0x08007c3b
 80079c0:	08007c3b 	.word	0x08007c3b
 80079c4:	08007c3b 	.word	0x08007c3b
 80079c8:	08007c3b 	.word	0x08007c3b
 80079cc:	08007c3b 	.word	0x08007c3b
 80079d0:	08007c3b 	.word	0x08007c3b
 80079d4:	08007c3b 	.word	0x08007c3b
 80079d8:	08007a29 	.word	0x08007a29
 80079dc:	08007c3b 	.word	0x08007c3b
 80079e0:	08007c3b 	.word	0x08007c3b
 80079e4:	08007c3b 	.word	0x08007c3b
 80079e8:	08007c3b 	.word	0x08007c3b
 80079ec:	08007c3b 	.word	0x08007c3b
 80079f0:	08007c3b 	.word	0x08007c3b
 80079f4:	08007c3b 	.word	0x08007c3b
 80079f8:	08007a2f 	.word	0x08007a2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fc:	4b94      	ldr	r3, [pc, #592]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a08:	4b91      	ldr	r3, [pc, #580]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	4a90      	ldr	r2, [pc, #576]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a1a:	e111      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a1c:	4b8d      	ldr	r3, [pc, #564]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a1e:	61bb      	str	r3, [r7, #24]
      break;
 8007a20:	e10e      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a22:	4b8d      	ldr	r3, [pc, #564]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a24:	61bb      	str	r3, [r7, #24]
      break;
 8007a26:	e10b      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a28:	4b8c      	ldr	r3, [pc, #560]	@ (8007c5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a2a:	61bb      	str	r3, [r7, #24]
      break;
 8007a2c:	e108      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2e:	4b88      	ldr	r3, [pc, #544]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a44:	4b82      	ldr	r3, [pc, #520]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a4e:	4b80      	ldr	r3, [pc, #512]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80e1 	beq.w	8007c34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 8083 	beq.w	8007b80 <HAL_RCC_GetSysClockFreq+0x204>
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f200 80a1 	bhi.w	8007bc4 <HAL_RCC_GetSysClockFreq+0x248>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0x114>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d056      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a8e:	e099      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a90:	4b6f      	ldr	r3, [pc, #444]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a6b      	ldr	r2, [pc, #428]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b62      	ldr	r3, [pc, #392]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ada:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007af6:	e087      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b51      	ldr	r3, [pc, #324]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b3a:	e065      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b40      	ldr	r3, [pc, #256]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b7e:	e043      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b2f      	ldr	r3, [pc, #188]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bc2:	e021      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c08:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c12:	3301      	adds	r3, #1
 8007c14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2c:	ee17 3a90 	vmov	r3, s15
 8007c30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c32:	e005      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
      break;
 8007c38:	e002      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c3a:	4b07      	ldr	r3, [pc, #28]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c3c:	61bb      	str	r3, [r7, #24]
      break;
 8007c3e:	bf00      	nop
  }

  return sysclockfreq;
 8007c40:	69bb      	ldr	r3, [r7, #24]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3724      	adds	r7, #36	@ 0x24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	58024400 	.word	0x58024400
 8007c54:	03d09000 	.word	0x03d09000
 8007c58:	003d0900 	.word	0x003d0900
 8007c5c:	017d7840 	.word	0x017d7840
 8007c60:	46000000 	.word	0x46000000
 8007c64:	4c742400 	.word	0x4c742400
 8007c68:	4a742400 	.word	0x4a742400
 8007c6c:	4bbebc20 	.word	0x4bbebc20

08007c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c76:	f7ff fe81 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	490f      	ldr	r1, [pc, #60]	@ (8007cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c88:	5ccb      	ldrb	r3, [r1, r3]
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c94:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	4a09      	ldr	r2, [pc, #36]	@ (8007cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	4a07      	ldr	r2, [pc, #28]	@ (8007cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cae:	4a07      	ldr	r2, [pc, #28]	@ (8007ccc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	@ (8007cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	0801ea60 	.word	0x0801ea60
 8007cc8:	24000018 	.word	0x24000018
 8007ccc:	24000014 	.word	0x24000014

08007cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cd4:	f7ff ffcc 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4904      	ldr	r1, [pc, #16]	@ (8007cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ce6:	5ccb      	ldrb	r3, [r1, r3]
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	0801ea60 	.word	0x0801ea60

08007cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d00:	f7ff ffb6 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8007d04:	4602      	mov	r2, r0
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	4904      	ldr	r1, [pc, #16]	@ (8007d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d12:	5ccb      	ldrb	r3, [r1, r3]
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	58024400 	.word	0x58024400
 8007d24:	0801ea60 	.word	0x0801ea60

08007d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	223f      	movs	r2, #63	@ 0x3f
 8007d36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d38:	4b1a      	ldr	r3, [pc, #104]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f003 0207 	and.w	r2, r3, #7
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d44:	4b17      	ldr	r3, [pc, #92]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d50:	4b14      	ldr	r3, [pc, #80]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f003 020f 	and.w	r2, r3, #15
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d5c:	4b11      	ldr	r3, [pc, #68]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d68:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d74:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d80:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d8c:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <HAL_RCC_GetClockConfig+0x80>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 020f 	and.w	r2, r3, #15
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	58024400 	.word	0x58024400
 8007da8:	52002000 	.word	0x52002000

08007dac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007db0:	b0ca      	sub	sp, #296	@ 0x128
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	ea54 0305 	orrs.w	r3, r4, r5
 8007dd6:	d049      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007de2:	d02f      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007de4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007de8:	d828      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dee:	d01a      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007df4:	d822      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dfe:	d007      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e00:	e01c      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e02:	4bb8      	ldr	r3, [pc, #736]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	4ab7      	ldr	r2, [pc, #732]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0e:	e01a      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	3308      	adds	r3, #8
 8007e16:	2102      	movs	r1, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 fb61 	bl	800a4e0 <RCCEx_PLL2_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e24:	e00f      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	3328      	adds	r3, #40	@ 0x28
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fc08 	bl	800a644 <RCCEx_PLL3_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e3a:	e004      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e42:	e000      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e4e:	4ba5      	ldr	r3, [pc, #660]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e5c:	4aa1      	ldr	r2, [pc, #644]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e62:	e003      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e78:	f04f 0900 	mov.w	r9, #0
 8007e7c:	ea58 0309 	orrs.w	r3, r8, r9
 8007e80:	d047      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d82a      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea9 	.word	0x08007ea9
 8007e98:	08007eb7 	.word	0x08007eb7
 8007e9c:	08007ecd 	.word	0x08007ecd
 8007ea0:	08007eeb 	.word	0x08007eeb
 8007ea4:	08007eeb 	.word	0x08007eeb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	4a8d      	ldr	r2, [pc, #564]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb4:	e01a      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eba:	3308      	adds	r3, #8
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f002 fb0e 	bl	800a4e0 <RCCEx_PLL2_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eca:	e00f      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed0:	3328      	adds	r3, #40	@ 0x28
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 fbb5 	bl	800a644 <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ee0:	e004      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef8:	f023 0107 	bic.w	r1, r3, #7
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f02:	4a78      	ldr	r2, [pc, #480]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f04:	430b      	orrs	r3, r1
 8007f06:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007f1e:	f04f 0b00 	mov.w	fp, #0
 8007f22:	ea5a 030b 	orrs.w	r3, sl, fp
 8007f26:	d04c      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f32:	d030      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f38:	d829      	bhi.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f3c:	d02d      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f40:	d825      	bhi.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f42:	2b80      	cmp	r3, #128	@ 0x80
 8007f44:	d018      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d821      	bhi.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d007      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007f52:	e01c      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f54:	4b63      	ldr	r3, [pc, #396]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	4a62      	ldr	r2, [pc, #392]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f60:	e01c      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f66:	3308      	adds	r3, #8
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 fab8 	bl	800a4e0 <RCCEx_PLL2_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f76:	e011      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7c:	3328      	adds	r3, #40	@ 0x28
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f002 fb5f 	bl	800a644 <RCCEx_PLL3_Config>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f8c:	e006      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f94:	e002      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb2:	4a4c      	ldr	r2, [pc, #304]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007fce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007fd8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d053      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fee:	d035      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ff4:	d82e      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ff6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ffa:	d031      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ffc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008000:	d828      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008006:	d01a      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800800c:	d822      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008016:	d007      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008018:	e01c      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801a:	4b32      	ldr	r3, [pc, #200]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800801c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801e:	4a31      	ldr	r2, [pc, #196]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008026:	e01c      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	3308      	adds	r3, #8
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f002 fa55 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008036:	4603      	mov	r3, r0
 8008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800803c:	e011      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	3328      	adds	r3, #40	@ 0x28
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f002 fafc 	bl	800a644 <RCCEx_PLL3_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008052:	e006      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800805a:	e002      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800806a:	4b1e      	ldr	r3, [pc, #120]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800807a:	4a1a      	ldr	r2, [pc, #104]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800807c:	430b      	orrs	r3, r1
 800807e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008080:	e003      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008096:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800809a:	2300      	movs	r3, #0
 800809c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80080a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80080a4:	460b      	mov	r3, r1
 80080a6:	4313      	orrs	r3, r2
 80080a8:	d056      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080b6:	d038      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80080b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080bc:	d831      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080c2:	d034      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80080c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080c8:	d82b      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ce:	d01d      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80080d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080d4:	d825      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80080da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080de:	d00a      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080e0:	e01f      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080e2:	bf00      	nop
 80080e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4ba2      	ldr	r3, [pc, #648]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4aa1      	ldr	r2, [pc, #644]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080f4:	e01c      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fa:	3308      	adds	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f002 f9ee 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800810a:	e011      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	3328      	adds	r3, #40	@ 0x28
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f002 fa95 	bl	800a644 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008138:	4b8e      	ldr	r3, [pc, #568]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008144:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008148:	4a8a      	ldr	r2, [pc, #552]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6593      	str	r3, [r2, #88]	@ 0x58
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800816e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d03a      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817e:	2b30      	cmp	r3, #48	@ 0x30
 8008180:	d01f      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008182:	2b30      	cmp	r3, #48	@ 0x30
 8008184:	d819      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d00c      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800818a:	2b20      	cmp	r3, #32
 800818c:	d815      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d019      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008192:	2b10      	cmp	r3, #16
 8008194:	d111      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008196:	4b77      	ldr	r3, [pc, #476]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	4a76      	ldr	r2, [pc, #472]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800819c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80081a2:	e011      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a8:	3308      	adds	r3, #8
 80081aa:	2102      	movs	r1, #2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 f997 	bl	800a4e0 <RCCEx_PLL2_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80081b8:	e006      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081c0:	e002      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80081c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80081d0:	4b68      	ldr	r3, [pc, #416]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081de:	4a65      	ldr	r2, [pc, #404]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081e0:	430b      	orrs	r3, r1
 80081e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081e4:	e003      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081fe:	2300      	movs	r3, #0
 8008200:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008204:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008208:	460b      	mov	r3, r1
 800820a:	4313      	orrs	r3, r2
 800820c:	d051      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008218:	d035      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800821a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800821e:	d82e      	bhi.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008220:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008224:	d031      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800822a:	d828      	bhi.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800822c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008230:	d01a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008236:	d822      	bhi.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800823c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008240:	d007      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008242:	e01c      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008244:	4b4b      	ldr	r3, [pc, #300]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	4a4a      	ldr	r2, [pc, #296]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800824a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008250:	e01c      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	3308      	adds	r3, #8
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f002 f940 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008266:	e011      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	3328      	adds	r3, #40	@ 0x28
 800826e:	2100      	movs	r1, #0
 8008270:	4618      	mov	r0, r3
 8008272:	f002 f9e7 	bl	800a644 <RCCEx_PLL3_Config>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008284:	e002      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800828a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008294:	4b37      	ldr	r3, [pc, #220]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008298:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a2:	4a34      	ldr	r2, [pc, #208]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082a4:	430b      	orrs	r3, r1
 80082a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a8:	e003      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80082be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082cc:	460b      	mov	r3, r1
 80082ce:	4313      	orrs	r3, r2
 80082d0:	d056      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082dc:	d033      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082e2:	d82c      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e8:	d02f      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80082ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082ee:	d826      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f4:	d02b      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80082f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082fa:	d820      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008300:	d012      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008306:	d81a      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d022      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800830c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008310:	d115      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008316:	3308      	adds	r3, #8
 8008318:	2101      	movs	r1, #1
 800831a:	4618      	mov	r0, r3
 800831c:	f002 f8e0 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008326:	e015      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	3328      	adds	r3, #40	@ 0x28
 800832e:	2101      	movs	r1, #1
 8008330:	4618      	mov	r0, r3
 8008332:	f002 f987 	bl	800a644 <RCCEx_PLL3_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800833c:	e00a      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008344:	e006      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008346:	bf00      	nop
 8008348:	e004      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800835e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008360:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836a:	4a02      	ldr	r2, [pc, #8]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800836c:	430b      	orrs	r3, r1
 800836e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800838c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008396:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	d055      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ac:	d033      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80083ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083b2:	d82c      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b8:	d02f      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80083ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083be:	d826      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083c4:	d02b      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80083c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083ca:	d820      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d0:	d012      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d6:	d81a      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d022      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80083dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083e0:	d115      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	3308      	adds	r3, #8
 80083e8:	2101      	movs	r1, #1
 80083ea:	4618      	mov	r0, r3
 80083ec:	f002 f878 	bl	800a4e0 <RCCEx_PLL2_Config>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083f6:	e015      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fc:	3328      	adds	r3, #40	@ 0x28
 80083fe:	2101      	movs	r1, #1
 8008400:	4618      	mov	r0, r3
 8008402:	f002 f91f 	bl	800a644 <RCCEx_PLL3_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800840c:	e00a      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008416:	bf00      	nop
 8008418:	e004      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800841a:	bf00      	nop
 800841c:	e002      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800841e:	bf00      	nop
 8008420:	e000      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10b      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800842c:	4ba3      	ldr	r3, [pc, #652]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008430:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800843c:	4a9f      	ldr	r2, [pc, #636]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800843e:	430b      	orrs	r3, r1
 8008440:	6593      	str	r3, [r2, #88]	@ 0x58
 8008442:	e003      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008466:	460b      	mov	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	d037      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008476:	d00e      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847c:	d816      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008486:	d111      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4b8c      	ldr	r3, [pc, #560]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a8b      	ldr	r2, [pc, #556]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008494:	e00f      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	3308      	adds	r3, #8
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 f81e 	bl	800a4e0 <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084aa:	e004      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80084b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084be:	4b7f      	ldr	r3, [pc, #508]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084cc:	4a7b      	ldr	r2, [pc, #492]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ce:	430b      	orrs	r3, r1
 80084d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80084d2:	e003      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084ec:	2300      	movs	r3, #0
 80084ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4313      	orrs	r3, r2
 80084fa:	d039      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008502:	2b03      	cmp	r3, #3
 8008504:	d81c      	bhi.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008506:	a201      	add	r2, pc, #4	@ (adr r2, 800850c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	08008549 	.word	0x08008549
 8008510:	0800851d 	.word	0x0800851d
 8008514:	0800852b 	.word	0x0800852b
 8008518:	08008549 	.word	0x08008549
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800851c:	4b67      	ldr	r3, [pc, #412]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	4a66      	ldr	r2, [pc, #408]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008528:	e00f      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852e:	3308      	adds	r3, #8
 8008530:	2102      	movs	r1, #2
 8008532:	4618      	mov	r0, r3
 8008534:	f001 ffd4 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800853e:	e004      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008546:	e000      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008552:	4b5a      	ldr	r3, [pc, #360]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008556:	f023 0103 	bic.w	r1, r3, #3
 800855a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008560:	4a56      	ldr	r2, [pc, #344]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008562:	430b      	orrs	r3, r1
 8008564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008566:	e003      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800857c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008580:	2300      	movs	r3, #0
 8008582:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008586:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800858a:	460b      	mov	r3, r1
 800858c:	4313      	orrs	r3, r2
 800858e:	f000 809f 	beq.w	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008592:	4b4b      	ldr	r3, [pc, #300]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a4a      	ldr	r2, [pc, #296]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800859c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800859e:	f7fb f92b 	bl	80037f8 <HAL_GetTick>
 80085a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a6:	e00b      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a8:	f7fb f926 	bl	80037f8 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b64      	cmp	r3, #100	@ 0x64
 80085b6:	d903      	bls.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085be:	e005      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085c0:	4b3f      	ldr	r3, [pc, #252]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0ed      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80085cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d179      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085d4:	4b39      	ldr	r3, [pc, #228]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e0:	4053      	eors	r3, r2
 80085e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d015      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ea:	4b34      	ldr	r3, [pc, #208]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085f6:	4b31      	ldr	r3, [pc, #196]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fa:	4a30      	ldr	r2, [pc, #192]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008600:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008602:	4b2e      	ldr	r3, [pc, #184]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008606:	4a2d      	ldr	r2, [pc, #180]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800860c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800860e:	4a2b      	ldr	r2, [pc, #172]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008614:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800861e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008622:	d118      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008624:	f7fb f8e8 	bl	80037f8 <HAL_GetTick>
 8008628:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800862c:	e00d      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862e:	f7fb f8e3 	bl	80037f8 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800863e:	429a      	cmp	r2, r3
 8008640:	d903      	bls.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008648:	e005      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864a:	4b1c      	ldr	r3, [pc, #112]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800864c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0eb      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865a:	2b00      	cmp	r3, #0
 800865c:	d129      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800866e:	d10e      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008670:	4b12      	ldr	r3, [pc, #72]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008680:	091a      	lsrs	r2, r3, #4
 8008682:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008684:	4013      	ands	r3, r2
 8008686:	4a0d      	ldr	r2, [pc, #52]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008688:	430b      	orrs	r3, r1
 800868a:	6113      	str	r3, [r2, #16]
 800868c:	e005      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800868e:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	4a0a      	ldr	r2, [pc, #40]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008694:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008698:	6113      	str	r3, [r2, #16]
 800869a:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800869c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086aa:	4a04      	ldr	r2, [pc, #16]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b0:	e00e      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80086ba:	e009      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80086bc:	58024400 	.word	0x58024400
 80086c0:	58024800 	.word	0x58024800
 80086c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f002 0301 	and.w	r3, r2, #1
 80086dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f000 8089 	beq.w	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086f8:	2b28      	cmp	r3, #40	@ 0x28
 80086fa:	d86b      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	080087dd 	.word	0x080087dd
 8008708:	080087d5 	.word	0x080087d5
 800870c:	080087d5 	.word	0x080087d5
 8008710:	080087d5 	.word	0x080087d5
 8008714:	080087d5 	.word	0x080087d5
 8008718:	080087d5 	.word	0x080087d5
 800871c:	080087d5 	.word	0x080087d5
 8008720:	080087d5 	.word	0x080087d5
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087d5 	.word	0x080087d5
 800872c:	080087d5 	.word	0x080087d5
 8008730:	080087d5 	.word	0x080087d5
 8008734:	080087d5 	.word	0x080087d5
 8008738:	080087d5 	.word	0x080087d5
 800873c:	080087d5 	.word	0x080087d5
 8008740:	080087d5 	.word	0x080087d5
 8008744:	080087bf 	.word	0x080087bf
 8008748:	080087d5 	.word	0x080087d5
 800874c:	080087d5 	.word	0x080087d5
 8008750:	080087d5 	.word	0x080087d5
 8008754:	080087d5 	.word	0x080087d5
 8008758:	080087d5 	.word	0x080087d5
 800875c:	080087d5 	.word	0x080087d5
 8008760:	080087d5 	.word	0x080087d5
 8008764:	080087dd 	.word	0x080087dd
 8008768:	080087d5 	.word	0x080087d5
 800876c:	080087d5 	.word	0x080087d5
 8008770:	080087d5 	.word	0x080087d5
 8008774:	080087d5 	.word	0x080087d5
 8008778:	080087d5 	.word	0x080087d5
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087d5 	.word	0x080087d5
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087d5 	.word	0x080087d5
 800878c:	080087d5 	.word	0x080087d5
 8008790:	080087d5 	.word	0x080087d5
 8008794:	080087d5 	.word	0x080087d5
 8008798:	080087d5 	.word	0x080087d5
 800879c:	080087d5 	.word	0x080087d5
 80087a0:	080087d5 	.word	0x080087d5
 80087a4:	080087dd 	.word	0x080087dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	3308      	adds	r3, #8
 80087ae:	2101      	movs	r1, #1
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fe95 	bl	800a4e0 <RCCEx_PLL2_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087bc:	e00f      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	3328      	adds	r3, #40	@ 0x28
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 ff3c 	bl	800a644 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087d2:	e004      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087da:	e000      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80087dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087e6:	4bbf      	ldr	r3, [pc, #764]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087f4:	4abb      	ldr	r2, [pc, #748]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087f6:	430b      	orrs	r3, r1
 80087f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f002 0302 	and.w	r3, r2, #2
 8008810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800881a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800881e:	460b      	mov	r3, r1
 8008820:	4313      	orrs	r3, r2
 8008822:	d041      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800882a:	2b05      	cmp	r3, #5
 800882c:	d824      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008881 	.word	0x08008881
 8008838:	0800884d 	.word	0x0800884d
 800883c:	08008863 	.word	0x08008863
 8008840:	08008881 	.word	0x08008881
 8008844:	08008881 	.word	0x08008881
 8008848:	08008881 	.word	0x08008881
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	3308      	adds	r3, #8
 8008852:	2101      	movs	r1, #1
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fe43 	bl	800a4e0 <RCCEx_PLL2_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008860:	e00f      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2101      	movs	r1, #1
 800886a:	4618      	mov	r0, r3
 800886c:	f001 feea 	bl	800a644 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008876:	e004      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887e:	e000      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800888a:	4b96      	ldr	r3, [pc, #600]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888e:	f023 0107 	bic.w	r1, r3, #7
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008898:	4a92      	ldr	r2, [pc, #584]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800889a:	430b      	orrs	r3, r1
 800889c:	6553      	str	r3, [r2, #84]	@ 0x54
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f002 0304 	and.w	r3, r2, #4
 80088b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	d044      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	d825      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80088d4:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	08008929 	.word	0x08008929
 80088e0:	080088f5 	.word	0x080088f5
 80088e4:	0800890b 	.word	0x0800890b
 80088e8:	08008929 	.word	0x08008929
 80088ec:	08008929 	.word	0x08008929
 80088f0:	08008929 	.word	0x08008929
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	3308      	adds	r3, #8
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fdef 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008908:	e00f      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800890a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890e:	3328      	adds	r3, #40	@ 0x28
 8008910:	2101      	movs	r1, #1
 8008912:	4618      	mov	r0, r3
 8008914:	f001 fe96 	bl	800a644 <RCCEx_PLL3_Config>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800891e:	e004      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008926:	e000      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008932:	4b6c      	ldr	r3, [pc, #432]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008936:	f023 0107 	bic.w	r1, r3, #7
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008942:	4a68      	ldr	r2, [pc, #416]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008944:	430b      	orrs	r3, r1
 8008946:	6593      	str	r3, [r2, #88]	@ 0x58
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800894e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f002 0320 	and.w	r3, r2, #32
 800895e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008962:	2300      	movs	r3, #0
 8008964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008968:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d055      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800897e:	d033      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008984:	d82c      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898a:	d02f      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800898c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008990:	d826      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008996:	d02b      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008998:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800899c:	d820      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800899e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a2:	d012      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80089a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a8:	d81a      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d022      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089b2:	d115      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b8:	3308      	adds	r3, #8
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 fd8f 	bl	800a4e0 <RCCEx_PLL2_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089c8:	e015      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	3328      	adds	r3, #40	@ 0x28
 80089d0:	2102      	movs	r1, #2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 fe36 	bl	800a644 <RCCEx_PLL3_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089de:	e00a      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089e6:	e006      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089fe:	4b39      	ldr	r3, [pc, #228]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0e:	4a35      	ldr	r2, [pc, #212]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a14:	e003      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d058      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a4a:	d033      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a50:	d82c      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a56:	d02f      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5c:	d826      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a62:	d02b      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a68:	d820      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a6e:	d012      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a74:	d81a      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d022      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a7e:	d115      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	3308      	adds	r3, #8
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fd29 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a94:	e015      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	3328      	adds	r3, #40	@ 0x28
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 fdd0 	bl	800a644 <RCCEx_PLL3_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008aaa:	e00a      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ab2:	e006      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ab4:	bf00      	nop
 8008ab6:	e004      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ab8:	bf00      	nop
 8008aba:	e002      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008abc:	bf00      	nop
 8008abe:	e000      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10e      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aca:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ace:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ada:	4a02      	ldr	r2, [pc, #8]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008adc:	430b      	orrs	r3, r1
 8008ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ae0:	e006      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008ae2:	bf00      	nop
 8008ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	d055      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b1c:	d033      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008b1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b22:	d82c      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b28:	d02f      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b2e:	d826      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b34:	d02b      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008b36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b3a:	d820      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b40:	d012      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b46:	d81a      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d022      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b50:	d115      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	3308      	adds	r3, #8
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fcc0 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b66:	e015      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6c:	3328      	adds	r3, #40	@ 0x28
 8008b6e:	2102      	movs	r1, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fd67 	bl	800a644 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e00a      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b84:	e006      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b86:	bf00      	nop
 8008b88:	e004      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b8a:	bf00      	nop
 8008b8c:	e002      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e000      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b9c:	4ba1      	ldr	r3, [pc, #644]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bac:	4a9d      	ldr	r2, [pc, #628]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bb2:	e003      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f002 0308 	and.w	r3, r2, #8
 8008bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	d01e      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be8:	d10c      	bne.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	3328      	adds	r3, #40	@ 0x28
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fd26 	bl	800a644 <RCCEx_PLL3_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c04:	4b87      	ldr	r3, [pc, #540]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c14:	4a83      	ldr	r2, [pc, #524]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c16:	430b      	orrs	r3, r1
 8008c18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f002 0310 	and.w	r3, r2, #16
 8008c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d01e      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c46:	d10c      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4c:	3328      	adds	r3, #40	@ 0x28
 8008c4e:	2102      	movs	r1, #2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 fcf7 	bl	800a644 <RCCEx_PLL3_Config>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c62:	4b70      	ldr	r3, [pc, #448]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c72:	4a6c      	ldr	r2, [pc, #432]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c92:	460b      	mov	r3, r1
 8008c94:	4313      	orrs	r3, r2
 8008c96:	d03e      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca4:	d022      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008caa:	d81b      	bhi.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb4:	d00b      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008cb6:	e015      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 fc0d 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ccc:	e00f      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd2:	3328      	adds	r3, #40	@ 0x28
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fcb4 	bl	800a644 <RCCEx_PLL3_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ce2:	e004      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cea:	e000      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10b      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d06:	4a47      	ldr	r2, [pc, #284]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d0c:	e003      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d24:	2300      	movs	r3, #0
 8008d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d03b      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d3e:	d01f      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008d40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d44:	d818      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d4a:	d003      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d50:	d007      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008d52:	e011      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d54:	4b33      	ldr	r3, [pc, #204]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d58:	4a32      	ldr	r2, [pc, #200]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d60:	e00f      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d66:	3328      	adds	r3, #40	@ 0x28
 8008d68:	2101      	movs	r1, #1
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fc6a 	bl	800a644 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d76:	e004      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d7e:	e000      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d8a:	4b26      	ldr	r3, [pc, #152]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d9a:	4a22      	ldr	r2, [pc, #136]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008db8:	2300      	movs	r3, #0
 8008dba:	677b      	str	r3, [r7, #116]	@ 0x74
 8008dbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d034      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd4:	d007      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008dd6:	e011      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	4a11      	ldr	r2, [pc, #68]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008de4:	e00e      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dea:	3308      	adds	r3, #8
 8008dec:	2102      	movs	r1, #2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fb76 	bl	800a4e0 <RCCEx_PLL2_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dfa:	e003      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e1a:	4a02      	ldr	r2, [pc, #8]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e20:	e006      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008e22:	bf00      	nop
 8008e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e3e:	2300      	movs	r3, #0
 8008e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d00c      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e50:	3328      	adds	r3, #40	@ 0x28
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fbf5 	bl	800a644 <RCCEx_PLL3_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e72:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e74:	2300      	movs	r3, #0
 8008e76:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	d038      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e8e:	d018      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e94:	d811      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9a:	d014      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea0:	d80b      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eaa:	d106      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eac:	4bc3      	ldr	r3, [pc, #780]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	4ac2      	ldr	r2, [pc, #776]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008eb8:	e008      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ec0:	e004      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ec2:	bf00      	nop
 8008ec4:	e002      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ec6:	bf00      	nop
 8008ec8:	e000      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ed4:	4bb9      	ldr	r3, [pc, #740]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee4:	4ab5      	ldr	r2, [pc, #724]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eea:	e003      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f02:	2300      	movs	r3, #0
 8008f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f10:	4baa      	ldr	r3, [pc, #680]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1e:	4aa7      	ldr	r2, [pc, #668]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008f30:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f32:	2300      	movs	r3, #0
 8008f34:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	d00a      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008f40:	4b9e      	ldr	r3, [pc, #632]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008f50:	4a9a      	ldr	r2, [pc, #616]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f52:	430b      	orrs	r3, r1
 8008f54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f64:	2300      	movs	r3, #0
 8008f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d009      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f72:	4b92      	ldr	r3, [pc, #584]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f80:	4a8e      	ldr	r2, [pc, #568]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f82:	430b      	orrs	r3, r1
 8008f84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f92:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f94:	2300      	movs	r3, #0
 8008f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d00e      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fa2:	4b86      	ldr	r3, [pc, #536]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	4a85      	ldr	r2, [pc, #532]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fac:	6113      	str	r3, [r2, #16]
 8008fae:	4b83      	ldr	r3, [pc, #524]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb0:	6919      	ldr	r1, [r3, #16]
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008fba:	4a80      	ldr	r2, [pc, #512]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d009      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fdc:	4b77      	ldr	r3, [pc, #476]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	4a74      	ldr	r2, [pc, #464]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ffe:	2300      	movs	r3, #0
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
 8009002:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009006:	460b      	mov	r3, r1
 8009008:	4313      	orrs	r3, r2
 800900a:	d00a      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800900c:	4b6b      	ldr	r3, [pc, #428]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800900e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009010:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800901c:	4a67      	ldr	r2, [pc, #412]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800901e:	430b      	orrs	r3, r1
 8009020:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	2100      	movs	r1, #0
 800902c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009034:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009038:	460b      	mov	r3, r1
 800903a:	4313      	orrs	r3, r2
 800903c:	d011      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009042:	3308      	adds	r3, #8
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fa4a 	bl	800a4e0 <RCCEx_PLL2_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800905e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	2100      	movs	r1, #0
 800906c:	6239      	str	r1, [r7, #32]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
 8009074:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009078:	460b      	mov	r3, r1
 800907a:	4313      	orrs	r3, r2
 800907c:	d011      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800907e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009082:	3308      	adds	r3, #8
 8009084:	2101      	movs	r1, #1
 8009086:	4618      	mov	r0, r3
 8009088:	f001 fa2a 	bl	800a4e0 <RCCEx_PLL2_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	2100      	movs	r1, #0
 80090ac:	61b9      	str	r1, [r7, #24]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80090b8:	460b      	mov	r3, r1
 80090ba:	4313      	orrs	r3, r2
 80090bc:	d011      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	3308      	adds	r3, #8
 80090c4:	2102      	movs	r1, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 fa0a 	bl	800a4e0 <RCCEx_PLL2_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	2100      	movs	r1, #0
 80090ec:	6139      	str	r1, [r7, #16]
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090f8:	460b      	mov	r3, r1
 80090fa:	4313      	orrs	r3, r2
 80090fc:	d011      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009102:	3328      	adds	r3, #40	@ 0x28
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fa9c 	bl	800a644 <RCCEx_PLL3_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800911e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	2100      	movs	r1, #0
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	f003 0310 	and.w	r3, r3, #16
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009138:	460b      	mov	r3, r1
 800913a:	4313      	orrs	r3, r2
 800913c:	d011      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009142:	3328      	adds	r3, #40	@ 0x28
 8009144:	2101      	movs	r1, #1
 8009146:	4618      	mov	r0, r3
 8009148:	f001 fa7c 	bl	800a644 <RCCEx_PLL3_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	2100      	movs	r1, #0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	607b      	str	r3, [r7, #4]
 8009174:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009178:	460b      	mov	r3, r1
 800917a:	4313      	orrs	r3, r2
 800917c:	d011      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	3328      	adds	r3, #40	@ 0x28
 8009184:	2102      	movs	r1, #2
 8009186:	4618      	mov	r0, r3
 8009188:	f001 fa5c 	bl	800a644 <RCCEx_PLL3_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80091a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80091b6:	46bd      	mov	sp, r7
 80091b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091bc:	58024400 	.word	0x58024400

080091c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b090      	sub	sp, #64	@ 0x40
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80091d2:	430b      	orrs	r3, r1
 80091d4:	f040 8094 	bne.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80091d8:	4b9e      	ldr	r3, [pc, #632]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	f200 8087 	bhi.w	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009205 	.word	0x08009205
 80091f4:	0800922d 	.word	0x0800922d
 80091f8:	08009255 	.word	0x08009255
 80091fc:	080092f1 	.word	0x080092f1
 8009200:	0800927d 	.word	0x0800927d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009204:	4b93      	ldr	r3, [pc, #588]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800920c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009210:	d108      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009216:	4618      	mov	r0, r3
 8009218:	f001 f810 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009220:	f000 bd45 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009228:	f000 bd41 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800922c:	4b89      	ldr	r3, [pc, #548]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009238:	d108      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800923a:	f107 0318 	add.w	r3, r7, #24
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fd54 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009248:	f000 bd31 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009250:	f000 bd2d 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009254:	4b7f      	ldr	r3, [pc, #508]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009260:	d108      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fe94 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009270:	f000 bd1d 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009278:	f000 bd19 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800927c:	4b75      	ldr	r3, [pc, #468]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800927e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009280:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009286:	4b73      	ldr	r3, [pc, #460]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b04      	cmp	r3, #4
 8009290:	d10c      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009294:	2b00      	cmp	r3, #0
 8009296:	d109      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009298:	4b6e      	ldr	r3, [pc, #440]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	08db      	lsrs	r3, r3, #3
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	4a6d      	ldr	r2, [pc, #436]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80092a4:	fa22 f303 	lsr.w	r3, r2, r3
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092aa:	e01f      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ac:	4b69      	ldr	r3, [pc, #420]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b8:	d106      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80092ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c0:	d102      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092c2:	4b66      	ldr	r3, [pc, #408]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80092c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c6:	e011      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092c8:	4b62      	ldr	r3, [pc, #392]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092d4:	d106      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80092d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092dc:	d102      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092de:	4b60      	ldr	r3, [pc, #384]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e2:	e003      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092e8:	f000 bce1 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ec:	f000 bcdf 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092f0:	4b5c      	ldr	r3, [pc, #368]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f4:	f000 bcdb 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	f000 bcd7 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009304:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009308:	430b      	orrs	r3, r1
 800930a:	f040 80ad 	bne.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800930e:	4b51      	ldr	r3, [pc, #324]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009312:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009316:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800931e:	d056      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	f200 8090 	bhi.w	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	2bc0      	cmp	r3, #192	@ 0xc0
 800932e:	f000 8088 	beq.w	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2bc0      	cmp	r3, #192	@ 0xc0
 8009336:	f200 8088 	bhi.w	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	2b80      	cmp	r3, #128	@ 0x80
 800933e:	d032      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	2b80      	cmp	r3, #128	@ 0x80
 8009344:	f200 8081 	bhi.w	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	2b40      	cmp	r3, #64	@ 0x40
 8009352:	d014      	beq.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009354:	e079      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009356:	4b3f      	ldr	r3, [pc, #252]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009362:	d108      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f000 ff67 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800936e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009372:	f000 bc9c 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937a:	f000 bc98 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937e:	4b35      	ldr	r3, [pc, #212]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938a:	d108      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938c:	f107 0318 	add.w	r3, r7, #24
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fcab 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939a:	f000 bc88 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a2:	f000 bc84 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b2:	d108      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fdeb 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093c2:	f000 bc74 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ca:	f000 bc70 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093ce:	4b21      	ldr	r3, [pc, #132]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d10c      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	08db      	lsrs	r3, r3, #3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	4a18      	ldr	r2, [pc, #96]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093fc:	e01f      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093fe:	4b15      	ldr	r3, [pc, #84]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800940a:	d106      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800940c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009412:	d102      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009414:	4b11      	ldr	r3, [pc, #68]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009418:	e011      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800941a:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009426:	d106      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800942a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942e:	d102      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009430:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009434:	e003      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800943a:	f000 bc38 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800943e:	f000 bc36 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009442:	4b08      	ldr	r3, [pc, #32]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009446:	f000 bc32 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944e:	f000 bc2e 	b.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009452:	bf00      	nop
 8009454:	58024400 	.word	0x58024400
 8009458:	03d09000 	.word	0x03d09000
 800945c:	003d0900 	.word	0x003d0900
 8009460:	017d7840 	.word	0x017d7840
 8009464:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800946c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009470:	430b      	orrs	r3, r1
 8009472:	f040 809c 	bne.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009476:	4b9e      	ldr	r3, [pc, #632]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800947a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800947e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009486:	d054      	beq.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800948e:	f200 808b 	bhi.w	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009498:	f000 8083 	beq.w	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094a2:	f200 8081 	bhi.w	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094ac:	d02f      	beq.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094b4:	d878      	bhi.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094c2:	d012      	beq.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80094c4:	e070      	b.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094c6:	4b8a      	ldr	r3, [pc, #552]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094d2:	d107      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 feaf 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094e2:	e3e4      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e8:	e3e1      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ea:	4b81      	ldr	r3, [pc, #516]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f6:	d107      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f8:	f107 0318 	add.w	r3, r7, #24
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fbf5 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009506:	e3d2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800950c:	e3cf      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800950e:	4b78      	ldr	r3, [pc, #480]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951a:	d107      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fd37 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800952a:	e3c0      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e3bd      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009532:	4b6f      	ldr	r3, [pc, #444]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800953a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800953c:	4b6c      	ldr	r3, [pc, #432]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b04      	cmp	r3, #4
 8009546:	d10c      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800954e:	4b68      	ldr	r3, [pc, #416]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	08db      	lsrs	r3, r3, #3
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	4a66      	ldr	r2, [pc, #408]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800955a:	fa22 f303 	lsr.w	r3, r2, r3
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009560:	e01e      	b.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009562:	4b63      	ldr	r3, [pc, #396]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800956e:	d106      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009576:	d102      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009578:	4b5f      	ldr	r3, [pc, #380]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800957c:	e010      	b.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800957e:	4b5c      	ldr	r3, [pc, #368]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958a:	d106      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800958c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009592:	d102      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009594:	4b59      	ldr	r3, [pc, #356]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009598:	e002      	b.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800959e:	e386      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095a0:	e385      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095a2:	4b57      	ldr	r3, [pc, #348]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80095a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a6:	e382      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ac:	e37f      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80095b6:	430b      	orrs	r3, r1
 80095b8:	f040 80a7 	bne.w	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80095bc:	4b4c      	ldr	r3, [pc, #304]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80095c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095cc:	d055      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095d4:	f200 8096 	bhi.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095de:	f000 8084 	beq.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095e8:	f200 808c 	bhi.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095f2:	d030      	beq.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095fa:	f200 8083 	bhi.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800960a:	d012      	beq.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800960c:	e07a      	b.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800960e:	4b38      	ldr	r3, [pc, #224]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800961a:	d107      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800961c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fe0b 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800962a:	e340      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009630:	e33d      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009632:	4b2f      	ldr	r3, [pc, #188]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800963a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800963e:	d107      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009640:	f107 0318 	add.w	r3, r7, #24
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fb51 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964e:	e32e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009654:	e32b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009656:	4b26      	ldr	r3, [pc, #152]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800965e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009662:	d107      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009664:	f107 030c 	add.w	r3, r7, #12
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fc93 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009672:	e31c      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009678:	e319      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800967a:	4b1d      	ldr	r3, [pc, #116]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800967c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800967e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009684:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b04      	cmp	r3, #4
 800968e:	d10c      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009696:	4b16      	ldr	r3, [pc, #88]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	08db      	lsrs	r3, r3, #3
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	4a14      	ldr	r2, [pc, #80]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096a8:	e01e      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096aa:	4b11      	ldr	r3, [pc, #68]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b6:	d106      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80096b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096be:	d102      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c4:	e010      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096c6:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096d2:	d106      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096da:	d102      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096dc:	4b07      	ldr	r3, [pc, #28]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096e0:	e002      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096e6:	e2e2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096e8:	e2e1      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096ea:	4b05      	ldr	r3, [pc, #20]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ee:	e2de      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096f0:	58024400 	.word	0x58024400
 80096f4:	03d09000 	.word	0x03d09000
 80096f8:	003d0900 	.word	0x003d0900
 80096fc:	017d7840 	.word	0x017d7840
 8009700:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e2d1      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800970a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009712:	430b      	orrs	r3, r1
 8009714:	f040 809c 	bne.w	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009718:	4b93      	ldr	r3, [pc, #588]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800971a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800971c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009720:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009728:	d054      	beq.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009730:	f200 808b 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800973a:	f000 8083 	beq.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009744:	f200 8081 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800974e:	d02f      	beq.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009756:	d878      	bhi.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009764:	d012      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009766:	e070      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009768:	4b7f      	ldr	r3, [pc, #508]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009774:	d107      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fd5e 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009784:	e293      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978a:	e290      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800978c:	4b76      	ldr	r3, [pc, #472]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009798:	d107      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800979a:	f107 0318 	add.w	r3, r7, #24
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 faa4 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a8:	e281      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ae:	e27e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097b0:	4b6d      	ldr	r3, [pc, #436]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097bc:	d107      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097be:	f107 030c 	add.w	r3, r7, #12
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fbe6 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097cc:	e26f      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d2:	e26c      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097d4:	4b64      	ldr	r3, [pc, #400]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097de:	4b62      	ldr	r3, [pc, #392]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d10c      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80097ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d109      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097f0:	4b5d      	ldr	r3, [pc, #372]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	08db      	lsrs	r3, r3, #3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	4a5c      	ldr	r2, [pc, #368]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009802:	e01e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009804:	4b58      	ldr	r3, [pc, #352]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800980c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009810:	d106      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009818:	d102      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800981a:	4b55      	ldr	r3, [pc, #340]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800981c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800981e:	e010      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009820:	4b51      	ldr	r3, [pc, #324]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800982c:	d106      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800982e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009834:	d102      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009836:	4b4f      	ldr	r3, [pc, #316]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800983a:	e002      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009840:	e235      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009842:	e234      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009844:	4b4c      	ldr	r3, [pc, #304]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009848:	e231      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800984e:	e22e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009854:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009858:	430b      	orrs	r3, r1
 800985a:	f040 808f 	bne.w	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800985e:	4b42      	ldr	r3, [pc, #264]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009862:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009866:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800986e:	d06b      	beq.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009876:	d874      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800987e:	d056      	beq.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009886:	d86c      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800988e:	d03b      	beq.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009896:	d864      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800989e:	d021      	beq.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098a6:	d85c      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80098ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b4:	d004      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80098b6:	e054      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fe fa0a 	bl	8007cd0 <HAL_RCC_GetPCLK1Freq>
 80098bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098be:	e1f6      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c0:	4b29      	ldr	r3, [pc, #164]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ce:	f107 0318 	add.w	r3, r7, #24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fa0a 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098dc:	e1e7      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e2:	e1e4      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098e4:	4b20      	ldr	r3, [pc, #128]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f0:	d107      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f2:	f107 030c 	add.w	r3, r7, #12
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fb4c 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009900:	e1d5      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009906:	e1d2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009908:	4b17      	ldr	r3, [pc, #92]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b04      	cmp	r3, #4
 8009912:	d109      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009914:	4b14      	ldr	r3, [pc, #80]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	08db      	lsrs	r3, r3, #3
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	4a13      	ldr	r2, [pc, #76]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009926:	e1c2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e1bf      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800992e:	4b0e      	ldr	r3, [pc, #56]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800993a:	d102      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800993c:	4b0c      	ldr	r3, [pc, #48]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009940:	e1b5      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009946:	e1b2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009948:	4b07      	ldr	r3, [pc, #28]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009954:	d102      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009956:	4b07      	ldr	r3, [pc, #28]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995a:	e1a8      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e1a5      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009966:	e1a2      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009968:	58024400 	.word	0x58024400
 800996c:	03d09000 	.word	0x03d09000
 8009970:	003d0900 	.word	0x003d0900
 8009974:	017d7840 	.word	0x017d7840
 8009978:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800997c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009980:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009984:	430b      	orrs	r3, r1
 8009986:	d173      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009988:	4b9c      	ldr	r3, [pc, #624]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800998a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009990:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009998:	d02f      	beq.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800999a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a0:	d863      	bhi.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d004      	beq.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ae:	d012      	beq.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80099b0:	e05b      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099b2:	4b92      	ldr	r3, [pc, #584]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099be:	d107      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099c0:	f107 0318 	add.w	r3, r7, #24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 f991 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ce:	e16e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d4:	e16b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d6:	4b89      	ldr	r3, [pc, #548]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e2:	d107      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fad3 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099f2:	e15c      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f8:	e159      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099fa:	4b80      	ldr	r3, [pc, #512]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a04:	4b7d      	ldr	r3, [pc, #500]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d10c      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a16:	4b79      	ldr	r3, [pc, #484]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	08db      	lsrs	r3, r3, #3
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	4a77      	ldr	r2, [pc, #476]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009a22:	fa22 f303 	lsr.w	r3, r2, r3
 8009a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a28:	e01e      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a2a:	4b74      	ldr	r3, [pc, #464]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a36:	d106      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a3e:	d102      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a40:	4b70      	ldr	r3, [pc, #448]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a44:	e010      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a46:	4b6d      	ldr	r3, [pc, #436]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a52:	d106      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a60:	e002      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a66:	e122      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a68:	e121      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6e:	e11e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a74:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	d133      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a92:	d012      	beq.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009a94:	e023      	b.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a96:	4b59      	ldr	r3, [pc, #356]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009aa2:	d107      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fbc7 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ab2:	e0fc      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e0f9      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aba:	4b50      	ldr	r3, [pc, #320]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ac6:	d107      	bne.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac8:	f107 0318 	add.w	r3, r7, #24
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f90d 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad6:	e0ea      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009adc:	e0e7      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae2:	e0e4      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009aec:	430b      	orrs	r3, r1
 8009aee:	f040 808d 	bne.w	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009af2:	4b42      	ldr	r3, [pc, #264]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b02:	d06b      	beq.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b0a:	d874      	bhi.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b12:	d056      	beq.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b1a:	d86c      	bhi.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b22:	d03b      	beq.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b2a:	d864      	bhi.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b32:	d021      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b3a:	d85c      	bhi.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d004      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b48:	d004      	beq.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009b4a:	e054      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b4c:	f000 f8b8 	bl	8009cc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b52:	e0ac      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b54:	4b29      	ldr	r3, [pc, #164]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b60:	d107      	bne.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b62:	f107 0318 	add.w	r3, r7, #24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f8c0 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b70:	e09d      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b76:	e09a      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b78:	4b20      	ldr	r3, [pc, #128]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b84:	d107      	bne.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b86:	f107 030c 	add.w	r3, r7, #12
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fa02 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b94:	e08b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9a:	e088      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b9c:	4b17      	ldr	r3, [pc, #92]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d109      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba8:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	08db      	lsrs	r3, r3, #3
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	4a13      	ldr	r2, [pc, #76]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bba:	e078      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc0:	e075      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bce:	d102      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd4:	e06b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bda:	e068      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bdc:	4b07      	ldr	r3, [pc, #28]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be8:	d102      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009bea:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bee:	e05e      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf4:	e05b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfa:	e058      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	03d09000 	.word	0x03d09000
 8009c04:	003d0900 	.word	0x003d0900
 8009c08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009c14:	430b      	orrs	r3, r1
 8009c16:	d148      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009c18:	4b27      	ldr	r3, [pc, #156]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c28:	d02a      	beq.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c30:	d838      	bhi.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c3e:	d00d      	beq.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009c40:	e030      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c42:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c4e:	d102      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009c50:	4b1a      	ldr	r3, [pc, #104]	@ (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c54:	e02b      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c5a:	e028      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c5c:	4b16      	ldr	r3, [pc, #88]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c68:	d107      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fae4 	bl	800a23c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c78:	e019      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7e:	e016      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c80:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c8c:	d107      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8e:	f107 0318 	add.w	r3, r7, #24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f82a 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9c:	e007      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca2:	e004      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e001      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3740      	adds	r7, #64	@ 0x40
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	58024400 	.word	0x58024400
 8009cbc:	017d7840 	.word	0x017d7840

08009cc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cc4:	f7fd ffd4 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	091b      	lsrs	r3, r3, #4
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	4904      	ldr	r1, [pc, #16]	@ (8009ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cd6:	5ccb      	ldrb	r3, [r1, r3]
 8009cd8:	f003 031f 	and.w	r3, r3, #31
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	0801ea60 	.word	0x0801ea60

08009cec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	@ 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cfe:	4b9f      	ldr	r3, [pc, #636]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d02:	0b1b      	lsrs	r3, r3, #12
 8009d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d0a:	4b9c      	ldr	r3, [pc, #624]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0e:	091b      	lsrs	r3, r3, #4
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d16:	4b99      	ldr	r3, [pc, #612]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8111 	beq.w	8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	f000 8083 	beq.w	8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f200 80a1 	bhi.w	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d056      	beq.n	8009e04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d56:	e099      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d58:	4b88      	ldr	r3, [pc, #544]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02d      	beq.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d64:	4b85      	ldr	r3, [pc, #532]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	08db      	lsrs	r3, r3, #3
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	4a84      	ldr	r2, [pc, #528]	@ (8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d70:	fa22 f303 	lsr.w	r3, r2, r3
 8009d74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dbe:	e087      	b.n	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e02:	e065      	b.n	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b59      	ldr	r3, [pc, #356]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e46:	e043      	b.n	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b48      	ldr	r3, [pc, #288]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e8a:	e021      	b.n	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9e:	4b37      	ldr	r3, [pc, #220]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ece:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 2a90 	vmov	r2, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009efe:	4b1f      	ldr	r3, [pc, #124]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f02:	0c1b      	lsrs	r3, r3, #16
 8009f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 2a90 	vmov	r2, s15
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f2c:	4b13      	ldr	r3, [pc, #76]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f30:	0e1b      	lsrs	r3, r3, #24
 8009f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f52:	ee17 2a90 	vmov	r2, s15
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f5a:	e008      	b.n	8009f6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	3724      	adds	r7, #36	@ 0x24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	03d09000 	.word	0x03d09000
 8009f84:	46000000 	.word	0x46000000
 8009f88:	4c742400 	.word	0x4c742400
 8009f8c:	4a742400 	.word	0x4a742400
 8009f90:	4bbebc20 	.word	0x4bbebc20

08009f94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	@ 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f9c:	4ba1      	ldr	r3, [pc, #644]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009fa6:	4b9f      	ldr	r3, [pc, #636]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009faa:	0d1b      	lsrs	r3, r3, #20
 8009fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fb2:	4b9c      	ldr	r3, [pc, #624]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb6:	0a1b      	lsrs	r3, r3, #8
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fbe:	4b99      	ldr	r3, [pc, #612]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc2:	08db      	lsrs	r3, r3, #3
 8009fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	fb02 f303 	mul.w	r3, r2, r3
 8009fce:	ee07 3a90 	vmov	s15, r3
 8009fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 8111 	beq.w	800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	f000 8083 	beq.w	800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	f200 80a1 	bhi.w	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d056      	beq.n	800a0ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ffe:	e099      	b.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a000:	4b88      	ldr	r3, [pc, #544]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d02d      	beq.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a00c:	4b85      	ldr	r3, [pc, #532]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	08db      	lsrs	r3, r3, #3
 800a012:	f003 0303 	and.w	r3, r3, #3
 800a016:	4a84      	ldr	r2, [pc, #528]	@ (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a018:	fa22 f303 	lsr.w	r3, r2, r3
 800a01c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b7b      	ldr	r3, [pc, #492]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a066:	e087      	b.n	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07a:	4b6a      	ldr	r3, [pc, #424]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0aa:	e065      	b.n	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b59      	ldr	r3, [pc, #356]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ee:	e043      	b.n	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a102:	4b48      	ldr	r3, [pc, #288]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a112:	ed97 6a03 	vldr	s12, [r7, #12]
 800a116:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a132:	e021      	b.n	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a146:	4b37      	ldr	r3, [pc, #220]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a156:	ed97 6a03 	vldr	s12, [r7, #12]
 800a15a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a176:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a178:	4b2a      	ldr	r3, [pc, #168]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17c:	0a5b      	lsrs	r3, r3, #9
 800a17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a18e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a192:	edd7 6a07 	vldr	s13, [r7, #28]
 800a196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a19e:	ee17 2a90 	vmov	r2, s15
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a1a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b0:	ee07 3a90 	vmov	s15, r3
 800a1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1cc:	ee17 2a90 	vmov	r2, s15
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1d4:	4b13      	ldr	r3, [pc, #76]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d8:	0e1b      	lsrs	r3, r3, #24
 800a1da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1fa:	ee17 2a90 	vmov	r2, s15
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a202:	e008      	b.n	800a216 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	609a      	str	r2, [r3, #8]
}
 800a216:	bf00      	nop
 800a218:	3724      	adds	r7, #36	@ 0x24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	58024400 	.word	0x58024400
 800a228:	03d09000 	.word	0x03d09000
 800a22c:	46000000 	.word	0x46000000
 800a230:	4c742400 	.word	0x4c742400
 800a234:	4a742400 	.word	0x4a742400
 800a238:	4bbebc20 	.word	0x4bbebc20

0800a23c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b089      	sub	sp, #36	@ 0x24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a244:	4ba0      	ldr	r3, [pc, #640]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a24e:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a252:	091b      	lsrs	r3, r3, #4
 800a254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a258:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a25a:	4b9b      	ldr	r3, [pc, #620]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a264:	4b98      	ldr	r3, [pc, #608]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a268:	08db      	lsrs	r3, r3, #3
 800a26a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	fb02 f303 	mul.w	r3, r2, r3
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8111 	beq.w	800a4aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	f000 8083 	beq.w	800a396 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b02      	cmp	r3, #2
 800a294:	f200 80a1 	bhi.w	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d056      	beq.n	800a352 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a2a4:	e099      	b.n	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a6:	4b88      	ldr	r3, [pc, #544]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d02d      	beq.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2b2:	4b85      	ldr	r3, [pc, #532]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	08db      	lsrs	r3, r3, #3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	4a83      	ldr	r2, [pc, #524]	@ (800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2dc:	4b7a      	ldr	r3, [pc, #488]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a30c:	e087      	b.n	800a41e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a318:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a320:	4b69      	ldr	r3, [pc, #420]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a330:	ed97 6a03 	vldr	s12, [r7, #12]
 800a334:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a350:	e065      	b.n	800a41e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a364:	4b58      	ldr	r3, [pc, #352]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a374:	ed97 6a03 	vldr	s12, [r7, #12]
 800a378:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a37c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a394:	e043      	b.n	800a41e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a4dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a3a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a8:	4b47      	ldr	r3, [pc, #284]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3d8:	e021      	b.n	800a41e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	ee07 3a90 	vmov	s15, r3
 800a3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a3e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ec:	4b36      	ldr	r3, [pc, #216]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f4:	ee07 3a90 	vmov	s15, r3
 800a3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a400:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a40c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a41c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a41e:	4b2a      	ldr	r3, [pc, #168]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a422:	0a5b      	lsrs	r3, r3, #9
 800a424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a434:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a438:	edd7 6a07 	vldr	s13, [r7, #28]
 800a43c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a444:	ee17 2a90 	vmov	r2, s15
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a44c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a450:	0c1b      	lsrs	r3, r3, #16
 800a452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a462:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a466:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a46e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a472:	ee17 2a90 	vmov	r2, s15
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a47a:	4b13      	ldr	r3, [pc, #76]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a47e:	0e1b      	lsrs	r3, r3, #24
 800a480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a484:	ee07 3a90 	vmov	s15, r3
 800a488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a490:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a494:	edd7 6a07 	vldr	s13, [r7, #28]
 800a498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a0:	ee17 2a90 	vmov	r2, s15
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a4a8:	e008      	b.n	800a4bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	609a      	str	r2, [r3, #8]
}
 800a4bc:	bf00      	nop
 800a4be:	3724      	adds	r7, #36	@ 0x24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	03d09000 	.word	0x03d09000
 800a4d0:	46000000 	.word	0x46000000
 800a4d4:	4c742400 	.word	0x4c742400
 800a4d8:	4a742400 	.word	0x4a742400
 800a4dc:	4bbebc20 	.word	0x4bbebc20

0800a4e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ee:	4b53      	ldr	r3, [pc, #332]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d101      	bne.n	800a4fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e099      	b.n	800a632 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a4e      	ldr	r2, [pc, #312]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a504:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a50a:	f7f9 f975 	bl	80037f8 <HAL_GetTick>
 800a50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a510:	e008      	b.n	800a524 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a512:	f7f9 f971 	bl	80037f8 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d901      	bls.n	800a524 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e086      	b.n	800a632 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a524:	4b45      	ldr	r3, [pc, #276]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1f0      	bne.n	800a512 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a530:	4b42      	ldr	r3, [pc, #264]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	031b      	lsls	r3, r3, #12
 800a53e:	493f      	ldr	r1, [pc, #252]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a540:	4313      	orrs	r3, r2
 800a542:	628b      	str	r3, [r1, #40]	@ 0x28
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	3b01      	subs	r3, #1
 800a554:	025b      	lsls	r3, r3, #9
 800a556:	b29b      	uxth	r3, r3
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	3b01      	subs	r3, #1
 800a560:	041b      	lsls	r3, r3, #16
 800a562:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a566:	431a      	orrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	061b      	lsls	r3, r3, #24
 800a570:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a574:	4931      	ldr	r1, [pc, #196]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a576:	4313      	orrs	r3, r2
 800a578:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a57a:	4b30      	ldr	r3, [pc, #192]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	492d      	ldr	r1, [pc, #180]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a58c:	4b2b      	ldr	r3, [pc, #172]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a590:	f023 0220 	bic.w	r2, r3, #32
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	4928      	ldr	r1, [pc, #160]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a59e:	4b27      	ldr	r3, [pc, #156]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a2:	4a26      	ldr	r2, [pc, #152]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5a4:	f023 0310 	bic.w	r3, r3, #16
 800a5a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a5aa:	4b24      	ldr	r3, [pc, #144]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5ae:	4b24      	ldr	r3, [pc, #144]	@ (800a640 <RCCEx_PLL2_Config+0x160>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	69d2      	ldr	r2, [r2, #28]
 800a5b6:	00d2      	lsls	r2, r2, #3
 800a5b8:	4920      	ldr	r1, [pc, #128]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5be:	4b1f      	ldr	r3, [pc, #124]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5c4:	f043 0310 	orr.w	r3, r3, #16
 800a5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d4:	4a19      	ldr	r2, [pc, #100]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5dc:	e00f      	b.n	800a5fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d106      	bne.n	800a5f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5e4:	4b15      	ldr	r3, [pc, #84]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e8:	4a14      	ldr	r2, [pc, #80]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5f0:	e005      	b.n	800a5fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5f2:	4b12      	ldr	r3, [pc, #72]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	4a11      	ldr	r2, [pc, #68]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a5f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a0e      	ldr	r2, [pc, #56]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a60a:	f7f9 f8f5 	bl	80037f8 <HAL_GetTick>
 800a60e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a610:	e008      	b.n	800a624 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a612:	f7f9 f8f1 	bl	80037f8 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d901      	bls.n	800a624 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e006      	b.n	800a632 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a624:	4b05      	ldr	r3, [pc, #20]	@ (800a63c <RCCEx_PLL2_Config+0x15c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0f0      	beq.n	800a612 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	58024400 	.word	0x58024400
 800a640:	ffff0007 	.word	0xffff0007

0800a644 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a652:	4b53      	ldr	r3, [pc, #332]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d101      	bne.n	800a662 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e099      	b.n	800a796 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a662:	4b4f      	ldr	r3, [pc, #316]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a4e      	ldr	r2, [pc, #312]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a66c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a66e:	f7f9 f8c3 	bl	80037f8 <HAL_GetTick>
 800a672:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a674:	e008      	b.n	800a688 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a676:	f7f9 f8bf 	bl	80037f8 <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	2b02      	cmp	r3, #2
 800a682:	d901      	bls.n	800a688 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e086      	b.n	800a796 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a688:	4b45      	ldr	r3, [pc, #276]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1f0      	bne.n	800a676 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a694:	4b42      	ldr	r3, [pc, #264]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a698:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	051b      	lsls	r3, r3, #20
 800a6a2:	493f      	ldr	r1, [pc, #252]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	025b      	lsls	r3, r3, #9
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	061b      	lsls	r3, r3, #24
 800a6d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6d8:	4931      	ldr	r1, [pc, #196]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6de:	4b30      	ldr	r3, [pc, #192]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	492d      	ldr	r1, [pc, #180]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	4928      	ldr	r1, [pc, #160]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a702:	4b27      	ldr	r3, [pc, #156]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a706:	4a26      	ldr	r2, [pc, #152]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a70c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a70e:	4b24      	ldr	r3, [pc, #144]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a712:	4b24      	ldr	r3, [pc, #144]	@ (800a7a4 <RCCEx_PLL3_Config+0x160>)
 800a714:	4013      	ands	r3, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	69d2      	ldr	r2, [r2, #28]
 800a71a:	00d2      	lsls	r2, r2, #3
 800a71c:	4920      	ldr	r1, [pc, #128]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a722:	4b1f      	ldr	r3, [pc, #124]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a726:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a72c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d106      	bne.n	800a742 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a734:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a738:	4a19      	ldr	r2, [pc, #100]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a73a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a73e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a740:	e00f      	b.n	800a762 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d106      	bne.n	800a756 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a748:	4b15      	ldr	r3, [pc, #84]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74c:	4a14      	ldr	r2, [pc, #80]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a74e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a752:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a754:	e005      	b.n	800a762 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a756:	4b12      	ldr	r3, [pc, #72]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75a:	4a11      	ldr	r2, [pc, #68]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a75c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a760:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a762:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a0e      	ldr	r2, [pc, #56]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a76c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a76e:	f7f9 f843 	bl	80037f8 <HAL_GetTick>
 800a772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a774:	e008      	b.n	800a788 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a776:	f7f9 f83f 	bl	80037f8 <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	2b02      	cmp	r3, #2
 800a782:	d901      	bls.n	800a788 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e006      	b.n	800a796 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a788:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <RCCEx_PLL3_Config+0x15c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0f0      	beq.n	800a776 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a794:	7bfb      	ldrb	r3, [r7, #15]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	ffff0007 	.word	0xffff0007

0800a7a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	@ 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e075      	b.n	800a8a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7f7 feeb 	bl	80025a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f868 	bl	800a8b0 <HAL_SD_InitCard>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e05d      	b.n	800a8a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fdaf 	bl	800b354 <HAL_SD_GetCardStatus>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e052      	b.n	800a8a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a800:	7e3b      	ldrb	r3, [r7, #24]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a806:	7e7b      	ldrb	r3, [r7, #25]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a810:	2b01      	cmp	r3, #1
 800a812:	d10a      	bne.n	800a82a <HAL_SD_Init+0x82>
 800a814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <HAL_SD_Init+0x78>
 800a81a:	6a3b      	ldr	r3, [r7, #32]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a826:	659a      	str	r2, [r3, #88]	@ 0x58
 800a828:	e00b      	b.n	800a842 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d104      	bne.n	800a83c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a838:	659a      	str	r2, [r3, #88]	@ 0x58
 800a83a:	e002      	b.n	800a842 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fe6d 	bl	800b528 <HAL_SD_ConfigWideBusOperation>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e026      	b.n	800a8a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a858:	f7f8 ffce 	bl	80037f8 <HAL_GetTick>
 800a85c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a85e:	e011      	b.n	800a884 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a860:	f7f8 ffca 	bl	80037f8 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d109      	bne.n	800a884 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a876:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e010      	b.n	800a8a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 ff61 	bl	800b74c <HAL_SD_GetCardState>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d1e7      	bne.n	800a860 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3728      	adds	r7, #40	@ 0x28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b08d      	sub	sp, #52	@ 0x34
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a8c8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a8cc:	f04f 0100 	mov.w	r1, #0
 800a8d0:	f7fe fc76 	bl	80091c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a8ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e070      	b.n	800a9d2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	4a39      	ldr	r2, [pc, #228]	@ (800a9dc <HAL_SD_InitCard+0x12c>)
 800a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fa:	091b      	lsrs	r3, r3, #4
 800a8fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681c      	ldr	r4, [r3, #0]
 800a902:	466a      	mov	r2, sp
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a90c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a916:	4620      	mov	r0, r4
 800a918:	f005 f8a2 	bl	800fa60 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4618      	mov	r0, r3
 800a922:	f005 f8e5 	bl	800faf0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a932:	fbb2 f3f3 	udiv	r3, r2, r3
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a93e:	4a28      	ldr	r2, [pc, #160]	@ (800a9e0 <HAL_SD_InitCard+0x130>)
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	fbb2 f3f3 	udiv	r3, r2, r3
 800a946:	3301      	adds	r3, #1
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f8 ff61 	bl	8003810 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 ffea 	bl	800b928 <SD_PowerON>
 800a954:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	431a      	orrs	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e02e      	b.n	800a9d2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 ff09 	bl	800b78c <SD_InitCard>
 800a97a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	431a      	orrs	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e01b      	b.n	800a9d2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f005 f93a 	bl	800fc1c <SDMMC_CmdBlockLength>
 800a9a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00f      	beq.n	800a9d0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a9e4 <HAL_SD_InitCard+0x134>)
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	372c      	adds	r7, #44	@ 0x2c
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd90      	pop	{r4, r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	014f8b59 	.word	0x014f8b59
 800a9e0:	00012110 	.word	0x00012110
 800a9e4:	1fe00fff 	.word	0x1fe00fff

0800a9e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08c      	sub	sp, #48	@ 0x30
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d107      	bne.n	800aa10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e08d      	b.n	800ab2c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	f040 8086 	bne.w	800ab2a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	441a      	add	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d907      	bls.n	800aa42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa36:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e074      	b.n	800ab2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2203      	movs	r2, #3
 800aa46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	025a      	lsls	r2, r3, #9
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d002      	beq.n	800aa6e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800aa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6a:	025b      	lsls	r3, r3, #9
 800aa6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa6e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa72:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	025b      	lsls	r3, r3, #9
 800aa78:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa7a:	2390      	movs	r3, #144	@ 0x90
 800aa7c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa86:	2300      	movs	r3, #0
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f107 0210 	add.w	r2, r7, #16
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f005 f895 	bl	800fbc4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaa8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2201      	movs	r2, #1
 800aab8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d90a      	bls.n	800aad6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2282      	movs	r2, #130	@ 0x82
 800aac4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aacc:	4618      	mov	r0, r3
 800aace:	f005 f8eb 	bl	800fca8 <SDMMC_CmdReadMultiBlock>
 800aad2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800aad4:	e009      	b.n	800aaea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2281      	movs	r2, #129	@ 0x81
 800aada:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aae2:	4618      	mov	r0, r3
 800aae4:	f005 f8bd 	bl	800fc62 <SDMMC_CmdReadSingleBlock>
 800aae8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d012      	beq.n	800ab16 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a0f      	ldr	r2, [pc, #60]	@ (800ab34 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800aaf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	431a      	orrs	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e00a      	b.n	800ab2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800ab24:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	e000      	b.n	800ab2c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ab2a:	2302      	movs	r3, #2
  }
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3730      	adds	r7, #48	@ 0x30
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	1fe00fff 	.word	0x1fe00fff

0800ab38 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08c      	sub	sp, #48	@ 0x30
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d107      	bne.n	800ab60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e08d      	b.n	800ac7c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f040 8086 	bne.w	800ac7a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	441a      	add	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d907      	bls.n	800ab92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e074      	b.n	800ac7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2203      	movs	r2, #3
 800ab96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	025a      	lsls	r2, r3, #9
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d002      	beq.n	800abbe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abba:	025b      	lsls	r3, r3, #9
 800abbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abbe:	f04f 33ff 	mov.w	r3, #4294967295
 800abc2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	025b      	lsls	r3, r3, #9
 800abc8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800abca:	2390      	movs	r3, #144	@ 0x90
 800abcc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f107 0210 	add.w	r2, r7, #16
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f004 ffed 	bl	800fbc4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abf8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2201      	movs	r2, #1
 800ac08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d90a      	bls.n	800ac26 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	22a0      	movs	r2, #160	@ 0xa0
 800ac14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f005 f889 	bl	800fd34 <SDMMC_CmdWriteMultiBlock>
 800ac22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ac24:	e009      	b.n	800ac3a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2290      	movs	r2, #144	@ 0x90
 800ac2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac32:	4618      	mov	r0, r3
 800ac34:	f005 f85b 	bl	800fcee <SDMMC_CmdWriteSingleBlock>
 800ac38:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d012      	beq.n	800ac66 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a0f      	ldr	r2, [pc, #60]	@ (800ac84 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ac46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e00a      	b.n	800ac7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800ac74:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ac7a:	2302      	movs	r3, #2
  }
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3730      	adds	r7, #48	@ 0x30
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	1fe00fff 	.word	0x1fe00fff

0800ac88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d008      	beq.n	800acb6 <HAL_SD_IRQHandler+0x2e>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f926 	bl	800bf00 <SD_Read_IT>
 800acb4:	e19a      	b.n	800afec <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 80ac 	beq.w	800ae1e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acce:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4b59      	ldr	r3, [pc, #356]	@ (800ae40 <HAL_SD_IRQHandler+0x1b8>)
 800acdc:	400b      	ands	r3, r1
 800acde:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800acee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68da      	ldr	r2, [r3, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acfe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f003 0308 	and.w	r3, r3, #8
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d038      	beq.n	800ad7c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d104      	bne.n	800ad1e <HAL_SD_IRQHandler+0x96>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d011      	beq.n	800ad42 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f005 f82a 	bl	800fd7c <SDMMC_CmdStopTransfer>
 800ad28:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d008      	beq.n	800ad42 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	431a      	orrs	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f95b 	bl	800aff8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a3f      	ldr	r2, [pc, #252]	@ (800ae44 <HAL_SD_IRQHandler+0x1bc>)
 800ad48:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d104      	bne.n	800ad6c <HAL_SD_IRQHandler+0xe4>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f005 fcdd 	bl	801072c <HAL_SD_RxCpltCallback>
 800ad72:	e13b      	b.n	800afec <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f005 fccf 	bl	8010718 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad7a:	e137      	b.n	800afec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 8132 	beq.w	800afec <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2200      	movs	r2, #0
 800ad96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d104      	bne.n	800adb4 <HAL_SD_IRQHandler+0x12c>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d011      	beq.n	800add8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4618      	mov	r0, r3
 800adba:	f004 ffdf 	bl	800fd7c <SDMMC_CmdStopTransfer>
 800adbe:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d008      	beq.n	800add8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	431a      	orrs	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f910 	bl	800aff8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	2b00      	cmp	r3, #0
 800adee:	d104      	bne.n	800adfa <HAL_SD_IRQHandler+0x172>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f003 0320 	and.w	r3, r3, #32
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f005 fc8c 	bl	8010718 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <HAL_SD_IRQHandler+0x18e>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80eb 	beq.w	800afec <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f005 fc88 	bl	801072c <HAL_SD_RxCpltCallback>
}
 800ae1c:	e0e6      	b.n	800afec <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00d      	beq.n	800ae48 <HAL_SD_IRQHandler+0x1c0>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 f8a8 	bl	800bf8c <SD_Write_IT>
 800ae3c:	e0d6      	b.n	800afec <HAL_SD_IRQHandler+0x364>
 800ae3e:	bf00      	nop
 800ae40:	ffff3ec5 	.word	0xffff3ec5
 800ae44:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae4e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 809d 	beq.w	800af92 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6a:	f043 0202 	orr.w	r2, r3, #2
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae84:	f043 0208 	orr.w	r2, r3, #8
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae9e:	f043 0220 	orr.w	r2, r3, #32
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb8:	f043 0210 	orr.w	r2, r3, #16
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a4b      	ldr	r2, [pc, #300]	@ (800aff4 <HAL_SD_IRQHandler+0x36c>)
 800aec6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800aed6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aee6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af06:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f004 ff35 	bl	800fd7c <SDMMC_CmdStopTransfer>
 800af12:	4602      	mov	r2, r0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af18:	431a      	orrs	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af2c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af36:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f003 0308 	and.w	r3, r3, #8
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f851 	bl	800aff8 <HAL_SD_ErrorCallback>
}
 800af56:	e049      	b.n	800afec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d044      	beq.n	800afec <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af66:	2b00      	cmp	r3, #0
 800af68:	d040      	beq.n	800afec <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800af78:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f834 	bl	800aff8 <HAL_SD_ErrorCallback>
}
 800af90:	e02c      	b.n	800afec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d025      	beq.n	800afec <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afa8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10c      	bne.n	800afd2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 f84a 	bl	800c05c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800afc8:	e010      	b.n	800afec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f001 f832 	bl	800c034 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800afd0:	e00c      	b.n	800afec <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f833 	bl	800c048 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800afe2:	e003      	b.n	800afec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 f81b 	bl	800c020 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800afea:	e7ff      	b.n	800afec <HAL_SD_IRQHandler+0x364>
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	18000f3a 	.word	0x18000f3a

0800aff8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b01a:	0f9b      	lsrs	r3, r3, #30
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b026:	0e9b      	lsrs	r3, r3, #26
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b038:	0e1b      	lsrs	r3, r3, #24
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 0303 	and.w	r3, r3, #3
 800b040:	b2da      	uxtb	r2, r3
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b056:	0a1b      	lsrs	r3, r3, #8
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b062:	b2da      	uxtb	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b06c:	0d1b      	lsrs	r3, r3, #20
 800b06e:	b29a      	uxth	r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b078:	0c1b      	lsrs	r3, r3, #16
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 030f 	and.w	r3, r3, #15
 800b080:	b2da      	uxtb	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b08a:	0bdb      	lsrs	r3, r3, #15
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	b2da      	uxtb	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b09c:	0b9b      	lsrs	r3, r3, #14
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ae:	0b5b      	lsrs	r3, r3, #13
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c0:	0b1b      	lsrs	r3, r3, #12
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d163      	bne.n	800b1a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0e0:	009a      	lsls	r2, r3, #2
 800b0e2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800b0ec:	0f92      	lsrs	r2, r2, #30
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0f8:	0edb      	lsrs	r3, r3, #27
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	b2da      	uxtb	r2, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b10a:	0e1b      	lsrs	r3, r3, #24
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 0307 	and.w	r3, r3, #7
 800b112:	b2da      	uxtb	r2, r3
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b11c:	0d5b      	lsrs	r3, r3, #21
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	b2da      	uxtb	r2, r3
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b12e:	0c9b      	lsrs	r3, r3, #18
 800b130:	b2db      	uxtb	r3, r3
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	b2da      	uxtb	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b140:	0bdb      	lsrs	r3, r3, #15
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 0307 	and.w	r3, r3, #7
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	7e1b      	ldrb	r3, [r3, #24]
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	3302      	adds	r3, #2
 800b164:	2201      	movs	r2, #1
 800b166:	fa02 f303 	lsl.w	r3, r2, r3
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b16e:	fb03 f202 	mul.w	r2, r3, r2
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	7a1b      	ldrb	r3, [r3, #8]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	f003 030f 	and.w	r3, r3, #15
 800b180:	2201      	movs	r2, #1
 800b182:	409a      	lsls	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b190:	0a52      	lsrs	r2, r2, #9
 800b192:	fb03 f202 	mul.w	r2, r3, r2
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1a0:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1a2:	e031      	b.n	800b208 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d11d      	bne.n	800b1e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1b0:	041b      	lsls	r3, r3, #16
 800b1b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ba:	0c1b      	lsrs	r3, r3, #16
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	029a      	lsls	r2, r3, #10
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1e6:	e00f      	b.n	800b208 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a58      	ldr	r2, [pc, #352]	@ (800b350 <HAL_SD_GetCardCSD+0x344>)
 800b1ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e09d      	b.n	800b344 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b20c:	0b9b      	lsrs	r3, r3, #14
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	b2da      	uxtb	r2, r3
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b21e:	09db      	lsrs	r3, r3, #7
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b226:	b2da      	uxtb	r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b236:	b2da      	uxtb	r2, r3
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b240:	0fdb      	lsrs	r3, r3, #31
 800b242:	b2da      	uxtb	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b24c:	0f5b      	lsrs	r3, r3, #29
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	f003 0303 	and.w	r3, r3, #3
 800b254:	b2da      	uxtb	r2, r3
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b25e:	0e9b      	lsrs	r3, r3, #26
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	b2da      	uxtb	r2, r3
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b270:	0d9b      	lsrs	r3, r3, #22
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b282:	0d5b      	lsrs	r3, r3, #21
 800b284:	b2db      	uxtb	r3, r3
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b29e:	0c1b      	lsrs	r3, r3, #16
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2b2:	0bdb      	lsrs	r3, r3, #15
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2c6:	0b9b      	lsrs	r3, r3, #14
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2da:	0b5b      	lsrs	r3, r3, #13
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2ee:	0b1b      	lsrs	r3, r3, #12
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b302:	0a9b      	lsrs	r3, r3, #10
 800b304:	b2db      	uxtb	r3, r3
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b316:	0a1b      	lsrs	r3, r3, #8
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 0303 	and.w	r3, r3, #3
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b32a:	085b      	lsrs	r3, r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b332:	b2da      	uxtb	r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	1fe00fff 	.word	0x1fe00fff

0800b354 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b094      	sub	sp, #80	@ 0x50
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d101      	bne.n	800b374 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e0a7      	b.n	800b4c4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b374:	f107 0308 	add.w	r3, r7, #8
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fb62 	bl	800ba44 <SD_SendSDStatus>
 800b380:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b384:	2b00      	cmp	r3, #0
 800b386:	d011      	beq.n	800b3ac <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a4f      	ldr	r2, [pc, #316]	@ (800b4cc <HAL_SD_GetCardStatus+0x178>)
 800b38e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b3aa:	e070      	b.n	800b48e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	099b      	lsrs	r3, r3, #6
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	095b      	lsrs	r3, r3, #5
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	0a1b      	lsrs	r3, r3, #8
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	0e1b      	lsrs	r3, r3, #24
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	061a      	lsls	r2, r3, #24
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b3f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	0a1b      	lsrs	r3, r3, #8
 800b3f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	0e1b      	lsrs	r3, r3, #24
 800b402:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	b2da      	uxtb	r2, r3
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	0d1b      	lsrs	r3, r3, #20
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	b2da      	uxtb	r2, r3
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	0c1b      	lsrs	r3, r3, #16
 800b42e:	b29b      	uxth	r3, r3
 800b430:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b434:	b29a      	uxth	r2, r3
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	b29a      	uxth	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	0a9b      	lsrs	r3, r3, #10
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b450:	b2da      	uxtb	r2, r3
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	0a1b      	lsrs	r3, r3, #8
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0303 	and.w	r3, r3, #3
 800b460:	b2da      	uxtb	r2, r3
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	091b      	lsrs	r3, r3, #4
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	b2da      	uxtb	r2, r3
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	f003 030f 	and.w	r3, r3, #15
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	0e1b      	lsrs	r3, r3, #24
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b496:	4618      	mov	r0, r3
 800b498:	f004 fbc0 	bl	800fc1c <SDMMC_CmdBlockLength>
 800b49c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b49e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00d      	beq.n	800b4c0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a08      	ldr	r2, [pc, #32]	@ (800b4cc <HAL_SD_GetCardStatus+0x178>)
 800b4aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800b4c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3750      	adds	r7, #80	@ 0x50
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	1fe00fff 	.word	0x1fe00fff

0800b4d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b08d      	sub	sp, #52	@ 0x34
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2203      	movs	r2, #3
 800b53c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b544:	2b03      	cmp	r3, #3
 800b546:	d02e      	beq.n	800b5a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b54e:	d106      	bne.n	800b55e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b554:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	635a      	str	r2, [r3, #52]	@ 0x34
 800b55c:	e029      	b.n	800b5b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b564:	d10a      	bne.n	800b57c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fb64 	bl	800bc34 <SD_WideBus_Enable>
 800b56c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	635a      	str	r2, [r3, #52]	@ 0x34
 800b57a:	e01a      	b.n	800b5b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10a      	bne.n	800b598 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fba1 	bl	800bcca <SD_WideBus_Disable>
 800b588:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	635a      	str	r2, [r3, #52]	@ 0x34
 800b596:	e00c      	b.n	800b5b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b59c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5a4:	e005      	b.n	800b5b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d007      	beq.n	800b5ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a5f      	ldr	r2, [pc, #380]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x214>)
 800b5c0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5c8:	e096      	b.n	800b6f8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b5ca:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b5ce:	f04f 0100 	mov.w	r1, #0
 800b5d2:	f7fd fdf5 	bl	80091c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5d6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 8083 	beq.w	800b6e6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	695a      	ldr	r2, [r3, #20]
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4950      	ldr	r1, [pc, #320]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b5fe:	fba1 1303 	umull	r1, r3, r1, r3
 800b602:	0e1b      	lsrs	r3, r3, #24
 800b604:	429a      	cmp	r2, r3
 800b606:	d303      	bcc.n	800b610 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	61bb      	str	r3, [r7, #24]
 800b60e:	e05a      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b618:	d103      	bne.n	800b622 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	61bb      	str	r3, [r7, #24]
 800b620:	e051      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b62a:	d126      	bne.n	800b67a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10e      	bne.n	800b652 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	4a43      	ldr	r2, [pc, #268]	@ (800b744 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d906      	bls.n	800b64a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	4a40      	ldr	r2, [pc, #256]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b640:	fba2 2303 	umull	r2, r3, r2, r3
 800b644:	0e5b      	lsrs	r3, r3, #25
 800b646:	61bb      	str	r3, [r7, #24]
 800b648:	e03d      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	e039      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	69fa      	ldr	r2, [r7, #28]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	4a39      	ldr	r2, [pc, #228]	@ (800b744 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d906      	bls.n	800b672 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	4a36      	ldr	r2, [pc, #216]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	0e5b      	lsrs	r3, r3, #25
 800b66e:	61bb      	str	r3, [r7, #24]
 800b670:	e029      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	61bb      	str	r3, [r7, #24]
 800b678:	e025      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10e      	bne.n	800b6a0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	4a30      	ldr	r2, [pc, #192]	@ (800b748 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d906      	bls.n	800b698 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4a2c      	ldr	r2, [pc, #176]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b68e:	fba2 2303 	umull	r2, r3, r2, r3
 800b692:	0e1b      	lsrs	r3, r3, #24
 800b694:	61bb      	str	r3, [r7, #24]
 800b696:	e016      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	e012      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	69fa      	ldr	r2, [r7, #28]
 800b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ac:	4a26      	ldr	r2, [pc, #152]	@ (800b748 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d906      	bls.n	800b6c0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4a22      	ldr	r2, [pc, #136]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ba:	0e1b      	lsrs	r3, r3, #24
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	e002      	b.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681c      	ldr	r4, [r3, #0]
 800b6ca:	466a      	mov	r2, sp
 800b6cc:	f107 0314 	add.w	r3, r7, #20
 800b6d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6d4:	e882 0003 	stmia.w	r2, {r0, r1}
 800b6d8:	f107 0308 	add.w	r3, r7, #8
 800b6dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f004 f9be 	bl	800fa60 <SDMMC_Init>
 800b6e4:	e008      	b.n	800b6f8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b700:	4618      	mov	r0, r3
 800b702:	f004 fa8b 	bl	800fc1c <SDMMC_CmdBlockLength>
 800b706:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00c      	beq.n	800b728 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a0a      	ldr	r2, [pc, #40]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x214>)
 800b714:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b734:	4618      	mov	r0, r3
 800b736:	372c      	adds	r7, #44	@ 0x2c
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd90      	pop	{r4, r7, pc}
 800b73c:	1fe00fff 	.word	0x1fe00fff
 800b740:	55e63b89 	.word	0x55e63b89
 800b744:	02faf080 	.word	0x02faf080
 800b748:	017d7840 	.word	0x017d7840

0800b74c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b758:	f107 030c 	add.w	r3, r7, #12
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fa40 	bl	800bbe4 <SD_SendStatus>
 800b764:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	0a5b      	lsrs	r3, r3, #9
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b782:	693b      	ldr	r3, [r7, #16]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b090      	sub	sp, #64	@ 0x40
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b798:	f7f8 f82e 	bl	80037f8 <HAL_GetTick>
 800b79c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f004 f9b5 	bl	800fb12 <SDMMC_GetPowerState>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b7b2:	e0b5      	b.n	800b920 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d02e      	beq.n	800b81a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f004 fc00 	bl	800ffc6 <SDMMC_CmdSendCID>
 800b7c6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <SD_InitCard+0x46>
    {
      return errorstate;
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d0:	e0a6      	b.n	800b920 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f004 f9e0 	bl	800fb9e <SDMMC_GetResponse>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2104      	movs	r1, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f004 f9d7 	bl	800fb9e <SDMMC_GetResponse>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2108      	movs	r1, #8
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f004 f9ce 	bl	800fb9e <SDMMC_GetResponse>
 800b802:	4602      	mov	r2, r0
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	210c      	movs	r1, #12
 800b80e:	4618      	mov	r0, r3
 800b810:	f004 f9c5 	bl	800fb9e <SDMMC_GetResponse>
 800b814:	4602      	mov	r2, r0
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d01d      	beq.n	800b85e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b822:	e019      	b.n	800b858 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f107 020a 	add.w	r2, r7, #10
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f004 fc08 	bl	8010044 <SDMMC_CmdSetRelAdd>
 800b834:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	e06f      	b.n	800b920 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b840:	f7f7 ffda 	bl	80037f8 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b84e:	4293      	cmp	r3, r2
 800b850:	d902      	bls.n	800b858 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b852:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b856:	e063      	b.n	800b920 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b858:	897b      	ldrh	r3, [r7, #10]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0e2      	beq.n	800b824 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b862:	2b03      	cmp	r3, #3
 800b864:	d036      	beq.n	800b8d4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b866:	897b      	ldrh	r3, [r7, #10]
 800b868:	461a      	mov	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	4619      	mov	r1, r3
 800b87a:	4610      	mov	r0, r2
 800b87c:	f004 fbc2 	bl	8010004 <SDMMC_CmdSendCSD>
 800b880:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <SD_InitCard+0x100>
    {
      return errorstate;
 800b888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88a:	e049      	b.n	800b920 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2100      	movs	r1, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f004 f983 	bl	800fb9e <SDMMC_GetResponse>
 800b898:	4602      	mov	r2, r0
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2104      	movs	r1, #4
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f004 f97a 	bl	800fb9e <SDMMC_GetResponse>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2108      	movs	r1, #8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f004 f971 	bl	800fb9e <SDMMC_GetResponse>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	210c      	movs	r1, #12
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f004 f968 	bl	800fb9e <SDMMC_GetResponse>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2104      	movs	r1, #4
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f004 f95f 	bl	800fb9e <SDMMC_GetResponse>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	0d1a      	lsrs	r2, r3, #20
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b8e8:	f107 030c 	add.w	r3, r7, #12
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff fb8c 	bl	800b00c <HAL_SD_GetCardCSD>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b8fe:	e00f      	b.n	800b920 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b908:	041b      	lsls	r3, r3, #16
 800b90a:	4619      	mov	r1, r3
 800b90c:	4610      	mov	r0, r2
 800b90e:	f004 fa71 	bl	800fdf4 <SDMMC_CmdSelDesel>
 800b912:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <SD_InitCard+0x192>
  {
    return errorstate;
 800b91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b91c:	e000      	b.n	800b920 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3740      	adds	r7, #64	@ 0x40
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4618      	mov	r0, r3
 800b942:	f004 fa7a 	bl	800fe3a <SDMMC_CmdGoIdleState>
 800b946:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	e072      	b.n	800ba38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f004 fa8d 	bl	800fe76 <SDMMC_CmdOperCond>
 800b95c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b964:	d10d      	bne.n	800b982 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4618      	mov	r0, r3
 800b972:	f004 fa62 	bl	800fe3a <SDMMC_CmdGoIdleState>
 800b976:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <SD_PowerON+0x60>
    {
      return errorstate;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	e05a      	b.n	800ba38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d137      	bne.n	800ba00 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2100      	movs	r1, #0
 800b996:	4618      	mov	r0, r3
 800b998:	f004 fa8d 	bl	800feb6 <SDMMC_CmdAppCommand>
 800b99c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d02d      	beq.n	800ba00 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b9a8:	e046      	b.n	800ba38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f004 fa80 	bl	800feb6 <SDMMC_CmdAppCommand>
 800b9b6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	e03a      	b.n	800ba38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	491e      	ldr	r1, [pc, #120]	@ (800ba40 <SD_PowerON+0x118>)
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f004 fa97 	bl	800fefc <SDMMC_CmdAppOperCommand>
 800b9ce:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d002      	beq.n	800b9dc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b9da:	e02d      	b.n	800ba38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f004 f8db 	bl	800fb9e <SDMMC_GetResponse>
 800b9e8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	0fdb      	lsrs	r3, r3, #31
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d101      	bne.n	800b9f6 <SD_PowerON+0xce>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <SD_PowerON+0xd0>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	613b      	str	r3, [r7, #16]

    count++;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d802      	bhi.n	800ba10 <SD_PowerON+0xe8>
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0cc      	beq.n	800b9aa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d902      	bls.n	800ba20 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ba1e:	e00b      	b.n	800ba38 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	c1100000 	.word	0xc1100000

0800ba44 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08c      	sub	sp, #48	@ 0x30
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba4e:	f7f7 fed3 	bl	80037f8 <HAL_GetTick>
 800ba52:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f004 f89d 	bl	800fb9e <SDMMC_GetResponse>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba6e:	d102      	bne.n	800ba76 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba74:	e0b0      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2140      	movs	r1, #64	@ 0x40
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f004 f8cd 	bl	800fc1c <SDMMC_CmdBlockLength>
 800ba82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	e0a0      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9e:	041b      	lsls	r3, r3, #16
 800baa0:	4619      	mov	r1, r3
 800baa2:	4610      	mov	r0, r2
 800baa4:	f004 fa07 	bl	800feb6 <SDMMC_CmdAppCommand>
 800baa8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d005      	beq.n	800babc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	e08d      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800babc:	f04f 33ff 	mov.w	r3, #4294967295
 800bac0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800bac2:	2340      	movs	r3, #64	@ 0x40
 800bac4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bac6:	2360      	movs	r3, #96	@ 0x60
 800bac8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800baca:	2302      	movs	r3, #2
 800bacc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bace:	2300      	movs	r3, #0
 800bad0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bad2:	2301      	movs	r3, #1
 800bad4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f107 0208 	add.w	r2, r7, #8
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f004 f86f 	bl	800fbc4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f004 faef 	bl	80100ce <SDMMC_CmdStatusRegister>
 800baf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d02b      	beq.n	800bb50 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	e069      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d013      	beq.n	800bb3a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb16:	e00d      	b.n	800bb34 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f003 ffc9 	bl	800fab4 <SDMMC_ReadFIFO>
 800bb22:	4602      	mov	r2, r0
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	601a      	str	r2, [r3, #0]
        pData++;
 800bb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb30:	3301      	adds	r3, #1
 800bb32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb36:	2b07      	cmp	r3, #7
 800bb38:	d9ee      	bls.n	800bb18 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800bb3a:	f7f7 fe5d 	bl	80037f8 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb48:	d102      	bne.n	800bb50 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb4e:	e043      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb56:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0d2      	beq.n	800bb04 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	e033      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	f003 0302 	and.w	r3, r3, #2
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb7e:	2302      	movs	r3, #2
 800bb80:	e02a      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb88:	f003 0320 	and.w	r3, r3, #32
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d017      	beq.n	800bbc0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bb90:	2320      	movs	r3, #32
 800bb92:	e021      	b.n	800bbd8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f003 ff8b 	bl	800fab4 <SDMMC_ReadFIFO>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba2:	601a      	str	r2, [r3, #0]
    pData++;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	3304      	adds	r3, #4
 800bba8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800bbaa:	f7f7 fe25 	bl	80037f8 <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb8:	d102      	bne.n	800bbc0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bbba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbbe:	e00b      	b.n	800bbd8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e2      	bne.n	800bb94 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a03      	ldr	r2, [pc, #12]	@ (800bbe0 <SD_SendSDStatus+0x19c>)
 800bbd4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3730      	adds	r7, #48	@ 0x30
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	18000f3a 	.word	0x18000f3a

0800bbe4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bbf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbf8:	e018      	b.n	800bc2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f004 fa3e 	bl	8010088 <SDMMC_CmdSendStatus>
 800bc0c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	e009      	b.n	800bc2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f003 ffbd 	bl	800fb9e <SDMMC_GetResponse>
 800bc24:	4602      	mov	r2, r0
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	2300      	movs	r3, #0
 800bc42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f003 ffa7 	bl	800fb9e <SDMMC_GetResponse>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc5a:	d102      	bne.n	800bc62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc60:	e02f      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f879 	bl	800bd60 <SD_FindSCR>
 800bc6e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	e023      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01c      	beq.n	800bcbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc8c:	041b      	lsls	r3, r3, #16
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f004 f910 	bl	800feb6 <SDMMC_CmdAppCommand>
 800bc96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	e00f      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2102      	movs	r1, #2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f004 f947 	bl	800ff3c <SDMMC_CmdBusWidth>
 800bcae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	e003      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e001      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bcbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b086      	sub	sp, #24
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f003 ff5c 	bl	800fb9e <SDMMC_GetResponse>
 800bce6:	4603      	mov	r3, r0
 800bce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcf0:	d102      	bne.n	800bcf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcf6:	e02f      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f82e 	bl	800bd60 <SD_FindSCR>
 800bd04:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	e023      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d01c      	beq.n	800bd54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd22:	041b      	lsls	r3, r3, #16
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f004 f8c5 	bl	800feb6 <SDMMC_CmdAppCommand>
 800bd2c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	e00f      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f004 f8fc 	bl	800ff3c <SDMMC_CmdBusWidth>
 800bd44:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	e003      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	e001      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd54:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08e      	sub	sp, #56	@ 0x38
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd6a:	f7f7 fd45 	bl	80037f8 <HAL_GetTick>
 800bd6e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bd74:	2300      	movs	r3, #0
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2108      	movs	r1, #8
 800bd86:	4618      	mov	r0, r3
 800bd88:	f003 ff48 	bl	800fc1c <SDMMC_CmdBlockLength>
 800bd8c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd96:	e0ad      	b.n	800bef4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda0:	041b      	lsls	r3, r3, #16
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f004 f886 	bl	800feb6 <SDMMC_CmdAppCommand>
 800bdaa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb4:	e09e      	b.n	800bef4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bdbc:	2308      	movs	r3, #8
 800bdbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bdc0:	2330      	movs	r3, #48	@ 0x30
 800bdc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f107 0210 	add.w	r2, r7, #16
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f003 fef2 	bl	800fbc4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f004 f8cc 	bl	800ff82 <SDMMC_CmdSendSCR>
 800bdea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d027      	beq.n	800be42 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf4:	e07e      	b.n	800bef4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d113      	bne.n	800be2c <SD_FindSCR+0xcc>
 800be04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be06:	2b00      	cmp	r3, #0
 800be08:	d110      	bne.n	800be2c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4618      	mov	r0, r3
 800be10:	f003 fe50 	bl	800fab4 <SDMMC_ReadFIFO>
 800be14:	4603      	mov	r3, r0
 800be16:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f003 fe49 	bl	800fab4 <SDMMC_ReadFIFO>
 800be22:	4603      	mov	r3, r0
 800be24:	60fb      	str	r3, [r7, #12]
      index++;
 800be26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be28:	3301      	adds	r3, #1
 800be2a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800be2c:	f7f7 fce4 	bl	80037f8 <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3a:	d102      	bne.n	800be42 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be40:	e058      	b.n	800bef4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be48:	f240 532a 	movw	r3, #1322	@ 0x52a
 800be4c:	4013      	ands	r3, r2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0d1      	beq.n	800bdf6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be58:	f003 0308 	and.w	r3, r3, #8
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2208      	movs	r2, #8
 800be66:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be68:	2308      	movs	r3, #8
 800be6a:	e043      	b.n	800bef4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d005      	beq.n	800be86 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2202      	movs	r2, #2
 800be80:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be82:	2302      	movs	r3, #2
 800be84:	e036      	b.n	800bef4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be8c:	f003 0320 	and.w	r3, r3, #32
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2220      	movs	r2, #32
 800be9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800be9c:	2320      	movs	r3, #32
 800be9e:	e029      	b.n	800bef4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a15      	ldr	r2, [pc, #84]	@ (800befc <SD_FindSCR+0x19c>)
 800bea6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	061a      	lsls	r2, r3, #24
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800beb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	0a1b      	lsrs	r3, r3, #8
 800beba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bebe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	0e1b      	lsrs	r3, r3, #24
 800bec4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec8:	601a      	str	r2, [r3, #0]
    scr++;
 800beca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800becc:	3304      	adds	r3, #4
 800bece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	061a      	lsls	r2, r3, #24
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bedc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	0a1b      	lsrs	r3, r3, #8
 800bee2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800bee6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	0e1b      	lsrs	r3, r3, #24
 800beec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3738      	adds	r7, #56	@ 0x38
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	18000f3a 	.word	0x18000f3a

0800bf00 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf12:	2b1f      	cmp	r3, #31
 800bf14:	d936      	bls.n	800bf84 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e027      	b.n	800bf6c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f003 fdc7 	bl	800fab4 <SDMMC_ReadFIFO>
 800bf26:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	3301      	adds	r3, #1
 800bf34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	0a1b      	lsrs	r3, r3, #8
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	3301      	adds	r3, #1
 800bf44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	0c1b      	lsrs	r3, r3, #16
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	3301      	adds	r3, #1
 800bf54:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	0e1b      	lsrs	r3, r3, #24
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3301      	adds	r3, #1
 800bf64:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b07      	cmp	r3, #7
 800bf70:	d9d4      	bls.n	800bf1c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7c:	f1a3 0220 	sub.w	r2, r3, #32
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800bf84:	bf00      	nop
 800bf86:	3718      	adds	r7, #24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	2b1f      	cmp	r3, #31
 800bfa0:	d93a      	bls.n	800c018 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e02b      	b.n	800c000 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	021a      	lsls	r2, r3, #8
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	041a      	lsls	r2, r3, #16
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	061a      	lsls	r2, r3, #24
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f107 020c 	add.w	r2, r7, #12
 800bff2:	4611      	mov	r1, r2
 800bff4:	4618      	mov	r0, r3
 800bff6:	f003 fd6a 	bl	800face <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	3301      	adds	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b07      	cmp	r3, #7
 800c004:	d9d0      	bls.n	800bfa8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	f1a3 0220 	sub.w	r2, r3, #32
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	621a      	str	r2, [r3, #32]
  }
}
 800c018:	bf00      	nop
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e10f      	b.n	800c2a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a87      	ldr	r2, [pc, #540]	@ (800c2ac <HAL_SPI_Init+0x23c>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00f      	beq.n	800c0b2 <HAL_SPI_Init+0x42>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a86      	ldr	r2, [pc, #536]	@ (800c2b0 <HAL_SPI_Init+0x240>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d00a      	beq.n	800c0b2 <HAL_SPI_Init+0x42>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a84      	ldr	r2, [pc, #528]	@ (800c2b4 <HAL_SPI_Init+0x244>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d005      	beq.n	800c0b2 <HAL_SPI_Init+0x42>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d901      	bls.n	800c0b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e0f7      	b.n	800c2a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fe66 	bl	800cd84 <SPI_GetPacketSize>
 800c0b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a7b      	ldr	r2, [pc, #492]	@ (800c2ac <HAL_SPI_Init+0x23c>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d00c      	beq.n	800c0de <HAL_SPI_Init+0x6e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a79      	ldr	r2, [pc, #484]	@ (800c2b0 <HAL_SPI_Init+0x240>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d007      	beq.n	800c0de <HAL_SPI_Init+0x6e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a78      	ldr	r2, [pc, #480]	@ (800c2b4 <HAL_SPI_Init+0x244>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d002      	beq.n	800c0de <HAL_SPI_Init+0x6e>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b08      	cmp	r3, #8
 800c0dc:	d811      	bhi.n	800c102 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0e2:	4a72      	ldr	r2, [pc, #456]	@ (800c2ac <HAL_SPI_Init+0x23c>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d009      	beq.n	800c0fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a70      	ldr	r2, [pc, #448]	@ (800c2b0 <HAL_SPI_Init+0x240>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d004      	beq.n	800c0fc <HAL_SPI_Init+0x8c>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a6f      	ldr	r2, [pc, #444]	@ (800c2b4 <HAL_SPI_Init+0x244>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d104      	bne.n	800c106 <HAL_SPI_Init+0x96>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b10      	cmp	r3, #16
 800c100:	d901      	bls.n	800c106 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e0cd      	b.n	800c2a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7f6 fb88 	bl	8002830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 0201 	bic.w	r2, r2, #1
 800c136:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c142:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c14c:	d119      	bne.n	800c182 <HAL_SPI_Init+0x112>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c156:	d103      	bne.n	800c160 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d008      	beq.n	800c172 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10c      	bne.n	800c182 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c170:	d107      	bne.n	800c182 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c180:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00f      	beq.n	800c1ae <HAL_SPI_Init+0x13e>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	2b06      	cmp	r3, #6
 800c194:	d90b      	bls.n	800c1ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	e007      	b.n	800c1be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69da      	ldr	r2, [r3, #28]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d0:	ea42 0103 	orr.w	r1, r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68da      	ldr	r2, [r3, #12]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	431a      	orrs	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	431a      	orrs	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c212:	431a      	orrs	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	431a      	orrs	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c21e:	ea42 0103 	orr.w	r1, r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d113      	bne.n	800c25e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c248:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c25c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f022 0201 	bic.w	r2, r2, #1
 800c26c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	430a      	orrs	r2, r1
 800c28e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	40013000 	.word	0x40013000
 800c2b0:	40003800 	.word	0x40003800
 800c2b4:	40003c00 	.word	0x40003c00

0800c2b8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e01b      	b.n	800c302 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f022 0201 	bic.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7f6 fb86 	bl	80029f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3320      	adds	r3, #32
 800c322:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c324:	f7f7 fa68 	bl	80037f8 <HAL_GetTick>
 800c328:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b01      	cmp	r3, #1
 800c334:	d001      	beq.n	800c33a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c336:	2302      	movs	r3, #2
 800c338:	e1d1      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <HAL_SPI_Transmit+0x3a>
 800c340:	88fb      	ldrh	r3, [r7, #6]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e1c9      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_SPI_Transmit+0x4c>
 800c354:	2302      	movs	r3, #2
 800c356:	e1c2      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2203      	movs	r2, #3
 800c364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	88fa      	ldrh	r2, [r7, #6]
 800c37a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	88fa      	ldrh	r2, [r7, #6]
 800c382:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c3b0:	d108      	bne.n	800c3c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e009      	b.n	800c3d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c3d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	4b96      	ldr	r3, [pc, #600]	@ (800c638 <HAL_SPI_Transmit+0x32c>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	88f9      	ldrh	r1, [r7, #6]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	430b      	orrs	r3, r1
 800c3ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0201 	orr.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c404:	d107      	bne.n	800c416 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	2b0f      	cmp	r3, #15
 800c41c:	d947      	bls.n	800c4ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c41e:	e03f      	b.n	800c4a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	f003 0302 	and.w	r3, r3, #2
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d114      	bne.n	800c458 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6812      	ldr	r2, [r2, #0]
 800c438:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c43e:	1d1a      	adds	r2, r3, #4
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c456:	e023      	b.n	800c4a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c458:	f7f7 f9ce 	bl	80037f8 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d803      	bhi.n	800c470 <HAL_SPI_Transmit+0x164>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46e:	d102      	bne.n	800c476 <HAL_SPI_Transmit+0x16a>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d114      	bne.n	800c4a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fbb6 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e11e      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1b9      	bne.n	800c420 <HAL_SPI_Transmit+0x114>
 800c4ac:	e0f1      	b.n	800c692 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	2b07      	cmp	r3, #7
 800c4b4:	f240 80e6 	bls.w	800c684 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c4b8:	e05d      	b.n	800c576 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d132      	bne.n	800c52e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d918      	bls.n	800c506 <HAL_SPI_Transmit+0x1fa>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d014      	beq.n	800c506 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6812      	ldr	r2, [r2, #0]
 800c4e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4ec:	1d1a      	adds	r2, r3, #4
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	3b02      	subs	r3, #2
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c504:	e037      	b.n	800c576 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c50a:	881a      	ldrh	r2, [r3, #0]
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c514:	1c9a      	adds	r2, r3, #2
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c520:	b29b      	uxth	r3, r3
 800c522:	3b01      	subs	r3, #1
 800c524:	b29a      	uxth	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c52c:	e023      	b.n	800c576 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c52e:	f7f7 f963 	bl	80037f8 <HAL_GetTick>
 800c532:	4602      	mov	r2, r0
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d803      	bhi.n	800c546 <HAL_SPI_Transmit+0x23a>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d102      	bne.n	800c54c <HAL_SPI_Transmit+0x240>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d114      	bne.n	800c576 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 fb4b 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c558:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e0b3      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d19b      	bne.n	800c4ba <HAL_SPI_Transmit+0x1ae>
 800c582:	e086      	b.n	800c692 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	f003 0302 	and.w	r3, r3, #2
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d154      	bne.n	800c63c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c598:	b29b      	uxth	r3, r3
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d918      	bls.n	800c5d0 <HAL_SPI_Transmit+0x2c4>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a2:	2b40      	cmp	r3, #64	@ 0x40
 800c5a4:	d914      	bls.n	800c5d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6812      	ldr	r2, [r2, #0]
 800c5b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	3b04      	subs	r3, #4
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5ce:	e059      	b.n	800c684 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d917      	bls.n	800c60c <HAL_SPI_Transmit+0x300>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d013      	beq.n	800c60c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5e8:	881a      	ldrh	r2, [r3, #0]
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f2:	1c9a      	adds	r2, r3, #2
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	3b02      	subs	r3, #2
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c60a:	e03b      	b.n	800c684 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3320      	adds	r3, #32
 800c616:	7812      	ldrb	r2, [r2, #0]
 800c618:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	3b01      	subs	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c636:	e025      	b.n	800c684 <HAL_SPI_Transmit+0x378>
 800c638:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c63c:	f7f7 f8dc 	bl	80037f8 <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d803      	bhi.n	800c654 <HAL_SPI_Transmit+0x348>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c652:	d102      	bne.n	800c65a <HAL_SPI_Transmit+0x34e>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d114      	bne.n	800c684 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f000 fac4 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c666:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c680:	2303      	movs	r3, #3
 800c682:	e02c      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f47f af79 	bne.w	800c584 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2200      	movs	r2, #0
 800c69a:	2108      	movs	r1, #8
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 fb43 	bl	800cd28 <SPI_WaitOnFlagUntilTimeout>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6ae:	f043 0220 	orr.w	r2, r3, #32
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 fa95 	bl	800cbe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e000      	b.n	800c6de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
  }
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop

0800c6e8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6fc:	095b      	lsrs	r3, r3, #5
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	3301      	adds	r3, #1
 800c702:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3330      	adds	r3, #48	@ 0x30
 800c70a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c70c:	f7f7 f874 	bl	80037f8 <HAL_GetTick>
 800c710:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d001      	beq.n	800c722 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c71e:	2302      	movs	r3, #2
 800c720:	e250      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <HAL_SPI_Receive+0x46>
 800c728:	88fb      	ldrh	r3, [r7, #6]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e248      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d101      	bne.n	800c740 <HAL_SPI_Receive+0x58>
 800c73c:	2302      	movs	r3, #2
 800c73e:	e241      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2204      	movs	r2, #4
 800c74c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	88fa      	ldrh	r2, [r7, #6]
 800c762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	88fa      	ldrh	r2, [r7, #6]
 800c76a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c798:	d108      	bne.n	800c7ac <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	e009      	b.n	800c7c0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c7be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b95      	ldr	r3, [pc, #596]	@ (800ca1c <HAL_SPI_Receive+0x334>)
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	88f9      	ldrh	r1, [r7, #6]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	430b      	orrs	r3, r1
 800c7d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f042 0201 	orr.w	r2, r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7ec:	d107      	bne.n	800c7fe <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	2b0f      	cmp	r3, #15
 800c804:	d96c      	bls.n	800c8e0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c806:	e064      	b.n	800c8d2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d114      	bne.n	800c848 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c826:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c828:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c82e:	1d1a      	adds	r2, r3, #4
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	3b01      	subs	r3, #1
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c846:	e044      	b.n	800c8d2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c84e:	b29b      	uxth	r3, r3
 800c850:	8bfa      	ldrh	r2, [r7, #30]
 800c852:	429a      	cmp	r2, r3
 800c854:	d919      	bls.n	800c88a <HAL_SPI_Receive+0x1a2>
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d014      	beq.n	800c88a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c86a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c870:	1d1a      	adds	r2, r3, #4
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	3b01      	subs	r3, #1
 800c880:	b29a      	uxth	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c888:	e023      	b.n	800c8d2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c88a:	f7f6 ffb5 	bl	80037f8 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	683a      	ldr	r2, [r7, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d803      	bhi.n	800c8a2 <HAL_SPI_Receive+0x1ba>
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a0:	d102      	bne.n	800c8a8 <HAL_SPI_Receive+0x1c0>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d114      	bne.n	800c8d2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 f99d 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e178      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d194      	bne.n	800c808 <HAL_SPI_Receive+0x120>
 800c8de:	e15e      	b.n	800cb9e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	2b07      	cmp	r3, #7
 800c8e6:	f240 8153 	bls.w	800cb90 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c8ea:	e08f      	b.n	800ca0c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	695b      	ldr	r3, [r3, #20]
 800c8f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	695b      	ldr	r3, [r3, #20]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d114      	bne.n	800c92c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c906:	69ba      	ldr	r2, [r7, #24]
 800c908:	8812      	ldrh	r2, [r2, #0]
 800c90a:	b292      	uxth	r2, r2
 800c90c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c912:	1c9a      	adds	r2, r3, #2
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c91e:	b29b      	uxth	r3, r3
 800c920:	3b01      	subs	r3, #1
 800c922:	b29a      	uxth	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c92a:	e06f      	b.n	800ca0c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c932:	b29b      	uxth	r3, r3
 800c934:	8bfa      	ldrh	r2, [r7, #30]
 800c936:	429a      	cmp	r2, r3
 800c938:	d924      	bls.n	800c984 <HAL_SPI_Receive+0x29c>
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d01f      	beq.n	800c984 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	8812      	ldrh	r2, [r2, #0]
 800c94c:	b292      	uxth	r2, r2
 800c94e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c954:	1c9a      	adds	r2, r3, #2
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c95e:	69ba      	ldr	r2, [r7, #24]
 800c960:	8812      	ldrh	r2, [r2, #0]
 800c962:	b292      	uxth	r2, r2
 800c964:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c96a:	1c9a      	adds	r2, r3, #2
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c976:	b29b      	uxth	r3, r3
 800c978:	3b02      	subs	r3, #2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c982:	e043      	b.n	800ca0c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d119      	bne.n	800c9c4 <HAL_SPI_Receive+0x2dc>
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d014      	beq.n	800c9c4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	8812      	ldrh	r2, [r2, #0]
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9aa:	1c9a      	adds	r2, r3, #2
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c9c2:	e023      	b.n	800ca0c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9c4:	f7f6 ff18 	bl	80037f8 <HAL_GetTick>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d803      	bhi.n	800c9dc <HAL_SPI_Receive+0x2f4>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d102      	bne.n	800c9e2 <HAL_SPI_Receive+0x2fa>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d114      	bne.n	800ca0c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f000 f900 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e0db      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f47f af69 	bne.w	800c8ec <HAL_SPI_Receive+0x204>
 800ca1a:	e0c0      	b.n	800cb9e <HAL_SPI_Receive+0x4b6>
 800ca1c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	f003 0301 	and.w	r3, r3, #1
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d117      	bne.n	800ca66 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	b2d2      	uxtb	r2, r2
 800ca46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca64:	e094      	b.n	800cb90 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	8bfa      	ldrh	r2, [r7, #30]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d946      	bls.n	800cb02 <HAL_SPI_Receive+0x41a>
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d041      	beq.n	800cb02 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca8a:	7812      	ldrb	r2, [r2, #0]
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caa6:	7812      	ldrb	r2, [r2, #0]
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cac2:	7812      	ldrb	r2, [r2, #0]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cade:	7812      	ldrb	r2, [r2, #0]
 800cae0:	b2d2      	uxtb	r2, r2
 800cae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	3b04      	subs	r3, #4
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb00:	e046      	b.n	800cb90 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d81c      	bhi.n	800cb48 <HAL_SPI_Receive+0x460>
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d017      	beq.n	800cb48 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb24:	7812      	ldrb	r2, [r2, #0]
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb46:	e023      	b.n	800cb90 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb48:	f7f6 fe56 	bl	80037f8 <HAL_GetTick>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d803      	bhi.n	800cb60 <HAL_SPI_Receive+0x478>
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5e:	d102      	bne.n	800cb66 <HAL_SPI_Receive+0x47e>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d114      	bne.n	800cb90 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 f83e 	bl	800cbe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e019      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f47f af41 	bne.w	800ca20 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f822 	bl	800cbe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e000      	b.n	800cbc4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
  }
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cbda:	b2db      	uxtb	r3, r3
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f042 0208 	orr.w	r2, r2, #8
 800cc06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0210 	orr.w	r2, r2, #16
 800cc16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 0201 	bic.w	r2, r2, #1
 800cc26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6919      	ldr	r1, [r3, #16]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b3c      	ldr	r3, [pc, #240]	@ (800cd24 <SPI_CloseTransfer+0x13c>)
 800cc34:	400b      	ands	r3, r1
 800cc36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	689a      	ldr	r2, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cc46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d014      	beq.n	800cc7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f003 0320 	and.w	r3, r3, #32
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00f      	beq.n	800cc7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	699a      	ldr	r2, [r3, #24]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f042 0220 	orr.w	r2, r2, #32
 800cc7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d014      	beq.n	800ccb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00f      	beq.n	800ccb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc9a:	f043 0204 	orr.w	r2, r3, #4
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	699a      	ldr	r2, [r3, #24]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00f      	beq.n	800ccde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccc4:	f043 0201 	orr.w	r2, r3, #1
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	699a      	ldr	r2, [r3, #24]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00f      	beq.n	800cd08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccee:	f043 0208 	orr.w	r2, r3, #8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	699a      	ldr	r2, [r3, #24]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	fffffc90 	.word	0xfffffc90

0800cd28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd38:	e010      	b.n	800cd5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd3a:	f7f6 fd5d 	bl	80037f8 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d803      	bhi.n	800cd52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd50:	d102      	bne.n	800cd58 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e00f      	b.n	800cd7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	695a      	ldr	r2, [r3, #20]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	4013      	ands	r3, r2
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	bf0c      	ite	eq
 800cd6c:	2301      	moveq	r3, #1
 800cd6e:	2300      	movne	r3, #0
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	461a      	mov	r2, r3
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d0df      	beq.n	800cd3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	3301      	adds	r3, #1
 800cd94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	3307      	adds	r3, #7
 800cda2:	08db      	lsrs	r3, r3, #3
 800cda4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	fb02 f303 	mul.w	r3, r2, r3
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e049      	b.n	800ce60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d106      	bne.n	800cde6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7f6 f95f 	bl	80030a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2202      	movs	r2, #2
 800cdea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f000 fab7 	bl	800d36c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d001      	beq.n	800ce80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e054      	b.n	800cf2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2202      	movs	r2, #2
 800ce84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0201 	orr.w	r2, r2, #1
 800ce96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a26      	ldr	r2, [pc, #152]	@ (800cf38 <HAL_TIM_Base_Start_IT+0xd0>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d022      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceaa:	d01d      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a22      	ldr	r2, [pc, #136]	@ (800cf3c <HAL_TIM_Base_Start_IT+0xd4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d018      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a21      	ldr	r2, [pc, #132]	@ (800cf40 <HAL_TIM_Base_Start_IT+0xd8>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d013      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a1f      	ldr	r2, [pc, #124]	@ (800cf44 <HAL_TIM_Base_Start_IT+0xdc>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d00e      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a1e      	ldr	r2, [pc, #120]	@ (800cf48 <HAL_TIM_Base_Start_IT+0xe0>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d009      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a1c      	ldr	r2, [pc, #112]	@ (800cf4c <HAL_TIM_Base_Start_IT+0xe4>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d004      	beq.n	800cee8 <HAL_TIM_Base_Start_IT+0x80>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a1b      	ldr	r2, [pc, #108]	@ (800cf50 <HAL_TIM_Base_Start_IT+0xe8>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d115      	bne.n	800cf14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689a      	ldr	r2, [r3, #8]
 800ceee:	4b19      	ldr	r3, [pc, #100]	@ (800cf54 <HAL_TIM_Base_Start_IT+0xec>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b06      	cmp	r3, #6
 800cef8:	d015      	beq.n	800cf26 <HAL_TIM_Base_Start_IT+0xbe>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf00:	d011      	beq.n	800cf26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f042 0201 	orr.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf12:	e008      	b.n	800cf26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f042 0201 	orr.w	r2, r2, #1
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	e000      	b.n	800cf28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	40010000 	.word	0x40010000
 800cf3c:	40000400 	.word	0x40000400
 800cf40:	40000800 	.word	0x40000800
 800cf44:	40000c00 	.word	0x40000c00
 800cf48:	40010400 	.word	0x40010400
 800cf4c:	40001800 	.word	0x40001800
 800cf50:	40014000 	.word	0x40014000
 800cf54:	00010007 	.word	0x00010007

0800cf58 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e049      	b.n	800cffe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f841 	bl	800d006 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2202      	movs	r2, #2
 800cf88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	3304      	adds	r3, #4
 800cf94:	4619      	mov	r1, r3
 800cf96:	4610      	mov	r0, r2
 800cf98:	f000 f9e8 	bl	800d36c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d00e:	bf00      	nop
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d020      	beq.n	800d07e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d01b      	beq.n	800d07e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f06f 0202 	mvn.w	r2, #2
 800d04e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	f003 0303 	and.w	r3, r3, #3
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f963 	bl	800d330 <HAL_TIM_IC_CaptureCallback>
 800d06a:	e005      	b.n	800d078 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f955 	bl	800d31c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f966 	bl	800d344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f003 0304 	and.w	r3, r3, #4
 800d084:	2b00      	cmp	r3, #0
 800d086:	d020      	beq.n	800d0ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f003 0304 	and.w	r3, r3, #4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d01b      	beq.n	800d0ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f06f 0204 	mvn.w	r2, #4
 800d09a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f93d 	bl	800d330 <HAL_TIM_IC_CaptureCallback>
 800d0b6:	e005      	b.n	800d0c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f92f 	bl	800d31c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f940 	bl	800d344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f003 0308 	and.w	r3, r3, #8
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d020      	beq.n	800d116 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 0308 	and.w	r3, r3, #8
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d01b      	beq.n	800d116 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f06f 0208 	mvn.w	r2, #8
 800d0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2204      	movs	r2, #4
 800d0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69db      	ldr	r3, [r3, #28]
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f917 	bl	800d330 <HAL_TIM_IC_CaptureCallback>
 800d102:	e005      	b.n	800d110 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f909 	bl	800d31c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f91a 	bl	800d344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f003 0310 	and.w	r3, r3, #16
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d020      	beq.n	800d162 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01b      	beq.n	800d162 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f06f 0210 	mvn.w	r2, #16
 800d132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2208      	movs	r2, #8
 800d138:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	69db      	ldr	r3, [r3, #28]
 800d140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d144:	2b00      	cmp	r3, #0
 800d146:	d003      	beq.n	800d150 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f8f1 	bl	800d330 <HAL_TIM_IC_CaptureCallback>
 800d14e:	e005      	b.n	800d15c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f8e3 	bl	800d31c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f8f4 	bl	800d344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00c      	beq.n	800d186 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d007      	beq.n	800d186 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f06f 0201 	mvn.w	r2, #1
 800d17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7f5 f9cd 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d104      	bne.n	800d19a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00c      	beq.n	800d1b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d007      	beq.n	800d1b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fcda 	bl	800db68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00c      	beq.n	800d1d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fcd2 	bl	800db7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00c      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d007      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f8ae 	bl	800d358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00c      	beq.n	800d220 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f003 0320 	and.w	r3, r3, #32
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f06f 0220 	mvn.w	r2, #32
 800d218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fc9a 	bl	800db54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d220:	bf00      	nop
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d101      	bne.n	800d246 <HAL_TIM_OC_ConfigChannel+0x1e>
 800d242:	2302      	movs	r3, #2
 800d244:	e066      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0xec>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b14      	cmp	r3, #20
 800d252:	d857      	bhi.n	800d304 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d254:	a201      	add	r2, pc, #4	@ (adr r2, 800d25c <HAL_TIM_OC_ConfigChannel+0x34>)
 800d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25a:	bf00      	nop
 800d25c:	0800d2b1 	.word	0x0800d2b1
 800d260:	0800d305 	.word	0x0800d305
 800d264:	0800d305 	.word	0x0800d305
 800d268:	0800d305 	.word	0x0800d305
 800d26c:	0800d2bf 	.word	0x0800d2bf
 800d270:	0800d305 	.word	0x0800d305
 800d274:	0800d305 	.word	0x0800d305
 800d278:	0800d305 	.word	0x0800d305
 800d27c:	0800d2cd 	.word	0x0800d2cd
 800d280:	0800d305 	.word	0x0800d305
 800d284:	0800d305 	.word	0x0800d305
 800d288:	0800d305 	.word	0x0800d305
 800d28c:	0800d2db 	.word	0x0800d2db
 800d290:	0800d305 	.word	0x0800d305
 800d294:	0800d305 	.word	0x0800d305
 800d298:	0800d305 	.word	0x0800d305
 800d29c:	0800d2e9 	.word	0x0800d2e9
 800d2a0:	0800d305 	.word	0x0800d305
 800d2a4:	0800d305 	.word	0x0800d305
 800d2a8:	0800d305 	.word	0x0800d305
 800d2ac:	0800d2f7 	.word	0x0800d2f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68b9      	ldr	r1, [r7, #8]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f8f8 	bl	800d4ac <TIM_OC1_SetConfig>
      break;
 800d2bc:	e025      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f981 	bl	800d5cc <TIM_OC2_SetConfig>
      break;
 800d2ca:	e01e      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68b9      	ldr	r1, [r7, #8]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fa04 	bl	800d6e0 <TIM_OC3_SetConfig>
      break;
 800d2d8:	e017      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 fa85 	bl	800d7f0 <TIM_OC4_SetConfig>
      break;
 800d2e6:	e010      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68b9      	ldr	r1, [r7, #8]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fae8 	bl	800d8c4 <TIM_OC5_SetConfig>
      break;
 800d2f4:	e009      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68b9      	ldr	r1, [r7, #8]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 fb45 	bl	800d98c <TIM_OC6_SetConfig>
      break;
 800d302:	e002      	b.n	800d30a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	75fb      	strb	r3, [r7, #23]
      break;
 800d308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d312:	7dfb      	ldrb	r3, [r7, #23]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3718      	adds	r7, #24
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a43      	ldr	r2, [pc, #268]	@ (800d48c <TIM_Base_SetConfig+0x120>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d013      	beq.n	800d3ac <TIM_Base_SetConfig+0x40>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d38a:	d00f      	beq.n	800d3ac <TIM_Base_SetConfig+0x40>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a40      	ldr	r2, [pc, #256]	@ (800d490 <TIM_Base_SetConfig+0x124>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d00b      	beq.n	800d3ac <TIM_Base_SetConfig+0x40>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a3f      	ldr	r2, [pc, #252]	@ (800d494 <TIM_Base_SetConfig+0x128>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d007      	beq.n	800d3ac <TIM_Base_SetConfig+0x40>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a3e      	ldr	r2, [pc, #248]	@ (800d498 <TIM_Base_SetConfig+0x12c>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d003      	beq.n	800d3ac <TIM_Base_SetConfig+0x40>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a3d      	ldr	r2, [pc, #244]	@ (800d49c <TIM_Base_SetConfig+0x130>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d108      	bne.n	800d3be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a32      	ldr	r2, [pc, #200]	@ (800d48c <TIM_Base_SetConfig+0x120>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d01f      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3cc:	d01b      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a2f      	ldr	r2, [pc, #188]	@ (800d490 <TIM_Base_SetConfig+0x124>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d017      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4a2e      	ldr	r2, [pc, #184]	@ (800d494 <TIM_Base_SetConfig+0x128>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d013      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d498 <TIM_Base_SetConfig+0x12c>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d00f      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a2c      	ldr	r2, [pc, #176]	@ (800d49c <TIM_Base_SetConfig+0x130>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d00b      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a2b      	ldr	r2, [pc, #172]	@ (800d4a0 <TIM_Base_SetConfig+0x134>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d007      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4a2a      	ldr	r2, [pc, #168]	@ (800d4a4 <TIM_Base_SetConfig+0x138>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d003      	beq.n	800d406 <TIM_Base_SetConfig+0x9a>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a29      	ldr	r2, [pc, #164]	@ (800d4a8 <TIM_Base_SetConfig+0x13c>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d108      	bne.n	800d418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d40c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	689a      	ldr	r2, [r3, #8]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a14      	ldr	r2, [pc, #80]	@ (800d48c <TIM_Base_SetConfig+0x120>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d00f      	beq.n	800d45e <TIM_Base_SetConfig+0xf2>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a16      	ldr	r2, [pc, #88]	@ (800d49c <TIM_Base_SetConfig+0x130>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d00b      	beq.n	800d45e <TIM_Base_SetConfig+0xf2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a15      	ldr	r2, [pc, #84]	@ (800d4a0 <TIM_Base_SetConfig+0x134>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d007      	beq.n	800d45e <TIM_Base_SetConfig+0xf2>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a14      	ldr	r2, [pc, #80]	@ (800d4a4 <TIM_Base_SetConfig+0x138>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d003      	beq.n	800d45e <TIM_Base_SetConfig+0xf2>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a13      	ldr	r2, [pc, #76]	@ (800d4a8 <TIM_Base_SetConfig+0x13c>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d103      	bne.n	800d466 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	691a      	ldr	r2, [r3, #16]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f043 0204 	orr.w	r2, r3, #4
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]
}
 800d47e:	bf00      	nop
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	40010000 	.word	0x40010000
 800d490:	40000400 	.word	0x40000400
 800d494:	40000800 	.word	0x40000800
 800d498:	40000c00 	.word	0x40000c00
 800d49c:	40010400 	.word	0x40010400
 800d4a0:	40014000 	.word	0x40014000
 800d4a4:	40014400 	.word	0x40014400
 800d4a8:	40014800 	.word	0x40014800

0800d4ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	f023 0201 	bic.w	r2, r3, #1
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4b37      	ldr	r3, [pc, #220]	@ (800d5b4 <TIM_OC1_SetConfig+0x108>)
 800d4d8:	4013      	ands	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f023 0303 	bic.w	r3, r3, #3
 800d4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	f023 0302 	bic.w	r3, r3, #2
 800d4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a2d      	ldr	r2, [pc, #180]	@ (800d5b8 <TIM_OC1_SetConfig+0x10c>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d00f      	beq.n	800d528 <TIM_OC1_SetConfig+0x7c>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a2c      	ldr	r2, [pc, #176]	@ (800d5bc <TIM_OC1_SetConfig+0x110>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d00b      	beq.n	800d528 <TIM_OC1_SetConfig+0x7c>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a2b      	ldr	r2, [pc, #172]	@ (800d5c0 <TIM_OC1_SetConfig+0x114>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d007      	beq.n	800d528 <TIM_OC1_SetConfig+0x7c>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c4 <TIM_OC1_SetConfig+0x118>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d003      	beq.n	800d528 <TIM_OC1_SetConfig+0x7c>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a29      	ldr	r2, [pc, #164]	@ (800d5c8 <TIM_OC1_SetConfig+0x11c>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d10c      	bne.n	800d542 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f023 0308 	bic.w	r3, r3, #8
 800d52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	697a      	ldr	r2, [r7, #20]
 800d536:	4313      	orrs	r3, r2
 800d538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	f023 0304 	bic.w	r3, r3, #4
 800d540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a1c      	ldr	r2, [pc, #112]	@ (800d5b8 <TIM_OC1_SetConfig+0x10c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d00f      	beq.n	800d56a <TIM_OC1_SetConfig+0xbe>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a1b      	ldr	r2, [pc, #108]	@ (800d5bc <TIM_OC1_SetConfig+0x110>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00b      	beq.n	800d56a <TIM_OC1_SetConfig+0xbe>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a1a      	ldr	r2, [pc, #104]	@ (800d5c0 <TIM_OC1_SetConfig+0x114>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d007      	beq.n	800d56a <TIM_OC1_SetConfig+0xbe>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a19      	ldr	r2, [pc, #100]	@ (800d5c4 <TIM_OC1_SetConfig+0x118>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d003      	beq.n	800d56a <TIM_OC1_SetConfig+0xbe>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a18      	ldr	r2, [pc, #96]	@ (800d5c8 <TIM_OC1_SetConfig+0x11c>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d111      	bne.n	800d58e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	4313      	orrs	r3, r2
 800d582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	685a      	ldr	r2, [r3, #4]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	621a      	str	r2, [r3, #32]
}
 800d5a8:	bf00      	nop
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	fffeff8f 	.word	0xfffeff8f
 800d5b8:	40010000 	.word	0x40010000
 800d5bc:	40010400 	.word	0x40010400
 800d5c0:	40014000 	.word	0x40014000
 800d5c4:	40014400 	.word	0x40014400
 800d5c8:	40014800 	.word	0x40014800

0800d5cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	f023 0210 	bic.w	r2, r3, #16
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	4b34      	ldr	r3, [pc, #208]	@ (800d6c8 <TIM_OC2_SetConfig+0xfc>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	021b      	lsls	r3, r3, #8
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f023 0320 	bic.w	r3, r3, #32
 800d616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	011b      	lsls	r3, r3, #4
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a29      	ldr	r2, [pc, #164]	@ (800d6cc <TIM_OC2_SetConfig+0x100>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d003      	beq.n	800d634 <TIM_OC2_SetConfig+0x68>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a28      	ldr	r2, [pc, #160]	@ (800d6d0 <TIM_OC2_SetConfig+0x104>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d10d      	bne.n	800d650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d63a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	011b      	lsls	r3, r3, #4
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	4313      	orrs	r3, r2
 800d646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d64e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a1e      	ldr	r2, [pc, #120]	@ (800d6cc <TIM_OC2_SetConfig+0x100>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d00f      	beq.n	800d678 <TIM_OC2_SetConfig+0xac>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a1d      	ldr	r2, [pc, #116]	@ (800d6d0 <TIM_OC2_SetConfig+0x104>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d00b      	beq.n	800d678 <TIM_OC2_SetConfig+0xac>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a1c      	ldr	r2, [pc, #112]	@ (800d6d4 <TIM_OC2_SetConfig+0x108>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d007      	beq.n	800d678 <TIM_OC2_SetConfig+0xac>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6d8 <TIM_OC2_SetConfig+0x10c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d003      	beq.n	800d678 <TIM_OC2_SetConfig+0xac>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a1a      	ldr	r2, [pc, #104]	@ (800d6dc <TIM_OC2_SetConfig+0x110>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d113      	bne.n	800d6a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d67e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	4313      	orrs	r3, r2
 800d692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	621a      	str	r2, [r3, #32]
}
 800d6ba:	bf00      	nop
 800d6bc:	371c      	adds	r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	feff8fff 	.word	0xfeff8fff
 800d6cc:	40010000 	.word	0x40010000
 800d6d0:	40010400 	.word	0x40010400
 800d6d4:	40014000 	.word	0x40014000
 800d6d8:	40014400 	.word	0x40014400
 800d6dc:	40014800 	.word	0x40014800

0800d6e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a1b      	ldr	r3, [r3, #32]
 800d6f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	69db      	ldr	r3, [r3, #28]
 800d706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	4b33      	ldr	r3, [pc, #204]	@ (800d7d8 <TIM_OC3_SetConfig+0xf8>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 0303 	bic.w	r3, r3, #3
 800d716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	021b      	lsls	r3, r3, #8
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	4313      	orrs	r3, r2
 800d734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a28      	ldr	r2, [pc, #160]	@ (800d7dc <TIM_OC3_SetConfig+0xfc>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d003      	beq.n	800d746 <TIM_OC3_SetConfig+0x66>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a27      	ldr	r2, [pc, #156]	@ (800d7e0 <TIM_OC3_SetConfig+0x100>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d10d      	bne.n	800d762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d74c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	021b      	lsls	r3, r3, #8
 800d754:	697a      	ldr	r2, [r7, #20]
 800d756:	4313      	orrs	r3, r2
 800d758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a1d      	ldr	r2, [pc, #116]	@ (800d7dc <TIM_OC3_SetConfig+0xfc>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d00f      	beq.n	800d78a <TIM_OC3_SetConfig+0xaa>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a1c      	ldr	r2, [pc, #112]	@ (800d7e0 <TIM_OC3_SetConfig+0x100>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d00b      	beq.n	800d78a <TIM_OC3_SetConfig+0xaa>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a1b      	ldr	r2, [pc, #108]	@ (800d7e4 <TIM_OC3_SetConfig+0x104>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d007      	beq.n	800d78a <TIM_OC3_SetConfig+0xaa>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a1a      	ldr	r2, [pc, #104]	@ (800d7e8 <TIM_OC3_SetConfig+0x108>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d003      	beq.n	800d78a <TIM_OC3_SetConfig+0xaa>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a19      	ldr	r2, [pc, #100]	@ (800d7ec <TIM_OC3_SetConfig+0x10c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d113      	bne.n	800d7b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	011b      	lsls	r3, r3, #4
 800d7a0:	693a      	ldr	r2, [r7, #16]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	621a      	str	r2, [r3, #32]
}
 800d7cc:	bf00      	nop
 800d7ce:	371c      	adds	r7, #28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	fffeff8f 	.word	0xfffeff8f
 800d7dc:	40010000 	.word	0x40010000
 800d7e0:	40010400 	.word	0x40010400
 800d7e4:	40014000 	.word	0x40014000
 800d7e8:	40014400 	.word	0x40014400
 800d7ec:	40014800 	.word	0x40014800

0800d7f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	4b24      	ldr	r3, [pc, #144]	@ (800d8ac <TIM_OC4_SetConfig+0xbc>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	4313      	orrs	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d83a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	031b      	lsls	r3, r3, #12
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	4313      	orrs	r3, r2
 800d846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4a19      	ldr	r2, [pc, #100]	@ (800d8b0 <TIM_OC4_SetConfig+0xc0>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d00f      	beq.n	800d870 <TIM_OC4_SetConfig+0x80>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4a18      	ldr	r2, [pc, #96]	@ (800d8b4 <TIM_OC4_SetConfig+0xc4>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d00b      	beq.n	800d870 <TIM_OC4_SetConfig+0x80>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4a17      	ldr	r2, [pc, #92]	@ (800d8b8 <TIM_OC4_SetConfig+0xc8>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d007      	beq.n	800d870 <TIM_OC4_SetConfig+0x80>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a16      	ldr	r2, [pc, #88]	@ (800d8bc <TIM_OC4_SetConfig+0xcc>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d003      	beq.n	800d870 <TIM_OC4_SetConfig+0x80>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a15      	ldr	r2, [pc, #84]	@ (800d8c0 <TIM_OC4_SetConfig+0xd0>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d109      	bne.n	800d884 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	695b      	ldr	r3, [r3, #20]
 800d87c:	019b      	lsls	r3, r3, #6
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	4313      	orrs	r3, r2
 800d882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	697a      	ldr	r2, [r7, #20]
 800d888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	621a      	str	r2, [r3, #32]
}
 800d89e:	bf00      	nop
 800d8a0:	371c      	adds	r7, #28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	feff8fff 	.word	0xfeff8fff
 800d8b0:	40010000 	.word	0x40010000
 800d8b4:	40010400 	.word	0x40010400
 800d8b8:	40014000 	.word	0x40014000
 800d8bc:	40014400 	.word	0x40014400
 800d8c0:	40014800 	.word	0x40014800

0800d8c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a1b      	ldr	r3, [r3, #32]
 800d8d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	4b21      	ldr	r3, [pc, #132]	@ (800d974 <TIM_OC5_SetConfig+0xb0>)
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	041b      	lsls	r3, r3, #16
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a18      	ldr	r2, [pc, #96]	@ (800d978 <TIM_OC5_SetConfig+0xb4>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d00f      	beq.n	800d93a <TIM_OC5_SetConfig+0x76>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a17      	ldr	r2, [pc, #92]	@ (800d97c <TIM_OC5_SetConfig+0xb8>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d00b      	beq.n	800d93a <TIM_OC5_SetConfig+0x76>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a16      	ldr	r2, [pc, #88]	@ (800d980 <TIM_OC5_SetConfig+0xbc>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d007      	beq.n	800d93a <TIM_OC5_SetConfig+0x76>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a15      	ldr	r2, [pc, #84]	@ (800d984 <TIM_OC5_SetConfig+0xc0>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d003      	beq.n	800d93a <TIM_OC5_SetConfig+0x76>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a14      	ldr	r2, [pc, #80]	@ (800d988 <TIM_OC5_SetConfig+0xc4>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d109      	bne.n	800d94e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	021b      	lsls	r3, r3, #8
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	4313      	orrs	r3, r2
 800d94c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	621a      	str	r2, [r3, #32]
}
 800d968:	bf00      	nop
 800d96a:	371c      	adds	r7, #28
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	fffeff8f 	.word	0xfffeff8f
 800d978:	40010000 	.word	0x40010000
 800d97c:	40010400 	.word	0x40010400
 800d980:	40014000 	.word	0x40014000
 800d984:	40014400 	.word	0x40014400
 800d988:	40014800 	.word	0x40014800

0800d98c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	4b22      	ldr	r3, [pc, #136]	@ (800da40 <TIM_OC6_SetConfig+0xb4>)
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	021b      	lsls	r3, r3, #8
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d9ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	051b      	lsls	r3, r3, #20
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4a19      	ldr	r2, [pc, #100]	@ (800da44 <TIM_OC6_SetConfig+0xb8>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d00f      	beq.n	800da04 <TIM_OC6_SetConfig+0x78>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a18      	ldr	r2, [pc, #96]	@ (800da48 <TIM_OC6_SetConfig+0xbc>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d00b      	beq.n	800da04 <TIM_OC6_SetConfig+0x78>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a17      	ldr	r2, [pc, #92]	@ (800da4c <TIM_OC6_SetConfig+0xc0>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d007      	beq.n	800da04 <TIM_OC6_SetConfig+0x78>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a16      	ldr	r2, [pc, #88]	@ (800da50 <TIM_OC6_SetConfig+0xc4>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d003      	beq.n	800da04 <TIM_OC6_SetConfig+0x78>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a15      	ldr	r2, [pc, #84]	@ (800da54 <TIM_OC6_SetConfig+0xc8>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d109      	bne.n	800da18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800da0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	029b      	lsls	r3, r3, #10
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	4313      	orrs	r3, r2
 800da16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	685a      	ldr	r2, [r3, #4]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	693a      	ldr	r2, [r7, #16]
 800da30:	621a      	str	r2, [r3, #32]
}
 800da32:	bf00      	nop
 800da34:	371c      	adds	r7, #28
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	feff8fff 	.word	0xfeff8fff
 800da44:	40010000 	.word	0x40010000
 800da48:	40010400 	.word	0x40010400
 800da4c:	40014000 	.word	0x40014000
 800da50:	40014400 	.word	0x40014400
 800da54:	40014800 	.word	0x40014800

0800da58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d101      	bne.n	800da74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da70:	2302      	movs	r3, #2
 800da72:	e065      	b.n	800db40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	4313      	orrs	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	4313      	orrs	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a16      	ldr	r2, [pc, #88]	@ (800db4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d004      	beq.n	800db02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a14      	ldr	r2, [pc, #80]	@ (800db50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d115      	bne.n	800db2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db0c:	051b      	lsls	r3, r3, #20
 800db0e:	4313      	orrs	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	69db      	ldr	r3, [r3, #28]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	6a1b      	ldr	r3, [r3, #32]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	40010000 	.word	0x40010000
 800db50:	40010400 	.word	0x40010400

0800db54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db84:	bf00      	nop
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e042      	b.n	800dc28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7f5 fb81 	bl	80032bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2224      	movs	r2, #36	@ 0x24
 800dbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f022 0201 	bic.w	r2, r2, #1
 800dbd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f001 f9e6 	bl	800efac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fc7b 	bl	800e4dc <UART_SetConfig>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d101      	bne.n	800dbf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e01b      	b.n	800dc28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dbfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	689a      	ldr	r2, [r3, #8]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dc0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f042 0201 	orr.w	r2, r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fa65 	bl	800f0f0 <UART_CheckIdleState>
 800dc26:	4603      	mov	r3, r0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08a      	sub	sp, #40	@ 0x28
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	d137      	bne.n	800dcb8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <HAL_UART_Receive_DMA+0x24>
 800dc4e:	88fb      	ldrh	r3, [r7, #6]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e030      	b.n	800dcba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a18      	ldr	r2, [pc, #96]	@ (800dcc4 <HAL_UART_Receive_DMA+0x94>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d01f      	beq.n	800dca8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d018      	beq.n	800dca8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	e853 3f00 	ldrex	r3, [r3]
 800dc82:	613b      	str	r3, [r7, #16]
   return(result);
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	461a      	mov	r2, r3
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc94:	623b      	str	r3, [r7, #32]
 800dc96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc98:	69f9      	ldr	r1, [r7, #28]
 800dc9a:	6a3a      	ldr	r2, [r7, #32]
 800dc9c:	e841 2300 	strex	r3, r2, [r1]
 800dca0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e6      	bne.n	800dc76 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dca8:	88fb      	ldrh	r3, [r7, #6]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	68b9      	ldr	r1, [r7, #8]
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f001 fb36 	bl	800f320 <UART_Start_Receive_DMA>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	e000      	b.n	800dcba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dcb8:	2302      	movs	r3, #2
  }
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3728      	adds	r7, #40	@ 0x28
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	58000c00 	.word	0x58000c00

0800dcc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b0ba      	sub	sp, #232	@ 0xe8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dcee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800dcf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800dcfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d11b      	bne.n	800dd3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd08:	f003 0320 	and.w	r3, r3, #32
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d015      	beq.n	800dd3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd14:	f003 0320 	and.w	r3, r3, #32
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d105      	bne.n	800dd28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d009      	beq.n	800dd3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 8393 	beq.w	800e458 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	4798      	blx	r3
      }
      return;
 800dd3a:	e38d      	b.n	800e458 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dd3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f000 8123 	beq.w	800df8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dd46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800dd4a:	4b8d      	ldr	r3, [pc, #564]	@ (800df80 <HAL_UART_IRQHandler+0x2b8>)
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d106      	bne.n	800dd60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800dd56:	4b8b      	ldr	r3, [pc, #556]	@ (800df84 <HAL_UART_IRQHandler+0x2bc>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 8116 	beq.w	800df8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d011      	beq.n	800dd90 <HAL_UART_IRQHandler+0xc8>
 800dd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd86:	f043 0201 	orr.w	r2, r3, #1
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd94:	f003 0302 	and.w	r3, r3, #2
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d011      	beq.n	800ddc0 <HAL_UART_IRQHandler+0xf8>
 800dd9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2202      	movs	r2, #2
 800ddae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddb6:	f043 0204 	orr.w	r2, r3, #4
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d011      	beq.n	800ddf0 <HAL_UART_IRQHandler+0x128>
 800ddcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddd0:	f003 0301 	and.w	r3, r3, #1
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2204      	movs	r2, #4
 800ddde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dde6:	f043 0202 	orr.w	r2, r3, #2
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ddf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddf4:	f003 0308 	and.w	r3, r3, #8
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d017      	beq.n	800de2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ddfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de00:	f003 0320 	and.w	r3, r3, #32
 800de04:	2b00      	cmp	r3, #0
 800de06:	d105      	bne.n	800de14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800de08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800de0c:	4b5c      	ldr	r3, [pc, #368]	@ (800df80 <HAL_UART_IRQHandler+0x2b8>)
 800de0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2208      	movs	r2, #8
 800de1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de22:	f043 0208 	orr.w	r2, r3, #8
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de34:	2b00      	cmp	r3, #0
 800de36:	d012      	beq.n	800de5e <HAL_UART_IRQHandler+0x196>
 800de38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00c      	beq.n	800de5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de54:	f043 0220 	orr.w	r2, r3, #32
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 82f9 	beq.w	800e45c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de6e:	f003 0320 	and.w	r3, r3, #32
 800de72:	2b00      	cmp	r3, #0
 800de74:	d013      	beq.n	800de9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de7a:	f003 0320 	and.w	r3, r3, #32
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d105      	bne.n	800de8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d007      	beq.n	800de9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deb2:	2b40      	cmp	r3, #64	@ 0x40
 800deb4:	d005      	beq.n	800dec2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800deb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d054      	beq.n	800df6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f001 fb14 	bl	800f4f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ded2:	2b40      	cmp	r3, #64	@ 0x40
 800ded4:	d146      	bne.n	800df64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3308      	adds	r3, #8
 800dedc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dee4:	e853 3f00 	ldrex	r3, [r3]
 800dee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800deec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800def0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800def4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3308      	adds	r3, #8
 800defe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800df02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800df06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800df0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800df12:	e841 2300 	strex	r3, r2, [r1]
 800df16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800df1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1d9      	bne.n	800ded6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d017      	beq.n	800df5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df32:	4a15      	ldr	r2, [pc, #84]	@ (800df88 <HAL_UART_IRQHandler+0x2c0>)
 800df34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7f6 fe5b 	bl	8004bf8 <HAL_DMA_Abort_IT>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d019      	beq.n	800df7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800df56:	4610      	mov	r0, r2
 800df58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df5a:	e00f      	b.n	800df7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 faa7 	bl	800e4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df62:	e00b      	b.n	800df7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 faa3 	bl	800e4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df6a:	e007      	b.n	800df7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fa9f 	bl	800e4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800df7a:	e26f      	b.n	800e45c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df7c:	bf00      	nop
    return;
 800df7e:	e26d      	b.n	800e45c <HAL_UART_IRQHandler+0x794>
 800df80:	10000001 	.word	0x10000001
 800df84:	04000120 	.word	0x04000120
 800df88:	0800f7a3 	.word	0x0800f7a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df90:	2b01      	cmp	r3, #1
 800df92:	f040 8203 	bne.w	800e39c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800df96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df9a:	f003 0310 	and.w	r3, r3, #16
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 81fc 	beq.w	800e39c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dfa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfa8:	f003 0310 	and.w	r3, r3, #16
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 81f5 	beq.w	800e39c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2210      	movs	r2, #16
 800dfb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfc4:	2b40      	cmp	r3, #64	@ 0x40
 800dfc6:	f040 816d 	bne.w	800e2a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4aa4      	ldr	r2, [pc, #656]	@ (800e264 <HAL_UART_IRQHandler+0x59c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d068      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4aa1      	ldr	r2, [pc, #644]	@ (800e268 <HAL_UART_IRQHandler+0x5a0>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d061      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a9f      	ldr	r2, [pc, #636]	@ (800e26c <HAL_UART_IRQHandler+0x5a4>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d05a      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a9c      	ldr	r2, [pc, #624]	@ (800e270 <HAL_UART_IRQHandler+0x5a8>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d053      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a9a      	ldr	r2, [pc, #616]	@ (800e274 <HAL_UART_IRQHandler+0x5ac>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d04c      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a97      	ldr	r2, [pc, #604]	@ (800e278 <HAL_UART_IRQHandler+0x5b0>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d045      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a95      	ldr	r2, [pc, #596]	@ (800e27c <HAL_UART_IRQHandler+0x5b4>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d03e      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a92      	ldr	r2, [pc, #584]	@ (800e280 <HAL_UART_IRQHandler+0x5b8>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d037      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a90      	ldr	r2, [pc, #576]	@ (800e284 <HAL_UART_IRQHandler+0x5bc>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d030      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a8d      	ldr	r2, [pc, #564]	@ (800e288 <HAL_UART_IRQHandler+0x5c0>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d029      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a8b      	ldr	r2, [pc, #556]	@ (800e28c <HAL_UART_IRQHandler+0x5c4>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d022      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a88      	ldr	r2, [pc, #544]	@ (800e290 <HAL_UART_IRQHandler+0x5c8>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d01b      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a86      	ldr	r2, [pc, #536]	@ (800e294 <HAL_UART_IRQHandler+0x5cc>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d014      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a83      	ldr	r2, [pc, #524]	@ (800e298 <HAL_UART_IRQHandler+0x5d0>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d00d      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a81      	ldr	r2, [pc, #516]	@ (800e29c <HAL_UART_IRQHandler+0x5d4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d006      	beq.n	800e0aa <HAL_UART_IRQHandler+0x3e2>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a7e      	ldr	r2, [pc, #504]	@ (800e2a0 <HAL_UART_IRQHandler+0x5d8>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d106      	bne.n	800e0b8 <HAL_UART_IRQHandler+0x3f0>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	e005      	b.n	800e0c4 <HAL_UART_IRQHandler+0x3fc>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e0c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 80ad 	beq.w	800e22c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	f080 80a5 	bcs.w	800e22c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0f8:	f000 8087 	beq.w	800e20a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e108:	e853 3f00 	ldrex	r3, [r3]
 800e10c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	461a      	mov	r2, r3
 800e122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e12a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e136:	e841 2300 	strex	r3, r2, [r1]
 800e13a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1da      	bne.n	800e0fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3308      	adds	r3, #8
 800e14c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e150:	e853 3f00 	ldrex	r3, [r3]
 800e154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e158:	f023 0301 	bic.w	r3, r3, #1
 800e15c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3308      	adds	r3, #8
 800e166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e16a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e16e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e176:	e841 2300 	strex	r3, r2, [r1]
 800e17a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e17c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1e1      	bne.n	800e146 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3308      	adds	r3, #8
 800e188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e18c:	e853 3f00 	ldrex	r3, [r3]
 800e190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e1a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e1a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e1ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e1ae:	e841 2300 	strex	r3, r2, [r1]
 800e1b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e1b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1e3      	bne.n	800e182 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2220      	movs	r2, #32
 800e1be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1d8:	f023 0310 	bic.w	r3, r3, #16
 800e1dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e1ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e1f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1f2:	e841 2300 	strex	r3, r2, [r1]
 800e1f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e1f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1e4      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e204:	4618      	mov	r0, r3
 800e206:	f7f6 f9d9 	bl	80045bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2202      	movs	r2, #2
 800e20e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	b29b      	uxth	r3, r3
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f94d 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e22a:	e119      	b.n	800e460 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e236:	429a      	cmp	r2, r3
 800e238:	f040 8112 	bne.w	800e460 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e242:	69db      	ldr	r3, [r3, #28]
 800e244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e248:	f040 810a 	bne.w	800e460 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2202      	movs	r2, #2
 800e250:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f932 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
      return;
 800e260:	e0fe      	b.n	800e460 <HAL_UART_IRQHandler+0x798>
 800e262:	bf00      	nop
 800e264:	40020010 	.word	0x40020010
 800e268:	40020028 	.word	0x40020028
 800e26c:	40020040 	.word	0x40020040
 800e270:	40020058 	.word	0x40020058
 800e274:	40020070 	.word	0x40020070
 800e278:	40020088 	.word	0x40020088
 800e27c:	400200a0 	.word	0x400200a0
 800e280:	400200b8 	.word	0x400200b8
 800e284:	40020410 	.word	0x40020410
 800e288:	40020428 	.word	0x40020428
 800e28c:	40020440 	.word	0x40020440
 800e290:	40020458 	.word	0x40020458
 800e294:	40020470 	.word	0x40020470
 800e298:	40020488 	.word	0x40020488
 800e29c:	400204a0 	.word	0x400204a0
 800e2a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 80cf 	beq.w	800e464 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80ca 	beq.w	800e464 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d8:	e853 3f00 	ldrex	r3, [r3]
 800e2dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e2f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e2f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e2fa:	e841 2300 	strex	r3, r2, [r1]
 800e2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1e4      	bne.n	800e2d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3308      	adds	r3, #8
 800e30c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e310:	e853 3f00 	ldrex	r3, [r3]
 800e314:	623b      	str	r3, [r7, #32]
   return(result);
 800e316:	6a3a      	ldr	r2, [r7, #32]
 800e318:	4b55      	ldr	r3, [pc, #340]	@ (800e470 <HAL_UART_IRQHandler+0x7a8>)
 800e31a:	4013      	ands	r3, r2
 800e31c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3308      	adds	r3, #8
 800e326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e32a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e332:	e841 2300 	strex	r3, r2, [r1]
 800e336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1e3      	bne.n	800e306 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2220      	movs	r2, #32
 800e342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	e853 3f00 	ldrex	r3, [r3]
 800e35e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f023 0310 	bic.w	r3, r3, #16
 800e366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e374:	61fb      	str	r3, [r7, #28]
 800e376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e378:	69b9      	ldr	r1, [r7, #24]
 800e37a:	69fa      	ldr	r2, [r7, #28]
 800e37c:	e841 2300 	strex	r3, r2, [r1]
 800e380:	617b      	str	r3, [r7, #20]
   return(result);
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1e4      	bne.n	800e352 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e38e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f895 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e39a:	e063      	b.n	800e464 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00e      	beq.n	800e3c6 <HAL_UART_IRQHandler+0x6fe>
 800e3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d008      	beq.n	800e3c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e3bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 fa2c 	bl	800f81c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e3c4:	e051      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d014      	beq.n	800e3fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d105      	bne.n	800e3ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e3de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d008      	beq.n	800e3fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d03a      	beq.n	800e468 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	4798      	blx	r3
    }
    return;
 800e3fa:	e035      	b.n	800e468 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e404:	2b00      	cmp	r3, #0
 800e406:	d009      	beq.n	800e41c <HAL_UART_IRQHandler+0x754>
 800e408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e410:	2b00      	cmp	r3, #0
 800e412:	d003      	beq.n	800e41c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 f9d6 	bl	800f7c6 <UART_EndTransmit_IT>
    return;
 800e41a:	e026      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d009      	beq.n	800e43c <HAL_UART_IRQHandler+0x774>
 800e428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e42c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f001 fa05 	bl	800f844 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e43a:	e016      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d010      	beq.n	800e46a <HAL_UART_IRQHandler+0x7a2>
 800e448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	da0c      	bge.n	800e46a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f001 f9ed 	bl	800f830 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e456:	e008      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e458:	bf00      	nop
 800e45a:	e006      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
    return;
 800e45c:	bf00      	nop
 800e45e:	e004      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e460:	bf00      	nop
 800e462:	e002      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e464:	bf00      	nop
 800e466:	e000      	b.n	800e46a <HAL_UART_IRQHandler+0x7a2>
    return;
 800e468:	bf00      	nop
  }
}
 800e46a:	37e8      	adds	r7, #232	@ 0xe8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	effffffe 	.word	0xeffffffe

0800e474 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4e0:	b092      	sub	sp, #72	@ 0x48
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	689a      	ldr	r2, [r3, #8]
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	431a      	orrs	r2, r3
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	431a      	orrs	r2, r3
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	69db      	ldr	r3, [r3, #28]
 800e500:	4313      	orrs	r3, r2
 800e502:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4bbe      	ldr	r3, [pc, #760]	@ (800e804 <UART_SetConfig+0x328>)
 800e50c:	4013      	ands	r3, r2
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	6812      	ldr	r2, [r2, #0]
 800e512:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e514:	430b      	orrs	r3, r1
 800e516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	68da      	ldr	r2, [r3, #12]
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	430a      	orrs	r2, r1
 800e52c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4ab3      	ldr	r2, [pc, #716]	@ (800e808 <UART_SetConfig+0x32c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d004      	beq.n	800e548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e544:	4313      	orrs	r3, r2
 800e546:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	689a      	ldr	r2, [r3, #8]
 800e54e:	4baf      	ldr	r3, [pc, #700]	@ (800e80c <UART_SetConfig+0x330>)
 800e550:	4013      	ands	r3, r2
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	6812      	ldr	r2, [r2, #0]
 800e556:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e558:	430b      	orrs	r3, r1
 800e55a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e562:	f023 010f 	bic.w	r1, r3, #15
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4aa6      	ldr	r2, [pc, #664]	@ (800e810 <UART_SetConfig+0x334>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d177      	bne.n	800e66c <UART_SetConfig+0x190>
 800e57c:	4ba5      	ldr	r3, [pc, #660]	@ (800e814 <UART_SetConfig+0x338>)
 800e57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e580:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e584:	2b28      	cmp	r3, #40	@ 0x28
 800e586:	d86d      	bhi.n	800e664 <UART_SetConfig+0x188>
 800e588:	a201      	add	r2, pc, #4	@ (adr r2, 800e590 <UART_SetConfig+0xb4>)
 800e58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58e:	bf00      	nop
 800e590:	0800e635 	.word	0x0800e635
 800e594:	0800e665 	.word	0x0800e665
 800e598:	0800e665 	.word	0x0800e665
 800e59c:	0800e665 	.word	0x0800e665
 800e5a0:	0800e665 	.word	0x0800e665
 800e5a4:	0800e665 	.word	0x0800e665
 800e5a8:	0800e665 	.word	0x0800e665
 800e5ac:	0800e665 	.word	0x0800e665
 800e5b0:	0800e63d 	.word	0x0800e63d
 800e5b4:	0800e665 	.word	0x0800e665
 800e5b8:	0800e665 	.word	0x0800e665
 800e5bc:	0800e665 	.word	0x0800e665
 800e5c0:	0800e665 	.word	0x0800e665
 800e5c4:	0800e665 	.word	0x0800e665
 800e5c8:	0800e665 	.word	0x0800e665
 800e5cc:	0800e665 	.word	0x0800e665
 800e5d0:	0800e645 	.word	0x0800e645
 800e5d4:	0800e665 	.word	0x0800e665
 800e5d8:	0800e665 	.word	0x0800e665
 800e5dc:	0800e665 	.word	0x0800e665
 800e5e0:	0800e665 	.word	0x0800e665
 800e5e4:	0800e665 	.word	0x0800e665
 800e5e8:	0800e665 	.word	0x0800e665
 800e5ec:	0800e665 	.word	0x0800e665
 800e5f0:	0800e64d 	.word	0x0800e64d
 800e5f4:	0800e665 	.word	0x0800e665
 800e5f8:	0800e665 	.word	0x0800e665
 800e5fc:	0800e665 	.word	0x0800e665
 800e600:	0800e665 	.word	0x0800e665
 800e604:	0800e665 	.word	0x0800e665
 800e608:	0800e665 	.word	0x0800e665
 800e60c:	0800e665 	.word	0x0800e665
 800e610:	0800e655 	.word	0x0800e655
 800e614:	0800e665 	.word	0x0800e665
 800e618:	0800e665 	.word	0x0800e665
 800e61c:	0800e665 	.word	0x0800e665
 800e620:	0800e665 	.word	0x0800e665
 800e624:	0800e665 	.word	0x0800e665
 800e628:	0800e665 	.word	0x0800e665
 800e62c:	0800e665 	.word	0x0800e665
 800e630:	0800e65d 	.word	0x0800e65d
 800e634:	2301      	movs	r3, #1
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e63a:	e222      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e63c:	2304      	movs	r3, #4
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e642:	e21e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e644:	2308      	movs	r3, #8
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e64a:	e21a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e64c:	2310      	movs	r3, #16
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e652:	e216      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e654:	2320      	movs	r3, #32
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e65a:	e212      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e65c:	2340      	movs	r3, #64	@ 0x40
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e662:	e20e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e664:	2380      	movs	r3, #128	@ 0x80
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e66a:	e20a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a69      	ldr	r2, [pc, #420]	@ (800e818 <UART_SetConfig+0x33c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d130      	bne.n	800e6d8 <UART_SetConfig+0x1fc>
 800e676:	4b67      	ldr	r3, [pc, #412]	@ (800e814 <UART_SetConfig+0x338>)
 800e678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e67a:	f003 0307 	and.w	r3, r3, #7
 800e67e:	2b05      	cmp	r3, #5
 800e680:	d826      	bhi.n	800e6d0 <UART_SetConfig+0x1f4>
 800e682:	a201      	add	r2, pc, #4	@ (adr r2, 800e688 <UART_SetConfig+0x1ac>)
 800e684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e688:	0800e6a1 	.word	0x0800e6a1
 800e68c:	0800e6a9 	.word	0x0800e6a9
 800e690:	0800e6b1 	.word	0x0800e6b1
 800e694:	0800e6b9 	.word	0x0800e6b9
 800e698:	0800e6c1 	.word	0x0800e6c1
 800e69c:	0800e6c9 	.word	0x0800e6c9
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6a6:	e1ec      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6a8:	2304      	movs	r3, #4
 800e6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ae:	e1e8      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6b6:	e1e4      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6be:	e1e0      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6c0:	2320      	movs	r3, #32
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6c6:	e1dc      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6c8:	2340      	movs	r3, #64	@ 0x40
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ce:	e1d8      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6d0:	2380      	movs	r3, #128	@ 0x80
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6d6:	e1d4      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a4f      	ldr	r2, [pc, #316]	@ (800e81c <UART_SetConfig+0x340>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d130      	bne.n	800e744 <UART_SetConfig+0x268>
 800e6e2:	4b4c      	ldr	r3, [pc, #304]	@ (800e814 <UART_SetConfig+0x338>)
 800e6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6e6:	f003 0307 	and.w	r3, r3, #7
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d826      	bhi.n	800e73c <UART_SetConfig+0x260>
 800e6ee:	a201      	add	r2, pc, #4	@ (adr r2, 800e6f4 <UART_SetConfig+0x218>)
 800e6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f4:	0800e70d 	.word	0x0800e70d
 800e6f8:	0800e715 	.word	0x0800e715
 800e6fc:	0800e71d 	.word	0x0800e71d
 800e700:	0800e725 	.word	0x0800e725
 800e704:	0800e72d 	.word	0x0800e72d
 800e708:	0800e735 	.word	0x0800e735
 800e70c:	2300      	movs	r3, #0
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e712:	e1b6      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e714:	2304      	movs	r3, #4
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e71a:	e1b2      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e71c:	2308      	movs	r3, #8
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e722:	e1ae      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e724:	2310      	movs	r3, #16
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e72a:	e1aa      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e72c:	2320      	movs	r3, #32
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e1a6      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e734:	2340      	movs	r3, #64	@ 0x40
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e1a2      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e73c:	2380      	movs	r3, #128	@ 0x80
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e742:	e19e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a35      	ldr	r2, [pc, #212]	@ (800e820 <UART_SetConfig+0x344>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d130      	bne.n	800e7b0 <UART_SetConfig+0x2d4>
 800e74e:	4b31      	ldr	r3, [pc, #196]	@ (800e814 <UART_SetConfig+0x338>)
 800e750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e752:	f003 0307 	and.w	r3, r3, #7
 800e756:	2b05      	cmp	r3, #5
 800e758:	d826      	bhi.n	800e7a8 <UART_SetConfig+0x2cc>
 800e75a:	a201      	add	r2, pc, #4	@ (adr r2, 800e760 <UART_SetConfig+0x284>)
 800e75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e760:	0800e779 	.word	0x0800e779
 800e764:	0800e781 	.word	0x0800e781
 800e768:	0800e789 	.word	0x0800e789
 800e76c:	0800e791 	.word	0x0800e791
 800e770:	0800e799 	.word	0x0800e799
 800e774:	0800e7a1 	.word	0x0800e7a1
 800e778:	2300      	movs	r3, #0
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e77e:	e180      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e780:	2304      	movs	r3, #4
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e786:	e17c      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e788:	2308      	movs	r3, #8
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e78e:	e178      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e790:	2310      	movs	r3, #16
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e796:	e174      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e798:	2320      	movs	r3, #32
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79e:	e170      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7a0:	2340      	movs	r3, #64	@ 0x40
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a6:	e16c      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7a8:	2380      	movs	r3, #128	@ 0x80
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ae:	e168      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a1b      	ldr	r2, [pc, #108]	@ (800e824 <UART_SetConfig+0x348>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d142      	bne.n	800e840 <UART_SetConfig+0x364>
 800e7ba:	4b16      	ldr	r3, [pc, #88]	@ (800e814 <UART_SetConfig+0x338>)
 800e7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7be:	f003 0307 	and.w	r3, r3, #7
 800e7c2:	2b05      	cmp	r3, #5
 800e7c4:	d838      	bhi.n	800e838 <UART_SetConfig+0x35c>
 800e7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <UART_SetConfig+0x2f0>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e7e5 	.word	0x0800e7e5
 800e7d0:	0800e7ed 	.word	0x0800e7ed
 800e7d4:	0800e7f5 	.word	0x0800e7f5
 800e7d8:	0800e7fd 	.word	0x0800e7fd
 800e7dc:	0800e829 	.word	0x0800e829
 800e7e0:	0800e831 	.word	0x0800e831
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ea:	e14a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7ec:	2304      	movs	r3, #4
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7f2:	e146      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7f4:	2308      	movs	r3, #8
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7fa:	e142      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e7fc:	2310      	movs	r3, #16
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e802:	e13e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e804:	cfff69f3 	.word	0xcfff69f3
 800e808:	58000c00 	.word	0x58000c00
 800e80c:	11fff4ff 	.word	0x11fff4ff
 800e810:	40011000 	.word	0x40011000
 800e814:	58024400 	.word	0x58024400
 800e818:	40004400 	.word	0x40004400
 800e81c:	40004800 	.word	0x40004800
 800e820:	40004c00 	.word	0x40004c00
 800e824:	40005000 	.word	0x40005000
 800e828:	2320      	movs	r3, #32
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e82e:	e128      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e830:	2340      	movs	r3, #64	@ 0x40
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e836:	e124      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e838:	2380      	movs	r3, #128	@ 0x80
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e83e:	e120      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4acb      	ldr	r2, [pc, #812]	@ (800eb74 <UART_SetConfig+0x698>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d176      	bne.n	800e938 <UART_SetConfig+0x45c>
 800e84a:	4bcb      	ldr	r3, [pc, #812]	@ (800eb78 <UART_SetConfig+0x69c>)
 800e84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e84e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e852:	2b28      	cmp	r3, #40	@ 0x28
 800e854:	d86c      	bhi.n	800e930 <UART_SetConfig+0x454>
 800e856:	a201      	add	r2, pc, #4	@ (adr r2, 800e85c <UART_SetConfig+0x380>)
 800e858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85c:	0800e901 	.word	0x0800e901
 800e860:	0800e931 	.word	0x0800e931
 800e864:	0800e931 	.word	0x0800e931
 800e868:	0800e931 	.word	0x0800e931
 800e86c:	0800e931 	.word	0x0800e931
 800e870:	0800e931 	.word	0x0800e931
 800e874:	0800e931 	.word	0x0800e931
 800e878:	0800e931 	.word	0x0800e931
 800e87c:	0800e909 	.word	0x0800e909
 800e880:	0800e931 	.word	0x0800e931
 800e884:	0800e931 	.word	0x0800e931
 800e888:	0800e931 	.word	0x0800e931
 800e88c:	0800e931 	.word	0x0800e931
 800e890:	0800e931 	.word	0x0800e931
 800e894:	0800e931 	.word	0x0800e931
 800e898:	0800e931 	.word	0x0800e931
 800e89c:	0800e911 	.word	0x0800e911
 800e8a0:	0800e931 	.word	0x0800e931
 800e8a4:	0800e931 	.word	0x0800e931
 800e8a8:	0800e931 	.word	0x0800e931
 800e8ac:	0800e931 	.word	0x0800e931
 800e8b0:	0800e931 	.word	0x0800e931
 800e8b4:	0800e931 	.word	0x0800e931
 800e8b8:	0800e931 	.word	0x0800e931
 800e8bc:	0800e919 	.word	0x0800e919
 800e8c0:	0800e931 	.word	0x0800e931
 800e8c4:	0800e931 	.word	0x0800e931
 800e8c8:	0800e931 	.word	0x0800e931
 800e8cc:	0800e931 	.word	0x0800e931
 800e8d0:	0800e931 	.word	0x0800e931
 800e8d4:	0800e931 	.word	0x0800e931
 800e8d8:	0800e931 	.word	0x0800e931
 800e8dc:	0800e921 	.word	0x0800e921
 800e8e0:	0800e931 	.word	0x0800e931
 800e8e4:	0800e931 	.word	0x0800e931
 800e8e8:	0800e931 	.word	0x0800e931
 800e8ec:	0800e931 	.word	0x0800e931
 800e8f0:	0800e931 	.word	0x0800e931
 800e8f4:	0800e931 	.word	0x0800e931
 800e8f8:	0800e931 	.word	0x0800e931
 800e8fc:	0800e929 	.word	0x0800e929
 800e900:	2301      	movs	r3, #1
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e906:	e0bc      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e908:	2304      	movs	r3, #4
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e0b8      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e910:	2308      	movs	r3, #8
 800e912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e916:	e0b4      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e918:	2310      	movs	r3, #16
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e91e:	e0b0      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e920:	2320      	movs	r3, #32
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e926:	e0ac      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e928:	2340      	movs	r3, #64	@ 0x40
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92e:	e0a8      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e930:	2380      	movs	r3, #128	@ 0x80
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e936:	e0a4      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a8f      	ldr	r2, [pc, #572]	@ (800eb7c <UART_SetConfig+0x6a0>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d130      	bne.n	800e9a4 <UART_SetConfig+0x4c8>
 800e942:	4b8d      	ldr	r3, [pc, #564]	@ (800eb78 <UART_SetConfig+0x69c>)
 800e944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e946:	f003 0307 	and.w	r3, r3, #7
 800e94a:	2b05      	cmp	r3, #5
 800e94c:	d826      	bhi.n	800e99c <UART_SetConfig+0x4c0>
 800e94e:	a201      	add	r2, pc, #4	@ (adr r2, 800e954 <UART_SetConfig+0x478>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e96d 	.word	0x0800e96d
 800e958:	0800e975 	.word	0x0800e975
 800e95c:	0800e97d 	.word	0x0800e97d
 800e960:	0800e985 	.word	0x0800e985
 800e964:	0800e98d 	.word	0x0800e98d
 800e968:	0800e995 	.word	0x0800e995
 800e96c:	2300      	movs	r3, #0
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e972:	e086      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e974:	2304      	movs	r3, #4
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97a:	e082      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e97c:	2308      	movs	r3, #8
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e982:	e07e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e984:	2310      	movs	r3, #16
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98a:	e07a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e98c:	2320      	movs	r3, #32
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e992:	e076      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e994:	2340      	movs	r3, #64	@ 0x40
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99a:	e072      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e99c:	2380      	movs	r3, #128	@ 0x80
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a2:	e06e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a75      	ldr	r2, [pc, #468]	@ (800eb80 <UART_SetConfig+0x6a4>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d130      	bne.n	800ea10 <UART_SetConfig+0x534>
 800e9ae:	4b72      	ldr	r3, [pc, #456]	@ (800eb78 <UART_SetConfig+0x69c>)
 800e9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9b2:	f003 0307 	and.w	r3, r3, #7
 800e9b6:	2b05      	cmp	r3, #5
 800e9b8:	d826      	bhi.n	800ea08 <UART_SetConfig+0x52c>
 800e9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e9c0 <UART_SetConfig+0x4e4>)
 800e9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c0:	0800e9d9 	.word	0x0800e9d9
 800e9c4:	0800e9e1 	.word	0x0800e9e1
 800e9c8:	0800e9e9 	.word	0x0800e9e9
 800e9cc:	0800e9f1 	.word	0x0800e9f1
 800e9d0:	0800e9f9 	.word	0x0800e9f9
 800e9d4:	0800ea01 	.word	0x0800ea01
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e050      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e9e0:	2304      	movs	r3, #4
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e04c      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e9e8:	2308      	movs	r3, #8
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ee:	e048      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e9f0:	2310      	movs	r3, #16
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f6:	e044      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800e9f8:	2320      	movs	r3, #32
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e040      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea00:	2340      	movs	r3, #64	@ 0x40
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e03c      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea08:	2380      	movs	r3, #128	@ 0x80
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0e:	e038      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a5b      	ldr	r2, [pc, #364]	@ (800eb84 <UART_SetConfig+0x6a8>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d130      	bne.n	800ea7c <UART_SetConfig+0x5a0>
 800ea1a:	4b57      	ldr	r3, [pc, #348]	@ (800eb78 <UART_SetConfig+0x69c>)
 800ea1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea1e:	f003 0307 	and.w	r3, r3, #7
 800ea22:	2b05      	cmp	r3, #5
 800ea24:	d826      	bhi.n	800ea74 <UART_SetConfig+0x598>
 800ea26:	a201      	add	r2, pc, #4	@ (adr r2, 800ea2c <UART_SetConfig+0x550>)
 800ea28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2c:	0800ea45 	.word	0x0800ea45
 800ea30:	0800ea4d 	.word	0x0800ea4d
 800ea34:	0800ea55 	.word	0x0800ea55
 800ea38:	0800ea5d 	.word	0x0800ea5d
 800ea3c:	0800ea65 	.word	0x0800ea65
 800ea40:	0800ea6d 	.word	0x0800ea6d
 800ea44:	2302      	movs	r3, #2
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4a:	e01a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea52:	e016      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea54:	2308      	movs	r3, #8
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5a:	e012      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea62:	e00e      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea64:	2320      	movs	r3, #32
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e00a      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea6c:	2340      	movs	r3, #64	@ 0x40
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e006      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea74:	2380      	movs	r3, #128	@ 0x80
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7a:	e002      	b.n	800ea82 <UART_SetConfig+0x5a6>
 800ea7c:	2380      	movs	r3, #128	@ 0x80
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a3f      	ldr	r2, [pc, #252]	@ (800eb84 <UART_SetConfig+0x6a8>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	f040 80f8 	bne.w	800ec7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ea92:	2b20      	cmp	r3, #32
 800ea94:	dc46      	bgt.n	800eb24 <UART_SetConfig+0x648>
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	f2c0 8082 	blt.w	800eba0 <UART_SetConfig+0x6c4>
 800ea9c:	3b02      	subs	r3, #2
 800ea9e:	2b1e      	cmp	r3, #30
 800eaa0:	d87e      	bhi.n	800eba0 <UART_SetConfig+0x6c4>
 800eaa2:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa8 <UART_SetConfig+0x5cc>)
 800eaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa8:	0800eb2b 	.word	0x0800eb2b
 800eaac:	0800eba1 	.word	0x0800eba1
 800eab0:	0800eb33 	.word	0x0800eb33
 800eab4:	0800eba1 	.word	0x0800eba1
 800eab8:	0800eba1 	.word	0x0800eba1
 800eabc:	0800eba1 	.word	0x0800eba1
 800eac0:	0800eb43 	.word	0x0800eb43
 800eac4:	0800eba1 	.word	0x0800eba1
 800eac8:	0800eba1 	.word	0x0800eba1
 800eacc:	0800eba1 	.word	0x0800eba1
 800ead0:	0800eba1 	.word	0x0800eba1
 800ead4:	0800eba1 	.word	0x0800eba1
 800ead8:	0800eba1 	.word	0x0800eba1
 800eadc:	0800eba1 	.word	0x0800eba1
 800eae0:	0800eb53 	.word	0x0800eb53
 800eae4:	0800eba1 	.word	0x0800eba1
 800eae8:	0800eba1 	.word	0x0800eba1
 800eaec:	0800eba1 	.word	0x0800eba1
 800eaf0:	0800eba1 	.word	0x0800eba1
 800eaf4:	0800eba1 	.word	0x0800eba1
 800eaf8:	0800eba1 	.word	0x0800eba1
 800eafc:	0800eba1 	.word	0x0800eba1
 800eb00:	0800eba1 	.word	0x0800eba1
 800eb04:	0800eba1 	.word	0x0800eba1
 800eb08:	0800eba1 	.word	0x0800eba1
 800eb0c:	0800eba1 	.word	0x0800eba1
 800eb10:	0800eba1 	.word	0x0800eba1
 800eb14:	0800eba1 	.word	0x0800eba1
 800eb18:	0800eba1 	.word	0x0800eba1
 800eb1c:	0800eba1 	.word	0x0800eba1
 800eb20:	0800eb93 	.word	0x0800eb93
 800eb24:	2b40      	cmp	r3, #64	@ 0x40
 800eb26:	d037      	beq.n	800eb98 <UART_SetConfig+0x6bc>
 800eb28:	e03a      	b.n	800eba0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eb2a:	f7fb f8c9 	bl	8009cc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800eb2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eb30:	e03c      	b.n	800ebac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fb f8d8 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb40:	e034      	b.n	800ebac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb42:	f107 0318 	add.w	r3, r7, #24
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fb fa24 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb50:	e02c      	b.n	800ebac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb52:	4b09      	ldr	r3, [pc, #36]	@ (800eb78 <UART_SetConfig+0x69c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f003 0320 	and.w	r3, r3, #32
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d016      	beq.n	800eb8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb5e:	4b06      	ldr	r3, [pc, #24]	@ (800eb78 <UART_SetConfig+0x69c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	08db      	lsrs	r3, r3, #3
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	4a07      	ldr	r2, [pc, #28]	@ (800eb88 <UART_SetConfig+0x6ac>)
 800eb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800eb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb70:	e01c      	b.n	800ebac <UART_SetConfig+0x6d0>
 800eb72:	bf00      	nop
 800eb74:	40011400 	.word	0x40011400
 800eb78:	58024400 	.word	0x58024400
 800eb7c:	40007800 	.word	0x40007800
 800eb80:	40007c00 	.word	0x40007c00
 800eb84:	58000c00 	.word	0x58000c00
 800eb88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eb8c:	4b9d      	ldr	r3, [pc, #628]	@ (800ee04 <UART_SetConfig+0x928>)
 800eb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb90:	e00c      	b.n	800ebac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb92:	4b9d      	ldr	r3, [pc, #628]	@ (800ee08 <UART_SetConfig+0x92c>)
 800eb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb96:	e009      	b.n	800ebac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb9e:	e005      	b.n	800ebac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eba0:	2300      	movs	r3, #0
 800eba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eba4:	2301      	movs	r3, #1
 800eba6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ebaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ebac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 81de 	beq.w	800ef70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb8:	4a94      	ldr	r2, [pc, #592]	@ (800ee0c <UART_SetConfig+0x930>)
 800ebba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebc6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	4413      	add	r3, r2
 800ebd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d305      	bcc.n	800ebe4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ebde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d903      	bls.n	800ebec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ebea:	e1c1      	b.n	800ef70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebee:	2200      	movs	r2, #0
 800ebf0:	60bb      	str	r3, [r7, #8]
 800ebf2:	60fa      	str	r2, [r7, #12]
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf8:	4a84      	ldr	r2, [pc, #528]	@ (800ee0c <UART_SetConfig+0x930>)
 800ebfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	2200      	movs	r2, #0
 800ec02:	603b      	str	r3, [r7, #0]
 800ec04:	607a      	str	r2, [r7, #4]
 800ec06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ec0e:	f7f1 fbbf 	bl	8000390 <__aeabi_uldivmod>
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	4610      	mov	r0, r2
 800ec18:	4619      	mov	r1, r3
 800ec1a:	f04f 0200 	mov.w	r2, #0
 800ec1e:	f04f 0300 	mov.w	r3, #0
 800ec22:	020b      	lsls	r3, r1, #8
 800ec24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ec28:	0202      	lsls	r2, r0, #8
 800ec2a:	6979      	ldr	r1, [r7, #20]
 800ec2c:	6849      	ldr	r1, [r1, #4]
 800ec2e:	0849      	lsrs	r1, r1, #1
 800ec30:	2000      	movs	r0, #0
 800ec32:	460c      	mov	r4, r1
 800ec34:	4605      	mov	r5, r0
 800ec36:	eb12 0804 	adds.w	r8, r2, r4
 800ec3a:	eb43 0905 	adc.w	r9, r3, r5
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	469a      	mov	sl, r3
 800ec46:	4693      	mov	fp, r2
 800ec48:	4652      	mov	r2, sl
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	4640      	mov	r0, r8
 800ec4e:	4649      	mov	r1, r9
 800ec50:	f7f1 fb9e 	bl	8000390 <__aeabi_uldivmod>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4613      	mov	r3, r2
 800ec5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec62:	d308      	bcc.n	800ec76 <UART_SetConfig+0x79a>
 800ec64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec6a:	d204      	bcs.n	800ec76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec72:	60da      	str	r2, [r3, #12]
 800ec74:	e17c      	b.n	800ef70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ec7c:	e178      	b.n	800ef70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec86:	f040 80c5 	bne.w	800ee14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ec8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	2b20      	cmp	r3, #32
 800ec90:	dc48      	bgt.n	800ed24 <UART_SetConfig+0x848>
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	db7b      	blt.n	800ed8e <UART_SetConfig+0x8b2>
 800ec96:	2b20      	cmp	r3, #32
 800ec98:	d879      	bhi.n	800ed8e <UART_SetConfig+0x8b2>
 800ec9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <UART_SetConfig+0x7c4>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ed2b 	.word	0x0800ed2b
 800eca4:	0800ed33 	.word	0x0800ed33
 800eca8:	0800ed8f 	.word	0x0800ed8f
 800ecac:	0800ed8f 	.word	0x0800ed8f
 800ecb0:	0800ed3b 	.word	0x0800ed3b
 800ecb4:	0800ed8f 	.word	0x0800ed8f
 800ecb8:	0800ed8f 	.word	0x0800ed8f
 800ecbc:	0800ed8f 	.word	0x0800ed8f
 800ecc0:	0800ed4b 	.word	0x0800ed4b
 800ecc4:	0800ed8f 	.word	0x0800ed8f
 800ecc8:	0800ed8f 	.word	0x0800ed8f
 800eccc:	0800ed8f 	.word	0x0800ed8f
 800ecd0:	0800ed8f 	.word	0x0800ed8f
 800ecd4:	0800ed8f 	.word	0x0800ed8f
 800ecd8:	0800ed8f 	.word	0x0800ed8f
 800ecdc:	0800ed8f 	.word	0x0800ed8f
 800ece0:	0800ed5b 	.word	0x0800ed5b
 800ece4:	0800ed8f 	.word	0x0800ed8f
 800ece8:	0800ed8f 	.word	0x0800ed8f
 800ecec:	0800ed8f 	.word	0x0800ed8f
 800ecf0:	0800ed8f 	.word	0x0800ed8f
 800ecf4:	0800ed8f 	.word	0x0800ed8f
 800ecf8:	0800ed8f 	.word	0x0800ed8f
 800ecfc:	0800ed8f 	.word	0x0800ed8f
 800ed00:	0800ed8f 	.word	0x0800ed8f
 800ed04:	0800ed8f 	.word	0x0800ed8f
 800ed08:	0800ed8f 	.word	0x0800ed8f
 800ed0c:	0800ed8f 	.word	0x0800ed8f
 800ed10:	0800ed8f 	.word	0x0800ed8f
 800ed14:	0800ed8f 	.word	0x0800ed8f
 800ed18:	0800ed8f 	.word	0x0800ed8f
 800ed1c:	0800ed8f 	.word	0x0800ed8f
 800ed20:	0800ed81 	.word	0x0800ed81
 800ed24:	2b40      	cmp	r3, #64	@ 0x40
 800ed26:	d02e      	beq.n	800ed86 <UART_SetConfig+0x8aa>
 800ed28:	e031      	b.n	800ed8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed2a:	f7f8 ffd1 	bl	8007cd0 <HAL_RCC_GetPCLK1Freq>
 800ed2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed30:	e033      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed32:	f7f8 ffe3 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 800ed36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed38:	e02f      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fa ffd4 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed48:	e027      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed4a:	f107 0318 	add.w	r3, r7, #24
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fb f920 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed58:	e01f      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ee10 <UART_SetConfig+0x934>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0320 	and.w	r3, r3, #32
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d009      	beq.n	800ed7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed66:	4b2a      	ldr	r3, [pc, #168]	@ (800ee10 <UART_SetConfig+0x934>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	08db      	lsrs	r3, r3, #3
 800ed6c:	f003 0303 	and.w	r3, r3, #3
 800ed70:	4a24      	ldr	r2, [pc, #144]	@ (800ee04 <UART_SetConfig+0x928>)
 800ed72:	fa22 f303 	lsr.w	r3, r2, r3
 800ed76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed78:	e00f      	b.n	800ed9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ed7a:	4b22      	ldr	r3, [pc, #136]	@ (800ee04 <UART_SetConfig+0x928>)
 800ed7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed7e:	e00c      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed80:	4b21      	ldr	r3, [pc, #132]	@ (800ee08 <UART_SetConfig+0x92c>)
 800ed82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed84:	e009      	b.n	800ed9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed8c:	e005      	b.n	800ed9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ed98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ed9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 80e7 	beq.w	800ef70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda6:	4a19      	ldr	r2, [pc, #100]	@ (800ee0c <UART_SetConfig+0x930>)
 800eda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edac:	461a      	mov	r2, r3
 800edae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800edb4:	005a      	lsls	r2, r3, #1
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	085b      	lsrs	r3, r3, #1
 800edbc:	441a      	add	r2, r3
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800edc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800edc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edca:	2b0f      	cmp	r3, #15
 800edcc:	d916      	bls.n	800edfc <UART_SetConfig+0x920>
 800edce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edd4:	d212      	bcs.n	800edfc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800edd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd8:	b29b      	uxth	r3, r3
 800edda:	f023 030f 	bic.w	r3, r3, #15
 800edde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ede0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede2:	085b      	lsrs	r3, r3, #1
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	f003 0307 	and.w	r3, r3, #7
 800edea:	b29a      	uxth	r2, r3
 800edec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800edee:	4313      	orrs	r3, r2
 800edf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800edf8:	60da      	str	r2, [r3, #12]
 800edfa:	e0b9      	b.n	800ef70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ee02:	e0b5      	b.n	800ef70 <UART_SetConfig+0xa94>
 800ee04:	03d09000 	.word	0x03d09000
 800ee08:	003d0900 	.word	0x003d0900
 800ee0c:	0801ea78 	.word	0x0801ea78
 800ee10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ee18:	2b20      	cmp	r3, #32
 800ee1a:	dc49      	bgt.n	800eeb0 <UART_SetConfig+0x9d4>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	db7c      	blt.n	800ef1a <UART_SetConfig+0xa3e>
 800ee20:	2b20      	cmp	r3, #32
 800ee22:	d87a      	bhi.n	800ef1a <UART_SetConfig+0xa3e>
 800ee24:	a201      	add	r2, pc, #4	@ (adr r2, 800ee2c <UART_SetConfig+0x950>)
 800ee26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2a:	bf00      	nop
 800ee2c:	0800eeb7 	.word	0x0800eeb7
 800ee30:	0800eebf 	.word	0x0800eebf
 800ee34:	0800ef1b 	.word	0x0800ef1b
 800ee38:	0800ef1b 	.word	0x0800ef1b
 800ee3c:	0800eec7 	.word	0x0800eec7
 800ee40:	0800ef1b 	.word	0x0800ef1b
 800ee44:	0800ef1b 	.word	0x0800ef1b
 800ee48:	0800ef1b 	.word	0x0800ef1b
 800ee4c:	0800eed7 	.word	0x0800eed7
 800ee50:	0800ef1b 	.word	0x0800ef1b
 800ee54:	0800ef1b 	.word	0x0800ef1b
 800ee58:	0800ef1b 	.word	0x0800ef1b
 800ee5c:	0800ef1b 	.word	0x0800ef1b
 800ee60:	0800ef1b 	.word	0x0800ef1b
 800ee64:	0800ef1b 	.word	0x0800ef1b
 800ee68:	0800ef1b 	.word	0x0800ef1b
 800ee6c:	0800eee7 	.word	0x0800eee7
 800ee70:	0800ef1b 	.word	0x0800ef1b
 800ee74:	0800ef1b 	.word	0x0800ef1b
 800ee78:	0800ef1b 	.word	0x0800ef1b
 800ee7c:	0800ef1b 	.word	0x0800ef1b
 800ee80:	0800ef1b 	.word	0x0800ef1b
 800ee84:	0800ef1b 	.word	0x0800ef1b
 800ee88:	0800ef1b 	.word	0x0800ef1b
 800ee8c:	0800ef1b 	.word	0x0800ef1b
 800ee90:	0800ef1b 	.word	0x0800ef1b
 800ee94:	0800ef1b 	.word	0x0800ef1b
 800ee98:	0800ef1b 	.word	0x0800ef1b
 800ee9c:	0800ef1b 	.word	0x0800ef1b
 800eea0:	0800ef1b 	.word	0x0800ef1b
 800eea4:	0800ef1b 	.word	0x0800ef1b
 800eea8:	0800ef1b 	.word	0x0800ef1b
 800eeac:	0800ef0d 	.word	0x0800ef0d
 800eeb0:	2b40      	cmp	r3, #64	@ 0x40
 800eeb2:	d02e      	beq.n	800ef12 <UART_SetConfig+0xa36>
 800eeb4:	e031      	b.n	800ef1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eeb6:	f7f8 ff0b 	bl	8007cd0 <HAL_RCC_GetPCLK1Freq>
 800eeba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eebc:	e033      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eebe:	f7f8 ff1d 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 800eec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eec4:	e02f      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fa ff0e 	bl	8009cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eed4:	e027      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eed6:	f107 0318 	add.w	r3, r7, #24
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fb f85a 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eee4:	e01f      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eee6:	4b2d      	ldr	r3, [pc, #180]	@ (800ef9c <UART_SetConfig+0xac0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 0320 	and.w	r3, r3, #32
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eef2:	4b2a      	ldr	r3, [pc, #168]	@ (800ef9c <UART_SetConfig+0xac0>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	08db      	lsrs	r3, r3, #3
 800eef8:	f003 0303 	and.w	r3, r3, #3
 800eefc:	4a28      	ldr	r2, [pc, #160]	@ (800efa0 <UART_SetConfig+0xac4>)
 800eefe:	fa22 f303 	lsr.w	r3, r2, r3
 800ef02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef04:	e00f      	b.n	800ef26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ef06:	4b26      	ldr	r3, [pc, #152]	@ (800efa0 <UART_SetConfig+0xac4>)
 800ef08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef0a:	e00c      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef0c:	4b25      	ldr	r3, [pc, #148]	@ (800efa4 <UART_SetConfig+0xac8>)
 800ef0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef10:	e009      	b.n	800ef26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef18:	e005      	b.n	800ef26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ef24:	bf00      	nop
    }

    if (pclk != 0U)
 800ef26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d021      	beq.n	800ef70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef30:	4a1d      	ldr	r2, [pc, #116]	@ (800efa8 <UART_SetConfig+0xacc>)
 800ef32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef36:	461a      	mov	r2, r3
 800ef38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	085b      	lsrs	r3, r3, #1
 800ef44:	441a      	add	r2, r3
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef52:	2b0f      	cmp	r3, #15
 800ef54:	d909      	bls.n	800ef6a <UART_SetConfig+0xa8e>
 800ef56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef5c:	d205      	bcs.n	800ef6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	60da      	str	r2, [r3, #12]
 800ef68:	e002      	b.n	800ef70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2200      	movs	r2, #0
 800ef84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ef8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3748      	adds	r7, #72	@ 0x48
 800ef94:	46bd      	mov	sp, r7
 800ef96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef9a:	bf00      	nop
 800ef9c:	58024400 	.word	0x58024400
 800efa0:	03d09000 	.word	0x03d09000
 800efa4:	003d0900 	.word	0x003d0900
 800efa8:	0801ea78 	.word	0x0801ea78

0800efac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb8:	f003 0308 	and.w	r3, r3, #8
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00a      	beq.n	800efd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00a      	beq.n	800eff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	430a      	orrs	r2, r1
 800eff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800effc:	f003 0302 	and.w	r3, r3, #2
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00a      	beq.n	800f01a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f01e:	f003 0304 	and.w	r3, r3, #4
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f040:	f003 0310 	and.w	r3, r3, #16
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00a      	beq.n	800f05e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f062:	f003 0320 	and.w	r3, r3, #32
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	430a      	orrs	r2, r1
 800f07e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d01a      	beq.n	800f0c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0aa:	d10a      	bne.n	800f0c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	605a      	str	r2, [r3, #4]
  }
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b098      	sub	sp, #96	@ 0x60
 800f0f4:	af02      	add	r7, sp, #8
 800f0f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f100:	f7f4 fb7a 	bl	80037f8 <HAL_GetTick>
 800f104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 0308 	and.w	r3, r3, #8
 800f110:	2b08      	cmp	r3, #8
 800f112:	d12f      	bne.n	800f174 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11c:	2200      	movs	r2, #0
 800f11e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f88e 	bl	800f244 <UART_WaitOnFlagUntilTimeout>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d022      	beq.n	800f174 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f136:	e853 3f00 	ldrex	r3, [r3]
 800f13a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f142:	653b      	str	r3, [r7, #80]	@ 0x50
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f14e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f154:	e841 2300 	strex	r3, r2, [r1]
 800f158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1e6      	bne.n	800f12e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2220      	movs	r2, #32
 800f164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f170:	2303      	movs	r3, #3
 800f172:	e063      	b.n	800f23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f003 0304 	and.w	r3, r3, #4
 800f17e:	2b04      	cmp	r3, #4
 800f180:	d149      	bne.n	800f216 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f182:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f18a:	2200      	movs	r2, #0
 800f18c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f857 	bl	800f244 <UART_WaitOnFlagUntilTimeout>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d03c      	beq.n	800f216 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a4:	e853 3f00 	ldrex	r3, [r3]
 800f1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c2:	e841 2300 	strex	r3, r2, [r1]
 800f1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1e6      	bne.n	800f19c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f023 0301 	bic.w	r3, r3, #1
 800f1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f1ee:	61fa      	str	r2, [r7, #28]
 800f1f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f2:	69b9      	ldr	r1, [r7, #24]
 800f1f4:	69fa      	ldr	r2, [r7, #28]
 800f1f6:	e841 2300 	strex	r3, r2, [r1]
 800f1fa:	617b      	str	r3, [r7, #20]
   return(result);
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e5      	bne.n	800f1ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2220      	movs	r2, #32
 800f206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f212:	2303      	movs	r3, #3
 800f214:	e012      	b.n	800f23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2220      	movs	r2, #32
 800f21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2220      	movs	r2, #32
 800f222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3758      	adds	r7, #88	@ 0x58
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	4613      	mov	r3, r2
 800f252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f254:	e04f      	b.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25c:	d04b      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f25e:	f7f4 facb 	bl	80037f8 <HAL_GetTick>
 800f262:	4602      	mov	r2, r0
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d302      	bcc.n	800f274 <UART_WaitOnFlagUntilTimeout+0x30>
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e04e      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f003 0304 	and.w	r3, r3, #4
 800f282:	2b00      	cmp	r3, #0
 800f284:	d037      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b80      	cmp	r3, #128	@ 0x80
 800f28a:	d034      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	2b40      	cmp	r3, #64	@ 0x40
 800f290:	d031      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	f003 0308 	and.w	r3, r3, #8
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d110      	bne.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2208      	movs	r2, #8
 800f2a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 f921 	bl	800f4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2208      	movs	r2, #8
 800f2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e029      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2d0:	d111      	bne.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f2da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f907 	bl	800f4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2220      	movs	r2, #32
 800f2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e00f      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	69da      	ldr	r2, [r3, #28]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	4013      	ands	r3, r2
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	429a      	cmp	r2, r3
 800f304:	bf0c      	ite	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	2300      	movne	r3, #0
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	461a      	mov	r2, r3
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	429a      	cmp	r2, r3
 800f312:	d0a0      	beq.n	800f256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b096      	sub	sp, #88	@ 0x58
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	4613      	mov	r3, r2
 800f32c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	68ba      	ldr	r2, [r7, #8]
 800f332:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	88fa      	ldrh	r2, [r7, #6]
 800f338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2222      	movs	r2, #34	@ 0x22
 800f348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f352:	2b00      	cmp	r3, #0
 800f354:	d02d      	beq.n	800f3b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f35c:	4a40      	ldr	r2, [pc, #256]	@ (800f460 <UART_Start_Receive_DMA+0x140>)
 800f35e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f366:	4a3f      	ldr	r2, [pc, #252]	@ (800f464 <UART_Start_Receive_DMA+0x144>)
 800f368:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f370:	4a3d      	ldr	r2, [pc, #244]	@ (800f468 <UART_Start_Receive_DMA+0x148>)
 800f372:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f37a:	2200      	movs	r2, #0
 800f37c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	3324      	adds	r3, #36	@ 0x24
 800f38a:	4619      	mov	r1, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f390:	461a      	mov	r2, r3
 800f392:	88fb      	ldrh	r3, [r7, #6]
 800f394:	f7f4 fea8 	bl	80040e8 <HAL_DMA_Start_IT>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d009      	beq.n	800f3b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2210      	movs	r2, #16
 800f3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2220      	movs	r2, #32
 800f3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e051      	b.n	800f456 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d018      	beq.n	800f3ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3c2:	e853 3f00 	ldrex	r3, [r3]
 800f3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3e0:	e841 2300 	strex	r3, r2, [r1]
 800f3e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1e6      	bne.n	800f3ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	3308      	adds	r3, #8
 800f3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f6:	e853 3f00 	ldrex	r3, [r3]
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fe:	f043 0301 	orr.w	r3, r3, #1
 800f402:	653b      	str	r3, [r7, #80]	@ 0x50
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	3308      	adds	r3, #8
 800f40a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f40c:	637a      	str	r2, [r7, #52]	@ 0x34
 800f40e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f414:	e841 2300 	strex	r3, r2, [r1]
 800f418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1e5      	bne.n	800f3ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3308      	adds	r3, #8
 800f426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	e853 3f00 	ldrex	r3, [r3]
 800f42e:	613b      	str	r3, [r7, #16]
   return(result);
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3308      	adds	r3, #8
 800f43e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f440:	623a      	str	r2, [r7, #32]
 800f442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f444:	69f9      	ldr	r1, [r7, #28]
 800f446:	6a3a      	ldr	r2, [r7, #32]
 800f448:	e841 2300 	strex	r3, r2, [r1]
 800f44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1e5      	bne.n	800f420 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3758      	adds	r7, #88	@ 0x58
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	0800f5bd 	.word	0x0800f5bd
 800f464:	0800f6e5 	.word	0x0800f6e5
 800f468:	0800f723 	.word	0x0800f723

0800f46c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b08f      	sub	sp, #60	@ 0x3c
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47a:	6a3b      	ldr	r3, [r7, #32]
 800f47c:	e853 3f00 	ldrex	r3, [r3]
 800f480:	61fb      	str	r3, [r7, #28]
   return(result);
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f488:	637b      	str	r3, [r7, #52]	@ 0x34
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f494:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f49a:	e841 2300 	strex	r3, r2, [r1]
 800f49e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1e6      	bne.n	800f474 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	e853 3f00 	ldrex	r3, [r3]
 800f4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f4bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4c6:	61ba      	str	r2, [r7, #24]
 800f4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ca:	6979      	ldr	r1, [r7, #20]
 800f4cc:	69ba      	ldr	r2, [r7, #24]
 800f4ce:	e841 2300 	strex	r3, r2, [r1]
 800f4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1e5      	bne.n	800f4a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2220      	movs	r2, #32
 800f4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f4e2:	bf00      	nop
 800f4e4:	373c      	adds	r7, #60	@ 0x3c
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
	...

0800f4f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b095      	sub	sp, #84	@ 0x54
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f500:	e853 3f00 	ldrex	r3, [r3]
 800f504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f516:	643b      	str	r3, [r7, #64]	@ 0x40
 800f518:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f51c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f51e:	e841 2300 	strex	r3, r2, [r1]
 800f522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f526:	2b00      	cmp	r3, #0
 800f528:	d1e6      	bne.n	800f4f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3308      	adds	r3, #8
 800f530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	e853 3f00 	ldrex	r3, [r3]
 800f538:	61fb      	str	r3, [r7, #28]
   return(result);
 800f53a:	69fa      	ldr	r2, [r7, #28]
 800f53c:	4b1e      	ldr	r3, [pc, #120]	@ (800f5b8 <UART_EndRxTransfer+0xc8>)
 800f53e:	4013      	ands	r3, r2
 800f540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3308      	adds	r3, #8
 800f548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f54a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f54c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e5      	bne.n	800f52a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f562:	2b01      	cmp	r3, #1
 800f564:	d118      	bne.n	800f598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	e853 3f00 	ldrex	r3, [r3]
 800f572:	60bb      	str	r3, [r7, #8]
   return(result);
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f023 0310 	bic.w	r3, r3, #16
 800f57a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f584:	61bb      	str	r3, [r7, #24]
 800f586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f588:	6979      	ldr	r1, [r7, #20]
 800f58a:	69ba      	ldr	r2, [r7, #24]
 800f58c:	e841 2300 	strex	r3, r2, [r1]
 800f590:	613b      	str	r3, [r7, #16]
   return(result);
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1e6      	bne.n	800f566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2220      	movs	r2, #32
 800f59c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f5ac:	bf00      	nop
 800f5ae:	3754      	adds	r7, #84	@ 0x54
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	effffffe 	.word	0xeffffffe

0800f5bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b09c      	sub	sp, #112	@ 0x70
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	69db      	ldr	r3, [r3, #28]
 800f5ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5d2:	d071      	beq.n	800f6b8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5e4:	e853 3f00 	ldrex	r3, [r3]
 800f5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f5ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f602:	e841 2300 	strex	r3, r2, [r1]
 800f606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1e6      	bne.n	800f5dc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3308      	adds	r3, #8
 800f614:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f618:	e853 3f00 	ldrex	r3, [r3]
 800f61c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f620:	f023 0301 	bic.w	r3, r3, #1
 800f624:	667b      	str	r3, [r7, #100]	@ 0x64
 800f626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	3308      	adds	r3, #8
 800f62c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f62e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f636:	e841 2300 	strex	r3, r2, [r1]
 800f63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1e5      	bne.n	800f60e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3308      	adds	r3, #8
 800f648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64c:	e853 3f00 	ldrex	r3, [r3]
 800f650:	623b      	str	r3, [r7, #32]
   return(result);
 800f652:	6a3b      	ldr	r3, [r7, #32]
 800f654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f658:	663b      	str	r3, [r7, #96]	@ 0x60
 800f65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f662:	633a      	str	r2, [r7, #48]	@ 0x30
 800f664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f66a:	e841 2300 	strex	r3, r2, [r1]
 800f66e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1e5      	bne.n	800f642 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f678:	2220      	movs	r2, #32
 800f67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f682:	2b01      	cmp	r3, #1
 800f684:	d118      	bne.n	800f6b8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	e853 3f00 	ldrex	r3, [r3]
 800f692:	60fb      	str	r3, [r7, #12]
   return(result);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f023 0310 	bic.w	r3, r3, #16
 800f69a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f69c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6a4:	61fb      	str	r3, [r7, #28]
 800f6a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a8:	69b9      	ldr	r1, [r7, #24]
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	e841 2300 	strex	r3, r2, [r1]
 800f6b0:	617b      	str	r3, [r7, #20]
   return(result);
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1e6      	bne.n	800f686 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d107      	bne.n	800f6d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6d0:	f7fe fef8 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6d4:	e002      	b.n	800f6dc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f6d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6d8:	f7fe fed6 	bl	800e488 <HAL_UART_RxCpltCallback>
}
 800f6dc:	bf00      	nop
 800f6de:	3770      	adds	r7, #112	@ 0x70
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d109      	bne.n	800f714 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f706:	085b      	lsrs	r3, r3, #1
 800f708:	b29b      	uxth	r3, r3
 800f70a:	4619      	mov	r1, r3
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f7fe fed9 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f712:	e002      	b.n	800f71a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f7fe fec1 	bl	800e49c <HAL_UART_RxHalfCpltCallback>
}
 800f71a:	bf00      	nop
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b086      	sub	sp, #24
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f736:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f74a:	2b80      	cmp	r3, #128	@ 0x80
 800f74c:	d109      	bne.n	800f762 <UART_DMAError+0x40>
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b21      	cmp	r3, #33	@ 0x21
 800f752:	d106      	bne.n	800f762 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2200      	movs	r2, #0
 800f758:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f7ff fe85 	bl	800f46c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f76c:	2b40      	cmp	r3, #64	@ 0x40
 800f76e:	d109      	bne.n	800f784 <UART_DMAError+0x62>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b22      	cmp	r3, #34	@ 0x22
 800f774:	d106      	bne.n	800f784 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	2200      	movs	r2, #0
 800f77a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f77e:	6978      	ldr	r0, [r7, #20]
 800f780:	f7ff feb6 	bl	800f4f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f78a:	f043 0210 	orr.w	r2, r3, #16
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f794:	6978      	ldr	r0, [r7, #20]
 800f796:	f7fe fe8b 	bl	800e4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f79a:	bf00      	nop
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f7fe fe79 	bl	800e4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b088      	sub	sp, #32
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	e853 3f00 	ldrex	r3, [r3]
 800f7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7e2:	61fb      	str	r3, [r7, #28]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	61bb      	str	r3, [r7, #24]
 800f7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f0:	6979      	ldr	r1, [r7, #20]
 800f7f2:	69ba      	ldr	r2, [r7, #24]
 800f7f4:	e841 2300 	strex	r3, r2, [r1]
 800f7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d1e6      	bne.n	800f7ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2220      	movs	r2, #32
 800f804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7fe fe30 	bl	800e474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f814:	bf00      	nop
 800f816:	3720      	adds	r7, #32
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f866:	2b01      	cmp	r3, #1
 800f868:	d101      	bne.n	800f86e <HAL_UARTEx_DisableFifoMode+0x16>
 800f86a:	2302      	movs	r3, #2
 800f86c:	e027      	b.n	800f8be <HAL_UARTEx_DisableFifoMode+0x66>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2224      	movs	r2, #36	@ 0x24
 800f87a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f022 0201 	bic.w	r2, r2, #1
 800f894:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f89c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2220      	movs	r2, #32
 800f8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d101      	bne.n	800f8e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8de:	2302      	movs	r3, #2
 800f8e0:	e02d      	b.n	800f93e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2224      	movs	r2, #36	@ 0x24
 800f8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f022 0201 	bic.w	r2, r2, #1
 800f908:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	683a      	ldr	r2, [r7, #0]
 800f91a:	430a      	orrs	r2, r1
 800f91c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f850 	bl	800f9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2220      	movs	r2, #32
 800f930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f956:	2b01      	cmp	r3, #1
 800f958:	d101      	bne.n	800f95e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f95a:	2302      	movs	r3, #2
 800f95c:	e02d      	b.n	800f9ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2201      	movs	r2, #1
 800f962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2224      	movs	r2, #36	@ 0x24
 800f96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f022 0201 	bic.w	r2, r2, #1
 800f984:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	683a      	ldr	r2, [r7, #0]
 800f996:	430a      	orrs	r2, r1
 800f998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f812 	bl	800f9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2220      	movs	r2, #32
 800f9ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
	...

0800f9c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d108      	bne.n	800f9e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9e4:	e031      	b.n	800fa4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9e6:	2310      	movs	r3, #16
 800f9e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9ea:	2310      	movs	r3, #16
 800f9ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	0e5b      	lsrs	r3, r3, #25
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	f003 0307 	and.w	r3, r3, #7
 800f9fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	0f5b      	lsrs	r3, r3, #29
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa0e:	7bbb      	ldrb	r3, [r7, #14]
 800fa10:	7b3a      	ldrb	r2, [r7, #12]
 800fa12:	4911      	ldr	r1, [pc, #68]	@ (800fa58 <UARTEx_SetNbDataToProcess+0x94>)
 800fa14:	5c8a      	ldrb	r2, [r1, r2]
 800fa16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fa1a:	7b3a      	ldrb	r2, [r7, #12]
 800fa1c:	490f      	ldr	r1, [pc, #60]	@ (800fa5c <UARTEx_SetNbDataToProcess+0x98>)
 800fa1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa20:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	7b7a      	ldrb	r2, [r7, #13]
 800fa30:	4909      	ldr	r1, [pc, #36]	@ (800fa58 <UARTEx_SetNbDataToProcess+0x94>)
 800fa32:	5c8a      	ldrb	r2, [r1, r2]
 800fa34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa38:	7b7a      	ldrb	r2, [r7, #13]
 800fa3a:	4908      	ldr	r1, [pc, #32]	@ (800fa5c <UARTEx_SetNbDataToProcess+0x98>)
 800fa3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fa4a:	bf00      	nop
 800fa4c:	3714      	adds	r7, #20
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	0801ea90 	.word	0x0801ea90
 800fa5c:	0801ea98 	.word	0x0801ea98

0800fa60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa60:	b084      	sub	sp, #16
 800fa62:	b480      	push	{r7}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	f107 001c 	add.w	r0, r7, #28
 800fa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fa76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fa78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fa7a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fa7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fa82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fa86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685a      	ldr	r2, [r3, #4]
 800fa92:	4b07      	ldr	r3, [pc, #28]	@ (800fab0 <SDMMC_Init+0x50>)
 800fa94:	4013      	ands	r3, r2
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	431a      	orrs	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	b004      	add	sp, #16
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	ffc02c00 	.word	0xffc02c00

0800fab4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800face:	b480      	push	{r7}
 800fad0:	b083      	sub	sp, #12
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f043 0203 	orr.w	r2, r3, #3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f003 0303 	and.w	r3, r3, #3
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
	...

0800fb30 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fb54:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fb5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68da      	ldr	r2, [r3, #12]
 800fb66:	4b06      	ldr	r3, [pc, #24]	@ (800fb80 <SDMMC_SendCommand+0x50>)
 800fb68:	4013      	ands	r3, r2
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	431a      	orrs	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3714      	adds	r7, #20
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	fffee0c0 	.word	0xfffee0c0

0800fb84 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	b2db      	uxtb	r3, r3
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	370c      	adds	r7, #12
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	b085      	sub	sp, #20
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3314      	adds	r3, #20
 800fbac:	461a      	mov	r2, r3
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3714      	adds	r7, #20
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fbf0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fbf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	431a      	orrs	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0

}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3714      	adds	r7, #20
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b088      	sub	sp, #32
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fc2a:	2310      	movs	r3, #16
 800fc2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc34:	2300      	movs	r3, #0
 800fc36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc3e:	f107 0308 	add.w	r3, r7, #8
 800fc42:	4619      	mov	r1, r3
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff73 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fc4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc4e:	2110      	movs	r1, #16
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fa5f 	bl	8010114 <SDMMC_GetCmdResp1>
 800fc56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc58:	69fb      	ldr	r3, [r7, #28]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b088      	sub	sp, #32
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fc70:	2311      	movs	r3, #17
 800fc72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc84:	f107 0308 	add.w	r3, r7, #8
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff ff50 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc94:	2111      	movs	r1, #17
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fa3c 	bl	8010114 <SDMMC_GetCmdResp1>
 800fc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc9e:	69fb      	ldr	r3, [r7, #28]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3720      	adds	r7, #32
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fcb6:	2312      	movs	r3, #18
 800fcb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcca:	f107 0308 	add.w	r3, r7, #8
 800fcce:	4619      	mov	r1, r3
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff ff2d 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fcd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcda:	2112      	movs	r1, #18
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 fa19 	bl	8010114 <SDMMC_GetCmdResp1>
 800fce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fce4:	69fb      	ldr	r3, [r7, #28]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3720      	adds	r7, #32
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b088      	sub	sp, #32
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fcfc:	2318      	movs	r3, #24
 800fcfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd06:	2300      	movs	r3, #0
 800fd08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd10:	f107 0308 	add.w	r3, r7, #8
 800fd14:	4619      	mov	r1, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff ff0a 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fd1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd20:	2118      	movs	r1, #24
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f9f6 	bl	8010114 <SDMMC_GetCmdResp1>
 800fd28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd2a:	69fb      	ldr	r3, [r7, #28]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3720      	adds	r7, #32
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b088      	sub	sp, #32
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fd42:	2319      	movs	r3, #25
 800fd44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd56:	f107 0308 	add.w	r3, r7, #8
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7ff fee7 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd66:	2119      	movs	r1, #25
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f9d3 	bl	8010114 <SDMMC_GetCmdResp1>
 800fd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd70:	69fb      	ldr	r3, [r7, #28]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3720      	adds	r7, #32
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b088      	sub	sp, #32
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd84:	2300      	movs	r3, #0
 800fd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd88:	230c      	movs	r3, #12
 800fd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd92:	2300      	movs	r3, #0
 800fd94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd9a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdb4:	f107 0308 	add.w	r3, r7, #8
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7ff feb8 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fdc0:	4a0b      	ldr	r2, [pc, #44]	@ (800fdf0 <SDMMC_CmdStopTransfer+0x74>)
 800fdc2:	210c      	movs	r1, #12
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 f9a5 	bl	8010114 <SDMMC_GetCmdResp1>
 800fdca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fdde:	d101      	bne.n	800fde4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fde4:	69fb      	ldr	r3, [r7, #28]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3720      	adds	r7, #32
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	05f5e100 	.word	0x05f5e100

0800fdf4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b088      	sub	sp, #32
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fe02:	2307      	movs	r3, #7
 800fe04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe16:	f107 0308 	add.w	r3, r7, #8
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff fe87 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fe22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe26:	2107      	movs	r1, #7
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 f973 	bl	8010114 <SDMMC_GetCmdResp1>
 800fe2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe30:	69fb      	ldr	r3, [r7, #28]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3720      	adds	r7, #32
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b088      	sub	sp, #32
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fe42:	2300      	movs	r3, #0
 800fe44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fe46:	2300      	movs	r3, #0
 800fe48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe58:	f107 0308 	add.w	r3, r7, #8
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7ff fe66 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fb97 	bl	8010598 <SDMMC_GetCmdError>
 800fe6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3720      	adds	r7, #32
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b088      	sub	sp, #32
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fe7e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fe82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fe84:	2308      	movs	r3, #8
 800fe86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe98:	f107 0308 	add.w	r3, r7, #8
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff fe46 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fb29 	bl	80104fc <SDMMC_GetCmdResp7>
 800feaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feac:	69fb      	ldr	r3, [r7, #28]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3720      	adds	r7, #32
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b088      	sub	sp, #32
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fec4:	2337      	movs	r3, #55	@ 0x37
 800fec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fece:	2300      	movs	r3, #0
 800fed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fed8:	f107 0308 	add.w	r3, r7, #8
 800fedc:	4619      	mov	r1, r3
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff fe26 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fee8:	2137      	movs	r1, #55	@ 0x37
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f912 	bl	8010114 <SDMMC_GetCmdResp1>
 800fef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fef2:	69fb      	ldr	r3, [r7, #28]
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3720      	adds	r7, #32
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ff0a:	2329      	movs	r3, #41	@ 0x29
 800ff0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff14:	2300      	movs	r3, #0
 800ff16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff1e:	f107 0308 	add.w	r3, r7, #8
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff fe03 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 fa2e 	bl	801038c <SDMMC_GetCmdResp3>
 800ff30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff32:	69fb      	ldr	r3, [r7, #28]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3720      	adds	r7, #32
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b088      	sub	sp, #32
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ff4a:	2306      	movs	r3, #6
 800ff4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff54:	2300      	movs	r3, #0
 800ff56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff5e:	f107 0308 	add.w	r3, r7, #8
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff fde3 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ff6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff6e:	2106      	movs	r1, #6
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f8cf 	bl	8010114 <SDMMC_GetCmdResp1>
 800ff76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff78:	69fb      	ldr	r3, [r7, #28]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3720      	adds	r7, #32
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b088      	sub	sp, #32
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ff8e:	2333      	movs	r3, #51	@ 0x33
 800ff90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffa2:	f107 0308 	add.w	r3, r7, #8
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7ff fdc1 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ffae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffb2:	2133      	movs	r1, #51	@ 0x33
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f8ad 	bl	8010114 <SDMMC_GetCmdResp1>
 800ffba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffbc:	69fb      	ldr	r3, [r7, #28]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3720      	adds	r7, #32
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b088      	sub	sp, #32
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ffd2:	2302      	movs	r3, #2
 800ffd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ffd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ffda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffe6:	f107 0308 	add.w	r3, r7, #8
 800ffea:	4619      	mov	r1, r3
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff fd9f 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f980 	bl	80102f8 <SDMMC_GetCmdResp2>
 800fff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fffa:	69fb      	ldr	r3, [r7, #28]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3720      	adds	r7, #32
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b088      	sub	sp, #32
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010012:	2309      	movs	r3, #9
 8010014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010016:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801001a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801001c:	2300      	movs	r3, #0
 801001e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010026:	f107 0308 	add.w	r3, r7, #8
 801002a:	4619      	mov	r1, r3
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff fd7f 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f960 	bl	80102f8 <SDMMC_GetCmdResp2>
 8010038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801003a:	69fb      	ldr	r3, [r7, #28]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3720      	adds	r7, #32
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b088      	sub	sp, #32
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801004e:	2300      	movs	r3, #0
 8010050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010052:	2303      	movs	r3, #3
 8010054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801005a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801005c:	2300      	movs	r3, #0
 801005e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010066:	f107 0308 	add.w	r3, r7, #8
 801006a:	4619      	mov	r1, r3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7ff fd5f 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	2103      	movs	r1, #3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 f9c8 	bl	801040c <SDMMC_GetCmdResp6>
 801007c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801007e:	69fb      	ldr	r3, [r7, #28]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3720      	adds	r7, #32
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b088      	sub	sp, #32
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010096:	230d      	movs	r3, #13
 8010098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801009a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801009e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100a0:	2300      	movs	r3, #0
 80100a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100aa:	f107 0308 	add.w	r3, r7, #8
 80100ae:	4619      	mov	r1, r3
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7ff fd3d 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80100b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ba:	210d      	movs	r1, #13
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 f829 	bl	8010114 <SDMMC_GetCmdResp1>
 80100c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100c4:	69fb      	ldr	r3, [r7, #28]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3720      	adds	r7, #32
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b088      	sub	sp, #32
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80100da:	230d      	movs	r3, #13
 80100dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100e4:	2300      	movs	r3, #0
 80100e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ee:	f107 0308 	add.w	r3, r7, #8
 80100f2:	4619      	mov	r1, r3
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fd1b 	bl	800fb30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80100fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100fe:	210d      	movs	r1, #13
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 f807 	bl	8010114 <SDMMC_GetCmdResp1>
 8010106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010108:	69fb      	ldr	r3, [r7, #28]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3720      	adds	r7, #32
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
	...

08010114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b088      	sub	sp, #32
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	460b      	mov	r3, r1
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010122:	4b70      	ldr	r3, [pc, #448]	@ (80102e4 <SDMMC_GetCmdResp1+0x1d0>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a70      	ldr	r2, [pc, #448]	@ (80102e8 <SDMMC_GetCmdResp1+0x1d4>)
 8010128:	fba2 2303 	umull	r2, r3, r2, r3
 801012c:	0a5a      	lsrs	r2, r3, #9
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	fb02 f303 	mul.w	r3, r2, r3
 8010134:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	1e5a      	subs	r2, r3, #1
 801013a:	61fa      	str	r2, [r7, #28]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d102      	bne.n	8010146 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010140:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010144:	e0c9      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801014a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	4b67      	ldr	r3, [pc, #412]	@ (80102ec <SDMMC_GetCmdResp1+0x1d8>)
 8010150:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0ef      	beq.n	8010136 <SDMMC_GetCmdResp1+0x22>
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1ea      	bne.n	8010136 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	d004      	beq.n	8010176 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2204      	movs	r2, #4
 8010170:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010172:	2304      	movs	r3, #4
 8010174:	e0b1      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801017a:	f003 0301 	and.w	r3, r3, #1
 801017e:	2b00      	cmp	r3, #0
 8010180:	d004      	beq.n	801018c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2201      	movs	r2, #1
 8010186:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010188:	2301      	movs	r3, #1
 801018a:	e0a6      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4a58      	ldr	r2, [pc, #352]	@ (80102f0 <SDMMC_GetCmdResp1+0x1dc>)
 8010190:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7ff fcf6 	bl	800fb84 <SDMMC_GetCommandResponse>
 8010198:	4603      	mov	r3, r0
 801019a:	461a      	mov	r2, r3
 801019c:	7afb      	ldrb	r3, [r7, #11]
 801019e:	4293      	cmp	r3, r2
 80101a0:	d001      	beq.n	80101a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101a2:	2301      	movs	r3, #1
 80101a4:	e099      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80101a6:	2100      	movs	r1, #0
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f7ff fcf8 	bl	800fb9e <SDMMC_GetResponse>
 80101ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80101b0:	697a      	ldr	r2, [r7, #20]
 80101b2:	4b50      	ldr	r3, [pc, #320]	@ (80102f4 <SDMMC_GetCmdResp1+0x1e0>)
 80101b4:	4013      	ands	r3, r2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80101ba:	2300      	movs	r3, #0
 80101bc:	e08d      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	da02      	bge.n	80101ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80101c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80101c8:	e087      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d001      	beq.n	80101d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80101d4:	2340      	movs	r3, #64	@ 0x40
 80101d6:	e080      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80101e2:	2380      	movs	r3, #128	@ 0x80
 80101e4:	e079      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d002      	beq.n	80101f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80101f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101f4:	e071      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d002      	beq.n	8010206 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010204:	e069      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801020c:	2b00      	cmp	r3, #0
 801020e:	d002      	beq.n	8010216 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010214:	e061      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801021c:	2b00      	cmp	r3, #0
 801021e:	d002      	beq.n	8010226 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010220:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010224:	e059      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801022c:	2b00      	cmp	r3, #0
 801022e:	d002      	beq.n	8010236 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010234:	e051      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010244:	e049      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010250:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010254:	e041      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010264:	e039      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801026c:	2b00      	cmp	r3, #0
 801026e:	d002      	beq.n	8010276 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010274:	e031      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010280:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010284:	e029      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801028c:	2b00      	cmp	r3, #0
 801028e:	d002      	beq.n	8010296 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010294:	e021      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80102a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80102a4:	e019      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d002      	beq.n	80102b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80102b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80102b4:	e011      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80102c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80102c4:	e009      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f003 0308 	and.w	r3, r3, #8
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d002      	beq.n	80102d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80102d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80102d4:	e001      	b.n	80102da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80102d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3720      	adds	r7, #32
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	24000014 	.word	0x24000014
 80102e8:	10624dd3 	.word	0x10624dd3
 80102ec:	00200045 	.word	0x00200045
 80102f0:	002000c5 	.word	0x002000c5
 80102f4:	fdffe008 	.word	0xfdffe008

080102f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010300:	4b1f      	ldr	r3, [pc, #124]	@ (8010380 <SDMMC_GetCmdResp2+0x88>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a1f      	ldr	r2, [pc, #124]	@ (8010384 <SDMMC_GetCmdResp2+0x8c>)
 8010306:	fba2 2303 	umull	r2, r3, r2, r3
 801030a:	0a5b      	lsrs	r3, r3, #9
 801030c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010310:	fb02 f303 	mul.w	r3, r2, r3
 8010314:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	1e5a      	subs	r2, r3, #1
 801031a:	60fa      	str	r2, [r7, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d102      	bne.n	8010326 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010324:	e026      	b.n	8010374 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801032a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010332:	2b00      	cmp	r3, #0
 8010334:	d0ef      	beq.n	8010316 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1ea      	bne.n	8010316 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010344:	f003 0304 	and.w	r3, r3, #4
 8010348:	2b00      	cmp	r3, #0
 801034a:	d004      	beq.n	8010356 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2204      	movs	r2, #4
 8010350:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010352:	2304      	movs	r3, #4
 8010354:	e00e      	b.n	8010374 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	d004      	beq.n	801036c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2201      	movs	r2, #1
 8010366:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010368:	2301      	movs	r3, #1
 801036a:	e003      	b.n	8010374 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a06      	ldr	r2, [pc, #24]	@ (8010388 <SDMMC_GetCmdResp2+0x90>)
 8010370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	24000014 	.word	0x24000014
 8010384:	10624dd3 	.word	0x10624dd3
 8010388:	002000c5 	.word	0x002000c5

0801038c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010394:	4b1a      	ldr	r3, [pc, #104]	@ (8010400 <SDMMC_GetCmdResp3+0x74>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a1a      	ldr	r2, [pc, #104]	@ (8010404 <SDMMC_GetCmdResp3+0x78>)
 801039a:	fba2 2303 	umull	r2, r3, r2, r3
 801039e:	0a5b      	lsrs	r3, r3, #9
 80103a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103a4:	fb02 f303 	mul.w	r3, r2, r3
 80103a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	1e5a      	subs	r2, r3, #1
 80103ae:	60fa      	str	r2, [r7, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103b8:	e01b      	b.n	80103f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0ef      	beq.n	80103aa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1ea      	bne.n	80103aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103d8:	f003 0304 	and.w	r3, r3, #4
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2204      	movs	r2, #4
 80103e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103e6:	2304      	movs	r3, #4
 80103e8:	e003      	b.n	80103f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a06      	ldr	r2, [pc, #24]	@ (8010408 <SDMMC_GetCmdResp3+0x7c>)
 80103ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	24000014 	.word	0x24000014
 8010404:	10624dd3 	.word	0x10624dd3
 8010408:	002000c5 	.word	0x002000c5

0801040c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	460b      	mov	r3, r1
 8010416:	607a      	str	r2, [r7, #4]
 8010418:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801041a:	4b35      	ldr	r3, [pc, #212]	@ (80104f0 <SDMMC_GetCmdResp6+0xe4>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4a35      	ldr	r2, [pc, #212]	@ (80104f4 <SDMMC_GetCmdResp6+0xe8>)
 8010420:	fba2 2303 	umull	r2, r3, r2, r3
 8010424:	0a5b      	lsrs	r3, r3, #9
 8010426:	f241 3288 	movw	r2, #5000	@ 0x1388
 801042a:	fb02 f303 	mul.w	r3, r2, r3
 801042e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	1e5a      	subs	r2, r3, #1
 8010434:	61fa      	str	r2, [r7, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d102      	bne.n	8010440 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801043a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801043e:	e052      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010444:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801044c:	2b00      	cmp	r3, #0
 801044e:	d0ef      	beq.n	8010430 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1ea      	bne.n	8010430 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801045e:	f003 0304 	and.w	r3, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	d004      	beq.n	8010470 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2204      	movs	r2, #4
 801046a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801046c:	2304      	movs	r3, #4
 801046e:	e03a      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	2b00      	cmp	r3, #0
 801047a:	d004      	beq.n	8010486 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010482:	2301      	movs	r3, #1
 8010484:	e02f      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7ff fb7c 	bl	800fb84 <SDMMC_GetCommandResponse>
 801048c:	4603      	mov	r3, r0
 801048e:	461a      	mov	r2, r3
 8010490:	7afb      	ldrb	r3, [r7, #11]
 8010492:	4293      	cmp	r3, r2
 8010494:	d001      	beq.n	801049a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010496:	2301      	movs	r3, #1
 8010498:	e025      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4a16      	ldr	r2, [pc, #88]	@ (80104f8 <SDMMC_GetCmdResp6+0xec>)
 801049e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80104a0:	2100      	movs	r1, #0
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f7ff fb7b 	bl	800fb9e <SDMMC_GetResponse>
 80104a8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d106      	bne.n	80104c2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	0c1b      	lsrs	r3, r3, #16
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80104be:	2300      	movs	r3, #0
 80104c0:	e011      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80104cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80104d0:	e009      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d002      	beq.n	80104e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80104dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104e0:	e001      	b.n	80104e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80104e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3720      	adds	r7, #32
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	24000014 	.word	0x24000014
 80104f4:	10624dd3 	.word	0x10624dd3
 80104f8:	002000c5 	.word	0x002000c5

080104fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010504:	4b22      	ldr	r3, [pc, #136]	@ (8010590 <SDMMC_GetCmdResp7+0x94>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a22      	ldr	r2, [pc, #136]	@ (8010594 <SDMMC_GetCmdResp7+0x98>)
 801050a:	fba2 2303 	umull	r2, r3, r2, r3
 801050e:	0a5b      	lsrs	r3, r3, #9
 8010510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010514:	fb02 f303 	mul.w	r3, r2, r3
 8010518:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	1e5a      	subs	r2, r3, #1
 801051e:	60fa      	str	r2, [r7, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010524:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010528:	e02c      	b.n	8010584 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801052e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0ef      	beq.n	801051a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1ea      	bne.n	801051a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010548:	f003 0304 	and.w	r3, r3, #4
 801054c:	2b00      	cmp	r3, #0
 801054e:	d004      	beq.n	801055a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2204      	movs	r2, #4
 8010554:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010556:	2304      	movs	r3, #4
 8010558:	e014      	b.n	8010584 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	2b00      	cmp	r3, #0
 8010564:	d004      	beq.n	8010570 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2201      	movs	r2, #1
 801056a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801056c:	2301      	movs	r3, #1
 801056e:	e009      	b.n	8010584 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2240      	movs	r2, #64	@ 0x40
 8010580:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010582:	2300      	movs	r3, #0

}
 8010584:	4618      	mov	r0, r3
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr
 8010590:	24000014 	.word	0x24000014
 8010594:	10624dd3 	.word	0x10624dd3

08010598 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80105a0:	4b11      	ldr	r3, [pc, #68]	@ (80105e8 <SDMMC_GetCmdError+0x50>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4a11      	ldr	r2, [pc, #68]	@ (80105ec <SDMMC_GetCmdError+0x54>)
 80105a6:	fba2 2303 	umull	r2, r3, r2, r3
 80105aa:	0a5b      	lsrs	r3, r3, #9
 80105ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105b0:	fb02 f303 	mul.w	r3, r2, r3
 80105b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	1e5a      	subs	r2, r3, #1
 80105ba:	60fa      	str	r2, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d102      	bne.n	80105c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80105c4:	e009      	b.n	80105da <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d0f1      	beq.n	80105b6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4a06      	ldr	r2, [pc, #24]	@ (80105f0 <SDMMC_GetCmdError+0x58>)
 80105d6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	24000014 	.word	0x24000014
 80105ec:	10624dd3 	.word	0x10624dd3
 80105f0:	002000c5 	.word	0x002000c5

080105f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80105f8:	4904      	ldr	r1, [pc, #16]	@ (801060c <MX_FATFS_Init+0x18>)
 80105fa:	4805      	ldr	r0, [pc, #20]	@ (8010610 <MX_FATFS_Init+0x1c>)
 80105fc:	f005 fcfc 	bl	8015ff8 <FATFS_LinkDriver>
 8010600:	4603      	mov	r3, r0
 8010602:	461a      	mov	r2, r3
 8010604:	4b03      	ldr	r3, [pc, #12]	@ (8010614 <MX_FATFS_Init+0x20>)
 8010606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010608:	bf00      	nop
 801060a:	bd80      	pop	{r7, pc}
 801060c:	24002900 	.word	0x24002900
 8010610:	0801eaa0 	.word	0x0801eaa0
 8010614:	240028fc 	.word	0x240028fc

08010618 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010618:	b480      	push	{r7}
 801061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801061c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801061e:	4618      	mov	r0, r3
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010632:	f000 f885 	bl	8010740 <BSP_SD_IsDetected>
 8010636:	4603      	mov	r3, r0
 8010638:	2b01      	cmp	r3, #1
 801063a:	d001      	beq.n	8010640 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801063c:	2302      	movs	r3, #2
 801063e:	e012      	b.n	8010666 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010640:	480b      	ldr	r0, [pc, #44]	@ (8010670 <BSP_SD_Init+0x48>)
 8010642:	f7fa f8b1 	bl	800a7a8 <HAL_SD_Init>
 8010646:	4603      	mov	r3, r0
 8010648:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d109      	bne.n	8010664 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010650:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010654:	4806      	ldr	r0, [pc, #24]	@ (8010670 <BSP_SD_Init+0x48>)
 8010656:	f7fa ff67 	bl	800b528 <HAL_SD_ConfigWideBusOperation>
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d001      	beq.n	8010664 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010664:	79fb      	ldrb	r3, [r7, #7]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	240022bc 	.word	0x240022bc

08010674 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	68f9      	ldr	r1, [r7, #12]
 801068a:	4806      	ldr	r0, [pc, #24]	@ (80106a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801068c:	f7fa f9ac 	bl	800a9e8 <HAL_SD_ReadBlocks_DMA>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010696:	2301      	movs	r3, #1
 8010698:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801069a:	7dfb      	ldrb	r3, [r7, #23]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	240022bc 	.word	0x240022bc

080106a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80106b4:	2300      	movs	r3, #0
 80106b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	68f9      	ldr	r1, [r7, #12]
 80106be:	4806      	ldr	r0, [pc, #24]	@ (80106d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80106c0:	f7fa fa3a 	bl	800ab38 <HAL_SD_WriteBlocks_DMA>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80106ca:	2301      	movs	r3, #1
 80106cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80106ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3718      	adds	r7, #24
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	240022bc 	.word	0x240022bc

080106dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80106e0:	4805      	ldr	r0, [pc, #20]	@ (80106f8 <BSP_SD_GetCardState+0x1c>)
 80106e2:	f7fb f833 	bl	800b74c <HAL_SD_GetCardState>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b04      	cmp	r3, #4
 80106ea:	bf14      	ite	ne
 80106ec:	2301      	movne	r3, #1
 80106ee:	2300      	moveq	r3, #0
 80106f0:	b2db      	uxtb	r3, r3
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	240022bc 	.word	0x240022bc

080106fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	4803      	ldr	r0, [pc, #12]	@ (8010714 <BSP_SD_GetCardInfo+0x18>)
 8010708:	f7fa fee2 	bl	800b4d0 <HAL_SD_GetCardInfo>
}
 801070c:	bf00      	nop
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	240022bc 	.word	0x240022bc

08010718 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010720:	f000 f9ac 	bl	8010a7c <BSP_SD_WriteCpltCallback>
}
 8010724:	bf00      	nop
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010734:	f000 f9b4 	bl	8010aa0 <BSP_SD_ReadCpltCallback>
}
 8010738:	bf00      	nop
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010746:	2301      	movs	r3, #1
 8010748:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801074a:	f000 f80b 	bl	8010764 <BSP_PlatformIsDetected>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d101      	bne.n	8010758 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010754:	2300      	movs	r3, #0
 8010756:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010758:	79fb      	ldrb	r3, [r7, #7]
 801075a:	b2db      	uxtb	r3, r3
}
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801076a:	2301      	movs	r3, #1
 801076c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801076e:	2120      	movs	r1, #32
 8010770:	4806      	ldr	r0, [pc, #24]	@ (801078c <BSP_PlatformIsDetected+0x28>)
 8010772:	f7f6 fa53 	bl	8006c1c <HAL_GPIO_ReadPin>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d001      	beq.n	8010780 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801077c:	2300      	movs	r3, #0
 801077e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010780:	79fb      	ldrb	r3, [r7, #7]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	58020400 	.word	0x58020400

08010790 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8010798:	f005 fe12 	bl	80163c0 <osKernelGetTickCount>
 801079c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801079e:	e006      	b.n	80107ae <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80107a0:	f7ff ff9c 	bl	80106dc <BSP_SD_GetCardState>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	e009      	b.n	80107c2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80107ae:	f005 fe07 	bl	80163c0 <osKernelGetTickCount>
 80107b2:	4602      	mov	r2, r0
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d8f0      	bhi.n	80107a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80107be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
	...

080107cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80107d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010804 <SD_CheckStatus+0x38>)
 80107d8:	2201      	movs	r2, #1
 80107da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80107dc:	f7ff ff7e 	bl	80106dc <BSP_SD_GetCardState>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d107      	bne.n	80107f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80107e6:	4b07      	ldr	r3, [pc, #28]	@ (8010804 <SD_CheckStatus+0x38>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	f023 0301 	bic.w	r3, r3, #1
 80107f0:	b2da      	uxtb	r2, r3
 80107f2:	4b04      	ldr	r3, [pc, #16]	@ (8010804 <SD_CheckStatus+0x38>)
 80107f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80107f6:	4b03      	ldr	r3, [pc, #12]	@ (8010804 <SD_CheckStatus+0x38>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	b2db      	uxtb	r3, r3
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	24000021 	.word	0x24000021

08010808 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	4603      	mov	r3, r0
 8010810:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010812:	4b1c      	ldr	r3, [pc, #112]	@ (8010884 <SD_initialize+0x7c>)
 8010814:	2201      	movs	r2, #1
 8010816:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8010818:	f005 fd8a 	bl	8016330 <osKernelGetState>
 801081c:	4603      	mov	r3, r0
 801081e:	2b02      	cmp	r3, #2
 8010820:	d129      	bne.n	8010876 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8010822:	f7ff ff01 	bl	8010628 <BSP_SD_Init>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d107      	bne.n	801083c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801082c:	79fb      	ldrb	r3, [r7, #7]
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff ffcc 	bl	80107cc <SD_CheckStatus>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	4b12      	ldr	r3, [pc, #72]	@ (8010884 <SD_initialize+0x7c>)
 801083a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801083c:	4b11      	ldr	r3, [pc, #68]	@ (8010884 <SD_initialize+0x7c>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	b2db      	uxtb	r3, r3
 8010842:	2b01      	cmp	r3, #1
 8010844:	d017      	beq.n	8010876 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8010846:	4b10      	ldr	r3, [pc, #64]	@ (8010888 <SD_initialize+0x80>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d107      	bne.n	801085e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801084e:	2200      	movs	r2, #0
 8010850:	2102      	movs	r1, #2
 8010852:	200a      	movs	r0, #10
 8010854:	f005 fff2 	bl	801683c <osMessageQueueNew>
 8010858:	4603      	mov	r3, r0
 801085a:	4a0b      	ldr	r2, [pc, #44]	@ (8010888 <SD_initialize+0x80>)
 801085c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 801085e:	4b0a      	ldr	r3, [pc, #40]	@ (8010888 <SD_initialize+0x80>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d107      	bne.n	8010876 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8010866:	4b07      	ldr	r3, [pc, #28]	@ (8010884 <SD_initialize+0x7c>)
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	b2db      	uxtb	r3, r3
 801086c:	f043 0301 	orr.w	r3, r3, #1
 8010870:	b2da      	uxtb	r2, r3
 8010872:	4b04      	ldr	r3, [pc, #16]	@ (8010884 <SD_initialize+0x7c>)
 8010874:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8010876:	4b03      	ldr	r3, [pc, #12]	@ (8010884 <SD_initialize+0x7c>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	b2db      	uxtb	r3, r3
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	24000021 	.word	0x24000021
 8010888:	24002b40 	.word	0x24002b40

0801088c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010896:	79fb      	ldrb	r3, [r7, #7]
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff ff97 	bl	80107cc <SD_CheckStatus>
 801089e:	4603      	mov	r3, r0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b088      	sub	sp, #32
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60b9      	str	r1, [r7, #8]
 80108b0:	607a      	str	r2, [r7, #4]
 80108b2:	603b      	str	r3, [r7, #0]
 80108b4:	4603      	mov	r3, r0
 80108b6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80108bc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80108c0:	f7ff ff66 	bl	8010790 <SD_CheckStatusWithTimeout>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	da01      	bge.n	80108ce <SD_read+0x26>
  {
    return res;
 80108ca:	7ffb      	ldrb	r3, [r7, #31]
 80108cc:	e02f      	b.n	801092e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80108ce:	683a      	ldr	r2, [r7, #0]
 80108d0:	6879      	ldr	r1, [r7, #4]
 80108d2:	68b8      	ldr	r0, [r7, #8]
 80108d4:	f7ff fece 	bl	8010674 <BSP_SD_ReadBlocks_DMA>
 80108d8:	4603      	mov	r3, r0
 80108da:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80108dc:	7fbb      	ldrb	r3, [r7, #30]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d124      	bne.n	801092c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80108e2:	4b15      	ldr	r3, [pc, #84]	@ (8010938 <SD_read+0x90>)
 80108e4:	6818      	ldr	r0, [r3, #0]
 80108e6:	f107 0112 	add.w	r1, r7, #18
 80108ea:	f247 5330 	movw	r3, #30000	@ 0x7530
 80108ee:	2200      	movs	r2, #0
 80108f0:	f006 f878 	bl	80169e4 <osMessageQueueGet>
 80108f4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d117      	bne.n	801092c <SD_read+0x84>
 80108fc:	8a7b      	ldrh	r3, [r7, #18]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d114      	bne.n	801092c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8010902:	f005 fd5d 	bl	80163c0 <osKernelGetTickCount>
 8010906:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8010908:	e007      	b.n	801091a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801090a:	f7ff fee7 	bl	80106dc <BSP_SD_GetCardState>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d102      	bne.n	801091a <SD_read+0x72>
              {
                res = RES_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8010918:	e008      	b.n	801092c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801091a:	f005 fd51 	bl	80163c0 <osKernelGetTickCount>
 801091e:	4602      	mov	r2, r0
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010928:	4293      	cmp	r3, r2
 801092a:	d9ee      	bls.n	801090a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801092c:	7ffb      	ldrb	r3, [r7, #31]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3720      	adds	r7, #32
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	24002b40 	.word	0x24002b40

0801093c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b088      	sub	sp, #32
 8010940:	af00      	add	r7, sp, #0
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	607a      	str	r2, [r7, #4]
 8010946:	603b      	str	r3, [r7, #0]
 8010948:	4603      	mov	r3, r0
 801094a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801094c:	2301      	movs	r3, #1
 801094e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010950:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010954:	f7ff ff1c 	bl	8010790 <SD_CheckStatusWithTimeout>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	da01      	bge.n	8010962 <SD_write+0x26>
  {
    return res;
 801095e:	7ffb      	ldrb	r3, [r7, #31]
 8010960:	e02d      	b.n	80109be <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010962:	683a      	ldr	r2, [r7, #0]
 8010964:	6879      	ldr	r1, [r7, #4]
 8010966:	68b8      	ldr	r0, [r7, #8]
 8010968:	f7ff fe9e 	bl	80106a8 <BSP_SD_WriteBlocks_DMA>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d124      	bne.n	80109bc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8010972:	4b15      	ldr	r3, [pc, #84]	@ (80109c8 <SD_write+0x8c>)
 8010974:	6818      	ldr	r0, [r3, #0]
 8010976:	f107 0112 	add.w	r1, r7, #18
 801097a:	f247 5330 	movw	r3, #30000	@ 0x7530
 801097e:	2200      	movs	r2, #0
 8010980:	f006 f830 	bl	80169e4 <osMessageQueueGet>
 8010984:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d117      	bne.n	80109bc <SD_write+0x80>
 801098c:	8a7b      	ldrh	r3, [r7, #18]
 801098e:	2b02      	cmp	r3, #2
 8010990:	d114      	bne.n	80109bc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8010992:	f005 fd15 	bl	80163c0 <osKernelGetTickCount>
 8010996:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8010998:	e007      	b.n	80109aa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801099a:	f7ff fe9f 	bl	80106dc <BSP_SD_GetCardState>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d102      	bne.n	80109aa <SD_write+0x6e>
          {
            res = RES_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	77fb      	strb	r3, [r7, #31]
            break;
 80109a8:	e008      	b.n	80109bc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80109aa:	f005 fd09 	bl	80163c0 <osKernelGetTickCount>
 80109ae:	4602      	mov	r2, r0
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d9ee      	bls.n	801099a <SD_write+0x5e>
        res = RES_OK;
    }

#endif

  return res;
 80109bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3720      	adds	r7, #32
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	24002b40 	.word	0x24002b40

080109cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08c      	sub	sp, #48	@ 0x30
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	603a      	str	r2, [r7, #0]
 80109d6:	71fb      	strb	r3, [r7, #7]
 80109d8:	460b      	mov	r3, r1
 80109da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80109dc:	2301      	movs	r3, #1
 80109de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80109e2:	4b25      	ldr	r3, [pc, #148]	@ (8010a78 <SD_ioctl+0xac>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0301 	and.w	r3, r3, #1
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <SD_ioctl+0x28>
 80109f0:	2303      	movs	r3, #3
 80109f2:	e03c      	b.n	8010a6e <SD_ioctl+0xa2>

  switch (cmd)
 80109f4:	79bb      	ldrb	r3, [r7, #6]
 80109f6:	2b03      	cmp	r3, #3
 80109f8:	d834      	bhi.n	8010a64 <SD_ioctl+0x98>
 80109fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010a00 <SD_ioctl+0x34>)
 80109fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a00:	08010a11 	.word	0x08010a11
 8010a04:	08010a19 	.word	0x08010a19
 8010a08:	08010a31 	.word	0x08010a31
 8010a0c:	08010a4b 	.word	0x08010a4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a16:	e028      	b.n	8010a6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a18:	f107 0308 	add.w	r3, r7, #8
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7ff fe6d 	bl	80106fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010a22:	6a3a      	ldr	r2, [r7, #32]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a2e:	e01c      	b.n	8010a6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a30:	f107 0308 	add.w	r3, r7, #8
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff fe61 	bl	80106fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010a42:	2300      	movs	r3, #0
 8010a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a48:	e00f      	b.n	8010a6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a4a:	f107 0308 	add.w	r3, r7, #8
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff fe54 	bl	80106fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a56:	0a5a      	lsrs	r2, r3, #9
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a62:	e002      	b.n	8010a6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010a64:	2304      	movs	r3, #4
 8010a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3730      	adds	r7, #48	@ 0x30
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	24000021 	.word	0x24000021

08010a7c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8010a82:	2302      	movs	r3, #2
 8010a84:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8010a86:	4b05      	ldr	r3, [pc, #20]	@ (8010a9c <BSP_SD_WriteCpltCallback+0x20>)
 8010a88:	6818      	ldr	r0, [r3, #0]
 8010a8a:	1db9      	adds	r1, r7, #6
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f005 ff48 	bl	8016924 <osMessageQueuePut>
#endif
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	24002b40 	.word	0x24002b40

08010aa0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8010aaa:	4b05      	ldr	r3, [pc, #20]	@ (8010ac0 <BSP_SD_ReadCpltCallback+0x20>)
 8010aac:	6818      	ldr	r0, [r3, #0]
 8010aae:	1db9      	adds	r1, r7, #6
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f005 ff36 	bl	8016924 <osMessageQueuePut>
#endif
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	24002b40 	.word	0x24002b40

08010ac4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	4a08      	ldr	r2, [pc, #32]	@ (8010af4 <disk_status+0x30>)
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	79fa      	ldrb	r2, [r7, #7]
 8010adc:	4905      	ldr	r1, [pc, #20]	@ (8010af4 <disk_status+0x30>)
 8010ade:	440a      	add	r2, r1
 8010ae0:	7a12      	ldrb	r2, [r2, #8]
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	4798      	blx	r3
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	24002b6c 	.word	0x24002b6c

08010af8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010b06:	79fb      	ldrb	r3, [r7, #7]
 8010b08:	4a0e      	ldr	r2, [pc, #56]	@ (8010b44 <disk_initialize+0x4c>)
 8010b0a:	5cd3      	ldrb	r3, [r2, r3]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d114      	bne.n	8010b3a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	4a0c      	ldr	r2, [pc, #48]	@ (8010b44 <disk_initialize+0x4c>)
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	4413      	add	r3, r2
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	4909      	ldr	r1, [pc, #36]	@ (8010b44 <disk_initialize+0x4c>)
 8010b20:	440a      	add	r2, r1
 8010b22:	7a12      	ldrb	r2, [r2, #8]
 8010b24:	4610      	mov	r0, r2
 8010b26:	4798      	blx	r3
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d103      	bne.n	8010b3a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010b32:	79fb      	ldrb	r3, [r7, #7]
 8010b34:	4a03      	ldr	r2, [pc, #12]	@ (8010b44 <disk_initialize+0x4c>)
 8010b36:	2101      	movs	r1, #1
 8010b38:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	24002b6c 	.word	0x24002b6c

08010b48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010b48:	b590      	push	{r4, r7, lr}
 8010b4a:	b087      	sub	sp, #28
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60b9      	str	r1, [r7, #8]
 8010b50:	607a      	str	r2, [r7, #4]
 8010b52:	603b      	str	r3, [r7, #0]
 8010b54:	4603      	mov	r3, r0
 8010b56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
 8010b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8010b84 <disk_read+0x3c>)
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	689c      	ldr	r4, [r3, #8]
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	4a07      	ldr	r2, [pc, #28]	@ (8010b84 <disk_read+0x3c>)
 8010b68:	4413      	add	r3, r2
 8010b6a:	7a18      	ldrb	r0, [r3, #8]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	68b9      	ldr	r1, [r7, #8]
 8010b72:	47a0      	blx	r4
 8010b74:	4603      	mov	r3, r0
 8010b76:	75fb      	strb	r3, [r7, #23]
  return res;
 8010b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	371c      	adds	r7, #28
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd90      	pop	{r4, r7, pc}
 8010b82:	bf00      	nop
 8010b84:	24002b6c 	.word	0x24002b6c

08010b88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60b9      	str	r1, [r7, #8]
 8010b90:	607a      	str	r2, [r7, #4]
 8010b92:	603b      	str	r3, [r7, #0]
 8010b94:	4603      	mov	r3, r0
 8010b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8010bc4 <disk_write+0x3c>)
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4413      	add	r3, r2
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	68dc      	ldr	r4, [r3, #12]
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	4a07      	ldr	r2, [pc, #28]	@ (8010bc4 <disk_write+0x3c>)
 8010ba8:	4413      	add	r3, r2
 8010baa:	7a18      	ldrb	r0, [r3, #8]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	68b9      	ldr	r1, [r7, #8]
 8010bb2:	47a0      	blx	r4
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd90      	pop	{r4, r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	24002b6c 	.word	0x24002b6c

08010bc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	4603      	mov	r3, r0
 8010bd0:	603a      	str	r2, [r7, #0]
 8010bd2:	71fb      	strb	r3, [r7, #7]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010bd8:	79fb      	ldrb	r3, [r7, #7]
 8010bda:	4a09      	ldr	r2, [pc, #36]	@ (8010c00 <disk_ioctl+0x38>)
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	4413      	add	r3, r2
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	79fa      	ldrb	r2, [r7, #7]
 8010be6:	4906      	ldr	r1, [pc, #24]	@ (8010c00 <disk_ioctl+0x38>)
 8010be8:	440a      	add	r2, r1
 8010bea:	7a10      	ldrb	r0, [r2, #8]
 8010bec:	79b9      	ldrb	r1, [r7, #6]
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	4798      	blx	r3
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	73fb      	strb	r3, [r7, #15]
  return res;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	24002b6c 	.word	0x24002b6c

08010c04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c18:	021b      	lsls	r3, r3, #8
 8010c1a:	b21a      	sxth	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	b21b      	sxth	r3, r3
 8010c22:	4313      	orrs	r3, r2
 8010c24:	b21b      	sxth	r3, r3
 8010c26:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010c28:	89fb      	ldrh	r3, [r7, #14]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3714      	adds	r7, #20
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr

08010c36 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010c36:	b480      	push	{r7}
 8010c38:	b085      	sub	sp, #20
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	3303      	adds	r3, #3
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	021b      	lsls	r3, r3, #8
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	3202      	adds	r2, #2
 8010c4e:	7812      	ldrb	r2, [r2, #0]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	021b      	lsls	r3, r3, #8
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	3201      	adds	r2, #1
 8010c5c:	7812      	ldrb	r2, [r2, #0]
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	021b      	lsls	r3, r3, #8
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	7812      	ldrb	r2, [r2, #0]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	60fb      	str	r3, [r7, #12]
	return rv;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8010c7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010c80:	b09d      	sub	sp, #116	@ 0x74
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8010c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c88:	3307      	adds	r3, #7
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2200      	movs	r2, #0
 8010c90:	469a      	mov	sl, r3
 8010c92:	4693      	mov	fp, r2
 8010c94:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8010c98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010c9c:	f04f 0000 	mov.w	r0, #0
 8010ca0:	f04f 0100 	mov.w	r1, #0
 8010ca4:	0219      	lsls	r1, r3, #8
 8010ca6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010caa:	0210      	lsls	r0, r2, #8
 8010cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010cae:	3306      	adds	r3, #6
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	461c      	mov	r4, r3
 8010cb8:	4615      	mov	r5, r2
 8010cba:	ea40 0804 	orr.w	r8, r0, r4
 8010cbe:	ea41 0905 	orr.w	r9, r1, r5
 8010cc2:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8010cc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010cca:	f04f 0000 	mov.w	r0, #0
 8010cce:	f04f 0100 	mov.w	r1, #0
 8010cd2:	0219      	lsls	r1, r3, #8
 8010cd4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010cd8:	0210      	lsls	r0, r2, #8
 8010cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010cdc:	3305      	adds	r3, #5
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ce6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010ce8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8010cec:	4623      	mov	r3, r4
 8010cee:	4303      	orrs	r3, r0
 8010cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010cf2:	462b      	mov	r3, r5
 8010cf4:	430b      	orrs	r3, r1
 8010cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cf8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8010cfc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8010d00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010d04:	f04f 0000 	mov.w	r0, #0
 8010d08:	f04f 0100 	mov.w	r1, #0
 8010d0c:	0219      	lsls	r1, r3, #8
 8010d0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010d12:	0210      	lsls	r0, r2, #8
 8010d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d16:	3304      	adds	r3, #4
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d20:	657a      	str	r2, [r7, #84]	@ 0x54
 8010d22:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010d26:	4623      	mov	r3, r4
 8010d28:	4303      	orrs	r3, r0
 8010d2a:	623b      	str	r3, [r7, #32]
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	430b      	orrs	r3, r1
 8010d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010d36:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8010d3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010d3e:	f04f 0000 	mov.w	r0, #0
 8010d42:	f04f 0100 	mov.w	r1, #0
 8010d46:	0219      	lsls	r1, r3, #8
 8010d48:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010d4c:	0210      	lsls	r0, r2, #8
 8010d4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d50:	3303      	adds	r3, #3
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2200      	movs	r2, #0
 8010d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010d5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010d60:	4623      	mov	r3, r4
 8010d62:	4303      	orrs	r3, r0
 8010d64:	61bb      	str	r3, [r7, #24]
 8010d66:	462b      	mov	r3, r5
 8010d68:	430b      	orrs	r3, r1
 8010d6a:	61fb      	str	r3, [r7, #28]
 8010d6c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010d70:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8010d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010d78:	f04f 0000 	mov.w	r0, #0
 8010d7c:	f04f 0100 	mov.w	r1, #0
 8010d80:	0219      	lsls	r1, r3, #8
 8010d82:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010d86:	0210      	lsls	r0, r2, #8
 8010d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	2200      	movs	r2, #0
 8010d92:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d94:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d96:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010d9a:	4623      	mov	r3, r4
 8010d9c:	4303      	orrs	r3, r0
 8010d9e:	613b      	str	r3, [r7, #16]
 8010da0:	462b      	mov	r3, r5
 8010da2:	430b      	orrs	r3, r1
 8010da4:	617b      	str	r3, [r7, #20]
 8010da6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010daa:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8010dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010db2:	f04f 0200 	mov.w	r2, #0
 8010db6:	f04f 0300 	mov.w	r3, #0
 8010dba:	020b      	lsls	r3, r1, #8
 8010dbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010dc0:	0202      	lsls	r2, r0, #8
 8010dc2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010dc4:	3101      	adds	r1, #1
 8010dc6:	7809      	ldrb	r1, [r1, #0]
 8010dc8:	b2c9      	uxtb	r1, r1
 8010dca:	2000      	movs	r0, #0
 8010dcc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010dce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010dd0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	4311      	orrs	r1, r2
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4319      	orrs	r1, r3
 8010dde:	60f9      	str	r1, [r7, #12]
 8010de0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010de4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8010de8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010dec:	f04f 0200 	mov.w	r2, #0
 8010df0:	f04f 0300 	mov.w	r3, #0
 8010df4:	020b      	lsls	r3, r1, #8
 8010df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010dfa:	0202      	lsls	r2, r0, #8
 8010dfc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010dfe:	7809      	ldrb	r1, [r1, #0]
 8010e00:	b2c9      	uxtb	r1, r1
 8010e02:	2000      	movs	r0, #0
 8010e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8010e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8010e08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8010e0c:	4621      	mov	r1, r4
 8010e0e:	4311      	orrs	r1, r2
 8010e10:	6039      	str	r1, [r7, #0]
 8010e12:	4629      	mov	r1, r5
 8010e14:	4319      	orrs	r1, r3
 8010e16:	6079      	str	r1, [r7, #4]
 8010e18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010e1c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8010e20:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8010e24:	4610      	mov	r0, r2
 8010e26:	4619      	mov	r1, r3
 8010e28:	3774      	adds	r7, #116	@ 0x74
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010e30:	4770      	bx	lr

08010e32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e32:	b480      	push	{r7}
 8010e34:	b083      	sub	sp, #12
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	1c5a      	adds	r2, r3, #1
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	887a      	ldrh	r2, [r7, #2]
 8010e46:	b2d2      	uxtb	r2, r2
 8010e48:	701a      	strb	r2, [r3, #0]
 8010e4a:	887b      	ldrh	r3, [r7, #2]
 8010e4c:	0a1b      	lsrs	r3, r3, #8
 8010e4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	607a      	str	r2, [r7, #4]
 8010e56:	887a      	ldrh	r2, [r7, #2]
 8010e58:	b2d2      	uxtb	r2, r2
 8010e5a:	701a      	strb	r2, [r3, #0]
}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	607a      	str	r2, [r7, #4]
 8010e78:	683a      	ldr	r2, [r7, #0]
 8010e7a:	b2d2      	uxtb	r2, r2
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	0a1b      	lsrs	r3, r3, #8
 8010e82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	1c5a      	adds	r2, r3, #1
 8010e88:	607a      	str	r2, [r7, #4]
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	b2d2      	uxtb	r2, r2
 8010e8e:	701a      	strb	r2, [r3, #0]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	0a1b      	lsrs	r3, r3, #8
 8010e94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	607a      	str	r2, [r7, #4]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	b2d2      	uxtb	r2, r2
 8010ea0:	701a      	strb	r2, [r3, #0]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	0a1b      	lsrs	r3, r3, #8
 8010ea6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	607a      	str	r2, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	b2d2      	uxtb	r2, r2
 8010eb2:	701a      	strb	r2, [r3, #0]
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	1c5a      	adds	r2, r3, #1
 8010ed0:	60fa      	str	r2, [r7, #12]
 8010ed2:	783a      	ldrb	r2, [r7, #0]
 8010ed4:	701a      	strb	r2, [r3, #0]
 8010ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010eda:	f04f 0200 	mov.w	r2, #0
 8010ede:	f04f 0300 	mov.w	r3, #0
 8010ee2:	0a02      	lsrs	r2, r0, #8
 8010ee4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010ee8:	0a0b      	lsrs	r3, r1, #8
 8010eea:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	60fa      	str	r2, [r7, #12]
 8010ef4:	783a      	ldrb	r2, [r7, #0]
 8010ef6:	701a      	strb	r2, [r3, #0]
 8010ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010efc:	f04f 0200 	mov.w	r2, #0
 8010f00:	f04f 0300 	mov.w	r3, #0
 8010f04:	0a02      	lsrs	r2, r0, #8
 8010f06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f0a:	0a0b      	lsrs	r3, r1, #8
 8010f0c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	60fa      	str	r2, [r7, #12]
 8010f16:	783a      	ldrb	r2, [r7, #0]
 8010f18:	701a      	strb	r2, [r3, #0]
 8010f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f1e:	f04f 0200 	mov.w	r2, #0
 8010f22:	f04f 0300 	mov.w	r3, #0
 8010f26:	0a02      	lsrs	r2, r0, #8
 8010f28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f2c:	0a0b      	lsrs	r3, r1, #8
 8010f2e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	60fa      	str	r2, [r7, #12]
 8010f38:	783a      	ldrb	r2, [r7, #0]
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f40:	f04f 0200 	mov.w	r2, #0
 8010f44:	f04f 0300 	mov.w	r3, #0
 8010f48:	0a02      	lsrs	r2, r0, #8
 8010f4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f4e:	0a0b      	lsrs	r3, r1, #8
 8010f50:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	60fa      	str	r2, [r7, #12]
 8010f5a:	783a      	ldrb	r2, [r7, #0]
 8010f5c:	701a      	strb	r2, [r3, #0]
 8010f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f62:	f04f 0200 	mov.w	r2, #0
 8010f66:	f04f 0300 	mov.w	r3, #0
 8010f6a:	0a02      	lsrs	r2, r0, #8
 8010f6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f70:	0a0b      	lsrs	r3, r1, #8
 8010f72:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	1c5a      	adds	r2, r3, #1
 8010f7a:	60fa      	str	r2, [r7, #12]
 8010f7c:	783a      	ldrb	r2, [r7, #0]
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f84:	f04f 0200 	mov.w	r2, #0
 8010f88:	f04f 0300 	mov.w	r3, #0
 8010f8c:	0a02      	lsrs	r2, r0, #8
 8010f8e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f92:	0a0b      	lsrs	r3, r1, #8
 8010f94:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	60fa      	str	r2, [r7, #12]
 8010f9e:	783a      	ldrb	r2, [r7, #0]
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fa6:	f04f 0200 	mov.w	r2, #0
 8010faa:	f04f 0300 	mov.w	r3, #0
 8010fae:	0a02      	lsrs	r2, r0, #8
 8010fb0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010fb4:	0a0b      	lsrs	r3, r1, #8
 8010fb6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	60fa      	str	r2, [r7, #12]
 8010fc0:	783a      	ldrb	r2, [r7, #0]
 8010fc2:	701a      	strb	r2, [r3, #0]
}
 8010fc4:	bf00      	nop
 8010fc6:	3714      	adds	r7, #20
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010fd0:	b480      	push	{r7}
 8010fd2:	b087      	sub	sp, #28
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d00d      	beq.n	8011006 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	1c53      	adds	r3, r2, #1
 8010fee:	613b      	str	r3, [r7, #16]
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	1c59      	adds	r1, r3, #1
 8010ff4:	6179      	str	r1, [r7, #20]
 8010ff6:	7812      	ldrb	r2, [r2, #0]
 8010ff8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	607b      	str	r3, [r7, #4]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d1f1      	bne.n	8010fea <mem_cpy+0x1a>
	}
}
 8011006:	bf00      	nop
 8011008:	371c      	adds	r7, #28
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011012:	b480      	push	{r7}
 8011014:	b087      	sub	sp, #28
 8011016:	af00      	add	r7, sp, #0
 8011018:	60f8      	str	r0, [r7, #12]
 801101a:	60b9      	str	r1, [r7, #8]
 801101c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	1c5a      	adds	r2, r3, #1
 8011026:	617a      	str	r2, [r7, #20]
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	b2d2      	uxtb	r2, r2
 801102c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	3b01      	subs	r3, #1
 8011032:	607b      	str	r3, [r7, #4]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1f3      	bne.n	8011022 <mem_set+0x10>
}
 801103a:	bf00      	nop
 801103c:	bf00      	nop
 801103e:	371c      	adds	r7, #28
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011048:	b480      	push	{r7}
 801104a:	b089      	sub	sp, #36	@ 0x24
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	61fb      	str	r3, [r7, #28]
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	1c5a      	adds	r2, r3, #1
 8011064:	61fa      	str	r2, [r7, #28]
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	4619      	mov	r1, r3
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	61ba      	str	r2, [r7, #24]
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	1acb      	subs	r3, r1, r3
 8011074:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3b01      	subs	r3, #1
 801107a:	607b      	str	r3, [r7, #4]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d002      	beq.n	8011088 <mem_cmp+0x40>
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d0eb      	beq.n	8011060 <mem_cmp+0x18>

	return r;
 8011088:	697b      	ldr	r3, [r7, #20]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3724      	adds	r7, #36	@ 0x24
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011096:	b480      	push	{r7}
 8011098:	b083      	sub	sp, #12
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80110a0:	e002      	b.n	80110a8 <chk_chr+0x12>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	3301      	adds	r3, #1
 80110a6:	607b      	str	r3, [r7, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d005      	beq.n	80110bc <chk_chr+0x26>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	461a      	mov	r2, r3
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d1f2      	bne.n	80110a2 <chk_chr+0xc>
	return *str;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	781b      	ldrb	r3, [r3, #0]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d009      	beq.n	80110ee <lock_fs+0x22>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	4618      	mov	r0, r3
 80110e0:	f005 f887 	bl	80161f2 <ff_req_grant>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d001      	beq.n	80110ee <lock_fs+0x22>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e000      	b.n	80110f0 <lock_fs+0x24>
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00d      	beq.n	8011126 <unlock_fs+0x2e>
 801110a:	78fb      	ldrb	r3, [r7, #3]
 801110c:	2b0c      	cmp	r3, #12
 801110e:	d00a      	beq.n	8011126 <unlock_fs+0x2e>
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	2b0b      	cmp	r3, #11
 8011114:	d007      	beq.n	8011126 <unlock_fs+0x2e>
 8011116:	78fb      	ldrb	r3, [r7, #3]
 8011118:	2b0f      	cmp	r3, #15
 801111a:	d004      	beq.n	8011126 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	695b      	ldr	r3, [r3, #20]
 8011120:	4618      	mov	r0, r3
 8011122:	f005 f87b 	bl	801621c <ff_rel_grant>
	}
}
 8011126:	bf00      	nop
 8011128:	3708      	adds	r7, #8
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
	...

08011130 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801113a:	2300      	movs	r3, #0
 801113c:	60bb      	str	r3, [r7, #8]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	60fb      	str	r3, [r7, #12]
 8011142:	e029      	b.n	8011198 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011144:	4a27      	ldr	r2, [pc, #156]	@ (80111e4 <chk_lock+0xb4>)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	011b      	lsls	r3, r3, #4
 801114a:	4413      	add	r3, r2
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d01d      	beq.n	801118e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011152:	4a24      	ldr	r2, [pc, #144]	@ (80111e4 <chk_lock+0xb4>)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	011b      	lsls	r3, r3, #4
 8011158:	4413      	add	r3, r2
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	429a      	cmp	r2, r3
 8011162:	d116      	bne.n	8011192 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011164:	4a1f      	ldr	r2, [pc, #124]	@ (80111e4 <chk_lock+0xb4>)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	011b      	lsls	r3, r3, #4
 801116a:	4413      	add	r3, r2
 801116c:	3304      	adds	r3, #4
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011174:	429a      	cmp	r2, r3
 8011176:	d10c      	bne.n	8011192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011178:	4a1a      	ldr	r2, [pc, #104]	@ (80111e4 <chk_lock+0xb4>)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	011b      	lsls	r3, r3, #4
 801117e:	4413      	add	r3, r2
 8011180:	3308      	adds	r3, #8
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8011188:	429a      	cmp	r2, r3
 801118a:	d102      	bne.n	8011192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801118c:	e007      	b.n	801119e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801118e:	2301      	movs	r3, #1
 8011190:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3301      	adds	r3, #1
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d9d2      	bls.n	8011144 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d109      	bne.n	80111b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d102      	bne.n	80111b0 <chk_lock+0x80>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d101      	bne.n	80111b4 <chk_lock+0x84>
 80111b0:	2300      	movs	r3, #0
 80111b2:	e010      	b.n	80111d6 <chk_lock+0xa6>
 80111b4:	2312      	movs	r3, #18
 80111b6:	e00e      	b.n	80111d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d108      	bne.n	80111d0 <chk_lock+0xa0>
 80111be:	4a09      	ldr	r2, [pc, #36]	@ (80111e4 <chk_lock+0xb4>)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	011b      	lsls	r3, r3, #4
 80111c4:	4413      	add	r3, r2
 80111c6:	330c      	adds	r3, #12
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80111ce:	d101      	bne.n	80111d4 <chk_lock+0xa4>
 80111d0:	2310      	movs	r3, #16
 80111d2:	e000      	b.n	80111d6 <chk_lock+0xa6>
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3714      	adds	r7, #20
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	24002b4c 	.word	0x24002b4c

080111e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80111ee:	2300      	movs	r3, #0
 80111f0:	607b      	str	r3, [r7, #4]
 80111f2:	e002      	b.n	80111fa <enq_lock+0x12>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3301      	adds	r3, #1
 80111f8:	607b      	str	r3, [r7, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d806      	bhi.n	801120e <enq_lock+0x26>
 8011200:	4a09      	ldr	r2, [pc, #36]	@ (8011228 <enq_lock+0x40>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	011b      	lsls	r3, r3, #4
 8011206:	4413      	add	r3, r2
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1f2      	bne.n	80111f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b02      	cmp	r3, #2
 8011212:	bf14      	ite	ne
 8011214:	2301      	movne	r3, #1
 8011216:	2300      	moveq	r3, #0
 8011218:	b2db      	uxtb	r3, r3
}
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	24002b4c 	.word	0x24002b4c

0801122c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011236:	2300      	movs	r3, #0
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	e01f      	b.n	801127c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801123c:	4a41      	ldr	r2, [pc, #260]	@ (8011344 <inc_lock+0x118>)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	011b      	lsls	r3, r3, #4
 8011242:	4413      	add	r3, r2
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d113      	bne.n	8011276 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801124e:	4a3d      	ldr	r2, [pc, #244]	@ (8011344 <inc_lock+0x118>)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	011b      	lsls	r3, r3, #4
 8011254:	4413      	add	r3, r2
 8011256:	3304      	adds	r3, #4
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801125e:	429a      	cmp	r2, r3
 8011260:	d109      	bne.n	8011276 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011262:	4a38      	ldr	r2, [pc, #224]	@ (8011344 <inc_lock+0x118>)
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	011b      	lsls	r3, r3, #4
 8011268:	4413      	add	r3, r2
 801126a:	3308      	adds	r3, #8
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8011272:	429a      	cmp	r2, r3
 8011274:	d006      	beq.n	8011284 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3301      	adds	r3, #1
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d9dc      	bls.n	801123c <inc_lock+0x10>
 8011282:	e000      	b.n	8011286 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011284:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b02      	cmp	r3, #2
 801128a:	d132      	bne.n	80112f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
 8011290:	e002      	b.n	8011298 <inc_lock+0x6c>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	3301      	adds	r3, #1
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d806      	bhi.n	80112ac <inc_lock+0x80>
 801129e:	4a29      	ldr	r2, [pc, #164]	@ (8011344 <inc_lock+0x118>)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	011b      	lsls	r3, r3, #4
 80112a4:	4413      	add	r3, r2
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1f2      	bne.n	8011292 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d101      	bne.n	80112b6 <inc_lock+0x8a>
 80112b2:	2300      	movs	r3, #0
 80112b4:	e040      	b.n	8011338 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	4922      	ldr	r1, [pc, #136]	@ (8011344 <inc_lock+0x118>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	440b      	add	r3, r1
 80112c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	689a      	ldr	r2, [r3, #8]
 80112c8:	491e      	ldr	r1, [pc, #120]	@ (8011344 <inc_lock+0x118>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	440b      	add	r3, r1
 80112d0:	3304      	adds	r3, #4
 80112d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112d8:	491a      	ldr	r1, [pc, #104]	@ (8011344 <inc_lock+0x118>)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	011b      	lsls	r3, r3, #4
 80112de:	440b      	add	r3, r1
 80112e0:	3308      	adds	r3, #8
 80112e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80112e4:	4a17      	ldr	r2, [pc, #92]	@ (8011344 <inc_lock+0x118>)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	011b      	lsls	r3, r3, #4
 80112ea:	4413      	add	r3, r2
 80112ec:	330c      	adds	r3, #12
 80112ee:	2200      	movs	r2, #0
 80112f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d009      	beq.n	801130c <inc_lock+0xe0>
 80112f8:	4a12      	ldr	r2, [pc, #72]	@ (8011344 <inc_lock+0x118>)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	011b      	lsls	r3, r3, #4
 80112fe:	4413      	add	r3, r2
 8011300:	330c      	adds	r3, #12
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d001      	beq.n	801130c <inc_lock+0xe0>
 8011308:	2300      	movs	r3, #0
 801130a:	e015      	b.n	8011338 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d108      	bne.n	8011324 <inc_lock+0xf8>
 8011312:	4a0c      	ldr	r2, [pc, #48]	@ (8011344 <inc_lock+0x118>)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	4413      	add	r3, r2
 801131a:	330c      	adds	r3, #12
 801131c:	881b      	ldrh	r3, [r3, #0]
 801131e:	3301      	adds	r3, #1
 8011320:	b29a      	uxth	r2, r3
 8011322:	e001      	b.n	8011328 <inc_lock+0xfc>
 8011324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011328:	4906      	ldr	r1, [pc, #24]	@ (8011344 <inc_lock+0x118>)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	011b      	lsls	r3, r3, #4
 801132e:	440b      	add	r3, r1
 8011330:	330c      	adds	r3, #12
 8011332:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3301      	adds	r3, #1
}
 8011338:	4618      	mov	r0, r3
 801133a:	3714      	adds	r7, #20
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	24002b4c 	.word	0x24002b4c

08011348 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011350:	2300      	movs	r3, #0
 8011352:	60fb      	str	r3, [r7, #12]
 8011354:	e010      	b.n	8011378 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011356:	4a0d      	ldr	r2, [pc, #52]	@ (801138c <clear_lock+0x44>)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	011b      	lsls	r3, r3, #4
 801135c:	4413      	add	r3, r2
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	429a      	cmp	r2, r3
 8011364:	d105      	bne.n	8011372 <clear_lock+0x2a>
 8011366:	4a09      	ldr	r2, [pc, #36]	@ (801138c <clear_lock+0x44>)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	011b      	lsls	r3, r3, #4
 801136c:	4413      	add	r3, r2
 801136e:	2200      	movs	r2, #0
 8011370:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	3301      	adds	r3, #1
 8011376:	60fb      	str	r3, [r7, #12]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d9eb      	bls.n	8011356 <clear_lock+0xe>
	}
}
 801137e:	bf00      	nop
 8011380:	bf00      	nop
 8011382:	3714      	adds	r7, #20
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr
 801138c:	24002b4c 	.word	0x24002b4c

08011390 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	78db      	ldrb	r3, [r3, #3]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d034      	beq.n	801140e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	7858      	ldrb	r0, [r3, #1]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80113b4:	2301      	movs	r3, #1
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	f7ff fbe6 	bl	8010b88 <disk_write>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d002      	beq.n	80113c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80113c2:	2301      	movs	r3, #1
 80113c4:	73fb      	strb	r3, [r7, #15]
 80113c6:	e022      	b.n	801140e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113d2:	697a      	ldr	r2, [r7, #20]
 80113d4:	1ad2      	subs	r2, r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113da:	429a      	cmp	r2, r3
 80113dc:	d217      	bcs.n	801140e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	789b      	ldrb	r3, [r3, #2]
 80113e2:	613b      	str	r3, [r7, #16]
 80113e4:	e010      	b.n	8011408 <sync_window+0x78>
					wsect += fs->fsize;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ea:	697a      	ldr	r2, [r7, #20]
 80113ec:	4413      	add	r3, r2
 80113ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	7858      	ldrb	r0, [r3, #1]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80113fa:	2301      	movs	r3, #1
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	f7ff fbc3 	bl	8010b88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	3b01      	subs	r3, #1
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d8eb      	bhi.n	80113e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3718      	adds	r7, #24
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801142a:	683a      	ldr	r2, [r7, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d01b      	beq.n	8011468 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7ff ffad 	bl	8011390 <sync_window>
 8011436:	4603      	mov	r3, r0
 8011438:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801143a:	7bfb      	ldrb	r3, [r7, #15]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d113      	bne.n	8011468 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	7858      	ldrb	r0, [r3, #1]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801144a:	2301      	movs	r3, #1
 801144c:	683a      	ldr	r2, [r7, #0]
 801144e:	f7ff fb7b 	bl	8010b48 <disk_read>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d004      	beq.n	8011462 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011458:	f04f 33ff 	mov.w	r3, #4294967295
 801145c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801145e:	2301      	movs	r3, #1
 8011460:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	683a      	ldr	r2, [r7, #0]
 8011466:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8011468:	7bfb      	ldrb	r3, [r7, #15]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
	...

08011474 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff ff87 	bl	8011390 <sync_window>
 8011482:	4603      	mov	r3, r0
 8011484:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011486:	7bfb      	ldrb	r3, [r7, #15]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d158      	bne.n	801153e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	2b03      	cmp	r3, #3
 8011492:	d148      	bne.n	8011526 <sync_fs+0xb2>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	791b      	ldrb	r3, [r3, #4]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d144      	bne.n	8011526 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	333c      	adds	r3, #60	@ 0x3c
 80114a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114a4:	2100      	movs	r1, #0
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff fdb3 	bl	8011012 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	333c      	adds	r3, #60	@ 0x3c
 80114b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80114b4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7ff fcba 	bl	8010e32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	333c      	adds	r3, #60	@ 0x3c
 80114c2:	4921      	ldr	r1, [pc, #132]	@ (8011548 <sync_fs+0xd4>)
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7ff fccf 	bl	8010e68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	333c      	adds	r3, #60	@ 0x3c
 80114ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80114d2:	491e      	ldr	r1, [pc, #120]	@ (801154c <sync_fs+0xd8>)
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7ff fcc7 	bl	8010e68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	333c      	adds	r3, #60	@ 0x3c
 80114de:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	4619      	mov	r1, r3
 80114e8:	4610      	mov	r0, r2
 80114ea:	f7ff fcbd 	bl	8010e68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	333c      	adds	r3, #60	@ 0x3c
 80114f2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	4619      	mov	r1, r3
 80114fc:	4610      	mov	r0, r2
 80114fe:	f7ff fcb3 	bl	8010e68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011506:	1c5a      	adds	r2, r3, #1
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	7858      	ldrb	r0, [r3, #1]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801151a:	2301      	movs	r3, #1
 801151c:	f7ff fb34 	bl	8010b88 <disk_write>
			fs->fsi_flag = 0;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	785b      	ldrb	r3, [r3, #1]
 801152a:	2200      	movs	r2, #0
 801152c:	2100      	movs	r1, #0
 801152e:	4618      	mov	r0, r3
 8011530:	f7ff fb4a 	bl	8010bc8 <disk_ioctl>
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d001      	beq.n	801153e <sync_fs+0xca>
 801153a:	2301      	movs	r3, #1
 801153c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3710      	adds	r7, #16
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	41615252 	.word	0x41615252
 801154c:	61417272 	.word	0x61417272

08011550 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	3b02      	subs	r3, #2
 801155e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6a1b      	ldr	r3, [r3, #32]
 8011564:	3b02      	subs	r3, #2
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d301      	bcc.n	8011570 <clust2sect+0x20>
 801156c:	2300      	movs	r3, #0
 801156e:	e008      	b.n	8011582 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	895b      	ldrh	r3, [r3, #10]
 8011574:	461a      	mov	r2, r3
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	fb03 f202 	mul.w	r2, r3, r2
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011580:	4413      	add	r3, r2
}
 8011582:	4618      	mov	r0, r3
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
	...

08011590 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b088      	sub	sp, #32
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801159a:	6879      	ldr	r1, [r7, #4]
 801159c:	6809      	ldr	r1, [r1, #0]
 801159e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	2901      	cmp	r1, #1
 80115a4:	d904      	bls.n	80115b0 <get_fat+0x20>
 80115a6:	69b9      	ldr	r1, [r7, #24]
 80115a8:	6a09      	ldr	r1, [r1, #32]
 80115aa:	6838      	ldr	r0, [r7, #0]
 80115ac:	4288      	cmp	r0, r1
 80115ae:	d302      	bcc.n	80115b6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80115b0:	2301      	movs	r3, #1
 80115b2:	61fb      	str	r3, [r7, #28]
 80115b4:	e100      	b.n	80117b8 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80115b6:	f04f 31ff 	mov.w	r1, #4294967295
 80115ba:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 80115bc:	69b9      	ldr	r1, [r7, #24]
 80115be:	7809      	ldrb	r1, [r1, #0]
 80115c0:	3901      	subs	r1, #1
 80115c2:	2903      	cmp	r1, #3
 80115c4:	f200 80ec 	bhi.w	80117a0 <get_fat+0x210>
 80115c8:	a001      	add	r0, pc, #4	@ (adr r0, 80115d0 <get_fat+0x40>)
 80115ca:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80115ce:	bf00      	nop
 80115d0:	080115e1 	.word	0x080115e1
 80115d4:	08011667 	.word	0x08011667
 80115d8:	0801169d 	.word	0x0801169d
 80115dc:	080116d5 	.word	0x080116d5
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	60fb      	str	r3, [r7, #12]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	085b      	lsrs	r3, r3, #1
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	0a5b      	lsrs	r3, r3, #9
 80115f6:	4413      	add	r3, r2
 80115f8:	4619      	mov	r1, r3
 80115fa:	69b8      	ldr	r0, [r7, #24]
 80115fc:	f7ff ff0c 	bl	8011418 <move_window>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	f040 80cf 	bne.w	80117a6 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	1c5a      	adds	r2, r3, #1
 801160c:	60fa      	str	r2, [r7, #12]
 801160e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011612:	69ba      	ldr	r2, [r7, #24]
 8011614:	4413      	add	r3, r2
 8011616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801161a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	0a5b      	lsrs	r3, r3, #9
 8011624:	4413      	add	r3, r2
 8011626:	4619      	mov	r1, r3
 8011628:	69b8      	ldr	r0, [r7, #24]
 801162a:	f7ff fef5 	bl	8011418 <move_window>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	f040 80ba 	bne.w	80117aa <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801163c:	69ba      	ldr	r2, [r7, #24]
 801163e:	4413      	add	r3, r2
 8011640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011644:	021b      	lsls	r3, r3, #8
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	4313      	orrs	r3, r2
 801164a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	f003 0301 	and.w	r3, r3, #1
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <get_fat+0xcc>
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	091b      	lsrs	r3, r3, #4
 801165a:	e002      	b.n	8011662 <get_fat+0xd2>
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011662:	61fb      	str	r3, [r7, #28]
			break;
 8011664:	e0a8      	b.n	80117b8 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	0a1b      	lsrs	r3, r3, #8
 801166e:	4413      	add	r3, r2
 8011670:	4619      	mov	r1, r3
 8011672:	69b8      	ldr	r0, [r7, #24]
 8011674:	f7ff fed0 	bl	8011418 <move_window>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	f040 8097 	bne.w	80117ae <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801168e:	4413      	add	r3, r2
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff fab7 	bl	8010c04 <ld_word>
 8011696:	4603      	mov	r3, r0
 8011698:	61fb      	str	r3, [r7, #28]
			break;
 801169a:	e08d      	b.n	80117b8 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	09db      	lsrs	r3, r3, #7
 80116a4:	4413      	add	r3, r2
 80116a6:	4619      	mov	r1, r3
 80116a8:	69b8      	ldr	r0, [r7, #24]
 80116aa:	f7ff feb5 	bl	8011418 <move_window>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d17e      	bne.n	80117b2 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80116c2:	4413      	add	r3, r2
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7ff fab6 	bl	8010c36 <ld_dword>
 80116ca:	4603      	mov	r3, r0
 80116cc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80116d0:	61fb      	str	r3, [r7, #28]
			break;
 80116d2:	e071      	b.n	80117b8 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80116d4:	6879      	ldr	r1, [r7, #4]
 80116d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80116da:	4301      	orrs	r1, r0
 80116dc:	d060      	beq.n	80117a0 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80116de:	6879      	ldr	r1, [r7, #4]
 80116e0:	6889      	ldr	r1, [r1, #8]
 80116e2:	6838      	ldr	r0, [r7, #0]
 80116e4:	1a41      	subs	r1, r0, r1
 80116e6:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80116e8:	6879      	ldr	r1, [r7, #4]
 80116ea:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80116ee:	1e42      	subs	r2, r0, #1
 80116f0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80116f4:	f04f 0000 	mov.w	r0, #0
 80116f8:	f04f 0100 	mov.w	r1, #0
 80116fc:	0a50      	lsrs	r0, r2, #9
 80116fe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8011702:	0a59      	lsrs	r1, r3, #9
 8011704:	4602      	mov	r2, r0
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	895b      	ldrh	r3, [r3, #10]
 801170a:	fbb2 f3f3 	udiv	r3, r2, r3
 801170e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	79db      	ldrb	r3, [r3, #7]
 8011714:	2b02      	cmp	r3, #2
 8011716:	d10e      	bne.n	8011736 <get_fat+0x1a6>
					if (cofs <= clen) {
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	429a      	cmp	r2, r3
 801171e:	d80a      	bhi.n	8011736 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	429a      	cmp	r2, r3
 8011726:	d002      	beq.n	801172e <get_fat+0x19e>
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	3301      	adds	r3, #1
 801172c:	e001      	b.n	8011732 <get_fat+0x1a2>
 801172e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011732:	61fb      	str	r3, [r7, #28]
						break;
 8011734:	e040      	b.n	80117b8 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	79db      	ldrb	r3, [r3, #7]
 801173a:	2b03      	cmp	r3, #3
 801173c:	d108      	bne.n	8011750 <get_fat+0x1c0>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	429a      	cmp	r2, r3
 8011746:	d203      	bcs.n	8011750 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	3301      	adds	r3, #1
 801174c:	61fb      	str	r3, [r7, #28]
					break;
 801174e:	e033      	b.n	80117b8 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	79db      	ldrb	r3, [r3, #7]
 8011754:	2b02      	cmp	r3, #2
 8011756:	d023      	beq.n	80117a0 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	69db      	ldr	r3, [r3, #28]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d003      	beq.n	8011768 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8011760:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011764:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8011766:	e027      	b.n	80117b8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	09db      	lsrs	r3, r3, #7
 8011770:	4413      	add	r3, r2
 8011772:	4619      	mov	r1, r3
 8011774:	69b8      	ldr	r0, [r7, #24]
 8011776:	f7ff fe4f 	bl	8011418 <move_window>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d11a      	bne.n	80117b6 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801178e:	4413      	add	r3, r2
 8011790:	4618      	mov	r0, r3
 8011792:	f7ff fa50 	bl	8010c36 <ld_dword>
 8011796:	4603      	mov	r3, r0
 8011798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801179c:	61fb      	str	r3, [r7, #28]
					break;
 801179e:	e00b      	b.n	80117b8 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80117a0:	2301      	movs	r3, #1
 80117a2:	61fb      	str	r3, [r7, #28]
 80117a4:	e008      	b.n	80117b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117a6:	bf00      	nop
 80117a8:	e006      	b.n	80117b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117aa:	bf00      	nop
 80117ac:	e004      	b.n	80117b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80117ae:	bf00      	nop
 80117b0:	e002      	b.n	80117b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117b2:	bf00      	nop
 80117b4:	e000      	b.n	80117b8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117b6:	bf00      	nop
		}
	}

	return val;
 80117b8:	69fb      	ldr	r3, [r7, #28]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3720      	adds	r7, #32
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop

080117c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80117c4:	b590      	push	{r4, r7, lr}
 80117c6:	b089      	sub	sp, #36	@ 0x24
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80117d0:	2302      	movs	r3, #2
 80117d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	f240 80dd 	bls.w	8011996 <put_fat+0x1d2>
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6a1b      	ldr	r3, [r3, #32]
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	f080 80d7 	bcs.w	8011996 <put_fat+0x1d2>
		switch (fs->fs_type) {
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	2b04      	cmp	r3, #4
 80117ee:	f300 80d2 	bgt.w	8011996 <put_fat+0x1d2>
 80117f2:	2b03      	cmp	r3, #3
 80117f4:	f280 8093 	bge.w	801191e <put_fat+0x15a>
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d002      	beq.n	8011802 <put_fat+0x3e>
 80117fc:	2b02      	cmp	r3, #2
 80117fe:	d06e      	beq.n	80118de <put_fat+0x11a>
 8011800:	e0c9      	b.n	8011996 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	61bb      	str	r3, [r7, #24]
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	085b      	lsrs	r3, r3, #1
 801180a:	69ba      	ldr	r2, [r7, #24]
 801180c:	4413      	add	r3, r2
 801180e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	0a5b      	lsrs	r3, r3, #9
 8011818:	4413      	add	r3, r2
 801181a:	4619      	mov	r1, r3
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f7ff fdfb 	bl	8011418 <move_window>
 8011822:	4603      	mov	r3, r0
 8011824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011826:	7ffb      	ldrb	r3, [r7, #31]
 8011828:	2b00      	cmp	r3, #0
 801182a:	f040 80ad 	bne.w	8011988 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	1c59      	adds	r1, r3, #1
 8011838:	61b9      	str	r1, [r7, #24]
 801183a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801183e:	4413      	add	r3, r2
 8011840:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00d      	beq.n	8011868 <put_fat+0xa4>
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	b25b      	sxtb	r3, r3
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	b25a      	sxtb	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	b25b      	sxtb	r3, r3
 801185c:	011b      	lsls	r3, r3, #4
 801185e:	b25b      	sxtb	r3, r3
 8011860:	4313      	orrs	r3, r2
 8011862:	b25b      	sxtb	r3, r3
 8011864:	b2db      	uxtb	r3, r3
 8011866:	e001      	b.n	801186c <put_fat+0xa8>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	b2db      	uxtb	r3, r3
 801186c:	697a      	ldr	r2, [r7, #20]
 801186e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2201      	movs	r2, #1
 8011874:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	0a5b      	lsrs	r3, r3, #9
 801187e:	4413      	add	r3, r2
 8011880:	4619      	mov	r1, r3
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7ff fdc8 	bl	8011418 <move_window>
 8011888:	4603      	mov	r3, r0
 801188a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801188c:	7ffb      	ldrb	r3, [r7, #31]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d17c      	bne.n	801198c <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801189e:	4413      	add	r3, r2
 80118a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	f003 0301 	and.w	r3, r3, #1
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d003      	beq.n	80118b4 <put_fat+0xf0>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	091b      	lsrs	r3, r3, #4
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	e00e      	b.n	80118d2 <put_fat+0x10e>
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	b25b      	sxtb	r3, r3
 80118ba:	f023 030f 	bic.w	r3, r3, #15
 80118be:	b25a      	sxtb	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	0a1b      	lsrs	r3, r3, #8
 80118c4:	b25b      	sxtb	r3, r3
 80118c6:	f003 030f 	and.w	r3, r3, #15
 80118ca:	b25b      	sxtb	r3, r3
 80118cc:	4313      	orrs	r3, r2
 80118ce:	b25b      	sxtb	r3, r3
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2201      	movs	r2, #1
 80118da:	70da      	strb	r2, [r3, #3]
			break;
 80118dc:	e05b      	b.n	8011996 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	0a1b      	lsrs	r3, r3, #8
 80118e6:	4413      	add	r3, r2
 80118e8:	4619      	mov	r1, r3
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7ff fd94 	bl	8011418 <move_window>
 80118f0:	4603      	mov	r3, r0
 80118f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118f4:	7ffb      	ldrb	r3, [r7, #31]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d14a      	bne.n	8011990 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011908:	4413      	add	r3, r2
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	b292      	uxth	r2, r2
 801190e:	4611      	mov	r1, r2
 8011910:	4618      	mov	r0, r3
 8011912:	f7ff fa8e 	bl	8010e32 <st_word>
			fs->wflag = 1;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2201      	movs	r2, #1
 801191a:	70da      	strb	r2, [r3, #3]
			break;
 801191c:	e03b      	b.n	8011996 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	09db      	lsrs	r3, r3, #7
 8011926:	4413      	add	r3, r2
 8011928:	4619      	mov	r1, r3
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7ff fd74 	bl	8011418 <move_window>
 8011930:	4603      	mov	r3, r0
 8011932:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011934:	7ffb      	ldrb	r3, [r7, #31]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d12c      	bne.n	8011994 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	2b04      	cmp	r3, #4
 8011940:	d012      	beq.n	8011968 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011956:	4413      	add	r3, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f7ff f96c 	bl	8010c36 <ld_dword>
 801195e:	4603      	mov	r3, r0
 8011960:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011964:	4323      	orrs	r3, r4
 8011966:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011976:	4413      	add	r3, r2
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fa74 	bl	8010e68 <st_dword>
			fs->wflag = 1;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2201      	movs	r2, #1
 8011984:	70da      	strb	r2, [r3, #3]
			break;
 8011986:	e006      	b.n	8011996 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8011988:	bf00      	nop
 801198a:	e004      	b.n	8011996 <put_fat+0x1d2>
			if (res != FR_OK) break;
 801198c:	bf00      	nop
 801198e:	e002      	b.n	8011996 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8011990:	bf00      	nop
 8011992:	e000      	b.n	8011996 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8011994:	bf00      	nop
		}
	}
	return res;
 8011996:	7ffb      	ldrb	r3, [r7, #31]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3724      	adds	r7, #36	@ 0x24
 801199c:	46bd      	mov	sp, r7
 801199e:	bd90      	pop	{r4, r7, pc}

080119a0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b08a      	sub	sp, #40	@ 0x28
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	3b02      	subs	r3, #2
 80119b0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	6a1b      	ldr	r3, [r3, #32]
 80119b6:	3b02      	subs	r3, #2
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d301      	bcc.n	80119c2 <find_bitmap+0x22>
 80119be:	2300      	movs	r3, #0
 80119c0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	61fb      	str	r3, [r7, #28]
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	61bb      	str	r3, [r7, #24]
 80119ca:	2300      	movs	r3, #0
 80119cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	0b1b      	lsrs	r3, r3, #12
 80119d6:	4413      	add	r3, r2
 80119d8:	4619      	mov	r1, r3
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f7ff fd1c 	bl	8011418 <move_window>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d002      	beq.n	80119ec <find_bitmap+0x4c>
 80119e6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ea:	e051      	b.n	8011a90 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	08db      	lsrs	r3, r3, #3
 80119f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119f4:	623b      	str	r3, [r7, #32]
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	f003 0307 	and.w	r3, r3, #7
 80119fc:	2201      	movs	r2, #1
 80119fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011a02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	6a3b      	ldr	r3, [r7, #32]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	333c      	adds	r3, #60	@ 0x3c
 8011a0e:	781a      	ldrb	r2, [r3, #0]
 8011a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a14:	4013      	ands	r3, r2
 8011a16:	74fb      	strb	r3, [r7, #19]
 8011a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	3301      	adds	r3, #1
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	6a1b      	ldr	r3, [r3, #32]
 8011a2c:	3b02      	subs	r3, #2
 8011a2e:	69fa      	ldr	r2, [r7, #28]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d307      	bcc.n	8011a44 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8011a34:	2300      	movs	r3, #0
 8011a36:	61fb      	str	r3, [r7, #28]
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011a42:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8011a44:	7cfb      	ldrb	r3, [r7, #19]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d109      	bne.n	8011a5e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	697a      	ldr	r2, [r7, #20]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d106      	bne.n	8011a66 <find_bitmap+0xc6>
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	3302      	adds	r3, #2
 8011a5c:	e018      	b.n	8011a90 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	61bb      	str	r3, [r7, #24]
 8011a62:	2300      	movs	r3, #0
 8011a64:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8011a66:	69fa      	ldr	r2, [r7, #28]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d101      	bne.n	8011a72 <find_bitmap+0xd2>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e00e      	b.n	8011a90 <find_bitmap+0xf0>
			} while (bm);
 8011a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1c5      	bne.n	8011a06 <find_bitmap+0x66>
			bm = 1;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8011a80:	6a3b      	ldr	r3, [r7, #32]
 8011a82:	3301      	adds	r3, #1
 8011a84:	623b      	str	r3, [r7, #32]
 8011a86:	6a3b      	ldr	r3, [r7, #32]
 8011a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a8c:	d3bb      	bcc.n	8011a06 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8011a8e:	e79e      	b.n	80119ce <find_bitmap+0x2e>
	}
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3728      	adds	r7, #40	@ 0x28
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b088      	sub	sp, #32
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	3b02      	subs	r3, #2
 8011aaa:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	0b1b      	lsrs	r3, r3, #12
 8011ab4:	4413      	add	r3, r2
 8011ab6:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	08db      	lsrs	r3, r3, #3
 8011abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ac0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	f003 0307 	and.w	r3, r3, #7
 8011ac8:	2201      	movs	r2, #1
 8011aca:	fa02 f303 	lsl.w	r3, r2, r3
 8011ace:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	1c5a      	adds	r2, r3, #1
 8011ad4:	617a      	str	r2, [r7, #20]
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f7ff fc9d 	bl	8011418 <move_window>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <change_bitmap+0x50>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e03d      	b.n	8011b64 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8011ae8:	68fa      	ldr	r2, [r7, #12]
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	4413      	add	r3, r2
 8011aee:	333c      	adds	r3, #60	@ 0x3c
 8011af0:	781a      	ldrb	r2, [r3, #0]
 8011af2:	7ffb      	ldrb	r3, [r7, #31]
 8011af4:	4013      	ands	r3, r2
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	bf14      	ite	ne
 8011afc:	2301      	movne	r3, #1
 8011afe:	2300      	moveq	r3, #0
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	461a      	mov	r2, r3
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d101      	bne.n	8011b0e <change_bitmap+0x76>
 8011b0a:	2302      	movs	r3, #2
 8011b0c:	e02a      	b.n	8011b64 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	4413      	add	r3, r2
 8011b14:	333c      	adds	r3, #60	@ 0x3c
 8011b16:	781a      	ldrb	r2, [r3, #0]
 8011b18:	7ffb      	ldrb	r3, [r7, #31]
 8011b1a:	4053      	eors	r3, r2
 8011b1c:	b2d9      	uxtb	r1, r3
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	4413      	add	r3, r2
 8011b24:	333c      	adds	r3, #60	@ 0x3c
 8011b26:	460a      	mov	r2, r1
 8011b28:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	3b01      	subs	r3, #1
 8011b34:	607b      	str	r3, [r7, #4]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d101      	bne.n	8011b40 <change_bitmap+0xa8>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	e011      	b.n	8011b64 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8011b40:	7ffb      	ldrb	r3, [r7, #31]
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	77fb      	strb	r3, [r7, #31]
 8011b46:	7ffb      	ldrb	r3, [r7, #31]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1cd      	bne.n	8011ae8 <change_bitmap+0x50>
			bm = 1;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	3301      	adds	r3, #1
 8011b54:	61bb      	str	r3, [r7, #24]
 8011b56:	69bb      	ldr	r3, [r7, #24]
 8011b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b5c:	d3c4      	bcc.n	8011ae8 <change_bitmap+0x50>
		i = 0;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8011b62:	e7b5      	b.n	8011ad0 <change_bitmap+0x38>
	}
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3720      	adds	r7, #32
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	79db      	ldrb	r3, [r3, #7]
 8011b78:	2b03      	cmp	r3, #3
 8011b7a:	d121      	bne.n	8011bc0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	617b      	str	r3, [r7, #20]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	613b      	str	r3, [r7, #16]
 8011b88:	e014      	b.n	8011bb4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6818      	ldr	r0, [r3, #0]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	3301      	adds	r3, #1
 8011b92:	461a      	mov	r2, r3
 8011b94:	6979      	ldr	r1, [r7, #20]
 8011b96:	f7ff fe15 	bl	80117c4 <put_fat>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d001      	beq.n	8011ba8 <fill_first_frag+0x3c>
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
 8011ba6:	e00c      	b.n	8011bc2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	3301      	adds	r3, #1
 8011bac:	617b      	str	r3, [r7, #20]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	613b      	str	r3, [r7, #16]
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d1e7      	bne.n	8011b8a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3718      	adds	r7, #24
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b086      	sub	sp, #24
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	60f8      	str	r0, [r7, #12]
 8011bd2:	60b9      	str	r1, [r7, #8]
 8011bd4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011bd6:	e020      	b.n	8011c1a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6818      	ldr	r0, [r3, #0]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	69db      	ldr	r3, [r3, #28]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	1c59      	adds	r1, r3, #1
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	69db      	ldr	r3, [r3, #28]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d905      	bls.n	8011bfa <fill_last_frag+0x30>
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	69db      	ldr	r3, [r3, #28]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	1ad3      	subs	r3, r2, r3
 8011bf6:	3302      	adds	r3, #2
 8011bf8:	e000      	b.n	8011bfc <fill_last_frag+0x32>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	f7ff fde1 	bl	80117c4 <put_fat>
 8011c02:	4603      	mov	r3, r0
 8011c04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <fill_last_frag+0x46>
 8011c0c:	7dfb      	ldrb	r3, [r7, #23]
 8011c0e:	e009      	b.n	8011c24 <fill_last_frag+0x5a>
		obj->n_frag--;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	69db      	ldr	r3, [r3, #28]
 8011c14:	1e5a      	subs	r2, r3, #1
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	69db      	ldr	r3, [r3, #28]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d1da      	bne.n	8011bd8 <fill_last_frag+0xe>
	}
	return FR_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3718      	adds	r7, #24
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b08a      	sub	sp, #40	@ 0x28
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d904      	bls.n	8011c5a <remove_chain+0x2e>
 8011c50:	69bb      	ldr	r3, [r7, #24]
 8011c52:	6a1b      	ldr	r3, [r3, #32]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d301      	bcc.n	8011c5e <remove_chain+0x32>
 8011c5a:	2302      	movs	r3, #2
 8011c5c:	e096      	b.n	8011d8c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d014      	beq.n	8011c8e <remove_chain+0x62>
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	2b04      	cmp	r3, #4
 8011c6a:	d103      	bne.n	8011c74 <remove_chain+0x48>
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	79db      	ldrb	r3, [r3, #7]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d00c      	beq.n	8011c8e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011c74:	f04f 32ff 	mov.w	r2, #4294967295
 8011c78:	6879      	ldr	r1, [r7, #4]
 8011c7a:	69b8      	ldr	r0, [r7, #24]
 8011c7c:	f7ff fda2 	bl	80117c4 <put_fat>
 8011c80:	4603      	mov	r3, r0
 8011c82:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011c84:	7ffb      	ldrb	r3, [r7, #31]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <remove_chain+0x62>
 8011c8a:	7ffb      	ldrb	r3, [r7, #31]
 8011c8c:	e07e      	b.n	8011d8c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011c8e:	68b9      	ldr	r1, [r7, #8]
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	f7ff fc7d 	bl	8011590 <get_fat>
 8011c96:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d055      	beq.n	8011d4a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d101      	bne.n	8011ca8 <remove_chain+0x7c>
 8011ca4:	2302      	movs	r3, #2
 8011ca6:	e071      	b.n	8011d8c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cae:	d101      	bne.n	8011cb4 <remove_chain+0x88>
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	e06b      	b.n	8011d8c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	2b04      	cmp	r3, #4
 8011cba:	d00b      	beq.n	8011cd4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	68b9      	ldr	r1, [r7, #8]
 8011cc0:	69b8      	ldr	r0, [r7, #24]
 8011cc2:	f7ff fd7f 	bl	80117c4 <put_fat>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011cca:	7ffb      	ldrb	r3, [r7, #31]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <remove_chain+0xa8>
 8011cd0:	7ffb      	ldrb	r3, [r7, #31]
 8011cd2:	e05b      	b.n	8011d8c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	69da      	ldr	r2, [r3, #28]
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	6a1b      	ldr	r3, [r3, #32]
 8011cdc:	3b02      	subs	r3, #2
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d20b      	bcs.n	8011cfa <remove_chain+0xce>
			fs->free_clst++;
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	69db      	ldr	r3, [r3, #28]
 8011ce6:	1c5a      	adds	r2, r3, #1
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	791b      	ldrb	r3, [r3, #4]
 8011cf0:	f043 0301 	orr.w	r3, r3, #1
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	697a      	ldr	r2, [r7, #20]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d102      	bne.n	8011d0a <remove_chain+0xde>
			ecl = nxt;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	623b      	str	r3, [r7, #32]
 8011d08:	e017      	b.n	8011d3a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	2b04      	cmp	r3, #4
 8011d10:	d10f      	bne.n	8011d32 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8011d12:	6a3a      	ldr	r2, [r7, #32]
 8011d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d16:	1ad3      	subs	r3, r2, r3
 8011d18:	1c5a      	adds	r2, r3, #1
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d1e:	69b8      	ldr	r0, [r7, #24]
 8011d20:	f7ff feba 	bl	8011a98 <change_bitmap>
 8011d24:	4603      	mov	r3, r0
 8011d26:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8011d28:	7ffb      	ldrb	r3, [r7, #31]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <remove_chain+0x106>
 8011d2e:	7ffb      	ldrb	r3, [r7, #31]
 8011d30:	e02c      	b.n	8011d8c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	623b      	str	r3, [r7, #32]
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011d3e:	69bb      	ldr	r3, [r7, #24]
 8011d40:	6a1b      	ldr	r3, [r3, #32]
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d3a2      	bcc.n	8011c8e <remove_chain+0x62>
 8011d48:	e000      	b.n	8011d4c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8011d4a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	d11a      	bne.n	8011d8a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d103      	bne.n	8011d62 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	71da      	strb	r2, [r3, #7]
 8011d60:	e013      	b.n	8011d8a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	79db      	ldrb	r3, [r3, #7]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	d10f      	bne.n	8011d8a <remove_chain+0x15e>
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d30a      	bcc.n	8011d8a <remove_chain+0x15e>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	689a      	ldr	r2, [r3, #8]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	699b      	ldr	r3, [r3, #24]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d802      	bhi.n	8011d8a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	2202      	movs	r2, #2
 8011d88:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8011d8a:	2300      	movs	r3, #0
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3728      	adds	r7, #40	@ 0x28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b088      	sub	sp, #32
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10d      	bne.n	8011dc6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	699b      	ldr	r3, [r3, #24]
 8011dae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d004      	beq.n	8011dc0 <create_chain+0x2c>
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	6a1b      	ldr	r3, [r3, #32]
 8011dba:	69ba      	ldr	r2, [r7, #24]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d31b      	bcc.n	8011df8 <create_chain+0x64>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	61bb      	str	r3, [r7, #24]
 8011dc4:	e018      	b.n	8011df8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff fbe1 	bl	8011590 <get_fat>
 8011dce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2b01      	cmp	r3, #1
 8011dd4:	d801      	bhi.n	8011dda <create_chain+0x46>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e0d9      	b.n	8011f8e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de0:	d101      	bne.n	8011de6 <create_chain+0x52>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	e0d3      	b.n	8011f8e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d201      	bcs.n	8011df4 <create_chain+0x60>
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	e0cc      	b.n	8011f8e <create_chain+0x1fa>
		scl = clst;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b04      	cmp	r3, #4
 8011dfe:	d164      	bne.n	8011eca <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8011e00:	2201      	movs	r2, #1
 8011e02:	69b9      	ldr	r1, [r7, #24]
 8011e04:	6938      	ldr	r0, [r7, #16]
 8011e06:	f7ff fdcb 	bl	80119a0 <find_bitmap>
 8011e0a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d003      	beq.n	8011e1a <create_chain+0x86>
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e18:	d101      	bne.n	8011e1e <create_chain+0x8a>
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	e0b7      	b.n	8011f8e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8011e1e:	2301      	movs	r3, #1
 8011e20:	2201      	movs	r2, #1
 8011e22:	69f9      	ldr	r1, [r7, #28]
 8011e24:	6938      	ldr	r0, [r7, #16]
 8011e26:	f7ff fe37 	bl	8011a98 <change_bitmap>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8011e2e:	7dfb      	ldrb	r3, [r7, #23]
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d101      	bne.n	8011e38 <create_chain+0xa4>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e0aa      	b.n	8011f8e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8011e38:	7dfb      	ldrb	r3, [r7, #23]
 8011e3a:	2b01      	cmp	r3, #1
 8011e3c:	d102      	bne.n	8011e44 <create_chain+0xb0>
 8011e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e42:	e0a4      	b.n	8011f8e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d103      	bne.n	8011e52 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	71da      	strb	r2, [r3, #7]
 8011e50:	e011      	b.n	8011e76 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	79db      	ldrb	r3, [r3, #7]
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d10d      	bne.n	8011e76 <create_chain+0xe2>
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	69fa      	ldr	r2, [r7, #28]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d008      	beq.n	8011e76 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	69ba      	ldr	r2, [r7, #24]
 8011e6a:	1ad2      	subs	r2, r2, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2203      	movs	r2, #3
 8011e74:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	79db      	ldrb	r3, [r3, #7]
 8011e7a:	2b02      	cmp	r3, #2
 8011e7c:	d064      	beq.n	8011f48 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	3301      	adds	r3, #1
 8011e82:	69fa      	ldr	r2, [r7, #28]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d10b      	bne.n	8011ea0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d003      	beq.n	8011e98 <create_chain+0x104>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	69db      	ldr	r3, [r3, #28]
 8011e94:	3301      	adds	r3, #1
 8011e96:	e000      	b.n	8011e9a <create_chain+0x106>
 8011e98:	2302      	movs	r3, #2
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	61d3      	str	r3, [r2, #28]
 8011e9e:	e053      	b.n	8011f48 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d102      	bne.n	8011eae <create_chain+0x11a>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8011eae:	69fa      	ldr	r2, [r7, #28]
 8011eb0:	6839      	ldr	r1, [r7, #0]
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff fe89 	bl	8011bca <fill_last_frag>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8011ebc:	7dfb      	ldrb	r3, [r7, #23]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d142      	bne.n	8011f48 <create_chain+0x1b4>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	61da      	str	r2, [r3, #28]
 8011ec8:	e03e      	b.n	8011f48 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	6a1b      	ldr	r3, [r3, #32]
 8011ed8:	69fa      	ldr	r2, [r7, #28]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d307      	bcc.n	8011eee <create_chain+0x15a>
				ncl = 2;
 8011ede:	2302      	movs	r3, #2
 8011ee0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011ee2:	69fa      	ldr	r2, [r7, #28]
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d901      	bls.n	8011eee <create_chain+0x15a>
 8011eea:	2300      	movs	r3, #0
 8011eec:	e04f      	b.n	8011f8e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011eee:	69f9      	ldr	r1, [r7, #28]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7ff fb4d 	bl	8011590 <get_fat>
 8011ef6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d00e      	beq.n	8011f1c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d003      	beq.n	8011f0c <create_chain+0x178>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f0a:	d101      	bne.n	8011f10 <create_chain+0x17c>
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	e03e      	b.n	8011f8e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8011f10:	69fa      	ldr	r2, [r7, #28]
 8011f12:	69bb      	ldr	r3, [r7, #24]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d1da      	bne.n	8011ece <create_chain+0x13a>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	e038      	b.n	8011f8e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8011f1c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f22:	69f9      	ldr	r1, [r7, #28]
 8011f24:	6938      	ldr	r0, [r7, #16]
 8011f26:	f7ff fc4d 	bl	80117c4 <put_fat>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011f2e:	7dfb      	ldrb	r3, [r7, #23]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d109      	bne.n	8011f48 <create_chain+0x1b4>
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d006      	beq.n	8011f48 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011f3a:	69fa      	ldr	r2, [r7, #28]
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6938      	ldr	r0, [r7, #16]
 8011f40:	f7ff fc40 	bl	80117c4 <put_fat>
 8011f44:	4603      	mov	r3, r0
 8011f46:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011f48:	7dfb      	ldrb	r3, [r7, #23]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d116      	bne.n	8011f7c <create_chain+0x1e8>
		fs->last_clst = ncl;
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	69fa      	ldr	r2, [r7, #28]
 8011f52:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	69da      	ldr	r2, [r3, #28]
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	6a1b      	ldr	r3, [r3, #32]
 8011f5c:	3b02      	subs	r3, #2
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d804      	bhi.n	8011f6c <create_chain+0x1d8>
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	69db      	ldr	r3, [r3, #28]
 8011f66:	1e5a      	subs	r2, r3, #1
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	791b      	ldrb	r3, [r3, #4]
 8011f70:	f043 0301 	orr.w	r3, r3, #1
 8011f74:	b2da      	uxtb	r2, r3
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	711a      	strb	r2, [r3, #4]
 8011f7a:	e007      	b.n	8011f8c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d102      	bne.n	8011f88 <create_chain+0x1f4>
 8011f82:	f04f 33ff 	mov.w	r3, #4294967295
 8011f86:	e000      	b.n	8011f8a <create_chain+0x1f6>
 8011f88:	2301      	movs	r3, #1
 8011f8a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f8c:	69fb      	ldr	r3, [r7, #28]
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3720      	adds	r7, #32
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}

08011f96 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f96:	b5b0      	push	{r4, r5, r7, lr}
 8011f98:	b088      	sub	sp, #32
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	60f8      	str	r0, [r7, #12]
 8011f9e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fac:	3304      	adds	r3, #4
 8011fae:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fb4:	f04f 0000 	mov.w	r0, #0
 8011fb8:	f04f 0100 	mov.w	r1, #0
 8011fbc:	0a50      	lsrs	r0, r2, #9
 8011fbe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8011fc2:	0a59      	lsrs	r1, r3, #9
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	895b      	ldrh	r3, [r3, #10]
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	2200      	movs	r2, #0
 8011fcc:	461c      	mov	r4, r3
 8011fce:	4615      	mov	r5, r2
 8011fd0:	4622      	mov	r2, r4
 8011fd2:	462b      	mov	r3, r5
 8011fd4:	f7ee f9dc 	bl	8000390 <__aeabi_uldivmod>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4613      	mov	r3, r2
 8011fde:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fe0:	69bb      	ldr	r3, [r7, #24]
 8011fe2:	1d1a      	adds	r2, r3, #4
 8011fe4:	61ba      	str	r2, [r7, #24]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <clmt_clust+0x5e>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	e010      	b.n	8012016 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8011ff4:	69fa      	ldr	r2, [r7, #28]
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d307      	bcc.n	801200c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ffc:	69fa      	ldr	r2, [r7, #28]
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	3304      	adds	r3, #4
 8012008:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801200a:	e7e9      	b.n	8011fe0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 801200c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
}
 8012016:	4618      	mov	r0, r3
 8012018:	3720      	adds	r7, #32
 801201a:	46bd      	mov	sp, r7
 801201c:	bdb0      	pop	{r4, r5, r7, pc}

0801201e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b086      	sub	sp, #24
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
 8012026:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	2b04      	cmp	r3, #4
 8012034:	d102      	bne.n	801203c <dir_sdi+0x1e>
 8012036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801203a:	e001      	b.n	8012040 <dir_sdi+0x22>
 801203c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	429a      	cmp	r2, r3
 8012044:	d904      	bls.n	8012050 <dir_sdi+0x32>
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	f003 031f 	and.w	r3, r3, #31
 801204c:	2b00      	cmp	r3, #0
 801204e:	d001      	beq.n	8012054 <dir_sdi+0x36>
		return FR_INT_ERR;
 8012050:	2302      	movs	r3, #2
 8012052:	e066      	b.n	8012122 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	683a      	ldr	r2, [r7, #0]
 8012058:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	689b      	ldr	r3, [r3, #8]
 801205e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d109      	bne.n	801207a <dir_sdi+0x5c>
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	2b02      	cmp	r3, #2
 801206c:	d905      	bls.n	801207a <dir_sdi+0x5c>
		clst = fs->dirbase;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012072:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2200      	movs	r2, #0
 8012078:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10c      	bne.n	801209a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	095b      	lsrs	r3, r3, #5
 8012084:	693a      	ldr	r2, [r7, #16]
 8012086:	8912      	ldrh	r2, [r2, #8]
 8012088:	4293      	cmp	r3, r2
 801208a:	d301      	bcc.n	8012090 <dir_sdi+0x72>
 801208c:	2302      	movs	r3, #2
 801208e:	e048      	b.n	8012122 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	639a      	str	r2, [r3, #56]	@ 0x38
 8012098:	e029      	b.n	80120ee <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	895b      	ldrh	r3, [r3, #10]
 801209e:	025b      	lsls	r3, r3, #9
 80120a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80120a2:	e019      	b.n	80120d8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6979      	ldr	r1, [r7, #20]
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7ff fa71 	bl	8011590 <get_fat>
 80120ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b6:	d101      	bne.n	80120bc <dir_sdi+0x9e>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e032      	b.n	8012122 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d904      	bls.n	80120cc <dir_sdi+0xae>
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	6a1b      	ldr	r3, [r3, #32]
 80120c6:	697a      	ldr	r2, [r7, #20]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d301      	bcc.n	80120d0 <dir_sdi+0xb2>
 80120cc:	2302      	movs	r3, #2
 80120ce:	e028      	b.n	8012122 <dir_sdi+0x104>
			ofs -= csz;
 80120d0:	683a      	ldr	r2, [r7, #0]
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	1ad3      	subs	r3, r2, r3
 80120d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d2e1      	bcs.n	80120a4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 80120e0:	6979      	ldr	r1, [r7, #20]
 80120e2:	6938      	ldr	r0, [r7, #16]
 80120e4:	f7ff fa34 	bl	8011550 <clust2sect>
 80120e8:	4602      	mov	r2, r0
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	697a      	ldr	r2, [r7, #20]
 80120f2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <dir_sdi+0xe2>
 80120fc:	2302      	movs	r3, #2
 80120fe:	e010      	b.n	8012122 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	0a5b      	lsrs	r3, r3, #9
 8012108:	441a      	add	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801211a:	441a      	add	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b086      	sub	sp, #24
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801213e:	3320      	adds	r3, #32
 8012140:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00b      	beq.n	8012162 <dir_next+0x38>
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	2b04      	cmp	r3, #4
 8012150:	d102      	bne.n	8012158 <dir_next+0x2e>
 8012152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012156:	e001      	b.n	801215c <dir_next+0x32>
 8012158:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	429a      	cmp	r2, r3
 8012160:	d801      	bhi.n	8012166 <dir_next+0x3c>
 8012162:	2304      	movs	r3, #4
 8012164:	e0b2      	b.n	80122cc <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801216c:	2b00      	cmp	r3, #0
 801216e:	f040 80a0 	bne.w	80122b2 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012176:	1c5a      	adds	r2, r3, #1
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012180:	2b00      	cmp	r3, #0
 8012182:	d10b      	bne.n	801219c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	095b      	lsrs	r3, r3, #5
 8012188:	68fa      	ldr	r2, [r7, #12]
 801218a:	8912      	ldrh	r2, [r2, #8]
 801218c:	4293      	cmp	r3, r2
 801218e:	f0c0 8090 	bcc.w	80122b2 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	639a      	str	r2, [r3, #56]	@ 0x38
 8012198:	2304      	movs	r3, #4
 801219a:	e097      	b.n	80122cc <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	0a5b      	lsrs	r3, r3, #9
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	8952      	ldrh	r2, [r2, #10]
 80121a4:	3a01      	subs	r2, #1
 80121a6:	4013      	ands	r3, r2
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f040 8082 	bne.w	80122b2 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121b4:	4619      	mov	r1, r3
 80121b6:	4610      	mov	r0, r2
 80121b8:	f7ff f9ea 	bl	8011590 <get_fat>
 80121bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	d801      	bhi.n	80121c8 <dir_next+0x9e>
 80121c4:	2302      	movs	r3, #2
 80121c6:	e081      	b.n	80122cc <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d101      	bne.n	80121d4 <dir_next+0xaa>
 80121d0:	2301      	movs	r3, #1
 80121d2:	e07b      	b.n	80122cc <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6a1b      	ldr	r3, [r3, #32]
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d35f      	bcc.n	801229e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d104      	bne.n	80121ee <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80121ea:	2304      	movs	r3, #4
 80121ec:	e06e      	b.n	80122cc <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121f4:	4619      	mov	r1, r3
 80121f6:	4610      	mov	r0, r2
 80121f8:	f7ff fdcc 	bl	8011d94 <create_chain>
 80121fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d101      	bne.n	8012208 <dir_next+0xde>
 8012204:	2307      	movs	r3, #7
 8012206:	e061      	b.n	80122cc <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d101      	bne.n	8012212 <dir_next+0xe8>
 801220e:	2302      	movs	r3, #2
 8012210:	e05c      	b.n	80122cc <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012218:	d101      	bne.n	801221e <dir_next+0xf4>
 801221a:	2301      	movs	r3, #1
 801221c:	e056      	b.n	80122cc <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	79db      	ldrb	r3, [r3, #7]
 8012222:	f043 0304 	orr.w	r3, r3, #4
 8012226:	b2da      	uxtb	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7ff f8af 	bl	8011390 <sync_window>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d001      	beq.n	801223c <dir_next+0x112>
 8012238:	2301      	movs	r3, #1
 801223a:	e047      	b.n	80122cc <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	333c      	adds	r3, #60	@ 0x3c
 8012240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012244:	2100      	movs	r1, #0
 8012246:	4618      	mov	r0, r3
 8012248:	f7fe fee3 	bl	8011012 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801224c:	2300      	movs	r3, #0
 801224e:	613b      	str	r3, [r7, #16]
 8012250:	6979      	ldr	r1, [r7, #20]
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f7ff f97c 	bl	8011550 <clust2sect>
 8012258:	4602      	mov	r2, r0
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	639a      	str	r2, [r3, #56]	@ 0x38
 801225e:	e012      	b.n	8012286 <dir_next+0x15c>
						fs->wflag = 1;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2201      	movs	r2, #1
 8012264:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f7ff f892 	bl	8011390 <sync_window>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d001      	beq.n	8012276 <dir_next+0x14c>
 8012272:	2301      	movs	r3, #1
 8012274:	e02a      	b.n	80122cc <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	3301      	adds	r3, #1
 801227a:	613b      	str	r3, [r7, #16]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012280:	1c5a      	adds	r2, r3, #1
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	639a      	str	r2, [r3, #56]	@ 0x38
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	895b      	ldrh	r3, [r3, #10]
 801228a:	461a      	mov	r2, r3
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	4293      	cmp	r3, r2
 8012290:	d3e6      	bcc.n	8012260 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	1ad2      	subs	r2, r2, r3
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	697a      	ldr	r2, [r7, #20]
 80122a2:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 80122a4:	6979      	ldr	r1, [r7, #20]
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff f952 	bl	8011550 <clust2sect>
 80122ac:	4602      	mov	r2, r0
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	68ba      	ldr	r2, [r7, #8]
 80122b6:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122c4:	441a      	add	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3718      	adds	r7, #24
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b086      	sub	sp, #24
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80122e4:	2100      	movs	r1, #0
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ff fe99 	bl	801201e <dir_sdi>
 80122ec:	4603      	mov	r3, r0
 80122ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80122f0:	7dfb      	ldrb	r3, [r7, #23]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d140      	bne.n	8012378 <dir_alloc+0xa4>
		n = 0;
 80122f6:	2300      	movs	r3, #0
 80122f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122fe:	4619      	mov	r1, r3
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f7ff f889 	bl	8011418 <move_window>
 8012306:	4603      	mov	r3, r0
 8012308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801230a:	7dfb      	ldrb	r3, [r7, #23]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d132      	bne.n	8012376 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	2b04      	cmp	r3, #4
 8012316:	d108      	bne.n	801232a <dir_alloc+0x56>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	b25b      	sxtb	r3, r3
 8012320:	43db      	mvns	r3, r3
 8012322:	b2db      	uxtb	r3, r3
 8012324:	09db      	lsrs	r3, r3, #7
 8012326:	b2db      	uxtb	r3, r3
 8012328:	e00f      	b.n	801234a <dir_alloc+0x76>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	2be5      	cmp	r3, #229	@ 0xe5
 8012332:	d004      	beq.n	801233e <dir_alloc+0x6a>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d101      	bne.n	8012342 <dir_alloc+0x6e>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <dir_alloc+0x70>
 8012342:	2300      	movs	r3, #0
 8012344:	f003 0301 	and.w	r3, r3, #1
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2b00      	cmp	r3, #0
 801234c:	d007      	beq.n	801235e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	3301      	adds	r3, #1
 8012352:	613b      	str	r3, [r7, #16]
 8012354:	693a      	ldr	r2, [r7, #16]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	429a      	cmp	r2, r3
 801235a:	d102      	bne.n	8012362 <dir_alloc+0x8e>
 801235c:	e00c      	b.n	8012378 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801235e:	2300      	movs	r3, #0
 8012360:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012362:	2101      	movs	r1, #1
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7ff fee0 	bl	801212a <dir_next>
 801236a:	4603      	mov	r3, r0
 801236c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801236e:	7dfb      	ldrb	r3, [r7, #23]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d0c2      	beq.n	80122fa <dir_alloc+0x26>
 8012374:	e000      	b.n	8012378 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8012376:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012378:	7dfb      	ldrb	r3, [r7, #23]
 801237a:	2b04      	cmp	r3, #4
 801237c:	d101      	bne.n	8012382 <dir_alloc+0xae>
 801237e:	2307      	movs	r3, #7
 8012380:	75fb      	strb	r3, [r7, #23]
	return res;
 8012382:	7dfb      	ldrb	r3, [r7, #23]
}
 8012384:	4618      	mov	r0, r3
 8012386:	3718      	adds	r7, #24
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	331a      	adds	r3, #26
 801239a:	4618      	mov	r0, r3
 801239c:	f7fe fc32 	bl	8010c04 <ld_word>
 80123a0:	4603      	mov	r3, r0
 80123a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b03      	cmp	r3, #3
 80123aa:	d109      	bne.n	80123c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	3314      	adds	r3, #20
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe fc27 	bl	8010c04 <ld_word>
 80123b6:	4603      	mov	r3, r0
 80123b8:	041b      	lsls	r3, r3, #16
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	4313      	orrs	r3, r2
 80123be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80123c0:	68fb      	ldr	r3, [r7, #12]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b084      	sub	sp, #16
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	60f8      	str	r0, [r7, #12]
 80123d2:	60b9      	str	r1, [r7, #8]
 80123d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	331a      	adds	r3, #26
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	b292      	uxth	r2, r2
 80123de:	4611      	mov	r1, r2
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fe fd26 	bl	8010e32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d109      	bne.n	8012402 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	f103 0214 	add.w	r2, r3, #20
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	0c1b      	lsrs	r3, r3, #16
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	4619      	mov	r1, r3
 80123fc:	4610      	mov	r0, r2
 80123fe:	f7fe fd18 	bl	8010e32 <st_word>
	}
}
 8012402:	bf00      	nop
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
	...

0801240c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b087      	sub	sp, #28
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	331a      	adds	r3, #26
 801241a:	4618      	mov	r0, r3
 801241c:	f7fe fbf2 	bl	8010c04 <ld_word>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d001      	beq.n	801242a <cmp_lfn+0x1e>
 8012426:	2300      	movs	r3, #0
 8012428:	e059      	b.n	80124de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012432:	1e5a      	subs	r2, r3, #1
 8012434:	4613      	mov	r3, r2
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	4413      	add	r3, r2
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4413      	add	r3, r2
 801243e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012440:	2301      	movs	r3, #1
 8012442:	81fb      	strh	r3, [r7, #14]
 8012444:	2300      	movs	r3, #0
 8012446:	613b      	str	r3, [r7, #16]
 8012448:	e033      	b.n	80124b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801244a:	4a27      	ldr	r2, [pc, #156]	@ (80124e8 <cmp_lfn+0xdc>)
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	4413      	add	r3, r2
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	461a      	mov	r2, r3
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	4413      	add	r3, r2
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fbd3 	bl	8010c04 <ld_word>
 801245e:	4603      	mov	r3, r0
 8012460:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012462:	89fb      	ldrh	r3, [r7, #14]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d01a      	beq.n	801249e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	2bfe      	cmp	r3, #254	@ 0xfe
 801246c:	d812      	bhi.n	8012494 <cmp_lfn+0x88>
 801246e:	89bb      	ldrh	r3, [r7, #12]
 8012470:	4618      	mov	r0, r3
 8012472:	f003 fe0d 	bl	8016090 <ff_wtoupper>
 8012476:	4603      	mov	r3, r0
 8012478:	461c      	mov	r4, r3
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	1c5a      	adds	r2, r3, #1
 801247e:	617a      	str	r2, [r7, #20]
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	4413      	add	r3, r2
 8012486:	881b      	ldrh	r3, [r3, #0]
 8012488:	4618      	mov	r0, r3
 801248a:	f003 fe01 	bl	8016090 <ff_wtoupper>
 801248e:	4603      	mov	r3, r0
 8012490:	429c      	cmp	r4, r3
 8012492:	d001      	beq.n	8012498 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012494:	2300      	movs	r3, #0
 8012496:	e022      	b.n	80124de <cmp_lfn+0xd2>
			}
			wc = uc;
 8012498:	89bb      	ldrh	r3, [r7, #12]
 801249a:	81fb      	strh	r3, [r7, #14]
 801249c:	e006      	b.n	80124ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801249e:	89bb      	ldrh	r3, [r7, #12]
 80124a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124a4:	4293      	cmp	r3, r2
 80124a6:	d001      	beq.n	80124ac <cmp_lfn+0xa0>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e018      	b.n	80124de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	3301      	adds	r3, #1
 80124b0:	613b      	str	r3, [r7, #16]
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	2b0c      	cmp	r3, #12
 80124b6:	d9c8      	bls.n	801244a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d00b      	beq.n	80124dc <cmp_lfn+0xd0>
 80124c4:	89fb      	ldrh	r3, [r7, #14]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d008      	beq.n	80124dc <cmp_lfn+0xd0>
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	005b      	lsls	r3, r3, #1
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	4413      	add	r3, r2
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <cmp_lfn+0xd0>
 80124d8:	2300      	movs	r3, #0
 80124da:	e000      	b.n	80124de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80124dc:	2301      	movs	r3, #1
}
 80124de:	4618      	mov	r0, r3
 80124e0:	371c      	adds	r7, #28
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd90      	pop	{r4, r7, pc}
 80124e6:	bf00      	nop
 80124e8:	0801eb34 	.word	0x0801eb34

080124ec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	331a      	adds	r3, #26
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe fb82 	bl	8010c04 <ld_word>
 8012500:	4603      	mov	r3, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d001      	beq.n	801250a <pick_lfn+0x1e>
 8012506:	2300      	movs	r3, #0
 8012508:	e04d      	b.n	80125a6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012512:	1e5a      	subs	r2, r3, #1
 8012514:	4613      	mov	r3, r2
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	4413      	add	r3, r2
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	4413      	add	r3, r2
 801251e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012520:	2301      	movs	r3, #1
 8012522:	81fb      	strh	r3, [r7, #14]
 8012524:	2300      	movs	r3, #0
 8012526:	613b      	str	r3, [r7, #16]
 8012528:	e028      	b.n	801257c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801252a:	4a21      	ldr	r2, [pc, #132]	@ (80125b0 <pick_lfn+0xc4>)
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	4413      	add	r3, r2
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	4413      	add	r3, r2
 8012538:	4618      	mov	r0, r3
 801253a:	f7fe fb63 	bl	8010c04 <ld_word>
 801253e:	4603      	mov	r3, r0
 8012540:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012542:	89fb      	ldrh	r3, [r7, #14]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00f      	beq.n	8012568 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2bfe      	cmp	r3, #254	@ 0xfe
 801254c:	d901      	bls.n	8012552 <pick_lfn+0x66>
 801254e:	2300      	movs	r3, #0
 8012550:	e029      	b.n	80125a6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012552:	89bb      	ldrh	r3, [r7, #12]
 8012554:	81fb      	strh	r3, [r7, #14]
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	1c5a      	adds	r2, r3, #1
 801255a:	617a      	str	r2, [r7, #20]
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	4413      	add	r3, r2
 8012562:	89fa      	ldrh	r2, [r7, #14]
 8012564:	801a      	strh	r2, [r3, #0]
 8012566:	e006      	b.n	8012576 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012568:	89bb      	ldrh	r3, [r7, #12]
 801256a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801256e:	4293      	cmp	r3, r2
 8012570:	d001      	beq.n	8012576 <pick_lfn+0x8a>
 8012572:	2300      	movs	r3, #0
 8012574:	e017      	b.n	80125a6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	3301      	adds	r3, #1
 801257a:	613b      	str	r3, [r7, #16]
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2b0c      	cmp	r3, #12
 8012580:	d9d3      	bls.n	801252a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00a      	beq.n	80125a4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2bfe      	cmp	r3, #254	@ 0xfe
 8012592:	d901      	bls.n	8012598 <pick_lfn+0xac>
 8012594:	2300      	movs	r3, #0
 8012596:	e006      	b.n	80125a6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	4413      	add	r3, r2
 80125a0:	2200      	movs	r2, #0
 80125a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80125a4:	2301      	movs	r3, #1
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3718      	adds	r7, #24
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	0801eb34 	.word	0x0801eb34

080125b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b088      	sub	sp, #32
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	4611      	mov	r1, r2
 80125c0:	461a      	mov	r2, r3
 80125c2:	460b      	mov	r3, r1
 80125c4:	71fb      	strb	r3, [r7, #7]
 80125c6:	4613      	mov	r3, r2
 80125c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	330d      	adds	r3, #13
 80125ce:	79ba      	ldrb	r2, [r7, #6]
 80125d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	330b      	adds	r3, #11
 80125d6:	220f      	movs	r2, #15
 80125d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	330c      	adds	r3, #12
 80125de:	2200      	movs	r2, #0
 80125e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	331a      	adds	r3, #26
 80125e6:	2100      	movs	r1, #0
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fe fc22 	bl	8010e32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80125ee:	79fb      	ldrb	r3, [r7, #7]
 80125f0:	1e5a      	subs	r2, r3, #1
 80125f2:	4613      	mov	r3, r2
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	4413      	add	r3, r2
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	4413      	add	r3, r2
 80125fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	82fb      	strh	r3, [r7, #22]
 8012602:	2300      	movs	r3, #0
 8012604:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012606:	8afb      	ldrh	r3, [r7, #22]
 8012608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801260c:	4293      	cmp	r3, r2
 801260e:	d007      	beq.n	8012620 <put_lfn+0x6c>
 8012610:	69fb      	ldr	r3, [r7, #28]
 8012612:	1c5a      	adds	r2, r3, #1
 8012614:	61fa      	str	r2, [r7, #28]
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	4413      	add	r3, r2
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012620:	4a17      	ldr	r2, [pc, #92]	@ (8012680 <put_lfn+0xcc>)
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	4413      	add	r3, r2
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	461a      	mov	r2, r3
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	4413      	add	r3, r2
 801262e:	8afa      	ldrh	r2, [r7, #22]
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7fe fbfd 	bl	8010e32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012638:	8afb      	ldrh	r3, [r7, #22]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d102      	bne.n	8012644 <put_lfn+0x90>
 801263e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012642:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	3301      	adds	r3, #1
 8012648:	61bb      	str	r3, [r7, #24]
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	2b0c      	cmp	r3, #12
 801264e:	d9da      	bls.n	8012606 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012650:	8afb      	ldrh	r3, [r7, #22]
 8012652:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012656:	4293      	cmp	r3, r2
 8012658:	d006      	beq.n	8012668 <put_lfn+0xb4>
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	005b      	lsls	r3, r3, #1
 801265e:	68fa      	ldr	r2, [r7, #12]
 8012660:	4413      	add	r3, r2
 8012662:	881b      	ldrh	r3, [r3, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d103      	bne.n	8012670 <put_lfn+0xbc>
 8012668:	79fb      	ldrb	r3, [r7, #7]
 801266a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801266e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	79fa      	ldrb	r2, [r7, #7]
 8012674:	701a      	strb	r2, [r3, #0]
}
 8012676:	bf00      	nop
 8012678:	3720      	adds	r7, #32
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	0801eb34 	.word	0x0801eb34

08012684 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b08c      	sub	sp, #48	@ 0x30
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012692:	220b      	movs	r2, #11
 8012694:	68b9      	ldr	r1, [r7, #8]
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f7fe fc9a 	bl	8010fd0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	2b05      	cmp	r3, #5
 80126a0:	d929      	bls.n	80126f6 <gen_numname+0x72>
		sr = seq;
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80126a6:	e020      	b.n	80126ea <gen_numname+0x66>
			wc = *lfn++;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	1c9a      	adds	r2, r3, #2
 80126ac:	607a      	str	r2, [r7, #4]
 80126ae:	881b      	ldrh	r3, [r3, #0]
 80126b0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80126b2:	2300      	movs	r3, #0
 80126b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126b6:	e015      	b.n	80126e4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	005a      	lsls	r2, r3, #1
 80126bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126be:	f003 0301 	and.w	r3, r3, #1
 80126c2:	4413      	add	r3, r2
 80126c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80126c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126c8:	085b      	lsrs	r3, r3, #1
 80126ca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d003      	beq.n	80126de <gen_numname+0x5a>
 80126d6:	69fa      	ldr	r2, [r7, #28]
 80126d8:	4b30      	ldr	r3, [pc, #192]	@ (801279c <gen_numname+0x118>)
 80126da:	4053      	eors	r3, r2
 80126dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	3301      	adds	r3, #1
 80126e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e6:	2b0f      	cmp	r3, #15
 80126e8:	d9e6      	bls.n	80126b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1da      	bne.n	80126a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80126f6:	2307      	movs	r3, #7
 80126f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	f003 030f 	and.w	r3, r3, #15
 8012702:	b2db      	uxtb	r3, r3
 8012704:	3330      	adds	r3, #48	@ 0x30
 8012706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801270a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801270e:	2b39      	cmp	r3, #57	@ 0x39
 8012710:	d904      	bls.n	801271c <gen_numname+0x98>
 8012712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012716:	3307      	adds	r3, #7
 8012718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801271e:	1e5a      	subs	r2, r3, #1
 8012720:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012722:	3330      	adds	r3, #48	@ 0x30
 8012724:	443b      	add	r3, r7
 8012726:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801272a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	091b      	lsrs	r3, r3, #4
 8012732:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1df      	bne.n	80126fa <gen_numname+0x76>
	ns[i] = '~';
 801273a:	f107 0214 	add.w	r2, r7, #20
 801273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012740:	4413      	add	r3, r2
 8012742:	227e      	movs	r2, #126	@ 0x7e
 8012744:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012746:	2300      	movs	r3, #0
 8012748:	627b      	str	r3, [r7, #36]	@ 0x24
 801274a:	e002      	b.n	8012752 <gen_numname+0xce>
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	3301      	adds	r3, #1
 8012750:	627b      	str	r3, [r7, #36]	@ 0x24
 8012752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012756:	429a      	cmp	r2, r3
 8012758:	d205      	bcs.n	8012766 <gen_numname+0xe2>
 801275a:	68fa      	ldr	r2, [r7, #12]
 801275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801275e:	4413      	add	r3, r2
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2b20      	cmp	r3, #32
 8012764:	d1f2      	bne.n	801274c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012768:	2b07      	cmp	r3, #7
 801276a:	d807      	bhi.n	801277c <gen_numname+0xf8>
 801276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801276e:	1c5a      	adds	r2, r3, #1
 8012770:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012772:	3330      	adds	r3, #48	@ 0x30
 8012774:	443b      	add	r3, r7
 8012776:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801277a:	e000      	b.n	801277e <gen_numname+0xfa>
 801277c:	2120      	movs	r1, #32
 801277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012780:	1c5a      	adds	r2, r3, #1
 8012782:	627a      	str	r2, [r7, #36]	@ 0x24
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	4413      	add	r3, r2
 8012788:	460a      	mov	r2, r1
 801278a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801278e:	2b07      	cmp	r3, #7
 8012790:	d9e9      	bls.n	8012766 <gen_numname+0xe2>
}
 8012792:	bf00      	nop
 8012794:	bf00      	nop
 8012796:	3730      	adds	r7, #48	@ 0x30
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	00011021 	.word	0x00011021

080127a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b085      	sub	sp, #20
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80127a8:	2300      	movs	r3, #0
 80127aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80127ac:	230b      	movs	r3, #11
 80127ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	0852      	lsrs	r2, r2, #1
 80127b6:	01db      	lsls	r3, r3, #7
 80127b8:	4313      	orrs	r3, r2
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	1c59      	adds	r1, r3, #1
 80127c0:	6079      	str	r1, [r7, #4]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	4413      	add	r3, r2
 80127c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	3b01      	subs	r3, #1
 80127cc:	60bb      	str	r3, [r7, #8]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d1ed      	bne.n	80127b0 <sum_sfn+0x10>
	return sum;
 80127d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3714      	adds	r7, #20
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr

080127e2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80127e2:	b480      	push	{r7}
 80127e4:	b087      	sub	sp, #28
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	3301      	adds	r3, #1
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	3301      	adds	r3, #1
 80127f2:	015b      	lsls	r3, r3, #5
 80127f4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80127f6:	2300      	movs	r3, #0
 80127f8:	827b      	strh	r3, [r7, #18]
 80127fa:	2300      	movs	r3, #0
 80127fc:	617b      	str	r3, [r7, #20]
 80127fe:	e015      	b.n	801282c <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2b02      	cmp	r3, #2
 8012804:	d103      	bne.n	801280e <xdir_sum+0x2c>
			i++;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	3301      	adds	r3, #1
 801280a:	617b      	str	r3, [r7, #20]
 801280c:	e00b      	b.n	8012826 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 801280e:	8a7b      	ldrh	r3, [r7, #18]
 8012810:	b29a      	uxth	r2, r3
 8012812:	0852      	lsrs	r2, r2, #1
 8012814:	03db      	lsls	r3, r3, #15
 8012816:	4313      	orrs	r3, r2
 8012818:	b29b      	uxth	r3, r3
 801281a:	6879      	ldr	r1, [r7, #4]
 801281c:	697a      	ldr	r2, [r7, #20]
 801281e:	440a      	add	r2, r1
 8012820:	7812      	ldrb	r2, [r2, #0]
 8012822:	4413      	add	r3, r2
 8012824:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	3301      	adds	r3, #1
 801282a:	617b      	str	r3, [r7, #20]
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	429a      	cmp	r2, r3
 8012832:	d3e5      	bcc.n	8012800 <xdir_sum+0x1e>
		}
	}
	return sum;
 8012834:	8a7b      	ldrh	r3, [r7, #18]
}
 8012836:	4618      	mov	r0, r3
 8012838:	371c      	adds	r7, #28
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 801284e:	e01b      	b.n	8012888 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8012850:	89bb      	ldrh	r3, [r7, #12]
 8012852:	4618      	mov	r0, r3
 8012854:	f003 fc1c 	bl	8016090 <ff_wtoupper>
 8012858:	4603      	mov	r3, r0
 801285a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801285c:	89fb      	ldrh	r3, [r7, #14]
 801285e:	b29a      	uxth	r2, r3
 8012860:	0852      	lsrs	r2, r2, #1
 8012862:	03db      	lsls	r3, r3, #15
 8012864:	4313      	orrs	r3, r2
 8012866:	b29a      	uxth	r2, r3
 8012868:	89bb      	ldrh	r3, [r7, #12]
 801286a:	b2db      	uxtb	r3, r3
 801286c:	b29b      	uxth	r3, r3
 801286e:	4413      	add	r3, r2
 8012870:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8012872:	89fb      	ldrh	r3, [r7, #14]
 8012874:	b29a      	uxth	r2, r3
 8012876:	0852      	lsrs	r2, r2, #1
 8012878:	03db      	lsls	r3, r3, #15
 801287a:	4313      	orrs	r3, r2
 801287c:	b29a      	uxth	r2, r3
 801287e:	89bb      	ldrh	r3, [r7, #12]
 8012880:	0a1b      	lsrs	r3, r3, #8
 8012882:	b29b      	uxth	r3, r3
 8012884:	4413      	add	r3, r2
 8012886:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	1c9a      	adds	r2, r3, #2
 801288c:	607a      	str	r2, [r7, #4]
 801288e:	881b      	ldrh	r3, [r3, #0]
 8012890:	81bb      	strh	r3, [r7, #12]
 8012892:	89bb      	ldrh	r3, [r7, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1db      	bne.n	8012850 <xname_sum+0xe>
	}
	return sum;
 8012898:	89fb      	ldrh	r3, [r7, #14]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 80128a2:	b480      	push	{r7}
 80128a4:	b083      	sub	sp, #12
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	4603      	mov	r3, r0
 80128aa:	6039      	str	r1, [r7, #0]
 80128ac:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	ea4f 0273 	mov.w	r2, r3, ror #1
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	4413      	add	r3, r2
 80128b8:	603b      	str	r3, [r7, #0]
	return sum;
 80128ba:	683b      	ldr	r3, [r7, #0]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b087      	sub	sp, #28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128e0:	4619      	mov	r1, r3
 80128e2:	4610      	mov	r0, r2
 80128e4:	f7fe fd98 	bl	8011418 <move_window>
 80128e8:	4603      	mov	r3, r0
 80128ea:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80128ec:	7bfb      	ldrb	r3, [r7, #15]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <load_xdir+0x2e>
 80128f2:	7bfb      	ldrb	r3, [r7, #15]
 80128f4:	e09f      	b.n	8012a36 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	2b85      	cmp	r3, #133	@ 0x85
 80128fe:	d001      	beq.n	8012904 <load_xdir+0x3c>
 8012900:	2302      	movs	r3, #2
 8012902:	e098      	b.n	8012a36 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012908:	2220      	movs	r2, #32
 801290a:	4619      	mov	r1, r3
 801290c:	6938      	ldr	r0, [r7, #16]
 801290e:	f7fe fb5f 	bl	8010fd0 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	3301      	adds	r3, #1
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	3301      	adds	r3, #1
 801291a:	015b      	lsls	r3, r3, #5
 801291c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	2b5f      	cmp	r3, #95	@ 0x5f
 8012922:	d903      	bls.n	801292c <load_xdir+0x64>
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 801292a:	d901      	bls.n	8012930 <load_xdir+0x68>
 801292c:	2302      	movs	r3, #2
 801292e:	e082      	b.n	8012a36 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8012930:	2100      	movs	r1, #0
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7ff fbf9 	bl	801212a <dir_next>
 8012938:	4603      	mov	r3, r0
 801293a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801293c:	7bfb      	ldrb	r3, [r7, #15]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d001      	beq.n	8012946 <load_xdir+0x7e>
 8012942:	7bfb      	ldrb	r3, [r7, #15]
 8012944:	e077      	b.n	8012a36 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801294e:	4619      	mov	r1, r3
 8012950:	4610      	mov	r0, r2
 8012952:	f7fe fd61 	bl	8011418 <move_window>
 8012956:	4603      	mov	r3, r0
 8012958:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801295a:	7bfb      	ldrb	r3, [r7, #15]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <load_xdir+0x9c>
 8012960:	7bfb      	ldrb	r3, [r7, #15]
 8012962:	e068      	b.n	8012a36 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	2bc0      	cmp	r3, #192	@ 0xc0
 801296c:	d001      	beq.n	8012972 <load_xdir+0xaa>
 801296e:	2302      	movs	r3, #2
 8012970:	e061      	b.n	8012a36 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	f103 0020 	add.w	r0, r3, #32
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801297c:	2220      	movs	r2, #32
 801297e:	4619      	mov	r1, r3
 8012980:	f7fe fb26 	bl	8010fd0 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	3323      	adds	r3, #35	@ 0x23
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	332c      	adds	r3, #44	@ 0x2c
 801298c:	4a2c      	ldr	r2, [pc, #176]	@ (8012a40 <load_xdir+0x178>)
 801298e:	fba2 2303 	umull	r2, r3, r2, r3
 8012992:	08db      	lsrs	r3, r3, #3
 8012994:	015b      	lsls	r3, r3, #5
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	429a      	cmp	r2, r3
 801299a:	d201      	bcs.n	80129a0 <load_xdir+0xd8>
 801299c:	2302      	movs	r3, #2
 801299e:	e04a      	b.n	8012a36 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80129a0:	2340      	movs	r3, #64	@ 0x40
 80129a2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80129a4:	2100      	movs	r1, #0
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ff fbbf 	bl	801212a <dir_next>
 80129ac:	4603      	mov	r3, r0
 80129ae:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80129b0:	7bfb      	ldrb	r3, [r7, #15]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <load_xdir+0xf2>
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	e03d      	b.n	8012a36 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129c2:	4619      	mov	r1, r3
 80129c4:	4610      	mov	r0, r2
 80129c6:	f7fe fd27 	bl	8011418 <move_window>
 80129ca:	4603      	mov	r3, r0
 80129cc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <load_xdir+0x110>
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	e02e      	b.n	8012a36 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2bc1      	cmp	r3, #193	@ 0xc1
 80129e0:	d001      	beq.n	80129e6 <load_xdir+0x11e>
 80129e2:	2302      	movs	r3, #2
 80129e4:	e027      	b.n	8012a36 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80129ec:	d208      	bcs.n	8012a00 <load_xdir+0x138>
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	18d0      	adds	r0, r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129f8:	2220      	movs	r2, #32
 80129fa:	4619      	mov	r1, r3
 80129fc:	f7fe fae8 	bl	8010fd0 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	3320      	adds	r3, #32
 8012a04:	617b      	str	r3, [r7, #20]
 8012a06:	697a      	ldr	r2, [r7, #20]
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d3ca      	bcc.n	80129a4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8012a14:	d80e      	bhi.n	8012a34 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8012a16:	6938      	ldr	r0, [r7, #16]
 8012a18:	f7ff fee3 	bl	80127e2 <xdir_sum>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	461c      	mov	r4, r3
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	3302      	adds	r3, #2
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe f8ed 	bl	8010c04 <ld_word>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	429c      	cmp	r4, r3
 8012a2e:	d001      	beq.n	8012a34 <load_xdir+0x16c>
 8012a30:	2302      	movs	r3, #2
 8012a32:	e000      	b.n	8012a36 <load_xdir+0x16e>
	}
	return FR_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	371c      	adds	r7, #28
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	88888889 	.word	0x88888889

08012a44 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8012a44:	b5b0      	push	{r4, r5, r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8012a4e:	6839      	ldr	r1, [r7, #0]
 8012a50:	6808      	ldr	r0, [r1, #0]
 8012a52:	6879      	ldr	r1, [r7, #4]
 8012a54:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8012a56:	6839      	ldr	r1, [r7, #0]
 8012a58:	6a08      	ldr	r0, [r1, #32]
 8012a5a:	6879      	ldr	r1, [r7, #4]
 8012a5c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8012a5e:	6839      	ldr	r1, [r7, #0]
 8012a60:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8012a62:	b2c8      	uxtb	r0, r1
 8012a64:	6879      	ldr	r1, [r7, #4]
 8012a66:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8012a68:	6839      	ldr	r1, [r7, #0]
 8012a6a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	460c      	mov	r4, r1
 8012a70:	4605      	mov	r5, r0
 8012a72:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8012a76:	2300      	movs	r3, #0
 8012a78:	6879      	ldr	r1, [r7, #4]
 8012a7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7ff fac6 	bl	801201e <dir_sdi>
 8012a92:	4603      	mov	r3, r0
 8012a94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012a96:	7bfb      	ldrb	r3, [r7, #15]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d104      	bne.n	8012aa6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff ff13 	bl	80128c8 <load_xdir>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8012aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bdb0      	pop	{r4, r5, r7, pc}

08012ab0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8012ab0:	b590      	push	{r4, r7, lr}
 8012ab2:	b087      	sub	sp, #28
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	691b      	ldr	r3, [r3, #16]
 8012abe:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	1c9c      	adds	r4, r3, #2
 8012ac4:	68f8      	ldr	r0, [r7, #12]
 8012ac6:	f7ff fe8c 	bl	80127e2 <xdir_sum>
 8012aca:	4603      	mov	r3, r0
 8012acc:	4619      	mov	r1, r3
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7fe f9af 	bl	8010e32 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	3301      	adds	r3, #1
 8012adc:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff fa9a 	bl	801201e <dir_sdi>
 8012aea:	4603      	mov	r3, r0
 8012aec:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8012aee:	e026      	b.n	8012b3e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af8:	4619      	mov	r1, r3
 8012afa:	4610      	mov	r0, r2
 8012afc:	f7fe fc8c 	bl	8011418 <move_window>
 8012b00:	4603      	mov	r3, r0
 8012b02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b04:	7dfb      	ldrb	r3, [r7, #23]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d11d      	bne.n	8012b46 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b0e:	2220      	movs	r2, #32
 8012b10:	68f9      	ldr	r1, [r7, #12]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fe fa5c 	bl	8010fd0 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	3b01      	subs	r3, #1
 8012b24:	613b      	str	r3, [r7, #16]
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d00e      	beq.n	8012b4a <store_xdir+0x9a>
		dirb += SZDIRE;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	3320      	adds	r3, #32
 8012b30:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8012b32:	2100      	movs	r1, #0
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f7ff faf8 	bl	801212a <dir_next>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8012b3e:	7dfb      	ldrb	r3, [r7, #23]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d0d5      	beq.n	8012af0 <store_xdir+0x40>
 8012b44:	e002      	b.n	8012b4c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8012b46:	bf00      	nop
 8012b48:	e000      	b.n	8012b4c <store_xdir+0x9c>
		if (--nent == 0) break;
 8012b4a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8012b4c:	7dfb      	ldrb	r3, [r7, #23]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <store_xdir+0xa8>
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d101      	bne.n	8012b5c <store_xdir+0xac>
 8012b58:	7dfb      	ldrb	r3, [r7, #23]
 8012b5a:	e000      	b.n	8012b5e <store_xdir+0xae>
 8012b5c:	2302      	movs	r3, #2
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	371c      	adds	r7, #28
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd90      	pop	{r4, r7, pc}

08012b66 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8012b66:	b590      	push	{r4, r7, lr}
 8012b68:	b085      	sub	sp, #20
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8012b70:	2240      	movs	r2, #64	@ 0x40
 8012b72:	2100      	movs	r1, #0
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7fe fa4c 	bl	8011012 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2285      	movs	r2, #133	@ 0x85
 8012b7e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3320      	adds	r3, #32
 8012b84:	22c0      	movs	r2, #192	@ 0xc0
 8012b86:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	72bb      	strb	r3, [r7, #10]
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	72fb      	strb	r3, [r7, #11]
 8012b90:	2301      	movs	r3, #1
 8012b92:	813b      	strh	r3, [r7, #8]
 8012b94:	2340      	movs	r3, #64	@ 0x40
 8012b96:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	60fa      	str	r2, [r7, #12]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	22c1      	movs	r2, #193	@ 0xc1
 8012ba4:	701a      	strb	r2, [r3, #0]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	1c5a      	adds	r2, r3, #1
 8012baa:	60fa      	str	r2, [r7, #12]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	4413      	add	r3, r2
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8012bb4:	893b      	ldrh	r3, [r7, #8]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00b      	beq.n	8012bd2 <create_xdir+0x6c>
 8012bba:	7abb      	ldrb	r3, [r7, #10]
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	683a      	ldr	r2, [r7, #0]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	813b      	strh	r3, [r7, #8]
 8012bc6:	893b      	ldrh	r3, [r7, #8]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d002      	beq.n	8012bd2 <create_xdir+0x6c>
 8012bcc:	7abb      	ldrb	r3, [r7, #10]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	893a      	ldrh	r2, [r7, #8]
 8012bda:	4611      	mov	r1, r2
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7fe f928 	bl	8010e32 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3302      	adds	r3, #2
 8012be6:	60fb      	str	r3, [r7, #12]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	f003 031f 	and.w	r3, r3, #31
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1e0      	bne.n	8012bb4 <create_xdir+0x4e>
		nb++;
 8012bf2:	7afb      	ldrb	r3, [r7, #11]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8012bf8:	7abb      	ldrb	r3, [r7, #10]
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	683a      	ldr	r2, [r7, #0]
 8012bfe:	4413      	add	r3, r2
 8012c00:	881b      	ldrh	r3, [r3, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d1c8      	bne.n	8012b98 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	3323      	adds	r3, #35	@ 0x23
 8012c0a:	7aba      	ldrb	r2, [r7, #10]
 8012c0c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	3301      	adds	r3, #1
 8012c12:	7afa      	ldrb	r2, [r7, #11]
 8012c14:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8012c1c:	6838      	ldr	r0, [r7, #0]
 8012c1e:	f7ff fe10 	bl	8012842 <xname_sum>
 8012c22:	4603      	mov	r3, r0
 8012c24:	4619      	mov	r1, r3
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7fe f903 	bl	8010e32 <st_word>
}
 8012c2c:	bf00      	nop
 8012c2e:	3714      	adds	r7, #20
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd90      	pop	{r4, r7, pc}

08012c34 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b086      	sub	sp, #24
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012c3e:	2304      	movs	r3, #4
 8012c40:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012c48:	23ff      	movs	r3, #255	@ 0xff
 8012c4a:	757b      	strb	r3, [r7, #21]
 8012c4c:	23ff      	movs	r3, #255	@ 0xff
 8012c4e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012c50:	e09f      	b.n	8012d92 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c56:	4619      	mov	r1, r3
 8012c58:	6938      	ldr	r0, [r7, #16]
 8012c5a:	f7fe fbdd 	bl	8011418 <move_window>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f040 809a 	bne.w	8012d9e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012c72:	7dbb      	ldrb	r3, [r7, #22]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d102      	bne.n	8012c7e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012c78:	2304      	movs	r3, #4
 8012c7a:	75fb      	strb	r3, [r7, #23]
 8012c7c:	e096      	b.n	8012dac <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	d118      	bne.n	8012cb8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8012c86:	7dbb      	ldrb	r3, [r7, #22]
 8012c88:	2b85      	cmp	r3, #133	@ 0x85
 8012c8a:	d179      	bne.n	8012d80 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff fe17 	bl	80128c8 <load_xdir>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8012c9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d17e      	bne.n	8012da2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012cb0:	b2da      	uxtb	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	719a      	strb	r2, [r3, #6]
					}
					break;
 8012cb6:	e074      	b.n	8012da2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cbc:	330b      	adds	r3, #11
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012cc4:	73fb      	strb	r3, [r7, #15]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	7bfa      	ldrb	r2, [r7, #15]
 8012cca:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012ccc:	7dbb      	ldrb	r3, [r7, #22]
 8012cce:	2be5      	cmp	r3, #229	@ 0xe5
 8012cd0:	d00e      	beq.n	8012cf0 <dir_read+0xbc>
 8012cd2:	7dbb      	ldrb	r3, [r7, #22]
 8012cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cd6:	d00b      	beq.n	8012cf0 <dir_read+0xbc>
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
 8012cda:	f023 0320 	bic.w	r3, r3, #32
 8012cde:	2b08      	cmp	r3, #8
 8012ce0:	bf0c      	ite	eq
 8012ce2:	2301      	moveq	r3, #1
 8012ce4:	2300      	movne	r3, #0
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	461a      	mov	r2, r3
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d002      	beq.n	8012cf6 <dir_read+0xc2>
				ord = 0xFF;
 8012cf0:	23ff      	movs	r3, #255	@ 0xff
 8012cf2:	757b      	strb	r3, [r7, #21]
 8012cf4:	e044      	b.n	8012d80 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012cf6:	7bfb      	ldrb	r3, [r7, #15]
 8012cf8:	2b0f      	cmp	r3, #15
 8012cfa:	d12f      	bne.n	8012d5c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012cfc:	7dbb      	ldrb	r3, [r7, #22]
 8012cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d00d      	beq.n	8012d22 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d0a:	7b5b      	ldrb	r3, [r3, #13]
 8012d0c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012d0e:	7dbb      	ldrb	r3, [r7, #22]
 8012d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d14:	75bb      	strb	r3, [r7, #22]
 8012d16:	7dbb      	ldrb	r3, [r7, #22]
 8012d18:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012d22:	7dba      	ldrb	r2, [r7, #22]
 8012d24:	7d7b      	ldrb	r3, [r7, #21]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d115      	bne.n	8012d56 <dir_read+0x122>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d2e:	330d      	adds	r3, #13
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	7d3a      	ldrb	r2, [r7, #20]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d10e      	bne.n	8012d56 <dir_read+0x122>
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	68da      	ldr	r2, [r3, #12]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d40:	4619      	mov	r1, r3
 8012d42:	4610      	mov	r0, r2
 8012d44:	f7ff fbd2 	bl	80124ec <pick_lfn>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d003      	beq.n	8012d56 <dir_read+0x122>
 8012d4e:	7d7b      	ldrb	r3, [r7, #21]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	e000      	b.n	8012d58 <dir_read+0x124>
 8012d56:	23ff      	movs	r3, #255	@ 0xff
 8012d58:	757b      	strb	r3, [r7, #21]
 8012d5a:	e011      	b.n	8012d80 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012d5c:	7d7b      	ldrb	r3, [r7, #21]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d109      	bne.n	8012d76 <dir_read+0x142>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff fd1a 	bl	80127a0 <sum_sfn>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	7d3b      	ldrb	r3, [r7, #20]
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d017      	beq.n	8012da6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f04f 32ff 	mov.w	r2, #4294967295
 8012d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8012d7e:	e012      	b.n	8012da6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012d80:	2100      	movs	r1, #0
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ff f9d1 	bl	801212a <dir_next>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d10b      	bne.n	8012daa <dir_read+0x176>
	while (dp->sect) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f47f af5b 	bne.w	8012c52 <dir_read+0x1e>
 8012d9c:	e006      	b.n	8012dac <dir_read+0x178>
		if (res != FR_OK) break;
 8012d9e:	bf00      	nop
 8012da0:	e004      	b.n	8012dac <dir_read+0x178>
					break;
 8012da2:	bf00      	nop
 8012da4:	e002      	b.n	8012dac <dir_read+0x178>
					break;
 8012da6:	bf00      	nop
 8012da8:	e000      	b.n	8012dac <dir_read+0x178>
		if (res != FR_OK) break;
 8012daa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012dac:	7dfb      	ldrb	r3, [r7, #23]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d002      	beq.n	8012db8 <dir_read+0x184>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012dc2:	b590      	push	{r4, r7, lr}
 8012dc4:	b089      	sub	sp, #36	@ 0x24
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7ff f923 	bl	801201e <dir_sdi>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8012ddc:	7ffb      	ldrb	r3, [r7, #31]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <dir_find+0x24>
 8012de2:	7ffb      	ldrb	r3, [r7, #31]
 8012de4:	e113      	b.n	801300e <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b04      	cmp	r3, #4
 8012dec:	d165      	bne.n	8012eba <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7ff fd25 	bl	8012842 <xname_sum>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012dfc:	e050      	b.n	8012ea0 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	691b      	ldr	r3, [r3, #16]
 8012e02:	3324      	adds	r3, #36	@ 0x24
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fd fefd 	bl	8010c04 <ld_word>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	893b      	ldrh	r3, [r7, #8]
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d144      	bne.n	8012e9e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8012e1c:	76fb      	strb	r3, [r7, #27]
 8012e1e:	2340      	movs	r3, #64	@ 0x40
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	2300      	movs	r3, #0
 8012e24:	613b      	str	r3, [r7, #16]
 8012e26:	e029      	b.n	8012e7c <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	f003 031f 	and.w	r3, r3, #31
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d102      	bne.n	8012e38 <dir_find+0x76>
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	3302      	adds	r3, #2
 8012e36:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	691a      	ldr	r2, [r3, #16]
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	4413      	add	r3, r2
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fd fedf 	bl	8010c04 <ld_word>
 8012e46:	4603      	mov	r3, r0
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f003 f921 	bl	8016090 <ff_wtoupper>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	461c      	mov	r4, r3
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	68da      	ldr	r2, [r3, #12]
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	005b      	lsls	r3, r3, #1
 8012e5a:	4413      	add	r3, r2
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f003 f916 	bl	8016090 <ff_wtoupper>
 8012e64:	4603      	mov	r3, r0
 8012e66:	429c      	cmp	r4, r3
 8012e68:	d10c      	bne.n	8012e84 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012e6a:	7efb      	ldrb	r3, [r7, #27]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	76fb      	strb	r3, [r7, #27]
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	3302      	adds	r3, #2
 8012e74:	617b      	str	r3, [r7, #20]
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	613b      	str	r3, [r7, #16]
 8012e7c:	7efb      	ldrb	r3, [r7, #27]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d1d2      	bne.n	8012e28 <dir_find+0x66>
 8012e82:	e000      	b.n	8012e86 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8012e84:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8012e86:	7efb      	ldrb	r3, [r7, #27]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d109      	bne.n	8012ea0 <dir_find+0xde>
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	68da      	ldr	r2, [r3, #12]
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	4413      	add	r3, r2
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00b      	beq.n	8012eb4 <dir_find+0xf2>
 8012e9c:	e000      	b.n	8012ea0 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012e9e:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7ff fec6 	bl	8012c34 <dir_read>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	77fb      	strb	r3, [r7, #31]
 8012eac:	7ffb      	ldrb	r3, [r7, #31]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d0a5      	beq.n	8012dfe <dir_find+0x3c>
 8012eb2:	e000      	b.n	8012eb6 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8012eb4:	bf00      	nop
		}
		return res;
 8012eb6:	7ffb      	ldrb	r3, [r7, #31]
 8012eb8:	e0a9      	b.n	801300e <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012eba:	23ff      	movs	r3, #255	@ 0xff
 8012ebc:	773b      	strb	r3, [r7, #28]
 8012ebe:	7f3b      	ldrb	r3, [r7, #28]
 8012ec0:	777b      	strb	r3, [r7, #29]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ece:	4619      	mov	r1, r3
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f7fe faa1 	bl	8011418 <move_window>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8012eda:	7ffb      	ldrb	r3, [r7, #31]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	f040 8090 	bne.w	8013002 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012eea:	7fbb      	ldrb	r3, [r7, #30]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d102      	bne.n	8012ef6 <dir_find+0x134>
 8012ef0:	2304      	movs	r3, #4
 8012ef2:	77fb      	strb	r3, [r7, #31]
 8012ef4:	e08a      	b.n	801300c <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012efa:	330b      	adds	r3, #11
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012f02:	72fb      	strb	r3, [r7, #11]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	7afa      	ldrb	r2, [r7, #11]
 8012f08:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012f0a:	7fbb      	ldrb	r3, [r7, #30]
 8012f0c:	2be5      	cmp	r3, #229	@ 0xe5
 8012f0e:	d007      	beq.n	8012f20 <dir_find+0x15e>
 8012f10:	7afb      	ldrb	r3, [r7, #11]
 8012f12:	f003 0308 	and.w	r3, r3, #8
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d009      	beq.n	8012f2e <dir_find+0x16c>
 8012f1a:	7afb      	ldrb	r3, [r7, #11]
 8012f1c:	2b0f      	cmp	r3, #15
 8012f1e:	d006      	beq.n	8012f2e <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012f20:	23ff      	movs	r3, #255	@ 0xff
 8012f22:	777b      	strb	r3, [r7, #29]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f04f 32ff 	mov.w	r2, #4294967295
 8012f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8012f2c:	e05e      	b.n	8012fec <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012f2e:	7afb      	ldrb	r3, [r7, #11]
 8012f30:	2b0f      	cmp	r3, #15
 8012f32:	d136      	bne.n	8012fa2 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8012f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d154      	bne.n	8012fec <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012f42:	7fbb      	ldrb	r3, [r7, #30]
 8012f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00d      	beq.n	8012f68 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f50:	7b5b      	ldrb	r3, [r3, #13]
 8012f52:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012f54:	7fbb      	ldrb	r3, [r7, #30]
 8012f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012f5a:	77bb      	strb	r3, [r7, #30]
 8012f5c:	7fbb      	ldrb	r3, [r7, #30]
 8012f5e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012f68:	7fba      	ldrb	r2, [r7, #30]
 8012f6a:	7f7b      	ldrb	r3, [r7, #29]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d115      	bne.n	8012f9c <dir_find+0x1da>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f74:	330d      	adds	r3, #13
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	7f3a      	ldrb	r2, [r7, #28]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d10e      	bne.n	8012f9c <dir_find+0x1da>
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68da      	ldr	r2, [r3, #12]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f86:	4619      	mov	r1, r3
 8012f88:	4610      	mov	r0, r2
 8012f8a:	f7ff fa3f 	bl	801240c <cmp_lfn>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d003      	beq.n	8012f9c <dir_find+0x1da>
 8012f94:	7f7b      	ldrb	r3, [r7, #29]
 8012f96:	3b01      	subs	r3, #1
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	e000      	b.n	8012f9e <dir_find+0x1dc>
 8012f9c:	23ff      	movs	r3, #255	@ 0xff
 8012f9e:	777b      	strb	r3, [r7, #29]
 8012fa0:	e024      	b.n	8012fec <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012fa2:	7f7b      	ldrb	r3, [r7, #29]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d109      	bne.n	8012fbc <dir_find+0x1fa>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7ff fbf7 	bl	80127a0 <sum_sfn>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	7f3b      	ldrb	r3, [r7, #28]
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d024      	beq.n	8013006 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8012fc2:	f003 0301 	and.w	r3, r3, #1
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d10a      	bne.n	8012fe0 <dir_find+0x21e>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	3340      	adds	r3, #64	@ 0x40
 8012fd2:	220b      	movs	r2, #11
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	f7fe f837 	bl	8011048 <mem_cmp>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d014      	beq.n	801300a <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012fe0:	23ff      	movs	r3, #255	@ 0xff
 8012fe2:	777b      	strb	r3, [r7, #29]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fea:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012fec:	2100      	movs	r1, #0
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7ff f89b 	bl	801212a <dir_next>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8012ff8:	7ffb      	ldrb	r3, [r7, #31]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	f43f af65 	beq.w	8012eca <dir_find+0x108>
 8013000:	e004      	b.n	801300c <dir_find+0x24a>
		if (res != FR_OK) break;
 8013002:	bf00      	nop
 8013004:	e002      	b.n	801300c <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013006:	bf00      	nop
 8013008:	e000      	b.n	801300c <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801300a:	bf00      	nop

	return res;
 801300c:	7ffb      	ldrb	r3, [r7, #31]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3724      	adds	r7, #36	@ 0x24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd90      	pop	{r4, r7, pc}
	...

08013018 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801301c:	b0a0      	sub	sp, #128	@ 0x80
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 801302e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <dir_register+0x22>
 8013036:	2306      	movs	r3, #6
 8013038:	e18e      	b.n	8013358 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801303a:	2300      	movs	r3, #0
 801303c:	677b      	str	r3, [r7, #116]	@ 0x74
 801303e:	e002      	b.n	8013046 <dir_register+0x2e>
 8013040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013042:	3301      	adds	r3, #1
 8013044:	677b      	str	r3, [r7, #116]	@ 0x74
 8013046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	4413      	add	r3, r2
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1f4      	bne.n	8013040 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8013056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	2b04      	cmp	r3, #4
 801305c:	f040 809f 	bne.w	801319e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8013060:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013062:	330e      	adds	r3, #14
 8013064:	4aa2      	ldr	r2, [pc, #648]	@ (80132f0 <dir_register+0x2d8>)
 8013066:	fba2 2303 	umull	r2, r3, r2, r3
 801306a:	08db      	lsrs	r3, r3, #3
 801306c:	3302      	adds	r3, #2
 801306e:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8013070:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff f92e 	bl	80122d4 <dir_alloc>
 8013078:	4603      	mov	r3, r0
 801307a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 801307e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013082:	2b00      	cmp	r3, #0
 8013084:	d002      	beq.n	801308c <dir_register+0x74>
 8013086:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801308a:	e165      	b.n	8013358 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013092:	3b01      	subs	r3, #1
 8013094:	015b      	lsls	r3, r3, #5
 8013096:	1ad2      	subs	r2, r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d072      	beq.n	801318a <dir_register+0x172>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	79db      	ldrb	r3, [r3, #7]
 80130a8:	f003 0304 	and.w	r3, r3, #4
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d06c      	beq.n	801318a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80130b6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80130b8:	8949      	ldrh	r1, [r1, #10]
 80130ba:	0249      	lsls	r1, r1, #9
 80130bc:	2000      	movs	r0, #0
 80130be:	460c      	mov	r4, r1
 80130c0:	4605      	mov	r5, r0
 80130c2:	eb12 0804 	adds.w	r8, r2, r4
 80130c6:	eb43 0905 	adc.w	r9, r3, r5
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fe fd4a 	bl	8011b6c <fill_first_frag>
 80130d8:	4603      	mov	r3, r0
 80130da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80130de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <dir_register+0xd4>
 80130e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80130ea:	e135      	b.n	8013358 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130f2:	f04f 32ff 	mov.w	r2, #4294967295
 80130f6:	4619      	mov	r1, r3
 80130f8:	f7fe fd67 	bl	8011bca <fill_last_frag>
 80130fc:	4603      	mov	r3, r0
 80130fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8013102:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013106:	2b00      	cmp	r3, #0
 8013108:	d002      	beq.n	8013110 <dir_register+0xf8>
 801310a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801310e:	e123      	b.n	8013358 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	f107 0308 	add.w	r3, r7, #8
 8013116:	4611      	mov	r1, r2
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff fc93 	bl	8012a44 <load_obj_dir>
 801311e:	4603      	mov	r3, r0
 8013120:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8013124:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013128:	2b00      	cmp	r3, #0
 801312a:	d002      	beq.n	8013132 <dir_register+0x11a>
 801312c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013130:	e112      	b.n	8013358 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8013132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013140:	4608      	mov	r0, r1
 8013142:	f7fd febd 	bl	8010ec0 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8013146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013154:	4608      	mov	r0, r1
 8013156:	f7fd feb3 	bl	8010ec0 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	79da      	ldrb	r2, [r3, #7]
 801315e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	3321      	adds	r3, #33	@ 0x21
 8013164:	f042 0201 	orr.w	r2, r2, #1
 8013168:	b2d2      	uxtb	r2, r2
 801316a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 801316c:	f107 0308 	add.w	r3, r7, #8
 8013170:	4618      	mov	r0, r3
 8013172:	f7ff fc9d 	bl	8012ab0 <store_xdir>
 8013176:	4603      	mov	r3, r0
 8013178:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 801317c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013180:	2b00      	cmp	r3, #0
 8013182:	d002      	beq.n	801318a <dir_register+0x172>
 8013184:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013188:	e0e6      	b.n	8013358 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 801318a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801318c:	691a      	ldr	r2, [r3, #16]
 801318e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	4619      	mov	r1, r3
 8013194:	4610      	mov	r0, r2
 8013196:	f7ff fce6 	bl	8012b66 <create_xdir>
		return FR_OK;
 801319a:	2300      	movs	r3, #0
 801319c:	e0dc      	b.n	8013358 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80131a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80131a8:	220c      	movs	r2, #12
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fd ff10 	bl	8010fd0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80131b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80131b4:	f003 0301 	and.w	r3, r3, #1
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d033      	beq.n	8013224 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2240      	movs	r2, #64	@ 0x40
 80131c0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 80131c4:	2301      	movs	r3, #1
 80131c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80131c8:	e016      	b.n	80131f8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80131d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80131d2:	68da      	ldr	r2, [r3, #12]
 80131d4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80131d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131da:	f7ff fa53 	bl	8012684 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7ff fdef 	bl	8012dc2 <dir_find>
 80131e4:	4603      	mov	r3, r0
 80131e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 80131ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 80131f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131f4:	3301      	adds	r3, #1
 80131f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80131f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131fa:	2b63      	cmp	r3, #99	@ 0x63
 80131fc:	d9e5      	bls.n	80131ca <dir_register+0x1b2>
 80131fe:	e000      	b.n	8013202 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8013200:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013204:	2b64      	cmp	r3, #100	@ 0x64
 8013206:	d101      	bne.n	801320c <dir_register+0x1f4>
 8013208:	2307      	movs	r3, #7
 801320a:	e0a5      	b.n	8013358 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801320c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013210:	2b04      	cmp	r3, #4
 8013212:	d002      	beq.n	801321a <dir_register+0x202>
 8013214:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013218:	e09e      	b.n	8013358 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801321a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013224:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013228:	f003 0302 	and.w	r3, r3, #2
 801322c:	2b00      	cmp	r3, #0
 801322e:	d007      	beq.n	8013240 <dir_register+0x228>
 8013230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013232:	330c      	adds	r3, #12
 8013234:	4a2f      	ldr	r2, [pc, #188]	@ (80132f4 <dir_register+0x2dc>)
 8013236:	fba2 2303 	umull	r2, r3, r2, r3
 801323a:	089b      	lsrs	r3, r3, #2
 801323c:	3301      	adds	r3, #1
 801323e:	e000      	b.n	8013242 <dir_register+0x22a>
 8013240:	2301      	movs	r3, #1
 8013242:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013244:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff f844 	bl	80122d4 <dir_alloc>
 801324c:	4603      	mov	r3, r0
 801324e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013252:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013256:	2b00      	cmp	r3, #0
 8013258:	d14f      	bne.n	80132fa <dir_register+0x2e2>
 801325a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801325c:	3b01      	subs	r3, #1
 801325e:	673b      	str	r3, [r7, #112]	@ 0x70
 8013260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013262:	2b00      	cmp	r3, #0
 8013264:	d049      	beq.n	80132fa <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801326a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801326c:	015b      	lsls	r3, r3, #5
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	4619      	mov	r1, r3
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7fe fed3 	bl	801201e <dir_sdi>
 8013278:	4603      	mov	r3, r0
 801327a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 801327e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013282:	2b00      	cmp	r3, #0
 8013284:	d139      	bne.n	80132fa <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	3340      	adds	r3, #64	@ 0x40
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fa88 	bl	80127a0 <sum_sfn>
 8013290:	4603      	mov	r3, r0
 8013292:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801329a:	4619      	mov	r1, r3
 801329c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801329e:	f7fe f8bb 	bl	8011418 <move_window>
 80132a2:	4603      	mov	r3, r0
 80132a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 80132a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d123      	bne.n	80132f8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80132b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80132b2:	68d8      	ldr	r0, [r3, #12]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80132b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80132ba:	b2da      	uxtb	r2, r3
 80132bc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80132c0:	f7ff f978 	bl	80125b4 <put_lfn>
				fs->wflag = 1;
 80132c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80132c6:	2201      	movs	r2, #1
 80132c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80132ca:	2100      	movs	r1, #0
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7fe ff2c 	bl	801212a <dir_next>
 80132d2:	4603      	mov	r3, r0
 80132d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 80132d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d10c      	bne.n	80132fa <dir_register+0x2e2>
 80132e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80132e2:	3b01      	subs	r3, #1
 80132e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80132e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1d4      	bne.n	8013296 <dir_register+0x27e>
 80132ec:	e005      	b.n	80132fa <dir_register+0x2e2>
 80132ee:	bf00      	nop
 80132f0:	88888889 	.word	0x88888889
 80132f4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80132f8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80132fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d128      	bne.n	8013354 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013306:	4619      	mov	r1, r3
 8013308:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801330a:	f7fe f885 	bl	8011418 <move_window>
 801330e:	4603      	mov	r3, r0
 8013310:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8013314:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013318:	2b00      	cmp	r3, #0
 801331a:	d11b      	bne.n	8013354 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013320:	2220      	movs	r2, #32
 8013322:	2100      	movs	r1, #0
 8013324:	4618      	mov	r0, r3
 8013326:	f7fd fe74 	bl	8011012 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	3340      	adds	r3, #64	@ 0x40
 8013332:	220b      	movs	r2, #11
 8013334:	4619      	mov	r1, r3
 8013336:	f7fd fe4b 	bl	8010fd0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013344:	330c      	adds	r3, #12
 8013346:	f002 0218 	and.w	r2, r2, #24
 801334a:	b2d2      	uxtb	r2, r2
 801334c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801334e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013350:	2201      	movs	r2, #1
 8013352:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013354:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8013358:	4618      	mov	r0, r3
 801335a:	3780      	adds	r7, #128	@ 0x80
 801335c:	46bd      	mov	sp, r7
 801335e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013362:	bf00      	nop

08013364 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	@ 0x28
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	613b      	str	r3, [r7, #16]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	60fb      	str	r3, [r7, #12]
 801337c:	2300      	movs	r3, #0
 801337e:	617b      	str	r3, [r7, #20]
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	1c5a      	adds	r2, r3, #1
 8013388:	61ba      	str	r2, [r7, #24]
 801338a:	693a      	ldr	r2, [r7, #16]
 801338c:	4413      	add	r3, r2
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013394:	2b1f      	cmp	r3, #31
 8013396:	d940      	bls.n	801341a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801339a:	2b2f      	cmp	r3, #47	@ 0x2f
 801339c:	d006      	beq.n	80133ac <create_name+0x48>
 801339e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80133a2:	d110      	bne.n	80133c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80133a4:	e002      	b.n	80133ac <create_name+0x48>
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	3301      	adds	r3, #1
 80133aa:	61bb      	str	r3, [r7, #24]
 80133ac:	693a      	ldr	r2, [r7, #16]
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	4413      	add	r3, r2
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80133b6:	d0f6      	beq.n	80133a6 <create_name+0x42>
 80133b8:	693a      	ldr	r2, [r7, #16]
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	4413      	add	r3, r2
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80133c2:	d0f0      	beq.n	80133a6 <create_name+0x42>
			break;
 80133c4:	e02a      	b.n	801341c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80133ca:	d901      	bls.n	80133d0 <create_name+0x6c>
 80133cc:	2306      	movs	r3, #6
 80133ce:	e17d      	b.n	80136cc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80133d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80133d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133d8:	2101      	movs	r1, #1
 80133da:	4618      	mov	r0, r3
 80133dc:	f002 fe1c 	bl	8016018 <ff_convert>
 80133e0:	4603      	mov	r3, r0
 80133e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80133e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d101      	bne.n	80133ee <create_name+0x8a>
 80133ea:	2306      	movs	r3, #6
 80133ec:	e16e      	b.n	80136cc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80133ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80133f2:	d809      	bhi.n	8013408 <create_name+0xa4>
 80133f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133f6:	4619      	mov	r1, r3
 80133f8:	488d      	ldr	r0, [pc, #564]	@ (8013630 <create_name+0x2cc>)
 80133fa:	f7fd fe4c 	bl	8011096 <chk_chr>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <create_name+0xa4>
 8013404:	2306      	movs	r3, #6
 8013406:	e161      	b.n	80136cc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	617a      	str	r2, [r7, #20]
 801340e:	005b      	lsls	r3, r3, #1
 8013410:	68fa      	ldr	r2, [r7, #12]
 8013412:	4413      	add	r3, r2
 8013414:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013416:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013418:	e7b4      	b.n	8013384 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801341a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801341c:	693a      	ldr	r2, [r7, #16]
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	441a      	add	r2, r3
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013428:	2b1f      	cmp	r3, #31
 801342a:	d801      	bhi.n	8013430 <create_name+0xcc>
 801342c:	2304      	movs	r3, #4
 801342e:	e000      	b.n	8013432 <create_name+0xce>
 8013430:	2300      	movs	r3, #0
 8013432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013436:	e011      	b.n	801345c <create_name+0xf8>
		w = lfn[di - 1];
 8013438:	697a      	ldr	r2, [r7, #20]
 801343a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801343e:	4413      	add	r3, r2
 8013440:	005b      	lsls	r3, r3, #1
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	4413      	add	r3, r2
 8013446:	881b      	ldrh	r3, [r3, #0]
 8013448:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801344a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801344c:	2b20      	cmp	r3, #32
 801344e:	d002      	beq.n	8013456 <create_name+0xf2>
 8013450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013452:	2b2e      	cmp	r3, #46	@ 0x2e
 8013454:	d106      	bne.n	8013464 <create_name+0x100>
		di--;
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	3b01      	subs	r3, #1
 801345a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d1ea      	bne.n	8013438 <create_name+0xd4>
 8013462:	e000      	b.n	8013466 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013464:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	005b      	lsls	r3, r3, #1
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	4413      	add	r3, r2
 801346e:	2200      	movs	r2, #0
 8013470:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d101      	bne.n	801347c <create_name+0x118>
 8013478:	2306      	movs	r3, #6
 801347a:	e127      	b.n	80136cc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	3340      	adds	r3, #64	@ 0x40
 8013480:	220b      	movs	r2, #11
 8013482:	2120      	movs	r1, #32
 8013484:	4618      	mov	r0, r3
 8013486:	f7fd fdc4 	bl	8011012 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801348a:	2300      	movs	r3, #0
 801348c:	61bb      	str	r3, [r7, #24]
 801348e:	e002      	b.n	8013496 <create_name+0x132>
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	3301      	adds	r3, #1
 8013494:	61bb      	str	r3, [r7, #24]
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	4413      	add	r3, r2
 801349e:	881b      	ldrh	r3, [r3, #0]
 80134a0:	2b20      	cmp	r3, #32
 80134a2:	d0f5      	beq.n	8013490 <create_name+0x12c>
 80134a4:	69bb      	ldr	r3, [r7, #24]
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	4413      	add	r3, r2
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80134b0:	d0ee      	beq.n	8013490 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d009      	beq.n	80134cc <create_name+0x168>
 80134b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134bc:	f043 0303 	orr.w	r3, r3, #3
 80134c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80134c4:	e002      	b.n	80134cc <create_name+0x168>
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	3b01      	subs	r3, #1
 80134ca:	617b      	str	r3, [r7, #20]
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d009      	beq.n	80134e6 <create_name+0x182>
 80134d2:	697a      	ldr	r2, [r7, #20]
 80134d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80134d8:	4413      	add	r3, r2
 80134da:	005b      	lsls	r3, r3, #1
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	4413      	add	r3, r2
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80134e4:	d1ef      	bne.n	80134c6 <create_name+0x162>

	i = b = 0; ni = 8;
 80134e6:	2300      	movs	r3, #0
 80134e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80134ec:	2300      	movs	r3, #0
 80134ee:	623b      	str	r3, [r7, #32]
 80134f0:	2308      	movs	r3, #8
 80134f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80134f4:	69bb      	ldr	r3, [r7, #24]
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	61ba      	str	r2, [r7, #24]
 80134fa:	005b      	lsls	r3, r3, #1
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	4413      	add	r3, r2
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 8090 	beq.w	801362c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801350c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801350e:	2b20      	cmp	r3, #32
 8013510:	d006      	beq.n	8013520 <create_name+0x1bc>
 8013512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013514:	2b2e      	cmp	r3, #46	@ 0x2e
 8013516:	d10a      	bne.n	801352e <create_name+0x1ca>
 8013518:	69ba      	ldr	r2, [r7, #24]
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	429a      	cmp	r2, r3
 801351e:	d006      	beq.n	801352e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013524:	f043 0303 	orr.w	r3, r3, #3
 8013528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801352c:	e07d      	b.n	801362a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801352e:	6a3a      	ldr	r2, [r7, #32]
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	429a      	cmp	r2, r3
 8013534:	d203      	bcs.n	801353e <create_name+0x1da>
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	429a      	cmp	r2, r3
 801353c:	d123      	bne.n	8013586 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	2b0b      	cmp	r3, #11
 8013542:	d106      	bne.n	8013552 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013548:	f043 0303 	orr.w	r3, r3, #3
 801354c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013550:	e075      	b.n	801363e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013552:	69ba      	ldr	r2, [r7, #24]
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	429a      	cmp	r2, r3
 8013558:	d005      	beq.n	8013566 <create_name+0x202>
 801355a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355e:	f043 0303 	orr.w	r3, r3, #3
 8013562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013566:	69ba      	ldr	r2, [r7, #24]
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	429a      	cmp	r2, r3
 801356c:	d866      	bhi.n	801363c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	61bb      	str	r3, [r7, #24]
 8013572:	2308      	movs	r3, #8
 8013574:	623b      	str	r3, [r7, #32]
 8013576:	230b      	movs	r3, #11
 8013578:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801357a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801357e:	009b      	lsls	r3, r3, #2
 8013580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013584:	e051      	b.n	801362a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013588:	2b7f      	cmp	r3, #127	@ 0x7f
 801358a:	d914      	bls.n	80135b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801358c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801358e:	2100      	movs	r1, #0
 8013590:	4618      	mov	r0, r3
 8013592:	f002 fd41 	bl	8016018 <ff_convert>
 8013596:	4603      	mov	r3, r0
 8013598:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801359a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801359c:	2b00      	cmp	r3, #0
 801359e:	d004      	beq.n	80135aa <create_name+0x246>
 80135a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135a2:	3b80      	subs	r3, #128	@ 0x80
 80135a4:	4a23      	ldr	r2, [pc, #140]	@ (8013634 <create_name+0x2d0>)
 80135a6:	5cd3      	ldrb	r3, [r2, r3]
 80135a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80135aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135ae:	f043 0302 	orr.w	r3, r3, #2
 80135b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80135b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d007      	beq.n	80135cc <create_name+0x268>
 80135bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135be:	4619      	mov	r1, r3
 80135c0:	481d      	ldr	r0, [pc, #116]	@ (8013638 <create_name+0x2d4>)
 80135c2:	f7fd fd68 	bl	8011096 <chk_chr>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d008      	beq.n	80135de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80135cc:	235f      	movs	r3, #95	@ 0x5f
 80135ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80135d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135d4:	f043 0303 	orr.w	r3, r3, #3
 80135d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80135dc:	e01b      	b.n	8013616 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80135de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135e0:	2b40      	cmp	r3, #64	@ 0x40
 80135e2:	d909      	bls.n	80135f8 <create_name+0x294>
 80135e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135e6:	2b5a      	cmp	r3, #90	@ 0x5a
 80135e8:	d806      	bhi.n	80135f8 <create_name+0x294>
					b |= 2;
 80135ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80135ee:	f043 0302 	orr.w	r3, r3, #2
 80135f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80135f6:	e00e      	b.n	8013616 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80135f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135fa:	2b60      	cmp	r3, #96	@ 0x60
 80135fc:	d90b      	bls.n	8013616 <create_name+0x2b2>
 80135fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013600:	2b7a      	cmp	r3, #122	@ 0x7a
 8013602:	d808      	bhi.n	8013616 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013608:	f043 0301 	orr.w	r3, r3, #1
 801360c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013612:	3b20      	subs	r3, #32
 8013614:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013616:	6a3b      	ldr	r3, [r7, #32]
 8013618:	1c5a      	adds	r2, r3, #1
 801361a:	623a      	str	r2, [r7, #32]
 801361c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801361e:	b2d1      	uxtb	r1, r2
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	4413      	add	r3, r2
 8013624:	460a      	mov	r2, r1
 8013626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 801362a:	e763      	b.n	80134f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801362c:	bf00      	nop
 801362e:	e006      	b.n	801363e <create_name+0x2da>
 8013630:	0801e0f8 	.word	0x0801e0f8
 8013634:	0801eab4 	.word	0x0801eab4
 8013638:	0801e104 	.word	0x0801e104
			if (si > di) break;			/* No extension */
 801363c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013644:	2be5      	cmp	r3, #229	@ 0xe5
 8013646:	d103      	bne.n	8013650 <create_name+0x2ec>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2205      	movs	r2, #5
 801364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	2b08      	cmp	r3, #8
 8013654:	d104      	bne.n	8013660 <create_name+0x2fc>
 8013656:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013664:	f003 030c 	and.w	r3, r3, #12
 8013668:	2b0c      	cmp	r3, #12
 801366a:	d005      	beq.n	8013678 <create_name+0x314>
 801366c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013670:	f003 0303 	and.w	r3, r3, #3
 8013674:	2b03      	cmp	r3, #3
 8013676:	d105      	bne.n	8013684 <create_name+0x320>
 8013678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801367c:	f043 0302 	orr.w	r3, r3, #2
 8013680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013688:	f003 0302 	and.w	r3, r3, #2
 801368c:	2b00      	cmp	r3, #0
 801368e:	d117      	bne.n	80136c0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013694:	f003 0303 	and.w	r3, r3, #3
 8013698:	2b01      	cmp	r3, #1
 801369a:	d105      	bne.n	80136a8 <create_name+0x344>
 801369c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a0:	f043 0310 	orr.w	r3, r3, #16
 80136a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80136a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136ac:	f003 030c 	and.w	r3, r3, #12
 80136b0:	2b04      	cmp	r3, #4
 80136b2:	d105      	bne.n	80136c0 <create_name+0x35c>
 80136b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136b8:	f043 0308 	orr.w	r3, r3, #8
 80136bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80136c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 80136ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3728      	adds	r7, #40	@ 0x28
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80136e8:	e002      	b.n	80136f0 <follow_path+0x1c>
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	3301      	adds	r3, #1
 80136ee:	603b      	str	r3, [r7, #0]
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80136f6:	d0f8      	beq.n	80136ea <follow_path+0x16>
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80136fe:	d0f4      	beq.n	80136ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	2200      	movs	r2, #0
 8013704:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	2200      	movs	r2, #0
 801370a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	2b1f      	cmp	r3, #31
 8013712:	d80a      	bhi.n	801372a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2280      	movs	r2, #128	@ 0x80
 8013718:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 801371c:	2100      	movs	r1, #0
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7fe fc7d 	bl	801201e <dir_sdi>
 8013724:	4603      	mov	r3, r0
 8013726:	75fb      	strb	r3, [r7, #23]
 8013728:	e078      	b.n	801381c <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801372a:	463b      	mov	r3, r7
 801372c:	4619      	mov	r1, r3
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7ff fe18 	bl	8013364 <create_name>
 8013734:	4603      	mov	r3, r0
 8013736:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013738:	7dfb      	ldrb	r3, [r7, #23]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d169      	bne.n	8013812 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7ff fb3f 	bl	8012dc2 <dir_find>
 8013744:	4603      	mov	r3, r0
 8013746:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 801374e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013750:	7dfb      	ldrb	r3, [r7, #23]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00a      	beq.n	801376c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013756:	7dfb      	ldrb	r3, [r7, #23]
 8013758:	2b04      	cmp	r3, #4
 801375a:	d15c      	bne.n	8013816 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801375c:	7afb      	ldrb	r3, [r7, #11]
 801375e:	f003 0304 	and.w	r3, r3, #4
 8013762:	2b00      	cmp	r3, #0
 8013764:	d157      	bne.n	8013816 <follow_path+0x142>
 8013766:	2305      	movs	r3, #5
 8013768:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801376a:	e054      	b.n	8013816 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801376c:	7afb      	ldrb	r3, [r7, #11]
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d151      	bne.n	801381a <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	799b      	ldrb	r3, [r3, #6]
 801377a:	f003 0310 	and.w	r3, r3, #16
 801377e:	2b00      	cmp	r3, #0
 8013780:	d102      	bne.n	8013788 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8013782:	2305      	movs	r3, #5
 8013784:	75fb      	strb	r3, [r7, #23]
 8013786:	e049      	b.n	801381c <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	2b04      	cmp	r3, #4
 801378e:	d130      	bne.n	80137f2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	689a      	ldr	r2, [r3, #8]
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801379e:	4613      	mov	r3, r2
 80137a0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80137a4:	693a      	ldr	r2, [r7, #16]
 80137a6:	79d2      	ldrb	r2, [r2, #7]
 80137a8:	431a      	orrs	r2, r3
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	3334      	adds	r3, #52	@ 0x34
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fd fa3a 	bl	8010c36 <ld_dword>
 80137c2:	4602      	mov	r2, r0
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	691b      	ldr	r3, [r3, #16]
 80137cc:	3321      	adds	r3, #33	@ 0x21
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	f003 0302 	and.w	r3, r3, #2
 80137d4:	b2da      	uxtb	r2, r3
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	691b      	ldr	r3, [r3, #16]
 80137de:	3338      	adds	r3, #56	@ 0x38
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fd fa4b 	bl	8010c7c <ld_qword>
 80137e6:	4602      	mov	r2, r0
 80137e8:	460b      	mov	r3, r1
 80137ea:	6939      	ldr	r1, [r7, #16]
 80137ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80137f0:	e79b      	b.n	801372a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013800:	4413      	add	r3, r2
 8013802:	4619      	mov	r1, r3
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	f7fe fdc1 	bl	801238c <ld_clust>
 801380a:	4602      	mov	r2, r0
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013810:	e78b      	b.n	801372a <follow_path+0x56>
			if (res != FR_OK) break;
 8013812:	bf00      	nop
 8013814:	e002      	b.n	801381c <follow_path+0x148>
				break;
 8013816:	bf00      	nop
 8013818:	e000      	b.n	801381c <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801381a:	bf00      	nop
			}
		}
	}

	return res;
 801381c:	7dfb      	ldrb	r3, [r7, #23]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013826:	b480      	push	{r7}
 8013828:	b087      	sub	sp, #28
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801382e:	f04f 33ff 	mov.w	r3, #4294967295
 8013832:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d031      	beq.n	80138a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	617b      	str	r3, [r7, #20]
 8013842:	e002      	b.n	801384a <get_ldnumber+0x24>
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	3301      	adds	r3, #1
 8013848:	617b      	str	r3, [r7, #20]
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	2b1f      	cmp	r3, #31
 8013850:	d903      	bls.n	801385a <get_ldnumber+0x34>
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	2b3a      	cmp	r3, #58	@ 0x3a
 8013858:	d1f4      	bne.n	8013844 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013860:	d11c      	bne.n	801389c <get_ldnumber+0x76>
			tp = *path;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	1c5a      	adds	r2, r3, #1
 801386c:	60fa      	str	r2, [r7, #12]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	3b30      	subs	r3, #48	@ 0x30
 8013872:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	2b09      	cmp	r3, #9
 8013878:	d80e      	bhi.n	8013898 <get_ldnumber+0x72>
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	429a      	cmp	r2, r3
 8013880:	d10a      	bne.n	8013898 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d107      	bne.n	8013898 <get_ldnumber+0x72>
					vol = (int)i;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	3301      	adds	r3, #1
 8013890:	617b      	str	r3, [r7, #20]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	697a      	ldr	r2, [r7, #20]
 8013896:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	e002      	b.n	80138a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801389c:	2300      	movs	r3, #0
 801389e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80138a0:	693b      	ldr	r3, [r7, #16]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	371c      	adds	r7, #28
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
	...

080138b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	70da      	strb	r2, [r3, #3]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f04f 32ff 	mov.w	r2, #4294967295
 80138c6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80138c8:	6839      	ldr	r1, [r7, #0]
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7fd fda4 	bl	8011418 <move_window>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <check_fs+0x2a>
 80138d6:	2304      	movs	r3, #4
 80138d8:	e044      	b.n	8013964 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	333c      	adds	r3, #60	@ 0x3c
 80138de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fd f98e 	bl	8010c04 <ld_word>
 80138e8:	4603      	mov	r3, r0
 80138ea:	461a      	mov	r2, r3
 80138ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d001      	beq.n	80138f8 <check_fs+0x48>
 80138f4:	2303      	movs	r3, #3
 80138f6:	e035      	b.n	8013964 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80138fe:	2be9      	cmp	r3, #233	@ 0xe9
 8013900:	d009      	beq.n	8013916 <check_fs+0x66>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013908:	2beb      	cmp	r3, #235	@ 0xeb
 801390a:	d11e      	bne.n	801394a <check_fs+0x9a>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013912:	2b90      	cmp	r3, #144	@ 0x90
 8013914:	d119      	bne.n	801394a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	333c      	adds	r3, #60	@ 0x3c
 801391a:	3336      	adds	r3, #54	@ 0x36
 801391c:	4618      	mov	r0, r3
 801391e:	f7fd f98a 	bl	8010c36 <ld_dword>
 8013922:	4603      	mov	r3, r0
 8013924:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013928:	4a10      	ldr	r2, [pc, #64]	@ (801396c <check_fs+0xbc>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d101      	bne.n	8013932 <check_fs+0x82>
 801392e:	2300      	movs	r3, #0
 8013930:	e018      	b.n	8013964 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	333c      	adds	r3, #60	@ 0x3c
 8013936:	3352      	adds	r3, #82	@ 0x52
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd f97c 	bl	8010c36 <ld_dword>
 801393e:	4603      	mov	r3, r0
 8013940:	4a0b      	ldr	r2, [pc, #44]	@ (8013970 <check_fs+0xc0>)
 8013942:	4293      	cmp	r3, r2
 8013944:	d101      	bne.n	801394a <check_fs+0x9a>
 8013946:	2300      	movs	r3, #0
 8013948:	e00c      	b.n	8013964 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	333c      	adds	r3, #60	@ 0x3c
 801394e:	220b      	movs	r2, #11
 8013950:	4908      	ldr	r1, [pc, #32]	@ (8013974 <check_fs+0xc4>)
 8013952:	4618      	mov	r0, r3
 8013954:	f7fd fb78 	bl	8011048 <mem_cmp>
 8013958:	4603      	mov	r3, r0
 801395a:	2b00      	cmp	r3, #0
 801395c:	d101      	bne.n	8013962 <check_fs+0xb2>
 801395e:	2301      	movs	r3, #1
 8013960:	e000      	b.n	8013964 <check_fs+0xb4>
#endif
	return 2;
 8013962:	2302      	movs	r3, #2
}
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	00544146 	.word	0x00544146
 8013970:	33544146 	.word	0x33544146
 8013974:	0801e10c 	.word	0x0801e10c

08013978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801397c:	b09c      	sub	sp, #112	@ 0x70
 801397e:	af00      	add	r7, sp, #0
 8013980:	61f8      	str	r0, [r7, #28]
 8013982:	61b9      	str	r1, [r7, #24]
 8013984:	4613      	mov	r3, r2
 8013986:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	2200      	movs	r2, #0
 801398c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801398e:	69f8      	ldr	r0, [r7, #28]
 8013990:	f7ff ff49 	bl	8013826 <get_ldnumber>
 8013994:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8013996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013998:	2b00      	cmp	r3, #0
 801399a:	da01      	bge.n	80139a0 <find_volume+0x28>
 801399c:	230b      	movs	r3, #11
 801399e:	e339      	b.n	8014014 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80139a0:	4a9d      	ldr	r2, [pc, #628]	@ (8013c18 <find_volume+0x2a0>)
 80139a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139a8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80139aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <find_volume+0x3c>
 80139b0:	230c      	movs	r3, #12
 80139b2:	e32f      	b.n	8014014 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 80139b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80139b6:	f7fd fb89 	bl	80110cc <lock_fs>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d101      	bne.n	80139c4 <find_volume+0x4c>
 80139c0:	230f      	movs	r3, #15
 80139c2:	e327      	b.n	8014014 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80139c8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80139ca:	7dfb      	ldrb	r3, [r7, #23]
 80139cc:	f023 0301 	bic.w	r3, r3, #1
 80139d0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80139d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d01a      	beq.n	8013a10 <find_volume+0x98>
		stat = disk_status(fs->drv);
 80139da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139dc:	785b      	ldrb	r3, [r3, #1]
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fd f870 	bl	8010ac4 <disk_status>
 80139e4:	4603      	mov	r3, r0
 80139e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80139ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80139ee:	f003 0301 	and.w	r3, r3, #1
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d10c      	bne.n	8013a10 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d007      	beq.n	8013a0c <find_volume+0x94>
 80139fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013a00:	f003 0304 	and.w	r3, r3, #4
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d001      	beq.n	8013a0c <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8013a08:	230a      	movs	r3, #10
 8013a0a:	e303      	b.n	8014014 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	e301      	b.n	8014014 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a12:	2200      	movs	r2, #0
 8013a14:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a1c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a20:	785b      	ldrb	r3, [r3, #1]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7fd f868 	bl	8010af8 <disk_initialize>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013a2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013a32:	f003 0301 	and.w	r3, r3, #1
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d001      	beq.n	8013a3e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013a3a:	2303      	movs	r3, #3
 8013a3c:	e2ea      	b.n	8014014 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013a3e:	7dfb      	ldrb	r3, [r7, #23]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d007      	beq.n	8013a54 <find_volume+0xdc>
 8013a44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013a48:	f003 0304 	and.w	r3, r3, #4
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d001      	beq.n	8013a54 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8013a50:	230a      	movs	r3, #10
 8013a52:	e2df      	b.n	8014014 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013a54:	2300      	movs	r3, #0
 8013a56:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013a58:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013a5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013a5c:	f7ff ff28 	bl	80138b0 <check_fs>
 8013a60:	4603      	mov	r3, r0
 8013a62:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013a66:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d14d      	bne.n	8013b0a <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013a6e:	2300      	movs	r3, #0
 8013a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013a72:	e020      	b.n	8013ab6 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a76:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a7c:	011b      	lsls	r3, r3, #4
 8013a7e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013a82:	4413      	add	r3, r2
 8013a84:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a88:	3304      	adds	r3, #4
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d006      	beq.n	8013a9e <find_volume+0x126>
 8013a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a92:	3308      	adds	r3, #8
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fd f8ce 	bl	8010c36 <ld_dword>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	e000      	b.n	8013aa0 <find_volume+0x128>
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	3360      	adds	r3, #96	@ 0x60
 8013aa6:	f107 0110 	add.w	r1, r7, #16
 8013aaa:	440b      	add	r3, r1
 8013aac:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ab8:	2b03      	cmp	r3, #3
 8013aba:	d9db      	bls.n	8013a74 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013abc:	2300      	movs	r3, #0
 8013abe:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8013ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d002      	beq.n	8013acc <find_volume+0x154>
 8013ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ac8:	3b01      	subs	r3, #1
 8013aca:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	3360      	adds	r3, #96	@ 0x60
 8013ad2:	f107 0210 	add.w	r2, r7, #16
 8013ad6:	4413      	add	r3, r2
 8013ad8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8013adc:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d005      	beq.n	8013af0 <find_volume+0x178>
 8013ae4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013ae6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013ae8:	f7ff fee2 	bl	80138b0 <check_fs>
 8013aec:	4603      	mov	r3, r0
 8013aee:	e000      	b.n	8013af2 <find_volume+0x17a>
 8013af0:	2303      	movs	r3, #3
 8013af2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013af6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d905      	bls.n	8013b0a <find_volume+0x192>
 8013afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b00:	3301      	adds	r3, #1
 8013b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b06:	2b03      	cmp	r3, #3
 8013b08:	d9e0      	bls.n	8013acc <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013b0e:	2b04      	cmp	r3, #4
 8013b10:	d101      	bne.n	8013b16 <find_volume+0x19e>
 8013b12:	2301      	movs	r3, #1
 8013b14:	e27e      	b.n	8014014 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013b16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d901      	bls.n	8013b22 <find_volume+0x1aa>
 8013b1e:	230d      	movs	r3, #13
 8013b20:	e278      	b.n	8014014 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8013b22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	f040 80fa 	bne.w	8013d20 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8013b2c:	230b      	movs	r3, #11
 8013b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b30:	e002      	b.n	8013b38 <find_volume+0x1c0>
 8013b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b34:	3301      	adds	r3, #1
 8013b36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8013b3c:	d806      	bhi.n	8013b4c <find_volume+0x1d4>
 8013b3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b42:	4413      	add	r3, r2
 8013b44:	333c      	adds	r3, #60	@ 0x3c
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d0f2      	beq.n	8013b32 <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8013b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8013b50:	d801      	bhi.n	8013b56 <find_volume+0x1de>
 8013b52:	230d      	movs	r3, #13
 8013b54:	e25e      	b.n	8014014 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8013b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b58:	333c      	adds	r3, #60	@ 0x3c
 8013b5a:	3368      	adds	r3, #104	@ 0x68
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fd f851 	bl	8010c04 <ld_word>
 8013b62:	4603      	mov	r3, r0
 8013b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b68:	d001      	beq.n	8013b6e <find_volume+0x1f6>
 8013b6a:	230d      	movs	r3, #13
 8013b6c:	e252      	b.n	8014014 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8013b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b70:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8013b74:	2b09      	cmp	r3, #9
 8013b76:	d001      	beq.n	8013b7c <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 8013b78:	230d      	movs	r3, #13
 8013b7a:	e24b      	b.n	8014014 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8013b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b7e:	333c      	adds	r3, #60	@ 0x3c
 8013b80:	3348      	adds	r3, #72	@ 0x48
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7fd f87a 	bl	8010c7c <ld_qword>
 8013b88:	4602      	mov	r2, r0
 8013b8a:	460b      	mov	r3, r1
 8013b8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013b8e:	2000      	movs	r0, #0
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	68b9      	ldr	r1, [r7, #8]
 8013b96:	1851      	adds	r1, r2, r1
 8013b98:	6039      	str	r1, [r7, #0]
 8013b9a:	68f9      	ldr	r1, [r7, #12]
 8013b9c:	eb43 0101 	adc.w	r1, r3, r1
 8013ba0:	6079      	str	r1, [r7, #4]
 8013ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ba6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8013baa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d301      	bcc.n	8013bb6 <find_volume+0x23e>
 8013bb2:	230d      	movs	r3, #13
 8013bb4:	e22e      	b.n	8014014 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8013bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bb8:	333c      	adds	r3, #60	@ 0x3c
 8013bba:	3354      	adds	r3, #84	@ 0x54
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fd f83a 	bl	8010c36 <ld_dword>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bc6:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8013bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bca:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8013bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bd0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8013bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bd4:	789b      	ldrb	r3, [r3, #2]
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d001      	beq.n	8013bde <find_volume+0x266>
 8013bda:	230d      	movs	r3, #13
 8013bdc:	e21a      	b.n	8014014 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013be0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8013be4:	461a      	mov	r2, r3
 8013be6:	2301      	movs	r3, #1
 8013be8:	4093      	lsls	r3, r2
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bee:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8013bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bf2:	895b      	ldrh	r3, [r3, #10]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d101      	bne.n	8013bfc <find_volume+0x284>
 8013bf8:	230d      	movs	r3, #13
 8013bfa:	e20b      	b.n	8014014 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bfe:	333c      	adds	r3, #60	@ 0x3c
 8013c00:	335c      	adds	r3, #92	@ 0x5c
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fd f817 	bl	8010c36 <ld_dword>
 8013c08:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8013c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c0c:	4a03      	ldr	r2, [pc, #12]	@ (8013c1c <find_volume+0x2a4>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d906      	bls.n	8013c20 <find_volume+0x2a8>
 8013c12:	230d      	movs	r3, #13
 8013c14:	e1fe      	b.n	8014014 <find_volume+0x69c>
 8013c16:	bf00      	nop
 8013c18:	24002b44 	.word	0x24002b44
 8013c1c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8013c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c22:	1c9a      	adds	r2, r3, #2
 8013c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c26:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8013c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013c2c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8013c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c30:	333c      	adds	r3, #60	@ 0x3c
 8013c32:	3358      	adds	r3, #88	@ 0x58
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7fc fffe 	bl	8010c36 <ld_dword>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c3e:	441a      	add	r2, r3
 8013c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c42:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8013c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c46:	333c      	adds	r3, #60	@ 0x3c
 8013c48:	3350      	adds	r3, #80	@ 0x50
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fc fff3 	bl	8010c36 <ld_dword>
 8013c50:	4602      	mov	r2, r0
 8013c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c54:	441a      	add	r2, r3
 8013c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c58:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8013c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c5e:	2200      	movs	r2, #0
 8013c60:	469a      	mov	sl, r3
 8013c62:	4693      	mov	fp, r2
 8013c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c66:	895b      	ldrh	r3, [r3, #10]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c6c:	fb02 f303 	mul.w	r3, r2, r3
 8013c70:	2200      	movs	r2, #0
 8013c72:	4698      	mov	r8, r3
 8013c74:	4691      	mov	r9, r2
 8013c76:	eb1a 0408 	adds.w	r4, sl, r8
 8013c7a:	eb4b 0509 	adc.w	r5, fp, r9
 8013c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8013c82:	42a2      	cmp	r2, r4
 8013c84:	41ab      	sbcs	r3, r5
 8013c86:	d201      	bcs.n	8013c8c <find_volume+0x314>
 8013c88:	230d      	movs	r3, #13
 8013c8a:	e1c3      	b.n	8014014 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8013c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c8e:	333c      	adds	r3, #60	@ 0x3c
 8013c90:	3360      	adds	r3, #96	@ 0x60
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fc ffcf 	bl	8010c36 <ld_dword>
 8013c98:	4602      	mov	r2, r0
 8013c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c9c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8013c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013ca6:	f7fd fc53 	bl	8011550 <clust2sect>
 8013caa:	4603      	mov	r3, r0
 8013cac:	4619      	mov	r1, r3
 8013cae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013cb0:	f7fd fbb2 	bl	8011418 <move_window>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d001      	beq.n	8013cbe <find_volume+0x346>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	e1aa      	b.n	8014014 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013cc2:	e015      	b.n	8013cf0 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013cc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cc8:	4413      	add	r3, r2
 8013cca:	333c      	adds	r3, #60	@ 0x3c
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	2b81      	cmp	r3, #129	@ 0x81
 8013cd0:	d10b      	bne.n	8013cea <find_volume+0x372>
 8013cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cd4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cda:	3314      	adds	r3, #20
 8013cdc:	4413      	add	r3, r2
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7fc ffa9 	bl	8010c36 <ld_dword>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b02      	cmp	r3, #2
 8013ce8:	d007      	beq.n	8013cfa <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cec:	3320      	adds	r3, #32
 8013cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013cf6:	d3e5      	bcc.n	8013cc4 <find_volume+0x34c>
 8013cf8:	e000      	b.n	8013cfc <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013cfa:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8013cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d02:	d101      	bne.n	8013d08 <find_volume+0x390>
 8013d04:	230d      	movs	r3, #13
 8013d06:	e185      	b.n	8014014 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d0e:	61da      	str	r2, [r3, #28]
 8013d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d12:	69da      	ldr	r2, [r3, #28]
 8013d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d16:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8013d18:	2304      	movs	r3, #4
 8013d1a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8013d1e:	e167      	b.n	8013ff0 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d22:	333c      	adds	r3, #60	@ 0x3c
 8013d24:	330b      	adds	r3, #11
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fc ff6c 	bl	8010c04 <ld_word>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d32:	d001      	beq.n	8013d38 <find_volume+0x3c0>
 8013d34:	230d      	movs	r3, #13
 8013d36:	e16d      	b.n	8014014 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d3a:	333c      	adds	r3, #60	@ 0x3c
 8013d3c:	3316      	adds	r3, #22
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7fc ff60 	bl	8010c04 <ld_word>
 8013d44:	4603      	mov	r3, r0
 8013d46:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d106      	bne.n	8013d5c <find_volume+0x3e4>
 8013d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d50:	333c      	adds	r3, #60	@ 0x3c
 8013d52:	3324      	adds	r3, #36	@ 0x24
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fc ff6e 	bl	8010c36 <ld_dword>
 8013d5a:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 8013d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013d60:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d64:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8013d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d6e:	789b      	ldrb	r3, [r3, #2]
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d005      	beq.n	8013d80 <find_volume+0x408>
 8013d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d76:	789b      	ldrb	r3, [r3, #2]
 8013d78:	2b02      	cmp	r3, #2
 8013d7a:	d001      	beq.n	8013d80 <find_volume+0x408>
 8013d7c:	230d      	movs	r3, #13
 8013d7e:	e149      	b.n	8014014 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d82:	789b      	ldrb	r3, [r3, #2]
 8013d84:	461a      	mov	r2, r3
 8013d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d88:	fb02 f303 	mul.w	r3, r2, r3
 8013d8c:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d90:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8013d94:	461a      	mov	r2, r3
 8013d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d9c:	895b      	ldrh	r3, [r3, #10]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d008      	beq.n	8013db4 <find_volume+0x43c>
 8013da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013da4:	895b      	ldrh	r3, [r3, #10]
 8013da6:	461a      	mov	r2, r3
 8013da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013daa:	895b      	ldrh	r3, [r3, #10]
 8013dac:	3b01      	subs	r3, #1
 8013dae:	4013      	ands	r3, r2
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d001      	beq.n	8013db8 <find_volume+0x440>
 8013db4:	230d      	movs	r3, #13
 8013db6:	e12d      	b.n	8014014 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dba:	333c      	adds	r3, #60	@ 0x3c
 8013dbc:	3311      	adds	r3, #17
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7fc ff20 	bl	8010c04 <ld_word>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dce:	891b      	ldrh	r3, [r3, #8]
 8013dd0:	f003 030f 	and.w	r3, r3, #15
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d001      	beq.n	8013dde <find_volume+0x466>
 8013dda:	230d      	movs	r3, #13
 8013ddc:	e11a      	b.n	8014014 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013de0:	333c      	adds	r3, #60	@ 0x3c
 8013de2:	3313      	adds	r3, #19
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fc ff0d 	bl	8010c04 <ld_word>
 8013dea:	4603      	mov	r3, r0
 8013dec:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d106      	bne.n	8013e02 <find_volume+0x48a>
 8013df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013df6:	333c      	adds	r3, #60	@ 0x3c
 8013df8:	3320      	adds	r3, #32
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fc ff1b 	bl	8010c36 <ld_dword>
 8013e00:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e04:	333c      	adds	r3, #60	@ 0x3c
 8013e06:	330e      	adds	r3, #14
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fc fefb 	bl	8010c04 <ld_word>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013e14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d101      	bne.n	8013e20 <find_volume+0x4a8>
 8013e1c:	230d      	movs	r3, #13
 8013e1e:	e0f9      	b.n	8014014 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013e20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e26:	4413      	add	r3, r2
 8013e28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e2a:	8912      	ldrh	r2, [r2, #8]
 8013e2c:	0912      	lsrs	r2, r2, #4
 8013e2e:	b292      	uxth	r2, r2
 8013e30:	4413      	add	r3, r2
 8013e32:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013e34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d201      	bcs.n	8013e40 <find_volume+0x4c8>
 8013e3c:	230d      	movs	r3, #13
 8013e3e:	e0e9      	b.n	8014014 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013e40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e44:	1ad3      	subs	r3, r2, r3
 8013e46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e48:	8952      	ldrh	r2, [r2, #10]
 8013e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d101      	bne.n	8013e5a <find_volume+0x4e2>
 8013e56:	230d      	movs	r3, #13
 8013e58:	e0dc      	b.n	8014014 <find_volume+0x69c>
		fmt = FS_FAT32;
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e62:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d802      	bhi.n	8013e70 <find_volume+0x4f8>
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e72:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d802      	bhi.n	8013e80 <find_volume+0x508>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e82:	1c9a      	adds	r2, r3, #2
 8013e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e86:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013e8c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013e8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e94:	441a      	add	r2, r3
 8013e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e98:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013e9a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e9e:	441a      	add	r2, r3
 8013ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ea2:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013ea4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013ea8:	2b03      	cmp	r3, #3
 8013eaa:	d11e      	bne.n	8013eea <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eae:	333c      	adds	r3, #60	@ 0x3c
 8013eb0:	332a      	adds	r3, #42	@ 0x2a
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fc fea6 	bl	8010c04 <ld_word>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <find_volume+0x54a>
 8013ebe:	230d      	movs	r3, #13
 8013ec0:	e0a8      	b.n	8014014 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ec4:	891b      	ldrh	r3, [r3, #8]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <find_volume+0x556>
 8013eca:	230d      	movs	r3, #13
 8013ecc:	e0a2      	b.n	8014014 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ed0:	333c      	adds	r3, #60	@ 0x3c
 8013ed2:	332c      	adds	r3, #44	@ 0x2c
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7fc feae 	bl	8010c36 <ld_dword>
 8013eda:	4602      	mov	r2, r0
 8013edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ede:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ee2:	6a1b      	ldr	r3, [r3, #32]
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ee8:	e01f      	b.n	8013f2a <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eec:	891b      	ldrh	r3, [r3, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <find_volume+0x57e>
 8013ef2:	230d      	movs	r3, #13
 8013ef4:	e08e      	b.n	8014014 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013efc:	441a      	add	r2, r3
 8013efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f00:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013f02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013f06:	2b02      	cmp	r3, #2
 8013f08:	d103      	bne.n	8013f12 <find_volume+0x59a>
 8013f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f0c:	6a1b      	ldr	r3, [r3, #32]
 8013f0e:	005b      	lsls	r3, r3, #1
 8013f10:	e00a      	b.n	8013f28 <find_volume+0x5b0>
 8013f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f14:	6a1a      	ldr	r2, [r3, #32]
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	085a      	lsrs	r2, r3, #1
 8013f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f20:	6a1b      	ldr	r3, [r3, #32]
 8013f22:	f003 0301 	and.w	r3, r3, #1
 8013f26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f30:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013f34:	0a5b      	lsrs	r3, r3, #9
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d201      	bcs.n	8013f3e <find_volume+0x5c6>
 8013f3a:	230d      	movs	r3, #13
 8013f3c:	e06a      	b.n	8014014 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f40:	f04f 32ff 	mov.w	r2, #4294967295
 8013f44:	61da      	str	r2, [r3, #28]
 8013f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f48:	69da      	ldr	r2, [r3, #28]
 8013f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f4c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8013f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f50:	2280      	movs	r2, #128	@ 0x80
 8013f52:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013f54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013f58:	2b03      	cmp	r3, #3
 8013f5a:	d149      	bne.n	8013ff0 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f5e:	333c      	adds	r3, #60	@ 0x3c
 8013f60:	3330      	adds	r3, #48	@ 0x30
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fc fe4e 	bl	8010c04 <ld_word>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d140      	bne.n	8013ff0 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f70:	3301      	adds	r3, #1
 8013f72:	4619      	mov	r1, r3
 8013f74:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013f76:	f7fd fa4f 	bl	8011418 <move_window>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d137      	bne.n	8013ff0 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 8013f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f82:	2200      	movs	r2, #0
 8013f84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f88:	333c      	adds	r3, #60	@ 0x3c
 8013f8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fc fe38 	bl	8010c04 <ld_word>
 8013f94:	4603      	mov	r3, r0
 8013f96:	461a      	mov	r2, r3
 8013f98:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d127      	bne.n	8013ff0 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fa2:	333c      	adds	r3, #60	@ 0x3c
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fc fe46 	bl	8010c36 <ld_dword>
 8013faa:	4603      	mov	r3, r0
 8013fac:	4a1c      	ldr	r2, [pc, #112]	@ (8014020 <find_volume+0x6a8>)
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	d11e      	bne.n	8013ff0 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fb4:	333c      	adds	r3, #60	@ 0x3c
 8013fb6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fc fe3b 	bl	8010c36 <ld_dword>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	4a18      	ldr	r2, [pc, #96]	@ (8014024 <find_volume+0x6ac>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d113      	bne.n	8013ff0 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fca:	333c      	adds	r3, #60	@ 0x3c
 8013fcc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fc fe30 	bl	8010c36 <ld_dword>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fda:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fde:	333c      	adds	r3, #60	@ 0x3c
 8013fe0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7fc fe26 	bl	8010c36 <ld_dword>
 8013fea:	4602      	mov	r2, r0
 8013fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fee:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ff2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8013ff6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8014028 <find_volume+0x6b0>)
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	4b09      	ldr	r3, [pc, #36]	@ (8014028 <find_volume+0x6b0>)
 8014002:	801a      	strh	r2, [r3, #0]
 8014004:	4b08      	ldr	r3, [pc, #32]	@ (8014028 <find_volume+0x6b0>)
 8014006:	881a      	ldrh	r2, [r3, #0]
 8014008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801400a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801400c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801400e:	f7fd f99b 	bl	8011348 <clear_lock>
#endif
	return FR_OK;
 8014012:	2300      	movs	r3, #0
}
 8014014:	4618      	mov	r0, r3
 8014016:	3770      	adds	r7, #112	@ 0x70
 8014018:	46bd      	mov	sp, r7
 801401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801401e:	bf00      	nop
 8014020:	41615252 	.word	0x41615252
 8014024:	61417272 	.word	0x61417272
 8014028:	24002b48 	.word	0x24002b48

0801402c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014036:	2309      	movs	r3, #9
 8014038:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d02e      	beq.n	801409e <validate+0x72>
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d02a      	beq.n	801409e <validate+0x72>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d025      	beq.n	801409e <validate+0x72>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	889a      	ldrh	r2, [r3, #4]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	88db      	ldrh	r3, [r3, #6]
 801405c:	429a      	cmp	r2, r3
 801405e:	d11e      	bne.n	801409e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4618      	mov	r0, r3
 8014066:	f7fd f831 	bl	80110cc <lock_fs>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d014      	beq.n	801409a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	785b      	ldrb	r3, [r3, #1]
 8014076:	4618      	mov	r0, r3
 8014078:	f7fc fd24 	bl	8010ac4 <disk_status>
 801407c:	4603      	mov	r3, r0
 801407e:	f003 0301 	and.w	r3, r3, #1
 8014082:	2b00      	cmp	r3, #0
 8014084:	d102      	bne.n	801408c <validate+0x60>
				res = FR_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	73fb      	strb	r3, [r7, #15]
 801408a:	e008      	b.n	801409e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2100      	movs	r1, #0
 8014092:	4618      	mov	r0, r3
 8014094:	f7fd f830 	bl	80110f8 <unlock_fs>
 8014098:	e001      	b.n	801409e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801409a:	230f      	movs	r3, #15
 801409c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801409e:	7bfb      	ldrb	r3, [r7, #15]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d102      	bne.n	80140aa <validate+0x7e>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	e000      	b.n	80140ac <validate+0x80>
 80140aa:	2300      	movs	r3, #0
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	6013      	str	r3, [r2, #0]
	return res;
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3710      	adds	r7, #16
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
	...

080140bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b088      	sub	sp, #32
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	4613      	mov	r3, r2
 80140c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80140ce:	f107 0310 	add.w	r3, r7, #16
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7ff fba7 	bl	8013826 <get_ldnumber>
 80140d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	da01      	bge.n	80140e4 <f_mount+0x28>
 80140e0:	230b      	movs	r3, #11
 80140e2:	e048      	b.n	8014176 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80140e4:	4a26      	ldr	r2, [pc, #152]	@ (8014180 <f_mount+0xc4>)
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00f      	beq.n	8014114 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80140f4:	69b8      	ldr	r0, [r7, #24]
 80140f6:	f7fd f927 	bl	8011348 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	695b      	ldr	r3, [r3, #20]
 80140fe:	4618      	mov	r0, r3
 8014100:	f002 f86b 	bl	80161da <ff_del_syncobj>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d101      	bne.n	801410e <f_mount+0x52>
 801410a:	2302      	movs	r3, #2
 801410c:	e033      	b.n	8014176 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	2200      	movs	r2, #0
 8014112:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d00f      	beq.n	801413a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	2200      	movs	r2, #0
 801411e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	b2da      	uxtb	r2, r3
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	3314      	adds	r3, #20
 8014128:	4619      	mov	r1, r3
 801412a:	4610      	mov	r0, r2
 801412c:	f002 f83a 	bl	80161a4 <ff_cre_syncobj>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d101      	bne.n	801413a <f_mount+0x7e>
 8014136:	2302      	movs	r3, #2
 8014138:	e01d      	b.n	8014176 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801413a:	68fa      	ldr	r2, [r7, #12]
 801413c:	4910      	ldr	r1, [pc, #64]	@ (8014180 <f_mount+0xc4>)
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d002      	beq.n	8014150 <f_mount+0x94>
 801414a:	79fb      	ldrb	r3, [r7, #7]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d001      	beq.n	8014154 <f_mount+0x98>
 8014150:	2300      	movs	r3, #0
 8014152:	e010      	b.n	8014176 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014154:	f107 010c 	add.w	r1, r7, #12
 8014158:	f107 0308 	add.w	r3, r7, #8
 801415c:	2200      	movs	r2, #0
 801415e:	4618      	mov	r0, r3
 8014160:	f7ff fc0a 	bl	8013978 <find_volume>
 8014164:	4603      	mov	r3, r0
 8014166:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	7dfa      	ldrb	r2, [r7, #23]
 801416c:	4611      	mov	r1, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f7fc ffc2 	bl	80110f8 <unlock_fs>
 8014174:	7dfb      	ldrb	r3, [r7, #23]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3720      	adds	r7, #32
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	24002b44 	.word	0x24002b44

08014184 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014188:	b0a8      	sub	sp, #160	@ 0xa0
 801418a:	af00      	add	r7, sp, #0
 801418c:	61f8      	str	r0, [r7, #28]
 801418e:	61b9      	str	r1, [r7, #24]
 8014190:	4613      	mov	r3, r2
 8014192:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d101      	bne.n	801419e <f_open+0x1a>
 801419a:	2309      	movs	r3, #9
 801419c:	e2d3      	b.n	8014746 <f_open+0x5c2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80141a4:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 80141a6:	7dfa      	ldrb	r2, [r7, #23]
 80141a8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80141ac:	f107 0318 	add.w	r3, r7, #24
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff fbe1 	bl	8013978 <find_volume>
 80141b6:	4603      	mov	r3, r0
 80141b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 80141bc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	f040 82b0 	bne.w	8014726 <f_open+0x5a2>
		dj.obj.fs = fs;
 80141c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 80141ca:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 80141ce:	f002 f830 	bl	8016232 <ff_memalloc>
 80141d2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80141d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <f_open+0x68>
 80141de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e0:	2111      	movs	r1, #17
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fc ff88 	bl	80110f8 <unlock_fs>
 80141e8:	2311      	movs	r3, #17
 80141ea:	e2ac      	b.n	8014746 <f_open+0x5c2>
 80141ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80141f2:	60da      	str	r2, [r3, #12]
 80141f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80141fa:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80141fe:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014200:	69ba      	ldr	r2, [r7, #24]
 8014202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014206:	4611      	mov	r1, r2
 8014208:	4618      	mov	r0, r3
 801420a:	f7ff fa63 	bl	80136d4 <follow_path>
 801420e:	4603      	mov	r3, r0
 8014210:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014214:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014218:	2b00      	cmp	r3, #0
 801421a:	d118      	bne.n	801424e <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801421c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8014220:	b25b      	sxtb	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	da03      	bge.n	801422e <f_open+0xaa>
				res = FR_INVALID_NAME;
 8014226:	2306      	movs	r3, #6
 8014228:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801422c:	e00f      	b.n	801424e <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801422e:	7dfb      	ldrb	r3, [r7, #23]
 8014230:	2b01      	cmp	r3, #1
 8014232:	bf8c      	ite	hi
 8014234:	2301      	movhi	r3, #1
 8014236:	2300      	movls	r3, #0
 8014238:	b2db      	uxtb	r3, r3
 801423a:	461a      	mov	r2, r3
 801423c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f7fc ff74 	bl	8011130 <chk_lock>
 8014248:	4603      	mov	r3, r0
 801424a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801424e:	7dfb      	ldrb	r3, [r7, #23]
 8014250:	f003 031c 	and.w	r3, r3, #28
 8014254:	2b00      	cmp	r3, #0
 8014256:	f000 8115 	beq.w	8014484 <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 801425a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801425e:	2b00      	cmp	r3, #0
 8014260:	d017      	beq.n	8014292 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014262:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014266:	2b04      	cmp	r3, #4
 8014268:	d10e      	bne.n	8014288 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801426a:	f7fc ffbd 	bl	80111e8 <enq_lock>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d006      	beq.n	8014282 <f_open+0xfe>
 8014274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014278:	4618      	mov	r0, r3
 801427a:	f7fe fecd 	bl	8013018 <dir_register>
 801427e:	4603      	mov	r3, r0
 8014280:	e000      	b.n	8014284 <f_open+0x100>
 8014282:	2312      	movs	r3, #18
 8014284:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014288:	7dfb      	ldrb	r3, [r7, #23]
 801428a:	f043 0308 	orr.w	r3, r3, #8
 801428e:	75fb      	strb	r3, [r7, #23]
 8014290:	e011      	b.n	80142b6 <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014296:	f003 0311 	and.w	r3, r3, #17
 801429a:	2b00      	cmp	r3, #0
 801429c:	d003      	beq.n	80142a6 <f_open+0x122>
					res = FR_DENIED;
 801429e:	2307      	movs	r3, #7
 80142a0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80142a4:	e007      	b.n	80142b6 <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80142a6:	7dfb      	ldrb	r3, [r7, #23]
 80142a8:	f003 0304 	and.w	r3, r3, #4
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <f_open+0x132>
 80142b0:	2308      	movs	r3, #8
 80142b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80142b6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f040 80fe 	bne.w	80144bc <f_open+0x338>
 80142c0:	7dfb      	ldrb	r3, [r7, #23]
 80142c2:	f003 0308 	and.w	r3, r3, #8
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f000 80f8 	beq.w	80144bc <f_open+0x338>
				dw = GET_FATTIME();
 80142cc:	f7fc f9a4 	bl	8010618 <get_fattime>
 80142d0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80142d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	2b04      	cmp	r3, #4
 80142da:	f040 8084 	bne.w	80143e6 <f_open+0x262>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80142de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80142e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e6:	691b      	ldr	r3, [r3, #16]
 80142e8:	3334      	adds	r3, #52	@ 0x34
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7fc fca3 	bl	8010c36 <ld_dword>
 80142f0:	4602      	mov	r2, r0
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80142f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	3338      	adds	r3, #56	@ 0x38
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7fc fcbd 	bl	8010c7c <ld_qword>
 8014302:	4602      	mov	r2, r0
 8014304:	460b      	mov	r3, r1
 8014306:	69f9      	ldr	r1, [r7, #28]
 8014308:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801430e:	691b      	ldr	r3, [r3, #16]
 8014310:	3321      	adds	r3, #33	@ 0x21
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	f003 0302 	and.w	r3, r3, #2
 8014318:	b2da      	uxtb	r2, r3
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	2200      	movs	r2, #0
 8014322:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8014324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014326:	691b      	ldr	r3, [r3, #16]
 8014328:	3308      	adds	r3, #8
 801432a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801432e:	4618      	mov	r0, r3
 8014330:	f7fc fd9a 	bl	8010e68 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8014334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	3314      	adds	r3, #20
 801433a:	2200      	movs	r2, #0
 801433c:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 801433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014340:	691b      	ldr	r3, [r3, #16]
 8014342:	330c      	adds	r3, #12
 8014344:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8014348:	4618      	mov	r0, r3
 801434a:	f7fc fd8d 	bl	8010e68 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 801434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014350:	691b      	ldr	r3, [r3, #16]
 8014352:	3315      	adds	r3, #21
 8014354:	2200      	movs	r2, #0
 8014356:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8014358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801435a:	691b      	ldr	r3, [r3, #16]
 801435c:	3304      	adds	r3, #4
 801435e:	2220      	movs	r2, #32
 8014360:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8014362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014364:	691b      	ldr	r3, [r3, #16]
 8014366:	3334      	adds	r3, #52	@ 0x34
 8014368:	2100      	movs	r1, #0
 801436a:	4618      	mov	r0, r3
 801436c:	f7fc fd7c 	bl	8010e68 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8014370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8014378:	f04f 0200 	mov.w	r2, #0
 801437c:	f04f 0300 	mov.w	r3, #0
 8014380:	4608      	mov	r0, r1
 8014382:	f7fc fd9d 	bl	8010ec0 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8014386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014388:	691b      	ldr	r3, [r3, #16]
 801438a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801438e:	f04f 0200 	mov.w	r2, #0
 8014392:	f04f 0300 	mov.w	r3, #0
 8014396:	4608      	mov	r0, r1
 8014398:	f7fc fd92 	bl	8010ec0 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	3321      	adds	r3, #33	@ 0x21
 80143a2:	2201      	movs	r2, #1
 80143a4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80143a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fe fb80 	bl	8012ab0 <store_xdir>
 80143b0:	4603      	mov	r3, r0
 80143b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80143b6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d17e      	bne.n	80144bc <f_open+0x338>
 80143be:	69fb      	ldr	r3, [r7, #28]
 80143c0:	689b      	ldr	r3, [r3, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d07a      	beq.n	80144bc <f_open+0x338>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80143c6:	69f8      	ldr	r0, [r7, #28]
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	689b      	ldr	r3, [r3, #8]
 80143cc:	2200      	movs	r2, #0
 80143ce:	4619      	mov	r1, r3
 80143d0:	f7fd fc2c 	bl	8011c2c <remove_chain>
 80143d4:	4603      	mov	r3, r0
 80143d6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	689a      	ldr	r2, [r3, #8]
 80143de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e0:	3a01      	subs	r2, #1
 80143e2:	619a      	str	r2, [r3, #24]
 80143e4:	e06a      	b.n	80144bc <f_open+0x338>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80143e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80143e8:	330e      	adds	r3, #14
 80143ea:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fc fd3a 	bl	8010e68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80143f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80143f6:	3316      	adds	r3, #22
 80143f8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7fc fd33 	bl	8010e68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014404:	330b      	adds	r3, #11
 8014406:	2220      	movs	r2, #32
 8014408:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801440c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801440e:	4611      	mov	r1, r2
 8014410:	4618      	mov	r0, r3
 8014412:	f7fd ffbb 	bl	801238c <ld_clust>
 8014416:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801441c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801441e:	2200      	movs	r2, #0
 8014420:	4618      	mov	r0, r3
 8014422:	f7fd ffd2 	bl	80123ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014428:	331c      	adds	r3, #28
 801442a:	2100      	movs	r1, #0
 801442c:	4618      	mov	r0, r3
 801442e:	f7fc fd1b 	bl	8010e68 <st_dword>
					fs->wflag = 1;
 8014432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014434:	2201      	movs	r2, #1
 8014436:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801443c:	2b00      	cmp	r3, #0
 801443e:	d03d      	beq.n	80144bc <f_open+0x338>
						dw = fs->winsect;
 8014440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 8014448:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801444c:	2200      	movs	r2, #0
 801444e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8014452:	4618      	mov	r0, r3
 8014454:	f7fd fbea 	bl	8011c2c <remove_chain>
 8014458:	4603      	mov	r3, r0
 801445a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 801445e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014462:	2b00      	cmp	r3, #0
 8014464:	d12a      	bne.n	80144bc <f_open+0x338>
							res = move_window(fs, dw);
 8014466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014468:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801446c:	4618      	mov	r0, r3
 801446e:	f7fc ffd3 	bl	8011418 <move_window>
 8014472:	4603      	mov	r3, r0
 8014474:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801447a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801447e:	3a01      	subs	r2, #1
 8014480:	619a      	str	r2, [r3, #24]
 8014482:	e01b      	b.n	80144bc <f_open+0x338>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014484:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014488:	2b00      	cmp	r3, #0
 801448a:	d117      	bne.n	80144bc <f_open+0x338>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801448c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014490:	f003 0310 	and.w	r3, r3, #16
 8014494:	2b00      	cmp	r3, #0
 8014496:	d003      	beq.n	80144a0 <f_open+0x31c>
					res = FR_NO_FILE;
 8014498:	2304      	movs	r3, #4
 801449a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801449e:	e00d      	b.n	80144bc <f_open+0x338>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80144a0:	7dfb      	ldrb	r3, [r7, #23]
 80144a2:	f003 0302 	and.w	r3, r3, #2
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d008      	beq.n	80144bc <f_open+0x338>
 80144aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80144ae:	f003 0301 	and.w	r3, r3, #1
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d002      	beq.n	80144bc <f_open+0x338>
						res = FR_DENIED;
 80144b6:	2307      	movs	r3, #7
 80144b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 80144bc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d126      	bne.n	8014512 <f_open+0x38e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80144c4:	7dfb      	ldrb	r3, [r7, #23]
 80144c6:	f003 0308 	and.w	r3, r3, #8
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d003      	beq.n	80144d6 <f_open+0x352>
				mode |= FA_MODIFIED;
 80144ce:	7dfb      	ldrb	r3, [r7, #23]
 80144d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144d4:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80144d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144da:	69fb      	ldr	r3, [r7, #28]
 80144dc:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 80144de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80144e4:	7dfb      	ldrb	r3, [r7, #23]
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	bf8c      	ite	hi
 80144ea:	2301      	movhi	r3, #1
 80144ec:	2300      	movls	r3, #0
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	461a      	mov	r2, r3
 80144f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80144f6:	4611      	mov	r1, r2
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fc fe97 	bl	801122c <inc_lock>
 80144fe:	4602      	mov	r2, r0
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014508:	2b00      	cmp	r3, #0
 801450a:	d102      	bne.n	8014512 <f_open+0x38e>
 801450c:	2302      	movs	r3, #2
 801450e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014512:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014516:	2b00      	cmp	r3, #0
 8014518:	f040 8101 	bne.w	801471e <f_open+0x59a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	2b04      	cmp	r3, #4
 8014522:	d12d      	bne.n	8014580 <f_open+0x3fc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8014524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801452a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801452e:	4613      	mov	r3, r2
 8014530:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8014534:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014538:	431a      	orrs	r2, r3
 801453a:	69fb      	ldr	r3, [r7, #28]
 801453c:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801453e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8014544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014546:	691b      	ldr	r3, [r3, #16]
 8014548:	3334      	adds	r3, #52	@ 0x34
 801454a:	4618      	mov	r0, r3
 801454c:	f7fc fb73 	bl	8010c36 <ld_dword>
 8014550:	4602      	mov	r2, r0
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8014556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014558:	691b      	ldr	r3, [r3, #16]
 801455a:	3338      	adds	r3, #56	@ 0x38
 801455c:	4618      	mov	r0, r3
 801455e:	f7fc fb8d 	bl	8010c7c <ld_qword>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	69f9      	ldr	r1, [r7, #28]
 8014568:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801456e:	691b      	ldr	r3, [r3, #16]
 8014570:	3321      	adds	r3, #33	@ 0x21
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	f003 0302 	and.w	r3, r3, #2
 8014578:	b2da      	uxtb	r2, r3
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	71da      	strb	r2, [r3, #7]
 801457e:	e016      	b.n	80145ae <f_open+0x42a>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014582:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014584:	4611      	mov	r1, r2
 8014586:	4618      	mov	r0, r3
 8014588:	f7fd ff00 	bl	801238c <ld_clust>
 801458c:	4602      	mov	r2, r0
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014594:	331c      	adds	r3, #28
 8014596:	4618      	mov	r0, r3
 8014598:	f7fc fb4d 	bl	8010c36 <ld_dword>
 801459c:	4603      	mov	r3, r0
 801459e:	2200      	movs	r2, #0
 80145a0:	60bb      	str	r3, [r7, #8]
 80145a2:	60fa      	str	r2, [r7, #12]
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80145aa:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	2200      	movs	r2, #0
 80145b2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80145b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80145ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145bc:	88da      	ldrh	r2, [r3, #6]
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	7dfa      	ldrb	r2, [r7, #23]
 80145c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	2200      	movs	r2, #0
 80145ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	2200      	movs	r2, #0
 80145d6:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80145d8:	69f9      	ldr	r1, [r7, #28]
 80145da:	f04f 0200 	mov.w	r2, #0
 80145de:	f04f 0300 	mov.w	r3, #0
 80145e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	3354      	adds	r3, #84	@ 0x54
 80145ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80145ee:	2100      	movs	r1, #0
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fc fd0e 	bl	8011012 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	f003 0320 	and.w	r3, r3, #32
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	f000 808e 	beq.w	801471e <f_open+0x59a>
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014608:	4313      	orrs	r3, r2
 801460a:	f000 8088 	beq.w	801471e <f_open+0x59a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014614:	69f9      	ldr	r1, [r7, #28]
 8014616:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801461c:	895b      	ldrh	r3, [r3, #10]
 801461e:	025b      	lsls	r3, r3, #9
 8014620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014632:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8014636:	e027      	b.n	8014688 <f_open+0x504>
					clst = get_fat(&fp->obj, clst);
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801463e:	4618      	mov	r0, r3
 8014640:	f7fc ffa6 	bl	8011590 <get_fat>
 8014644:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8014648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801464c:	2b01      	cmp	r3, #1
 801464e:	d802      	bhi.n	8014656 <f_open+0x4d2>
 8014650:	2302      	movs	r3, #2
 8014652:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465e:	d102      	bne.n	8014666 <f_open+0x4e2>
 8014660:	2301      	movs	r3, #1
 8014662:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014666:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801466a:	2200      	movs	r2, #0
 801466c:	469a      	mov	sl, r3
 801466e:	4693      	mov	fp, r2
 8014670:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8014674:	ebb2 010a 	subs.w	r1, r2, sl
 8014678:	6039      	str	r1, [r7, #0]
 801467a:	eb63 030b 	sbc.w	r3, r3, fp
 801467e:	607b      	str	r3, [r7, #4]
 8014680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014684:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8014688:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10a      	bne.n	80146a6 <f_open+0x522>
 8014690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014694:	2200      	movs	r2, #0
 8014696:	4698      	mov	r8, r3
 8014698:	4691      	mov	r9, r2
 801469a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801469e:	4590      	cmp	r8, r2
 80146a0:	eb79 0303 	sbcs.w	r3, r9, r3
 80146a4:	d3c8      	bcc.n	8014638 <f_open+0x4b4>
				}
				fp->clust = clst;
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80146ac:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80146ae:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d133      	bne.n	801471e <f_open+0x59a>
 80146b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80146ba:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80146be:	2500      	movs	r5, #0
 80146c0:	ea54 0305 	orrs.w	r3, r4, r5
 80146c4:	d02b      	beq.n	801471e <f_open+0x59a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80146c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fc ff3f 	bl	8011550 <clust2sect>
 80146d2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80146d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d103      	bne.n	80146e2 <f_open+0x55e>
						res = FR_INT_ERR;
 80146da:	2302      	movs	r3, #2
 80146dc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80146e0:	e01d      	b.n	801471e <f_open+0x59a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80146e2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80146e6:	f04f 0200 	mov.w	r2, #0
 80146ea:	f04f 0300 	mov.w	r3, #0
 80146ee:	0a42      	lsrs	r2, r0, #9
 80146f0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80146f4:	0a4b      	lsrs	r3, r1, #9
 80146f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80146f8:	441a      	add	r2, r3
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80146fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014700:	7858      	ldrb	r0, [r3, #1]
 8014702:	69fb      	ldr	r3, [r7, #28]
 8014704:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014708:	69fb      	ldr	r3, [r7, #28]
 801470a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801470c:	2301      	movs	r3, #1
 801470e:	f7fc fa1b 	bl	8010b48 <disk_read>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <f_open+0x59a>
 8014718:	2301      	movs	r3, #1
 801471a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 801471e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8014722:	f001 fd92 	bl	801624a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014726:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801472a:	2b00      	cmp	r3, #0
 801472c:	d002      	beq.n	8014734 <f_open+0x5b0>
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	2200      	movs	r2, #0
 8014732:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014736:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 801473a:	4611      	mov	r1, r2
 801473c:	4618      	mov	r0, r3
 801473e:	f7fc fcdb 	bl	80110f8 <unlock_fs>
 8014742:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 8014746:	4618      	mov	r0, r3
 8014748:	37a0      	adds	r7, #160	@ 0xa0
 801474a:	46bd      	mov	sp, r7
 801474c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014750 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014754:	b08d      	sub	sp, #52	@ 0x34
 8014756:	af00      	add	r7, sp, #0
 8014758:	60f8      	str	r0, [r7, #12]
 801475a:	60b9      	str	r1, [r7, #8]
 801475c:	607a      	str	r2, [r7, #4]
 801475e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	f107 0210 	add.w	r2, r7, #16
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7ff fc5a 	bl	801402c <validate>
 8014778:	4603      	mov	r3, r0
 801477a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801477e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014782:	2b00      	cmp	r3, #0
 8014784:	d108      	bne.n	8014798 <f_write+0x48>
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801478c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014790:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014794:	2b00      	cmp	r3, #0
 8014796:	d009      	beq.n	80147ac <f_write+0x5c>
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801479e:	4611      	mov	r1, r2
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7fc fca9 	bl	80110f8 <unlock_fs>
 80147a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80147aa:	e1af      	b.n	8014b0c <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80147b2:	f003 0302 	and.w	r3, r3, #2
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d106      	bne.n	80147c8 <f_write+0x78>
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	2107      	movs	r1, #7
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fc fc9a 	bl	80110f8 <unlock_fs>
 80147c4:	2307      	movs	r3, #7
 80147c6:	e1a1      	b.n	8014b0c <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b04      	cmp	r3, #4
 80147ce:	f000 8188 	beq.w	8014ae2 <f_write+0x392>
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	18d1      	adds	r1, r2, r3
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80147e2:	4613      	mov	r3, r2
 80147e4:	4299      	cmp	r1, r3
 80147e6:	f080 817c 	bcs.w	8014ae2 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80147f0:	4613      	mov	r3, r2
 80147f2:	43db      	mvns	r3, r3
 80147f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80147f6:	e174      	b.n	8014ae2 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80147fe:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8014802:	2500      	movs	r5, #0
 8014804:	ea54 0305 	orrs.w	r3, r4, r5
 8014808:	f040 8119 	bne.w	8014a3e <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014812:	f04f 0200 	mov.w	r2, #0
 8014816:	f04f 0300 	mov.w	r3, #0
 801481a:	0a42      	lsrs	r2, r0, #9
 801481c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8014820:	0a4b      	lsrs	r3, r1, #9
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	895b      	ldrh	r3, [r3, #10]
 8014826:	3b01      	subs	r3, #1
 8014828:	4013      	ands	r3, r2
 801482a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d150      	bne.n	80148d4 <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014838:	4313      	orrs	r3, r2
 801483a:	d10c      	bne.n	8014856 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014844:	2b00      	cmp	r3, #0
 8014846:	d11a      	bne.n	801487e <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2100      	movs	r1, #0
 801484c:	4618      	mov	r0, r3
 801484e:	f7fd faa1 	bl	8011d94 <create_chain>
 8014852:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014854:	e013      	b.n	801487e <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801485a:	2b00      	cmp	r3, #0
 801485c:	d007      	beq.n	801486e <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f7fd fb96 	bl	8011f96 <clmt_clust>
 801486a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801486c:	e007      	b.n	801487e <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014874:	4619      	mov	r1, r3
 8014876:	4610      	mov	r0, r2
 8014878:	f7fd fa8c 	bl	8011d94 <create_chain>
 801487c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014880:	2b00      	cmp	r3, #0
 8014882:	f000 8133 	beq.w	8014aec <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014888:	2b01      	cmp	r3, #1
 801488a:	d10a      	bne.n	80148a2 <f_write+0x152>
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2202      	movs	r2, #2
 8014890:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	2102      	movs	r1, #2
 8014898:	4618      	mov	r0, r3
 801489a:	f7fc fc2d 	bl	80110f8 <unlock_fs>
 801489e:	2302      	movs	r3, #2
 80148a0:	e134      	b.n	8014b0c <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80148a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a8:	d10a      	bne.n	80148c0 <f_write+0x170>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2201      	movs	r2, #1
 80148ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	2101      	movs	r1, #1
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7fc fc1e 	bl	80110f8 <unlock_fs>
 80148bc:	2301      	movs	r3, #1
 80148be:	e125      	b.n	8014b0c <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148c4:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d102      	bne.n	80148d4 <f_write+0x184>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80148da:	b25b      	sxtb	r3, r3
 80148dc:	2b00      	cmp	r3, #0
 80148de:	da20      	bge.n	8014922 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	7858      	ldrb	r0, [r3, #1]
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80148ee:	2301      	movs	r3, #1
 80148f0:	f7fc f94a 	bl	8010b88 <disk_write>
 80148f4:	4603      	mov	r3, r0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d00a      	beq.n	8014910 <f_write+0x1c0>
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2201      	movs	r2, #1
 80148fe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	2101      	movs	r1, #1
 8014906:	4618      	mov	r0, r3
 8014908:	f7fc fbf6 	bl	80110f8 <unlock_fs>
 801490c:	2301      	movs	r3, #1
 801490e:	e0fd      	b.n	8014b0c <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801491a:	b2da      	uxtb	r2, r3
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014922:	693a      	ldr	r2, [r7, #16]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014928:	4619      	mov	r1, r3
 801492a:	4610      	mov	r0, r2
 801492c:	f7fc fe10 	bl	8011550 <clust2sect>
 8014930:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d10a      	bne.n	801494e <f_write+0x1fe>
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2202      	movs	r2, #2
 801493c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2102      	movs	r1, #2
 8014944:	4618      	mov	r0, r3
 8014946:	f7fc fbd7 	bl	80110f8 <unlock_fs>
 801494a:	2302      	movs	r3, #2
 801494c:	e0de      	b.n	8014b0c <f_write+0x3bc>
			sect += csect;
 801494e:	697a      	ldr	r2, [r7, #20]
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	4413      	add	r3, r2
 8014954:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	0a5b      	lsrs	r3, r3, #9
 801495a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d044      	beq.n	80149ec <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014962:	69ba      	ldr	r2, [r7, #24]
 8014964:	6a3b      	ldr	r3, [r7, #32]
 8014966:	4413      	add	r3, r2
 8014968:	693a      	ldr	r2, [r7, #16]
 801496a:	8952      	ldrh	r2, [r2, #10]
 801496c:	4293      	cmp	r3, r2
 801496e:	d905      	bls.n	801497c <f_write+0x22c>
					cc = fs->csize - csect;
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	895b      	ldrh	r3, [r3, #10]
 8014974:	461a      	mov	r2, r3
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	7858      	ldrb	r0, [r3, #1]
 8014980:	6a3b      	ldr	r3, [r7, #32]
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	69f9      	ldr	r1, [r7, #28]
 8014986:	f7fc f8ff 	bl	8010b88 <disk_write>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00a      	beq.n	80149a6 <f_write+0x256>
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2201      	movs	r2, #1
 8014994:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	2101      	movs	r1, #1
 801499c:	4618      	mov	r0, r3
 801499e:	f7fc fbab 	bl	80110f8 <unlock_fs>
 80149a2:	2301      	movs	r3, #1
 80149a4:	e0b2      	b.n	8014b0c <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	1ad3      	subs	r3, r2, r3
 80149ae:	6a3a      	ldr	r2, [r7, #32]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d917      	bls.n	80149e4 <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	1ad3      	subs	r3, r2, r3
 80149c2:	025b      	lsls	r3, r3, #9
 80149c4:	69fa      	ldr	r2, [r7, #28]
 80149c6:	4413      	add	r3, r2
 80149c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149cc:	4619      	mov	r1, r3
 80149ce:	f7fc faff 	bl	8010fd0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80149d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80149dc:	b2da      	uxtb	r2, r3
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80149e4:	6a3b      	ldr	r3, [r7, #32]
 80149e6:	025b      	lsls	r3, r3, #9
 80149e8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80149ea:	e04f      	b.n	8014a8c <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149f0:	697a      	ldr	r2, [r7, #20]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d020      	beq.n	8014a38 <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014a02:	4290      	cmp	r0, r2
 8014a04:	eb71 0303 	sbcs.w	r3, r1, r3
 8014a08:	d216      	bcs.n	8014a38 <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	7858      	ldrb	r0, [r3, #1]
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014a14:	2301      	movs	r3, #1
 8014a16:	697a      	ldr	r2, [r7, #20]
 8014a18:	f7fc f896 	bl	8010b48 <disk_read>
 8014a1c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00a      	beq.n	8014a38 <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2201      	movs	r2, #1
 8014a26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	2101      	movs	r1, #1
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fc fb62 	bl	80110f8 <unlock_fs>
 8014a34:	2301      	movs	r3, #1
 8014a36:	e069      	b.n	8014b0c <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	697a      	ldr	r2, [r7, #20]
 8014a3c:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014a44:	4613      	mov	r3, r2
 8014a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a4a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014a4e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d901      	bls.n	8014a5c <f_write+0x30c>
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014a68:	4613      	mov	r3, r2
 8014a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a6e:	440b      	add	r3, r1
 8014a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a72:	69f9      	ldr	r1, [r7, #28]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fc faab 	bl	8010fd0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014a8c:	69fa      	ldr	r2, [r7, #28]
 8014a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a90:	4413      	add	r3, r2
 8014a92:	61fb      	str	r3, [r7, #28]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	4688      	mov	r8, r1
 8014aa0:	4681      	mov	r9, r0
 8014aa2:	eb12 0a08 	adds.w	sl, r2, r8
 8014aa6:	eb43 0b09 	adc.w	fp, r3, r9
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014ab6:	68f9      	ldr	r1, [r7, #12]
 8014ab8:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8014abc:	4282      	cmp	r2, r0
 8014abe:	eb73 0601 	sbcs.w	r6, r3, r1
 8014ac2:	d201      	bcs.n	8014ac8 <f_write+0x378>
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	68f9      	ldr	r1, [r7, #12]
 8014aca:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ad4:	441a      	add	r2, r3
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	601a      	str	r2, [r3, #0]
 8014ada:	687a      	ldr	r2, [r7, #4]
 8014adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ade:	1ad3      	subs	r3, r2, r3
 8014ae0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f47f ae87 	bne.w	80147f8 <f_write+0xa8>
 8014aea:	e000      	b.n	8014aee <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014aec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	2100      	movs	r1, #0
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fc faf7 	bl	80110f8 <unlock_fs>
 8014b0a:	2300      	movs	r3, #0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3734      	adds	r7, #52	@ 0x34
 8014b10:	46bd      	mov	sp, r7
 8014b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014b16:	b580      	push	{r7, lr}
 8014b18:	b09c      	sub	sp, #112	@ 0x70
 8014b1a:	af00      	add	r7, sp, #0
 8014b1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8014b24:	4611      	mov	r1, r2
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7ff fa80 	bl	801402c <validate>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8014b32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f040 8123 	bne.w	8014d82 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 811b 	beq.w	8014d82 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b52:	b25b      	sxtb	r3, r3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	da1c      	bge.n	8014b92 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b5a:	7858      	ldrb	r0, [r3, #1]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014b66:	2301      	movs	r3, #1
 8014b68:	f7fc f80e 	bl	8010b88 <disk_write>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d006      	beq.n	8014b80 <f_sync+0x6a>
 8014b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b74:	2101      	movs	r1, #1
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fc fabe 	bl	80110f8 <unlock_fs>
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e109      	b.n	8014d94 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014b92:	f7fb fd41 	bl	8010618 <get_fattime>
 8014b96:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8014b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	2b04      	cmp	r3, #4
 8014b9e:	f040 80a5 	bne.w	8014cec <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7fc ffe1 	bl	8011b6c <fill_first_frag>
 8014baa:	4603      	mov	r3, r0
 8014bac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8014bb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d10a      	bne.n	8014bce <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	f7fd f801 	bl	8011bca <fill_last_frag>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 8014bce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f040 80d5 	bne.w	8014d82 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8014bd8:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 8014bdc:	f001 fb29 	bl	8016232 <ff_memalloc>
 8014be0:	6638      	str	r0, [r7, #96]	@ 0x60
 8014be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d106      	bne.n	8014bf6 <f_sync+0xe0>
 8014be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bea:	2111      	movs	r1, #17
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7fc fa83 	bl	80110f8 <unlock_fs>
 8014bf2:	2311      	movs	r3, #17
 8014bf4:	e0ce      	b.n	8014d94 <f_sync+0x27e>
 8014bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014bfa:	60da      	str	r2, [r3, #12]
 8014bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014c00:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8014c04:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	f107 0308 	add.w	r3, r7, #8
 8014c0c:	4611      	mov	r1, r2
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7fd ff18 	bl	8012a44 <load_obj_dir>
 8014c14:	4603      	mov	r3, r0
 8014c16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 8014c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d160      	bne.n	8014ce4 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8014c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c24:	691b      	ldr	r3, [r3, #16]
 8014c26:	3304      	adds	r3, #4
 8014c28:	781a      	ldrb	r2, [r3, #0]
 8014c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c2c:	691b      	ldr	r3, [r3, #16]
 8014c2e:	3304      	adds	r3, #4
 8014c30:	f042 0220 	orr.w	r2, r2, #32
 8014c34:	b2d2      	uxtb	r2, r2
 8014c36:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	79da      	ldrb	r2, [r3, #7]
 8014c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c3e:	691b      	ldr	r3, [r3, #16]
 8014c40:	3321      	adds	r3, #33	@ 0x21
 8014c42:	f042 0201 	orr.w	r2, r2, #1
 8014c46:	b2d2      	uxtb	r2, r2
 8014c48:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8014c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	4619      	mov	r1, r3
 8014c58:	4610      	mov	r0, r2
 8014c5a:	f7fc f905 	bl	8010e68 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8014c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c60:	691b      	ldr	r3, [r3, #16]
 8014c62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014c6c:	4608      	mov	r0, r1
 8014c6e:	f7fc f927 	bl	8010ec0 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8014c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014c80:	4608      	mov	r0, r1
 8014c82:	f7fc f91d 	bl	8010ec0 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8014c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c88:	691b      	ldr	r3, [r3, #16]
 8014c8a:	330c      	adds	r3, #12
 8014c8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fc f8ea 	bl	8010e68 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8014c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c96:	691b      	ldr	r3, [r3, #16]
 8014c98:	3315      	adds	r3, #21
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8014c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ca0:	691b      	ldr	r3, [r3, #16]
 8014ca2:	3310      	adds	r3, #16
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7fc f8de 	bl	8010e68 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8014cac:	f107 0308 	add.w	r3, r7, #8
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fd fefd 	bl	8012ab0 <store_xdir>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8014cbc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d10f      	bne.n	8014ce4 <f_sync+0x1ce>
							res = sync_fs(fs);
 8014cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7fc fbd4 	bl	8011474 <sync_fs>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014cdc:	b2da      	uxtb	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 8014ce4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014ce6:	f001 fab0 	bl	801624a <ff_memfree>
 8014cea:	e04a      	b.n	8014d82 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014cec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	4610      	mov	r0, r2
 8014cf6:	f7fc fb8f 	bl	8011418 <move_window>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8014d00:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d13c      	bne.n	8014d82 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d0c:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d10:	330b      	adds	r3, #11
 8014d12:	781a      	ldrb	r2, [r3, #0]
 8014d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d16:	330b      	adds	r3, #11
 8014d18:	f042 0220 	orr.w	r2, r2, #32
 8014d1c:	b2d2      	uxtb	r2, r2
 8014d1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6818      	ldr	r0, [r3, #0]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	689b      	ldr	r3, [r3, #8]
 8014d28:	461a      	mov	r2, r3
 8014d2a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8014d2c:	f7fd fb4d 	bl	80123ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d32:	f103 001c 	add.w	r0, r3, #28
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	4619      	mov	r1, r3
 8014d40:	f7fc f892 	bl	8010e68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d46:	3316      	adds	r3, #22
 8014d48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7fc f88c 	bl	8010e68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d52:	3312      	adds	r3, #18
 8014d54:	2100      	movs	r1, #0
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fc f86b 	bl	8010e32 <st_word>
					fs->wflag = 1;
 8014d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d5e:	2201      	movs	r2, #1
 8014d60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7fc fb85 	bl	8011474 <sync_fs>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014d7a:	b2da      	uxtb	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d84:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8014d88:	4611      	mov	r1, r2
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fc f9b4 	bl	80110f8 <unlock_fs>
 8014d90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3770      	adds	r7, #112	@ 0x70
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8014d9c:	b590      	push	{r4, r7, lr}
 8014d9e:	b0a9      	sub	sp, #164	@ 0xa4
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	607a      	str	r2, [r7, #4]
 8014da6:	603b      	str	r3, [r7, #0]
 8014da8:	460b      	mov	r3, r1
 8014daa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8014dac:	2301      	movs	r3, #1
 8014dae:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014db4:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014db6:	f107 030c 	add.w	r3, r7, #12
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fe fd33 	bl	8013826 <get_ldnumber>
 8014dc0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	da02      	bge.n	8014dce <f_mkfs+0x32>
 8014dc8:	230b      	movs	r3, #11
 8014dca:	f001 b8c3 	b.w	8015f54 <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014dce:	4a9b      	ldr	r2, [pc, #620]	@ (801503c <f_mkfs+0x2a0>)
 8014dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d005      	beq.n	8014de6 <f_mkfs+0x4a>
 8014dda:	4a98      	ldr	r2, [pc, #608]	@ (801503c <f_mkfs+0x2a0>)
 8014ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014de2:	2200      	movs	r2, #0
 8014de4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014de8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014dec:	2300      	movs	r3, #0
 8014dee:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014df2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7fb fe7e 	bl	8010af8 <disk_initialize>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014e02:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8014e06:	f003 0301 	and.w	r3, r3, #1
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d002      	beq.n	8014e14 <f_mkfs+0x78>
 8014e0e:	2303      	movs	r3, #3
 8014e10:	f001 b8a0 	b.w	8015f54 <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014e14:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8014e18:	f003 0304 	and.w	r3, r3, #4
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d002      	beq.n	8014e26 <f_mkfs+0x8a>
 8014e20:	230a      	movs	r3, #10
 8014e22:	f001 b897 	b.w	8015f54 <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014e26:	f107 0220 	add.w	r2, r7, #32
 8014e2a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8014e2e:	2103      	movs	r1, #3
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fb fec9 	bl	8010bc8 <disk_ioctl>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d10c      	bne.n	8014e56 <f_mkfs+0xba>
 8014e3c:	6a3b      	ldr	r3, [r7, #32]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d009      	beq.n	8014e56 <f_mkfs+0xba>
 8014e42:	6a3b      	ldr	r3, [r7, #32]
 8014e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014e48:	d805      	bhi.n	8014e56 <f_mkfs+0xba>
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	1e5a      	subs	r2, r3, #1
 8014e4e:	6a3b      	ldr	r3, [r7, #32]
 8014e50:	4013      	ands	r3, r2
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d001      	beq.n	8014e5a <f_mkfs+0xbe>
 8014e56:	2301      	movs	r3, #1
 8014e58:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014e5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d004      	beq.n	8014e72 <f_mkfs+0xd6>
 8014e68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d309      	bcc.n	8014e86 <f_mkfs+0xea>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014e78:	d805      	bhi.n	8014e86 <f_mkfs+0xea>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	1e5a      	subs	r2, r3, #1
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4013      	ands	r3, r2
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d002      	beq.n	8014e8c <f_mkfs+0xf0>
 8014e86:	2313      	movs	r3, #19
 8014e88:	f001 b864 	b.w	8015f54 <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 8014e8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e96:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014e9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ea0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8014eaa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014eb0:	fb02 f303 	mul.w	r3, r2, r3
 8014eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d102      	bne.n	8014ec2 <f_mkfs+0x126>
 8014ebc:	230e      	movs	r3, #14
 8014ebe:	f001 b849 	b.w	8015f54 <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014ec2:	f107 021c 	add.w	r2, r7, #28
 8014ec6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8014eca:	2101      	movs	r1, #1
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fb fe7b 	bl	8010bc8 <disk_ioctl>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <f_mkfs+0x142>
 8014ed8:	2301      	movs	r3, #1
 8014eda:	f001 b83b 	b.w	8015f54 <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014ede:	7afb      	ldrb	r3, [r7, #11]
 8014ee0:	f003 0308 	and.w	r3, r3, #8
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d001      	beq.n	8014eec <f_mkfs+0x150>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	e000      	b.n	8014eee <f_mkfs+0x152>
 8014eec:	233f      	movs	r3, #63	@ 0x3f
 8014eee:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014ef0:	69fb      	ldr	r3, [r7, #28]
 8014ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d902      	bls.n	8014efe <f_mkfs+0x162>
 8014ef8:	230e      	movs	r3, #14
 8014efa:	f001 b82b 	b.w	8015f54 <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 8014efe:	69fa      	ldr	r2, [r7, #28]
 8014f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014f06:	69fb      	ldr	r3, [r7, #28]
 8014f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8014f0a:	d802      	bhi.n	8014f12 <f_mkfs+0x176>
 8014f0c:	230e      	movs	r3, #14
 8014f0e:	f001 b821 	b.w	8015f54 <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 8014f12:	7afb      	ldrb	r3, [r7, #11]
 8014f14:	f003 0304 	and.w	r3, r3, #4
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d00f      	beq.n	8014f3c <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 8014f1c:	7afb      	ldrb	r3, [r7, #11]
 8014f1e:	f003 0307 	and.w	r3, r3, #7
 8014f22:	2b04      	cmp	r3, #4
 8014f24:	d006      	beq.n	8014f34 <f_mkfs+0x198>
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014f2c:	d202      	bcs.n	8014f34 <f_mkfs+0x198>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2b80      	cmp	r3, #128	@ 0x80
 8014f32:	d903      	bls.n	8014f3c <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 8014f34:	2304      	movs	r3, #4
 8014f36:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014f3a:	e023      	b.n	8014f84 <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b80      	cmp	r3, #128	@ 0x80
 8014f40:	d902      	bls.n	8014f48 <f_mkfs+0x1ac>
 8014f42:	2313      	movs	r3, #19
 8014f44:	f001 b806 	b.w	8015f54 <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014f48:	7afb      	ldrb	r3, [r7, #11]
 8014f4a:	f003 0302 	and.w	r3, r3, #2
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00d      	beq.n	8014f6e <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8014f52:	7afb      	ldrb	r3, [r7, #11]
 8014f54:	f003 0307 	and.w	r3, r3, #7
 8014f58:	2b02      	cmp	r3, #2
 8014f5a:	d004      	beq.n	8014f66 <f_mkfs+0x1ca>
 8014f5c:	7afb      	ldrb	r3, [r7, #11]
 8014f5e:	f003 0301 	and.w	r3, r3, #1
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d103      	bne.n	8014f6e <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 8014f66:	2303      	movs	r3, #3
 8014f68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014f6c:	e00a      	b.n	8014f84 <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8014f6e:	7afb      	ldrb	r3, [r7, #11]
 8014f70:	f003 0301 	and.w	r3, r3, #1
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d102      	bne.n	8014f7e <f_mkfs+0x1e2>
 8014f78:	2313      	movs	r3, #19
 8014f7a:	f000 bfeb 	b.w	8015f54 <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 8014f7e:	2302      	movs	r3, #2
 8014f80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 8014f84:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014f88:	2b04      	cmp	r3, #4
 8014f8a:	f040 842b 	bne.w	80157e4 <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014f94:	d202      	bcs.n	8014f9c <f_mkfs+0x200>
 8014f96:	230e      	movs	r3, #14
 8014f98:	f000 bfdc 	b.w	8015f54 <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10e      	bne.n	8014fc0 <f_mkfs+0x224>
			au = 8;
 8014fa2:	2308      	movs	r3, #8
 8014fa4:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014fac:	d301      	bcc.n	8014fb2 <f_mkfs+0x216>
 8014fae:	2340      	movs	r3, #64	@ 0x40
 8014fb0:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014fb8:	d302      	bcc.n	8014fc0 <f_mkfs+0x224>
 8014fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014fbe:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8014fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fc2:	3320      	adds	r3, #32
 8014fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 8014fc8:	69fa      	ldr	r2, [r7, #28]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fd0:	3302      	adds	r3, #2
 8014fd2:	009a      	lsls	r2, r3, #2
 8014fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014fd8:	4413      	add	r3, r2
 8014fda:	1e5a      	subs	r2, r3, #1
 8014fdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 8014fe8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014ff0:	441a      	add	r2, r3
 8014ff2:	6a3b      	ldr	r3, [r7, #32]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	1e5a      	subs	r2, r3, #1
 8014ff8:	6a3b      	ldr	r3, [r7, #32]
 8014ffa:	425b      	negs	r3, r3
 8014ffc:	4013      	ands	r3, r2
 8014ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	085b      	lsrs	r3, r3, #1
 8015004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015006:	429a      	cmp	r2, r3
 8015008:	d302      	bcc.n	8015010 <f_mkfs+0x274>
 801500a:	230e      	movs	r3, #14
 801500c:	f000 bfa2 	b.w	8015f54 <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 8015010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015014:	1ad2      	subs	r2, r2, r3
 8015016:	69fb      	ldr	r3, [r7, #28]
 8015018:	441a      	add	r2, r3
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015020:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 8015022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015024:	2b0f      	cmp	r3, #15
 8015026:	d802      	bhi.n	801502e <f_mkfs+0x292>
 8015028:	230e      	movs	r3, #14
 801502a:	f000 bf93 	b.w	8015f54 <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 801502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015030:	4a03      	ldr	r2, [pc, #12]	@ (8015040 <f_mkfs+0x2a4>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d906      	bls.n	8015044 <f_mkfs+0x2a8>
 8015036:	230e      	movs	r3, #14
 8015038:	f000 bf8c 	b.w	8015f54 <f_mkfs+0x11b8>
 801503c:	24002b44 	.word	0x24002b44
 8015040:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 8015044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015046:	3307      	adds	r3, #7
 8015048:	08db      	lsrs	r3, r3, #3
 801504a:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 801504c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015050:	687a      	ldr	r2, [r7, #4]
 8015052:	fb03 f202 	mul.w	r2, r3, r2
 8015056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015058:	4413      	add	r3, r2
 801505a:	1e5a      	subs	r2, r3, #1
 801505c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015060:	6879      	ldr	r1, [r7, #4]
 8015062:	fb01 f303 	mul.w	r3, r1, r3
 8015066:	fbb2 f3f3 	udiv	r3, r2, r3
 801506a:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	fb02 f303 	mul.w	r3, r2, r3
 8015074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015076:	4413      	add	r3, r2
 8015078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 801507c:	2300      	movs	r3, #0
 801507e:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 8015080:	2300      	movs	r3, #0
 8015082:	677b      	str	r3, [r7, #116]	@ 0x74
 8015084:	2300      	movs	r3, #0
 8015086:	663b      	str	r3, [r7, #96]	@ 0x60
 8015088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801508a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801508c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801508e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8015092:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8015096:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 8015098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <f_mkfs+0x30a>
 801509e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d040      	beq.n	8015126 <f_mkfs+0x38a>
 80150a4:	e04f      	b.n	8015146 <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 80150a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 fff0 	bl	8016090 <ff_wtoupper>
 80150b0:	4603      	mov	r3, r0
 80150b2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 80150b6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80150ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150be:	429a      	cmp	r2, r3
 80150c0:	d005      	beq.n	80150ce <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 80150c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150c6:	3301      	adds	r3, #1
 80150c8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80150cc:	e049      	b.n	8015162 <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 80150ce:	2301      	movs	r3, #1
 80150d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80150d2:	e002      	b.n	80150da <f_mkfs+0x33e>
 80150d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80150d6:	3301      	adds	r3, #1
 80150d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80150da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80150dc:	b29a      	uxth	r2, r3
 80150de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150e2:	4413      	add	r3, r2
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d011      	beq.n	801510e <f_mkfs+0x372>
 80150ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150f2:	4413      	add	r3, r2
 80150f4:	b29c      	uxth	r4, r3
 80150f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80150fe:	4413      	add	r3, r2
 8015100:	b29b      	uxth	r3, r3
 8015102:	4618      	mov	r0, r3
 8015104:	f000 ffc4 	bl	8016090 <ff_wtoupper>
 8015108:	4603      	mov	r3, r0
 801510a:	429c      	cmp	r4, r3
 801510c:	d0e2      	beq.n	80150d4 <f_mkfs+0x338>
				if (j >= 128) {
 801510e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015110:	2b7f      	cmp	r3, #127	@ 0x7f
 8015112:	d906      	bls.n	8015122 <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 8015114:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015118:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801511c:	2302      	movs	r3, #2
 801511e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015120:	e01f      	b.n	8015162 <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 8015122:	2301      	movs	r3, #1
 8015124:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 8015126:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801512a:	1c5a      	adds	r2, r3, #1
 801512c:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 8015130:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 8015134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015136:	3b01      	subs	r3, #1
 8015138:	663b      	str	r3, [r7, #96]	@ 0x60
 801513a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10f      	bne.n	8015160 <f_mkfs+0x3c4>
 8015140:	2300      	movs	r3, #0
 8015142:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 8015144:	e00c      	b.n	8015160 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 8015146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015148:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801514c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801514e:	b29a      	uxth	r2, r3
 8015150:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8015154:	4413      	add	r3, r2
 8015156:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801515e:	e000      	b.n	8015162 <f_mkfs+0x3c6>
				break;
 8015160:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 8015162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015166:	4413      	add	r3, r2
 8015168:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 801516c:	b2d2      	uxtb	r2, r2
 801516e:	701a      	strb	r2, [r3, #0]
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8015174:	4618      	mov	r0, r3
 8015176:	f7fd fb94 	bl	80128a2 <xsum32>
 801517a:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 801517c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8015180:	0a1b      	lsrs	r3, r3, #8
 8015182:	b299      	uxth	r1, r3
 8015184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015186:	3301      	adds	r3, #1
 8015188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801518a:	4413      	add	r3, r2
 801518c:	b2ca      	uxtb	r2, r1
 801518e:	701a      	strb	r2, [r3, #0]
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8015194:	4618      	mov	r0, r3
 8015196:	f7fd fb84 	bl	80128a2 <xsum32>
 801519a:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 801519c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801519e:	3302      	adds	r3, #2
 80151a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80151a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80151a4:	3302      	adds	r3, #2
 80151a6:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 80151a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d003      	beq.n	80151b8 <f_mkfs+0x41c>
 80151b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80151b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d122      	bne.n	80151fe <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 80151b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80151bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80151be:	4413      	add	r3, r2
 80151c0:	1e5a      	subs	r2, r3, #1
 80151c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80151c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80151ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 80151ce:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80151d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80151d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80151da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80151dc:	f7fb fcd4 	bl	8010b88 <disk_write>
 80151e0:	4603      	mov	r3, r0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d002      	beq.n	80151ec <f_mkfs+0x450>
 80151e6:	2301      	movs	r3, #1
 80151e8:	f000 beb4 	b.w	8015f54 <f_mkfs+0x11b8>
				sect += n; i = 0;
 80151ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80151f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80151f4:	4413      	add	r3, r2
 80151f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80151fa:	2300      	movs	r3, #0
 80151fc:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 80151fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8015202:	2b00      	cmp	r3, #0
 8015204:	f47f af48 	bne.w	8015098 <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 8015208:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	fb03 f202 	mul.w	r2, r3, r2
 8015212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015214:	4413      	add	r3, r2
 8015216:	1e5a      	subs	r2, r3, #1
 8015218:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801521c:	6879      	ldr	r1, [r7, #4]
 801521e:	fb01 f303 	mul.w	r3, r1, r3
 8015222:	fbb2 f3f3 	udiv	r3, r2, r3
 8015226:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 8015228:	2301      	movs	r3, #1
 801522a:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 801522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801522e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015232:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015238:	4413      	add	r3, r2
 801523a:	1e5a      	subs	r2, r3, #1
 801523c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015240:	fbb2 f3f3 	udiv	r3, r2, r3
 8015244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 8015248:	693a      	ldr	r2, [r7, #16]
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	441a      	add	r2, r3
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	4413      	add	r3, r2
 8015252:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 8015254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015256:	2100      	movs	r1, #0
 8015258:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801525a:	f7fb feda 	bl	8011012 <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 801525e:	2300      	movs	r3, #0
 8015260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015262:	e009      	b.n	8015278 <f_mkfs+0x4dc>
 8015264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015266:	1c5a      	adds	r2, r3, #1
 8015268:	67ba      	str	r2, [r7, #120]	@ 0x78
 801526a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801526c:	4413      	add	r3, r2
 801526e:	22ff      	movs	r2, #255	@ 0xff
 8015270:	701a      	strb	r2, [r3, #0]
 8015272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015274:	3b08      	subs	r3, #8
 8015276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801527a:	2b07      	cmp	r3, #7
 801527c:	d903      	bls.n	8015286 <f_mkfs+0x4ea>
 801527e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015282:	429a      	cmp	r2, r3
 8015284:	d3ee      	bcc.n	8015264 <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 8015286:	2301      	movs	r3, #1
 8015288:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801528c:	e013      	b.n	80152b6 <f_mkfs+0x51a>
 801528e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015292:	4413      	add	r3, r2
 8015294:	7819      	ldrb	r1, [r3, #0]
 8015296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801529a:	4413      	add	r3, r2
 801529c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80152a0:	430a      	orrs	r2, r1
 80152a2:	b2d2      	uxtb	r2, r2
 80152a4:	701a      	strb	r2, [r3, #0]
 80152a6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80152b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80152b2:	3b01      	subs	r3, #1
 80152b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80152b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d003      	beq.n	80152c4 <f_mkfs+0x528>
 80152bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80152be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d3e4      	bcc.n	801528e <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 80152c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80152c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152ca:	4293      	cmp	r3, r2
 80152cc:	bf28      	it	cs
 80152ce:	4613      	movcs	r3, r2
 80152d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 80152d4:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80152d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80152e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80152e2:	f7fb fc51 	bl	8010b88 <disk_write>
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d002      	beq.n	80152f2 <f_mkfs+0x556>
 80152ec:	2301      	movs	r3, #1
 80152ee:	f000 be31 	b.w	8015f54 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 80152f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80152f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152fa:	4413      	add	r3, r2
 80152fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015300:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 801530e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015312:	2b00      	cmp	r3, #0
 8015314:	d19e      	bne.n	8015254 <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 8015316:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801531a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801531e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 8015326:	2300      	movs	r3, #0
 8015328:	66bb      	str	r3, [r7, #104]	@ 0x68
 801532a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801532c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801532e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015330:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 8015332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015334:	2100      	movs	r1, #0
 8015336:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015338:	f7fb fe6b 	bl	8011012 <mem_set>
 801533c:	2300      	movs	r3, #0
 801533e:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 8015340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015342:	2b00      	cmp	r3, #0
 8015344:	d134      	bne.n	80153b0 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 8015346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801534a:	4413      	add	r3, r2
 801534c:	f06f 0107 	mvn.w	r1, #7
 8015350:	4618      	mov	r0, r3
 8015352:	f7fb fd89 	bl	8010e68 <st_dword>
 8015356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015358:	3304      	adds	r3, #4
 801535a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801535c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801535e:	3301      	adds	r3, #1
 8015360:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 8015362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015366:	4413      	add	r3, r2
 8015368:	f04f 31ff 	mov.w	r1, #4294967295
 801536c:	4618      	mov	r0, r3
 801536e:	f7fb fd7b 	bl	8010e68 <st_dword>
 8015372:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015374:	3304      	adds	r3, #4
 8015376:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801537a:	3301      	adds	r3, #1
 801537c:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 801537e:	e017      	b.n	80153b0 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 8015380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015384:	441a      	add	r2, r3
 8015386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015388:	2b01      	cmp	r3, #1
 801538a:	d902      	bls.n	8015392 <f_mkfs+0x5f6>
 801538c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801538e:	3301      	adds	r3, #1
 8015390:	e001      	b.n	8015396 <f_mkfs+0x5fa>
 8015392:	f04f 33ff 	mov.w	r3, #4294967295
 8015396:	4619      	mov	r1, r3
 8015398:	4610      	mov	r0, r2
 801539a:	f7fb fd65 	bl	8010e68 <st_dword>
					i += 4; cl++; nb--;
 801539e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153a0:	3304      	adds	r3, #4
 80153a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80153a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80153a6:	3301      	adds	r3, #1
 80153a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80153aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80153ac:	3b01      	subs	r3, #1
 80153ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 80153b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d003      	beq.n	80153be <f_mkfs+0x622>
 80153b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80153b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d3e0      	bcc.n	8015380 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 80153be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10b      	bne.n	80153dc <f_mkfs+0x640>
 80153c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80153c6:	2b02      	cmp	r3, #2
 80153c8:	d808      	bhi.n	80153dc <f_mkfs+0x640>
 80153ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80153cc:	1c5a      	adds	r2, r3, #1
 80153ce:	663a      	str	r2, [r7, #96]	@ 0x60
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	33a0      	adds	r3, #160	@ 0xa0
 80153d4:	443b      	add	r3, r7
 80153d6:	f853 3c90 	ldr.w	r3, [r3, #-144]
 80153da:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 80153dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d003      	beq.n	80153ea <f_mkfs+0x64e>
 80153e2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80153e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d3e2      	bcc.n	80153b0 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 80153ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80153ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153f0:	4293      	cmp	r3, r2
 80153f2:	bf28      	it	cs
 80153f4:	4613      	movcs	r3, r2
 80153f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 80153fa:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80153fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015402:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015408:	f7fb fbbe 	bl	8010b88 <disk_write>
 801540c:	4603      	mov	r3, r0
 801540e:	2b00      	cmp	r3, #0
 8015410:	d002      	beq.n	8015418 <f_mkfs+0x67c>
 8015412:	2301      	movs	r3, #1
 8015414:	f000 bd9e 	b.w	8015f54 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8015418:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015420:	4413      	add	r3, r2
 8015422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015426:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801542e:	1ad3      	subs	r3, r2, r3
 8015430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8015434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015438:	2b00      	cmp	r3, #0
 801543a:	f47f af7a 	bne.w	8015332 <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 801543e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015440:	2100      	movs	r1, #0
 8015442:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015444:	f7fb fde5 	bl	8011012 <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 8015448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801544a:	2283      	movs	r2, #131	@ 0x83
 801544c:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 801544e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015450:	3320      	adds	r3, #32
 8015452:	2281      	movs	r2, #129	@ 0x81
 8015454:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 8015456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015458:	3334      	adds	r3, #52	@ 0x34
 801545a:	2102      	movs	r1, #2
 801545c:	4618      	mov	r0, r3
 801545e:	f7fb fd03 	bl	8010e68 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 8015462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015464:	3338      	adds	r3, #56	@ 0x38
 8015466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015468:	4618      	mov	r0, r3
 801546a:	f7fb fcfd 	bl	8010e68 <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 801546e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015470:	3340      	adds	r3, #64	@ 0x40
 8015472:	2282      	movs	r2, #130	@ 0x82
 8015474:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 8015476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015478:	3344      	adds	r3, #68	@ 0x44
 801547a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801547c:	4618      	mov	r0, r3
 801547e:	f7fb fcf3 	bl	8010e68 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 8015482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015484:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	3302      	adds	r3, #2
 801548c:	4619      	mov	r1, r3
 801548e:	4610      	mov	r0, r2
 8015490:	f7fb fcea 	bl	8010e68 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 8015494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015496:	3358      	adds	r3, #88	@ 0x58
 8015498:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801549a:	4618      	mov	r0, r3
 801549c:	f7fb fce4 	bl	8010e68 <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 80154a0:	693a      	ldr	r2, [r7, #16]
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	4413      	add	r3, r2
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	fb02 f303 	mul.w	r3, r2, r3
 80154ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154ae:	4413      	add	r3, r2
 80154b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80154ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80154be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154c0:	4293      	cmp	r3, r2
 80154c2:	bf28      	it	cs
 80154c4:	4613      	movcs	r3, r2
 80154c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 80154ca:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80154ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80154d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80154d8:	f7fb fb56 	bl	8010b88 <disk_write>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d002      	beq.n	80154e8 <f_mkfs+0x74c>
 80154e2:	2301      	movs	r3, #1
 80154e4:	f000 bd36 	b.w	8015f54 <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 80154e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80154ec:	461a      	mov	r2, r3
 80154ee:	2100      	movs	r1, #0
 80154f0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80154f2:	f7fb fd8e 	bl	8011012 <mem_set>
			sect += n; nsect -= n;
 80154f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80154fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154fe:	4413      	add	r3, r2
 8015500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015504:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801550c:	1ad3      	subs	r3, r2, r3
 801550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8015512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015516:	2b00      	cmp	r3, #0
 8015518:	d1cf      	bne.n	80154ba <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 801551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801551c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 8015520:	2300      	movs	r3, #0
 8015522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015526:	e157      	b.n	80157d8 <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 8015528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801552c:	461a      	mov	r2, r3
 801552e:	2100      	movs	r1, #0
 8015530:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015532:	f7fb fd6e 	bl	8011012 <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8015536:	220b      	movs	r2, #11
 8015538:	49b5      	ldr	r1, [pc, #724]	@ (8015810 <f_mkfs+0xa74>)
 801553a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801553c:	f7fb fd48 	bl	8010fd0 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8015540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015542:	3340      	adds	r3, #64	@ 0x40
 8015544:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015546:	4618      	mov	r0, r3
 8015548:	f7fb fc8e 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 801554c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801554e:	3348      	adds	r3, #72	@ 0x48
 8015550:	69fa      	ldr	r2, [r7, #28]
 8015552:	4611      	mov	r1, r2
 8015554:	4618      	mov	r0, r3
 8015556:	f7fb fc87 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 801555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801555c:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8015560:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	4619      	mov	r1, r3
 801556a:	f7fb fc7d 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 801556e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015570:	3354      	adds	r3, #84	@ 0x54
 8015572:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8015576:	4618      	mov	r0, r3
 8015578:	f7fb fc76 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 801557c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801557e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015586:	1ad3      	subs	r3, r2, r3
 8015588:	4619      	mov	r1, r3
 801558a:	f7fb fc6d 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 801558e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015590:	335c      	adds	r3, #92	@ 0x5c
 8015592:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015594:	4618      	mov	r0, r3
 8015596:	f7fb fc67 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 801559a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801559c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80155a0:	693a      	ldr	r2, [r7, #16]
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	4413      	add	r3, r2
 80155a6:	3302      	adds	r3, #2
 80155a8:	4619      	mov	r1, r3
 80155aa:	f7fb fc5d 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 80155ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155b0:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 80155b4:	f7fb f830 	bl	8010618 <get_fattime>
 80155b8:	4603      	mov	r3, r0
 80155ba:	4619      	mov	r1, r3
 80155bc:	4620      	mov	r0, r4
 80155be:	f7fb fc53 	bl	8010e68 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 80155c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155c4:	3368      	adds	r3, #104	@ 0x68
 80155c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fb fc31 	bl	8010e32 <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 80155d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155d2:	336c      	adds	r3, #108	@ 0x6c
 80155d4:	2200      	movs	r2, #0
 80155d6:	701a      	strb	r2, [r3, #0]
 80155d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80155dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80155de:	e005      	b.n	80155ec <f_mkfs+0x850>
 80155e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155e2:	336c      	adds	r3, #108	@ 0x6c
 80155e4:	781a      	ldrb	r2, [r3, #0]
 80155e6:	3201      	adds	r2, #1
 80155e8:	b2d2      	uxtb	r2, r2
 80155ea:	701a      	strb	r2, [r3, #0]
 80155ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80155ee:	085b      	lsrs	r3, r3, #1
 80155f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80155f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d1f3      	bne.n	80155e0 <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 80155f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155fa:	336d      	adds	r3, #109	@ 0x6d
 80155fc:	2200      	movs	r2, #0
 80155fe:	701a      	strb	r2, [r3, #0]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015604:	e005      	b.n	8015612 <f_mkfs+0x876>
 8015606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015608:	336d      	adds	r3, #109	@ 0x6d
 801560a:	781a      	ldrb	r2, [r3, #0]
 801560c:	3201      	adds	r2, #1
 801560e:	b2d2      	uxtb	r2, r2
 8015610:	701a      	strb	r2, [r3, #0]
 8015612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015614:	085b      	lsrs	r3, r3, #1
 8015616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801561a:	2b00      	cmp	r3, #0
 801561c:	d1f3      	bne.n	8015606 <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 801561e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015620:	336e      	adds	r3, #110	@ 0x6e
 8015622:	2201      	movs	r2, #1
 8015624:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 8015626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015628:	336f      	adds	r3, #111	@ 0x6f
 801562a:	2280      	movs	r2, #128	@ 0x80
 801562c:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 801562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015630:	3378      	adds	r3, #120	@ 0x78
 8015632:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 8015636:	4618      	mov	r0, r3
 8015638:	f7fb fbfb 	bl	8010e32 <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 801563c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801563e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015642:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015646:	4618      	mov	r0, r3
 8015648:	f7fb fbf3 	bl	8010e32 <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 801564c:	2300      	movs	r3, #0
 801564e:	673b      	str	r3, [r7, #112]	@ 0x70
 8015650:	2300      	movs	r3, #0
 8015652:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015654:	e014      	b.n	8015680 <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 8015656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015658:	2b6a      	cmp	r3, #106	@ 0x6a
 801565a:	d00e      	beq.n	801567a <f_mkfs+0x8de>
 801565c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801565e:	2b6b      	cmp	r3, #107	@ 0x6b
 8015660:	d00b      	beq.n	801567a <f_mkfs+0x8de>
 8015662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015664:	2b70      	cmp	r3, #112	@ 0x70
 8015666:	d008      	beq.n	801567a <f_mkfs+0x8de>
 8015668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801566a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801566c:	4413      	add	r3, r2
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8015672:	4618      	mov	r0, r3
 8015674:	f7fd f915 	bl	80128a2 <xsum32>
 8015678:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 801567a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801567c:	3301      	adds	r3, #1
 801567e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015680:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015684:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015686:	429a      	cmp	r2, r3
 8015688:	d3e5      	bcc.n	8015656 <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 801568a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801568e:	1c53      	adds	r3, r2, #1
 8015690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015694:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015698:	2301      	movs	r3, #1
 801569a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801569c:	f7fb fa74 	bl	8010b88 <disk_write>
 80156a0:	4603      	mov	r3, r0
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d002      	beq.n	80156ac <f_mkfs+0x910>
 80156a6:	2301      	movs	r3, #1
 80156a8:	f000 bc54 	b.w	8015f54 <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 80156ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80156b0:	461a      	mov	r2, r3
 80156b2:	2100      	movs	r1, #0
 80156b4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80156b6:	f7fb fcac 	bl	8011012 <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 80156ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80156be:	3b02      	subs	r3, #2
 80156c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156c2:	4413      	add	r3, r2
 80156c4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7fb fbb2 	bl	8010e32 <st_word>
			for (j = 1; j < 9; j++) {
 80156ce:	2301      	movs	r3, #1
 80156d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80156d2:	e026      	b.n	8015722 <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 80156d4:	2300      	movs	r3, #0
 80156d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80156d8:	e00a      	b.n	80156f0 <f_mkfs+0x954>
 80156da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156dc:	1c5a      	adds	r2, r3, #1
 80156de:	67ba      	str	r2, [r7, #120]	@ 0x78
 80156e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156e2:	4413      	add	r3, r2
 80156e4:	781b      	ldrb	r3, [r3, #0]
 80156e6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7fd f8da 	bl	80128a2 <xsum32>
 80156ee:	6738      	str	r0, [r7, #112]	@ 0x70
 80156f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80156f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d3ef      	bcc.n	80156da <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 80156fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80156fe:	1c53      	adds	r3, r2, #1
 8015700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015704:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015708:	2301      	movs	r3, #1
 801570a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801570c:	f7fb fa3c 	bl	8010b88 <disk_write>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d002      	beq.n	801571c <f_mkfs+0x980>
 8015716:	2301      	movs	r3, #1
 8015718:	f000 bc1c 	b.w	8015f54 <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 801571c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801571e:	3301      	adds	r3, #1
 8015720:	663b      	str	r3, [r7, #96]	@ 0x60
 8015722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015724:	2b08      	cmp	r3, #8
 8015726:	d9d5      	bls.n	80156d4 <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 8015728:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801572c:	461a      	mov	r2, r3
 801572e:	2100      	movs	r1, #0
 8015730:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015732:	f7fb fc6e 	bl	8011012 <mem_set>
			for ( ; j < 11; j++) {
 8015736:	e025      	b.n	8015784 <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8015738:	2300      	movs	r3, #0
 801573a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801573c:	e00a      	b.n	8015754 <f_mkfs+0x9b8>
 801573e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015740:	1c5a      	adds	r2, r3, #1
 8015742:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015746:	4413      	add	r3, r2
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801574c:	4618      	mov	r0, r3
 801574e:	f7fd f8a8 	bl	80128a2 <xsum32>
 8015752:	6738      	str	r0, [r7, #112]	@ 0x70
 8015754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015758:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801575a:	429a      	cmp	r2, r3
 801575c:	d3ef      	bcc.n	801573e <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 801575e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015762:	1c53      	adds	r3, r2, #1
 8015764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015768:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801576c:	2301      	movs	r3, #1
 801576e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015770:	f7fb fa0a 	bl	8010b88 <disk_write>
 8015774:	4603      	mov	r3, r0
 8015776:	2b00      	cmp	r3, #0
 8015778:	d001      	beq.n	801577e <f_mkfs+0x9e2>
 801577a:	2301      	movs	r3, #1
 801577c:	e3ea      	b.n	8015f54 <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 801577e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015780:	3301      	adds	r3, #1
 8015782:	663b      	str	r3, [r7, #96]	@ 0x60
 8015784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015786:	2b0a      	cmp	r3, #10
 8015788:	d9d6      	bls.n	8015738 <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 801578a:	2300      	movs	r3, #0
 801578c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801578e:	e009      	b.n	80157a4 <f_mkfs+0xa08>
 8015790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015794:	4413      	add	r3, r2
 8015796:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8015798:	4618      	mov	r0, r3
 801579a:	f7fb fb65 	bl	8010e68 <st_dword>
 801579e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80157a0:	3304      	adds	r3, #4
 80157a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80157a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80157a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d3f0      	bcc.n	8015790 <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 80157ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80157b2:	1c53      	adds	r3, r2, #1
 80157b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80157b8:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80157bc:	2301      	movs	r3, #1
 80157be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80157c0:	f7fb f9e2 	bl	8010b88 <disk_write>
 80157c4:	4603      	mov	r3, r0
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d001      	beq.n	80157ce <f_mkfs+0xa32>
 80157ca:	2301      	movs	r3, #1
 80157cc:	e3c2      	b.n	8015f54 <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 80157ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80157d2:	3301      	adds	r3, #1
 80157d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80157d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80157dc:	2b01      	cmp	r3, #1
 80157de:	f67f aea3 	bls.w	8015528 <f_mkfs+0x78c>
 80157e2:	e324      	b.n	8015e2e <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80157ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	d14a      	bne.n	8015888 <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 80157f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d123      	bne.n	8015842 <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	0c5b      	lsrs	r3, r3, #17
 80157fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015802:	2300      	movs	r3, #0
 8015804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015806:	2301      	movs	r3, #1
 8015808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801580c:	e00a      	b.n	8015824 <f_mkfs+0xa88>
 801580e:	bf00      	nop
 8015810:	0801e10c 	.word	0x0801e10c
 8015814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015816:	3301      	adds	r3, #1
 8015818:	67bb      	str	r3, [r7, #120]	@ 0x78
 801581a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801581e:	005b      	lsls	r3, r3, #1
 8015820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015824:	4aa0      	ldr	r2, [pc, #640]	@ (8015aa8 <f_mkfs+0xd0c>)
 8015826:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d008      	beq.n	8015842 <f_mkfs+0xaa6>
 8015830:	4a9d      	ldr	r2, [pc, #628]	@ (8015aa8 <f_mkfs+0xd0c>)
 8015832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015838:	461a      	mov	r2, r3
 801583a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801583e:	4293      	cmp	r3, r2
 8015840:	d2e8      	bcs.n	8015814 <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8015842:	69fa      	ldr	r2, [r7, #28]
 8015844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015848:	fbb2 f3f3 	udiv	r3, r2, r3
 801584c:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015850:	3302      	adds	r3, #2
 8015852:	009a      	lsls	r2, r3, #2
 8015854:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015858:	4413      	add	r3, r2
 801585a:	1e5a      	subs	r2, r3, #1
 801585c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015860:	fbb2 f3f3 	udiv	r3, r2, r3
 8015864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 8015868:	2320      	movs	r3, #32
 801586a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 801586e:	2300      	movs	r3, #0
 8015870:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015874:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8015878:	4293      	cmp	r3, r2
 801587a:	d903      	bls.n	8015884 <f_mkfs+0xae8>
 801587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801587e:	4a8b      	ldr	r2, [pc, #556]	@ (8015aac <f_mkfs+0xd10>)
 8015880:	4293      	cmp	r3, r2
 8015882:	d959      	bls.n	8015938 <f_mkfs+0xb9c>
 8015884:	230e      	movs	r3, #14
 8015886:	e365      	b.n	8015f54 <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801588c:	2b00      	cmp	r3, #0
 801588e:	d120      	bne.n	80158d2 <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	0b1b      	lsrs	r3, r3, #12
 8015894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015898:	2300      	movs	r3, #0
 801589a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801589c:	2301      	movs	r3, #1
 801589e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80158a2:	e007      	b.n	80158b4 <f_mkfs+0xb18>
 80158a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80158a6:	3301      	adds	r3, #1
 80158a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80158aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80158b4:	4a7e      	ldr	r2, [pc, #504]	@ (8015ab0 <f_mkfs+0xd14>)
 80158b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80158b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d008      	beq.n	80158d2 <f_mkfs+0xb36>
 80158c0:	4a7b      	ldr	r2, [pc, #492]	@ (8015ab0 <f_mkfs+0xd14>)
 80158c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80158c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158c8:	461a      	mov	r2, r3
 80158ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80158ce:	4293      	cmp	r3, r2
 80158d0:	d2e8      	bcs.n	80158a4 <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 80158d2:	69fa      	ldr	r2, [r7, #28]
 80158d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80158d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80158dc:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 80158de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158e0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80158e4:	4293      	cmp	r3, r2
 80158e6:	d905      	bls.n	80158f4 <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80158e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ea:	3302      	adds	r3, #2
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80158f2:	e00b      	b.n	801590c <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 80158f4:	2301      	movs	r3, #1
 80158f6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80158fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80158fc:	4613      	mov	r3, r2
 80158fe:	005b      	lsls	r3, r3, #1
 8015900:	4413      	add	r3, r2
 8015902:	3301      	adds	r3, #1
 8015904:	085b      	lsrs	r3, r3, #1
 8015906:	3303      	adds	r3, #3
 8015908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801590c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015914:	4413      	add	r3, r2
 8015916:	1e5a      	subs	r2, r3, #1
 8015918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 8015924:	2301      	movs	r3, #1
 8015926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801592a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801592c:	015a      	lsls	r2, r3, #5
 801592e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015932:	fbb2 f3f3 	udiv	r3, r2, r3
 8015936:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801593a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801593e:	4413      	add	r3, r2
 8015940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015944:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015948:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801594a:	fb03 f202 	mul.w	r2, r3, r2
 801594e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015952:	4413      	add	r3, r2
 8015954:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015956:	4413      	add	r3, r2
 8015958:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 801595a:	6a3a      	ldr	r2, [r7, #32]
 801595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801595e:	4413      	add	r3, r2
 8015960:	1e5a      	subs	r2, r3, #1
 8015962:	6a3b      	ldr	r3, [r7, #32]
 8015964:	425b      	negs	r3, r3
 8015966:	401a      	ands	r2, r3
 8015968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015970:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015974:	2b03      	cmp	r3, #3
 8015976:	d10e      	bne.n	8015996 <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 8015978:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801597c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015980:	4413      	add	r3, r2
 8015982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015986:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801598a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801598e:	4413      	add	r3, r2
 8015990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8015994:	e009      	b.n	80159aa <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015996:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801599a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80159a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80159a4:	4413      	add	r3, r2
 80159a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80159aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80159ae:	011a      	lsls	r2, r3, #4
 80159b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b2:	441a      	add	r2, r3
 80159b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159b6:	1ad2      	subs	r2, r2, r3
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d901      	bls.n	80159c2 <f_mkfs+0xc26>
 80159be:	230e      	movs	r3, #14
 80159c0:	e2c8      	b.n	8015f54 <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80159c2:	69fa      	ldr	r2, [r7, #28]
 80159c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80159c8:	1ad2      	subs	r2, r2, r3
 80159ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80159ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80159d0:	fb01 f303 	mul.w	r3, r1, r3
 80159d4:	1ad2      	subs	r2, r2, r3
 80159d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80159d8:	1ad2      	subs	r2, r2, r3
 80159da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80159de:	fbb2 f3f3 	udiv	r3, r2, r3
 80159e2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 80159e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80159e8:	2b03      	cmp	r3, #3
 80159ea:	d110      	bne.n	8015a0e <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80159ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80159f2:	4293      	cmp	r3, r2
 80159f4:	d80b      	bhi.n	8015a0e <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d106      	bne.n	8015a0a <f_mkfs+0xc6e>
 80159fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015a00:	085b      	lsrs	r3, r3, #1
 8015a02:	607b      	str	r3, [r7, #4]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d148      	bne.n	8015a9c <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 8015a0a:	230e      	movs	r3, #14
 8015a0c:	e2a2      	b.n	8015f54 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 8015a0e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d137      	bne.n	8015a86 <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a18:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d921      	bls.n	8015a64 <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d109      	bne.n	8015a3a <f_mkfs+0xc9e>
 8015a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015a2a:	005b      	lsls	r3, r3, #1
 8015a2c:	2b40      	cmp	r3, #64	@ 0x40
 8015a2e:	d804      	bhi.n	8015a3a <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015a34:	005b      	lsls	r3, r3, #1
 8015a36:	607b      	str	r3, [r7, #4]
 8015a38:	e035      	b.n	8015aa6 <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 8015a3a:	7afb      	ldrb	r3, [r7, #11]
 8015a3c:	f003 0302 	and.w	r3, r3, #2
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d003      	beq.n	8015a4c <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015a44:	2303      	movs	r3, #3
 8015a46:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8015a4a:	e02c      	b.n	8015aa6 <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d106      	bne.n	8015a60 <f_mkfs+0xcc4>
 8015a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015a56:	005b      	lsls	r3, r3, #1
 8015a58:	607b      	str	r3, [r7, #4]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2b80      	cmp	r3, #128	@ 0x80
 8015a5e:	d91f      	bls.n	8015aa0 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 8015a60:	230e      	movs	r3, #14
 8015a62:	e277      	b.n	8015f54 <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a66:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	d80b      	bhi.n	8015a86 <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d106      	bne.n	8015a82 <f_mkfs+0xce6>
 8015a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	607b      	str	r3, [r7, #4]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b80      	cmp	r3, #128	@ 0x80
 8015a80:	d910      	bls.n	8015aa4 <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 8015a82:	230e      	movs	r3, #14
 8015a84:	e266      	b.n	8015f54 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015a86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d112      	bne.n	8015ab4 <f_mkfs+0xd18>
 8015a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a90:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8015a94:	4293      	cmp	r3, r2
 8015a96:	d90d      	bls.n	8015ab4 <f_mkfs+0xd18>
 8015a98:	230e      	movs	r3, #14
 8015a9a:	e25b      	b.n	8015f54 <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015a9c:	bf00      	nop
 8015a9e:	e6a1      	b.n	80157e4 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015aa0:	bf00      	nop
 8015aa2:	e69f      	b.n	80157e4 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015aa4:	bf00      	nop
			pau = au;
 8015aa6:	e69d      	b.n	80157e4 <f_mkfs+0xa48>
 8015aa8:	0801eb44 	.word	0x0801eb44
 8015aac:	0ffffff5 	.word	0x0ffffff5
 8015ab0:	0801eb54 	.word	0x0801eb54

			/* Ok, it is the valid cluster configuration */
			break;
 8015ab4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015aba:	461a      	mov	r2, r3
 8015abc:	2100      	movs	r1, #0
 8015abe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015ac0:	f7fb faa7 	bl	8011012 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015ac4:	220b      	movs	r2, #11
 8015ac6:	49be      	ldr	r1, [pc, #760]	@ (8015dc0 <f_mkfs+0x1024>)
 8015ac8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015aca:	f7fb fa81 	bl	8010fd0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ad0:	330b      	adds	r3, #11
 8015ad2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015ad6:	4611      	mov	r1, r2
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f7fb f9aa 	bl	8010e32 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ae0:	330d      	adds	r3, #13
 8015ae2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8015ae6:	b2d2      	uxtb	r2, r2
 8015ae8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015aec:	330e      	adds	r3, #14
 8015aee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015af2:	b292      	uxth	r2, r2
 8015af4:	4611      	mov	r1, r2
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fb f99b 	bl	8010e32 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015afe:	3310      	adds	r3, #16
 8015b00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015b02:	b2d2      	uxtb	r2, r2
 8015b04:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b08:	f103 0211 	add.w	r2, r3, #17
 8015b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015b10:	2b03      	cmp	r3, #3
 8015b12:	d002      	beq.n	8015b1a <f_mkfs+0xd7e>
 8015b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	e000      	b.n	8015b1c <f_mkfs+0xd80>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	4610      	mov	r0, r2
 8015b20:	f7fb f987 	bl	8010e32 <st_word>
		if (sz_vol < 0x10000) {
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b2a:	d208      	bcs.n	8015b3e <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b2e:	3313      	adds	r3, #19
 8015b30:	69fa      	ldr	r2, [r7, #28]
 8015b32:	b292      	uxth	r2, r2
 8015b34:	4611      	mov	r1, r2
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fb f97b 	bl	8010e32 <st_word>
 8015b3c:	e006      	b.n	8015b4c <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b40:	3320      	adds	r3, #32
 8015b42:	69fa      	ldr	r2, [r7, #28]
 8015b44:	4611      	mov	r1, r2
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7fb f98e 	bl	8010e68 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b4e:	3315      	adds	r3, #21
 8015b50:	22f8      	movs	r2, #248	@ 0xf8
 8015b52:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b56:	3318      	adds	r3, #24
 8015b58:	213f      	movs	r1, #63	@ 0x3f
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7fb f969 	bl	8010e32 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b62:	331a      	adds	r3, #26
 8015b64:	21ff      	movs	r1, #255	@ 0xff
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7fb f963 	bl	8010e32 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b6e:	331c      	adds	r3, #28
 8015b70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fb f978 	bl	8010e68 <st_dword>
		if (fmt == FS_FAT32) {
 8015b78:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015b7c:	2b03      	cmp	r3, #3
 8015b7e:	d132      	bne.n	8015be6 <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b82:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8015b86:	f7fa fd47 	bl	8010618 <get_fattime>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	4620      	mov	r0, r4
 8015b90:	f7fb f96a 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b96:	3324      	adds	r3, #36	@ 0x24
 8015b98:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f7fb f963 	bl	8010e68 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ba4:	332c      	adds	r3, #44	@ 0x2c
 8015ba6:	2102      	movs	r1, #2
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7fb f95d 	bl	8010e68 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bb0:	3330      	adds	r3, #48	@ 0x30
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7fb f93c 	bl	8010e32 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bbc:	3332      	adds	r3, #50	@ 0x32
 8015bbe:	2106      	movs	r1, #6
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7fb f936 	bl	8010e32 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bc8:	3340      	adds	r3, #64	@ 0x40
 8015bca:	2280      	movs	r2, #128	@ 0x80
 8015bcc:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bd0:	3342      	adds	r3, #66	@ 0x42
 8015bd2:	2229      	movs	r2, #41	@ 0x29
 8015bd4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bd8:	3347      	adds	r3, #71	@ 0x47
 8015bda:	2213      	movs	r2, #19
 8015bdc:	4979      	ldr	r1, [pc, #484]	@ (8015dc4 <f_mkfs+0x1028>)
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7fb f9f6 	bl	8010fd0 <mem_cpy>
 8015be4:	e021      	b.n	8015c2a <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8015be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015be8:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8015bec:	f7fa fd14 	bl	8010618 <get_fattime>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	f7fb f937 	bl	8010e68 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8015bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bfc:	3316      	adds	r3, #22
 8015bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015c02:	b292      	uxth	r2, r2
 8015c04:	4611      	mov	r1, r2
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7fb f913 	bl	8010e32 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8015c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c0e:	3324      	adds	r3, #36	@ 0x24
 8015c10:	2280      	movs	r2, #128	@ 0x80
 8015c12:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8015c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c16:	3326      	adds	r3, #38	@ 0x26
 8015c18:	2229      	movs	r2, #41	@ 0x29
 8015c1a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8015c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c1e:	332b      	adds	r3, #43	@ 0x2b
 8015c20:	2213      	movs	r2, #19
 8015c22:	4969      	ldr	r1, [pc, #420]	@ (8015dc8 <f_mkfs+0x102c>)
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7fb f9d3 	bl	8010fd0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8015c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015c30:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7fb f8fc 	bl	8010e32 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8015c3a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015c3e:	2301      	movs	r3, #1
 8015c40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015c44:	f7fa ffa0 	bl	8010b88 <disk_write>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d001      	beq.n	8015c52 <f_mkfs+0xeb6>
 8015c4e:	2301      	movs	r3, #1
 8015c50:	e180      	b.n	8015f54 <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8015c52:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015c56:	2b03      	cmp	r3, #3
 8015c58:	d141      	bne.n	8015cde <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c5c:	1d9a      	adds	r2, r3, #6
 8015c5e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015c62:	2301      	movs	r3, #1
 8015c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015c66:	f7fa ff8f 	bl	8010b88 <disk_write>
			mem_set(buf, 0, ss);
 8015c6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015c6e:	461a      	mov	r2, r3
 8015c70:	2100      	movs	r1, #0
 8015c72:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015c74:	f7fb f9cd 	bl	8011012 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8015c78:	4954      	ldr	r1, [pc, #336]	@ (8015dcc <f_mkfs+0x1030>)
 8015c7a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015c7c:	f7fb f8f4 	bl	8010e68 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8015c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c82:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015c86:	4952      	ldr	r1, [pc, #328]	@ (8015dd0 <f_mkfs+0x1034>)
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7fb f8ed 	bl	8010e68 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c90:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8015c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c96:	3b01      	subs	r3, #1
 8015c98:	4619      	mov	r1, r3
 8015c9a:	4610      	mov	r0, r2
 8015c9c:	f7fb f8e4 	bl	8010e68 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ca2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8015ca6:	2102      	movs	r1, #2
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7fb f8dd 	bl	8010e68 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015cb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015cb4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7fb f8ba 	bl	8010e32 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cc0:	1dda      	adds	r2, r3, #7
 8015cc2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015cc6:	2301      	movs	r3, #1
 8015cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015cca:	f7fa ff5d 	bl	8010b88 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cd0:	1c5a      	adds	r2, r3, #1
 8015cd2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015cda:	f7fa ff55 	bl	8010b88 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8015cde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015ce4:	f7fb f995 	bl	8011012 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8015ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015cf4:	e059      	b.n	8015daa <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 8015cf6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015cfa:	2b03      	cmp	r3, #3
 8015cfc:	d113      	bne.n	8015d26 <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8015cfe:	f06f 0107 	mvn.w	r1, #7
 8015d02:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015d04:	f7fb f8b0 	bl	8010e68 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8015d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7fb f8a9 	bl	8010e68 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8015d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d18:	3308      	adds	r3, #8
 8015d1a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7fb f8a2 	bl	8010e68 <st_dword>
 8015d24:	e00b      	b.n	8015d3e <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8015d26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015d2a:	2b01      	cmp	r3, #1
 8015d2c:	d101      	bne.n	8015d32 <f_mkfs+0xf96>
 8015d2e:	4b29      	ldr	r3, [pc, #164]	@ (8015dd4 <f_mkfs+0x1038>)
 8015d30:	e001      	b.n	8015d36 <f_mkfs+0xf9a>
 8015d32:	f06f 0307 	mvn.w	r3, #7
 8015d36:	4619      	mov	r1, r3
 8015d38:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015d3a:	f7fb f895 	bl	8010e68 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8015d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015d46:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	bf28      	it	cs
 8015d50:	4613      	movcs	r3, r2
 8015d52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015d56:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015d62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015d64:	f7fa ff10 	bl	8010b88 <disk_write>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d001      	beq.n	8015d72 <f_mkfs+0xfd6>
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e0f0      	b.n	8015f54 <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 8015d72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015d76:	461a      	mov	r2, r3
 8015d78:	2100      	movs	r1, #0
 8015d7a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015d7c:	f7fb f949 	bl	8011012 <mem_set>
				sect += n; nsect -= n;
 8015d80:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d88:	4413      	add	r3, r2
 8015d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015d8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d96:	1ad3      	subs	r3, r2, r3
 8015d98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 8015d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d1d0      	bne.n	8015d46 <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015da6:	3301      	adds	r3, #1
 8015da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015daa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d3a1      	bcc.n	8015cf6 <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015db2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015db6:	2b03      	cmp	r3, #3
 8015db8:	d10e      	bne.n	8015dd8 <f_mkfs+0x103c>
 8015dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015dbe:	e00c      	b.n	8015dda <f_mkfs+0x103e>
 8015dc0:	0801e118 	.word	0x0801e118
 8015dc4:	0801e124 	.word	0x0801e124
 8015dc8:	0801e138 	.word	0x0801e138
 8015dcc:	41615252 	.word	0x41615252
 8015dd0:	61417272 	.word	0x61417272
 8015dd4:	00fffff8 	.word	0x00fffff8
 8015dd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015dde:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015de4:	4293      	cmp	r3, r2
 8015de6:	bf28      	it	cs
 8015de8:	4613      	movcs	r3, r2
 8015dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015dee:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015df6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015dfc:	f7fa fec4 	bl	8010b88 <disk_write>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <f_mkfs+0x106e>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e0a4      	b.n	8015f54 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8015e0a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8015e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015e12:	4413      	add	r3, r2
 8015e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015e18:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8015e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8015e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1d7      	bne.n	8015dde <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 8015e2e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e32:	2b04      	cmp	r3, #4
 8015e34:	d103      	bne.n	8015e3e <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 8015e36:	2307      	movs	r3, #7
 8015e38:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015e3c:	e018      	b.n	8015e70 <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 8015e3e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e42:	2b03      	cmp	r3, #3
 8015e44:	d103      	bne.n	8015e4e <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 8015e46:	230c      	movs	r3, #12
 8015e48:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015e4c:	e010      	b.n	8015e70 <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 8015e4e:	69fb      	ldr	r3, [r7, #28]
 8015e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e54:	d303      	bcc.n	8015e5e <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8015e56:	2306      	movs	r3, #6
 8015e58:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015e5c:	e008      	b.n	8015e70 <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8015e5e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e62:	2b02      	cmp	r3, #2
 8015e64:	d101      	bne.n	8015e6a <f_mkfs+0x10ce>
 8015e66:	2304      	movs	r3, #4
 8015e68:	e000      	b.n	8015e6c <f_mkfs+0x10d0>
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8015e70:	7afb      	ldrb	r3, [r7, #11]
 8015e72:	f003 0308 	and.w	r3, r3, #8
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d15f      	bne.n	8015f3a <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 8015e7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e7e:	461a      	mov	r2, r3
 8015e80:	2100      	movs	r1, #0
 8015e82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015e84:	f7fb f8c5 	bl	8011012 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8015e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015e8e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7fa ffcd 	bl	8010e32 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8015e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e9a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8015e9e:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8015ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	2201      	movs	r2, #1
 8015eac:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8015eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb0:	3302      	adds	r3, #2
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8015eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb8:	3303      	adds	r3, #3
 8015eba:	2200      	movs	r2, #0
 8015ebc:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8015ec6:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8015ec8:	69fa      	ldr	r2, [r7, #28]
 8015eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ecc:	441a      	add	r2, r3
 8015ece:	4b23      	ldr	r3, [pc, #140]	@ (8015f5c <f_mkfs+0x11c0>)
 8015ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8015ed4:	1ad2      	subs	r2, r2, r3
 8015ed6:	0852      	lsrs	r2, r2, #1
 8015ed8:	4413      	add	r3, r2
 8015eda:	0b5b      	lsrs	r3, r3, #13
 8015edc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee2:	3305      	adds	r3, #5
 8015ee4:	22fe      	movs	r2, #254	@ 0xfe
 8015ee6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8015ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015eec:	089b      	lsrs	r3, r3, #2
 8015eee:	b2da      	uxtb	r2, r3
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef2:	3306      	adds	r3, #6
 8015ef4:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8015ef8:	b2d2      	uxtb	r2, r2
 8015efa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8015efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efe:	3307      	adds	r3, #7
 8015f00:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8015f04:	b2d2      	uxtb	r2, r2
 8015f06:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8015f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0a:	3308      	adds	r3, #8
 8015f0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fa ffaa 	bl	8010e68 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8015f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f16:	330c      	adds	r3, #12
 8015f18:	69fa      	ldr	r2, [r7, #28]
 8015f1a:	4611      	mov	r1, r2
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7fa ffa3 	bl	8010e68 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8015f22:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8015f26:	2301      	movs	r3, #1
 8015f28:	2200      	movs	r2, #0
 8015f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015f2c:	f7fa fe2c 	bl	8010b88 <disk_write>
 8015f30:	4603      	mov	r3, r0
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d001      	beq.n	8015f3a <f_mkfs+0x119e>
 8015f36:	2301      	movs	r3, #1
 8015f38:	e00c      	b.n	8015f54 <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8015f3a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8015f3e:	2200      	movs	r2, #0
 8015f40:	2100      	movs	r1, #0
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fa fe40 	bl	8010bc8 <disk_ioctl>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d001      	beq.n	8015f52 <f_mkfs+0x11b6>
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e000      	b.n	8015f54 <f_mkfs+0x11b8>

	return FR_OK;
 8015f52:	2300      	movs	r3, #0
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	37a4      	adds	r7, #164	@ 0xa4
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd90      	pop	{r4, r7, pc}
 8015f5c:	0515565b 	.word	0x0515565b

08015f60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015f60:	b480      	push	{r7}
 8015f62:	b087      	sub	sp, #28
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015f72:	2300      	movs	r3, #0
 8015f74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015f76:	4b1f      	ldr	r3, [pc, #124]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015f78:	7a5b      	ldrb	r3, [r3, #9]
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d131      	bne.n	8015fe4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015f80:	4b1c      	ldr	r3, [pc, #112]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015f82:	7a5b      	ldrb	r3, [r3, #9]
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	461a      	mov	r2, r3
 8015f88:	4b1a      	ldr	r3, [pc, #104]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015f8e:	4b19      	ldr	r3, [pc, #100]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015f90:	7a5b      	ldrb	r3, [r3, #9]
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	4a17      	ldr	r2, [pc, #92]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015f96:	009b      	lsls	r3, r3, #2
 8015f98:	4413      	add	r3, r2
 8015f9a:	68fa      	ldr	r2, [r7, #12]
 8015f9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015f9e:	4b15      	ldr	r3, [pc, #84]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015fa0:	7a5b      	ldrb	r3, [r3, #9]
 8015fa2:	b2db      	uxtb	r3, r3
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	4b13      	ldr	r3, [pc, #76]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015fa8:	4413      	add	r3, r2
 8015faa:	79fa      	ldrb	r2, [r7, #7]
 8015fac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015fae:	4b11      	ldr	r3, [pc, #68]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015fb0:	7a5b      	ldrb	r3, [r3, #9]
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	1c5a      	adds	r2, r3, #1
 8015fb6:	b2d1      	uxtb	r1, r2
 8015fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8015ff4 <FATFS_LinkDriverEx+0x94>)
 8015fba:	7251      	strb	r1, [r2, #9]
 8015fbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015fbe:	7dbb      	ldrb	r3, [r7, #22]
 8015fc0:	3330      	adds	r3, #48	@ 0x30
 8015fc2:	b2da      	uxtb	r2, r3
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	3301      	adds	r3, #1
 8015fcc:	223a      	movs	r2, #58	@ 0x3a
 8015fce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	3302      	adds	r3, #2
 8015fd4:	222f      	movs	r2, #47	@ 0x2f
 8015fd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	3303      	adds	r3, #3
 8015fdc:	2200      	movs	r2, #0
 8015fde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	371c      	adds	r7, #28
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop
 8015ff4:	24002b6c 	.word	0x24002b6c

08015ff8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016002:	2200      	movs	r2, #0
 8016004:	6839      	ldr	r1, [r7, #0]
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f7ff ffaa 	bl	8015f60 <FATFS_LinkDriverEx>
 801600c:	4603      	mov	r3, r0
}
 801600e:	4618      	mov	r0, r3
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
	...

08016018 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016018:	b480      	push	{r7}
 801601a:	b085      	sub	sp, #20
 801601c:	af00      	add	r7, sp, #0
 801601e:	4603      	mov	r3, r0
 8016020:	6039      	str	r1, [r7, #0]
 8016022:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016024:	88fb      	ldrh	r3, [r7, #6]
 8016026:	2b7f      	cmp	r3, #127	@ 0x7f
 8016028:	d802      	bhi.n	8016030 <ff_convert+0x18>
		c = chr;
 801602a:	88fb      	ldrh	r3, [r7, #6]
 801602c:	81fb      	strh	r3, [r7, #14]
 801602e:	e025      	b.n	801607c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d00b      	beq.n	801604e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016036:	88fb      	ldrh	r3, [r7, #6]
 8016038:	2bff      	cmp	r3, #255	@ 0xff
 801603a:	d805      	bhi.n	8016048 <ff_convert+0x30>
 801603c:	88fb      	ldrh	r3, [r7, #6]
 801603e:	3b80      	subs	r3, #128	@ 0x80
 8016040:	4a12      	ldr	r2, [pc, #72]	@ (801608c <ff_convert+0x74>)
 8016042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016046:	e000      	b.n	801604a <ff_convert+0x32>
 8016048:	2300      	movs	r3, #0
 801604a:	81fb      	strh	r3, [r7, #14]
 801604c:	e016      	b.n	801607c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801604e:	2300      	movs	r3, #0
 8016050:	81fb      	strh	r3, [r7, #14]
 8016052:	e009      	b.n	8016068 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016054:	89fb      	ldrh	r3, [r7, #14]
 8016056:	4a0d      	ldr	r2, [pc, #52]	@ (801608c <ff_convert+0x74>)
 8016058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801605c:	88fa      	ldrh	r2, [r7, #6]
 801605e:	429a      	cmp	r2, r3
 8016060:	d006      	beq.n	8016070 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016062:	89fb      	ldrh	r3, [r7, #14]
 8016064:	3301      	adds	r3, #1
 8016066:	81fb      	strh	r3, [r7, #14]
 8016068:	89fb      	ldrh	r3, [r7, #14]
 801606a:	2b7f      	cmp	r3, #127	@ 0x7f
 801606c:	d9f2      	bls.n	8016054 <ff_convert+0x3c>
 801606e:	e000      	b.n	8016072 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016070:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016072:	89fb      	ldrh	r3, [r7, #14]
 8016074:	3380      	adds	r3, #128	@ 0x80
 8016076:	b29b      	uxth	r3, r3
 8016078:	b2db      	uxtb	r3, r3
 801607a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801607c:	89fb      	ldrh	r3, [r7, #14]
}
 801607e:	4618      	mov	r0, r3
 8016080:	3714      	adds	r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	0801eb64 	.word	0x0801eb64

08016090 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016090:	b480      	push	{r7}
 8016092:	b087      	sub	sp, #28
 8016094:	af00      	add	r7, sp, #0
 8016096:	4603      	mov	r3, r0
 8016098:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801609a:	88fb      	ldrh	r3, [r7, #6]
 801609c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80160a0:	d201      	bcs.n	80160a6 <ff_wtoupper+0x16>
 80160a2:	4b3e      	ldr	r3, [pc, #248]	@ (801619c <ff_wtoupper+0x10c>)
 80160a4:	e000      	b.n	80160a8 <ff_wtoupper+0x18>
 80160a6:	4b3e      	ldr	r3, [pc, #248]	@ (80161a0 <ff_wtoupper+0x110>)
 80160a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	1c9a      	adds	r2, r3, #2
 80160ae:	617a      	str	r2, [r7, #20]
 80160b0:	881b      	ldrh	r3, [r3, #0]
 80160b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80160b4:	8a7b      	ldrh	r3, [r7, #18]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d068      	beq.n	801618c <ff_wtoupper+0xfc>
 80160ba:	88fa      	ldrh	r2, [r7, #6]
 80160bc:	8a7b      	ldrh	r3, [r7, #18]
 80160be:	429a      	cmp	r2, r3
 80160c0:	d364      	bcc.n	801618c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	1c9a      	adds	r2, r3, #2
 80160c6:	617a      	str	r2, [r7, #20]
 80160c8:	881b      	ldrh	r3, [r3, #0]
 80160ca:	823b      	strh	r3, [r7, #16]
 80160cc:	8a3b      	ldrh	r3, [r7, #16]
 80160ce:	0a1b      	lsrs	r3, r3, #8
 80160d0:	81fb      	strh	r3, [r7, #14]
 80160d2:	8a3b      	ldrh	r3, [r7, #16]
 80160d4:	b2db      	uxtb	r3, r3
 80160d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80160d8:	88fa      	ldrh	r2, [r7, #6]
 80160da:	8a79      	ldrh	r1, [r7, #18]
 80160dc:	8a3b      	ldrh	r3, [r7, #16]
 80160de:	440b      	add	r3, r1
 80160e0:	429a      	cmp	r2, r3
 80160e2:	da49      	bge.n	8016178 <ff_wtoupper+0xe8>
			switch (cmd) {
 80160e4:	89fb      	ldrh	r3, [r7, #14]
 80160e6:	2b08      	cmp	r3, #8
 80160e8:	d84f      	bhi.n	801618a <ff_wtoupper+0xfa>
 80160ea:	a201      	add	r2, pc, #4	@ (adr r2, 80160f0 <ff_wtoupper+0x60>)
 80160ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160f0:	08016115 	.word	0x08016115
 80160f4:	08016127 	.word	0x08016127
 80160f8:	0801613d 	.word	0x0801613d
 80160fc:	08016145 	.word	0x08016145
 8016100:	0801614d 	.word	0x0801614d
 8016104:	08016155 	.word	0x08016155
 8016108:	0801615d 	.word	0x0801615d
 801610c:	08016165 	.word	0x08016165
 8016110:	0801616d 	.word	0x0801616d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016114:	88fa      	ldrh	r2, [r7, #6]
 8016116:	8a7b      	ldrh	r3, [r7, #18]
 8016118:	1ad3      	subs	r3, r2, r3
 801611a:	005b      	lsls	r3, r3, #1
 801611c:	697a      	ldr	r2, [r7, #20]
 801611e:	4413      	add	r3, r2
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	80fb      	strh	r3, [r7, #6]
 8016124:	e027      	b.n	8016176 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016126:	88fa      	ldrh	r2, [r7, #6]
 8016128:	8a7b      	ldrh	r3, [r7, #18]
 801612a:	1ad3      	subs	r3, r2, r3
 801612c:	b29b      	uxth	r3, r3
 801612e:	f003 0301 	and.w	r3, r3, #1
 8016132:	b29b      	uxth	r3, r3
 8016134:	88fa      	ldrh	r2, [r7, #6]
 8016136:	1ad3      	subs	r3, r2, r3
 8016138:	80fb      	strh	r3, [r7, #6]
 801613a:	e01c      	b.n	8016176 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801613c:	88fb      	ldrh	r3, [r7, #6]
 801613e:	3b10      	subs	r3, #16
 8016140:	80fb      	strh	r3, [r7, #6]
 8016142:	e018      	b.n	8016176 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016144:	88fb      	ldrh	r3, [r7, #6]
 8016146:	3b20      	subs	r3, #32
 8016148:	80fb      	strh	r3, [r7, #6]
 801614a:	e014      	b.n	8016176 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801614c:	88fb      	ldrh	r3, [r7, #6]
 801614e:	3b30      	subs	r3, #48	@ 0x30
 8016150:	80fb      	strh	r3, [r7, #6]
 8016152:	e010      	b.n	8016176 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016154:	88fb      	ldrh	r3, [r7, #6]
 8016156:	3b1a      	subs	r3, #26
 8016158:	80fb      	strh	r3, [r7, #6]
 801615a:	e00c      	b.n	8016176 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801615c:	88fb      	ldrh	r3, [r7, #6]
 801615e:	3308      	adds	r3, #8
 8016160:	80fb      	strh	r3, [r7, #6]
 8016162:	e008      	b.n	8016176 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016164:	88fb      	ldrh	r3, [r7, #6]
 8016166:	3b50      	subs	r3, #80	@ 0x50
 8016168:	80fb      	strh	r3, [r7, #6]
 801616a:	e004      	b.n	8016176 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801616c:	88fb      	ldrh	r3, [r7, #6]
 801616e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8016172:	80fb      	strh	r3, [r7, #6]
 8016174:	bf00      	nop
			}
			break;
 8016176:	e008      	b.n	801618a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016178:	89fb      	ldrh	r3, [r7, #14]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d195      	bne.n	80160aa <ff_wtoupper+0x1a>
 801617e:	8a3b      	ldrh	r3, [r7, #16]
 8016180:	005b      	lsls	r3, r3, #1
 8016182:	697a      	ldr	r2, [r7, #20]
 8016184:	4413      	add	r3, r2
 8016186:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016188:	e78f      	b.n	80160aa <ff_wtoupper+0x1a>
			break;
 801618a:	bf00      	nop
	}

	return chr;
 801618c:	88fb      	ldrh	r3, [r7, #6]
}
 801618e:	4618      	mov	r0, r3
 8016190:	371c      	adds	r7, #28
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop
 801619c:	0801ec64 	.word	0x0801ec64
 80161a0:	0801ee58 	.word	0x0801ee58

080161a4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	4603      	mov	r3, r0
 80161ac:	6039      	str	r1, [r7, #0]
 80161ae:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80161b0:	2200      	movs	r2, #0
 80161b2:	2101      	movs	r1, #1
 80161b4:	2001      	movs	r0, #1
 80161b6:	f000 f9fd 	bl	80165b4 <osSemaphoreNew>
 80161ba:	4602      	mov	r2, r0
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	bf14      	ite	ne
 80161c8:	2301      	movne	r3, #1
 80161ca:	2300      	moveq	r3, #0
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	60fb      	str	r3, [r7, #12]

    return ret;
 80161d0:	68fb      	ldr	r3, [r7, #12]
}
 80161d2:	4618      	mov	r0, r3
 80161d4:	3710      	adds	r7, #16
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}

080161da <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80161da:	b580      	push	{r7, lr}
 80161dc:	b082      	sub	sp, #8
 80161de:	af00      	add	r7, sp, #0
 80161e0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fb06 	bl	80167f4 <osSemaphoreDelete>
#endif
    return 1;
 80161e8:	2301      	movs	r3, #1
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3708      	adds	r7, #8
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b084      	sub	sp, #16
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80161fa:	2300      	movs	r3, #0
 80161fc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80161fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fa60 	bl	80166c8 <osSemaphoreAcquire>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801620e:	2301      	movs	r3, #1
 8016210:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016212:	68fb      	ldr	r3, [r7, #12]
}
 8016214:	4618      	mov	r0, r3
 8016216:	3710      	adds	r7, #16
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f000 faa1 	bl	801676c <osSemaphoreRelease>
#endif
}
 801622a:	bf00      	nop
 801622c:	3708      	adds	r7, #8
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}

08016232 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8016232:	b580      	push	{r7, lr}
 8016234:	b082      	sub	sp, #8
 8016236:	af00      	add	r7, sp, #0
 8016238:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f003 fd0e 	bl	8019c5c <pvPortMalloc>
 8016240:	4603      	mov	r3, r0
}
 8016242:	4618      	mov	r0, r3
 8016244:	3708      	adds	r7, #8
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}

0801624a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801624a:	b580      	push	{r7, lr}
 801624c:	b082      	sub	sp, #8
 801624e:	af00      	add	r7, sp, #0
 8016250:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f003 fdd0 	bl	8019df8 <vPortFree>
}
 8016258:	bf00      	nop
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <__NVIC_SetPriority>:
{
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	4603      	mov	r3, r0
 8016268:	6039      	str	r1, [r7, #0]
 801626a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801626c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016270:	2b00      	cmp	r3, #0
 8016272:	db0a      	blt.n	801628a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	b2da      	uxtb	r2, r3
 8016278:	490c      	ldr	r1, [pc, #48]	@ (80162ac <__NVIC_SetPriority+0x4c>)
 801627a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801627e:	0112      	lsls	r2, r2, #4
 8016280:	b2d2      	uxtb	r2, r2
 8016282:	440b      	add	r3, r1
 8016284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016288:	e00a      	b.n	80162a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	b2da      	uxtb	r2, r3
 801628e:	4908      	ldr	r1, [pc, #32]	@ (80162b0 <__NVIC_SetPriority+0x50>)
 8016290:	88fb      	ldrh	r3, [r7, #6]
 8016292:	f003 030f 	and.w	r3, r3, #15
 8016296:	3b04      	subs	r3, #4
 8016298:	0112      	lsls	r2, r2, #4
 801629a:	b2d2      	uxtb	r2, r2
 801629c:	440b      	add	r3, r1
 801629e:	761a      	strb	r2, [r3, #24]
}
 80162a0:	bf00      	nop
 80162a2:	370c      	adds	r7, #12
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr
 80162ac:	e000e100 	.word	0xe000e100
 80162b0:	e000ed00 	.word	0xe000ed00

080162b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80162b4:	b580      	push	{r7, lr}
 80162b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80162b8:	4b05      	ldr	r3, [pc, #20]	@ (80162d0 <SysTick_Handler+0x1c>)
 80162ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80162bc:	f002 fc5a 	bl	8018b74 <xTaskGetSchedulerState>
 80162c0:	4603      	mov	r3, r0
 80162c2:	2b01      	cmp	r3, #1
 80162c4:	d001      	beq.n	80162ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80162c6:	f003 fc37 	bl	8019b38 <xPortSysTickHandler>
  }
}
 80162ca:	bf00      	nop
 80162cc:	bd80      	pop	{r7, pc}
 80162ce:	bf00      	nop
 80162d0:	e000e010 	.word	0xe000e010

080162d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80162d4:	b580      	push	{r7, lr}
 80162d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80162d8:	2100      	movs	r1, #0
 80162da:	f06f 0004 	mvn.w	r0, #4
 80162de:	f7ff ffbf 	bl	8016260 <__NVIC_SetPriority>
#endif
}
 80162e2:	bf00      	nop
 80162e4:	bd80      	pop	{r7, pc}
	...

080162e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80162e8:	b480      	push	{r7}
 80162ea:	b083      	sub	sp, #12
 80162ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162ee:	f3ef 8305 	mrs	r3, IPSR
 80162f2:	603b      	str	r3, [r7, #0]
  return(result);
 80162f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d003      	beq.n	8016302 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80162fa:	f06f 0305 	mvn.w	r3, #5
 80162fe:	607b      	str	r3, [r7, #4]
 8016300:	e00c      	b.n	801631c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016302:	4b0a      	ldr	r3, [pc, #40]	@ (801632c <osKernelInitialize+0x44>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d105      	bne.n	8016316 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801630a:	4b08      	ldr	r3, [pc, #32]	@ (801632c <osKernelInitialize+0x44>)
 801630c:	2201      	movs	r2, #1
 801630e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016310:	2300      	movs	r3, #0
 8016312:	607b      	str	r3, [r7, #4]
 8016314:	e002      	b.n	801631c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016316:	f04f 33ff 	mov.w	r3, #4294967295
 801631a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801631c:	687b      	ldr	r3, [r7, #4]
}
 801631e:	4618      	mov	r0, r3
 8016320:	370c      	adds	r7, #12
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
 801632a:	bf00      	nop
 801632c:	24002b78 	.word	0x24002b78

08016330 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8016336:	f002 fc1d 	bl	8018b74 <xTaskGetSchedulerState>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d004      	beq.n	801634a <osKernelGetState+0x1a>
 8016340:	2b02      	cmp	r3, #2
 8016342:	d105      	bne.n	8016350 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8016344:	2302      	movs	r3, #2
 8016346:	607b      	str	r3, [r7, #4]
      break;
 8016348:	e00c      	b.n	8016364 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801634a:	2303      	movs	r3, #3
 801634c:	607b      	str	r3, [r7, #4]
      break;
 801634e:	e009      	b.n	8016364 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8016350:	4b07      	ldr	r3, [pc, #28]	@ (8016370 <osKernelGetState+0x40>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	2b01      	cmp	r3, #1
 8016356:	d102      	bne.n	801635e <osKernelGetState+0x2e>
        state = osKernelReady;
 8016358:	2301      	movs	r3, #1
 801635a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801635c:	e001      	b.n	8016362 <osKernelGetState+0x32>
        state = osKernelInactive;
 801635e:	2300      	movs	r3, #0
 8016360:	607b      	str	r3, [r7, #4]
      break;
 8016362:	bf00      	nop
  }

  return (state);
 8016364:	687b      	ldr	r3, [r7, #4]
}
 8016366:	4618      	mov	r0, r3
 8016368:	3708      	adds	r7, #8
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}
 801636e:	bf00      	nop
 8016370:	24002b78 	.word	0x24002b78

08016374 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8016374:	b580      	push	{r7, lr}
 8016376:	b082      	sub	sp, #8
 8016378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801637a:	f3ef 8305 	mrs	r3, IPSR
 801637e:	603b      	str	r3, [r7, #0]
  return(result);
 8016380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016382:	2b00      	cmp	r3, #0
 8016384:	d003      	beq.n	801638e <osKernelStart+0x1a>
    stat = osErrorISR;
 8016386:	f06f 0305 	mvn.w	r3, #5
 801638a:	607b      	str	r3, [r7, #4]
 801638c:	e010      	b.n	80163b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801638e:	4b0b      	ldr	r3, [pc, #44]	@ (80163bc <osKernelStart+0x48>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b01      	cmp	r3, #1
 8016394:	d109      	bne.n	80163aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016396:	f7ff ff9d 	bl	80162d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801639a:	4b08      	ldr	r3, [pc, #32]	@ (80163bc <osKernelStart+0x48>)
 801639c:	2202      	movs	r2, #2
 801639e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80163a0:	f001 ff62 	bl	8018268 <vTaskStartScheduler>
      stat = osOK;
 80163a4:	2300      	movs	r3, #0
 80163a6:	607b      	str	r3, [r7, #4]
 80163a8:	e002      	b.n	80163b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80163aa:	f04f 33ff 	mov.w	r3, #4294967295
 80163ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80163b0:	687b      	ldr	r3, [r7, #4]
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	3708      	adds	r7, #8
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	bf00      	nop
 80163bc:	24002b78 	.word	0x24002b78

080163c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163c6:	f3ef 8305 	mrs	r3, IPSR
 80163ca:	603b      	str	r3, [r7, #0]
  return(result);
 80163cc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d003      	beq.n	80163da <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80163d2:	f002 f875 	bl	80184c0 <xTaskGetTickCountFromISR>
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	e002      	b.n	80163e0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80163da:	f002 f861 	bl	80184a0 <xTaskGetTickCount>
 80163de:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80163e0:	687b      	ldr	r3, [r7, #4]
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}

080163ea <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80163ea:	b580      	push	{r7, lr}
 80163ec:	b08e      	sub	sp, #56	@ 0x38
 80163ee:	af04      	add	r7, sp, #16
 80163f0:	60f8      	str	r0, [r7, #12]
 80163f2:	60b9      	str	r1, [r7, #8]
 80163f4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80163f6:	2300      	movs	r3, #0
 80163f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163fa:	f3ef 8305 	mrs	r3, IPSR
 80163fe:	617b      	str	r3, [r7, #20]
  return(result);
 8016400:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016402:	2b00      	cmp	r3, #0
 8016404:	d17e      	bne.n	8016504 <osThreadNew+0x11a>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d07b      	beq.n	8016504 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801640c:	2380      	movs	r3, #128	@ 0x80
 801640e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016410:	2318      	movs	r3, #24
 8016412:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016414:	2300      	movs	r3, #0
 8016416:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8016418:	f04f 33ff 	mov.w	r3, #4294967295
 801641c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d045      	beq.n	80164b0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <osThreadNew+0x48>
        name = attr->name;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	699b      	ldr	r3, [r3, #24]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d002      	beq.n	8016440 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	699b      	ldr	r3, [r3, #24]
 801643e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d008      	beq.n	8016458 <osThreadNew+0x6e>
 8016446:	69fb      	ldr	r3, [r7, #28]
 8016448:	2b38      	cmp	r3, #56	@ 0x38
 801644a:	d805      	bhi.n	8016458 <osThreadNew+0x6e>
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	685b      	ldr	r3, [r3, #4]
 8016450:	f003 0301 	and.w	r3, r3, #1
 8016454:	2b00      	cmp	r3, #0
 8016456:	d001      	beq.n	801645c <osThreadNew+0x72>
        return (NULL);
 8016458:	2300      	movs	r3, #0
 801645a:	e054      	b.n	8016506 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	695b      	ldr	r3, [r3, #20]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d003      	beq.n	801646c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	089b      	lsrs	r3, r3, #2
 801646a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	689b      	ldr	r3, [r3, #8]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00e      	beq.n	8016492 <osThreadNew+0xa8>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	2ba7      	cmp	r3, #167	@ 0xa7
 801647a:	d90a      	bls.n	8016492 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016480:	2b00      	cmp	r3, #0
 8016482:	d006      	beq.n	8016492 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	695b      	ldr	r3, [r3, #20]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d002      	beq.n	8016492 <osThreadNew+0xa8>
        mem = 1;
 801648c:	2301      	movs	r3, #1
 801648e:	61bb      	str	r3, [r7, #24]
 8016490:	e010      	b.n	80164b4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	689b      	ldr	r3, [r3, #8]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d10c      	bne.n	80164b4 <osThreadNew+0xca>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	68db      	ldr	r3, [r3, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d108      	bne.n	80164b4 <osThreadNew+0xca>
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	691b      	ldr	r3, [r3, #16]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d104      	bne.n	80164b4 <osThreadNew+0xca>
          mem = 0;
 80164aa:	2300      	movs	r3, #0
 80164ac:	61bb      	str	r3, [r7, #24]
 80164ae:	e001      	b.n	80164b4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d110      	bne.n	80164dc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80164c2:	9202      	str	r2, [sp, #8]
 80164c4:	9301      	str	r3, [sp, #4]
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	6a3a      	ldr	r2, [r7, #32]
 80164ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f001 fbf9 	bl	8017cc8 <xTaskCreateStatic>
 80164d6:	4603      	mov	r3, r0
 80164d8:	613b      	str	r3, [r7, #16]
 80164da:	e013      	b.n	8016504 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d110      	bne.n	8016504 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80164e2:	6a3b      	ldr	r3, [r7, #32]
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	f107 0310 	add.w	r3, r7, #16
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	69fb      	ldr	r3, [r7, #28]
 80164ee:	9300      	str	r3, [sp, #0]
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164f4:	68f8      	ldr	r0, [r7, #12]
 80164f6:	f001 fc47 	bl	8017d88 <xTaskCreate>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d001      	beq.n	8016504 <osThreadNew+0x11a>
            hTask = NULL;
 8016500:	2300      	movs	r3, #0
 8016502:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016504:	693b      	ldr	r3, [r7, #16]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3728      	adds	r7, #40	@ 0x28
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}

0801650e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801650e:	b580      	push	{r7, lr}
 8016510:	b082      	sub	sp, #8
 8016512:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8016514:	f002 fb1e 	bl	8018b54 <xTaskGetCurrentTaskHandle>
 8016518:	6078      	str	r0, [r7, #4]

  return (id);
 801651a:	687b      	ldr	r3, [r7, #4]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8016524:	b580      	push	{r7, lr}
 8016526:	b086      	sub	sp, #24
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016530:	f3ef 8305 	mrs	r3, IPSR
 8016534:	60bb      	str	r3, [r7, #8]
  return(result);
 8016536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8016538:	2b00      	cmp	r3, #0
 801653a:	d003      	beq.n	8016544 <osThreadTerminate+0x20>
    stat = osErrorISR;
 801653c:	f06f 0305 	mvn.w	r3, #5
 8016540:	617b      	str	r3, [r7, #20]
 8016542:	e017      	b.n	8016574 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d103      	bne.n	8016552 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 801654a:	f06f 0303 	mvn.w	r3, #3
 801654e:	617b      	str	r3, [r7, #20]
 8016550:	e010      	b.n	8016574 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8016552:	6938      	ldr	r0, [r7, #16]
 8016554:	f001 fe20 	bl	8018198 <eTaskGetState>
 8016558:	4603      	mov	r3, r0
 801655a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 801655c:	7bfb      	ldrb	r3, [r7, #15]
 801655e:	2b04      	cmp	r3, #4
 8016560:	d005      	beq.n	801656e <osThreadTerminate+0x4a>
      stat = osOK;
 8016562:	2300      	movs	r3, #0
 8016564:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8016566:	6938      	ldr	r0, [r7, #16]
 8016568:	f001 fd6c 	bl	8018044 <vTaskDelete>
 801656c:	e002      	b.n	8016574 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 801656e:	f06f 0302 	mvn.w	r3, #2
 8016572:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8016574:	697b      	ldr	r3, [r7, #20]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3718      	adds	r7, #24
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801657e:	b580      	push	{r7, lr}
 8016580:	b084      	sub	sp, #16
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016586:	f3ef 8305 	mrs	r3, IPSR
 801658a:	60bb      	str	r3, [r7, #8]
  return(result);
 801658c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801658e:	2b00      	cmp	r3, #0
 8016590:	d003      	beq.n	801659a <osDelay+0x1c>
    stat = osErrorISR;
 8016592:	f06f 0305 	mvn.w	r3, #5
 8016596:	60fb      	str	r3, [r7, #12]
 8016598:	e007      	b.n	80165aa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801659a:	2300      	movs	r3, #0
 801659c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d002      	beq.n	80165aa <osDelay+0x2c>
      vTaskDelay(ticks);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f001 fdc1 	bl	801812c <vTaskDelay>
    }
  }

  return (stat);
 80165aa:	68fb      	ldr	r3, [r7, #12]
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3710      	adds	r7, #16
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}

080165b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b08a      	sub	sp, #40	@ 0x28
 80165b8:	af02      	add	r7, sp, #8
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	60b9      	str	r1, [r7, #8]
 80165be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80165c0:	2300      	movs	r3, #0
 80165c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165c4:	f3ef 8305 	mrs	r3, IPSR
 80165c8:	613b      	str	r3, [r7, #16]
  return(result);
 80165ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d175      	bne.n	80166bc <osSemaphoreNew+0x108>
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d072      	beq.n	80166bc <osSemaphoreNew+0x108>
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	429a      	cmp	r2, r3
 80165dc:	d86e      	bhi.n	80166bc <osSemaphoreNew+0x108>
    mem = -1;
 80165de:	f04f 33ff 	mov.w	r3, #4294967295
 80165e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d015      	beq.n	8016616 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	689b      	ldr	r3, [r3, #8]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d006      	beq.n	8016600 <osSemaphoreNew+0x4c>
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80165f8:	d902      	bls.n	8016600 <osSemaphoreNew+0x4c>
        mem = 1;
 80165fa:	2301      	movs	r3, #1
 80165fc:	61bb      	str	r3, [r7, #24]
 80165fe:	e00c      	b.n	801661a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d108      	bne.n	801661a <osSemaphoreNew+0x66>
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	68db      	ldr	r3, [r3, #12]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d104      	bne.n	801661a <osSemaphoreNew+0x66>
          mem = 0;
 8016610:	2300      	movs	r3, #0
 8016612:	61bb      	str	r3, [r7, #24]
 8016614:	e001      	b.n	801661a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801661a:	69bb      	ldr	r3, [r7, #24]
 801661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016620:	d04c      	beq.n	80166bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d128      	bne.n	801667a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8016628:	69bb      	ldr	r3, [r7, #24]
 801662a:	2b01      	cmp	r3, #1
 801662c:	d10a      	bne.n	8016644 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	689b      	ldr	r3, [r3, #8]
 8016632:	2203      	movs	r2, #3
 8016634:	9200      	str	r2, [sp, #0]
 8016636:	2200      	movs	r2, #0
 8016638:	2100      	movs	r1, #0
 801663a:	2001      	movs	r0, #1
 801663c:	f000 fb82 	bl	8016d44 <xQueueGenericCreateStatic>
 8016640:	61f8      	str	r0, [r7, #28]
 8016642:	e005      	b.n	8016650 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8016644:	2203      	movs	r2, #3
 8016646:	2100      	movs	r1, #0
 8016648:	2001      	movs	r0, #1
 801664a:	f000 fbf8 	bl	8016e3e <xQueueGenericCreate>
 801664e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8016650:	69fb      	ldr	r3, [r7, #28]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d022      	beq.n	801669c <osSemaphoreNew+0xe8>
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d01f      	beq.n	801669c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801665c:	2300      	movs	r3, #0
 801665e:	2200      	movs	r2, #0
 8016660:	2100      	movs	r1, #0
 8016662:	69f8      	ldr	r0, [r7, #28]
 8016664:	f000 fcb8 	bl	8016fd8 <xQueueGenericSend>
 8016668:	4603      	mov	r3, r0
 801666a:	2b01      	cmp	r3, #1
 801666c:	d016      	beq.n	801669c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801666e:	69f8      	ldr	r0, [r7, #28]
 8016670:	f001 f956 	bl	8017920 <vQueueDelete>
            hSemaphore = NULL;
 8016674:	2300      	movs	r3, #0
 8016676:	61fb      	str	r3, [r7, #28]
 8016678:	e010      	b.n	801669c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801667a:	69bb      	ldr	r3, [r7, #24]
 801667c:	2b01      	cmp	r3, #1
 801667e:	d108      	bne.n	8016692 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	461a      	mov	r2, r3
 8016686:	68b9      	ldr	r1, [r7, #8]
 8016688:	68f8      	ldr	r0, [r7, #12]
 801668a:	f000 fc36 	bl	8016efa <xQueueCreateCountingSemaphoreStatic>
 801668e:	61f8      	str	r0, [r7, #28]
 8016690:	e004      	b.n	801669c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016692:	68b9      	ldr	r1, [r7, #8]
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f000 fc69 	bl	8016f6c <xQueueCreateCountingSemaphore>
 801669a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d00c      	beq.n	80166bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d003      	beq.n	80166b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	617b      	str	r3, [r7, #20]
 80166ae:	e001      	b.n	80166b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80166b0:	2300      	movs	r3, #0
 80166b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80166b4:	6979      	ldr	r1, [r7, #20]
 80166b6:	69f8      	ldr	r0, [r7, #28]
 80166b8:	f001 fa7e 	bl	8017bb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80166bc:	69fb      	ldr	r3, [r7, #28]
}
 80166be:	4618      	mov	r0, r3
 80166c0:	3720      	adds	r7, #32
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
	...

080166c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b086      	sub	sp, #24
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80166d6:	2300      	movs	r3, #0
 80166d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d103      	bne.n	80166e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80166e0:	f06f 0303 	mvn.w	r3, #3
 80166e4:	617b      	str	r3, [r7, #20]
 80166e6:	e039      	b.n	801675c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166e8:	f3ef 8305 	mrs	r3, IPSR
 80166ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80166ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d022      	beq.n	801673a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d003      	beq.n	8016702 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80166fa:	f06f 0303 	mvn.w	r3, #3
 80166fe:	617b      	str	r3, [r7, #20]
 8016700:	e02c      	b.n	801675c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8016702:	2300      	movs	r3, #0
 8016704:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8016706:	f107 0308 	add.w	r3, r7, #8
 801670a:	461a      	mov	r2, r3
 801670c:	2100      	movs	r1, #0
 801670e:	6938      	ldr	r0, [r7, #16]
 8016710:	f001 f884 	bl	801781c <xQueueReceiveFromISR>
 8016714:	4603      	mov	r3, r0
 8016716:	2b01      	cmp	r3, #1
 8016718:	d003      	beq.n	8016722 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801671a:	f06f 0302 	mvn.w	r3, #2
 801671e:	617b      	str	r3, [r7, #20]
 8016720:	e01c      	b.n	801675c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d019      	beq.n	801675c <osSemaphoreAcquire+0x94>
 8016728:	4b0f      	ldr	r3, [pc, #60]	@ (8016768 <osSemaphoreAcquire+0xa0>)
 801672a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801672e:	601a      	str	r2, [r3, #0]
 8016730:	f3bf 8f4f 	dsb	sy
 8016734:	f3bf 8f6f 	isb	sy
 8016738:	e010      	b.n	801675c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801673a:	6839      	ldr	r1, [r7, #0]
 801673c:	6938      	ldr	r0, [r7, #16]
 801673e:	f000 ff5d 	bl	80175fc <xQueueSemaphoreTake>
 8016742:	4603      	mov	r3, r0
 8016744:	2b01      	cmp	r3, #1
 8016746:	d009      	beq.n	801675c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d003      	beq.n	8016756 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801674e:	f06f 0301 	mvn.w	r3, #1
 8016752:	617b      	str	r3, [r7, #20]
 8016754:	e002      	b.n	801675c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8016756:	f06f 0302 	mvn.w	r3, #2
 801675a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801675c:	697b      	ldr	r3, [r7, #20]
}
 801675e:	4618      	mov	r0, r3
 8016760:	3718      	adds	r7, #24
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	e000ed04 	.word	0xe000ed04

0801676c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801676c:	b580      	push	{r7, lr}
 801676e:	b086      	sub	sp, #24
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016778:	2300      	movs	r3, #0
 801677a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d103      	bne.n	801678a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8016782:	f06f 0303 	mvn.w	r3, #3
 8016786:	617b      	str	r3, [r7, #20]
 8016788:	e02c      	b.n	80167e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801678a:	f3ef 8305 	mrs	r3, IPSR
 801678e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016790:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016792:	2b00      	cmp	r3, #0
 8016794:	d01a      	beq.n	80167cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016796:	2300      	movs	r3, #0
 8016798:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801679a:	f107 0308 	add.w	r3, r7, #8
 801679e:	4619      	mov	r1, r3
 80167a0:	6938      	ldr	r0, [r7, #16]
 80167a2:	f000 fdb9 	bl	8017318 <xQueueGiveFromISR>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d003      	beq.n	80167b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80167ac:	f06f 0302 	mvn.w	r3, #2
 80167b0:	617b      	str	r3, [r7, #20]
 80167b2:	e017      	b.n	80167e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d014      	beq.n	80167e4 <osSemaphoreRelease+0x78>
 80167ba:	4b0d      	ldr	r3, [pc, #52]	@ (80167f0 <osSemaphoreRelease+0x84>)
 80167bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80167c0:	601a      	str	r2, [r3, #0]
 80167c2:	f3bf 8f4f 	dsb	sy
 80167c6:	f3bf 8f6f 	isb	sy
 80167ca:	e00b      	b.n	80167e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80167cc:	2300      	movs	r3, #0
 80167ce:	2200      	movs	r2, #0
 80167d0:	2100      	movs	r1, #0
 80167d2:	6938      	ldr	r0, [r7, #16]
 80167d4:	f000 fc00 	bl	8016fd8 <xQueueGenericSend>
 80167d8:	4603      	mov	r3, r0
 80167da:	2b01      	cmp	r3, #1
 80167dc:	d002      	beq.n	80167e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80167de:	f06f 0302 	mvn.w	r3, #2
 80167e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80167e4:	697b      	ldr	r3, [r7, #20]
}
 80167e6:	4618      	mov	r0, r3
 80167e8:	3718      	adds	r7, #24
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
 80167ee:	bf00      	nop
 80167f0:	e000ed04 	.word	0xe000ed04

080167f4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b086      	sub	sp, #24
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016800:	f3ef 8305 	mrs	r3, IPSR
 8016804:	60fb      	str	r3, [r7, #12]
  return(result);
 8016806:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016808:	2b00      	cmp	r3, #0
 801680a:	d003      	beq.n	8016814 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 801680c:	f06f 0305 	mvn.w	r3, #5
 8016810:	617b      	str	r3, [r7, #20]
 8016812:	e00e      	b.n	8016832 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d103      	bne.n	8016822 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801681a:	f06f 0303 	mvn.w	r3, #3
 801681e:	617b      	str	r3, [r7, #20]
 8016820:	e007      	b.n	8016832 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8016822:	6938      	ldr	r0, [r7, #16]
 8016824:	f001 f9f2 	bl	8017c0c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016828:	2300      	movs	r3, #0
 801682a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801682c:	6938      	ldr	r0, [r7, #16]
 801682e:	f001 f877 	bl	8017920 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8016832:	697b      	ldr	r3, [r7, #20]
}
 8016834:	4618      	mov	r0, r3
 8016836:	3718      	adds	r7, #24
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801683c:	b580      	push	{r7, lr}
 801683e:	b08a      	sub	sp, #40	@ 0x28
 8016840:	af02      	add	r7, sp, #8
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8016848:	2300      	movs	r3, #0
 801684a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801684c:	f3ef 8305 	mrs	r3, IPSR
 8016850:	613b      	str	r3, [r7, #16]
  return(result);
 8016852:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016854:	2b00      	cmp	r3, #0
 8016856:	d15f      	bne.n	8016918 <osMessageQueueNew+0xdc>
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d05c      	beq.n	8016918 <osMessageQueueNew+0xdc>
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d059      	beq.n	8016918 <osMessageQueueNew+0xdc>
    mem = -1;
 8016864:	f04f 33ff 	mov.w	r3, #4294967295
 8016868:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d029      	beq.n	80168c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d012      	beq.n	801689e <osMessageQueueNew+0x62>
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	68db      	ldr	r3, [r3, #12]
 801687c:	2b4f      	cmp	r3, #79	@ 0x4f
 801687e:	d90e      	bls.n	801689e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016884:	2b00      	cmp	r3, #0
 8016886:	d00a      	beq.n	801689e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	695a      	ldr	r2, [r3, #20]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	68b9      	ldr	r1, [r7, #8]
 8016890:	fb01 f303 	mul.w	r3, r1, r3
 8016894:	429a      	cmp	r2, r3
 8016896:	d302      	bcc.n	801689e <osMessageQueueNew+0x62>
        mem = 1;
 8016898:	2301      	movs	r3, #1
 801689a:	61bb      	str	r3, [r7, #24]
 801689c:	e014      	b.n	80168c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	689b      	ldr	r3, [r3, #8]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d110      	bne.n	80168c8 <osMessageQueueNew+0x8c>
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d10c      	bne.n	80168c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d108      	bne.n	80168c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	695b      	ldr	r3, [r3, #20]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d104      	bne.n	80168c8 <osMessageQueueNew+0x8c>
          mem = 0;
 80168be:	2300      	movs	r3, #0
 80168c0:	61bb      	str	r3, [r7, #24]
 80168c2:	e001      	b.n	80168c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80168c4:	2300      	movs	r3, #0
 80168c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80168c8:	69bb      	ldr	r3, [r7, #24]
 80168ca:	2b01      	cmp	r3, #1
 80168cc:	d10b      	bne.n	80168e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	691a      	ldr	r2, [r3, #16]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	689b      	ldr	r3, [r3, #8]
 80168d6:	2100      	movs	r1, #0
 80168d8:	9100      	str	r1, [sp, #0]
 80168da:	68b9      	ldr	r1, [r7, #8]
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	f000 fa31 	bl	8016d44 <xQueueGenericCreateStatic>
 80168e2:	61f8      	str	r0, [r7, #28]
 80168e4:	e008      	b.n	80168f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80168e6:	69bb      	ldr	r3, [r7, #24]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d105      	bne.n	80168f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80168ec:	2200      	movs	r2, #0
 80168ee:	68b9      	ldr	r1, [r7, #8]
 80168f0:	68f8      	ldr	r0, [r7, #12]
 80168f2:	f000 faa4 	bl	8016e3e <xQueueGenericCreate>
 80168f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d00c      	beq.n	8016918 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d003      	beq.n	801690c <osMessageQueueNew+0xd0>
        name = attr->name;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	617b      	str	r3, [r7, #20]
 801690a:	e001      	b.n	8016910 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801690c:	2300      	movs	r3, #0
 801690e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8016910:	6979      	ldr	r1, [r7, #20]
 8016912:	69f8      	ldr	r0, [r7, #28]
 8016914:	f001 f950 	bl	8017bb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016918:	69fb      	ldr	r3, [r7, #28]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3720      	adds	r7, #32
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
	...

08016924 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016924:	b580      	push	{r7, lr}
 8016926:	b088      	sub	sp, #32
 8016928:	af00      	add	r7, sp, #0
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	603b      	str	r3, [r7, #0]
 8016930:	4613      	mov	r3, r2
 8016932:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016938:	2300      	movs	r3, #0
 801693a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801693c:	f3ef 8305 	mrs	r3, IPSR
 8016940:	617b      	str	r3, [r7, #20]
  return(result);
 8016942:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016944:	2b00      	cmp	r3, #0
 8016946:	d028      	beq.n	801699a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016948:	69bb      	ldr	r3, [r7, #24]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d005      	beq.n	801695a <osMessageQueuePut+0x36>
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d002      	beq.n	801695a <osMessageQueuePut+0x36>
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d003      	beq.n	8016962 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801695a:	f06f 0303 	mvn.w	r3, #3
 801695e:	61fb      	str	r3, [r7, #28]
 8016960:	e038      	b.n	80169d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8016962:	2300      	movs	r3, #0
 8016964:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016966:	f107 0210 	add.w	r2, r7, #16
 801696a:	2300      	movs	r3, #0
 801696c:	68b9      	ldr	r1, [r7, #8]
 801696e:	69b8      	ldr	r0, [r7, #24]
 8016970:	f000 fc34 	bl	80171dc <xQueueGenericSendFromISR>
 8016974:	4603      	mov	r3, r0
 8016976:	2b01      	cmp	r3, #1
 8016978:	d003      	beq.n	8016982 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801697a:	f06f 0302 	mvn.w	r3, #2
 801697e:	61fb      	str	r3, [r7, #28]
 8016980:	e028      	b.n	80169d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8016982:	693b      	ldr	r3, [r7, #16]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d025      	beq.n	80169d4 <osMessageQueuePut+0xb0>
 8016988:	4b15      	ldr	r3, [pc, #84]	@ (80169e0 <osMessageQueuePut+0xbc>)
 801698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	f3bf 8f4f 	dsb	sy
 8016994:	f3bf 8f6f 	isb	sy
 8016998:	e01c      	b.n	80169d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d002      	beq.n	80169a6 <osMessageQueuePut+0x82>
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d103      	bne.n	80169ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80169a6:	f06f 0303 	mvn.w	r3, #3
 80169aa:	61fb      	str	r3, [r7, #28]
 80169ac:	e012      	b.n	80169d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80169ae:	2300      	movs	r3, #0
 80169b0:	683a      	ldr	r2, [r7, #0]
 80169b2:	68b9      	ldr	r1, [r7, #8]
 80169b4:	69b8      	ldr	r0, [r7, #24]
 80169b6:	f000 fb0f 	bl	8016fd8 <xQueueGenericSend>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d009      	beq.n	80169d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d003      	beq.n	80169ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80169c6:	f06f 0301 	mvn.w	r3, #1
 80169ca:	61fb      	str	r3, [r7, #28]
 80169cc:	e002      	b.n	80169d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80169ce:	f06f 0302 	mvn.w	r3, #2
 80169d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80169d4:	69fb      	ldr	r3, [r7, #28]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3720      	adds	r7, #32
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	e000ed04 	.word	0xe000ed04

080169e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b088      	sub	sp, #32
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
 80169f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169fa:	f3ef 8305 	mrs	r3, IPSR
 80169fe:	617b      	str	r3, [r7, #20]
  return(result);
 8016a00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d028      	beq.n	8016a58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d005      	beq.n	8016a18 <osMessageQueueGet+0x34>
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d002      	beq.n	8016a18 <osMessageQueueGet+0x34>
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d003      	beq.n	8016a20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8016a18:	f06f 0303 	mvn.w	r3, #3
 8016a1c:	61fb      	str	r3, [r7, #28]
 8016a1e:	e037      	b.n	8016a90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8016a20:	2300      	movs	r3, #0
 8016a22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016a24:	f107 0310 	add.w	r3, r7, #16
 8016a28:	461a      	mov	r2, r3
 8016a2a:	68b9      	ldr	r1, [r7, #8]
 8016a2c:	69b8      	ldr	r0, [r7, #24]
 8016a2e:	f000 fef5 	bl	801781c <xQueueReceiveFromISR>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d003      	beq.n	8016a40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8016a38:	f06f 0302 	mvn.w	r3, #2
 8016a3c:	61fb      	str	r3, [r7, #28]
 8016a3e:	e027      	b.n	8016a90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d024      	beq.n	8016a90 <osMessageQueueGet+0xac>
 8016a46:	4b15      	ldr	r3, [pc, #84]	@ (8016a9c <osMessageQueueGet+0xb8>)
 8016a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a4c:	601a      	str	r2, [r3, #0]
 8016a4e:	f3bf 8f4f 	dsb	sy
 8016a52:	f3bf 8f6f 	isb	sy
 8016a56:	e01b      	b.n	8016a90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016a58:	69bb      	ldr	r3, [r7, #24]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d002      	beq.n	8016a64 <osMessageQueueGet+0x80>
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d103      	bne.n	8016a6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8016a64:	f06f 0303 	mvn.w	r3, #3
 8016a68:	61fb      	str	r3, [r7, #28]
 8016a6a:	e011      	b.n	8016a90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016a6c:	683a      	ldr	r2, [r7, #0]
 8016a6e:	68b9      	ldr	r1, [r7, #8]
 8016a70:	69b8      	ldr	r0, [r7, #24]
 8016a72:	f000 fce1 	bl	8017438 <xQueueReceive>
 8016a76:	4603      	mov	r3, r0
 8016a78:	2b01      	cmp	r3, #1
 8016a7a:	d009      	beq.n	8016a90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d003      	beq.n	8016a8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8016a82:	f06f 0301 	mvn.w	r3, #1
 8016a86:	61fb      	str	r3, [r7, #28]
 8016a88:	e002      	b.n	8016a90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016a8a:	f06f 0302 	mvn.w	r3, #2
 8016a8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016a90:	69fb      	ldr	r3, [r7, #28]
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3720      	adds	r7, #32
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	e000ed04 	.word	0xe000ed04

08016aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016aa0:	b480      	push	{r7}
 8016aa2:	b085      	sub	sp, #20
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	60b9      	str	r1, [r7, #8]
 8016aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	4a07      	ldr	r2, [pc, #28]	@ (8016acc <vApplicationGetIdleTaskMemory+0x2c>)
 8016ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016ab2:	68bb      	ldr	r3, [r7, #8]
 8016ab4:	4a06      	ldr	r2, [pc, #24]	@ (8016ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8016ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2280      	movs	r2, #128	@ 0x80
 8016abc:	601a      	str	r2, [r3, #0]
}
 8016abe:	bf00      	nop
 8016ac0:	3714      	adds	r7, #20
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr
 8016aca:	bf00      	nop
 8016acc:	24002b7c 	.word	0x24002b7c
 8016ad0:	24002c24 	.word	0x24002c24

08016ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016ad4:	b480      	push	{r7}
 8016ad6:	b085      	sub	sp, #20
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	60f8      	str	r0, [r7, #12]
 8016adc:	60b9      	str	r1, [r7, #8]
 8016ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	4a07      	ldr	r2, [pc, #28]	@ (8016b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8016ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016ae6:	68bb      	ldr	r3, [r7, #8]
 8016ae8:	4a06      	ldr	r2, [pc, #24]	@ (8016b04 <vApplicationGetTimerTaskMemory+0x30>)
 8016aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016af2:	601a      	str	r2, [r3, #0]
}
 8016af4:	bf00      	nop
 8016af6:	3714      	adds	r7, #20
 8016af8:	46bd      	mov	sp, r7
 8016afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afe:	4770      	bx	lr
 8016b00:	24002e24 	.word	0x24002e24
 8016b04:	24002ecc 	.word	0x24002ecc

08016b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f103 0208 	add.w	r2, r3, #8
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8016b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f103 0208 	add.w	r2, r3, #8
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f103 0208 	add.w	r2, r3, #8
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016b3c:	bf00      	nop
 8016b3e:	370c      	adds	r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr

08016b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016b56:	bf00      	nop
 8016b58:	370c      	adds	r7, #12
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b60:	4770      	bx	lr

08016b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b62:	b480      	push	{r7}
 8016b64:	b085      	sub	sp, #20
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
 8016b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	68fa      	ldr	r2, [r7, #12]
 8016b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	689a      	ldr	r2, [r3, #8]
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	689b      	ldr	r3, [r3, #8]
 8016b84:	683a      	ldr	r2, [r7, #0]
 8016b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	683a      	ldr	r2, [r7, #0]
 8016b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	687a      	ldr	r2, [r7, #4]
 8016b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	1c5a      	adds	r2, r3, #1
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	601a      	str	r2, [r3, #0]
}
 8016b9e:	bf00      	nop
 8016ba0:	3714      	adds	r7, #20
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016baa:	b480      	push	{r7}
 8016bac:	b085      	sub	sp, #20
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
 8016bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bc0:	d103      	bne.n	8016bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	691b      	ldr	r3, [r3, #16]
 8016bc6:	60fb      	str	r3, [r7, #12]
 8016bc8:	e00c      	b.n	8016be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	3308      	adds	r3, #8
 8016bce:	60fb      	str	r3, [r7, #12]
 8016bd0:	e002      	b.n	8016bd8 <vListInsert+0x2e>
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	60fb      	str	r3, [r7, #12]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	68ba      	ldr	r2, [r7, #8]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d2f6      	bcs.n	8016bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	685a      	ldr	r2, [r3, #4]
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	683a      	ldr	r2, [r7, #0]
 8016bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	68fa      	ldr	r2, [r7, #12]
 8016bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	683a      	ldr	r2, [r7, #0]
 8016bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	1c5a      	adds	r2, r3, #1
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	601a      	str	r2, [r3, #0]
}
 8016c10:	bf00      	nop
 8016c12:	3714      	adds	r7, #20
 8016c14:	46bd      	mov	sp, r7
 8016c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1a:	4770      	bx	lr

08016c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	691b      	ldr	r3, [r3, #16]
 8016c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	687a      	ldr	r2, [r7, #4]
 8016c30:	6892      	ldr	r2, [r2, #8]
 8016c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	689b      	ldr	r3, [r3, #8]
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	6852      	ldr	r2, [r2, #4]
 8016c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	687a      	ldr	r2, [r7, #4]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d103      	bne.n	8016c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	689a      	ldr	r2, [r3, #8]
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2200      	movs	r2, #0
 8016c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	1e5a      	subs	r2, r3, #1
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	681b      	ldr	r3, [r3, #0]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3714      	adds	r7, #20
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6e:	4770      	bx	lr

08016c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d10b      	bne.n	8016c9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c88:	f383 8811 	msr	BASEPRI, r3
 8016c8c:	f3bf 8f6f 	isb	sy
 8016c90:	f3bf 8f4f 	dsb	sy
 8016c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016c96:	bf00      	nop
 8016c98:	bf00      	nop
 8016c9a:	e7fd      	b.n	8016c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016c9c:	f002 febc 	bl	8019a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ca8:	68f9      	ldr	r1, [r7, #12]
 8016caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016cac:	fb01 f303 	mul.w	r3, r1, r3
 8016cb0:	441a      	add	r2, r3
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ccc:	3b01      	subs	r3, #1
 8016cce:	68f9      	ldr	r1, [r7, #12]
 8016cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016cd2:	fb01 f303 	mul.w	r3, r1, r3
 8016cd6:	441a      	add	r2, r3
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	22ff      	movs	r2, #255	@ 0xff
 8016ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	22ff      	movs	r2, #255	@ 0xff
 8016ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d114      	bne.n	8016d1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	691b      	ldr	r3, [r3, #16]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d01a      	beq.n	8016d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	3310      	adds	r3, #16
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f001 fd62 	bl	80187c8 <xTaskRemoveFromEventList>
 8016d04:	4603      	mov	r3, r0
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d012      	beq.n	8016d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d40 <xQueueGenericReset+0xd0>)
 8016d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d10:	601a      	str	r2, [r3, #0]
 8016d12:	f3bf 8f4f 	dsb	sy
 8016d16:	f3bf 8f6f 	isb	sy
 8016d1a:	e009      	b.n	8016d30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	3310      	adds	r3, #16
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7ff fef1 	bl	8016b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	3324      	adds	r3, #36	@ 0x24
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7ff feec 	bl	8016b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d30:	f002 fea4 	bl	8019a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d34:	2301      	movs	r3, #1
}
 8016d36:	4618      	mov	r0, r3
 8016d38:	3710      	adds	r7, #16
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}
 8016d3e:	bf00      	nop
 8016d40:	e000ed04 	.word	0xe000ed04

08016d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b08e      	sub	sp, #56	@ 0x38
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
 8016d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d10b      	bne.n	8016d70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8016d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d5c:	f383 8811 	msr	BASEPRI, r3
 8016d60:	f3bf 8f6f 	isb	sy
 8016d64:	f3bf 8f4f 	dsb	sy
 8016d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016d6a:	bf00      	nop
 8016d6c:	bf00      	nop
 8016d6e:	e7fd      	b.n	8016d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d10b      	bne.n	8016d8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8016d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d7a:	f383 8811 	msr	BASEPRI, r3
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	f3bf 8f4f 	dsb	sy
 8016d86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016d88:	bf00      	nop
 8016d8a:	bf00      	nop
 8016d8c:	e7fd      	b.n	8016d8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d002      	beq.n	8016d9a <xQueueGenericCreateStatic+0x56>
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <xQueueGenericCreateStatic+0x5a>
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	e000      	b.n	8016da0 <xQueueGenericCreateStatic+0x5c>
 8016d9e:	2300      	movs	r3, #0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d10b      	bne.n	8016dbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016da8:	f383 8811 	msr	BASEPRI, r3
 8016dac:	f3bf 8f6f 	isb	sy
 8016db0:	f3bf 8f4f 	dsb	sy
 8016db4:	623b      	str	r3, [r7, #32]
}
 8016db6:	bf00      	nop
 8016db8:	bf00      	nop
 8016dba:	e7fd      	b.n	8016db8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d102      	bne.n	8016dc8 <xQueueGenericCreateStatic+0x84>
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d101      	bne.n	8016dcc <xQueueGenericCreateStatic+0x88>
 8016dc8:	2301      	movs	r3, #1
 8016dca:	e000      	b.n	8016dce <xQueueGenericCreateStatic+0x8a>
 8016dcc:	2300      	movs	r3, #0
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d10b      	bne.n	8016dea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8016dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dd6:	f383 8811 	msr	BASEPRI, r3
 8016dda:	f3bf 8f6f 	isb	sy
 8016dde:	f3bf 8f4f 	dsb	sy
 8016de2:	61fb      	str	r3, [r7, #28]
}
 8016de4:	bf00      	nop
 8016de6:	bf00      	nop
 8016de8:	e7fd      	b.n	8016de6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016dea:	2350      	movs	r3, #80	@ 0x50
 8016dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	2b50      	cmp	r3, #80	@ 0x50
 8016df2:	d00b      	beq.n	8016e0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8016df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016df8:	f383 8811 	msr	BASEPRI, r3
 8016dfc:	f3bf 8f6f 	isb	sy
 8016e00:	f3bf 8f4f 	dsb	sy
 8016e04:	61bb      	str	r3, [r7, #24]
}
 8016e06:	bf00      	nop
 8016e08:	bf00      	nop
 8016e0a:	e7fd      	b.n	8016e08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00d      	beq.n	8016e34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e26:	9300      	str	r3, [sp, #0]
 8016e28:	4613      	mov	r3, r2
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	68b9      	ldr	r1, [r7, #8]
 8016e2e:	68f8      	ldr	r0, [r7, #12]
 8016e30:	f000 f840 	bl	8016eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3730      	adds	r7, #48	@ 0x30
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b08a      	sub	sp, #40	@ 0x28
 8016e42:	af02      	add	r7, sp, #8
 8016e44:	60f8      	str	r0, [r7, #12]
 8016e46:	60b9      	str	r1, [r7, #8]
 8016e48:	4613      	mov	r3, r2
 8016e4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d10b      	bne.n	8016e6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8016e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e56:	f383 8811 	msr	BASEPRI, r3
 8016e5a:	f3bf 8f6f 	isb	sy
 8016e5e:	f3bf 8f4f 	dsb	sy
 8016e62:	613b      	str	r3, [r7, #16]
}
 8016e64:	bf00      	nop
 8016e66:	bf00      	nop
 8016e68:	e7fd      	b.n	8016e66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	68ba      	ldr	r2, [r7, #8]
 8016e6e:	fb02 f303 	mul.w	r3, r2, r3
 8016e72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	3350      	adds	r3, #80	@ 0x50
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f002 feef 	bl	8019c5c <pvPortMalloc>
 8016e7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016e80:	69bb      	ldr	r3, [r7, #24]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d011      	beq.n	8016eaa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	3350      	adds	r3, #80	@ 0x50
 8016e8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	2200      	movs	r2, #0
 8016e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e98:	79fa      	ldrb	r2, [r7, #7]
 8016e9a:	69bb      	ldr	r3, [r7, #24]
 8016e9c:	9300      	str	r3, [sp, #0]
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	697a      	ldr	r2, [r7, #20]
 8016ea2:	68b9      	ldr	r1, [r7, #8]
 8016ea4:	68f8      	ldr	r0, [r7, #12]
 8016ea6:	f000 f805 	bl	8016eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3720      	adds	r7, #32
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b084      	sub	sp, #16
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
 8016ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d103      	bne.n	8016ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	69ba      	ldr	r2, [r7, #24]
 8016ecc:	601a      	str	r2, [r3, #0]
 8016ece:	e002      	b.n	8016ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016ed0:	69bb      	ldr	r3, [r7, #24]
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016ed6:	69bb      	ldr	r3, [r7, #24]
 8016ed8:	68fa      	ldr	r2, [r7, #12]
 8016eda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016edc:	69bb      	ldr	r3, [r7, #24]
 8016ede:	68ba      	ldr	r2, [r7, #8]
 8016ee0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016ee2:	2101      	movs	r1, #1
 8016ee4:	69b8      	ldr	r0, [r7, #24]
 8016ee6:	f7ff fec3 	bl	8016c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	78fa      	ldrb	r2, [r7, #3]
 8016eee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ef2:	bf00      	nop
 8016ef4:	3710      	adds	r7, #16
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd80      	pop	{r7, pc}

08016efa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016efa:	b580      	push	{r7, lr}
 8016efc:	b08a      	sub	sp, #40	@ 0x28
 8016efe:	af02      	add	r7, sp, #8
 8016f00:	60f8      	str	r0, [r7, #12]
 8016f02:	60b9      	str	r1, [r7, #8]
 8016f04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d10b      	bne.n	8016f24 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8016f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f10:	f383 8811 	msr	BASEPRI, r3
 8016f14:	f3bf 8f6f 	isb	sy
 8016f18:	f3bf 8f4f 	dsb	sy
 8016f1c:	61bb      	str	r3, [r7, #24]
}
 8016f1e:	bf00      	nop
 8016f20:	bf00      	nop
 8016f22:	e7fd      	b.n	8016f20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f24:	68ba      	ldr	r2, [r7, #8]
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d90b      	bls.n	8016f44 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8016f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f30:	f383 8811 	msr	BASEPRI, r3
 8016f34:	f3bf 8f6f 	isb	sy
 8016f38:	f3bf 8f4f 	dsb	sy
 8016f3c:	617b      	str	r3, [r7, #20]
}
 8016f3e:	bf00      	nop
 8016f40:	bf00      	nop
 8016f42:	e7fd      	b.n	8016f40 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016f44:	2302      	movs	r3, #2
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	2100      	movs	r1, #0
 8016f4e:	68f8      	ldr	r0, [r7, #12]
 8016f50:	f7ff fef8 	bl	8016d44 <xQueueGenericCreateStatic>
 8016f54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016f56:	69fb      	ldr	r3, [r7, #28]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d002      	beq.n	8016f62 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016f62:	69fb      	ldr	r3, [r7, #28]
	}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3720      	adds	r7, #32
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b086      	sub	sp, #24
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10b      	bne.n	8016f94 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8016f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f80:	f383 8811 	msr	BASEPRI, r3
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	f3bf 8f4f 	dsb	sy
 8016f8c:	613b      	str	r3, [r7, #16]
}
 8016f8e:	bf00      	nop
 8016f90:	bf00      	nop
 8016f92:	e7fd      	b.n	8016f90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d90b      	bls.n	8016fb4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8016f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fa0:	f383 8811 	msr	BASEPRI, r3
 8016fa4:	f3bf 8f6f 	isb	sy
 8016fa8:	f3bf 8f4f 	dsb	sy
 8016fac:	60fb      	str	r3, [r7, #12]
}
 8016fae:	bf00      	nop
 8016fb0:	bf00      	nop
 8016fb2:	e7fd      	b.n	8016fb0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016fb4:	2202      	movs	r2, #2
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f7ff ff40 	bl	8016e3e <xQueueGenericCreate>
 8016fbe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d002      	beq.n	8016fcc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016fc6:	697b      	ldr	r3, [r7, #20]
 8016fc8:	683a      	ldr	r2, [r7, #0]
 8016fca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016fcc:	697b      	ldr	r3, [r7, #20]
	}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3718      	adds	r7, #24
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd80      	pop	{r7, pc}
	...

08016fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b08e      	sub	sp, #56	@ 0x38
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
 8016fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d10b      	bne.n	801700c <xQueueGenericSend+0x34>
	__asm volatile
 8016ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ff8:	f383 8811 	msr	BASEPRI, r3
 8016ffc:	f3bf 8f6f 	isb	sy
 8017000:	f3bf 8f4f 	dsb	sy
 8017004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017006:	bf00      	nop
 8017008:	bf00      	nop
 801700a:	e7fd      	b.n	8017008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d103      	bne.n	801701a <xQueueGenericSend+0x42>
 8017012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017016:	2b00      	cmp	r3, #0
 8017018:	d101      	bne.n	801701e <xQueueGenericSend+0x46>
 801701a:	2301      	movs	r3, #1
 801701c:	e000      	b.n	8017020 <xQueueGenericSend+0x48>
 801701e:	2300      	movs	r3, #0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d10b      	bne.n	801703c <xQueueGenericSend+0x64>
	__asm volatile
 8017024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017028:	f383 8811 	msr	BASEPRI, r3
 801702c:	f3bf 8f6f 	isb	sy
 8017030:	f3bf 8f4f 	dsb	sy
 8017034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017036:	bf00      	nop
 8017038:	bf00      	nop
 801703a:	e7fd      	b.n	8017038 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	2b02      	cmp	r3, #2
 8017040:	d103      	bne.n	801704a <xQueueGenericSend+0x72>
 8017042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017046:	2b01      	cmp	r3, #1
 8017048:	d101      	bne.n	801704e <xQueueGenericSend+0x76>
 801704a:	2301      	movs	r3, #1
 801704c:	e000      	b.n	8017050 <xQueueGenericSend+0x78>
 801704e:	2300      	movs	r3, #0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d10b      	bne.n	801706c <xQueueGenericSend+0x94>
	__asm volatile
 8017054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017058:	f383 8811 	msr	BASEPRI, r3
 801705c:	f3bf 8f6f 	isb	sy
 8017060:	f3bf 8f4f 	dsb	sy
 8017064:	623b      	str	r3, [r7, #32]
}
 8017066:	bf00      	nop
 8017068:	bf00      	nop
 801706a:	e7fd      	b.n	8017068 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801706c:	f001 fd82 	bl	8018b74 <xTaskGetSchedulerState>
 8017070:	4603      	mov	r3, r0
 8017072:	2b00      	cmp	r3, #0
 8017074:	d102      	bne.n	801707c <xQueueGenericSend+0xa4>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d101      	bne.n	8017080 <xQueueGenericSend+0xa8>
 801707c:	2301      	movs	r3, #1
 801707e:	e000      	b.n	8017082 <xQueueGenericSend+0xaa>
 8017080:	2300      	movs	r3, #0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d10b      	bne.n	801709e <xQueueGenericSend+0xc6>
	__asm volatile
 8017086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801708a:	f383 8811 	msr	BASEPRI, r3
 801708e:	f3bf 8f6f 	isb	sy
 8017092:	f3bf 8f4f 	dsb	sy
 8017096:	61fb      	str	r3, [r7, #28]
}
 8017098:	bf00      	nop
 801709a:	bf00      	nop
 801709c:	e7fd      	b.n	801709a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801709e:	f002 fcbb 	bl	8019a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80170a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d302      	bcc.n	80170b4 <xQueueGenericSend+0xdc>
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	2b02      	cmp	r3, #2
 80170b2:	d129      	bne.n	8017108 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80170b4:	683a      	ldr	r2, [r7, #0]
 80170b6:	68b9      	ldr	r1, [r7, #8]
 80170b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80170ba:	f000 fc6d 	bl	8017998 <prvCopyDataToQueue>
 80170be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80170c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d010      	beq.n	80170ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80170c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ca:	3324      	adds	r3, #36	@ 0x24
 80170cc:	4618      	mov	r0, r3
 80170ce:	f001 fb7b 	bl	80187c8 <xTaskRemoveFromEventList>
 80170d2:	4603      	mov	r3, r0
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d013      	beq.n	8017100 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80170d8:	4b3f      	ldr	r3, [pc, #252]	@ (80171d8 <xQueueGenericSend+0x200>)
 80170da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170de:	601a      	str	r2, [r3, #0]
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	f3bf 8f6f 	isb	sy
 80170e8:	e00a      	b.n	8017100 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80170ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d007      	beq.n	8017100 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80170f0:	4b39      	ldr	r3, [pc, #228]	@ (80171d8 <xQueueGenericSend+0x200>)
 80170f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170f6:	601a      	str	r2, [r3, #0]
 80170f8:	f3bf 8f4f 	dsb	sy
 80170fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017100:	f002 fcbc 	bl	8019a7c <vPortExitCritical>
				return pdPASS;
 8017104:	2301      	movs	r3, #1
 8017106:	e063      	b.n	80171d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d103      	bne.n	8017116 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801710e:	f002 fcb5 	bl	8019a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017112:	2300      	movs	r3, #0
 8017114:	e05c      	b.n	80171d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017118:	2b00      	cmp	r3, #0
 801711a:	d106      	bne.n	801712a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801711c:	f107 0314 	add.w	r3, r7, #20
 8017120:	4618      	mov	r0, r3
 8017122:	f001 fbb5 	bl	8018890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017126:	2301      	movs	r3, #1
 8017128:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801712a:	f002 fca7 	bl	8019a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801712e:	f001 f90b 	bl	8018348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017132:	f002 fc71 	bl	8019a18 <vPortEnterCritical>
 8017136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801713c:	b25b      	sxtb	r3, r3
 801713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017142:	d103      	bne.n	801714c <xQueueGenericSend+0x174>
 8017144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017146:	2200      	movs	r2, #0
 8017148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801714e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017152:	b25b      	sxtb	r3, r3
 8017154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017158:	d103      	bne.n	8017162 <xQueueGenericSend+0x18a>
 801715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715c:	2200      	movs	r2, #0
 801715e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017162:	f002 fc8b 	bl	8019a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017166:	1d3a      	adds	r2, r7, #4
 8017168:	f107 0314 	add.w	r3, r7, #20
 801716c:	4611      	mov	r1, r2
 801716e:	4618      	mov	r0, r3
 8017170:	f001 fba4 	bl	80188bc <xTaskCheckForTimeOut>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d124      	bne.n	80171c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801717a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801717c:	f000 fd04 	bl	8017b88 <prvIsQueueFull>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d018      	beq.n	80171b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017188:	3310      	adds	r3, #16
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	4611      	mov	r1, r2
 801718e:	4618      	mov	r0, r3
 8017190:	f001 fac8 	bl	8018724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017196:	f000 fc8f 	bl	8017ab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801719a:	f001 f8e3 	bl	8018364 <xTaskResumeAll>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f47f af7c 	bne.w	801709e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80171a6:	4b0c      	ldr	r3, [pc, #48]	@ (80171d8 <xQueueGenericSend+0x200>)
 80171a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171ac:	601a      	str	r2, [r3, #0]
 80171ae:	f3bf 8f4f 	dsb	sy
 80171b2:	f3bf 8f6f 	isb	sy
 80171b6:	e772      	b.n	801709e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80171b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171ba:	f000 fc7d 	bl	8017ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171be:	f001 f8d1 	bl	8018364 <xTaskResumeAll>
 80171c2:	e76c      	b.n	801709e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80171c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171c6:	f000 fc77 	bl	8017ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171ca:	f001 f8cb 	bl	8018364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80171ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	3738      	adds	r7, #56	@ 0x38
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	e000ed04 	.word	0xe000ed04

080171dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b090      	sub	sp, #64	@ 0x40
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	60f8      	str	r0, [r7, #12]
 80171e4:	60b9      	str	r1, [r7, #8]
 80171e6:	607a      	str	r2, [r7, #4]
 80171e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80171ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d10b      	bne.n	801720c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80171f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171f8:	f383 8811 	msr	BASEPRI, r3
 80171fc:	f3bf 8f6f 	isb	sy
 8017200:	f3bf 8f4f 	dsb	sy
 8017204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017206:	bf00      	nop
 8017208:	bf00      	nop
 801720a:	e7fd      	b.n	8017208 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d103      	bne.n	801721a <xQueueGenericSendFromISR+0x3e>
 8017212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017216:	2b00      	cmp	r3, #0
 8017218:	d101      	bne.n	801721e <xQueueGenericSendFromISR+0x42>
 801721a:	2301      	movs	r3, #1
 801721c:	e000      	b.n	8017220 <xQueueGenericSendFromISR+0x44>
 801721e:	2300      	movs	r3, #0
 8017220:	2b00      	cmp	r3, #0
 8017222:	d10b      	bne.n	801723c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8017224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017228:	f383 8811 	msr	BASEPRI, r3
 801722c:	f3bf 8f6f 	isb	sy
 8017230:	f3bf 8f4f 	dsb	sy
 8017234:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017236:	bf00      	nop
 8017238:	bf00      	nop
 801723a:	e7fd      	b.n	8017238 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	2b02      	cmp	r3, #2
 8017240:	d103      	bne.n	801724a <xQueueGenericSendFromISR+0x6e>
 8017242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017246:	2b01      	cmp	r3, #1
 8017248:	d101      	bne.n	801724e <xQueueGenericSendFromISR+0x72>
 801724a:	2301      	movs	r3, #1
 801724c:	e000      	b.n	8017250 <xQueueGenericSendFromISR+0x74>
 801724e:	2300      	movs	r3, #0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d10b      	bne.n	801726c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8017254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017258:	f383 8811 	msr	BASEPRI, r3
 801725c:	f3bf 8f6f 	isb	sy
 8017260:	f3bf 8f4f 	dsb	sy
 8017264:	623b      	str	r3, [r7, #32]
}
 8017266:	bf00      	nop
 8017268:	bf00      	nop
 801726a:	e7fd      	b.n	8017268 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801726c:	f002 fcb4 	bl	8019bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017270:	f3ef 8211 	mrs	r2, BASEPRI
 8017274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017278:	f383 8811 	msr	BASEPRI, r3
 801727c:	f3bf 8f6f 	isb	sy
 8017280:	f3bf 8f4f 	dsb	sy
 8017284:	61fa      	str	r2, [r7, #28]
 8017286:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017288:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801728a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801728e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017294:	429a      	cmp	r2, r3
 8017296:	d302      	bcc.n	801729e <xQueueGenericSendFromISR+0xc2>
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	2b02      	cmp	r3, #2
 801729c:	d12f      	bne.n	80172fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80172a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80172a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80172ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	68b9      	ldr	r1, [r7, #8]
 80172b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80172b4:	f000 fb70 	bl	8017998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80172b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80172bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172c0:	d112      	bne.n	80172e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d016      	beq.n	80172f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172cc:	3324      	adds	r3, #36	@ 0x24
 80172ce:	4618      	mov	r0, r3
 80172d0:	f001 fa7a 	bl	80187c8 <xTaskRemoveFromEventList>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d00e      	beq.n	80172f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d00b      	beq.n	80172f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2201      	movs	r2, #1
 80172e4:	601a      	str	r2, [r3, #0]
 80172e6:	e007      	b.n	80172f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80172e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80172ec:	3301      	adds	r3, #1
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	b25a      	sxtb	r2, r3
 80172f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80172f8:	2301      	movs	r3, #1
 80172fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80172fc:	e001      	b.n	8017302 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80172fe:	2300      	movs	r3, #0
 8017300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017304:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801730c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801730e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8017310:	4618      	mov	r0, r3
 8017312:	3740      	adds	r7, #64	@ 0x40
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b08e      	sub	sp, #56	@ 0x38
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017328:	2b00      	cmp	r3, #0
 801732a:	d10b      	bne.n	8017344 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017330:	f383 8811 	msr	BASEPRI, r3
 8017334:	f3bf 8f6f 	isb	sy
 8017338:	f3bf 8f4f 	dsb	sy
 801733c:	623b      	str	r3, [r7, #32]
}
 801733e:	bf00      	nop
 8017340:	bf00      	nop
 8017342:	e7fd      	b.n	8017340 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017348:	2b00      	cmp	r3, #0
 801734a:	d00b      	beq.n	8017364 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017350:	f383 8811 	msr	BASEPRI, r3
 8017354:	f3bf 8f6f 	isb	sy
 8017358:	f3bf 8f4f 	dsb	sy
 801735c:	61fb      	str	r3, [r7, #28]
}
 801735e:	bf00      	nop
 8017360:	bf00      	nop
 8017362:	e7fd      	b.n	8017360 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d103      	bne.n	8017374 <xQueueGiveFromISR+0x5c>
 801736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801736e:	689b      	ldr	r3, [r3, #8]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d101      	bne.n	8017378 <xQueueGiveFromISR+0x60>
 8017374:	2301      	movs	r3, #1
 8017376:	e000      	b.n	801737a <xQueueGiveFromISR+0x62>
 8017378:	2300      	movs	r3, #0
 801737a:	2b00      	cmp	r3, #0
 801737c:	d10b      	bne.n	8017396 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017382:	f383 8811 	msr	BASEPRI, r3
 8017386:	f3bf 8f6f 	isb	sy
 801738a:	f3bf 8f4f 	dsb	sy
 801738e:	61bb      	str	r3, [r7, #24]
}
 8017390:	bf00      	nop
 8017392:	bf00      	nop
 8017394:	e7fd      	b.n	8017392 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017396:	f002 fc1f 	bl	8019bd8 <vPortValidateInterruptPriority>
	__asm volatile
 801739a:	f3ef 8211 	mrs	r2, BASEPRI
 801739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a2:	f383 8811 	msr	BASEPRI, r3
 80173a6:	f3bf 8f6f 	isb	sy
 80173aa:	f3bf 8f4f 	dsb	sy
 80173ae:	617a      	str	r2, [r7, #20]
 80173b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80173b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80173b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80173bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d22b      	bcs.n	801741e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80173c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80173cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80173d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173d2:	1c5a      	adds	r2, r3, #1
 80173d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80173d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80173dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173e0:	d112      	bne.n	8017408 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80173e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d016      	beq.n	8017418 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80173ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ec:	3324      	adds	r3, #36	@ 0x24
 80173ee:	4618      	mov	r0, r3
 80173f0:	f001 f9ea 	bl	80187c8 <xTaskRemoveFromEventList>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d00e      	beq.n	8017418 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d00b      	beq.n	8017418 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	2201      	movs	r2, #1
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	e007      	b.n	8017418 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801740c:	3301      	adds	r3, #1
 801740e:	b2db      	uxtb	r3, r3
 8017410:	b25a      	sxtb	r2, r3
 8017412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017418:	2301      	movs	r3, #1
 801741a:	637b      	str	r3, [r7, #52]	@ 0x34
 801741c:	e001      	b.n	8017422 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801741e:	2300      	movs	r3, #0
 8017420:	637b      	str	r3, [r7, #52]	@ 0x34
 8017422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017424:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	f383 8811 	msr	BASEPRI, r3
}
 801742c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017430:	4618      	mov	r0, r3
 8017432:	3738      	adds	r7, #56	@ 0x38
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b08c      	sub	sp, #48	@ 0x30
 801743c:	af00      	add	r7, sp, #0
 801743e:	60f8      	str	r0, [r7, #12]
 8017440:	60b9      	str	r1, [r7, #8]
 8017442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017444:	2300      	movs	r3, #0
 8017446:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801744e:	2b00      	cmp	r3, #0
 8017450:	d10b      	bne.n	801746a <xQueueReceive+0x32>
	__asm volatile
 8017452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017456:	f383 8811 	msr	BASEPRI, r3
 801745a:	f3bf 8f6f 	isb	sy
 801745e:	f3bf 8f4f 	dsb	sy
 8017462:	623b      	str	r3, [r7, #32]
}
 8017464:	bf00      	nop
 8017466:	bf00      	nop
 8017468:	e7fd      	b.n	8017466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d103      	bne.n	8017478 <xQueueReceive+0x40>
 8017470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017474:	2b00      	cmp	r3, #0
 8017476:	d101      	bne.n	801747c <xQueueReceive+0x44>
 8017478:	2301      	movs	r3, #1
 801747a:	e000      	b.n	801747e <xQueueReceive+0x46>
 801747c:	2300      	movs	r3, #0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10b      	bne.n	801749a <xQueueReceive+0x62>
	__asm volatile
 8017482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017486:	f383 8811 	msr	BASEPRI, r3
 801748a:	f3bf 8f6f 	isb	sy
 801748e:	f3bf 8f4f 	dsb	sy
 8017492:	61fb      	str	r3, [r7, #28]
}
 8017494:	bf00      	nop
 8017496:	bf00      	nop
 8017498:	e7fd      	b.n	8017496 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801749a:	f001 fb6b 	bl	8018b74 <xTaskGetSchedulerState>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d102      	bne.n	80174aa <xQueueReceive+0x72>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d101      	bne.n	80174ae <xQueueReceive+0x76>
 80174aa:	2301      	movs	r3, #1
 80174ac:	e000      	b.n	80174b0 <xQueueReceive+0x78>
 80174ae:	2300      	movs	r3, #0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d10b      	bne.n	80174cc <xQueueReceive+0x94>
	__asm volatile
 80174b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174b8:	f383 8811 	msr	BASEPRI, r3
 80174bc:	f3bf 8f6f 	isb	sy
 80174c0:	f3bf 8f4f 	dsb	sy
 80174c4:	61bb      	str	r3, [r7, #24]
}
 80174c6:	bf00      	nop
 80174c8:	bf00      	nop
 80174ca:	e7fd      	b.n	80174c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80174cc:	f002 faa4 	bl	8019a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80174d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d01f      	beq.n	801751c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80174dc:	68b9      	ldr	r1, [r7, #8]
 80174de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80174e0:	f000 fac4 	bl	8017a6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80174e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e6:	1e5a      	subs	r2, r3, #1
 80174e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ee:	691b      	ldr	r3, [r3, #16]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d00f      	beq.n	8017514 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80174f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174f6:	3310      	adds	r3, #16
 80174f8:	4618      	mov	r0, r3
 80174fa:	f001 f965 	bl	80187c8 <xTaskRemoveFromEventList>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d007      	beq.n	8017514 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017504:	4b3c      	ldr	r3, [pc, #240]	@ (80175f8 <xQueueReceive+0x1c0>)
 8017506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801750a:	601a      	str	r2, [r3, #0]
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017514:	f002 fab2 	bl	8019a7c <vPortExitCritical>
				return pdPASS;
 8017518:	2301      	movs	r3, #1
 801751a:	e069      	b.n	80175f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d103      	bne.n	801752a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017522:	f002 faab 	bl	8019a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017526:	2300      	movs	r3, #0
 8017528:	e062      	b.n	80175f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801752a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801752c:	2b00      	cmp	r3, #0
 801752e:	d106      	bne.n	801753e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017530:	f107 0310 	add.w	r3, r7, #16
 8017534:	4618      	mov	r0, r3
 8017536:	f001 f9ab 	bl	8018890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801753a:	2301      	movs	r3, #1
 801753c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801753e:	f002 fa9d 	bl	8019a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017542:	f000 ff01 	bl	8018348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017546:	f002 fa67 	bl	8019a18 <vPortEnterCritical>
 801754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801754c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017550:	b25b      	sxtb	r3, r3
 8017552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017556:	d103      	bne.n	8017560 <xQueueReceive+0x128>
 8017558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801755a:	2200      	movs	r2, #0
 801755c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017566:	b25b      	sxtb	r3, r3
 8017568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801756c:	d103      	bne.n	8017576 <xQueueReceive+0x13e>
 801756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017570:	2200      	movs	r2, #0
 8017572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017576:	f002 fa81 	bl	8019a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801757a:	1d3a      	adds	r2, r7, #4
 801757c:	f107 0310 	add.w	r3, r7, #16
 8017580:	4611      	mov	r1, r2
 8017582:	4618      	mov	r0, r3
 8017584:	f001 f99a 	bl	80188bc <xTaskCheckForTimeOut>
 8017588:	4603      	mov	r3, r0
 801758a:	2b00      	cmp	r3, #0
 801758c:	d123      	bne.n	80175d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801758e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017590:	f000 fae4 	bl	8017b5c <prvIsQueueEmpty>
 8017594:	4603      	mov	r3, r0
 8017596:	2b00      	cmp	r3, #0
 8017598:	d017      	beq.n	80175ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801759c:	3324      	adds	r3, #36	@ 0x24
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	4611      	mov	r1, r2
 80175a2:	4618      	mov	r0, r3
 80175a4:	f001 f8be 	bl	8018724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80175a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175aa:	f000 fa85 	bl	8017ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80175ae:	f000 fed9 	bl	8018364 <xTaskResumeAll>
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d189      	bne.n	80174cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80175b8:	4b0f      	ldr	r3, [pc, #60]	@ (80175f8 <xQueueReceive+0x1c0>)
 80175ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175be:	601a      	str	r2, [r3, #0]
 80175c0:	f3bf 8f4f 	dsb	sy
 80175c4:	f3bf 8f6f 	isb	sy
 80175c8:	e780      	b.n	80174cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80175ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175cc:	f000 fa74 	bl	8017ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80175d0:	f000 fec8 	bl	8018364 <xTaskResumeAll>
 80175d4:	e77a      	b.n	80174cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80175d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175d8:	f000 fa6e 	bl	8017ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80175dc:	f000 fec2 	bl	8018364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175e2:	f000 fabb 	bl	8017b5c <prvIsQueueEmpty>
 80175e6:	4603      	mov	r3, r0
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	f43f af6f 	beq.w	80174cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80175ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3730      	adds	r7, #48	@ 0x30
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	e000ed04 	.word	0xe000ed04

080175fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b08e      	sub	sp, #56	@ 0x38
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017606:	2300      	movs	r3, #0
 8017608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801760e:	2300      	movs	r3, #0
 8017610:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017614:	2b00      	cmp	r3, #0
 8017616:	d10b      	bne.n	8017630 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8017618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801761c:	f383 8811 	msr	BASEPRI, r3
 8017620:	f3bf 8f6f 	isb	sy
 8017624:	f3bf 8f4f 	dsb	sy
 8017628:	623b      	str	r3, [r7, #32]
}
 801762a:	bf00      	nop
 801762c:	bf00      	nop
 801762e:	e7fd      	b.n	801762c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017634:	2b00      	cmp	r3, #0
 8017636:	d00b      	beq.n	8017650 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8017638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801763c:	f383 8811 	msr	BASEPRI, r3
 8017640:	f3bf 8f6f 	isb	sy
 8017644:	f3bf 8f4f 	dsb	sy
 8017648:	61fb      	str	r3, [r7, #28]
}
 801764a:	bf00      	nop
 801764c:	bf00      	nop
 801764e:	e7fd      	b.n	801764c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017650:	f001 fa90 	bl	8018b74 <xTaskGetSchedulerState>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d102      	bne.n	8017660 <xQueueSemaphoreTake+0x64>
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d101      	bne.n	8017664 <xQueueSemaphoreTake+0x68>
 8017660:	2301      	movs	r3, #1
 8017662:	e000      	b.n	8017666 <xQueueSemaphoreTake+0x6a>
 8017664:	2300      	movs	r3, #0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d10b      	bne.n	8017682 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801766e:	f383 8811 	msr	BASEPRI, r3
 8017672:	f3bf 8f6f 	isb	sy
 8017676:	f3bf 8f4f 	dsb	sy
 801767a:	61bb      	str	r3, [r7, #24]
}
 801767c:	bf00      	nop
 801767e:	bf00      	nop
 8017680:	e7fd      	b.n	801767e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017682:	f002 f9c9 	bl	8019a18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801768a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801768e:	2b00      	cmp	r3, #0
 8017690:	d024      	beq.n	80176dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017694:	1e5a      	subs	r2, r3, #1
 8017696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017698:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801769a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d104      	bne.n	80176ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80176a2:	f001 fbe1 	bl	8018e68 <pvTaskIncrementMutexHeldCount>
 80176a6:	4602      	mov	r2, r0
 80176a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ae:	691b      	ldr	r3, [r3, #16]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d00f      	beq.n	80176d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176b6:	3310      	adds	r3, #16
 80176b8:	4618      	mov	r0, r3
 80176ba:	f001 f885 	bl	80187c8 <xTaskRemoveFromEventList>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d007      	beq.n	80176d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80176c4:	4b54      	ldr	r3, [pc, #336]	@ (8017818 <xQueueSemaphoreTake+0x21c>)
 80176c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80176ca:	601a      	str	r2, [r3, #0]
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80176d4:	f002 f9d2 	bl	8019a7c <vPortExitCritical>
				return pdPASS;
 80176d8:	2301      	movs	r3, #1
 80176da:	e098      	b.n	801780e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d112      	bne.n	8017708 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80176e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d00b      	beq.n	8017700 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80176e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	617b      	str	r3, [r7, #20]
}
 80176fa:	bf00      	nop
 80176fc:	bf00      	nop
 80176fe:	e7fd      	b.n	80176fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017700:	f002 f9bc 	bl	8019a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017704:	2300      	movs	r3, #0
 8017706:	e082      	b.n	801780e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801770e:	f107 030c 	add.w	r3, r7, #12
 8017712:	4618      	mov	r0, r3
 8017714:	f001 f8bc 	bl	8018890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017718:	2301      	movs	r3, #1
 801771a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801771c:	f002 f9ae 	bl	8019a7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017720:	f000 fe12 	bl	8018348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017724:	f002 f978 	bl	8019a18 <vPortEnterCritical>
 8017728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801772e:	b25b      	sxtb	r3, r3
 8017730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017734:	d103      	bne.n	801773e <xQueueSemaphoreTake+0x142>
 8017736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017738:	2200      	movs	r2, #0
 801773a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017744:	b25b      	sxtb	r3, r3
 8017746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801774a:	d103      	bne.n	8017754 <xQueueSemaphoreTake+0x158>
 801774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801774e:	2200      	movs	r2, #0
 8017750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017754:	f002 f992 	bl	8019a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017758:	463a      	mov	r2, r7
 801775a:	f107 030c 	add.w	r3, r7, #12
 801775e:	4611      	mov	r1, r2
 8017760:	4618      	mov	r0, r3
 8017762:	f001 f8ab 	bl	80188bc <xTaskCheckForTimeOut>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d132      	bne.n	80177d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801776c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801776e:	f000 f9f5 	bl	8017b5c <prvIsQueueEmpty>
 8017772:	4603      	mov	r3, r0
 8017774:	2b00      	cmp	r3, #0
 8017776:	d026      	beq.n	80177c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d109      	bne.n	8017794 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8017780:	f002 f94a 	bl	8019a18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017786:	689b      	ldr	r3, [r3, #8]
 8017788:	4618      	mov	r0, r3
 801778a:	f001 fa11 	bl	8018bb0 <xTaskPriorityInherit>
 801778e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017790:	f002 f974 	bl	8019a7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017796:	3324      	adds	r3, #36	@ 0x24
 8017798:	683a      	ldr	r2, [r7, #0]
 801779a:	4611      	mov	r1, r2
 801779c:	4618      	mov	r0, r3
 801779e:	f000 ffc1 	bl	8018724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80177a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177a4:	f000 f988 	bl	8017ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80177a8:	f000 fddc 	bl	8018364 <xTaskResumeAll>
 80177ac:	4603      	mov	r3, r0
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	f47f af67 	bne.w	8017682 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80177b4:	4b18      	ldr	r3, [pc, #96]	@ (8017818 <xQueueSemaphoreTake+0x21c>)
 80177b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80177ba:	601a      	str	r2, [r3, #0]
 80177bc:	f3bf 8f4f 	dsb	sy
 80177c0:	f3bf 8f6f 	isb	sy
 80177c4:	e75d      	b.n	8017682 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80177c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177c8:	f000 f976 	bl	8017ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80177cc:	f000 fdca 	bl	8018364 <xTaskResumeAll>
 80177d0:	e757      	b.n	8017682 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80177d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177d4:	f000 f970 	bl	8017ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80177d8:	f000 fdc4 	bl	8018364 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80177dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177de:	f000 f9bd 	bl	8017b5c <prvIsQueueEmpty>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	f43f af4c 	beq.w	8017682 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80177ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d00d      	beq.n	801780c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80177f0:	f002 f912 	bl	8019a18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80177f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177f6:	f000 f8b7 	bl	8017968 <prvGetDisinheritPriorityAfterTimeout>
 80177fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80177fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017802:	4618      	mov	r0, r3
 8017804:	f001 faac 	bl	8018d60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017808:	f002 f938 	bl	8019a7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801780c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801780e:	4618      	mov	r0, r3
 8017810:	3738      	adds	r7, #56	@ 0x38
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	e000ed04 	.word	0xe000ed04

0801781c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b08e      	sub	sp, #56	@ 0x38
 8017820:	af00      	add	r7, sp, #0
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801782e:	2b00      	cmp	r3, #0
 8017830:	d10b      	bne.n	801784a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8017832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017836:	f383 8811 	msr	BASEPRI, r3
 801783a:	f3bf 8f6f 	isb	sy
 801783e:	f3bf 8f4f 	dsb	sy
 8017842:	623b      	str	r3, [r7, #32]
}
 8017844:	bf00      	nop
 8017846:	bf00      	nop
 8017848:	e7fd      	b.n	8017846 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d103      	bne.n	8017858 <xQueueReceiveFromISR+0x3c>
 8017850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017854:	2b00      	cmp	r3, #0
 8017856:	d101      	bne.n	801785c <xQueueReceiveFromISR+0x40>
 8017858:	2301      	movs	r3, #1
 801785a:	e000      	b.n	801785e <xQueueReceiveFromISR+0x42>
 801785c:	2300      	movs	r3, #0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d10b      	bne.n	801787a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017866:	f383 8811 	msr	BASEPRI, r3
 801786a:	f3bf 8f6f 	isb	sy
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	61fb      	str	r3, [r7, #28]
}
 8017874:	bf00      	nop
 8017876:	bf00      	nop
 8017878:	e7fd      	b.n	8017876 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801787a:	f002 f9ad 	bl	8019bd8 <vPortValidateInterruptPriority>
	__asm volatile
 801787e:	f3ef 8211 	mrs	r2, BASEPRI
 8017882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017886:	f383 8811 	msr	BASEPRI, r3
 801788a:	f3bf 8f6f 	isb	sy
 801788e:	f3bf 8f4f 	dsb	sy
 8017892:	61ba      	str	r2, [r7, #24]
 8017894:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017896:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801789e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80178a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d02f      	beq.n	8017906 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80178a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80178ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80178b0:	68b9      	ldr	r1, [r7, #8]
 80178b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178b4:	f000 f8da 	bl	8017a6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80178b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ba:	1e5a      	subs	r2, r3, #1
 80178bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80178c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80178c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178c8:	d112      	bne.n	80178f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80178ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178cc:	691b      	ldr	r3, [r3, #16]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d016      	beq.n	8017900 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80178d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178d4:	3310      	adds	r3, #16
 80178d6:	4618      	mov	r0, r3
 80178d8:	f000 ff76 	bl	80187c8 <xTaskRemoveFromEventList>
 80178dc:	4603      	mov	r3, r0
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d00e      	beq.n	8017900 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d00b      	beq.n	8017900 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2201      	movs	r2, #1
 80178ec:	601a      	str	r2, [r3, #0]
 80178ee:	e007      	b.n	8017900 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80178f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80178f4:	3301      	adds	r3, #1
 80178f6:	b2db      	uxtb	r3, r3
 80178f8:	b25a      	sxtb	r2, r3
 80178fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8017900:	2301      	movs	r3, #1
 8017902:	637b      	str	r3, [r7, #52]	@ 0x34
 8017904:	e001      	b.n	801790a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8017906:	2300      	movs	r3, #0
 8017908:	637b      	str	r3, [r7, #52]	@ 0x34
 801790a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801790c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	f383 8811 	msr	BASEPRI, r3
}
 8017914:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017918:	4618      	mov	r0, r3
 801791a:	3738      	adds	r7, #56	@ 0x38
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d10b      	bne.n	801794a <vQueueDelete+0x2a>
	__asm volatile
 8017932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017936:	f383 8811 	msr	BASEPRI, r3
 801793a:	f3bf 8f6f 	isb	sy
 801793e:	f3bf 8f4f 	dsb	sy
 8017942:	60bb      	str	r3, [r7, #8]
}
 8017944:	bf00      	nop
 8017946:	bf00      	nop
 8017948:	e7fd      	b.n	8017946 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801794a:	68f8      	ldr	r0, [r7, #12]
 801794c:	f000 f95e 	bl	8017c0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017956:	2b00      	cmp	r3, #0
 8017958:	d102      	bne.n	8017960 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801795a:	68f8      	ldr	r0, [r7, #12]
 801795c:	f002 fa4c 	bl	8019df8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017960:	bf00      	nop
 8017962:	3710      	adds	r7, #16
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017968:	b480      	push	{r7}
 801796a:	b085      	sub	sp, #20
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017974:	2b00      	cmp	r3, #0
 8017976:	d006      	beq.n	8017986 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8017982:	60fb      	str	r3, [r7, #12]
 8017984:	e001      	b.n	801798a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017986:	2300      	movs	r3, #0
 8017988:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801798a:	68fb      	ldr	r3, [r7, #12]
	}
 801798c:	4618      	mov	r0, r3
 801798e:	3714      	adds	r7, #20
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr

08017998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	60b9      	str	r1, [r7, #8]
 80179a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80179a4:	2300      	movs	r3, #0
 80179a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d10d      	bne.n	80179d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d14d      	bne.n	8017a5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	689b      	ldr	r3, [r3, #8]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f001 f95c 	bl	8018c80 <xTaskPriorityDisinherit>
 80179c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	2200      	movs	r2, #0
 80179ce:	609a      	str	r2, [r3, #8]
 80179d0:	e043      	b.n	8017a5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d119      	bne.n	8017a0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	6858      	ldr	r0, [r3, #4]
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179e0:	461a      	mov	r2, r3
 80179e2:	68b9      	ldr	r1, [r7, #8]
 80179e4:	f004 fc61 	bl	801c2aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	685a      	ldr	r2, [r3, #4]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179f0:	441a      	add	r2, r3
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	685a      	ldr	r2, [r3, #4]
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	689b      	ldr	r3, [r3, #8]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d32b      	bcc.n	8017a5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	681a      	ldr	r2, [r3, #0]
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	605a      	str	r2, [r3, #4]
 8017a0a:	e026      	b.n	8017a5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	68d8      	ldr	r0, [r3, #12]
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a14:	461a      	mov	r2, r3
 8017a16:	68b9      	ldr	r1, [r7, #8]
 8017a18:	f004 fc47 	bl	801c2aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	68da      	ldr	r2, [r3, #12]
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a24:	425b      	negs	r3, r3
 8017a26:	441a      	add	r2, r3
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	68da      	ldr	r2, [r3, #12]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d207      	bcs.n	8017a48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	689a      	ldr	r2, [r3, #8]
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a40:	425b      	negs	r3, r3
 8017a42:	441a      	add	r2, r3
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2b02      	cmp	r3, #2
 8017a4c:	d105      	bne.n	8017a5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a4e:	693b      	ldr	r3, [r7, #16]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d002      	beq.n	8017a5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	3b01      	subs	r3, #1
 8017a58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	1c5a      	adds	r2, r3, #1
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017a62:	697b      	ldr	r3, [r7, #20]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3718      	adds	r7, #24
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}

08017a6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
 8017a74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d018      	beq.n	8017ab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	68da      	ldr	r2, [r3, #12]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a86:	441a      	add	r2, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	68da      	ldr	r2, [r3, #12]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	689b      	ldr	r3, [r3, #8]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d303      	bcc.n	8017aa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681a      	ldr	r2, [r3, #0]
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	68d9      	ldr	r1, [r3, #12]
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017aa8:	461a      	mov	r2, r3
 8017aaa:	6838      	ldr	r0, [r7, #0]
 8017aac:	f004 fbfd 	bl	801c2aa <memcpy>
	}
}
 8017ab0:	bf00      	nop
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ac0:	f001 ffaa 	bl	8019a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017aca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017acc:	e011      	b.n	8017af2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d012      	beq.n	8017afc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	3324      	adds	r3, #36	@ 0x24
 8017ada:	4618      	mov	r0, r3
 8017adc:	f000 fe74 	bl	80187c8 <xTaskRemoveFromEventList>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d001      	beq.n	8017aea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017ae6:	f000 ff4d 	bl	8018984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017aea:	7bfb      	ldrb	r3, [r7, #15]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	dce9      	bgt.n	8017ace <prvUnlockQueue+0x16>
 8017afa:	e000      	b.n	8017afe <prvUnlockQueue+0x46>
					break;
 8017afc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	22ff      	movs	r2, #255	@ 0xff
 8017b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017b06:	f001 ffb9 	bl	8019a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017b0a:	f001 ff85 	bl	8019a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017b14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b16:	e011      	b.n	8017b3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	691b      	ldr	r3, [r3, #16]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d012      	beq.n	8017b46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	3310      	adds	r3, #16
 8017b24:	4618      	mov	r0, r3
 8017b26:	f000 fe4f 	bl	80187c8 <xTaskRemoveFromEventList>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d001      	beq.n	8017b34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017b30:	f000 ff28 	bl	8018984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017b34:	7bbb      	ldrb	r3, [r7, #14]
 8017b36:	3b01      	subs	r3, #1
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	dce9      	bgt.n	8017b18 <prvUnlockQueue+0x60>
 8017b44:	e000      	b.n	8017b48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017b46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	22ff      	movs	r2, #255	@ 0xff
 8017b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017b50:	f001 ff94 	bl	8019a7c <vPortExitCritical>
}
 8017b54:	bf00      	nop
 8017b56:	3710      	adds	r7, #16
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}

08017b5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b084      	sub	sp, #16
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017b64:	f001 ff58 	bl	8019a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d102      	bne.n	8017b76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017b70:	2301      	movs	r3, #1
 8017b72:	60fb      	str	r3, [r7, #12]
 8017b74:	e001      	b.n	8017b7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017b76:	2300      	movs	r3, #0
 8017b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017b7a:	f001 ff7f 	bl	8019a7c <vPortExitCritical>

	return xReturn;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3710      	adds	r7, #16
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017b90:	f001 ff42 	bl	8019a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d102      	bne.n	8017ba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	60fb      	str	r3, [r7, #12]
 8017ba4:	e001      	b.n	8017baa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017baa:	f001 ff67 	bl	8019a7c <vPortExitCritical>

	return xReturn;
 8017bae:	68fb      	ldr	r3, [r7, #12]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017bb8:	b480      	push	{r7}
 8017bba:	b085      	sub	sp, #20
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	60fb      	str	r3, [r7, #12]
 8017bc6:	e014      	b.n	8017bf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8017c08 <vQueueAddToRegistry+0x50>)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d10b      	bne.n	8017bec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017bd4:	490c      	ldr	r1, [pc, #48]	@ (8017c08 <vQueueAddToRegistry+0x50>)
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	683a      	ldr	r2, [r7, #0]
 8017bda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017bde:	4a0a      	ldr	r2, [pc, #40]	@ (8017c08 <vQueueAddToRegistry+0x50>)
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	00db      	lsls	r3, r3, #3
 8017be4:	4413      	add	r3, r2
 8017be6:	687a      	ldr	r2, [r7, #4]
 8017be8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017bea:	e006      	b.n	8017bfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	60fb      	str	r3, [r7, #12]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	2b07      	cmp	r3, #7
 8017bf6:	d9e7      	bls.n	8017bc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017bf8:	bf00      	nop
 8017bfa:	bf00      	nop
 8017bfc:	3714      	adds	r7, #20
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c04:	4770      	bx	lr
 8017c06:	bf00      	nop
 8017c08:	240032cc 	.word	0x240032cc

08017c0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017c0c:	b480      	push	{r7}
 8017c0e:	b085      	sub	sp, #20
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c14:	2300      	movs	r3, #0
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	e016      	b.n	8017c48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017c1a:	4a10      	ldr	r2, [pc, #64]	@ (8017c5c <vQueueUnregisterQueue+0x50>)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	00db      	lsls	r3, r3, #3
 8017c20:	4413      	add	r3, r2
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	687a      	ldr	r2, [r7, #4]
 8017c26:	429a      	cmp	r2, r3
 8017c28:	d10b      	bne.n	8017c42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8017c5c <vQueueUnregisterQueue+0x50>)
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	2100      	movs	r1, #0
 8017c30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017c34:	4a09      	ldr	r2, [pc, #36]	@ (8017c5c <vQueueUnregisterQueue+0x50>)
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	4413      	add	r3, r2
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	605a      	str	r2, [r3, #4]
				break;
 8017c40:	e006      	b.n	8017c50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	3301      	adds	r3, #1
 8017c46:	60fb      	str	r3, [r7, #12]
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2b07      	cmp	r3, #7
 8017c4c:	d9e5      	bls.n	8017c1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017c4e:	bf00      	nop
 8017c50:	bf00      	nop
 8017c52:	3714      	adds	r7, #20
 8017c54:	46bd      	mov	sp, r7
 8017c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5a:	4770      	bx	lr
 8017c5c:	240032cc 	.word	0x240032cc

08017c60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b086      	sub	sp, #24
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	60f8      	str	r0, [r7, #12]
 8017c68:	60b9      	str	r1, [r7, #8]
 8017c6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017c70:	f001 fed2 	bl	8019a18 <vPortEnterCritical>
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017c7a:	b25b      	sxtb	r3, r3
 8017c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c80:	d103      	bne.n	8017c8a <vQueueWaitForMessageRestricted+0x2a>
 8017c82:	697b      	ldr	r3, [r7, #20]
 8017c84:	2200      	movs	r2, #0
 8017c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017c90:	b25b      	sxtb	r3, r3
 8017c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c96:	d103      	bne.n	8017ca0 <vQueueWaitForMessageRestricted+0x40>
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017ca0:	f001 feec 	bl	8019a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d106      	bne.n	8017cba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	3324      	adds	r3, #36	@ 0x24
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	68b9      	ldr	r1, [r7, #8]
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f000 fd5b 	bl	8018770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017cba:	6978      	ldr	r0, [r7, #20]
 8017cbc:	f7ff fefc 	bl	8017ab8 <prvUnlockQueue>
	}
 8017cc0:	bf00      	nop
 8017cc2:	3718      	adds	r7, #24
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}

08017cc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b08e      	sub	sp, #56	@ 0x38
 8017ccc:	af04      	add	r7, sp, #16
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	607a      	str	r2, [r7, #4]
 8017cd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d10b      	bne.n	8017cf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8017cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ce0:	f383 8811 	msr	BASEPRI, r3
 8017ce4:	f3bf 8f6f 	isb	sy
 8017ce8:	f3bf 8f4f 	dsb	sy
 8017cec:	623b      	str	r3, [r7, #32]
}
 8017cee:	bf00      	nop
 8017cf0:	bf00      	nop
 8017cf2:	e7fd      	b.n	8017cf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d10b      	bne.n	8017d12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8017cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cfe:	f383 8811 	msr	BASEPRI, r3
 8017d02:	f3bf 8f6f 	isb	sy
 8017d06:	f3bf 8f4f 	dsb	sy
 8017d0a:	61fb      	str	r3, [r7, #28]
}
 8017d0c:	bf00      	nop
 8017d0e:	bf00      	nop
 8017d10:	e7fd      	b.n	8017d0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d12:	23a8      	movs	r3, #168	@ 0xa8
 8017d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	2ba8      	cmp	r3, #168	@ 0xa8
 8017d1a:	d00b      	beq.n	8017d34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8017d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d20:	f383 8811 	msr	BASEPRI, r3
 8017d24:	f3bf 8f6f 	isb	sy
 8017d28:	f3bf 8f4f 	dsb	sy
 8017d2c:	61bb      	str	r3, [r7, #24]
}
 8017d2e:	bf00      	nop
 8017d30:	bf00      	nop
 8017d32:	e7fd      	b.n	8017d30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017d34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d01e      	beq.n	8017d7a <xTaskCreateStatic+0xb2>
 8017d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d01b      	beq.n	8017d7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017d4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d4e:	2202      	movs	r2, #2
 8017d50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017d54:	2300      	movs	r3, #0
 8017d56:	9303      	str	r3, [sp, #12]
 8017d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d5a:	9302      	str	r3, [sp, #8]
 8017d5c:	f107 0314 	add.w	r3, r7, #20
 8017d60:	9301      	str	r3, [sp, #4]
 8017d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d64:	9300      	str	r3, [sp, #0]
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	687a      	ldr	r2, [r7, #4]
 8017d6a:	68b9      	ldr	r1, [r7, #8]
 8017d6c:	68f8      	ldr	r0, [r7, #12]
 8017d6e:	f000 f851 	bl	8017e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017d72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d74:	f000 f8f6 	bl	8017f64 <prvAddNewTaskToReadyList>
 8017d78:	e001      	b.n	8017d7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017d7e:	697b      	ldr	r3, [r7, #20]
	}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3728      	adds	r7, #40	@ 0x28
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b08c      	sub	sp, #48	@ 0x30
 8017d8c:	af04      	add	r7, sp, #16
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	603b      	str	r3, [r7, #0]
 8017d94:	4613      	mov	r3, r2
 8017d96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017d98:	88fb      	ldrh	r3, [r7, #6]
 8017d9a:	009b      	lsls	r3, r3, #2
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f001 ff5d 	bl	8019c5c <pvPortMalloc>
 8017da2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d00e      	beq.n	8017dc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017daa:	20a8      	movs	r0, #168	@ 0xa8
 8017dac:	f001 ff56 	bl	8019c5c <pvPortMalloc>
 8017db0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d003      	beq.n	8017dc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	697a      	ldr	r2, [r7, #20]
 8017dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8017dbe:	e005      	b.n	8017dcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017dc0:	6978      	ldr	r0, [r7, #20]
 8017dc2:	f002 f819 	bl	8019df8 <vPortFree>
 8017dc6:	e001      	b.n	8017dcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d017      	beq.n	8017e02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017dda:	88fa      	ldrh	r2, [r7, #6]
 8017ddc:	2300      	movs	r3, #0
 8017dde:	9303      	str	r3, [sp, #12]
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	9302      	str	r3, [sp, #8]
 8017de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017de6:	9301      	str	r3, [sp, #4]
 8017de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	68b9      	ldr	r1, [r7, #8]
 8017df0:	68f8      	ldr	r0, [r7, #12]
 8017df2:	f000 f80f 	bl	8017e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017df6:	69f8      	ldr	r0, [r7, #28]
 8017df8:	f000 f8b4 	bl	8017f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017dfc:	2301      	movs	r3, #1
 8017dfe:	61bb      	str	r3, [r7, #24]
 8017e00:	e002      	b.n	8017e08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e02:	f04f 33ff 	mov.w	r3, #4294967295
 8017e06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e08:	69bb      	ldr	r3, [r7, #24]
	}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3720      	adds	r7, #32
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
	...

08017e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b088      	sub	sp, #32
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
 8017e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	21a5      	movs	r1, #165	@ 0xa5
 8017e2e:	f004 f95f 	bl	801c0f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017e3c:	440b      	add	r3, r1
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	4413      	add	r3, r2
 8017e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	f023 0307 	bic.w	r3, r3, #7
 8017e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017e4c:	69bb      	ldr	r3, [r7, #24]
 8017e4e:	f003 0307 	and.w	r3, r3, #7
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d00b      	beq.n	8017e6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8017e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e5a:	f383 8811 	msr	BASEPRI, r3
 8017e5e:	f3bf 8f6f 	isb	sy
 8017e62:	f3bf 8f4f 	dsb	sy
 8017e66:	617b      	str	r3, [r7, #20]
}
 8017e68:	bf00      	nop
 8017e6a:	bf00      	nop
 8017e6c:	e7fd      	b.n	8017e6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017e6e:	68bb      	ldr	r3, [r7, #8]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d01f      	beq.n	8017eb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e74:	2300      	movs	r3, #0
 8017e76:	61fb      	str	r3, [r7, #28]
 8017e78:	e012      	b.n	8017ea0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017e7a:	68ba      	ldr	r2, [r7, #8]
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	4413      	add	r3, r2
 8017e80:	7819      	ldrb	r1, [r3, #0]
 8017e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	4413      	add	r3, r2
 8017e88:	3334      	adds	r3, #52	@ 0x34
 8017e8a:	460a      	mov	r2, r1
 8017e8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017e8e:	68ba      	ldr	r2, [r7, #8]
 8017e90:	69fb      	ldr	r3, [r7, #28]
 8017e92:	4413      	add	r3, r2
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d006      	beq.n	8017ea8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	61fb      	str	r3, [r7, #28]
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	2b0f      	cmp	r3, #15
 8017ea4:	d9e9      	bls.n	8017e7a <prvInitialiseNewTask+0x66>
 8017ea6:	e000      	b.n	8017eaa <prvInitialiseNewTask+0x96>
			{
				break;
 8017ea8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eac:	2200      	movs	r2, #0
 8017eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017eb2:	e003      	b.n	8017ebc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ebe:	2b37      	cmp	r3, #55	@ 0x37
 8017ec0:	d901      	bls.n	8017ec6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017ec2:	2337      	movs	r3, #55	@ 0x37
 8017ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017eca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eda:	3304      	adds	r3, #4
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7fe fe33 	bl	8016b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ee4:	3318      	adds	r3, #24
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7fe fe2e 	bl	8016b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ef0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017efa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f04:	2200      	movs	r2, #0
 8017f06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f14:	3354      	adds	r3, #84	@ 0x54
 8017f16:	224c      	movs	r2, #76	@ 0x4c
 8017f18:	2100      	movs	r1, #0
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f004 f8e8 	bl	801c0f0 <memset>
 8017f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f22:	4a0d      	ldr	r2, [pc, #52]	@ (8017f58 <prvInitialiseNewTask+0x144>)
 8017f24:	659a      	str	r2, [r3, #88]	@ 0x58
 8017f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f28:	4a0c      	ldr	r2, [pc, #48]	@ (8017f5c <prvInitialiseNewTask+0x148>)
 8017f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8017f60 <prvInitialiseNewTask+0x14c>)
 8017f30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f32:	683a      	ldr	r2, [r7, #0]
 8017f34:	68f9      	ldr	r1, [r7, #12]
 8017f36:	69b8      	ldr	r0, [r7, #24]
 8017f38:	f001 fc3a 	bl	80197b0 <pxPortInitialiseStack>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d002      	beq.n	8017f4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f4e:	bf00      	nop
 8017f50:	3720      	adds	r7, #32
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}
 8017f56:	bf00      	nop
 8017f58:	2402399c 	.word	0x2402399c
 8017f5c:	24023a04 	.word	0x24023a04
 8017f60:	24023a6c 	.word	0x24023a6c

08017f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b082      	sub	sp, #8
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017f6c:	f001 fd54 	bl	8019a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017f70:	4b2d      	ldr	r3, [pc, #180]	@ (8018028 <prvAddNewTaskToReadyList+0xc4>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	3301      	adds	r3, #1
 8017f76:	4a2c      	ldr	r2, [pc, #176]	@ (8018028 <prvAddNewTaskToReadyList+0xc4>)
 8017f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017f7a:	4b2c      	ldr	r3, [pc, #176]	@ (801802c <prvAddNewTaskToReadyList+0xc8>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d109      	bne.n	8017f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017f82:	4a2a      	ldr	r2, [pc, #168]	@ (801802c <prvAddNewTaskToReadyList+0xc8>)
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017f88:	4b27      	ldr	r3, [pc, #156]	@ (8018028 <prvAddNewTaskToReadyList+0xc4>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	2b01      	cmp	r3, #1
 8017f8e:	d110      	bne.n	8017fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017f90:	f000 fd1c 	bl	80189cc <prvInitialiseTaskLists>
 8017f94:	e00d      	b.n	8017fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017f96:	4b26      	ldr	r3, [pc, #152]	@ (8018030 <prvAddNewTaskToReadyList+0xcc>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d109      	bne.n	8017fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017f9e:	4b23      	ldr	r3, [pc, #140]	@ (801802c <prvAddNewTaskToReadyList+0xc8>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d802      	bhi.n	8017fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017fac:	4a1f      	ldr	r2, [pc, #124]	@ (801802c <prvAddNewTaskToReadyList+0xc8>)
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017fb2:	4b20      	ldr	r3, [pc, #128]	@ (8018034 <prvAddNewTaskToReadyList+0xd0>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8018034 <prvAddNewTaskToReadyList+0xd0>)
 8017fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8018034 <prvAddNewTaskToReadyList+0xd0>)
 8017fbe:	681a      	ldr	r2, [r3, #0]
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8018038 <prvAddNewTaskToReadyList+0xd4>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d903      	bls.n	8017fd8 <prvAddNewTaskToReadyList+0x74>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fd4:	4a18      	ldr	r2, [pc, #96]	@ (8018038 <prvAddNewTaskToReadyList+0xd4>)
 8017fd6:	6013      	str	r3, [r2, #0]
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fdc:	4613      	mov	r3, r2
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	4413      	add	r3, r2
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	4a15      	ldr	r2, [pc, #84]	@ (801803c <prvAddNewTaskToReadyList+0xd8>)
 8017fe6:	441a      	add	r2, r3
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	3304      	adds	r3, #4
 8017fec:	4619      	mov	r1, r3
 8017fee:	4610      	mov	r0, r2
 8017ff0:	f7fe fdb7 	bl	8016b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017ff4:	f001 fd42 	bl	8019a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8018030 <prvAddNewTaskToReadyList+0xcc>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00e      	beq.n	801801e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018000:	4b0a      	ldr	r3, [pc, #40]	@ (801802c <prvAddNewTaskToReadyList+0xc8>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801800a:	429a      	cmp	r2, r3
 801800c:	d207      	bcs.n	801801e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801800e:	4b0c      	ldr	r3, [pc, #48]	@ (8018040 <prvAddNewTaskToReadyList+0xdc>)
 8018010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018014:	601a      	str	r2, [r3, #0]
 8018016:	f3bf 8f4f 	dsb	sy
 801801a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801801e:	bf00      	nop
 8018020:	3708      	adds	r7, #8
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	240037e0 	.word	0x240037e0
 801802c:	2400330c 	.word	0x2400330c
 8018030:	240037ec 	.word	0x240037ec
 8018034:	240037fc 	.word	0x240037fc
 8018038:	240037e8 	.word	0x240037e8
 801803c:	24003310 	.word	0x24003310
 8018040:	e000ed04 	.word	0xe000ed04

08018044 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801804c:	f001 fce4 	bl	8019a18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d102      	bne.n	801805c <vTaskDelete+0x18>
 8018056:	4b2d      	ldr	r3, [pc, #180]	@ (801810c <vTaskDelete+0xc8>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	e000      	b.n	801805e <vTaskDelete+0x1a>
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	3304      	adds	r3, #4
 8018064:	4618      	mov	r0, r3
 8018066:	f7fe fdd9 	bl	8016c1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801806e:	2b00      	cmp	r3, #0
 8018070:	d004      	beq.n	801807c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	3318      	adds	r3, #24
 8018076:	4618      	mov	r0, r3
 8018078:	f7fe fdd0 	bl	8016c1c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801807c:	4b24      	ldr	r3, [pc, #144]	@ (8018110 <vTaskDelete+0xcc>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	3301      	adds	r3, #1
 8018082:	4a23      	ldr	r2, [pc, #140]	@ (8018110 <vTaskDelete+0xcc>)
 8018084:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8018086:	4b21      	ldr	r3, [pc, #132]	@ (801810c <vTaskDelete+0xc8>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	68fa      	ldr	r2, [r7, #12]
 801808c:	429a      	cmp	r2, r3
 801808e:	d10b      	bne.n	80180a8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	3304      	adds	r3, #4
 8018094:	4619      	mov	r1, r3
 8018096:	481f      	ldr	r0, [pc, #124]	@ (8018114 <vTaskDelete+0xd0>)
 8018098:	f7fe fd63 	bl	8016b62 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801809c:	4b1e      	ldr	r3, [pc, #120]	@ (8018118 <vTaskDelete+0xd4>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	3301      	adds	r3, #1
 80180a2:	4a1d      	ldr	r2, [pc, #116]	@ (8018118 <vTaskDelete+0xd4>)
 80180a4:	6013      	str	r3, [r2, #0]
 80180a6:	e009      	b.n	80180bc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80180a8:	4b1c      	ldr	r3, [pc, #112]	@ (801811c <vTaskDelete+0xd8>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	3b01      	subs	r3, #1
 80180ae:	4a1b      	ldr	r2, [pc, #108]	@ (801811c <vTaskDelete+0xd8>)
 80180b0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80180b2:	68f8      	ldr	r0, [r7, #12]
 80180b4:	f000 fcf8 	bl	8018aa8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80180b8:	f000 fd2c 	bl	8018b14 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80180bc:	f001 fcde 	bl	8019a7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80180c0:	4b17      	ldr	r3, [pc, #92]	@ (8018120 <vTaskDelete+0xdc>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d01c      	beq.n	8018102 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80180c8:	4b10      	ldr	r3, [pc, #64]	@ (801810c <vTaskDelete+0xc8>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	68fa      	ldr	r2, [r7, #12]
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d117      	bne.n	8018102 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80180d2:	4b14      	ldr	r3, [pc, #80]	@ (8018124 <vTaskDelete+0xe0>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d00b      	beq.n	80180f2 <vTaskDelete+0xae>
	__asm volatile
 80180da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180de:	f383 8811 	msr	BASEPRI, r3
 80180e2:	f3bf 8f6f 	isb	sy
 80180e6:	f3bf 8f4f 	dsb	sy
 80180ea:	60bb      	str	r3, [r7, #8]
}
 80180ec:	bf00      	nop
 80180ee:	bf00      	nop
 80180f0:	e7fd      	b.n	80180ee <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80180f2:	4b0d      	ldr	r3, [pc, #52]	@ (8018128 <vTaskDelete+0xe4>)
 80180f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80180f8:	601a      	str	r2, [r3, #0]
 80180fa:	f3bf 8f4f 	dsb	sy
 80180fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018102:	bf00      	nop
 8018104:	3710      	adds	r7, #16
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	2400330c 	.word	0x2400330c
 8018110:	240037fc 	.word	0x240037fc
 8018114:	240037b4 	.word	0x240037b4
 8018118:	240037c8 	.word	0x240037c8
 801811c:	240037e0 	.word	0x240037e0
 8018120:	240037ec 	.word	0x240037ec
 8018124:	24003808 	.word	0x24003808
 8018128:	e000ed04 	.word	0xe000ed04

0801812c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801812c:	b580      	push	{r7, lr}
 801812e:	b084      	sub	sp, #16
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018134:	2300      	movs	r3, #0
 8018136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d018      	beq.n	8018170 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801813e:	4b14      	ldr	r3, [pc, #80]	@ (8018190 <vTaskDelay+0x64>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d00b      	beq.n	801815e <vTaskDelay+0x32>
	__asm volatile
 8018146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801814a:	f383 8811 	msr	BASEPRI, r3
 801814e:	f3bf 8f6f 	isb	sy
 8018152:	f3bf 8f4f 	dsb	sy
 8018156:	60bb      	str	r3, [r7, #8]
}
 8018158:	bf00      	nop
 801815a:	bf00      	nop
 801815c:	e7fd      	b.n	801815a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801815e:	f000 f8f3 	bl	8018348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018162:	2100      	movs	r1, #0
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f000 ff75 	bl	8019054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801816a:	f000 f8fb 	bl	8018364 <xTaskResumeAll>
 801816e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d107      	bne.n	8018186 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8018176:	4b07      	ldr	r3, [pc, #28]	@ (8018194 <vTaskDelay+0x68>)
 8018178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801817c:	601a      	str	r2, [r3, #0]
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018186:	bf00      	nop
 8018188:	3710      	adds	r7, #16
 801818a:	46bd      	mov	sp, r7
 801818c:	bd80      	pop	{r7, pc}
 801818e:	bf00      	nop
 8018190:	24003808 	.word	0x24003808
 8018194:	e000ed04 	.word	0xe000ed04

08018198 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8018198:	b580      	push	{r7, lr}
 801819a:	b088      	sub	sp, #32
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80181a4:	69bb      	ldr	r3, [r7, #24]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d10b      	bne.n	80181c2 <eTaskGetState+0x2a>
	__asm volatile
 80181aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181ae:	f383 8811 	msr	BASEPRI, r3
 80181b2:	f3bf 8f6f 	isb	sy
 80181b6:	f3bf 8f4f 	dsb	sy
 80181ba:	60bb      	str	r3, [r7, #8]
}
 80181bc:	bf00      	nop
 80181be:	bf00      	nop
 80181c0:	e7fd      	b.n	80181be <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80181c2:	4b24      	ldr	r3, [pc, #144]	@ (8018254 <eTaskGetState+0xbc>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	69ba      	ldr	r2, [r7, #24]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d102      	bne.n	80181d2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80181cc:	2300      	movs	r3, #0
 80181ce:	77fb      	strb	r3, [r7, #31]
 80181d0:	e03a      	b.n	8018248 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80181d2:	f001 fc21 	bl	8019a18 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	695b      	ldr	r3, [r3, #20]
 80181da:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80181dc:	4b1e      	ldr	r3, [pc, #120]	@ (8018258 <eTaskGetState+0xc0>)
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80181e2:	4b1e      	ldr	r3, [pc, #120]	@ (801825c <eTaskGetState+0xc4>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80181e8:	f001 fc48 	bl	8019a7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80181ec:	697a      	ldr	r2, [r7, #20]
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d003      	beq.n	80181fc <eTaskGetState+0x64>
 80181f4:	697a      	ldr	r2, [r7, #20]
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d102      	bne.n	8018202 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80181fc:	2302      	movs	r3, #2
 80181fe:	77fb      	strb	r3, [r7, #31]
 8018200:	e022      	b.n	8018248 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	4a16      	ldr	r2, [pc, #88]	@ (8018260 <eTaskGetState+0xc8>)
 8018206:	4293      	cmp	r3, r2
 8018208:	d112      	bne.n	8018230 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10b      	bne.n	801822a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8018218:	b2db      	uxtb	r3, r3
 801821a:	2b01      	cmp	r3, #1
 801821c:	d102      	bne.n	8018224 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 801821e:	2302      	movs	r3, #2
 8018220:	77fb      	strb	r3, [r7, #31]
 8018222:	e011      	b.n	8018248 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8018224:	2303      	movs	r3, #3
 8018226:	77fb      	strb	r3, [r7, #31]
 8018228:	e00e      	b.n	8018248 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801822a:	2302      	movs	r3, #2
 801822c:	77fb      	strb	r3, [r7, #31]
 801822e:	e00b      	b.n	8018248 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8018230:	697b      	ldr	r3, [r7, #20]
 8018232:	4a0c      	ldr	r2, [pc, #48]	@ (8018264 <eTaskGetState+0xcc>)
 8018234:	4293      	cmp	r3, r2
 8018236:	d002      	beq.n	801823e <eTaskGetState+0xa6>
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d102      	bne.n	8018244 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801823e:	2304      	movs	r3, #4
 8018240:	77fb      	strb	r3, [r7, #31]
 8018242:	e001      	b.n	8018248 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8018244:	2301      	movs	r3, #1
 8018246:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8018248:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801824a:	4618      	mov	r0, r3
 801824c:	3720      	adds	r7, #32
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}
 8018252:	bf00      	nop
 8018254:	2400330c 	.word	0x2400330c
 8018258:	24003798 	.word	0x24003798
 801825c:	2400379c 	.word	0x2400379c
 8018260:	240037cc 	.word	0x240037cc
 8018264:	240037b4 	.word	0x240037b4

08018268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b08a      	sub	sp, #40	@ 0x28
 801826c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801826e:	2300      	movs	r3, #0
 8018270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018272:	2300      	movs	r3, #0
 8018274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018276:	463a      	mov	r2, r7
 8018278:	1d39      	adds	r1, r7, #4
 801827a:	f107 0308 	add.w	r3, r7, #8
 801827e:	4618      	mov	r0, r3
 8018280:	f7fe fc0e 	bl	8016aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018284:	6839      	ldr	r1, [r7, #0]
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	68ba      	ldr	r2, [r7, #8]
 801828a:	9202      	str	r2, [sp, #8]
 801828c:	9301      	str	r3, [sp, #4]
 801828e:	2300      	movs	r3, #0
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	2300      	movs	r3, #0
 8018294:	460a      	mov	r2, r1
 8018296:	4924      	ldr	r1, [pc, #144]	@ (8018328 <vTaskStartScheduler+0xc0>)
 8018298:	4824      	ldr	r0, [pc, #144]	@ (801832c <vTaskStartScheduler+0xc4>)
 801829a:	f7ff fd15 	bl	8017cc8 <xTaskCreateStatic>
 801829e:	4603      	mov	r3, r0
 80182a0:	4a23      	ldr	r2, [pc, #140]	@ (8018330 <vTaskStartScheduler+0xc8>)
 80182a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80182a4:	4b22      	ldr	r3, [pc, #136]	@ (8018330 <vTaskStartScheduler+0xc8>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d002      	beq.n	80182b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80182ac:	2301      	movs	r3, #1
 80182ae:	617b      	str	r3, [r7, #20]
 80182b0:	e001      	b.n	80182b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80182b2:	2300      	movs	r3, #0
 80182b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	2b01      	cmp	r3, #1
 80182ba:	d102      	bne.n	80182c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80182bc:	f000 ff1e 	bl	80190fc <xTimerCreateTimerTask>
 80182c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	d11b      	bne.n	8018300 <vTaskStartScheduler+0x98>
	__asm volatile
 80182c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182cc:	f383 8811 	msr	BASEPRI, r3
 80182d0:	f3bf 8f6f 	isb	sy
 80182d4:	f3bf 8f4f 	dsb	sy
 80182d8:	613b      	str	r3, [r7, #16]
}
 80182da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80182dc:	4b15      	ldr	r3, [pc, #84]	@ (8018334 <vTaskStartScheduler+0xcc>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	3354      	adds	r3, #84	@ 0x54
 80182e2:	4a15      	ldr	r2, [pc, #84]	@ (8018338 <vTaskStartScheduler+0xd0>)
 80182e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80182e6:	4b15      	ldr	r3, [pc, #84]	@ (801833c <vTaskStartScheduler+0xd4>)
 80182e8:	f04f 32ff 	mov.w	r2, #4294967295
 80182ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80182ee:	4b14      	ldr	r3, [pc, #80]	@ (8018340 <vTaskStartScheduler+0xd8>)
 80182f0:	2201      	movs	r2, #1
 80182f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80182f4:	4b13      	ldr	r3, [pc, #76]	@ (8018344 <vTaskStartScheduler+0xdc>)
 80182f6:	2200      	movs	r2, #0
 80182f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80182fa:	f001 fae9 	bl	80198d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80182fe:	e00f      	b.n	8018320 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018306:	d10b      	bne.n	8018320 <vTaskStartScheduler+0xb8>
	__asm volatile
 8018308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801830c:	f383 8811 	msr	BASEPRI, r3
 8018310:	f3bf 8f6f 	isb	sy
 8018314:	f3bf 8f4f 	dsb	sy
 8018318:	60fb      	str	r3, [r7, #12]
}
 801831a:	bf00      	nop
 801831c:	bf00      	nop
 801831e:	e7fd      	b.n	801831c <vTaskStartScheduler+0xb4>
}
 8018320:	bf00      	nop
 8018322:	3718      	adds	r7, #24
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}
 8018328:	0801e14c 	.word	0x0801e14c
 801832c:	0801899d 	.word	0x0801899d
 8018330:	24003804 	.word	0x24003804
 8018334:	2400330c 	.word	0x2400330c
 8018338:	24000034 	.word	0x24000034
 801833c:	24003800 	.word	0x24003800
 8018340:	240037ec 	.word	0x240037ec
 8018344:	240037e4 	.word	0x240037e4

08018348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018348:	b480      	push	{r7}
 801834a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801834c:	4b04      	ldr	r3, [pc, #16]	@ (8018360 <vTaskSuspendAll+0x18>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	3301      	adds	r3, #1
 8018352:	4a03      	ldr	r2, [pc, #12]	@ (8018360 <vTaskSuspendAll+0x18>)
 8018354:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018356:	bf00      	nop
 8018358:	46bd      	mov	sp, r7
 801835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835e:	4770      	bx	lr
 8018360:	24003808 	.word	0x24003808

08018364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801836a:	2300      	movs	r3, #0
 801836c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801836e:	2300      	movs	r3, #0
 8018370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018372:	4b42      	ldr	r3, [pc, #264]	@ (801847c <xTaskResumeAll+0x118>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d10b      	bne.n	8018392 <xTaskResumeAll+0x2e>
	__asm volatile
 801837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801837e:	f383 8811 	msr	BASEPRI, r3
 8018382:	f3bf 8f6f 	isb	sy
 8018386:	f3bf 8f4f 	dsb	sy
 801838a:	603b      	str	r3, [r7, #0]
}
 801838c:	bf00      	nop
 801838e:	bf00      	nop
 8018390:	e7fd      	b.n	801838e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018392:	f001 fb41 	bl	8019a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018396:	4b39      	ldr	r3, [pc, #228]	@ (801847c <xTaskResumeAll+0x118>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	3b01      	subs	r3, #1
 801839c:	4a37      	ldr	r2, [pc, #220]	@ (801847c <xTaskResumeAll+0x118>)
 801839e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80183a0:	4b36      	ldr	r3, [pc, #216]	@ (801847c <xTaskResumeAll+0x118>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d162      	bne.n	801846e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80183a8:	4b35      	ldr	r3, [pc, #212]	@ (8018480 <xTaskResumeAll+0x11c>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d05e      	beq.n	801846e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183b0:	e02f      	b.n	8018412 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183b2:	4b34      	ldr	r3, [pc, #208]	@ (8018484 <xTaskResumeAll+0x120>)
 80183b4:	68db      	ldr	r3, [r3, #12]
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	3318      	adds	r3, #24
 80183be:	4618      	mov	r0, r3
 80183c0:	f7fe fc2c 	bl	8016c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	3304      	adds	r3, #4
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fe fc27 	bl	8016c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80183d2:	4b2d      	ldr	r3, [pc, #180]	@ (8018488 <xTaskResumeAll+0x124>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d903      	bls.n	80183e2 <xTaskResumeAll+0x7e>
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183de:	4a2a      	ldr	r2, [pc, #168]	@ (8018488 <xTaskResumeAll+0x124>)
 80183e0:	6013      	str	r3, [r2, #0]
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80183e6:	4613      	mov	r3, r2
 80183e8:	009b      	lsls	r3, r3, #2
 80183ea:	4413      	add	r3, r2
 80183ec:	009b      	lsls	r3, r3, #2
 80183ee:	4a27      	ldr	r2, [pc, #156]	@ (801848c <xTaskResumeAll+0x128>)
 80183f0:	441a      	add	r2, r3
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	3304      	adds	r3, #4
 80183f6:	4619      	mov	r1, r3
 80183f8:	4610      	mov	r0, r2
 80183fa:	f7fe fbb2 	bl	8016b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018402:	4b23      	ldr	r3, [pc, #140]	@ (8018490 <xTaskResumeAll+0x12c>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018408:	429a      	cmp	r2, r3
 801840a:	d302      	bcc.n	8018412 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801840c:	4b21      	ldr	r3, [pc, #132]	@ (8018494 <xTaskResumeAll+0x130>)
 801840e:	2201      	movs	r2, #1
 8018410:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018412:	4b1c      	ldr	r3, [pc, #112]	@ (8018484 <xTaskResumeAll+0x120>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1cb      	bne.n	80183b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d001      	beq.n	8018424 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018420:	f000 fb78 	bl	8018b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018424:	4b1c      	ldr	r3, [pc, #112]	@ (8018498 <xTaskResumeAll+0x134>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d010      	beq.n	8018452 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018430:	f000 f858 	bl	80184e4 <xTaskIncrementTick>
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d002      	beq.n	8018440 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801843a:	4b16      	ldr	r3, [pc, #88]	@ (8018494 <xTaskResumeAll+0x130>)
 801843c:	2201      	movs	r2, #1
 801843e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	3b01      	subs	r3, #1
 8018444:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d1f1      	bne.n	8018430 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801844c:	4b12      	ldr	r3, [pc, #72]	@ (8018498 <xTaskResumeAll+0x134>)
 801844e:	2200      	movs	r2, #0
 8018450:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018452:	4b10      	ldr	r3, [pc, #64]	@ (8018494 <xTaskResumeAll+0x130>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d009      	beq.n	801846e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801845a:	2301      	movs	r3, #1
 801845c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801845e:	4b0f      	ldr	r3, [pc, #60]	@ (801849c <xTaskResumeAll+0x138>)
 8018460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018464:	601a      	str	r2, [r3, #0]
 8018466:	f3bf 8f4f 	dsb	sy
 801846a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801846e:	f001 fb05 	bl	8019a7c <vPortExitCritical>

	return xAlreadyYielded;
 8018472:	68bb      	ldr	r3, [r7, #8]
}
 8018474:	4618      	mov	r0, r3
 8018476:	3710      	adds	r7, #16
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}
 801847c:	24003808 	.word	0x24003808
 8018480:	240037e0 	.word	0x240037e0
 8018484:	240037a0 	.word	0x240037a0
 8018488:	240037e8 	.word	0x240037e8
 801848c:	24003310 	.word	0x24003310
 8018490:	2400330c 	.word	0x2400330c
 8018494:	240037f4 	.word	0x240037f4
 8018498:	240037f0 	.word	0x240037f0
 801849c:	e000ed04 	.word	0xe000ed04

080184a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80184a0:	b480      	push	{r7}
 80184a2:	b083      	sub	sp, #12
 80184a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80184a6:	4b05      	ldr	r3, [pc, #20]	@ (80184bc <xTaskGetTickCount+0x1c>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80184ac:	687b      	ldr	r3, [r7, #4]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	370c      	adds	r7, #12
 80184b2:	46bd      	mov	sp, r7
 80184b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b8:	4770      	bx	lr
 80184ba:	bf00      	nop
 80184bc:	240037e4 	.word	0x240037e4

080184c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b082      	sub	sp, #8
 80184c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80184c6:	f001 fb87 	bl	8019bd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80184ca:	2300      	movs	r3, #0
 80184cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80184ce:	4b04      	ldr	r3, [pc, #16]	@ (80184e0 <xTaskGetTickCountFromISR+0x20>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80184d4:	683b      	ldr	r3, [r7, #0]
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop
 80184e0:	240037e4 	.word	0x240037e4

080184e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b086      	sub	sp, #24
 80184e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80184ea:	2300      	movs	r3, #0
 80184ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184ee:	4b4f      	ldr	r3, [pc, #316]	@ (801862c <xTaskIncrementTick+0x148>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f040 8090 	bne.w	8018618 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80184f8:	4b4d      	ldr	r3, [pc, #308]	@ (8018630 <xTaskIncrementTick+0x14c>)
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	3301      	adds	r3, #1
 80184fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018500:	4a4b      	ldr	r2, [pc, #300]	@ (8018630 <xTaskIncrementTick+0x14c>)
 8018502:	693b      	ldr	r3, [r7, #16]
 8018504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d121      	bne.n	8018550 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801850c:	4b49      	ldr	r3, [pc, #292]	@ (8018634 <xTaskIncrementTick+0x150>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d00b      	beq.n	801852e <xTaskIncrementTick+0x4a>
	__asm volatile
 8018516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801851a:	f383 8811 	msr	BASEPRI, r3
 801851e:	f3bf 8f6f 	isb	sy
 8018522:	f3bf 8f4f 	dsb	sy
 8018526:	603b      	str	r3, [r7, #0]
}
 8018528:	bf00      	nop
 801852a:	bf00      	nop
 801852c:	e7fd      	b.n	801852a <xTaskIncrementTick+0x46>
 801852e:	4b41      	ldr	r3, [pc, #260]	@ (8018634 <xTaskIncrementTick+0x150>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	60fb      	str	r3, [r7, #12]
 8018534:	4b40      	ldr	r3, [pc, #256]	@ (8018638 <xTaskIncrementTick+0x154>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	4a3e      	ldr	r2, [pc, #248]	@ (8018634 <xTaskIncrementTick+0x150>)
 801853a:	6013      	str	r3, [r2, #0]
 801853c:	4a3e      	ldr	r2, [pc, #248]	@ (8018638 <xTaskIncrementTick+0x154>)
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	6013      	str	r3, [r2, #0]
 8018542:	4b3e      	ldr	r3, [pc, #248]	@ (801863c <xTaskIncrementTick+0x158>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	3301      	adds	r3, #1
 8018548:	4a3c      	ldr	r2, [pc, #240]	@ (801863c <xTaskIncrementTick+0x158>)
 801854a:	6013      	str	r3, [r2, #0]
 801854c:	f000 fae2 	bl	8018b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018550:	4b3b      	ldr	r3, [pc, #236]	@ (8018640 <xTaskIncrementTick+0x15c>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	693a      	ldr	r2, [r7, #16]
 8018556:	429a      	cmp	r2, r3
 8018558:	d349      	bcc.n	80185ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801855a:	4b36      	ldr	r3, [pc, #216]	@ (8018634 <xTaskIncrementTick+0x150>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d104      	bne.n	801856e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018564:	4b36      	ldr	r3, [pc, #216]	@ (8018640 <xTaskIncrementTick+0x15c>)
 8018566:	f04f 32ff 	mov.w	r2, #4294967295
 801856a:	601a      	str	r2, [r3, #0]
					break;
 801856c:	e03f      	b.n	80185ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801856e:	4b31      	ldr	r3, [pc, #196]	@ (8018634 <xTaskIncrementTick+0x150>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	68db      	ldr	r3, [r3, #12]
 8018574:	68db      	ldr	r3, [r3, #12]
 8018576:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	685b      	ldr	r3, [r3, #4]
 801857c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801857e:	693a      	ldr	r2, [r7, #16]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	429a      	cmp	r2, r3
 8018584:	d203      	bcs.n	801858e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018586:	4a2e      	ldr	r2, [pc, #184]	@ (8018640 <xTaskIncrementTick+0x15c>)
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801858c:	e02f      	b.n	80185ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	3304      	adds	r3, #4
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fb42 	bl	8016c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801859c:	2b00      	cmp	r3, #0
 801859e:	d004      	beq.n	80185aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	3318      	adds	r3, #24
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fe fb39 	bl	8016c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80185ae:	4b25      	ldr	r3, [pc, #148]	@ (8018644 <xTaskIncrementTick+0x160>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d903      	bls.n	80185be <xTaskIncrementTick+0xda>
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185ba:	4a22      	ldr	r2, [pc, #136]	@ (8018644 <xTaskIncrementTick+0x160>)
 80185bc:	6013      	str	r3, [r2, #0]
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80185c2:	4613      	mov	r3, r2
 80185c4:	009b      	lsls	r3, r3, #2
 80185c6:	4413      	add	r3, r2
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	4a1f      	ldr	r2, [pc, #124]	@ (8018648 <xTaskIncrementTick+0x164>)
 80185cc:	441a      	add	r2, r3
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	3304      	adds	r3, #4
 80185d2:	4619      	mov	r1, r3
 80185d4:	4610      	mov	r0, r2
 80185d6:	f7fe fac4 	bl	8016b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80185de:	4b1b      	ldr	r3, [pc, #108]	@ (801864c <xTaskIncrementTick+0x168>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d3b8      	bcc.n	801855a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80185e8:	2301      	movs	r3, #1
 80185ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80185ec:	e7b5      	b.n	801855a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80185ee:	4b17      	ldr	r3, [pc, #92]	@ (801864c <xTaskIncrementTick+0x168>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80185f4:	4914      	ldr	r1, [pc, #80]	@ (8018648 <xTaskIncrementTick+0x164>)
 80185f6:	4613      	mov	r3, r2
 80185f8:	009b      	lsls	r3, r3, #2
 80185fa:	4413      	add	r3, r2
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	440b      	add	r3, r1
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	2b01      	cmp	r3, #1
 8018604:	d901      	bls.n	801860a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8018606:	2301      	movs	r3, #1
 8018608:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801860a:	4b11      	ldr	r3, [pc, #68]	@ (8018650 <xTaskIncrementTick+0x16c>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d007      	beq.n	8018622 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8018612:	2301      	movs	r3, #1
 8018614:	617b      	str	r3, [r7, #20]
 8018616:	e004      	b.n	8018622 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018618:	4b0e      	ldr	r3, [pc, #56]	@ (8018654 <xTaskIncrementTick+0x170>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	3301      	adds	r3, #1
 801861e:	4a0d      	ldr	r2, [pc, #52]	@ (8018654 <xTaskIncrementTick+0x170>)
 8018620:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018622:	697b      	ldr	r3, [r7, #20]
}
 8018624:	4618      	mov	r0, r3
 8018626:	3718      	adds	r7, #24
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}
 801862c:	24003808 	.word	0x24003808
 8018630:	240037e4 	.word	0x240037e4
 8018634:	24003798 	.word	0x24003798
 8018638:	2400379c 	.word	0x2400379c
 801863c:	240037f8 	.word	0x240037f8
 8018640:	24003800 	.word	0x24003800
 8018644:	240037e8 	.word	0x240037e8
 8018648:	24003310 	.word	0x24003310
 801864c:	2400330c 	.word	0x2400330c
 8018650:	240037f4 	.word	0x240037f4
 8018654:	240037f0 	.word	0x240037f0

08018658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018658:	b480      	push	{r7}
 801865a:	b085      	sub	sp, #20
 801865c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801865e:	4b2b      	ldr	r3, [pc, #172]	@ (801870c <vTaskSwitchContext+0xb4>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d003      	beq.n	801866e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018666:	4b2a      	ldr	r3, [pc, #168]	@ (8018710 <vTaskSwitchContext+0xb8>)
 8018668:	2201      	movs	r2, #1
 801866a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801866c:	e047      	b.n	80186fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801866e:	4b28      	ldr	r3, [pc, #160]	@ (8018710 <vTaskSwitchContext+0xb8>)
 8018670:	2200      	movs	r2, #0
 8018672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018674:	4b27      	ldr	r3, [pc, #156]	@ (8018714 <vTaskSwitchContext+0xbc>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	60fb      	str	r3, [r7, #12]
 801867a:	e011      	b.n	80186a0 <vTaskSwitchContext+0x48>
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d10b      	bne.n	801869a <vTaskSwitchContext+0x42>
	__asm volatile
 8018682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018686:	f383 8811 	msr	BASEPRI, r3
 801868a:	f3bf 8f6f 	isb	sy
 801868e:	f3bf 8f4f 	dsb	sy
 8018692:	607b      	str	r3, [r7, #4]
}
 8018694:	bf00      	nop
 8018696:	bf00      	nop
 8018698:	e7fd      	b.n	8018696 <vTaskSwitchContext+0x3e>
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	3b01      	subs	r3, #1
 801869e:	60fb      	str	r3, [r7, #12]
 80186a0:	491d      	ldr	r1, [pc, #116]	@ (8018718 <vTaskSwitchContext+0xc0>)
 80186a2:	68fa      	ldr	r2, [r7, #12]
 80186a4:	4613      	mov	r3, r2
 80186a6:	009b      	lsls	r3, r3, #2
 80186a8:	4413      	add	r3, r2
 80186aa:	009b      	lsls	r3, r3, #2
 80186ac:	440b      	add	r3, r1
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d0e3      	beq.n	801867c <vTaskSwitchContext+0x24>
 80186b4:	68fa      	ldr	r2, [r7, #12]
 80186b6:	4613      	mov	r3, r2
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	4413      	add	r3, r2
 80186bc:	009b      	lsls	r3, r3, #2
 80186be:	4a16      	ldr	r2, [pc, #88]	@ (8018718 <vTaskSwitchContext+0xc0>)
 80186c0:	4413      	add	r3, r2
 80186c2:	60bb      	str	r3, [r7, #8]
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	685a      	ldr	r2, [r3, #4]
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	605a      	str	r2, [r3, #4]
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	685a      	ldr	r2, [r3, #4]
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	3308      	adds	r3, #8
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d104      	bne.n	80186e4 <vTaskSwitchContext+0x8c>
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	685a      	ldr	r2, [r3, #4]
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	605a      	str	r2, [r3, #4]
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	68db      	ldr	r3, [r3, #12]
 80186ea:	4a0c      	ldr	r2, [pc, #48]	@ (801871c <vTaskSwitchContext+0xc4>)
 80186ec:	6013      	str	r3, [r2, #0]
 80186ee:	4a09      	ldr	r2, [pc, #36]	@ (8018714 <vTaskSwitchContext+0xbc>)
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80186f4:	4b09      	ldr	r3, [pc, #36]	@ (801871c <vTaskSwitchContext+0xc4>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	3354      	adds	r3, #84	@ 0x54
 80186fa:	4a09      	ldr	r2, [pc, #36]	@ (8018720 <vTaskSwitchContext+0xc8>)
 80186fc:	6013      	str	r3, [r2, #0]
}
 80186fe:	bf00      	nop
 8018700:	3714      	adds	r7, #20
 8018702:	46bd      	mov	sp, r7
 8018704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018708:	4770      	bx	lr
 801870a:	bf00      	nop
 801870c:	24003808 	.word	0x24003808
 8018710:	240037f4 	.word	0x240037f4
 8018714:	240037e8 	.word	0x240037e8
 8018718:	24003310 	.word	0x24003310
 801871c:	2400330c 	.word	0x2400330c
 8018720:	24000034 	.word	0x24000034

08018724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b084      	sub	sp, #16
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d10b      	bne.n	801874c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8018734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018738:	f383 8811 	msr	BASEPRI, r3
 801873c:	f3bf 8f6f 	isb	sy
 8018740:	f3bf 8f4f 	dsb	sy
 8018744:	60fb      	str	r3, [r7, #12]
}
 8018746:	bf00      	nop
 8018748:	bf00      	nop
 801874a:	e7fd      	b.n	8018748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801874c:	4b07      	ldr	r3, [pc, #28]	@ (801876c <vTaskPlaceOnEventList+0x48>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	3318      	adds	r3, #24
 8018752:	4619      	mov	r1, r3
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f7fe fa28 	bl	8016baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801875a:	2101      	movs	r1, #1
 801875c:	6838      	ldr	r0, [r7, #0]
 801875e:	f000 fc79 	bl	8019054 <prvAddCurrentTaskToDelayedList>
}
 8018762:	bf00      	nop
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	2400330c 	.word	0x2400330c

08018770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018770:	b580      	push	{r7, lr}
 8018772:	b086      	sub	sp, #24
 8018774:	af00      	add	r7, sp, #0
 8018776:	60f8      	str	r0, [r7, #12]
 8018778:	60b9      	str	r1, [r7, #8]
 801877a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d10b      	bne.n	801879a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8018782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018786:	f383 8811 	msr	BASEPRI, r3
 801878a:	f3bf 8f6f 	isb	sy
 801878e:	f3bf 8f4f 	dsb	sy
 8018792:	617b      	str	r3, [r7, #20]
}
 8018794:	bf00      	nop
 8018796:	bf00      	nop
 8018798:	e7fd      	b.n	8018796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801879a:	4b0a      	ldr	r3, [pc, #40]	@ (80187c4 <vTaskPlaceOnEventListRestricted+0x54>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	3318      	adds	r3, #24
 80187a0:	4619      	mov	r1, r3
 80187a2:	68f8      	ldr	r0, [r7, #12]
 80187a4:	f7fe f9dd 	bl	8016b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d002      	beq.n	80187b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80187ae:	f04f 33ff 	mov.w	r3, #4294967295
 80187b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80187b4:	6879      	ldr	r1, [r7, #4]
 80187b6:	68b8      	ldr	r0, [r7, #8]
 80187b8:	f000 fc4c 	bl	8019054 <prvAddCurrentTaskToDelayedList>
	}
 80187bc:	bf00      	nop
 80187be:	3718      	adds	r7, #24
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}
 80187c4:	2400330c 	.word	0x2400330c

080187c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b086      	sub	sp, #24
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	68db      	ldr	r3, [r3, #12]
 80187d4:	68db      	ldr	r3, [r3, #12]
 80187d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d10b      	bne.n	80187f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80187de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187e2:	f383 8811 	msr	BASEPRI, r3
 80187e6:	f3bf 8f6f 	isb	sy
 80187ea:	f3bf 8f4f 	dsb	sy
 80187ee:	60fb      	str	r3, [r7, #12]
}
 80187f0:	bf00      	nop
 80187f2:	bf00      	nop
 80187f4:	e7fd      	b.n	80187f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	3318      	adds	r3, #24
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7fe fa0e 	bl	8016c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018800:	4b1d      	ldr	r3, [pc, #116]	@ (8018878 <xTaskRemoveFromEventList+0xb0>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d11d      	bne.n	8018844 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	3304      	adds	r3, #4
 801880c:	4618      	mov	r0, r3
 801880e:	f7fe fa05 	bl	8016c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018816:	4b19      	ldr	r3, [pc, #100]	@ (801887c <xTaskRemoveFromEventList+0xb4>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	429a      	cmp	r2, r3
 801881c:	d903      	bls.n	8018826 <xTaskRemoveFromEventList+0x5e>
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018822:	4a16      	ldr	r2, [pc, #88]	@ (801887c <xTaskRemoveFromEventList+0xb4>)
 8018824:	6013      	str	r3, [r2, #0]
 8018826:	693b      	ldr	r3, [r7, #16]
 8018828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801882a:	4613      	mov	r3, r2
 801882c:	009b      	lsls	r3, r3, #2
 801882e:	4413      	add	r3, r2
 8018830:	009b      	lsls	r3, r3, #2
 8018832:	4a13      	ldr	r2, [pc, #76]	@ (8018880 <xTaskRemoveFromEventList+0xb8>)
 8018834:	441a      	add	r2, r3
 8018836:	693b      	ldr	r3, [r7, #16]
 8018838:	3304      	adds	r3, #4
 801883a:	4619      	mov	r1, r3
 801883c:	4610      	mov	r0, r2
 801883e:	f7fe f990 	bl	8016b62 <vListInsertEnd>
 8018842:	e005      	b.n	8018850 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018844:	693b      	ldr	r3, [r7, #16]
 8018846:	3318      	adds	r3, #24
 8018848:	4619      	mov	r1, r3
 801884a:	480e      	ldr	r0, [pc, #56]	@ (8018884 <xTaskRemoveFromEventList+0xbc>)
 801884c:	f7fe f989 	bl	8016b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018850:	693b      	ldr	r3, [r7, #16]
 8018852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018854:	4b0c      	ldr	r3, [pc, #48]	@ (8018888 <xTaskRemoveFromEventList+0xc0>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801885a:	429a      	cmp	r2, r3
 801885c:	d905      	bls.n	801886a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801885e:	2301      	movs	r3, #1
 8018860:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018862:	4b0a      	ldr	r3, [pc, #40]	@ (801888c <xTaskRemoveFromEventList+0xc4>)
 8018864:	2201      	movs	r2, #1
 8018866:	601a      	str	r2, [r3, #0]
 8018868:	e001      	b.n	801886e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801886a:	2300      	movs	r3, #0
 801886c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801886e:	697b      	ldr	r3, [r7, #20]
}
 8018870:	4618      	mov	r0, r3
 8018872:	3718      	adds	r7, #24
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}
 8018878:	24003808 	.word	0x24003808
 801887c:	240037e8 	.word	0x240037e8
 8018880:	24003310 	.word	0x24003310
 8018884:	240037a0 	.word	0x240037a0
 8018888:	2400330c 	.word	0x2400330c
 801888c:	240037f4 	.word	0x240037f4

08018890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018890:	b480      	push	{r7}
 8018892:	b083      	sub	sp, #12
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018898:	4b06      	ldr	r3, [pc, #24]	@ (80188b4 <vTaskInternalSetTimeOutState+0x24>)
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80188a0:	4b05      	ldr	r3, [pc, #20]	@ (80188b8 <vTaskInternalSetTimeOutState+0x28>)
 80188a2:	681a      	ldr	r2, [r3, #0]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	605a      	str	r2, [r3, #4]
}
 80188a8:	bf00      	nop
 80188aa:	370c      	adds	r7, #12
 80188ac:	46bd      	mov	sp, r7
 80188ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b2:	4770      	bx	lr
 80188b4:	240037f8 	.word	0x240037f8
 80188b8:	240037e4 	.word	0x240037e4

080188bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b088      	sub	sp, #32
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d10b      	bne.n	80188e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80188cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188d0:	f383 8811 	msr	BASEPRI, r3
 80188d4:	f3bf 8f6f 	isb	sy
 80188d8:	f3bf 8f4f 	dsb	sy
 80188dc:	613b      	str	r3, [r7, #16]
}
 80188de:	bf00      	nop
 80188e0:	bf00      	nop
 80188e2:	e7fd      	b.n	80188e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d10b      	bne.n	8018902 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80188ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188ee:	f383 8811 	msr	BASEPRI, r3
 80188f2:	f3bf 8f6f 	isb	sy
 80188f6:	f3bf 8f4f 	dsb	sy
 80188fa:	60fb      	str	r3, [r7, #12]
}
 80188fc:	bf00      	nop
 80188fe:	bf00      	nop
 8018900:	e7fd      	b.n	80188fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8018902:	f001 f889 	bl	8019a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018906:	4b1d      	ldr	r3, [pc, #116]	@ (801897c <xTaskCheckForTimeOut+0xc0>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	69ba      	ldr	r2, [r7, #24]
 8018912:	1ad3      	subs	r3, r2, r3
 8018914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801891e:	d102      	bne.n	8018926 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018920:	2300      	movs	r3, #0
 8018922:	61fb      	str	r3, [r7, #28]
 8018924:	e023      	b.n	801896e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681a      	ldr	r2, [r3, #0]
 801892a:	4b15      	ldr	r3, [pc, #84]	@ (8018980 <xTaskCheckForTimeOut+0xc4>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	429a      	cmp	r2, r3
 8018930:	d007      	beq.n	8018942 <xTaskCheckForTimeOut+0x86>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	685b      	ldr	r3, [r3, #4]
 8018936:	69ba      	ldr	r2, [r7, #24]
 8018938:	429a      	cmp	r2, r3
 801893a:	d302      	bcc.n	8018942 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801893c:	2301      	movs	r3, #1
 801893e:	61fb      	str	r3, [r7, #28]
 8018940:	e015      	b.n	801896e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	697a      	ldr	r2, [r7, #20]
 8018948:	429a      	cmp	r2, r3
 801894a:	d20b      	bcs.n	8018964 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	681a      	ldr	r2, [r3, #0]
 8018950:	697b      	ldr	r3, [r7, #20]
 8018952:	1ad2      	subs	r2, r2, r3
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f7ff ff99 	bl	8018890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801895e:	2300      	movs	r3, #0
 8018960:	61fb      	str	r3, [r7, #28]
 8018962:	e004      	b.n	801896e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	2200      	movs	r2, #0
 8018968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801896a:	2301      	movs	r3, #1
 801896c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801896e:	f001 f885 	bl	8019a7c <vPortExitCritical>

	return xReturn;
 8018972:	69fb      	ldr	r3, [r7, #28]
}
 8018974:	4618      	mov	r0, r3
 8018976:	3720      	adds	r7, #32
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	240037e4 	.word	0x240037e4
 8018980:	240037f8 	.word	0x240037f8

08018984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018984:	b480      	push	{r7}
 8018986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018988:	4b03      	ldr	r3, [pc, #12]	@ (8018998 <vTaskMissedYield+0x14>)
 801898a:	2201      	movs	r2, #1
 801898c:	601a      	str	r2, [r3, #0]
}
 801898e:	bf00      	nop
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr
 8018998:	240037f4 	.word	0x240037f4

0801899c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80189a4:	f000 f852 	bl	8018a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80189a8:	4b06      	ldr	r3, [pc, #24]	@ (80189c4 <prvIdleTask+0x28>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	d9f9      	bls.n	80189a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80189b0:	4b05      	ldr	r3, [pc, #20]	@ (80189c8 <prvIdleTask+0x2c>)
 80189b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80189b6:	601a      	str	r2, [r3, #0]
 80189b8:	f3bf 8f4f 	dsb	sy
 80189bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80189c0:	e7f0      	b.n	80189a4 <prvIdleTask+0x8>
 80189c2:	bf00      	nop
 80189c4:	24003310 	.word	0x24003310
 80189c8:	e000ed04 	.word	0xe000ed04

080189cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189d2:	2300      	movs	r3, #0
 80189d4:	607b      	str	r3, [r7, #4]
 80189d6:	e00c      	b.n	80189f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	4613      	mov	r3, r2
 80189dc:	009b      	lsls	r3, r3, #2
 80189de:	4413      	add	r3, r2
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	4a12      	ldr	r2, [pc, #72]	@ (8018a2c <prvInitialiseTaskLists+0x60>)
 80189e4:	4413      	add	r3, r2
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7fe f88e 	bl	8016b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	3301      	adds	r3, #1
 80189f0:	607b      	str	r3, [r7, #4]
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2b37      	cmp	r3, #55	@ 0x37
 80189f6:	d9ef      	bls.n	80189d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189f8:	480d      	ldr	r0, [pc, #52]	@ (8018a30 <prvInitialiseTaskLists+0x64>)
 80189fa:	f7fe f885 	bl	8016b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189fe:	480d      	ldr	r0, [pc, #52]	@ (8018a34 <prvInitialiseTaskLists+0x68>)
 8018a00:	f7fe f882 	bl	8016b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018a04:	480c      	ldr	r0, [pc, #48]	@ (8018a38 <prvInitialiseTaskLists+0x6c>)
 8018a06:	f7fe f87f 	bl	8016b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018a0a:	480c      	ldr	r0, [pc, #48]	@ (8018a3c <prvInitialiseTaskLists+0x70>)
 8018a0c:	f7fe f87c 	bl	8016b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018a10:	480b      	ldr	r0, [pc, #44]	@ (8018a40 <prvInitialiseTaskLists+0x74>)
 8018a12:	f7fe f879 	bl	8016b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018a16:	4b0b      	ldr	r3, [pc, #44]	@ (8018a44 <prvInitialiseTaskLists+0x78>)
 8018a18:	4a05      	ldr	r2, [pc, #20]	@ (8018a30 <prvInitialiseTaskLists+0x64>)
 8018a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8018a48 <prvInitialiseTaskLists+0x7c>)
 8018a1e:	4a05      	ldr	r2, [pc, #20]	@ (8018a34 <prvInitialiseTaskLists+0x68>)
 8018a20:	601a      	str	r2, [r3, #0]
}
 8018a22:	bf00      	nop
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	24003310 	.word	0x24003310
 8018a30:	24003770 	.word	0x24003770
 8018a34:	24003784 	.word	0x24003784
 8018a38:	240037a0 	.word	0x240037a0
 8018a3c:	240037b4 	.word	0x240037b4
 8018a40:	240037cc 	.word	0x240037cc
 8018a44:	24003798 	.word	0x24003798
 8018a48:	2400379c 	.word	0x2400379c

08018a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a52:	e019      	b.n	8018a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a54:	f000 ffe0 	bl	8019a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a58:	4b10      	ldr	r3, [pc, #64]	@ (8018a9c <prvCheckTasksWaitingTermination+0x50>)
 8018a5a:	68db      	ldr	r3, [r3, #12]
 8018a5c:	68db      	ldr	r3, [r3, #12]
 8018a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	3304      	adds	r3, #4
 8018a64:	4618      	mov	r0, r3
 8018a66:	f7fe f8d9 	bl	8016c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018aa0 <prvCheckTasksWaitingTermination+0x54>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	3b01      	subs	r3, #1
 8018a70:	4a0b      	ldr	r2, [pc, #44]	@ (8018aa0 <prvCheckTasksWaitingTermination+0x54>)
 8018a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a74:	4b0b      	ldr	r3, [pc, #44]	@ (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	3b01      	subs	r3, #1
 8018a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a7e:	f000 fffd 	bl	8019a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f000 f810 	bl	8018aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a88:	4b06      	ldr	r3, [pc, #24]	@ (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d1e1      	bne.n	8018a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a90:	bf00      	nop
 8018a92:	bf00      	nop
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	240037b4 	.word	0x240037b4
 8018aa0:	240037e0 	.word	0x240037e0
 8018aa4:	240037c8 	.word	0x240037c8

08018aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	3354      	adds	r3, #84	@ 0x54
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f003 fb37 	bl	801c128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d108      	bne.n	8018ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f001 f995 	bl	8019df8 <vPortFree>
				vPortFree( pxTCB );
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f001 f992 	bl	8019df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018ad4:	e019      	b.n	8018b0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d103      	bne.n	8018ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	f001 f989 	bl	8019df8 <vPortFree>
	}
 8018ae6:	e010      	b.n	8018b0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018aee:	2b02      	cmp	r3, #2
 8018af0:	d00b      	beq.n	8018b0a <prvDeleteTCB+0x62>
	__asm volatile
 8018af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018af6:	f383 8811 	msr	BASEPRI, r3
 8018afa:	f3bf 8f6f 	isb	sy
 8018afe:	f3bf 8f4f 	dsb	sy
 8018b02:	60fb      	str	r3, [r7, #12]
}
 8018b04:	bf00      	nop
 8018b06:	bf00      	nop
 8018b08:	e7fd      	b.n	8018b06 <prvDeleteTCB+0x5e>
	}
 8018b0a:	bf00      	nop
 8018b0c:	3710      	adds	r7, #16
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
	...

08018b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018b14:	b480      	push	{r7}
 8018b16:	b083      	sub	sp, #12
 8018b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8018b4c <prvResetNextTaskUnblockTime+0x38>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d104      	bne.n	8018b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b24:	4b0a      	ldr	r3, [pc, #40]	@ (8018b50 <prvResetNextTaskUnblockTime+0x3c>)
 8018b26:	f04f 32ff 	mov.w	r2, #4294967295
 8018b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018b2c:	e008      	b.n	8018b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b2e:	4b07      	ldr	r3, [pc, #28]	@ (8018b4c <prvResetNextTaskUnblockTime+0x38>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	4a04      	ldr	r2, [pc, #16]	@ (8018b50 <prvResetNextTaskUnblockTime+0x3c>)
 8018b3e:	6013      	str	r3, [r2, #0]
}
 8018b40:	bf00      	nop
 8018b42:	370c      	adds	r7, #12
 8018b44:	46bd      	mov	sp, r7
 8018b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4a:	4770      	bx	lr
 8018b4c:	24003798 	.word	0x24003798
 8018b50:	24003800 	.word	0x24003800

08018b54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018b54:	b480      	push	{r7}
 8018b56:	b083      	sub	sp, #12
 8018b58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018b5a:	4b05      	ldr	r3, [pc, #20]	@ (8018b70 <xTaskGetCurrentTaskHandle+0x1c>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018b60:	687b      	ldr	r3, [r7, #4]
	}
 8018b62:	4618      	mov	r0, r3
 8018b64:	370c      	adds	r7, #12
 8018b66:	46bd      	mov	sp, r7
 8018b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6c:	4770      	bx	lr
 8018b6e:	bf00      	nop
 8018b70:	2400330c 	.word	0x2400330c

08018b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8018ba8 <xTaskGetSchedulerState+0x34>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d102      	bne.n	8018b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b82:	2301      	movs	r3, #1
 8018b84:	607b      	str	r3, [r7, #4]
 8018b86:	e008      	b.n	8018b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b88:	4b08      	ldr	r3, [pc, #32]	@ (8018bac <xTaskGetSchedulerState+0x38>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d102      	bne.n	8018b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b90:	2302      	movs	r3, #2
 8018b92:	607b      	str	r3, [r7, #4]
 8018b94:	e001      	b.n	8018b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b96:	2300      	movs	r3, #0
 8018b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b9a:	687b      	ldr	r3, [r7, #4]
	}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	370c      	adds	r7, #12
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr
 8018ba8:	240037ec 	.word	0x240037ec
 8018bac:	24003808 	.word	0x24003808

08018bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b084      	sub	sp, #16
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d051      	beq.n	8018c6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bca:	4b2a      	ldr	r3, [pc, #168]	@ (8018c74 <xTaskPriorityInherit+0xc4>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	d241      	bcs.n	8018c58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018bd4:	68bb      	ldr	r3, [r7, #8]
 8018bd6:	699b      	ldr	r3, [r3, #24]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	db06      	blt.n	8018bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bdc:	4b25      	ldr	r3, [pc, #148]	@ (8018c74 <xTaskPriorityInherit+0xc4>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018be2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018be6:	68bb      	ldr	r3, [r7, #8]
 8018be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	6959      	ldr	r1, [r3, #20]
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bf2:	4613      	mov	r3, r2
 8018bf4:	009b      	lsls	r3, r3, #2
 8018bf6:	4413      	add	r3, r2
 8018bf8:	009b      	lsls	r3, r3, #2
 8018bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8018c78 <xTaskPriorityInherit+0xc8>)
 8018bfc:	4413      	add	r3, r2
 8018bfe:	4299      	cmp	r1, r3
 8018c00:	d122      	bne.n	8018c48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	3304      	adds	r3, #4
 8018c06:	4618      	mov	r0, r3
 8018c08:	f7fe f808 	bl	8016c1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c0c:	4b19      	ldr	r3, [pc, #100]	@ (8018c74 <xTaskPriorityInherit+0xc4>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c1a:	4b18      	ldr	r3, [pc, #96]	@ (8018c7c <xTaskPriorityInherit+0xcc>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d903      	bls.n	8018c2a <xTaskPriorityInherit+0x7a>
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c26:	4a15      	ldr	r2, [pc, #84]	@ (8018c7c <xTaskPriorityInherit+0xcc>)
 8018c28:	6013      	str	r3, [r2, #0]
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c2e:	4613      	mov	r3, r2
 8018c30:	009b      	lsls	r3, r3, #2
 8018c32:	4413      	add	r3, r2
 8018c34:	009b      	lsls	r3, r3, #2
 8018c36:	4a10      	ldr	r2, [pc, #64]	@ (8018c78 <xTaskPriorityInherit+0xc8>)
 8018c38:	441a      	add	r2, r3
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	3304      	adds	r3, #4
 8018c3e:	4619      	mov	r1, r3
 8018c40:	4610      	mov	r0, r2
 8018c42:	f7fd ff8e 	bl	8016b62 <vListInsertEnd>
 8018c46:	e004      	b.n	8018c52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c48:	4b0a      	ldr	r3, [pc, #40]	@ (8018c74 <xTaskPriorityInherit+0xc4>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018c52:	2301      	movs	r3, #1
 8018c54:	60fb      	str	r3, [r7, #12]
 8018c56:	e008      	b.n	8018c6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018c5c:	4b05      	ldr	r3, [pc, #20]	@ (8018c74 <xTaskPriorityInherit+0xc4>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c62:	429a      	cmp	r2, r3
 8018c64:	d201      	bcs.n	8018c6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018c66:	2301      	movs	r3, #1
 8018c68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3710      	adds	r7, #16
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}
 8018c74:	2400330c 	.word	0x2400330c
 8018c78:	24003310 	.word	0x24003310
 8018c7c:	240037e8 	.word	0x240037e8

08018c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b086      	sub	sp, #24
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d058      	beq.n	8018d48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c96:	4b2f      	ldr	r3, [pc, #188]	@ (8018d54 <xTaskPriorityDisinherit+0xd4>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	693a      	ldr	r2, [r7, #16]
 8018c9c:	429a      	cmp	r2, r3
 8018c9e:	d00b      	beq.n	8018cb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8018ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ca4:	f383 8811 	msr	BASEPRI, r3
 8018ca8:	f3bf 8f6f 	isb	sy
 8018cac:	f3bf 8f4f 	dsb	sy
 8018cb0:	60fb      	str	r3, [r7, #12]
}
 8018cb2:	bf00      	nop
 8018cb4:	bf00      	nop
 8018cb6:	e7fd      	b.n	8018cb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018cb8:	693b      	ldr	r3, [r7, #16]
 8018cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d10b      	bne.n	8018cd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8018cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cc4:	f383 8811 	msr	BASEPRI, r3
 8018cc8:	f3bf 8f6f 	isb	sy
 8018ccc:	f3bf 8f4f 	dsb	sy
 8018cd0:	60bb      	str	r3, [r7, #8]
}
 8018cd2:	bf00      	nop
 8018cd4:	bf00      	nop
 8018cd6:	e7fd      	b.n	8018cd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8018cd8:	693b      	ldr	r3, [r7, #16]
 8018cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cdc:	1e5a      	subs	r2, r3, #1
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018ce2:	693b      	ldr	r3, [r7, #16]
 8018ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ce6:	693b      	ldr	r3, [r7, #16]
 8018ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d02c      	beq.n	8018d48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018cee:	693b      	ldr	r3, [r7, #16]
 8018cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d128      	bne.n	8018d48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cf6:	693b      	ldr	r3, [r7, #16]
 8018cf8:	3304      	adds	r3, #4
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7fd ff8e 	bl	8016c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018d10:	693b      	ldr	r3, [r7, #16]
 8018d12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d18:	4b0f      	ldr	r3, [pc, #60]	@ (8018d58 <xTaskPriorityDisinherit+0xd8>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d903      	bls.n	8018d28 <xTaskPriorityDisinherit+0xa8>
 8018d20:	693b      	ldr	r3, [r7, #16]
 8018d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d24:	4a0c      	ldr	r2, [pc, #48]	@ (8018d58 <xTaskPriorityDisinherit+0xd8>)
 8018d26:	6013      	str	r3, [r2, #0]
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d2c:	4613      	mov	r3, r2
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	4413      	add	r3, r2
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	4a09      	ldr	r2, [pc, #36]	@ (8018d5c <xTaskPriorityDisinherit+0xdc>)
 8018d36:	441a      	add	r2, r3
 8018d38:	693b      	ldr	r3, [r7, #16]
 8018d3a:	3304      	adds	r3, #4
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	4610      	mov	r0, r2
 8018d40:	f7fd ff0f 	bl	8016b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d44:	2301      	movs	r3, #1
 8018d46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d48:	697b      	ldr	r3, [r7, #20]
	}
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	3718      	adds	r7, #24
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}
 8018d52:	bf00      	nop
 8018d54:	2400330c 	.word	0x2400330c
 8018d58:	240037e8 	.word	0x240037e8
 8018d5c:	24003310 	.word	0x24003310

08018d60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b088      	sub	sp, #32
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018d6e:	2301      	movs	r3, #1
 8018d70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d06c      	beq.n	8018e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d10b      	bne.n	8018d98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8018d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d84:	f383 8811 	msr	BASEPRI, r3
 8018d88:	f3bf 8f6f 	isb	sy
 8018d8c:	f3bf 8f4f 	dsb	sy
 8018d90:	60fb      	str	r3, [r7, #12]
}
 8018d92:	bf00      	nop
 8018d94:	bf00      	nop
 8018d96:	e7fd      	b.n	8018d94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018d98:	69bb      	ldr	r3, [r7, #24]
 8018d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d9c:	683a      	ldr	r2, [r7, #0]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d902      	bls.n	8018da8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	61fb      	str	r3, [r7, #28]
 8018da6:	e002      	b.n	8018dae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018da8:	69bb      	ldr	r3, [r7, #24]
 8018daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018dac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018dae:	69bb      	ldr	r3, [r7, #24]
 8018db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018db2:	69fa      	ldr	r2, [r7, #28]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d04c      	beq.n	8018e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018dbc:	697a      	ldr	r2, [r7, #20]
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d147      	bne.n	8018e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018dc2:	4b26      	ldr	r3, [pc, #152]	@ (8018e5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	69ba      	ldr	r2, [r7, #24]
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	d10b      	bne.n	8018de4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8018dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dd0:	f383 8811 	msr	BASEPRI, r3
 8018dd4:	f3bf 8f6f 	isb	sy
 8018dd8:	f3bf 8f4f 	dsb	sy
 8018ddc:	60bb      	str	r3, [r7, #8]
}
 8018dde:	bf00      	nop
 8018de0:	bf00      	nop
 8018de2:	e7fd      	b.n	8018de0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018de8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018dea:	69bb      	ldr	r3, [r7, #24]
 8018dec:	69fa      	ldr	r2, [r7, #28]
 8018dee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018df0:	69bb      	ldr	r3, [r7, #24]
 8018df2:	699b      	ldr	r3, [r3, #24]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	db04      	blt.n	8018e02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018e02:	69bb      	ldr	r3, [r7, #24]
 8018e04:	6959      	ldr	r1, [r3, #20]
 8018e06:	693a      	ldr	r2, [r7, #16]
 8018e08:	4613      	mov	r3, r2
 8018e0a:	009b      	lsls	r3, r3, #2
 8018e0c:	4413      	add	r3, r2
 8018e0e:	009b      	lsls	r3, r3, #2
 8018e10:	4a13      	ldr	r2, [pc, #76]	@ (8018e60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e12:	4413      	add	r3, r2
 8018e14:	4299      	cmp	r1, r3
 8018e16:	d11c      	bne.n	8018e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e18:	69bb      	ldr	r3, [r7, #24]
 8018e1a:	3304      	adds	r3, #4
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f7fd fefd 	bl	8016c1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e26:	4b0f      	ldr	r3, [pc, #60]	@ (8018e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d903      	bls.n	8018e36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018e2e:	69bb      	ldr	r3, [r7, #24]
 8018e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e32:	4a0c      	ldr	r2, [pc, #48]	@ (8018e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018e34:	6013      	str	r3, [r2, #0]
 8018e36:	69bb      	ldr	r3, [r7, #24]
 8018e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	4413      	add	r3, r2
 8018e40:	009b      	lsls	r3, r3, #2
 8018e42:	4a07      	ldr	r2, [pc, #28]	@ (8018e60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e44:	441a      	add	r2, r3
 8018e46:	69bb      	ldr	r3, [r7, #24]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	4610      	mov	r0, r2
 8018e4e:	f7fd fe88 	bl	8016b62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e52:	bf00      	nop
 8018e54:	3720      	adds	r7, #32
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd80      	pop	{r7, pc}
 8018e5a:	bf00      	nop
 8018e5c:	2400330c 	.word	0x2400330c
 8018e60:	24003310 	.word	0x24003310
 8018e64:	240037e8 	.word	0x240037e8

08018e68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018e68:	b480      	push	{r7}
 8018e6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018e6c:	4b07      	ldr	r3, [pc, #28]	@ (8018e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d004      	beq.n	8018e7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018e74:	4b05      	ldr	r3, [pc, #20]	@ (8018e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8018e7e:	4b03      	ldr	r3, [pc, #12]	@ (8018e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e80:	681b      	ldr	r3, [r3, #0]
	}
 8018e82:	4618      	mov	r0, r3
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr
 8018e8c:	2400330c 	.word	0x2400330c

08018e90 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8018e9a:	f000 fdbd 	bl	8019a18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8018e9e:	4b20      	ldr	r3, [pc, #128]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d113      	bne.n	8018ed2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8018eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	2201      	movs	r2, #1
 8018eb0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d00b      	beq.n	8018ed2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018eba:	2101      	movs	r1, #1
 8018ebc:	6838      	ldr	r0, [r7, #0]
 8018ebe:	f000 f8c9 	bl	8019054 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8018ec2:	4b18      	ldr	r3, [pc, #96]	@ (8018f24 <ulTaskNotifyTake+0x94>)
 8018ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ec8:	601a      	str	r2, [r3, #0]
 8018eca:	f3bf 8f4f 	dsb	sy
 8018ece:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018ed2:	f000 fdd3 	bl	8019a7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8018ed6:	f000 fd9f 	bl	8019a18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8018eda:	4b11      	ldr	r3, [pc, #68]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018ee2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d00e      	beq.n	8018f08 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d005      	beq.n	8018efc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8018ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8018efa:	e005      	b.n	8018f08 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8018efc:	4b08      	ldr	r3, [pc, #32]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	68fa      	ldr	r2, [r7, #12]
 8018f02:	3a01      	subs	r2, #1
 8018f04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018f08:	4b05      	ldr	r3, [pc, #20]	@ (8018f20 <ulTaskNotifyTake+0x90>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8018f12:	f000 fdb3 	bl	8019a7c <vPortExitCritical>

		return ulReturn;
 8018f16:	68fb      	ldr	r3, [r7, #12]
	}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	3710      	adds	r7, #16
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	2400330c 	.word	0x2400330c
 8018f24:	e000ed04 	.word	0xe000ed04

08018f28 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b08a      	sub	sp, #40	@ 0x28
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d10b      	bne.n	8018f50 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8018f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f3c:	f383 8811 	msr	BASEPRI, r3
 8018f40:	f3bf 8f6f 	isb	sy
 8018f44:	f3bf 8f4f 	dsb	sy
 8018f48:	61bb      	str	r3, [r7, #24]
}
 8018f4a:	bf00      	nop
 8018f4c:	bf00      	nop
 8018f4e:	e7fd      	b.n	8018f4c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018f50:	f000 fe42 	bl	8019bd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8018f58:	f3ef 8211 	mrs	r2, BASEPRI
 8018f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f60:	f383 8811 	msr	BASEPRI, r3
 8018f64:	f3bf 8f6f 	isb	sy
 8018f68:	f3bf 8f4f 	dsb	sy
 8018f6c:	617a      	str	r2, [r7, #20]
 8018f6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018f70:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018f72:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f76:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8018f7a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f7e:	2202      	movs	r2, #2
 8018f80:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8018f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018f8a:	1c5a      	adds	r2, r3, #1
 8018f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018f92:	7ffb      	ldrb	r3, [r7, #31]
 8018f94:	2b01      	cmp	r3, #1
 8018f96:	d147      	bne.n	8019028 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d00b      	beq.n	8018fb8 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	60fb      	str	r3, [r7, #12]
}
 8018fb2:	bf00      	nop
 8018fb4:	bf00      	nop
 8018fb6:	e7fd      	b.n	8018fb4 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018fb8:	4b20      	ldr	r3, [pc, #128]	@ (801903c <vTaskNotifyGiveFromISR+0x114>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d11d      	bne.n	8018ffc <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7fd fe29 	bl	8016c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018fce:	4b1c      	ldr	r3, [pc, #112]	@ (8019040 <vTaskNotifyGiveFromISR+0x118>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d903      	bls.n	8018fde <vTaskNotifyGiveFromISR+0xb6>
 8018fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fda:	4a19      	ldr	r2, [pc, #100]	@ (8019040 <vTaskNotifyGiveFromISR+0x118>)
 8018fdc:	6013      	str	r3, [r2, #0]
 8018fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	009b      	lsls	r3, r3, #2
 8018fe6:	4413      	add	r3, r2
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	4a16      	ldr	r2, [pc, #88]	@ (8019044 <vTaskNotifyGiveFromISR+0x11c>)
 8018fec:	441a      	add	r2, r3
 8018fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ff0:	3304      	adds	r3, #4
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	4610      	mov	r0, r2
 8018ff6:	f7fd fdb4 	bl	8016b62 <vListInsertEnd>
 8018ffa:	e005      	b.n	8019008 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ffe:	3318      	adds	r3, #24
 8019000:	4619      	mov	r1, r3
 8019002:	4811      	ldr	r0, [pc, #68]	@ (8019048 <vTaskNotifyGiveFromISR+0x120>)
 8019004:	f7fd fdad 	bl	8016b62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801900a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801900c:	4b0f      	ldr	r3, [pc, #60]	@ (801904c <vTaskNotifyGiveFromISR+0x124>)
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019012:	429a      	cmp	r2, r3
 8019014:	d908      	bls.n	8019028 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d002      	beq.n	8019022 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	2201      	movs	r2, #1
 8019020:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8019022:	4b0b      	ldr	r3, [pc, #44]	@ (8019050 <vTaskNotifyGiveFromISR+0x128>)
 8019024:	2201      	movs	r2, #1
 8019026:	601a      	str	r2, [r3, #0]
 8019028:	6a3b      	ldr	r3, [r7, #32]
 801902a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	f383 8811 	msr	BASEPRI, r3
}
 8019032:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8019034:	bf00      	nop
 8019036:	3728      	adds	r7, #40	@ 0x28
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}
 801903c:	24003808 	.word	0x24003808
 8019040:	240037e8 	.word	0x240037e8
 8019044:	24003310 	.word	0x24003310
 8019048:	240037a0 	.word	0x240037a0
 801904c:	2400330c 	.word	0x2400330c
 8019050:	240037f4 	.word	0x240037f4

08019054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801905e:	4b21      	ldr	r3, [pc, #132]	@ (80190e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019064:	4b20      	ldr	r3, [pc, #128]	@ (80190e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	3304      	adds	r3, #4
 801906a:	4618      	mov	r0, r3
 801906c:	f7fd fdd6 	bl	8016c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019076:	d10a      	bne.n	801908e <prvAddCurrentTaskToDelayedList+0x3a>
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d007      	beq.n	801908e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801907e:	4b1a      	ldr	r3, [pc, #104]	@ (80190e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	3304      	adds	r3, #4
 8019084:	4619      	mov	r1, r3
 8019086:	4819      	ldr	r0, [pc, #100]	@ (80190ec <prvAddCurrentTaskToDelayedList+0x98>)
 8019088:	f7fd fd6b 	bl	8016b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801908c:	e026      	b.n	80190dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801908e:	68fa      	ldr	r2, [r7, #12]
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	4413      	add	r3, r2
 8019094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019096:	4b14      	ldr	r3, [pc, #80]	@ (80190e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	68ba      	ldr	r2, [r7, #8]
 801909c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801909e:	68ba      	ldr	r2, [r7, #8]
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d209      	bcs.n	80190ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80190a6:	4b12      	ldr	r3, [pc, #72]	@ (80190f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	4b0f      	ldr	r3, [pc, #60]	@ (80190e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	3304      	adds	r3, #4
 80190b0:	4619      	mov	r1, r3
 80190b2:	4610      	mov	r0, r2
 80190b4:	f7fd fd79 	bl	8016baa <vListInsert>
}
 80190b8:	e010      	b.n	80190dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80190ba:	4b0e      	ldr	r3, [pc, #56]	@ (80190f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80190bc:	681a      	ldr	r2, [r3, #0]
 80190be:	4b0a      	ldr	r3, [pc, #40]	@ (80190e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	3304      	adds	r3, #4
 80190c4:	4619      	mov	r1, r3
 80190c6:	4610      	mov	r0, r2
 80190c8:	f7fd fd6f 	bl	8016baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80190cc:	4b0a      	ldr	r3, [pc, #40]	@ (80190f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	68ba      	ldr	r2, [r7, #8]
 80190d2:	429a      	cmp	r2, r3
 80190d4:	d202      	bcs.n	80190dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80190d6:	4a08      	ldr	r2, [pc, #32]	@ (80190f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	6013      	str	r3, [r2, #0]
}
 80190dc:	bf00      	nop
 80190de:	3710      	adds	r7, #16
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	240037e4 	.word	0x240037e4
 80190e8:	2400330c 	.word	0x2400330c
 80190ec:	240037cc 	.word	0x240037cc
 80190f0:	2400379c 	.word	0x2400379c
 80190f4:	24003798 	.word	0x24003798
 80190f8:	24003800 	.word	0x24003800

080190fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b08a      	sub	sp, #40	@ 0x28
 8019100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019102:	2300      	movs	r3, #0
 8019104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019106:	f000 fb13 	bl	8019730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801910a:	4b1d      	ldr	r3, [pc, #116]	@ (8019180 <xTimerCreateTimerTask+0x84>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d021      	beq.n	8019156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019112:	2300      	movs	r3, #0
 8019114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019116:	2300      	movs	r3, #0
 8019118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801911a:	1d3a      	adds	r2, r7, #4
 801911c:	f107 0108 	add.w	r1, r7, #8
 8019120:	f107 030c 	add.w	r3, r7, #12
 8019124:	4618      	mov	r0, r3
 8019126:	f7fd fcd5 	bl	8016ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801912a:	6879      	ldr	r1, [r7, #4]
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	68fa      	ldr	r2, [r7, #12]
 8019130:	9202      	str	r2, [sp, #8]
 8019132:	9301      	str	r3, [sp, #4]
 8019134:	2302      	movs	r3, #2
 8019136:	9300      	str	r3, [sp, #0]
 8019138:	2300      	movs	r3, #0
 801913a:	460a      	mov	r2, r1
 801913c:	4911      	ldr	r1, [pc, #68]	@ (8019184 <xTimerCreateTimerTask+0x88>)
 801913e:	4812      	ldr	r0, [pc, #72]	@ (8019188 <xTimerCreateTimerTask+0x8c>)
 8019140:	f7fe fdc2 	bl	8017cc8 <xTaskCreateStatic>
 8019144:	4603      	mov	r3, r0
 8019146:	4a11      	ldr	r2, [pc, #68]	@ (801918c <xTimerCreateTimerTask+0x90>)
 8019148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801914a:	4b10      	ldr	r3, [pc, #64]	@ (801918c <xTimerCreateTimerTask+0x90>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d001      	beq.n	8019156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019152:	2301      	movs	r3, #1
 8019154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d10b      	bne.n	8019174 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019160:	f383 8811 	msr	BASEPRI, r3
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	f3bf 8f4f 	dsb	sy
 801916c:	613b      	str	r3, [r7, #16]
}
 801916e:	bf00      	nop
 8019170:	bf00      	nop
 8019172:	e7fd      	b.n	8019170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019174:	697b      	ldr	r3, [r7, #20]
}
 8019176:	4618      	mov	r0, r3
 8019178:	3718      	adds	r7, #24
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}
 801917e:	bf00      	nop
 8019180:	2400383c 	.word	0x2400383c
 8019184:	0801e154 	.word	0x0801e154
 8019188:	080192c9 	.word	0x080192c9
 801918c:	24003840 	.word	0x24003840

08019190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b08a      	sub	sp, #40	@ 0x28
 8019194:	af00      	add	r7, sp, #0
 8019196:	60f8      	str	r0, [r7, #12]
 8019198:	60b9      	str	r1, [r7, #8]
 801919a:	607a      	str	r2, [r7, #4]
 801919c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801919e:	2300      	movs	r3, #0
 80191a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d10b      	bne.n	80191c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80191a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191ac:	f383 8811 	msr	BASEPRI, r3
 80191b0:	f3bf 8f6f 	isb	sy
 80191b4:	f3bf 8f4f 	dsb	sy
 80191b8:	623b      	str	r3, [r7, #32]
}
 80191ba:	bf00      	nop
 80191bc:	bf00      	nop
 80191be:	e7fd      	b.n	80191bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80191c0:	4b19      	ldr	r3, [pc, #100]	@ (8019228 <xTimerGenericCommand+0x98>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d02a      	beq.n	801921e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	2b05      	cmp	r3, #5
 80191d8:	dc18      	bgt.n	801920c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80191da:	f7ff fccb 	bl	8018b74 <xTaskGetSchedulerState>
 80191de:	4603      	mov	r3, r0
 80191e0:	2b02      	cmp	r3, #2
 80191e2:	d109      	bne.n	80191f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80191e4:	4b10      	ldr	r3, [pc, #64]	@ (8019228 <xTimerGenericCommand+0x98>)
 80191e6:	6818      	ldr	r0, [r3, #0]
 80191e8:	f107 0110 	add.w	r1, r7, #16
 80191ec:	2300      	movs	r3, #0
 80191ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80191f0:	f7fd fef2 	bl	8016fd8 <xQueueGenericSend>
 80191f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80191f6:	e012      	b.n	801921e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80191f8:	4b0b      	ldr	r3, [pc, #44]	@ (8019228 <xTimerGenericCommand+0x98>)
 80191fa:	6818      	ldr	r0, [r3, #0]
 80191fc:	f107 0110 	add.w	r1, r7, #16
 8019200:	2300      	movs	r3, #0
 8019202:	2200      	movs	r2, #0
 8019204:	f7fd fee8 	bl	8016fd8 <xQueueGenericSend>
 8019208:	6278      	str	r0, [r7, #36]	@ 0x24
 801920a:	e008      	b.n	801921e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801920c:	4b06      	ldr	r3, [pc, #24]	@ (8019228 <xTimerGenericCommand+0x98>)
 801920e:	6818      	ldr	r0, [r3, #0]
 8019210:	f107 0110 	add.w	r1, r7, #16
 8019214:	2300      	movs	r3, #0
 8019216:	683a      	ldr	r2, [r7, #0]
 8019218:	f7fd ffe0 	bl	80171dc <xQueueGenericSendFromISR>
 801921c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8019220:	4618      	mov	r0, r3
 8019222:	3728      	adds	r7, #40	@ 0x28
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}
 8019228:	2400383c 	.word	0x2400383c

0801922c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b088      	sub	sp, #32
 8019230:	af02      	add	r7, sp, #8
 8019232:	6078      	str	r0, [r7, #4]
 8019234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019236:	4b23      	ldr	r3, [pc, #140]	@ (80192c4 <prvProcessExpiredTimer+0x98>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	68db      	ldr	r3, [r3, #12]
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	3304      	adds	r3, #4
 8019244:	4618      	mov	r0, r3
 8019246:	f7fd fce9 	bl	8016c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019250:	f003 0304 	and.w	r3, r3, #4
 8019254:	2b00      	cmp	r3, #0
 8019256:	d023      	beq.n	80192a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019258:	697b      	ldr	r3, [r7, #20]
 801925a:	699a      	ldr	r2, [r3, #24]
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	18d1      	adds	r1, r2, r3
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	683a      	ldr	r2, [r7, #0]
 8019264:	6978      	ldr	r0, [r7, #20]
 8019266:	f000 f8d5 	bl	8019414 <prvInsertTimerInActiveList>
 801926a:	4603      	mov	r3, r0
 801926c:	2b00      	cmp	r3, #0
 801926e:	d020      	beq.n	80192b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019270:	2300      	movs	r3, #0
 8019272:	9300      	str	r3, [sp, #0]
 8019274:	2300      	movs	r3, #0
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	2100      	movs	r1, #0
 801927a:	6978      	ldr	r0, [r7, #20]
 801927c:	f7ff ff88 	bl	8019190 <xTimerGenericCommand>
 8019280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d114      	bne.n	80192b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8019288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801928c:	f383 8811 	msr	BASEPRI, r3
 8019290:	f3bf 8f6f 	isb	sy
 8019294:	f3bf 8f4f 	dsb	sy
 8019298:	60fb      	str	r3, [r7, #12]
}
 801929a:	bf00      	nop
 801929c:	bf00      	nop
 801929e:	e7fd      	b.n	801929c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80192a0:	697b      	ldr	r3, [r7, #20]
 80192a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80192a6:	f023 0301 	bic.w	r3, r3, #1
 80192aa:	b2da      	uxtb	r2, r3
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	6a1b      	ldr	r3, [r3, #32]
 80192b6:	6978      	ldr	r0, [r7, #20]
 80192b8:	4798      	blx	r3
}
 80192ba:	bf00      	nop
 80192bc:	3718      	adds	r7, #24
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	bf00      	nop
 80192c4:	24003834 	.word	0x24003834

080192c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b084      	sub	sp, #16
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80192d0:	f107 0308 	add.w	r3, r7, #8
 80192d4:	4618      	mov	r0, r3
 80192d6:	f000 f859 	bl	801938c <prvGetNextExpireTime>
 80192da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	4619      	mov	r1, r3
 80192e0:	68f8      	ldr	r0, [r7, #12]
 80192e2:	f000 f805 	bl	80192f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80192e6:	f000 f8d7 	bl	8019498 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80192ea:	bf00      	nop
 80192ec:	e7f0      	b.n	80192d0 <prvTimerTask+0x8>
	...

080192f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b084      	sub	sp, #16
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
 80192f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80192fa:	f7ff f825 	bl	8018348 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80192fe:	f107 0308 	add.w	r3, r7, #8
 8019302:	4618      	mov	r0, r3
 8019304:	f000 f866 	bl	80193d4 <prvSampleTimeNow>
 8019308:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d130      	bne.n	8019372 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d10a      	bne.n	801932c <prvProcessTimerOrBlockTask+0x3c>
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	429a      	cmp	r2, r3
 801931c:	d806      	bhi.n	801932c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801931e:	f7ff f821 	bl	8018364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019322:	68f9      	ldr	r1, [r7, #12]
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f7ff ff81 	bl	801922c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801932a:	e024      	b.n	8019376 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d008      	beq.n	8019344 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019332:	4b13      	ldr	r3, [pc, #76]	@ (8019380 <prvProcessTimerOrBlockTask+0x90>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d101      	bne.n	8019340 <prvProcessTimerOrBlockTask+0x50>
 801933c:	2301      	movs	r3, #1
 801933e:	e000      	b.n	8019342 <prvProcessTimerOrBlockTask+0x52>
 8019340:	2300      	movs	r3, #0
 8019342:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019344:	4b0f      	ldr	r3, [pc, #60]	@ (8019384 <prvProcessTimerOrBlockTask+0x94>)
 8019346:	6818      	ldr	r0, [r3, #0]
 8019348:	687a      	ldr	r2, [r7, #4]
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	1ad3      	subs	r3, r2, r3
 801934e:	683a      	ldr	r2, [r7, #0]
 8019350:	4619      	mov	r1, r3
 8019352:	f7fe fc85 	bl	8017c60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019356:	f7ff f805 	bl	8018364 <xTaskResumeAll>
 801935a:	4603      	mov	r3, r0
 801935c:	2b00      	cmp	r3, #0
 801935e:	d10a      	bne.n	8019376 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019360:	4b09      	ldr	r3, [pc, #36]	@ (8019388 <prvProcessTimerOrBlockTask+0x98>)
 8019362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019366:	601a      	str	r2, [r3, #0]
 8019368:	f3bf 8f4f 	dsb	sy
 801936c:	f3bf 8f6f 	isb	sy
}
 8019370:	e001      	b.n	8019376 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019372:	f7fe fff7 	bl	8018364 <xTaskResumeAll>
}
 8019376:	bf00      	nop
 8019378:	3710      	adds	r7, #16
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	24003838 	.word	0x24003838
 8019384:	2400383c 	.word	0x2400383c
 8019388:	e000ed04 	.word	0xe000ed04

0801938c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801938c:	b480      	push	{r7}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019394:	4b0e      	ldr	r3, [pc, #56]	@ (80193d0 <prvGetNextExpireTime+0x44>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d101      	bne.n	80193a2 <prvGetNextExpireTime+0x16>
 801939e:	2201      	movs	r2, #1
 80193a0:	e000      	b.n	80193a4 <prvGetNextExpireTime+0x18>
 80193a2:	2200      	movs	r2, #0
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d105      	bne.n	80193bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80193b0:	4b07      	ldr	r3, [pc, #28]	@ (80193d0 <prvGetNextExpireTime+0x44>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	68db      	ldr	r3, [r3, #12]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	60fb      	str	r3, [r7, #12]
 80193ba:	e001      	b.n	80193c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80193bc:	2300      	movs	r3, #0
 80193be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80193c0:	68fb      	ldr	r3, [r7, #12]
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3714      	adds	r7, #20
 80193c6:	46bd      	mov	sp, r7
 80193c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop
 80193d0:	24003834 	.word	0x24003834

080193d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b084      	sub	sp, #16
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80193dc:	f7ff f860 	bl	80184a0 <xTaskGetTickCount>
 80193e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80193e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019410 <prvSampleTimeNow+0x3c>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	429a      	cmp	r2, r3
 80193ea:	d205      	bcs.n	80193f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80193ec:	f000 f93a 	bl	8019664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2201      	movs	r2, #1
 80193f4:	601a      	str	r2, [r3, #0]
 80193f6:	e002      	b.n	80193fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2200      	movs	r2, #0
 80193fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80193fe:	4a04      	ldr	r2, [pc, #16]	@ (8019410 <prvSampleTimeNow+0x3c>)
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019404:	68fb      	ldr	r3, [r7, #12]
}
 8019406:	4618      	mov	r0, r3
 8019408:	3710      	adds	r7, #16
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
 801940e:	bf00      	nop
 8019410:	24003844 	.word	0x24003844

08019414 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b086      	sub	sp, #24
 8019418:	af00      	add	r7, sp, #0
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
 8019420:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019422:	2300      	movs	r3, #0
 8019424:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	68ba      	ldr	r2, [r7, #8]
 801942a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	68fa      	ldr	r2, [r7, #12]
 8019430:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019432:	68ba      	ldr	r2, [r7, #8]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	429a      	cmp	r2, r3
 8019438:	d812      	bhi.n	8019460 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801943a:	687a      	ldr	r2, [r7, #4]
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	1ad2      	subs	r2, r2, r3
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	699b      	ldr	r3, [r3, #24]
 8019444:	429a      	cmp	r2, r3
 8019446:	d302      	bcc.n	801944e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019448:	2301      	movs	r3, #1
 801944a:	617b      	str	r3, [r7, #20]
 801944c:	e01b      	b.n	8019486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801944e:	4b10      	ldr	r3, [pc, #64]	@ (8019490 <prvInsertTimerInActiveList+0x7c>)
 8019450:	681a      	ldr	r2, [r3, #0]
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	3304      	adds	r3, #4
 8019456:	4619      	mov	r1, r3
 8019458:	4610      	mov	r0, r2
 801945a:	f7fd fba6 	bl	8016baa <vListInsert>
 801945e:	e012      	b.n	8019486 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019460:	687a      	ldr	r2, [r7, #4]
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	429a      	cmp	r2, r3
 8019466:	d206      	bcs.n	8019476 <prvInsertTimerInActiveList+0x62>
 8019468:	68ba      	ldr	r2, [r7, #8]
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	429a      	cmp	r2, r3
 801946e:	d302      	bcc.n	8019476 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019470:	2301      	movs	r3, #1
 8019472:	617b      	str	r3, [r7, #20]
 8019474:	e007      	b.n	8019486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019476:	4b07      	ldr	r3, [pc, #28]	@ (8019494 <prvInsertTimerInActiveList+0x80>)
 8019478:	681a      	ldr	r2, [r3, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	3304      	adds	r3, #4
 801947e:	4619      	mov	r1, r3
 8019480:	4610      	mov	r0, r2
 8019482:	f7fd fb92 	bl	8016baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019486:	697b      	ldr	r3, [r7, #20]
}
 8019488:	4618      	mov	r0, r3
 801948a:	3718      	adds	r7, #24
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}
 8019490:	24003838 	.word	0x24003838
 8019494:	24003834 	.word	0x24003834

08019498 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b08e      	sub	sp, #56	@ 0x38
 801949c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801949e:	e0ce      	b.n	801963e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	da19      	bge.n	80194da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80194a6:	1d3b      	adds	r3, r7, #4
 80194a8:	3304      	adds	r3, #4
 80194aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80194ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d10b      	bne.n	80194ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80194b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194b6:	f383 8811 	msr	BASEPRI, r3
 80194ba:	f3bf 8f6f 	isb	sy
 80194be:	f3bf 8f4f 	dsb	sy
 80194c2:	61fb      	str	r3, [r7, #28]
}
 80194c4:	bf00      	nop
 80194c6:	bf00      	nop
 80194c8:	e7fd      	b.n	80194c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80194ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194d0:	6850      	ldr	r0, [r2, #4]
 80194d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194d4:	6892      	ldr	r2, [r2, #8]
 80194d6:	4611      	mov	r1, r2
 80194d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	f2c0 80ae 	blt.w	801963e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80194e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194e8:	695b      	ldr	r3, [r3, #20]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d004      	beq.n	80194f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194f0:	3304      	adds	r3, #4
 80194f2:	4618      	mov	r0, r3
 80194f4:	f7fd fb92 	bl	8016c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80194f8:	463b      	mov	r3, r7
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7ff ff6a 	bl	80193d4 <prvSampleTimeNow>
 8019500:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2b09      	cmp	r3, #9
 8019506:	f200 8097 	bhi.w	8019638 <prvProcessReceivedCommands+0x1a0>
 801950a:	a201      	add	r2, pc, #4	@ (adr r2, 8019510 <prvProcessReceivedCommands+0x78>)
 801950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019510:	08019539 	.word	0x08019539
 8019514:	08019539 	.word	0x08019539
 8019518:	08019539 	.word	0x08019539
 801951c:	080195af 	.word	0x080195af
 8019520:	080195c3 	.word	0x080195c3
 8019524:	0801960f 	.word	0x0801960f
 8019528:	08019539 	.word	0x08019539
 801952c:	08019539 	.word	0x08019539
 8019530:	080195af 	.word	0x080195af
 8019534:	080195c3 	.word	0x080195c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801953a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801953e:	f043 0301 	orr.w	r3, r3, #1
 8019542:	b2da      	uxtb	r2, r3
 8019544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019546:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801954a:	68ba      	ldr	r2, [r7, #8]
 801954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801954e:	699b      	ldr	r3, [r3, #24]
 8019550:	18d1      	adds	r1, r2, r3
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019558:	f7ff ff5c 	bl	8019414 <prvInsertTimerInActiveList>
 801955c:	4603      	mov	r3, r0
 801955e:	2b00      	cmp	r3, #0
 8019560:	d06c      	beq.n	801963c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019564:	6a1b      	ldr	r3, [r3, #32]
 8019566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019568:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801956c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019570:	f003 0304 	and.w	r3, r3, #4
 8019574:	2b00      	cmp	r3, #0
 8019576:	d061      	beq.n	801963c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019578:	68ba      	ldr	r2, [r7, #8]
 801957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801957c:	699b      	ldr	r3, [r3, #24]
 801957e:	441a      	add	r2, r3
 8019580:	2300      	movs	r3, #0
 8019582:	9300      	str	r3, [sp, #0]
 8019584:	2300      	movs	r3, #0
 8019586:	2100      	movs	r1, #0
 8019588:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801958a:	f7ff fe01 	bl	8019190 <xTimerGenericCommand>
 801958e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019590:	6a3b      	ldr	r3, [r7, #32]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d152      	bne.n	801963c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8019596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801959a:	f383 8811 	msr	BASEPRI, r3
 801959e:	f3bf 8f6f 	isb	sy
 80195a2:	f3bf 8f4f 	dsb	sy
 80195a6:	61bb      	str	r3, [r7, #24]
}
 80195a8:	bf00      	nop
 80195aa:	bf00      	nop
 80195ac:	e7fd      	b.n	80195aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80195ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80195b4:	f023 0301 	bic.w	r3, r3, #1
 80195b8:	b2da      	uxtb	r2, r3
 80195ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80195c0:	e03d      	b.n	801963e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80195c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80195c8:	f043 0301 	orr.w	r3, r3, #1
 80195cc:	b2da      	uxtb	r2, r3
 80195ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80195d4:	68ba      	ldr	r2, [r7, #8]
 80195d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80195da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195dc:	699b      	ldr	r3, [r3, #24]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d10b      	bne.n	80195fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80195e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195e6:	f383 8811 	msr	BASEPRI, r3
 80195ea:	f3bf 8f6f 	isb	sy
 80195ee:	f3bf 8f4f 	dsb	sy
 80195f2:	617b      	str	r3, [r7, #20]
}
 80195f4:	bf00      	nop
 80195f6:	bf00      	nop
 80195f8:	e7fd      	b.n	80195f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80195fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195fc:	699a      	ldr	r2, [r3, #24]
 80195fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019600:	18d1      	adds	r1, r2, r3
 8019602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019608:	f7ff ff04 	bl	8019414 <prvInsertTimerInActiveList>
					break;
 801960c:	e017      	b.n	801963e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019614:	f003 0302 	and.w	r3, r3, #2
 8019618:	2b00      	cmp	r3, #0
 801961a:	d103      	bne.n	8019624 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801961c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801961e:	f000 fbeb 	bl	8019df8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019622:	e00c      	b.n	801963e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801962a:	f023 0301 	bic.w	r3, r3, #1
 801962e:	b2da      	uxtb	r2, r3
 8019630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8019636:	e002      	b.n	801963e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8019638:	bf00      	nop
 801963a:	e000      	b.n	801963e <prvProcessReceivedCommands+0x1a6>
					break;
 801963c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801963e:	4b08      	ldr	r3, [pc, #32]	@ (8019660 <prvProcessReceivedCommands+0x1c8>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	1d39      	adds	r1, r7, #4
 8019644:	2200      	movs	r2, #0
 8019646:	4618      	mov	r0, r3
 8019648:	f7fd fef6 	bl	8017438 <xQueueReceive>
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	f47f af26 	bne.w	80194a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8019654:	bf00      	nop
 8019656:	bf00      	nop
 8019658:	3730      	adds	r7, #48	@ 0x30
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	2400383c 	.word	0x2400383c

08019664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b088      	sub	sp, #32
 8019668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801966a:	e049      	b.n	8019700 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801966c:	4b2e      	ldr	r3, [pc, #184]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	68db      	ldr	r3, [r3, #12]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019676:	4b2c      	ldr	r3, [pc, #176]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	68db      	ldr	r3, [r3, #12]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	3304      	adds	r3, #4
 8019684:	4618      	mov	r0, r3
 8019686:	f7fd fac9 	bl	8016c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	6a1b      	ldr	r3, [r3, #32]
 801968e:	68f8      	ldr	r0, [r7, #12]
 8019690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019698:	f003 0304 	and.w	r3, r3, #4
 801969c:	2b00      	cmp	r3, #0
 801969e:	d02f      	beq.n	8019700 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	699b      	ldr	r3, [r3, #24]
 80196a4:	693a      	ldr	r2, [r7, #16]
 80196a6:	4413      	add	r3, r2
 80196a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80196aa:	68ba      	ldr	r2, [r7, #8]
 80196ac:	693b      	ldr	r3, [r7, #16]
 80196ae:	429a      	cmp	r2, r3
 80196b0:	d90e      	bls.n	80196d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	68ba      	ldr	r2, [r7, #8]
 80196b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	68fa      	ldr	r2, [r7, #12]
 80196bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80196be:	4b1a      	ldr	r3, [pc, #104]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 80196c0:	681a      	ldr	r2, [r3, #0]
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	3304      	adds	r3, #4
 80196c6:	4619      	mov	r1, r3
 80196c8:	4610      	mov	r0, r2
 80196ca:	f7fd fa6e 	bl	8016baa <vListInsert>
 80196ce:	e017      	b.n	8019700 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80196d0:	2300      	movs	r3, #0
 80196d2:	9300      	str	r3, [sp, #0]
 80196d4:	2300      	movs	r3, #0
 80196d6:	693a      	ldr	r2, [r7, #16]
 80196d8:	2100      	movs	r1, #0
 80196da:	68f8      	ldr	r0, [r7, #12]
 80196dc:	f7ff fd58 	bl	8019190 <xTimerGenericCommand>
 80196e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d10b      	bne.n	8019700 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80196e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196ec:	f383 8811 	msr	BASEPRI, r3
 80196f0:	f3bf 8f6f 	isb	sy
 80196f4:	f3bf 8f4f 	dsb	sy
 80196f8:	603b      	str	r3, [r7, #0]
}
 80196fa:	bf00      	nop
 80196fc:	bf00      	nop
 80196fe:	e7fd      	b.n	80196fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019700:	4b09      	ldr	r3, [pc, #36]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d1b0      	bne.n	801966c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801970a:	4b07      	ldr	r3, [pc, #28]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019710:	4b06      	ldr	r3, [pc, #24]	@ (801972c <prvSwitchTimerLists+0xc8>)
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	4a04      	ldr	r2, [pc, #16]	@ (8019728 <prvSwitchTimerLists+0xc4>)
 8019716:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019718:	4a04      	ldr	r2, [pc, #16]	@ (801972c <prvSwitchTimerLists+0xc8>)
 801971a:	697b      	ldr	r3, [r7, #20]
 801971c:	6013      	str	r3, [r2, #0]
}
 801971e:	bf00      	nop
 8019720:	3718      	adds	r7, #24
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}
 8019726:	bf00      	nop
 8019728:	24003834 	.word	0x24003834
 801972c:	24003838 	.word	0x24003838

08019730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b082      	sub	sp, #8
 8019734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019736:	f000 f96f 	bl	8019a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801973a:	4b15      	ldr	r3, [pc, #84]	@ (8019790 <prvCheckForValidListAndQueue+0x60>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d120      	bne.n	8019784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019742:	4814      	ldr	r0, [pc, #80]	@ (8019794 <prvCheckForValidListAndQueue+0x64>)
 8019744:	f7fd f9e0 	bl	8016b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019748:	4813      	ldr	r0, [pc, #76]	@ (8019798 <prvCheckForValidListAndQueue+0x68>)
 801974a:	f7fd f9dd 	bl	8016b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801974e:	4b13      	ldr	r3, [pc, #76]	@ (801979c <prvCheckForValidListAndQueue+0x6c>)
 8019750:	4a10      	ldr	r2, [pc, #64]	@ (8019794 <prvCheckForValidListAndQueue+0x64>)
 8019752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019754:	4b12      	ldr	r3, [pc, #72]	@ (80197a0 <prvCheckForValidListAndQueue+0x70>)
 8019756:	4a10      	ldr	r2, [pc, #64]	@ (8019798 <prvCheckForValidListAndQueue+0x68>)
 8019758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801975a:	2300      	movs	r3, #0
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	4b11      	ldr	r3, [pc, #68]	@ (80197a4 <prvCheckForValidListAndQueue+0x74>)
 8019760:	4a11      	ldr	r2, [pc, #68]	@ (80197a8 <prvCheckForValidListAndQueue+0x78>)
 8019762:	2110      	movs	r1, #16
 8019764:	200a      	movs	r0, #10
 8019766:	f7fd faed 	bl	8016d44 <xQueueGenericCreateStatic>
 801976a:	4603      	mov	r3, r0
 801976c:	4a08      	ldr	r2, [pc, #32]	@ (8019790 <prvCheckForValidListAndQueue+0x60>)
 801976e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019770:	4b07      	ldr	r3, [pc, #28]	@ (8019790 <prvCheckForValidListAndQueue+0x60>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d005      	beq.n	8019784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019778:	4b05      	ldr	r3, [pc, #20]	@ (8019790 <prvCheckForValidListAndQueue+0x60>)
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	490b      	ldr	r1, [pc, #44]	@ (80197ac <prvCheckForValidListAndQueue+0x7c>)
 801977e:	4618      	mov	r0, r3
 8019780:	f7fe fa1a 	bl	8017bb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019784:	f000 f97a 	bl	8019a7c <vPortExitCritical>
}
 8019788:	bf00      	nop
 801978a:	46bd      	mov	sp, r7
 801978c:	bd80      	pop	{r7, pc}
 801978e:	bf00      	nop
 8019790:	2400383c 	.word	0x2400383c
 8019794:	2400380c 	.word	0x2400380c
 8019798:	24003820 	.word	0x24003820
 801979c:	24003834 	.word	0x24003834
 80197a0:	24003838 	.word	0x24003838
 80197a4:	240038e8 	.word	0x240038e8
 80197a8:	24003848 	.word	0x24003848
 80197ac:	0801e15c 	.word	0x0801e15c

080197b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80197b0:	b480      	push	{r7}
 80197b2:	b085      	sub	sp, #20
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	60b9      	str	r1, [r7, #8]
 80197ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	3b04      	subs	r3, #4
 80197c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80197c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	3b04      	subs	r3, #4
 80197ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	f023 0201 	bic.w	r2, r3, #1
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	3b04      	subs	r3, #4
 80197de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80197e0:	4a0c      	ldr	r2, [pc, #48]	@ (8019814 <pxPortInitialiseStack+0x64>)
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	3b14      	subs	r3, #20
 80197ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80197ec:	687a      	ldr	r2, [r7, #4]
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	3b04      	subs	r3, #4
 80197f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f06f 0202 	mvn.w	r2, #2
 80197fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	3b20      	subs	r3, #32
 8019804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019806:	68fb      	ldr	r3, [r7, #12]
}
 8019808:	4618      	mov	r0, r3
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr
 8019814:	08019819 	.word	0x08019819

08019818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019818:	b480      	push	{r7}
 801981a:	b085      	sub	sp, #20
 801981c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801981e:	2300      	movs	r3, #0
 8019820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019822:	4b13      	ldr	r3, [pc, #76]	@ (8019870 <prvTaskExitError+0x58>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801982a:	d00b      	beq.n	8019844 <prvTaskExitError+0x2c>
	__asm volatile
 801982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019830:	f383 8811 	msr	BASEPRI, r3
 8019834:	f3bf 8f6f 	isb	sy
 8019838:	f3bf 8f4f 	dsb	sy
 801983c:	60fb      	str	r3, [r7, #12]
}
 801983e:	bf00      	nop
 8019840:	bf00      	nop
 8019842:	e7fd      	b.n	8019840 <prvTaskExitError+0x28>
	__asm volatile
 8019844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019848:	f383 8811 	msr	BASEPRI, r3
 801984c:	f3bf 8f6f 	isb	sy
 8019850:	f3bf 8f4f 	dsb	sy
 8019854:	60bb      	str	r3, [r7, #8]
}
 8019856:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019858:	bf00      	nop
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d0fc      	beq.n	801985a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019860:	bf00      	nop
 8019862:	bf00      	nop
 8019864:	3714      	adds	r7, #20
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	24000024 	.word	0x24000024
	...

08019880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019880:	4b07      	ldr	r3, [pc, #28]	@ (80198a0 <pxCurrentTCBConst2>)
 8019882:	6819      	ldr	r1, [r3, #0]
 8019884:	6808      	ldr	r0, [r1, #0]
 8019886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801988a:	f380 8809 	msr	PSP, r0
 801988e:	f3bf 8f6f 	isb	sy
 8019892:	f04f 0000 	mov.w	r0, #0
 8019896:	f380 8811 	msr	BASEPRI, r0
 801989a:	4770      	bx	lr
 801989c:	f3af 8000 	nop.w

080198a0 <pxCurrentTCBConst2>:
 80198a0:	2400330c 	.word	0x2400330c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80198a4:	bf00      	nop
 80198a6:	bf00      	nop

080198a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80198a8:	4808      	ldr	r0, [pc, #32]	@ (80198cc <prvPortStartFirstTask+0x24>)
 80198aa:	6800      	ldr	r0, [r0, #0]
 80198ac:	6800      	ldr	r0, [r0, #0]
 80198ae:	f380 8808 	msr	MSP, r0
 80198b2:	f04f 0000 	mov.w	r0, #0
 80198b6:	f380 8814 	msr	CONTROL, r0
 80198ba:	b662      	cpsie	i
 80198bc:	b661      	cpsie	f
 80198be:	f3bf 8f4f 	dsb	sy
 80198c2:	f3bf 8f6f 	isb	sy
 80198c6:	df00      	svc	0
 80198c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80198ca:	bf00      	nop
 80198cc:	e000ed08 	.word	0xe000ed08

080198d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b086      	sub	sp, #24
 80198d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80198d6:	4b47      	ldr	r3, [pc, #284]	@ (80199f4 <xPortStartScheduler+0x124>)
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	4a47      	ldr	r2, [pc, #284]	@ (80199f8 <xPortStartScheduler+0x128>)
 80198dc:	4293      	cmp	r3, r2
 80198de:	d10b      	bne.n	80198f8 <xPortStartScheduler+0x28>
	__asm volatile
 80198e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198e4:	f383 8811 	msr	BASEPRI, r3
 80198e8:	f3bf 8f6f 	isb	sy
 80198ec:	f3bf 8f4f 	dsb	sy
 80198f0:	60fb      	str	r3, [r7, #12]
}
 80198f2:	bf00      	nop
 80198f4:	bf00      	nop
 80198f6:	e7fd      	b.n	80198f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80198f8:	4b3e      	ldr	r3, [pc, #248]	@ (80199f4 <xPortStartScheduler+0x124>)
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4a3f      	ldr	r2, [pc, #252]	@ (80199fc <xPortStartScheduler+0x12c>)
 80198fe:	4293      	cmp	r3, r2
 8019900:	d10b      	bne.n	801991a <xPortStartScheduler+0x4a>
	__asm volatile
 8019902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019906:	f383 8811 	msr	BASEPRI, r3
 801990a:	f3bf 8f6f 	isb	sy
 801990e:	f3bf 8f4f 	dsb	sy
 8019912:	613b      	str	r3, [r7, #16]
}
 8019914:	bf00      	nop
 8019916:	bf00      	nop
 8019918:	e7fd      	b.n	8019916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801991a:	4b39      	ldr	r3, [pc, #228]	@ (8019a00 <xPortStartScheduler+0x130>)
 801991c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	b2db      	uxtb	r3, r3
 8019924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019926:	697b      	ldr	r3, [r7, #20]
 8019928:	22ff      	movs	r2, #255	@ 0xff
 801992a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	b2db      	uxtb	r3, r3
 8019932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019934:	78fb      	ldrb	r3, [r7, #3]
 8019936:	b2db      	uxtb	r3, r3
 8019938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801993c:	b2da      	uxtb	r2, r3
 801993e:	4b31      	ldr	r3, [pc, #196]	@ (8019a04 <xPortStartScheduler+0x134>)
 8019940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019942:	4b31      	ldr	r3, [pc, #196]	@ (8019a08 <xPortStartScheduler+0x138>)
 8019944:	2207      	movs	r2, #7
 8019946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019948:	e009      	b.n	801995e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801994a:	4b2f      	ldr	r3, [pc, #188]	@ (8019a08 <xPortStartScheduler+0x138>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	3b01      	subs	r3, #1
 8019950:	4a2d      	ldr	r2, [pc, #180]	@ (8019a08 <xPortStartScheduler+0x138>)
 8019952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019954:	78fb      	ldrb	r3, [r7, #3]
 8019956:	b2db      	uxtb	r3, r3
 8019958:	005b      	lsls	r3, r3, #1
 801995a:	b2db      	uxtb	r3, r3
 801995c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801995e:	78fb      	ldrb	r3, [r7, #3]
 8019960:	b2db      	uxtb	r3, r3
 8019962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019966:	2b80      	cmp	r3, #128	@ 0x80
 8019968:	d0ef      	beq.n	801994a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801996a:	4b27      	ldr	r3, [pc, #156]	@ (8019a08 <xPortStartScheduler+0x138>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f1c3 0307 	rsb	r3, r3, #7
 8019972:	2b04      	cmp	r3, #4
 8019974:	d00b      	beq.n	801998e <xPortStartScheduler+0xbe>
	__asm volatile
 8019976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801997a:	f383 8811 	msr	BASEPRI, r3
 801997e:	f3bf 8f6f 	isb	sy
 8019982:	f3bf 8f4f 	dsb	sy
 8019986:	60bb      	str	r3, [r7, #8]
}
 8019988:	bf00      	nop
 801998a:	bf00      	nop
 801998c:	e7fd      	b.n	801998a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801998e:	4b1e      	ldr	r3, [pc, #120]	@ (8019a08 <xPortStartScheduler+0x138>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	021b      	lsls	r3, r3, #8
 8019994:	4a1c      	ldr	r2, [pc, #112]	@ (8019a08 <xPortStartScheduler+0x138>)
 8019996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019998:	4b1b      	ldr	r3, [pc, #108]	@ (8019a08 <xPortStartScheduler+0x138>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80199a0:	4a19      	ldr	r2, [pc, #100]	@ (8019a08 <xPortStartScheduler+0x138>)
 80199a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	b2da      	uxtb	r2, r3
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80199ac:	4b17      	ldr	r3, [pc, #92]	@ (8019a0c <xPortStartScheduler+0x13c>)
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	4a16      	ldr	r2, [pc, #88]	@ (8019a0c <xPortStartScheduler+0x13c>)
 80199b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80199b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80199b8:	4b14      	ldr	r3, [pc, #80]	@ (8019a0c <xPortStartScheduler+0x13c>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	4a13      	ldr	r2, [pc, #76]	@ (8019a0c <xPortStartScheduler+0x13c>)
 80199be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80199c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80199c4:	f000 f8da 	bl	8019b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80199c8:	4b11      	ldr	r3, [pc, #68]	@ (8019a10 <xPortStartScheduler+0x140>)
 80199ca:	2200      	movs	r2, #0
 80199cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80199ce:	f000 f8f9 	bl	8019bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80199d2:	4b10      	ldr	r3, [pc, #64]	@ (8019a14 <xPortStartScheduler+0x144>)
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	4a0f      	ldr	r2, [pc, #60]	@ (8019a14 <xPortStartScheduler+0x144>)
 80199d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80199dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80199de:	f7ff ff63 	bl	80198a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80199e2:	f7fe fe39 	bl	8018658 <vTaskSwitchContext>
	prvTaskExitError();
 80199e6:	f7ff ff17 	bl	8019818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80199ea:	2300      	movs	r3, #0
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3718      	adds	r7, #24
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}
 80199f4:	e000ed00 	.word	0xe000ed00
 80199f8:	410fc271 	.word	0x410fc271
 80199fc:	410fc270 	.word	0x410fc270
 8019a00:	e000e400 	.word	0xe000e400
 8019a04:	24003938 	.word	0x24003938
 8019a08:	2400393c 	.word	0x2400393c
 8019a0c:	e000ed20 	.word	0xe000ed20
 8019a10:	24000024 	.word	0x24000024
 8019a14:	e000ef34 	.word	0xe000ef34

08019a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b083      	sub	sp, #12
 8019a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8019a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a22:	f383 8811 	msr	BASEPRI, r3
 8019a26:	f3bf 8f6f 	isb	sy
 8019a2a:	f3bf 8f4f 	dsb	sy
 8019a2e:	607b      	str	r3, [r7, #4]
}
 8019a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019a32:	4b10      	ldr	r3, [pc, #64]	@ (8019a74 <vPortEnterCritical+0x5c>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	3301      	adds	r3, #1
 8019a38:	4a0e      	ldr	r2, [pc, #56]	@ (8019a74 <vPortEnterCritical+0x5c>)
 8019a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8019a74 <vPortEnterCritical+0x5c>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	2b01      	cmp	r3, #1
 8019a42:	d110      	bne.n	8019a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019a44:	4b0c      	ldr	r3, [pc, #48]	@ (8019a78 <vPortEnterCritical+0x60>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	b2db      	uxtb	r3, r3
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d00b      	beq.n	8019a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8019a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a52:	f383 8811 	msr	BASEPRI, r3
 8019a56:	f3bf 8f6f 	isb	sy
 8019a5a:	f3bf 8f4f 	dsb	sy
 8019a5e:	603b      	str	r3, [r7, #0]
}
 8019a60:	bf00      	nop
 8019a62:	bf00      	nop
 8019a64:	e7fd      	b.n	8019a62 <vPortEnterCritical+0x4a>
	}
}
 8019a66:	bf00      	nop
 8019a68:	370c      	adds	r7, #12
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a70:	4770      	bx	lr
 8019a72:	bf00      	nop
 8019a74:	24000024 	.word	0x24000024
 8019a78:	e000ed04 	.word	0xe000ed04

08019a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019a7c:	b480      	push	{r7}
 8019a7e:	b083      	sub	sp, #12
 8019a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019a82:	4b12      	ldr	r3, [pc, #72]	@ (8019acc <vPortExitCritical+0x50>)
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d10b      	bne.n	8019aa2 <vPortExitCritical+0x26>
	__asm volatile
 8019a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a8e:	f383 8811 	msr	BASEPRI, r3
 8019a92:	f3bf 8f6f 	isb	sy
 8019a96:	f3bf 8f4f 	dsb	sy
 8019a9a:	607b      	str	r3, [r7, #4]
}
 8019a9c:	bf00      	nop
 8019a9e:	bf00      	nop
 8019aa0:	e7fd      	b.n	8019a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8019acc <vPortExitCritical+0x50>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	3b01      	subs	r3, #1
 8019aa8:	4a08      	ldr	r2, [pc, #32]	@ (8019acc <vPortExitCritical+0x50>)
 8019aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019aac:	4b07      	ldr	r3, [pc, #28]	@ (8019acc <vPortExitCritical+0x50>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d105      	bne.n	8019ac0 <vPortExitCritical+0x44>
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	f383 8811 	msr	BASEPRI, r3
}
 8019abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019ac0:	bf00      	nop
 8019ac2:	370c      	adds	r7, #12
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aca:	4770      	bx	lr
 8019acc:	24000024 	.word	0x24000024

08019ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019ad0:	f3ef 8009 	mrs	r0, PSP
 8019ad4:	f3bf 8f6f 	isb	sy
 8019ad8:	4b15      	ldr	r3, [pc, #84]	@ (8019b30 <pxCurrentTCBConst>)
 8019ada:	681a      	ldr	r2, [r3, #0]
 8019adc:	f01e 0f10 	tst.w	lr, #16
 8019ae0:	bf08      	it	eq
 8019ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aea:	6010      	str	r0, [r2, #0]
 8019aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019af4:	f380 8811 	msr	BASEPRI, r0
 8019af8:	f3bf 8f4f 	dsb	sy
 8019afc:	f3bf 8f6f 	isb	sy
 8019b00:	f7fe fdaa 	bl	8018658 <vTaskSwitchContext>
 8019b04:	f04f 0000 	mov.w	r0, #0
 8019b08:	f380 8811 	msr	BASEPRI, r0
 8019b0c:	bc09      	pop	{r0, r3}
 8019b0e:	6819      	ldr	r1, [r3, #0]
 8019b10:	6808      	ldr	r0, [r1, #0]
 8019b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b16:	f01e 0f10 	tst.w	lr, #16
 8019b1a:	bf08      	it	eq
 8019b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019b20:	f380 8809 	msr	PSP, r0
 8019b24:	f3bf 8f6f 	isb	sy
 8019b28:	4770      	bx	lr
 8019b2a:	bf00      	nop
 8019b2c:	f3af 8000 	nop.w

08019b30 <pxCurrentTCBConst>:
 8019b30:	2400330c 	.word	0x2400330c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019b34:	bf00      	nop
 8019b36:	bf00      	nop

08019b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b082      	sub	sp, #8
 8019b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8019b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b42:	f383 8811 	msr	BASEPRI, r3
 8019b46:	f3bf 8f6f 	isb	sy
 8019b4a:	f3bf 8f4f 	dsb	sy
 8019b4e:	607b      	str	r3, [r7, #4]
}
 8019b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019b52:	f7fe fcc7 	bl	80184e4 <xTaskIncrementTick>
 8019b56:	4603      	mov	r3, r0
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d003      	beq.n	8019b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019b5c:	4b06      	ldr	r3, [pc, #24]	@ (8019b78 <xPortSysTickHandler+0x40>)
 8019b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019b62:	601a      	str	r2, [r3, #0]
 8019b64:	2300      	movs	r3, #0
 8019b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	f383 8811 	msr	BASEPRI, r3
}
 8019b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019b70:	bf00      	nop
 8019b72:	3708      	adds	r7, #8
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}
 8019b78:	e000ed04 	.word	0xe000ed04

08019b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019b80:	4b0b      	ldr	r3, [pc, #44]	@ (8019bb0 <vPortSetupTimerInterrupt+0x34>)
 8019b82:	2200      	movs	r2, #0
 8019b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019b86:	4b0b      	ldr	r3, [pc, #44]	@ (8019bb4 <vPortSetupTimerInterrupt+0x38>)
 8019b88:	2200      	movs	r2, #0
 8019b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8019bb8 <vPortSetupTimerInterrupt+0x3c>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	4a0a      	ldr	r2, [pc, #40]	@ (8019bbc <vPortSetupTimerInterrupt+0x40>)
 8019b92:	fba2 2303 	umull	r2, r3, r2, r3
 8019b96:	099b      	lsrs	r3, r3, #6
 8019b98:	4a09      	ldr	r2, [pc, #36]	@ (8019bc0 <vPortSetupTimerInterrupt+0x44>)
 8019b9a:	3b01      	subs	r3, #1
 8019b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019b9e:	4b04      	ldr	r3, [pc, #16]	@ (8019bb0 <vPortSetupTimerInterrupt+0x34>)
 8019ba0:	2207      	movs	r2, #7
 8019ba2:	601a      	str	r2, [r3, #0]
}
 8019ba4:	bf00      	nop
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bac:	4770      	bx	lr
 8019bae:	bf00      	nop
 8019bb0:	e000e010 	.word	0xe000e010
 8019bb4:	e000e018 	.word	0xe000e018
 8019bb8:	24000014 	.word	0x24000014
 8019bbc:	10624dd3 	.word	0x10624dd3
 8019bc0:	e000e014 	.word	0xe000e014

08019bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019bd4 <vPortEnableVFP+0x10>
 8019bc8:	6801      	ldr	r1, [r0, #0]
 8019bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019bce:	6001      	str	r1, [r0, #0]
 8019bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019bd2:	bf00      	nop
 8019bd4:	e000ed88 	.word	0xe000ed88

08019bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019bd8:	b480      	push	{r7}
 8019bda:	b085      	sub	sp, #20
 8019bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019bde:	f3ef 8305 	mrs	r3, IPSR
 8019be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	2b0f      	cmp	r3, #15
 8019be8:	d915      	bls.n	8019c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019bea:	4a18      	ldr	r2, [pc, #96]	@ (8019c4c <vPortValidateInterruptPriority+0x74>)
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	4413      	add	r3, r2
 8019bf0:	781b      	ldrb	r3, [r3, #0]
 8019bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019bf4:	4b16      	ldr	r3, [pc, #88]	@ (8019c50 <vPortValidateInterruptPriority+0x78>)
 8019bf6:	781b      	ldrb	r3, [r3, #0]
 8019bf8:	7afa      	ldrb	r2, [r7, #11]
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	d20b      	bcs.n	8019c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8019bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c02:	f383 8811 	msr	BASEPRI, r3
 8019c06:	f3bf 8f6f 	isb	sy
 8019c0a:	f3bf 8f4f 	dsb	sy
 8019c0e:	607b      	str	r3, [r7, #4]
}
 8019c10:	bf00      	nop
 8019c12:	bf00      	nop
 8019c14:	e7fd      	b.n	8019c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019c16:	4b0f      	ldr	r3, [pc, #60]	@ (8019c54 <vPortValidateInterruptPriority+0x7c>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8019c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8019c58 <vPortValidateInterruptPriority+0x80>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d90b      	bls.n	8019c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8019c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c2a:	f383 8811 	msr	BASEPRI, r3
 8019c2e:	f3bf 8f6f 	isb	sy
 8019c32:	f3bf 8f4f 	dsb	sy
 8019c36:	603b      	str	r3, [r7, #0]
}
 8019c38:	bf00      	nop
 8019c3a:	bf00      	nop
 8019c3c:	e7fd      	b.n	8019c3a <vPortValidateInterruptPriority+0x62>
	}
 8019c3e:	bf00      	nop
 8019c40:	3714      	adds	r7, #20
 8019c42:	46bd      	mov	sp, r7
 8019c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c48:	4770      	bx	lr
 8019c4a:	bf00      	nop
 8019c4c:	e000e3f0 	.word	0xe000e3f0
 8019c50:	24003938 	.word	0x24003938
 8019c54:	e000ed0c 	.word	0xe000ed0c
 8019c58:	2400393c 	.word	0x2400393c

08019c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b08a      	sub	sp, #40	@ 0x28
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019c64:	2300      	movs	r3, #0
 8019c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019c68:	f7fe fb6e 	bl	8018348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8019de0 <pvPortMalloc+0x184>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d101      	bne.n	8019c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019c74:	f000 f924 	bl	8019ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019c78:	4b5a      	ldr	r3, [pc, #360]	@ (8019de4 <pvPortMalloc+0x188>)
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	4013      	ands	r3, r2
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	f040 8095 	bne.w	8019db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d01e      	beq.n	8019cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8019c8c:	2208      	movs	r2, #8
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	4413      	add	r3, r2
 8019c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f003 0307 	and.w	r3, r3, #7
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d015      	beq.n	8019cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f023 0307 	bic.w	r3, r3, #7
 8019ca4:	3308      	adds	r3, #8
 8019ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	f003 0307 	and.w	r3, r3, #7
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d00b      	beq.n	8019cca <pvPortMalloc+0x6e>
	__asm volatile
 8019cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cb6:	f383 8811 	msr	BASEPRI, r3
 8019cba:	f3bf 8f6f 	isb	sy
 8019cbe:	f3bf 8f4f 	dsb	sy
 8019cc2:	617b      	str	r3, [r7, #20]
}
 8019cc4:	bf00      	nop
 8019cc6:	bf00      	nop
 8019cc8:	e7fd      	b.n	8019cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d06f      	beq.n	8019db0 <pvPortMalloc+0x154>
 8019cd0:	4b45      	ldr	r3, [pc, #276]	@ (8019de8 <pvPortMalloc+0x18c>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	687a      	ldr	r2, [r7, #4]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d86a      	bhi.n	8019db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019cda:	4b44      	ldr	r3, [pc, #272]	@ (8019dec <pvPortMalloc+0x190>)
 8019cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019cde:	4b43      	ldr	r3, [pc, #268]	@ (8019dec <pvPortMalloc+0x190>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019ce4:	e004      	b.n	8019cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf2:	685b      	ldr	r3, [r3, #4]
 8019cf4:	687a      	ldr	r2, [r7, #4]
 8019cf6:	429a      	cmp	r2, r3
 8019cf8:	d903      	bls.n	8019d02 <pvPortMalloc+0xa6>
 8019cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d1f1      	bne.n	8019ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019d02:	4b37      	ldr	r3, [pc, #220]	@ (8019de0 <pvPortMalloc+0x184>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	d051      	beq.n	8019db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019d0c:	6a3b      	ldr	r3, [r7, #32]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	2208      	movs	r2, #8
 8019d12:	4413      	add	r3, r2
 8019d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d18:	681a      	ldr	r2, [r3, #0]
 8019d1a:	6a3b      	ldr	r3, [r7, #32]
 8019d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d20:	685a      	ldr	r2, [r3, #4]
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	1ad2      	subs	r2, r2, r3
 8019d26:	2308      	movs	r3, #8
 8019d28:	005b      	lsls	r3, r3, #1
 8019d2a:	429a      	cmp	r2, r3
 8019d2c:	d920      	bls.n	8019d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	4413      	add	r3, r2
 8019d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	f003 0307 	and.w	r3, r3, #7
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d00b      	beq.n	8019d58 <pvPortMalloc+0xfc>
	__asm volatile
 8019d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d44:	f383 8811 	msr	BASEPRI, r3
 8019d48:	f3bf 8f6f 	isb	sy
 8019d4c:	f3bf 8f4f 	dsb	sy
 8019d50:	613b      	str	r3, [r7, #16]
}
 8019d52:	bf00      	nop
 8019d54:	bf00      	nop
 8019d56:	e7fd      	b.n	8019d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d5a:	685a      	ldr	r2, [r3, #4]
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	1ad2      	subs	r2, r2, r3
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d66:	687a      	ldr	r2, [r7, #4]
 8019d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019d6a:	69b8      	ldr	r0, [r7, #24]
 8019d6c:	f000 f90a 	bl	8019f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019d70:	4b1d      	ldr	r3, [pc, #116]	@ (8019de8 <pvPortMalloc+0x18c>)
 8019d72:	681a      	ldr	r2, [r3, #0]
 8019d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d76:	685b      	ldr	r3, [r3, #4]
 8019d78:	1ad3      	subs	r3, r2, r3
 8019d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8019de8 <pvPortMalloc+0x18c>)
 8019d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8019de8 <pvPortMalloc+0x18c>)
 8019d80:	681a      	ldr	r2, [r3, #0]
 8019d82:	4b1b      	ldr	r3, [pc, #108]	@ (8019df0 <pvPortMalloc+0x194>)
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	429a      	cmp	r2, r3
 8019d88:	d203      	bcs.n	8019d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019d8a:	4b17      	ldr	r3, [pc, #92]	@ (8019de8 <pvPortMalloc+0x18c>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4a18      	ldr	r2, [pc, #96]	@ (8019df0 <pvPortMalloc+0x194>)
 8019d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d94:	685a      	ldr	r2, [r3, #4]
 8019d96:	4b13      	ldr	r3, [pc, #76]	@ (8019de4 <pvPortMalloc+0x188>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	431a      	orrs	r2, r3
 8019d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da2:	2200      	movs	r2, #0
 8019da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019da6:	4b13      	ldr	r3, [pc, #76]	@ (8019df4 <pvPortMalloc+0x198>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	3301      	adds	r3, #1
 8019dac:	4a11      	ldr	r2, [pc, #68]	@ (8019df4 <pvPortMalloc+0x198>)
 8019dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019db0:	f7fe fad8 	bl	8018364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	f003 0307 	and.w	r3, r3, #7
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d00b      	beq.n	8019dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8019dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dc2:	f383 8811 	msr	BASEPRI, r3
 8019dc6:	f3bf 8f6f 	isb	sy
 8019dca:	f3bf 8f4f 	dsb	sy
 8019dce:	60fb      	str	r3, [r7, #12]
}
 8019dd0:	bf00      	nop
 8019dd2:	bf00      	nop
 8019dd4:	e7fd      	b.n	8019dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8019dd6:	69fb      	ldr	r3, [r7, #28]
}
 8019dd8:	4618      	mov	r0, r3
 8019dda:	3728      	adds	r7, #40	@ 0x28
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}
 8019de0:	24023948 	.word	0x24023948
 8019de4:	2402395c 	.word	0x2402395c
 8019de8:	2402394c 	.word	0x2402394c
 8019dec:	24023940 	.word	0x24023940
 8019df0:	24023950 	.word	0x24023950
 8019df4:	24023954 	.word	0x24023954

08019df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b086      	sub	sp, #24
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d04f      	beq.n	8019eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019e0a:	2308      	movs	r3, #8
 8019e0c:	425b      	negs	r3, r3
 8019e0e:	697a      	ldr	r2, [r7, #20]
 8019e10:	4413      	add	r3, r2
 8019e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019e18:	693b      	ldr	r3, [r7, #16]
 8019e1a:	685a      	ldr	r2, [r3, #4]
 8019e1c:	4b25      	ldr	r3, [pc, #148]	@ (8019eb4 <vPortFree+0xbc>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	4013      	ands	r3, r2
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d10b      	bne.n	8019e3e <vPortFree+0x46>
	__asm volatile
 8019e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e2a:	f383 8811 	msr	BASEPRI, r3
 8019e2e:	f3bf 8f6f 	isb	sy
 8019e32:	f3bf 8f4f 	dsb	sy
 8019e36:	60fb      	str	r3, [r7, #12]
}
 8019e38:	bf00      	nop
 8019e3a:	bf00      	nop
 8019e3c:	e7fd      	b.n	8019e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d00b      	beq.n	8019e5e <vPortFree+0x66>
	__asm volatile
 8019e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e4a:	f383 8811 	msr	BASEPRI, r3
 8019e4e:	f3bf 8f6f 	isb	sy
 8019e52:	f3bf 8f4f 	dsb	sy
 8019e56:	60bb      	str	r3, [r7, #8]
}
 8019e58:	bf00      	nop
 8019e5a:	bf00      	nop
 8019e5c:	e7fd      	b.n	8019e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	685a      	ldr	r2, [r3, #4]
 8019e62:	4b14      	ldr	r3, [pc, #80]	@ (8019eb4 <vPortFree+0xbc>)
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	4013      	ands	r3, r2
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d01e      	beq.n	8019eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d11a      	bne.n	8019eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019e74:	693b      	ldr	r3, [r7, #16]
 8019e76:	685a      	ldr	r2, [r3, #4]
 8019e78:	4b0e      	ldr	r3, [pc, #56]	@ (8019eb4 <vPortFree+0xbc>)
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	43db      	mvns	r3, r3
 8019e7e:	401a      	ands	r2, r3
 8019e80:	693b      	ldr	r3, [r7, #16]
 8019e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019e84:	f7fe fa60 	bl	8018348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019e88:	693b      	ldr	r3, [r7, #16]
 8019e8a:	685a      	ldr	r2, [r3, #4]
 8019e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8019eb8 <vPortFree+0xc0>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4413      	add	r3, r2
 8019e92:	4a09      	ldr	r2, [pc, #36]	@ (8019eb8 <vPortFree+0xc0>)
 8019e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019e96:	6938      	ldr	r0, [r7, #16]
 8019e98:	f000 f874 	bl	8019f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019e9c:	4b07      	ldr	r3, [pc, #28]	@ (8019ebc <vPortFree+0xc4>)
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	4a06      	ldr	r2, [pc, #24]	@ (8019ebc <vPortFree+0xc4>)
 8019ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019ea6:	f7fe fa5d 	bl	8018364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019eaa:	bf00      	nop
 8019eac:	3718      	adds	r7, #24
 8019eae:	46bd      	mov	sp, r7
 8019eb0:	bd80      	pop	{r7, pc}
 8019eb2:	bf00      	nop
 8019eb4:	2402395c 	.word	0x2402395c
 8019eb8:	2402394c 	.word	0x2402394c
 8019ebc:	24023958 	.word	0x24023958

08019ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ec0:	b480      	push	{r7}
 8019ec2:	b085      	sub	sp, #20
 8019ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019ec6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8019eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019ecc:	4b27      	ldr	r3, [pc, #156]	@ (8019f6c <prvHeapInit+0xac>)
 8019ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	f003 0307 	and.w	r3, r3, #7
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d00c      	beq.n	8019ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	3307      	adds	r3, #7
 8019ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	f023 0307 	bic.w	r3, r3, #7
 8019ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019ee8:	68ba      	ldr	r2, [r7, #8]
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	1ad3      	subs	r3, r2, r3
 8019eee:	4a1f      	ldr	r2, [pc, #124]	@ (8019f6c <prvHeapInit+0xac>)
 8019ef0:	4413      	add	r3, r2
 8019ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8019f70 <prvHeapInit+0xb0>)
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019efe:	4b1c      	ldr	r3, [pc, #112]	@ (8019f70 <prvHeapInit+0xb0>)
 8019f00:	2200      	movs	r2, #0
 8019f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	68ba      	ldr	r2, [r7, #8]
 8019f08:	4413      	add	r3, r2
 8019f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019f0c:	2208      	movs	r2, #8
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	1a9b      	subs	r3, r3, r2
 8019f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	f023 0307 	bic.w	r3, r3, #7
 8019f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	4a15      	ldr	r2, [pc, #84]	@ (8019f74 <prvHeapInit+0xb4>)
 8019f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019f22:	4b14      	ldr	r3, [pc, #80]	@ (8019f74 <prvHeapInit+0xb4>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2200      	movs	r2, #0
 8019f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019f2a:	4b12      	ldr	r3, [pc, #72]	@ (8019f74 <prvHeapInit+0xb4>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2200      	movs	r2, #0
 8019f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	68fa      	ldr	r2, [r7, #12]
 8019f3a:	1ad2      	subs	r2, r2, r3
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019f40:	4b0c      	ldr	r3, [pc, #48]	@ (8019f74 <prvHeapInit+0xb4>)
 8019f42:	681a      	ldr	r2, [r3, #0]
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8019f78 <prvHeapInit+0xb8>)
 8019f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	4a09      	ldr	r2, [pc, #36]	@ (8019f7c <prvHeapInit+0xbc>)
 8019f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019f58:	4b09      	ldr	r3, [pc, #36]	@ (8019f80 <prvHeapInit+0xc0>)
 8019f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019f5e:	601a      	str	r2, [r3, #0]
}
 8019f60:	bf00      	nop
 8019f62:	3714      	adds	r7, #20
 8019f64:	46bd      	mov	sp, r7
 8019f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6a:	4770      	bx	lr
 8019f6c:	24003940 	.word	0x24003940
 8019f70:	24023940 	.word	0x24023940
 8019f74:	24023948 	.word	0x24023948
 8019f78:	24023950 	.word	0x24023950
 8019f7c:	2402394c 	.word	0x2402394c
 8019f80:	2402395c 	.word	0x2402395c

08019f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019f84:	b480      	push	{r7}
 8019f86:	b085      	sub	sp, #20
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019f8c:	4b28      	ldr	r3, [pc, #160]	@ (801a030 <prvInsertBlockIntoFreeList+0xac>)
 8019f8e:	60fb      	str	r3, [r7, #12]
 8019f90:	e002      	b.n	8019f98 <prvInsertBlockIntoFreeList+0x14>
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	60fb      	str	r3, [r7, #12]
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	687a      	ldr	r2, [r7, #4]
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d8f7      	bhi.n	8019f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	68ba      	ldr	r2, [r7, #8]
 8019fac:	4413      	add	r3, r2
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	d108      	bne.n	8019fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	685a      	ldr	r2, [r3, #4]
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	441a      	add	r2, r3
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	68ba      	ldr	r2, [r7, #8]
 8019fd0:	441a      	add	r2, r3
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	429a      	cmp	r2, r3
 8019fd8:	d118      	bne.n	801a00c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	681a      	ldr	r2, [r3, #0]
 8019fde:	4b15      	ldr	r3, [pc, #84]	@ (801a034 <prvInsertBlockIntoFreeList+0xb0>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	d00d      	beq.n	801a002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	685a      	ldr	r2, [r3, #4]
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	685b      	ldr	r3, [r3, #4]
 8019ff0:	441a      	add	r2, r3
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	601a      	str	r2, [r3, #0]
 801a000:	e008      	b.n	801a014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a002:	4b0c      	ldr	r3, [pc, #48]	@ (801a034 <prvInsertBlockIntoFreeList+0xb0>)
 801a004:	681a      	ldr	r2, [r3, #0]
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	601a      	str	r2, [r3, #0]
 801a00a:	e003      	b.n	801a014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	681a      	ldr	r2, [r3, #0]
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a014:	68fa      	ldr	r2, [r7, #12]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	429a      	cmp	r2, r3
 801a01a:	d002      	beq.n	801a022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	687a      	ldr	r2, [r7, #4]
 801a020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a022:	bf00      	nop
 801a024:	3714      	adds	r7, #20
 801a026:	46bd      	mov	sp, r7
 801a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02c:	4770      	bx	lr
 801a02e:	bf00      	nop
 801a030:	24023940 	.word	0x24023940
 801a034:	24023948 	.word	0x24023948

0801a038 <asm330lhh_read_reg>:
 * @param  len   number of consecutive register to read
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len) {
 801a038:	b590      	push	{r4, r7, lr}
 801a03a:	b087      	sub	sp, #28
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	60f8      	str	r0, [r7, #12]
 801a040:	607a      	str	r2, [r7, #4]
 801a042:	461a      	mov	r2, r3
 801a044:	460b      	mov	r3, r1
 801a046:	72fb      	strb	r3, [r7, #11]
 801a048:	4613      	mov	r3, r2
 801a04a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d102      	bne.n	801a058 <asm330lhh_read_reg+0x20>
    return -1;
 801a052:	f04f 33ff 	mov.w	r3, #4294967295
 801a056:	e009      	b.n	801a06c <asm330lhh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	685c      	ldr	r4, [r3, #4]
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	68d8      	ldr	r0, [r3, #12]
 801a060:	893b      	ldrh	r3, [r7, #8]
 801a062:	7af9      	ldrb	r1, [r7, #11]
 801a064:	687a      	ldr	r2, [r7, #4]
 801a066:	47a0      	blx	r4
 801a068:	6178      	str	r0, [r7, #20]

  return ret;
 801a06a:	697b      	ldr	r3, [r7, #20]
}
 801a06c:	4618      	mov	r0, r3
 801a06e:	371c      	adds	r7, #28
 801a070:	46bd      	mov	sp, r7
 801a072:	bd90      	pop	{r4, r7, pc}

0801a074 <asm330lhh_write_reg>:
 * @param  len   number of consecutive register to write
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len) {
 801a074:	b590      	push	{r4, r7, lr}
 801a076:	b087      	sub	sp, #28
 801a078:	af00      	add	r7, sp, #0
 801a07a:	60f8      	str	r0, [r7, #12]
 801a07c:	607a      	str	r2, [r7, #4]
 801a07e:	461a      	mov	r2, r3
 801a080:	460b      	mov	r3, r1
 801a082:	72fb      	strb	r3, [r7, #11]
 801a084:	4613      	mov	r3, r2
 801a086:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d102      	bne.n	801a094 <asm330lhh_write_reg+0x20>
    return -1;
 801a08e:	f04f 33ff 	mov.w	r3, #4294967295
 801a092:	e009      	b.n	801a0a8 <asm330lhh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	681c      	ldr	r4, [r3, #0]
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	68d8      	ldr	r0, [r3, #12]
 801a09c:	893b      	ldrh	r3, [r7, #8]
 801a09e:	7af9      	ldrb	r1, [r7, #11]
 801a0a0:	687a      	ldr	r2, [r7, #4]
 801a0a2:	47a0      	blx	r4
 801a0a4:	6178      	str	r0, [r7, #20]

  return ret;
 801a0a6:	697b      	ldr	r3, [r7, #20]
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	371c      	adds	r7, #28
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd90      	pop	{r4, r7, pc}

0801a0b0 <asm330lhh_xl_full_scale_set>:
 * @param  val    Change the values of fs_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_xl_t val) {
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b084      	sub	sp, #16
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	6078      	str	r0, [r7, #4]
 801a0b8:	460b      	mov	r3, r1
 801a0ba:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801a0bc:	f107 0208 	add.w	r2, r7, #8
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	2110      	movs	r1, #16
 801a0c4:	6878      	ldr	r0, [r7, #4]
 801a0c6:	f7ff ffb7 	bl	801a038 <asm330lhh_read_reg>
 801a0ca:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d10f      	bne.n	801a0f2 <asm330lhh_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 801a0d2:	78fb      	ldrb	r3, [r7, #3]
 801a0d4:	f003 0303 	and.w	r3, r3, #3
 801a0d8:	b2da      	uxtb	r2, r3
 801a0da:	7a3b      	ldrb	r3, [r7, #8]
 801a0dc:	f362 0383 	bfi	r3, r2, #2, #2
 801a0e0:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801a0e2:	f107 0208 	add.w	r2, r7, #8
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	2110      	movs	r1, #16
 801a0ea:	6878      	ldr	r0, [r7, #4]
 801a0ec:	f7ff ffc2 	bl	801a074 <asm330lhh_write_reg>
 801a0f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801a0f2:	68fb      	ldr	r3, [r7, #12]
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3710      	adds	r7, #16
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <asm330lhh_xl_data_rate_set>:
 * @param  val    Change the values of odr_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_xl_t val) {
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	460b      	mov	r3, r1
 801a106:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_xl_t odr_xl = val;
 801a108:	78fb      	ldrb	r3, [r7, #3]
 801a10a:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret = 0;
 801a10c:	2300      	movs	r3, #0
 801a10e:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d107      	bne.n	801a126 <asm330lhh_xl_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801a116:	f107 0208 	add.w	r2, r7, #8
 801a11a:	2301      	movs	r3, #1
 801a11c:	2110      	movs	r1, #16
 801a11e:	6878      	ldr	r0, [r7, #4]
 801a120:	f7ff ff8a 	bl	801a038 <asm330lhh_read_reg>
 801a124:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d10f      	bne.n	801a14c <asm330lhh_xl_data_rate_set+0x50>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 801a12c:	7afb      	ldrb	r3, [r7, #11]
 801a12e:	f003 030f 	and.w	r3, r3, #15
 801a132:	b2da      	uxtb	r2, r3
 801a134:	7a3b      	ldrb	r3, [r7, #8]
 801a136:	f362 1307 	bfi	r3, r2, #4, #4
 801a13a:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801a13c:	f107 0208 	add.w	r2, r7, #8
 801a140:	2301      	movs	r3, #1
 801a142:	2110      	movs	r1, #16
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	f7ff ff95 	bl	801a074 <asm330lhh_write_reg>
 801a14a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a14c:	68fb      	ldr	r3, [r7, #12]
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3710      	adds	r7, #16
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}

0801a156 <asm330lhh_gy_full_scale_set>:
 * @param  val    Change the values of fs_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_g_t val) {
 801a156:	b580      	push	{r7, lr}
 801a158:	b084      	sub	sp, #16
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	6078      	str	r0, [r7, #4]
 801a15e:	460b      	mov	r3, r1
 801a160:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801a162:	f107 0208 	add.w	r2, r7, #8
 801a166:	2301      	movs	r3, #1
 801a168:	2111      	movs	r1, #17
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f7ff ff64 	bl	801a038 <asm330lhh_read_reg>
 801a170:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d10f      	bne.n	801a198 <asm330lhh_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 801a178:	78fb      	ldrb	r3, [r7, #3]
 801a17a:	f003 030f 	and.w	r3, r3, #15
 801a17e:	b2da      	uxtb	r2, r3
 801a180:	7a3b      	ldrb	r3, [r7, #8]
 801a182:	f362 0303 	bfi	r3, r2, #0, #4
 801a186:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801a188:	f107 0208 	add.w	r2, r7, #8
 801a18c:	2301      	movs	r3, #1
 801a18e:	2111      	movs	r1, #17
 801a190:	6878      	ldr	r0, [r7, #4]
 801a192:	f7ff ff6f 	bl	801a074 <asm330lhh_write_reg>
 801a196:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a198:	68fb      	ldr	r3, [r7, #12]
}
 801a19a:	4618      	mov	r0, r3
 801a19c:	3710      	adds	r7, #16
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}

0801a1a2 <asm330lhh_gy_data_rate_set>:
 * @param  val    Change the values of odr_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_g_t val) {
 801a1a2:	b580      	push	{r7, lr}
 801a1a4:	b084      	sub	sp, #16
 801a1a6:	af00      	add	r7, sp, #0
 801a1a8:	6078      	str	r0, [r7, #4]
 801a1aa:	460b      	mov	r3, r1
 801a1ac:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_g_t odr_gy = val;
 801a1ae:	78fb      	ldrb	r3, [r7, #3]
 801a1b0:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret = 0;
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d107      	bne.n	801a1cc <asm330lhh_gy_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801a1bc:	f107 0208 	add.w	r2, r7, #8
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	2111      	movs	r1, #17
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f7ff ff37 	bl	801a038 <asm330lhh_read_reg>
 801a1ca:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d10f      	bne.n	801a1f2 <asm330lhh_gy_data_rate_set+0x50>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 801a1d2:	7afb      	ldrb	r3, [r7, #11]
 801a1d4:	f003 030f 	and.w	r3, r3, #15
 801a1d8:	b2da      	uxtb	r2, r3
 801a1da:	7a3b      	ldrb	r3, [r7, #8]
 801a1dc:	f362 1307 	bfi	r3, r2, #4, #4
 801a1e0:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801a1e2:	f107 0208 	add.w	r2, r7, #8
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	2111      	movs	r1, #17
 801a1ea:	6878      	ldr	r0, [r7, #4]
 801a1ec:	f7ff ff42 	bl	801a074 <asm330lhh_write_reg>
 801a1f0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a1f2:	68fb      	ldr	r3, [r7, #12]
}
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3710      	adds	r7, #16
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <asm330lhh_block_data_update_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of bdu in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val) {
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b084      	sub	sp, #16
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	460b      	mov	r3, r1
 801a206:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801a208:	f107 0208 	add.w	r2, r7, #8
 801a20c:	2301      	movs	r3, #1
 801a20e:	2112      	movs	r1, #18
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f7ff ff11 	bl	801a038 <asm330lhh_read_reg>
 801a216:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d10f      	bne.n	801a23e <asm330lhh_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 801a21e:	78fb      	ldrb	r3, [r7, #3]
 801a220:	f003 0301 	and.w	r3, r3, #1
 801a224:	b2da      	uxtb	r2, r3
 801a226:	7a3b      	ldrb	r3, [r7, #8]
 801a228:	f362 1386 	bfi	r3, r2, #6, #1
 801a22c:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801a22e:	f107 0208 	add.w	r2, r7, #8
 801a232:	2301      	movs	r3, #1
 801a234:	2112      	movs	r1, #18
 801a236:	6878      	ldr	r0, [r7, #4]
 801a238:	f7ff ff1c 	bl	801a074 <asm330lhh_write_reg>
 801a23c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a23e:	68fb      	ldr	r3, [r7, #12]
}
 801a240:	4618      	mov	r0, r3
 801a242:	3710      	adds	r7, #16
 801a244:	46bd      	mov	sp, r7
 801a246:	bd80      	pop	{r7, pc}

0801a248 <asm330lhh_angular_rate_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 801a248:	b580      	push	{r7, lr}
 801a24a:	b086      	sub	sp, #24
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_G, buff, 6);
 801a252:	f107 020c 	add.w	r2, r7, #12
 801a256:	2306      	movs	r3, #6
 801a258:	2122      	movs	r1, #34	@ 0x22
 801a25a:	6878      	ldr	r0, [r7, #4]
 801a25c:	f7ff feec 	bl	801a038 <asm330lhh_read_reg>
 801a260:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 801a262:	7b7b      	ldrb	r3, [r7, #13]
 801a264:	b21a      	sxth	r2, r3
 801a266:	683b      	ldr	r3, [r7, #0]
 801a268:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a270:	b29b      	uxth	r3, r3
 801a272:	021b      	lsls	r3, r3, #8
 801a274:	b29b      	uxth	r3, r3
 801a276:	7b3a      	ldrb	r2, [r7, #12]
 801a278:	4413      	add	r3, r2
 801a27a:	b29b      	uxth	r3, r3
 801a27c:	b21a      	sxth	r2, r3
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 801a282:	7bfa      	ldrb	r2, [r7, #15]
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	3302      	adds	r3, #2
 801a288:	b212      	sxth	r2, r2
 801a28a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	3302      	adds	r3, #2
 801a290:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a294:	b29b      	uxth	r3, r3
 801a296:	021b      	lsls	r3, r3, #8
 801a298:	b29b      	uxth	r3, r3
 801a29a:	7bba      	ldrb	r2, [r7, #14]
 801a29c:	4413      	add	r3, r2
 801a29e:	b29a      	uxth	r2, r3
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	3302      	adds	r3, #2
 801a2a4:	b212      	sxth	r2, r2
 801a2a6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 801a2a8:	7c7a      	ldrb	r2, [r7, #17]
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	3304      	adds	r3, #4
 801a2ae:	b212      	sxth	r2, r2
 801a2b0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	3304      	adds	r3, #4
 801a2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	021b      	lsls	r3, r3, #8
 801a2be:	b29b      	uxth	r3, r3
 801a2c0:	7c3a      	ldrb	r2, [r7, #16]
 801a2c2:	4413      	add	r3, r2
 801a2c4:	b29a      	uxth	r2, r3
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	3304      	adds	r3, #4
 801a2ca:	b212      	sxth	r2, r2
 801a2cc:	801a      	strh	r2, [r3, #0]

  return ret;
 801a2ce:	697b      	ldr	r3, [r7, #20]
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3718      	adds	r7, #24
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <asm330lhh_acceleration_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b086      	sub	sp, #24
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_A, buff, 6);
 801a2e2:	f107 020c 	add.w	r2, r7, #12
 801a2e6:	2306      	movs	r3, #6
 801a2e8:	2128      	movs	r1, #40	@ 0x28
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	f7ff fea4 	bl	801a038 <asm330lhh_read_reg>
 801a2f0:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 801a2f2:	7b7b      	ldrb	r3, [r7, #13]
 801a2f4:	b21a      	sxth	r2, r3
 801a2f6:	683b      	ldr	r3, [r7, #0]
 801a2f8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801a2fa:	683b      	ldr	r3, [r7, #0]
 801a2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a300:	b29b      	uxth	r3, r3
 801a302:	021b      	lsls	r3, r3, #8
 801a304:	b29b      	uxth	r3, r3
 801a306:	7b3a      	ldrb	r2, [r7, #12]
 801a308:	4413      	add	r3, r2
 801a30a:	b29b      	uxth	r3, r3
 801a30c:	b21a      	sxth	r2, r3
 801a30e:	683b      	ldr	r3, [r7, #0]
 801a310:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 801a312:	7bfa      	ldrb	r2, [r7, #15]
 801a314:	683b      	ldr	r3, [r7, #0]
 801a316:	3302      	adds	r3, #2
 801a318:	b212      	sxth	r2, r2
 801a31a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	3302      	adds	r3, #2
 801a320:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a324:	b29b      	uxth	r3, r3
 801a326:	021b      	lsls	r3, r3, #8
 801a328:	b29b      	uxth	r3, r3
 801a32a:	7bba      	ldrb	r2, [r7, #14]
 801a32c:	4413      	add	r3, r2
 801a32e:	b29a      	uxth	r2, r3
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	3302      	adds	r3, #2
 801a334:	b212      	sxth	r2, r2
 801a336:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 801a338:	7c7a      	ldrb	r2, [r7, #17]
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	3304      	adds	r3, #4
 801a33e:	b212      	sxth	r2, r2
 801a340:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	3304      	adds	r3, #4
 801a346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	021b      	lsls	r3, r3, #8
 801a34e:	b29b      	uxth	r3, r3
 801a350:	7c3a      	ldrb	r2, [r7, #16]
 801a352:	4413      	add	r3, r2
 801a354:	b29a      	uxth	r2, r3
 801a356:	683b      	ldr	r3, [r7, #0]
 801a358:	3304      	adds	r3, #4
 801a35a:	b212      	sxth	r2, r2
 801a35c:	801a      	strh	r2, [r3, #0]

  return ret;
 801a35e:	697b      	ldr	r3, [r7, #20]
}
 801a360:	4618      	mov	r0, r3
 801a362:	3718      	adds	r7, #24
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}

0801a368 <asm330lhh_device_conf_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of device_conf in reg CTRL9_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_conf_set(const stmdev_ctx_t *ctx, uint8_t val) {
 801a368:	b580      	push	{r7, lr}
 801a36a:	b084      	sub	sp, #16
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
 801a370:	460b      	mov	r3, r1
 801a372:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 801a374:	f107 0208 	add.w	r2, r7, #8
 801a378:	2301      	movs	r3, #1
 801a37a:	2118      	movs	r1, #24
 801a37c:	6878      	ldr	r0, [r7, #4]
 801a37e:	f7ff fe5b 	bl	801a038 <asm330lhh_read_reg>
 801a382:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d10f      	bne.n	801a3aa <asm330lhh_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 801a38a:	78fb      	ldrb	r3, [r7, #3]
 801a38c:	f003 0301 	and.w	r3, r3, #1
 801a390:	b2da      	uxtb	r2, r3
 801a392:	7a3b      	ldrb	r3, [r7, #8]
 801a394:	f362 0341 	bfi	r3, r2, #1, #1
 801a398:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 801a39a:	f107 0208 	add.w	r2, r7, #8
 801a39e:	2301      	movs	r3, #1
 801a3a0:	2118      	movs	r1, #24
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f7ff fe66 	bl	801a074 <asm330lhh_write_reg>
 801a3a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801a3aa:	68fb      	ldr	r3, [r7, #12]
}
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	3710      	adds	r7, #16
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <asm330lhh_data_ready_mode_set>:
 *                reg COUNTER_BDR_REG1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_data_ready_mode_set(const stmdev_ctx_t *ctx,
                                      asm330lhh_dataready_pulsed_t val) {
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b084      	sub	sp, #16
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
 801a3bc:	460b      	mov	r3, r1
 801a3be:	70fb      	strb	r3, [r7, #3]
  asm330lhh_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 801a3c0:	f107 0208 	add.w	r2, r7, #8
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	210b      	movs	r1, #11
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f7ff fe35 	bl	801a038 <asm330lhh_read_reg>
 801a3ce:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0) {
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d10f      	bne.n	801a3f6 <asm330lhh_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 801a3d6:	78fb      	ldrb	r3, [r7, #3]
 801a3d8:	f003 0301 	and.w	r3, r3, #1
 801a3dc:	b2da      	uxtb	r2, r3
 801a3de:	7a3b      	ldrb	r3, [r7, #8]
 801a3e0:	f362 13c7 	bfi	r3, r2, #7, #1
 801a3e4:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 801a3e6:	f107 0208 	add.w	r2, r7, #8
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	210b      	movs	r1, #11
 801a3ee:	6878      	ldr	r0, [r7, #4]
 801a3f0:	f7ff fe40 	bl	801a074 <asm330lhh_write_reg>
 801a3f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&counter_bdr_reg1, 1);
  }
  return ret;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3710      	adds	r7, #16
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <asm330lhh_device_id_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff) {
 801a400:	b580      	push	{r7, lr}
 801a402:	b084      	sub	sp, #16
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
 801a408:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_WHO_AM_I, buff, 1);
 801a40a:	2301      	movs	r3, #1
 801a40c:	683a      	ldr	r2, [r7, #0]
 801a40e:	210f      	movs	r1, #15
 801a410:	6878      	ldr	r0, [r7, #4]
 801a412:	f7ff fe11 	bl	801a038 <asm330lhh_read_reg>
 801a416:	60f8      	str	r0, [r7, #12]
  return ret;
 801a418:	68fb      	ldr	r3, [r7, #12]
}
 801a41a:	4618      	mov	r0, r3
 801a41c:	3710      	adds	r7, #16
 801a41e:	46bd      	mov	sp, r7
 801a420:	bd80      	pop	{r7, pc}

0801a422 <asm330lhh_reset_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_set(const stmdev_ctx_t *ctx, uint8_t val) {
 801a422:	b580      	push	{r7, lr}
 801a424:	b084      	sub	sp, #16
 801a426:	af00      	add	r7, sp, #0
 801a428:	6078      	str	r0, [r7, #4]
 801a42a:	460b      	mov	r3, r1
 801a42c:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801a42e:	f107 0208 	add.w	r2, r7, #8
 801a432:	2301      	movs	r3, #1
 801a434:	2112      	movs	r1, #18
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	f7ff fdfe 	bl	801a038 <asm330lhh_read_reg>
 801a43c:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d10f      	bne.n	801a464 <asm330lhh_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 801a444:	78fb      	ldrb	r3, [r7, #3]
 801a446:	f003 0301 	and.w	r3, r3, #1
 801a44a:	b2da      	uxtb	r2, r3
 801a44c:	7a3b      	ldrb	r3, [r7, #8]
 801a44e:	f362 0300 	bfi	r3, r2, #0, #1
 801a452:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801a454:	f107 0208 	add.w	r2, r7, #8
 801a458:	2301      	movs	r3, #1
 801a45a:	2112      	movs	r1, #18
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f7ff fe09 	bl	801a074 <asm330lhh_write_reg>
 801a462:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a464:	68fb      	ldr	r3, [r7, #12]
}
 801a466:	4618      	mov	r0, r3
 801a468:	3710      	adds	r7, #16
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd80      	pop	{r7, pc}

0801a46e <asm330lhh_reset_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val) {
 801a46e:	b580      	push	{r7, lr}
 801a470:	b084      	sub	sp, #16
 801a472:	af00      	add	r7, sp, #0
 801a474:	6078      	str	r0, [r7, #4]
 801a476:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801a478:	f107 0208 	add.w	r2, r7, #8
 801a47c:	2301      	movs	r3, #1
 801a47e:	2112      	movs	r1, #18
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	f7ff fdd9 	bl	801a038 <asm330lhh_read_reg>
 801a486:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 801a488:	7a3b      	ldrb	r3, [r7, #8]
 801a48a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a48e:	b2db      	uxtb	r3, r3
 801a490:	461a      	mov	r2, r3
 801a492:	683b      	ldr	r3, [r7, #0]
 801a494:	701a      	strb	r2, [r3, #0]

  return ret;
 801a496:	68fb      	ldr	r3, [r7, #12]
}
 801a498:	4618      	mov	r0, r3
 801a49a:	3710      	adds	r7, #16
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <asm330lhh_pin_int1_route_set>:
 *                  MD1_CFG, EMB_FUNC_INT1, FSM_INT1_A,
 *                  FSM_INT1_B
 *
 */
int32_t asm330lhh_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                     asm330lhh_pin_int1_route_t *val) {
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b084      	sub	sp, #16
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
 801a4a8:	6039      	str	r1, [r7, #0]
  asm330lhh_int_cfg1_t int_cfg1;
  int32_t ret;

  ret =
      asm330lhh_write_reg(ctx, ASM330LHH_MD1_CFG, (uint8_t *)&val->md1_cfg, 1);
 801a4aa:	683b      	ldr	r3, [r7, #0]
 801a4ac:	1c5a      	adds	r2, r3, #1
 801a4ae:	2301      	movs	r3, #1
 801a4b0:	215e      	movs	r1, #94	@ 0x5e
 801a4b2:	6878      	ldr	r0, [r7, #4]
 801a4b4:	f7ff fdde 	bl	801a074 <asm330lhh_write_reg>
 801a4b8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d107      	bne.n	801a4d0 <asm330lhh_pin_int1_route_set+0x30>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 801a4c0:	f107 0208 	add.w	r2, r7, #8
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	2158      	movs	r1, #88	@ 0x58
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f7ff fdb5 	bl	801a038 <asm330lhh_read_reg>
 801a4ce:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d16a      	bne.n	801a5ac <asm330lhh_pin_int1_route_set+0x10c>
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	781b      	ldrb	r3, [r3, #0]
 801a4da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a4de:	b2da      	uxtb	r2, r3
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	781b      	ldrb	r3, [r3, #0]
 801a4e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	4313      	orrs	r3, r2
 801a4ec:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a4f6:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 801a4f8:	4313      	orrs	r3, r2
 801a4fa:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	781b      	ldrb	r3, [r3, #0]
 801a500:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a504:	b2db      	uxtb	r3, r3
 801a506:	4313      	orrs	r3, r2
 801a508:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	781b      	ldrb	r3, [r3, #0]
 801a50e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a512:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801a514:	4313      	orrs	r3, r2
 801a516:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a520:	b2db      	uxtb	r3, r3
 801a522:	4313      	orrs	r3, r2
 801a524:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a52e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 801a530:	4313      	orrs	r3, r2
 801a532:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	4313      	orrs	r3, r2
 801a540:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	785b      	ldrb	r3, [r3, #1]
 801a546:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a54a:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 801a54c:	4313      	orrs	r3, r2
 801a54e:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	785b      	ldrb	r3, [r3, #1]
 801a554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	4313      	orrs	r3, r2
 801a55c:	b2da      	uxtb	r2, r3
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	785b      	ldrb	r3, [r3, #1]
 801a562:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a566:	b2db      	uxtb	r3, r3
 801a568:	4313      	orrs	r3, r2
 801a56a:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE) {
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	785b      	ldrb	r3, [r3, #1]
 801a570:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a574:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 801a576:	4313      	orrs	r3, r2
 801a578:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d00a      	beq.n	801a594 <asm330lhh_pin_int1_route_set+0xf4>
      int_cfg1.interrupts_enable = PROPERTY_ENABLE;
 801a57e:	7a3b      	ldrb	r3, [r7, #8]
 801a580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a584:	723b      	strb	r3, [r7, #8]
      asm330lhh_write_reg(ctx, ASM330LHH_INT1_CTRL, (uint8_t *)&val->int1_ctrl,
 801a586:	683a      	ldr	r2, [r7, #0]
 801a588:	2301      	movs	r3, #1
 801a58a:	210d      	movs	r1, #13
 801a58c:	6878      	ldr	r0, [r7, #4]
 801a58e:	f7ff fd71 	bl	801a074 <asm330lhh_write_reg>
 801a592:	e003      	b.n	801a59c <asm330lhh_pin_int1_route_set+0xfc>
                          1);
    } else {
      int_cfg1.interrupts_enable = PROPERTY_DISABLE;
 801a594:	7a3b      	ldrb	r3, [r7, #8]
 801a596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a59a:	723b      	strb	r3, [r7, #8]
    }
    ret = asm330lhh_write_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 801a59c:	f107 0208 	add.w	r2, r7, #8
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	2158      	movs	r1, #88	@ 0x58
 801a5a4:	6878      	ldr	r0, [r7, #4]
 801a5a6:	f7ff fd65 	bl	801a074 <asm330lhh_write_reg>
 801a5aa:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801a5ac:	68fb      	ldr	r3, [r7, #12]
}
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	3710      	adds	r7, #16
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bd80      	pop	{r7, pc}
	...

0801a5b8 <dwt_initialise>:
#define LOTID_ADDRESS (0x07)
#define VBAT_ADDRESS (0x08)
#define VTEMP_ADDRESS (0x09)
#define XTRIM_ADDRESS (0x1E)

int dwt_initialise(uint16 config) {
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b086      	sub	sp, #24
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	4603      	mov	r3, r0
 801a5c0:	80fb      	strh	r3, [r7, #6]
  uint8 plllockdetect = EC_CTRL_PLLLCK;
 801a5c2:	2304      	movs	r3, #4
 801a5c4:	737b      	strb	r3, [r7, #13]
  uint16 otp_addr = 0;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	82fb      	strh	r3, [r7, #22]
  uint32 ldo_tune = 0;
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	613b      	str	r3, [r7, #16]

  dw1000local.dblbuffon = 0;     // Double buffer mode off by default
 801a5ce:	4b4f      	ldr	r3, [pc, #316]	@ (801a70c <dwt_initialise+0x154>)
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	755a      	strb	r2, [r3, #21]
  dw1000local.prfIndex = 0;      // 16MHz
 801a5d4:	4b4d      	ldr	r3, [pc, #308]	@ (801a70c <dwt_initialise+0x154>)
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	631a      	str	r2, [r3, #48]	@ 0x30
  dw1000local.cdata.aatset = 0;  // Auto ACK bit not set
 801a5da:	4b4c      	ldr	r3, [pc, #304]	@ (801a70c <dwt_initialise+0x154>)
 801a5dc:	2200      	movs	r2, #0
 801a5de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  dw1000local.wait4resp = 0;
 801a5e2:	4b4a      	ldr	r3, [pc, #296]	@ (801a70c <dwt_initialise+0x154>)
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  dw1000local.sleep_mode = 0;
 801a5ea:	4b48      	ldr	r3, [pc, #288]	@ (801a70c <dwt_initialise+0x154>)
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	839a      	strh	r2, [r3, #28]

  dw1000local.dwt_txcallback = NULL;
 801a5f0:	4b46      	ldr	r3, [pc, #280]	@ (801a70c <dwt_initialise+0x154>)
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	635a      	str	r2, [r3, #52]	@ 0x34
  dw1000local.dwt_rxcallback = NULL;
 801a5f6:	4b45      	ldr	r3, [pc, #276]	@ (801a70c <dwt_initialise+0x154>)
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	639a      	str	r2, [r3, #56]	@ 0x38

  // Read and validate device ID return -1 if not recognised
  dw1000local.deviceID = dwt_readdevid();
 801a5fc:	f000 f88a 	bl	801a714 <dwt_readdevid>
 801a600:	4603      	mov	r3, r0
 801a602:	4a42      	ldr	r2, [pc, #264]	@ (801a70c <dwt_initialise+0x154>)
 801a604:	6013      	str	r3, [r2, #0]
  if (DWT_DEVICE_ID !=
      dw1000local.deviceID)  // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 801a606:	4b41      	ldr	r3, [pc, #260]	@ (801a70c <dwt_initialise+0x154>)
 801a608:	681b      	ldr	r3, [r3, #0]
  if (DWT_DEVICE_ID !=
 801a60a:	4a41      	ldr	r2, [pc, #260]	@ (801a710 <dwt_initialise+0x158>)
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d002      	beq.n	801a616 <dwt_initialise+0x5e>
  {
    return DWT_ERROR;
 801a610:	f04f 33ff 	mov.w	r3, #4294967295
 801a614:	e075      	b.n	801a702 <dwt_initialise+0x14a>
  }

  _dwt_enableclocks(
 801a616:	2000      	movs	r0, #0
 801a618:	f000 fd08 	bl	801b02c <_dwt_enableclocks>
      FORCE_SYS_XTI);  // NOTE: set system clock to XTI - this is necessary to
                       // make sure the values read by _dwt_otpread are reliable

  // Configure the CPLL lock detect
  dwt_writetodevice(EXT_SYNC_ID, EC_CTRL_OFFSET, 1, &plllockdetect);
 801a61c:	f107 030d 	add.w	r3, r7, #13
 801a620:	2201      	movs	r2, #1
 801a622:	2100      	movs	r1, #0
 801a624:	2024      	movs	r0, #36	@ 0x24
 801a626:	f000 fa6f 	bl	801ab08 <dwt_writetodevice>

  // Read OTP revision number
  otp_addr =
      _dwt_otpread(XTRIM_ADDRESS) &
 801a62a:	201e      	movs	r0, #30
 801a62c:	f000 fbfc 	bl	801ae28 <_dwt_otpread>
 801a630:	4603      	mov	r3, r0
  otp_addr =
 801a632:	82fb      	strh	r3, [r7, #22]
      0xffff;  // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
  dw1000local.otprev = (otp_addr >> 8) & 0xff;  // OTP revision is next byte
 801a634:	8afb      	ldrh	r3, [r7, #22]
 801a636:	0a1b      	lsrs	r3, r3, #8
 801a638:	b29b      	uxth	r3, r3
 801a63a:	b2da      	uxtb	r2, r3
 801a63c:	4b33      	ldr	r3, [pc, #204]	@ (801a70c <dwt_initialise+0x154>)
 801a63e:	739a      	strb	r2, [r3, #14]

  // Load LDO tune from OTP and kick it if there is a value actually programmed.
  ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 801a640:	2004      	movs	r0, #4
 801a642:	f000 fbf1 	bl	801ae28 <_dwt_otpread>
 801a646:	6138      	str	r0, [r7, #16]
  if ((ldo_tune & 0xFF) != 0) {
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d00f      	beq.n	801a670 <dwt_initialise+0xb8>
    uint8 ldok = OTP_SF_LDO_KICK;
 801a650:	2302      	movs	r3, #2
 801a652:	733b      	strb	r3, [r7, #12]
    // Kick LDO tune
    dwt_writetodevice(OTP_IF_ID, OTP_SF, 1, &ldok);  // Set load LDE kick bit
 801a654:	f107 030c 	add.w	r3, r7, #12
 801a658:	2201      	movs	r2, #1
 801a65a:	2112      	movs	r1, #18
 801a65c:	202d      	movs	r0, #45	@ 0x2d
 801a65e:	f000 fa53 	bl	801ab08 <dwt_writetodevice>
    dw1000local.sleep_mode |=
 801a662:	4b2a      	ldr	r3, [pc, #168]	@ (801a70c <dwt_initialise+0x154>)
 801a664:	8b9b      	ldrh	r3, [r3, #28]
 801a666:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801a66a:	b29a      	uxth	r2, r3
 801a66c:	4b27      	ldr	r3, [pc, #156]	@ (801a70c <dwt_initialise+0x154>)
 801a66e:	839a      	strh	r2, [r3, #28]
        AON_WCFG_ONW_LLDO;  // LDO tune must be kicked at wake-up
  }

  // Load Part and Lot ID from OTP
  dw1000local.partID = _dwt_otpread(PARTID_ADDRESS);
 801a670:	2006      	movs	r0, #6
 801a672:	f000 fbd9 	bl	801ae28 <_dwt_otpread>
 801a676:	4603      	mov	r3, r0
 801a678:	4a24      	ldr	r2, [pc, #144]	@ (801a70c <dwt_initialise+0x154>)
 801a67a:	6053      	str	r3, [r2, #4]
  dw1000local.lotID = _dwt_otpread(LOTID_ADDRESS);
 801a67c:	2007      	movs	r0, #7
 801a67e:	f000 fbd3 	bl	801ae28 <_dwt_otpread>
 801a682:	4603      	mov	r3, r0
 801a684:	4a21      	ldr	r2, [pc, #132]	@ (801a70c <dwt_initialise+0x154>)
 801a686:	6093      	str	r3, [r2, #8]

  // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but
  // that might not be the case in a custom design
  dw1000local.xtrim = otp_addr & 0x1F;
 801a688:	8afb      	ldrh	r3, [r7, #22]
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	f003 031f 	and.w	r3, r3, #31
 801a690:	b2da      	uxtb	r2, r3
 801a692:	4b1e      	ldr	r3, [pc, #120]	@ (801a70c <dwt_initialise+0x154>)
 801a694:	751a      	strb	r2, [r3, #20]
  if (!dw1000local
           .xtrim)  // A value of 0 means that the crystal has not been trimmed
 801a696:	4b1d      	ldr	r3, [pc, #116]	@ (801a70c <dwt_initialise+0x154>)
 801a698:	7d1b      	ldrb	r3, [r3, #20]
  if (!dw1000local
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d102      	bne.n	801a6a4 <dwt_initialise+0xec>
  {
    dw1000local.xtrim =
 801a69e:	4b1b      	ldr	r3, [pc, #108]	@ (801a70c <dwt_initialise+0x154>)
 801a6a0:	2210      	movs	r2, #16
 801a6a2:	751a      	strb	r2, [r3, #20]
        FS_XTALT_MIDRANGE;  // Set to mid-range if no calibration value inside
  }
  // Configure XTAL trim
  dwt_xtaltrim(dw1000local.xtrim);
 801a6a4:	4b19      	ldr	r3, [pc, #100]	@ (801a70c <dwt_initialise+0x154>)
 801a6a6:	7d1b      	ldrb	r3, [r3, #20]
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f000 febf 	bl	801b42c <dwt_xtaltrim>

  // Load leading edge detect code
  if (config & DWT_LOADUCODE) {
 801a6ae:	88fb      	ldrh	r3, [r7, #6]
 801a6b0:	f003 0301 	and.w	r3, r3, #1
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d009      	beq.n	801a6cc <dwt_initialise+0x114>
    _dwt_loaducodefromrom();
 801a6b8:	f000 fc26 	bl	801af08 <_dwt_loaducodefromrom>
    dw1000local.sleep_mode |=
 801a6bc:	4b13      	ldr	r3, [pc, #76]	@ (801a70c <dwt_initialise+0x154>)
 801a6be:	8b9b      	ldrh	r3, [r3, #28]
 801a6c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a6c4:	b29a      	uxth	r2, r3
 801a6c6:	4b11      	ldr	r3, [pc, #68]	@ (801a70c <dwt_initialise+0x154>)
 801a6c8:	839a      	strh	r2, [r3, #28]
 801a6ca:	e00f      	b.n	801a6ec <dwt_initialise+0x134>
        AON_WCFG_ONW_LLDE;  // microcode must be loaded at wake-up
  } else                    // Should disable the LDERUN enable bit in 0x36, 0x4
  {
    uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET + 1);
 801a6cc:	2105      	movs	r1, #5
 801a6ce:	2036      	movs	r0, #54	@ 0x36
 801a6d0:	f000 faf3 	bl	801acba <dwt_read16bitoffsetreg>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	81fb      	strh	r3, [r7, #14]
    rega &= 0xFDFF;  // Clear LDERUN bit
 801a6d8:	89fb      	ldrh	r3, [r7, #14]
 801a6da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a6de:	81fb      	strh	r3, [r7, #14]
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET + 1, rega);
 801a6e0:	89fb      	ldrh	r3, [r7, #14]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	2105      	movs	r1, #5
 801a6e6:	2036      	movs	r0, #54	@ 0x36
 801a6e8:	f000 fb07 	bl	801acfa <dwt_write16bitoffsetreg>
  }

  _dwt_enableclocks(ENABLE_ALL_SEQ);  // Enable clocks for sequencing
 801a6ec:	2001      	movs	r0, #1
 801a6ee:	f000 fc9d 	bl	801b02c <_dwt_enableclocks>

  // Read system register / store local copy
  dw1000local.sysCFGreg =
      dwt_read32bitreg(SYS_CFG_ID);  // Read sysconfig register
 801a6f2:	2100      	movs	r1, #0
 801a6f4:	2004      	movs	r0, #4
 801a6f6:	f000 fab4 	bl	801ac62 <dwt_read32bitoffsetreg>
 801a6fa:	4603      	mov	r3, r0
  dw1000local.sysCFGreg =
 801a6fc:	4a03      	ldr	r2, [pc, #12]	@ (801a70c <dwt_initialise+0x154>)
 801a6fe:	6193      	str	r3, [r2, #24]

  return DWT_SUCCESS;
 801a700:	2300      	movs	r3, #0

}  // end dwt_initialise()
 801a702:	4618      	mov	r0, r3
 801a704:	3718      	adds	r7, #24
 801a706:	46bd      	mov	sp, r7
 801a708:	bd80      	pop	{r7, pc}
 801a70a:	bf00      	nop
 801a70c:	24023960 	.word	0x24023960
 801a710:	deca0130 	.word	0xdeca0130

0801a714 <dwt_readdevid>:
 *
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void) { return dwt_read32bitoffsetreg(DEV_ID_ID, 0); }
 801a714:	b580      	push	{r7, lr}
 801a716:	af00      	add	r7, sp, #0
 801a718:	2100      	movs	r1, #0
 801a71a:	2000      	movs	r0, #0
 801a71c:	f000 faa1 	bl	801ac62 <dwt_read32bitoffsetreg>
 801a720:	4603      	mov	r3, r0
 801a722:	4618      	mov	r0, r3
 801a724:	bd80      	pop	{r7, pc}
	...

0801a728 <dwt_configure>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_configure(dwt_config_t *config) {
 801a728:	b580      	push	{r7, lr}
 801a72a:	b086      	sub	sp, #24
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
  uint8 nsSfd_result = 0;
 801a730:	2300      	movs	r3, #0
 801a732:	75fb      	strb	r3, [r7, #23]
  uint8 useDWnsSFD = 0;
 801a734:	2300      	movs	r3, #0
 801a736:	75bb      	strb	r3, [r7, #22]
  uint8 chan = config->chan;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	74fb      	strb	r3, [r7, #19]
  uint32 regval;
  uint16 reg16 = lde_replicaCoeff[config->rxCode];
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	795b      	ldrb	r3, [r3, #5]
 801a742:	461a      	mov	r2, r3
 801a744:	4ba1      	ldr	r3, [pc, #644]	@ (801a9cc <dwt_configure+0x2a4>)
 801a746:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a74a:	82bb      	strh	r3, [r7, #20]
  uint8 prfIndex = dw1000local.prfIndex = config->prf - DWT_PRF_16M;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	785b      	ldrb	r3, [r3, #1]
 801a750:	3b01      	subs	r3, #1
 801a752:	4a9f      	ldr	r2, [pc, #636]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a754:	6313      	str	r3, [r2, #48]	@ 0x30
 801a756:	4b9e      	ldr	r3, [pc, #632]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a75a:	74bb      	strb	r3, [r7, #18]
  uint8 bw =
      ((chan == 4) || (chan == 7)) ? 1 : 0;  // Select wide or narrow band
 801a75c:	7cfb      	ldrb	r3, [r7, #19]
 801a75e:	2b04      	cmp	r3, #4
 801a760:	d002      	beq.n	801a768 <dwt_configure+0x40>
 801a762:	7cfb      	ldrb	r3, [r7, #19]
 801a764:	2b07      	cmp	r3, #7
 801a766:	d101      	bne.n	801a76c <dwt_configure+0x44>
 801a768:	2301      	movs	r3, #1
 801a76a:	e000      	b.n	801a76e <dwt_configure+0x46>
 801a76c:	2300      	movs	r3, #0
  uint8 bw =
 801a76e:	747b      	strb	r3, [r7, #17]

  dw1000local.chan = config->chan;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	781a      	ldrb	r2, [r3, #0]
 801a774:	4b96      	ldr	r3, [pc, #600]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a776:	731a      	strb	r2, [r3, #12]
    return DWT_ERROR;
  }
#endif

  // For 110 kbps we need a special setup
  if (DWT_BR_110K == config->dataRate) {
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	79db      	ldrb	r3, [r3, #7]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d109      	bne.n	801a794 <dwt_configure+0x6c>
    dw1000local.sysCFGreg |= SYS_CFG_RXM110K;
 801a780:	4b93      	ldr	r3, [pc, #588]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a782:	699b      	ldr	r3, [r3, #24]
 801a784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801a788:	4a91      	ldr	r2, [pc, #580]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a78a:	6193      	str	r3, [r2, #24]
    reg16 >>= 3;  // lde_replicaCoeff must be divided by 8
 801a78c:	8abb      	ldrh	r3, [r7, #20]
 801a78e:	08db      	lsrs	r3, r3, #3
 801a790:	82bb      	strh	r3, [r7, #20]
 801a792:	e005      	b.n	801a7a0 <dwt_configure+0x78>
  } else {
    dw1000local.sysCFGreg &= (~SYS_CFG_RXM110K);
 801a794:	4b8e      	ldr	r3, [pc, #568]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a796:	699b      	ldr	r3, [r3, #24]
 801a798:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 801a79c:	4a8c      	ldr	r2, [pc, #560]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a79e:	6193      	str	r3, [r2, #24]
  }

  dw1000local.longFrames = config->phrMode;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	7a1a      	ldrb	r2, [r3, #8]
 801a7a4:	4b8a      	ldr	r3, [pc, #552]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a7a6:	735a      	strb	r2, [r3, #13]

  dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << 16));
 801a7a8:	4b89      	ldr	r3, [pc, #548]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a7aa:	699a      	ldr	r2, [r3, #24]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	7a1b      	ldrb	r3, [r3, #8]
 801a7b0:	041b      	lsls	r3, r3, #16
 801a7b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801a7b6:	4313      	orrs	r3, r2
 801a7b8:	4a85      	ldr	r2, [pc, #532]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a7ba:	6193      	str	r3, [r2, #24]

  dwt_write32bitreg(SYS_CFG_ID, dw1000local.sysCFGreg);
 801a7bc:	4b84      	ldr	r3, [pc, #528]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a7be:	699b      	ldr	r3, [r3, #24]
 801a7c0:	461a      	mov	r2, r3
 801a7c2:	2100      	movs	r1, #0
 801a7c4:	2004      	movs	r0, #4
 801a7c6:	f000 fab6 	bl	801ad36 <dwt_write32bitoffsetreg>
  // Set the lde_replicaCoeff
  dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16);
 801a7ca:	8abb      	ldrh	r3, [r7, #20]
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	f642 0104 	movw	r1, #10244	@ 0x2804
 801a7d2:	202e      	movs	r0, #46	@ 0x2e
 801a7d4:	f000 fa91 	bl	801acfa <dwt_write16bitoffsetreg>

  _dwt_configlde(prfIndex);
 801a7d8:	7cbb      	ldrb	r3, [r7, #18]
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f000 fb70 	bl	801aec0 <_dwt_configlde>

  // Configure PLL2/RF PLL block CFG (for a given channel)
  dwt_writetodevice(FS_CTRL_ID, FS_PLLCFG_OFFSET, 5,
                    &pll2_config[chan_idx[chan]][0]);
 801a7e0:	7cfb      	ldrb	r3, [r7, #19]
 801a7e2:	4a7c      	ldr	r2, [pc, #496]	@ (801a9d4 <dwt_configure+0x2ac>)
 801a7e4:	5cd3      	ldrb	r3, [r2, r3]
 801a7e6:	461a      	mov	r2, r3
  dwt_writetodevice(FS_CTRL_ID, FS_PLLCFG_OFFSET, 5,
 801a7e8:	4613      	mov	r3, r2
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	4413      	add	r3, r2
 801a7ee:	4a7a      	ldr	r2, [pc, #488]	@ (801a9d8 <dwt_configure+0x2b0>)
 801a7f0:	4413      	add	r3, r2
 801a7f2:	2205      	movs	r2, #5
 801a7f4:	2107      	movs	r1, #7
 801a7f6:	202b      	movs	r0, #43	@ 0x2b
 801a7f8:	f000 f986 	bl	801ab08 <dwt_writetodevice>

  // Configure RF RX blocks (for specified channel/bandwidth)
  dwt_writetodevice(RF_CONF_ID, RF_RXCTRLH_OFFSET, 1, &rx_config[bw]);
 801a7fc:	7c7b      	ldrb	r3, [r7, #17]
 801a7fe:	4a77      	ldr	r2, [pc, #476]	@ (801a9dc <dwt_configure+0x2b4>)
 801a800:	4413      	add	r3, r2
 801a802:	2201      	movs	r2, #1
 801a804:	210b      	movs	r1, #11
 801a806:	2028      	movs	r0, #40	@ 0x28
 801a808:	f000 f97e 	bl	801ab08 <dwt_writetodevice>

  // Configure RF TX blocks (for specified channel and PRF)
  // Configure RF TX control
  dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET,
                          tx_config[chan_idx[chan]]);
 801a80c:	7cfb      	ldrb	r3, [r7, #19]
 801a80e:	4a71      	ldr	r2, [pc, #452]	@ (801a9d4 <dwt_configure+0x2ac>)
 801a810:	5cd3      	ldrb	r3, [r2, r3]
 801a812:	461a      	mov	r2, r3
 801a814:	4b72      	ldr	r3, [pc, #456]	@ (801a9e0 <dwt_configure+0x2b8>)
 801a816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET,
 801a81a:	461a      	mov	r2, r3
 801a81c:	210c      	movs	r1, #12
 801a81e:	2028      	movs	r0, #40	@ 0x28
 801a820:	f000 fa89 	bl	801ad36 <dwt_write32bitoffsetreg>

  // Configure the baseband parameters (for specified PRF, bit rate, PAC, and
  // SFD settings) DTUNE0
  dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET,
                          sftsh[config->dataRate][config->nsSFD]);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	79db      	ldrb	r3, [r3, #7]
 801a828:	4618      	mov	r0, r3
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	799b      	ldrb	r3, [r3, #6]
 801a82e:	4619      	mov	r1, r3
 801a830:	4a6c      	ldr	r2, [pc, #432]	@ (801a9e4 <dwt_configure+0x2bc>)
 801a832:	0043      	lsls	r3, r0, #1
 801a834:	440b      	add	r3, r1
 801a836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET,
 801a83a:	461a      	mov	r2, r3
 801a83c:	2102      	movs	r1, #2
 801a83e:	2027      	movs	r0, #39	@ 0x27
 801a840:	f000 fa5b 	bl	801acfa <dwt_write16bitoffsetreg>

  // DTUNE1
  dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 801a844:	7cbb      	ldrb	r3, [r7, #18]
 801a846:	4a68      	ldr	r2, [pc, #416]	@ (801a9e8 <dwt_configure+0x2c0>)
 801a848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a84c:	461a      	mov	r2, r3
 801a84e:	2104      	movs	r1, #4
 801a850:	2027      	movs	r0, #39	@ 0x27
 801a852:	f000 fa52 	bl	801acfa <dwt_write16bitoffsetreg>

  if (config->dataRate == DWT_BR_110K) {
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	79db      	ldrb	r3, [r3, #7]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d105      	bne.n	801a86a <dwt_configure+0x142>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, 0x64);
 801a85e:	2264      	movs	r2, #100	@ 0x64
 801a860:	2106      	movs	r1, #6
 801a862:	2027      	movs	r0, #39	@ 0x27
 801a864:	f000 fa49 	bl	801acfa <dwt_write16bitoffsetreg>
 801a868:	e020      	b.n	801a8ac <dwt_configure+0x184>
  } else {
    if (config->txPreambLength == DWT_PLEN_64) {
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	789b      	ldrb	r3, [r3, #2]
 801a86e:	2b04      	cmp	r3, #4
 801a870:	d10e      	bne.n	801a890 <dwt_configure+0x168>
      uint8 temp = 0x10;
 801a872:	2310      	movs	r3, #16
 801a874:	72fb      	strb	r3, [r7, #11]
      dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, 0x10);
 801a876:	2210      	movs	r2, #16
 801a878:	2106      	movs	r1, #6
 801a87a:	2027      	movs	r0, #39	@ 0x27
 801a87c:	f000 fa3d 	bl	801acfa <dwt_write16bitoffsetreg>
      dwt_writetodevice(DRX_CONF_ID, 0x26, 1, &temp);
 801a880:	f107 030b 	add.w	r3, r7, #11
 801a884:	2201      	movs	r2, #1
 801a886:	2126      	movs	r1, #38	@ 0x26
 801a888:	2027      	movs	r0, #39	@ 0x27
 801a88a:	f000 f93d 	bl	801ab08 <dwt_writetodevice>
 801a88e:	e00d      	b.n	801a8ac <dwt_configure+0x184>
    } else {
      uint8 temp = 0x28;
 801a890:	2328      	movs	r3, #40	@ 0x28
 801a892:	72bb      	strb	r3, [r7, #10]
      dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, 0x20);
 801a894:	2220      	movs	r2, #32
 801a896:	2106      	movs	r1, #6
 801a898:	2027      	movs	r0, #39	@ 0x27
 801a89a:	f000 fa2e 	bl	801acfa <dwt_write16bitoffsetreg>
      dwt_writetodevice(DRX_CONF_ID, 0x26, 1, &temp);
 801a89e:	f107 030a 	add.w	r3, r7, #10
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	2126      	movs	r1, #38	@ 0x26
 801a8a6:	2027      	movs	r0, #39	@ 0x27
 801a8a8:	f000 f92e 	bl	801ab08 <dwt_writetodevice>
    }
  }

  // DTUNE2
  dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET,
 801a8ac:	7cbb      	ldrb	r3, [r7, #18]
                          digital_bb_config[prfIndex][config->rxPAC]);
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	78d2      	ldrb	r2, [r2, #3]
 801a8b2:	4611      	mov	r1, r2
 801a8b4:	4a4d      	ldr	r2, [pc, #308]	@ (801a9ec <dwt_configure+0x2c4>)
 801a8b6:	009b      	lsls	r3, r3, #2
 801a8b8:	440b      	add	r3, r1
 801a8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET,
 801a8be:	461a      	mov	r2, r3
 801a8c0:	2108      	movs	r1, #8
 801a8c2:	2027      	movs	r0, #39	@ 0x27
 801a8c4:	f000 fa37 	bl	801ad36 <dwt_write32bitoffsetreg>

  // DTUNE3 (SFD timeout)
  // Don't allow 0 - SFD timeout will always be enabled
  if (config->sfdTO == 0) {
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d108      	bne.n	801a8e6 <dwt_configure+0x1be>
    config->sfdTO = DWT_SFDTOC_DEF;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 801a8dc:	725a      	strb	r2, [r3, #9]
 801a8de:	2200      	movs	r2, #0
 801a8e0:	f042 0210 	orr.w	r2, r2, #16
 801a8e4:	729a      	strb	r2, [r3, #10]
  }
  dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	461a      	mov	r2, r3
 801a8f0:	2120      	movs	r1, #32
 801a8f2:	2027      	movs	r0, #39	@ 0x27
 801a8f4:	f000 fa01 	bl	801acfa <dwt_write16bitoffsetreg>

  // Configure AGC parameters
  dwt_write32bitoffsetreg(AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 801a8f8:	4b3d      	ldr	r3, [pc, #244]	@ (801a9f0 <dwt_configure+0x2c8>)
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	210c      	movs	r1, #12
 801a900:	2023      	movs	r0, #35	@ 0x23
 801a902:	f000 fa18 	bl	801ad36 <dwt_write32bitoffsetreg>
  dwt_write16bitoffsetreg(AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 801a906:	7cbb      	ldrb	r3, [r7, #18]
 801a908:	4a39      	ldr	r2, [pc, #228]	@ (801a9f0 <dwt_configure+0x2c8>)
 801a90a:	005b      	lsls	r3, r3, #1
 801a90c:	4413      	add	r3, r2
 801a90e:	889b      	ldrh	r3, [r3, #4]
 801a910:	461a      	mov	r2, r3
 801a912:	2104      	movs	r1, #4
 801a914:	2023      	movs	r0, #35	@ 0x23
 801a916:	f000 f9f0 	bl	801acfa <dwt_write16bitoffsetreg>

  // Set (non-standard) user SFD for improved performance,
  if (config->nsSFD) {
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	799b      	ldrb	r3, [r3, #6]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d00d      	beq.n	801a93e <dwt_configure+0x216>
    // Write non standard (DW) SFD length
    dwt_writetodevice(USR_SFD_ID, 0x00, 1, &dwnsSFDlen[config->dataRate]);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	79db      	ldrb	r3, [r3, #7]
 801a926:	461a      	mov	r2, r3
 801a928:	4b32      	ldr	r3, [pc, #200]	@ (801a9f4 <dwt_configure+0x2cc>)
 801a92a:	4413      	add	r3, r2
 801a92c:	2201      	movs	r2, #1
 801a92e:	2100      	movs	r1, #0
 801a930:	2021      	movs	r0, #33	@ 0x21
 801a932:	f000 f8e9 	bl	801ab08 <dwt_writetodevice>
    nsSfd_result = 3;
 801a936:	2303      	movs	r3, #3
 801a938:	75fb      	strb	r3, [r7, #23]
    useDWnsSFD = 1;
 801a93a:	2301      	movs	r3, #1
 801a93c:	75bb      	strb	r3, [r7, #22]
  }
  regval = (CHAN_CTRL_TX_CHAN_MASK &
            (chan << CHAN_CTRL_TX_CHAN_SHIFT)) |  // Transmit Channel
 801a93e:	7cfb      	ldrb	r3, [r7, #19]
  regval = (CHAN_CTRL_TX_CHAN_MASK &
 801a940:	f003 020f 	and.w	r2, r3, #15
           (CHAN_CTRL_RX_CHAN_MASK &
            (chan << CHAN_CTRL_RX_CHAN_SHIFT)) |  // Receive Channel
 801a944:	7cfb      	ldrb	r3, [r7, #19]
 801a946:	011b      	lsls	r3, r3, #4
           (CHAN_CTRL_RX_CHAN_MASK &
 801a948:	b2db      	uxtb	r3, r3
            (chan << CHAN_CTRL_TX_CHAN_SHIFT)) |  // Transmit Channel
 801a94a:	431a      	orrs	r2, r3
           (CHAN_CTRL_RXFPRF_MASK &
            (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) |  // RX PRF
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	785b      	ldrb	r3, [r3, #1]
 801a950:	049b      	lsls	r3, r3, #18
           (CHAN_CTRL_RXFPRF_MASK &
 801a952:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
            (chan << CHAN_CTRL_RX_CHAN_SHIFT)) |  // Receive Channel
 801a956:	431a      	orrs	r2, r3
           ((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD) &
            (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) |  // nsSFD enable RX&TX
 801a958:	7dfb      	ldrb	r3, [r7, #23]
 801a95a:	051b      	lsls	r3, r3, #20
           ((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD) &
 801a95c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
            (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) |  // RX PRF
 801a960:	431a      	orrs	r2, r3
           (CHAN_CTRL_DWSFD &
            (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) |  // Use DW nsSFD
 801a962:	7dbb      	ldrb	r3, [r7, #22]
 801a964:	045b      	lsls	r3, r3, #17
           (CHAN_CTRL_DWSFD &
 801a966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
            (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) |  // nsSFD enable RX&TX
 801a96a:	431a      	orrs	r2, r3
           (CHAN_CTRL_TX_PCOD_MASK &
            (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) |  // TX Preamble Code
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	791b      	ldrb	r3, [r3, #4]
 801a970:	059b      	lsls	r3, r3, #22
           (CHAN_CTRL_TX_PCOD_MASK &
 801a972:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
            (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) |  // Use DW nsSFD
 801a976:	431a      	orrs	r2, r3
           (CHAN_CTRL_RX_PCOD_MASK &
            (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT));  // RX Preamble Code
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	795b      	ldrb	r3, [r3, #5]
           (CHAN_CTRL_RX_PCOD_MASK &
 801a97c:	06db      	lsls	r3, r3, #27
  regval = (CHAN_CTRL_TX_CHAN_MASK &
 801a97e:	4313      	orrs	r3, r2
 801a980:	60fb      	str	r3, [r7, #12]

  dwt_write32bitreg(CHAN_CTRL_ID, regval);
 801a982:	68fa      	ldr	r2, [r7, #12]
 801a984:	2100      	movs	r1, #0
 801a986:	201f      	movs	r0, #31
 801a988:	f000 f9d5 	bl	801ad36 <dwt_write32bitoffsetreg>

  // Set up TX Preamble Size and TX PRF
  // Set up TX Ranging Bit and Data Rate
  dw1000local.txFCTRL = (config->txPreambLength | config->prf) << 16;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	789a      	ldrb	r2, [r3, #2]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	785b      	ldrb	r3, [r3, #1]
 801a994:	4313      	orrs	r3, r2
 801a996:	b2db      	uxtb	r3, r3
 801a998:	041b      	lsls	r3, r3, #16
 801a99a:	4a0d      	ldr	r2, [pc, #52]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a99c:	6113      	str	r3, [r2, #16]
  dw1000local.txFCTRL |= (config->dataRate << TX_FCTRL_TXBR_SHFT) |
 801a99e:	4b0c      	ldr	r3, [pc, #48]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a9a0:	691a      	ldr	r2, [r3, #16]
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	79db      	ldrb	r3, [r3, #7]
 801a9a6:	035b      	lsls	r3, r3, #13
 801a9a8:	4313      	orrs	r3, r2
 801a9aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801a9ae:	4a08      	ldr	r2, [pc, #32]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a9b0:	6113      	str	r3, [r2, #16]
                         TX_FCTRL_TR;  // Always set ranging bit !!!
  dwt_write32bitoffsetreg(TX_FCTRL_ID, 0, dw1000local.txFCTRL);
 801a9b2:	4b07      	ldr	r3, [pc, #28]	@ (801a9d0 <dwt_configure+0x2a8>)
 801a9b4:	691b      	ldr	r3, [r3, #16]
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	2100      	movs	r1, #0
 801a9ba:	2008      	movs	r0, #8
 801a9bc:	f000 f9bb 	bl	801ad36 <dwt_write32bitoffsetreg>

  return DWT_SUCCESS;
 801a9c0:	2300      	movs	r3, #0

}  // end dwt_configure()
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	3718      	adds	r7, #24
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	0801ef94 	.word	0x0801ef94
 801a9d0:	24023960 	.word	0x24023960
 801a9d4:	0801ef14 	.word	0x0801ef14
 801a9d8:	0801ef34 	.word	0x0801ef34
 801a9dc:	0801ef54 	.word	0x0801ef54
 801a9e0:	0801ef1c 	.word	0x0801ef1c
 801a9e4:	0801ef64 	.word	0x0801ef64
 801a9e8:	0801ef70 	.word	0x0801ef70
 801a9ec:	0801ef74 	.word	0x0801ef74
 801a9f0:	0801ef58 	.word	0x0801ef58
 801a9f4:	0801ef60 	.word	0x0801ef60

0801a9f8 <dwt_setrxantennadelay>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay) {
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b082      	sub	sp, #8
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	4603      	mov	r3, r0
 801aa00:	80fb      	strh	r3, [r7, #6]
  // Set the RX antenna delay for auto TX timestamp adjustment
  dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 801aa02:	88fb      	ldrh	r3, [r7, #6]
 801aa04:	461a      	mov	r2, r3
 801aa06:	f641 0104 	movw	r1, #6148	@ 0x1804
 801aa0a:	202e      	movs	r0, #46	@ 0x2e
 801aa0c:	f000 f975 	bl	801acfa <dwt_write16bitoffsetreg>
}
 801aa10:	bf00      	nop
 801aa12:	3708      	adds	r7, #8
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}

0801aa18 <dwt_settxantennadelay>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay) {
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	4603      	mov	r3, r0
 801aa20:	80fb      	strh	r3, [r7, #6]
  // Set the TX antenna delay for auto TX timestamp adjustment
  dwt_write16bitoffsetreg(TX_ANTD_ID, 0x0, txDelay);
 801aa22:	88fb      	ldrh	r3, [r7, #6]
 801aa24:	461a      	mov	r2, r3
 801aa26:	2100      	movs	r1, #0
 801aa28:	2018      	movs	r0, #24
 801aa2a:	f000 f966 	bl	801acfa <dwt_write16bitoffsetreg>
}
 801aa2e:	bf00      	nop
 801aa30:	3708      	adds	r7, #8
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}

0801aa36 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes,
                    uint16 txBufferOffset) {
 801aa36:	b580      	push	{r7, lr}
 801aa38:	b082      	sub	sp, #8
 801aa3a:	af00      	add	r7, sp, #0
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	6039      	str	r1, [r7, #0]
 801aa40:	80fb      	strh	r3, [r7, #6]
 801aa42:	4613      	mov	r3, r2
 801aa44:	80bb      	strh	r3, [r7, #4]
  if (txFrameLength < 2) {
    return DWT_ERROR;
  }
#endif

  if ((txBufferOffset + txFrameLength) > 1024) {
 801aa46:	88ba      	ldrh	r2, [r7, #4]
 801aa48:	88fb      	ldrh	r3, [r7, #6]
 801aa4a:	4413      	add	r3, r2
 801aa4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aa50:	dd02      	ble.n	801aa58 <dwt_writetxdata+0x22>
    return DWT_ERROR;
 801aa52:	f04f 33ff 	mov.w	r3, #4294967295
 801aa56:	e008      	b.n	801aa6a <dwt_writetxdata+0x34>
  }
  // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
  dwt_writetodevice(TX_BUFFER_ID, txBufferOffset, txFrameLength - 2,
 801aa58:	88fb      	ldrh	r3, [r7, #6]
 801aa5a:	3b02      	subs	r3, #2
 801aa5c:	461a      	mov	r2, r3
 801aa5e:	88b9      	ldrh	r1, [r7, #4]
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	2009      	movs	r0, #9
 801aa64:	f000 f850 	bl	801ab08 <dwt_writetodevice>
                    txFrameBytes);

  return DWT_SUCCESS;
 801aa68:	2300      	movs	r3, #0
}  // end dwt_writetxdata()
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	3708      	adds	r7, #8
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	bd80      	pop	{r7, pc}
	...

0801aa74 <dwt_writetxfctrl>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset) {
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b084      	sub	sp, #16
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	460a      	mov	r2, r1
 801aa7e:	80fb      	strh	r3, [r7, #6]
 801aa80:	4613      	mov	r3, r2
 801aa82:	80bb      	strh	r3, [r7, #4]
  }
#endif

  // Write the frame length to the TX frame control register
  // dw1000local.txFCTRL has kept configured bit rate information
  uint32 reg32 = dw1000local.txFCTRL | txFrameLength | (txBufferOffset << 22);
 801aa84:	4b08      	ldr	r3, [pc, #32]	@ (801aaa8 <dwt_writetxfctrl+0x34>)
 801aa86:	691a      	ldr	r2, [r3, #16]
 801aa88:	88fb      	ldrh	r3, [r7, #6]
 801aa8a:	431a      	orrs	r2, r3
 801aa8c:	88bb      	ldrh	r3, [r7, #4]
 801aa8e:	059b      	lsls	r3, r3, #22
 801aa90:	4313      	orrs	r3, r2
 801aa92:	60fb      	str	r3, [r7, #12]
  dwt_write32bitoffsetreg(TX_FCTRL_ID, 0, reg32);
 801aa94:	68fa      	ldr	r2, [r7, #12]
 801aa96:	2100      	movs	r1, #0
 801aa98:	2008      	movs	r0, #8
 801aa9a:	f000 f94c 	bl	801ad36 <dwt_write32bitoffsetreg>

  return DWT_SUCCESS;
 801aa9e:	2300      	movs	r3, #0

}  // end dwt_writetxfctrl()
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	3710      	adds	r7, #16
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	24023960 	.word	0x24023960

0801aaac <dwt_readrxdata>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset) {
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	460b      	mov	r3, r1
 801aab6:	807b      	strh	r3, [r7, #2]
 801aab8:	4613      	mov	r3, r2
 801aaba:	803b      	strh	r3, [r7, #0]
  dwt_readfromdevice(RX_BUFFER_ID, rxBufferOffset, length, buffer);
 801aabc:	887a      	ldrh	r2, [r7, #2]
 801aabe:	8839      	ldrh	r1, [r7, #0]
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2011      	movs	r0, #17
 801aac4:	f000 f878 	bl	801abb8 <dwt_readfromdevice>
}
 801aac8:	bf00      	nop
 801aaca:	3708      	adds	r7, #8
 801aacc:	46bd      	mov	sp, r7
 801aace:	bd80      	pop	{r7, pc}

0801aad0 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the
 * function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 *timestamp) {
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
  dwt_readfromdevice(TX_TIME_ID, 0, TX_TIME_TX_STAMP_LEN,
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	2205      	movs	r2, #5
 801aadc:	2100      	movs	r1, #0
 801aade:	2017      	movs	r0, #23
 801aae0:	f000 f86a 	bl	801abb8 <dwt_readfromdevice>
                     timestamp);  // Read bytes directly into buffer
}
 801aae4:	bf00      	nop
 801aae6:	3708      	adds	r7, #8
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the
 * function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 *timestamp) {
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b082      	sub	sp, #8
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
  dwt_readfromdevice(RX_TIME_ID, 0, RX_TIME_RX_STAMP_LEN,
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	2205      	movs	r2, #5
 801aaf8:	2100      	movs	r1, #0
 801aafa:	2015      	movs	r0, #21
 801aafc:	f000 f85c 	bl	801abb8 <dwt_readfromdevice>
                     timestamp);  // Get the adjusted time of arrival
}
 801ab00:	bf00      	nop
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <dwt_writetodevice>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetodevice(uint16 recordNumber, uint16 index, uint32 length,
                      const uint8 *buffer) {
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b086      	sub	sp, #24
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60ba      	str	r2, [r7, #8]
 801ab10:	607b      	str	r3, [r7, #4]
 801ab12:	4603      	mov	r3, r0
 801ab14:	81fb      	strh	r3, [r7, #14]
 801ab16:	460b      	mov	r3, r1
 801ab18:	81bb      	strh	r3, [r7, #12]
  uint8 header[3];  // Buffer to compose header in
  int cnt = 0;      // Counter for length of header
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	617b      	str	r3, [r7, #20]
  }
#endif

  // Write message header selecting WRITE operation and addresses as appropriate
  // (this is one to three bytes long)
  if (index == 0)  // For index of 0, no sub-index is required
 801ab1e:	89bb      	ldrh	r3, [r7, #12]
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d10c      	bne.n	801ab3e <dwt_writetodevice+0x36>
  {
    header[cnt++] =
 801ab24:	89fb      	ldrh	r3, [r7, #14]
 801ab26:	b2da      	uxtb	r2, r3
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	1c59      	adds	r1, r3, #1
 801ab2c:	6179      	str	r1, [r7, #20]
 801ab2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801ab32:	b2d2      	uxtb	r2, r2
 801ab34:	3318      	adds	r3, #24
 801ab36:	443b      	add	r3, r7
 801ab38:	f803 2c08 	strb.w	r2, [r3, #-8]
 801ab3c:	e02f      	b.n	801ab9e <dwt_writetodevice+0x96>
    }
    if ((index + length) > 0x7FFF) {
      return DWT_ERROR;  // Sub-addressable area is limited to 15-bits.
    }
#endif
    header[cnt++] =
 801ab3e:	89fb      	ldrh	r3, [r7, #14]
 801ab40:	b2da      	uxtb	r2, r3
 801ab42:	697b      	ldr	r3, [r7, #20]
 801ab44:	1c59      	adds	r1, r3, #1
 801ab46:	6179      	str	r1, [r7, #20]
 801ab48:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 801ab4c:	b2d2      	uxtb	r2, r2
 801ab4e:	3318      	adds	r3, #24
 801ab50:	443b      	add	r3, r7
 801ab52:	f803 2c08 	strb.w	r2, [r3, #-8]
        0xC0 | recordNumber;  // Bit-7 is WRITE operation, bit-6 one=sub-address
                              // follows, bits 5-0 is reg file id

    if (index <= 127)  // For non-zero index < 127, just a single sub-index byte
 801ab56:	89bb      	ldrh	r3, [r7, #12]
 801ab58:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab5a:	d809      	bhi.n	801ab70 <dwt_writetodevice+0x68>
                       // is required
    {
      header[cnt++] =
 801ab5c:	697b      	ldr	r3, [r7, #20]
 801ab5e:	1c5a      	adds	r2, r3, #1
 801ab60:	617a      	str	r2, [r7, #20]
          (uint8)index;  // Bit-7 zero means no extension, bits 6-0 is index.
 801ab62:	89ba      	ldrh	r2, [r7, #12]
 801ab64:	b2d2      	uxtb	r2, r2
      header[cnt++] =
 801ab66:	3318      	adds	r3, #24
 801ab68:	443b      	add	r3, r7
 801ab6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 801ab6e:	e016      	b.n	801ab9e <dwt_writetodevice+0x96>
    } else {
      header[cnt++] =
          0x80 | (uint8)(index);  // Bit-7 one means extended index, bits 6-0 is
 801ab70:	89bb      	ldrh	r3, [r7, #12]
 801ab72:	b2da      	uxtb	r2, r3
      header[cnt++] =
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	1c59      	adds	r1, r3, #1
 801ab78:	6179      	str	r1, [r7, #20]
 801ab7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801ab7e:	b2d2      	uxtb	r2, r2
 801ab80:	3318      	adds	r3, #24
 801ab82:	443b      	add	r3, r7
 801ab84:	f803 2c08 	strb.w	r2, [r3, #-8]
                                  // low seven bits of index.
      header[cnt++] =
          (uint8)(index >> 7);  // 8-bit value = high eight bits of index.
 801ab88:	89bb      	ldrh	r3, [r7, #12]
 801ab8a:	09db      	lsrs	r3, r3, #7
 801ab8c:	b299      	uxth	r1, r3
      header[cnt++] =
 801ab8e:	697b      	ldr	r3, [r7, #20]
 801ab90:	1c5a      	adds	r2, r3, #1
 801ab92:	617a      	str	r2, [r7, #20]
          (uint8)(index >> 7);  // 8-bit value = high eight bits of index.
 801ab94:	b2ca      	uxtb	r2, r1
      header[cnt++] =
 801ab96:	3318      	adds	r3, #24
 801ab98:	443b      	add	r3, r7
 801ab9a:	f803 2c08 	strb.w	r2, [r3, #-8]
    }
  }

  // Write it to the SPI
  return writetospi(cnt, header, length, buffer);
 801ab9e:	697b      	ldr	r3, [r7, #20]
 801aba0:	b298      	uxth	r0, r3
 801aba2:	f107 0110 	add.w	r1, r7, #16
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	68ba      	ldr	r2, [r7, #8]
 801abaa:	f7e5 ff1f 	bl	80009ec <writetospi>
 801abae:	4603      	mov	r3, r0

}  // end dwt_writetodevice()
 801abb0:	4618      	mov	r0, r3
 801abb2:	3718      	adds	r7, #24
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}

0801abb8 <dwt_readfromdevice>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_readfromdevice(uint16 recordNumber, uint16 index, uint32 length,
                       uint8 *buffer) {
 801abb8:	b580      	push	{r7, lr}
 801abba:	b086      	sub	sp, #24
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	60ba      	str	r2, [r7, #8]
 801abc0:	607b      	str	r3, [r7, #4]
 801abc2:	4603      	mov	r3, r0
 801abc4:	81fb      	strh	r3, [r7, #14]
 801abc6:	460b      	mov	r3, r1
 801abc8:	81bb      	strh	r3, [r7, #12]
  uint8 header[3];  // Buffer to compose header in
  int cnt = 0;      // Counter for length of header
 801abca:	2300      	movs	r3, #0
 801abcc:	617b      	str	r3, [r7, #20]
  }
#endif

  // Write message header selecting READ operation and addresses as appropriate
  // (this is one to three bytes long)
  if (index == 0)  // For index of 0, no sub-index is required
 801abce:	89bb      	ldrh	r3, [r7, #12]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d109      	bne.n	801abe8 <dwt_readfromdevice+0x30>
  {
    header[cnt++] =
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	1c5a      	adds	r2, r3, #1
 801abd8:	617a      	str	r2, [r7, #20]
        (uint8)recordNumber;  // Bit-7 zero is READ operation, bit-6 zero=NO
 801abda:	89fa      	ldrh	r2, [r7, #14]
 801abdc:	b2d2      	uxtb	r2, r2
    header[cnt++] =
 801abde:	3318      	adds	r3, #24
 801abe0:	443b      	add	r3, r7
 801abe2:	f803 2c08 	strb.w	r2, [r3, #-8]
 801abe6:	e02f      	b.n	801ac48 <dwt_readfromdevice+0x90>
    if ((index + length) > 0x7FFF) {
      return DWT_ERROR;  // Sub-addressable area is limited to 15-bits.
    }
#endif
    header[cnt++] =
        (uint8)(0x40 | recordNumber);  // Bit-7 zero is READ operation, bit-6
 801abe8:	89fb      	ldrh	r3, [r7, #14]
 801abea:	b2da      	uxtb	r2, r3
    header[cnt++] =
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	1c59      	adds	r1, r3, #1
 801abf0:	6179      	str	r1, [r7, #20]
        (uint8)(0x40 | recordNumber);  // Bit-7 zero is READ operation, bit-6
 801abf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801abf6:	b2d2      	uxtb	r2, r2
    header[cnt++] =
 801abf8:	3318      	adds	r3, #24
 801abfa:	443b      	add	r3, r7
 801abfc:	f803 2c08 	strb.w	r2, [r3, #-8]
                                       // one=sub-address follows, bits 5-0 is
                                       // reg file id

    if (index <= 127)  // For non-zero index < 127, just a single sub-index byte
 801ac00:	89bb      	ldrh	r3, [r7, #12]
 801ac02:	2b7f      	cmp	r3, #127	@ 0x7f
 801ac04:	d809      	bhi.n	801ac1a <dwt_readfromdevice+0x62>
                       // is required
    {
      header[cnt++] =
 801ac06:	697b      	ldr	r3, [r7, #20]
 801ac08:	1c5a      	adds	r2, r3, #1
 801ac0a:	617a      	str	r2, [r7, #20]
          (uint8)index;  // Bit-7 zero means no extension, bits 6-0 is index.
 801ac0c:	89ba      	ldrh	r2, [r7, #12]
 801ac0e:	b2d2      	uxtb	r2, r2
      header[cnt++] =
 801ac10:	3318      	adds	r3, #24
 801ac12:	443b      	add	r3, r7
 801ac14:	f803 2c08 	strb.w	r2, [r3, #-8]
 801ac18:	e016      	b.n	801ac48 <dwt_readfromdevice+0x90>
    } else {
      header[cnt++] =
          0x80 | (uint8)(index);  // Bit-7 one means extended index, bits 6-0 is
 801ac1a:	89bb      	ldrh	r3, [r7, #12]
 801ac1c:	b2da      	uxtb	r2, r3
      header[cnt++] =
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	1c59      	adds	r1, r3, #1
 801ac22:	6179      	str	r1, [r7, #20]
 801ac24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801ac28:	b2d2      	uxtb	r2, r2
 801ac2a:	3318      	adds	r3, #24
 801ac2c:	443b      	add	r3, r7
 801ac2e:	f803 2c08 	strb.w	r2, [r3, #-8]
                                  // low seven bits of index.
      header[cnt++] =
          (uint8)(index >> 7);  // 8-bit value = high eight bits of index.
 801ac32:	89bb      	ldrh	r3, [r7, #12]
 801ac34:	09db      	lsrs	r3, r3, #7
 801ac36:	b299      	uxth	r1, r3
      header[cnt++] =
 801ac38:	697b      	ldr	r3, [r7, #20]
 801ac3a:	1c5a      	adds	r2, r3, #1
 801ac3c:	617a      	str	r2, [r7, #20]
          (uint8)(index >> 7);  // 8-bit value = high eight bits of index.
 801ac3e:	b2ca      	uxtb	r2, r1
      header[cnt++] =
 801ac40:	3318      	adds	r3, #24
 801ac42:	443b      	add	r3, r7
 801ac44:	f803 2c08 	strb.w	r2, [r3, #-8]
    }
  }

  // Do the read from the SPI
  return readfromspi(cnt, header, length,
 801ac48:	697b      	ldr	r3, [r7, #20]
 801ac4a:	b298      	uxth	r0, r3
 801ac4c:	f107 0110 	add.w	r1, r7, #16
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	68ba      	ldr	r2, [r7, #8]
 801ac54:	f7e5 ff14 	bl	8000a80 <readfromspi>
 801ac58:	4603      	mov	r3, r0
                     buffer);  // result is stored in the buffer

}  // end dwt_readfromdevice()
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3718      	adds	r7, #24
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}

0801ac62 <dwt_read32bitoffsetreg>:
 *
 * output parameters
 *
 * returns 32 bit register value (success), or DWT_ERROR for error
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset) {
 801ac62:	b580      	push	{r7, lr}
 801ac64:	b086      	sub	sp, #24
 801ac66:	af00      	add	r7, sp, #0
 801ac68:	6078      	str	r0, [r7, #4]
 801ac6a:	6039      	str	r1, [r7, #0]
  uint32 regval = DWT_ERROR;
 801ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac70:	617b      	str	r3, [r7, #20]
  int j;
  uint8 buffer[4];

  int result = dwt_readfromdevice(
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	b298      	uxth	r0, r3
 801ac76:	683b      	ldr	r3, [r7, #0]
 801ac78:	b299      	uxth	r1, r3
 801ac7a:	f107 0308 	add.w	r3, r7, #8
 801ac7e:	2204      	movs	r2, #4
 801ac80:	f7ff ff9a 	bl	801abb8 <dwt_readfromdevice>
 801ac84:	60f8      	str	r0, [r7, #12]
      regFileID, regOffset, 4,
      buffer);  // Read 4 bytes (32-bits) register into buffer

  if (result == DWT_SUCCESS) {
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d111      	bne.n	801acb0 <dwt_read32bitoffsetreg+0x4e>
    for (j = 3; j >= 0; j--) {
 801ac8c:	2303      	movs	r3, #3
 801ac8e:	613b      	str	r3, [r7, #16]
 801ac90:	e00b      	b.n	801acaa <dwt_read32bitoffsetreg+0x48>
      regval = (regval << 8) + buffer[j];
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	021b      	lsls	r3, r3, #8
 801ac96:	f107 0108 	add.w	r1, r7, #8
 801ac9a:	693a      	ldr	r2, [r7, #16]
 801ac9c:	440a      	add	r2, r1
 801ac9e:	7812      	ldrb	r2, [r2, #0]
 801aca0:	4413      	add	r3, r2
 801aca2:	617b      	str	r3, [r7, #20]
    for (j = 3; j >= 0; j--) {
 801aca4:	693b      	ldr	r3, [r7, #16]
 801aca6:	3b01      	subs	r3, #1
 801aca8:	613b      	str	r3, [r7, #16]
 801acaa:	693b      	ldr	r3, [r7, #16]
 801acac:	2b00      	cmp	r3, #0
 801acae:	daf0      	bge.n	801ac92 <dwt_read32bitoffsetreg+0x30>
    }
  }
  return regval;
 801acb0:	697b      	ldr	r3, [r7, #20]

}  // end dwt_read32bitoffsetreg()
 801acb2:	4618      	mov	r0, r3
 801acb4:	3718      	adds	r7, #24
 801acb6:	46bd      	mov	sp, r7
 801acb8:	bd80      	pop	{r7, pc}

0801acba <dwt_read16bitoffsetreg>:
 *
 * output parameters
 *
 * returns 16 bit register value (success), or DWT_ERROR for error
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset) {
 801acba:	b580      	push	{r7, lr}
 801acbc:	b086      	sub	sp, #24
 801acbe:	af00      	add	r7, sp, #0
 801acc0:	6078      	str	r0, [r7, #4]
 801acc2:	6039      	str	r1, [r7, #0]
  uint16 regval = DWT_ERROR;
 801acc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801acc8:	82fb      	strh	r3, [r7, #22]
  uint8 buffer[2];

  int result = dwt_readfromdevice(
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	b298      	uxth	r0, r3
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	b299      	uxth	r1, r3
 801acd2:	f107 030c 	add.w	r3, r7, #12
 801acd6:	2202      	movs	r2, #2
 801acd8:	f7ff ff6e 	bl	801abb8 <dwt_readfromdevice>
 801acdc:	6138      	str	r0, [r7, #16]
      regFileID, regOffset, 2,
      buffer);  // Read 2 bytes (16-bits) register into buffer

  if (result == DWT_SUCCESS) {
 801acde:	693b      	ldr	r3, [r7, #16]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d105      	bne.n	801acf0 <dwt_read16bitoffsetreg+0x36>
    regval = (buffer[1] << 8) + buffer[0];
 801ace4:	7b7b      	ldrb	r3, [r7, #13]
 801ace6:	021b      	lsls	r3, r3, #8
 801ace8:	b29b      	uxth	r3, r3
 801acea:	7b3a      	ldrb	r2, [r7, #12]
 801acec:	4413      	add	r3, r2
 801acee:	82fb      	strh	r3, [r7, #22]
  }
  return regval;
 801acf0:	8afb      	ldrh	r3, [r7, #22]

}  // end dwt_read16bitoffsetreg()
 801acf2:	4618      	mov	r0, r3
 801acf4:	3718      	adds	r7, #24
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}

0801acfa <dwt_write16bitoffsetreg>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval) {
 801acfa:	b580      	push	{r7, lr}
 801acfc:	b086      	sub	sp, #24
 801acfe:	af00      	add	r7, sp, #0
 801ad00:	60f8      	str	r0, [r7, #12]
 801ad02:	60b9      	str	r1, [r7, #8]
 801ad04:	4613      	mov	r3, r2
 801ad06:	80fb      	strh	r3, [r7, #6]
  int reg;
  uint8 buffer[2];

  buffer[0] = regval & 0xFF;
 801ad08:	88fb      	ldrh	r3, [r7, #6]
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	743b      	strb	r3, [r7, #16]
  buffer[1] = regval >> 8;
 801ad0e:	88fb      	ldrh	r3, [r7, #6]
 801ad10:	0a1b      	lsrs	r3, r3, #8
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	747b      	strb	r3, [r7, #17]

  reg = dwt_writetodevice(regFileID, regOffset, 2, buffer);
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	b298      	uxth	r0, r3
 801ad1c:	68bb      	ldr	r3, [r7, #8]
 801ad1e:	b299      	uxth	r1, r3
 801ad20:	f107 0310 	add.w	r3, r7, #16
 801ad24:	2202      	movs	r2, #2
 801ad26:	f7ff feef 	bl	801ab08 <dwt_writetodevice>
 801ad2a:	6178      	str	r0, [r7, #20]

  return reg;
 801ad2c:	697b      	ldr	r3, [r7, #20]

}  // end dwt_write16bitoffsetreg()
 801ad2e:	4618      	mov	r0, r3
 801ad30:	3718      	adds	r7, #24
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}

0801ad36 <dwt_write32bitoffsetreg>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval) {
 801ad36:	b580      	push	{r7, lr}
 801ad38:	b088      	sub	sp, #32
 801ad3a:	af00      	add	r7, sp, #0
 801ad3c:	60f8      	str	r0, [r7, #12]
 801ad3e:	60b9      	str	r1, [r7, #8]
 801ad40:	607a      	str	r2, [r7, #4]
  int j;
  int reg;
  uint8 buffer[4];

  for (j = 0; j < 4; j++) {
 801ad42:	2300      	movs	r3, #0
 801ad44:	61fb      	str	r3, [r7, #28]
 801ad46:	e00d      	b.n	801ad64 <dwt_write32bitoffsetreg+0x2e>
    buffer[j] = regval & 0xff;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	b2d9      	uxtb	r1, r3
 801ad4c:	f107 0214 	add.w	r2, r7, #20
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	4413      	add	r3, r2
 801ad54:	460a      	mov	r2, r1
 801ad56:	701a      	strb	r2, [r3, #0]
    regval >>= 8;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	0a1b      	lsrs	r3, r3, #8
 801ad5c:	607b      	str	r3, [r7, #4]
  for (j = 0; j < 4; j++) {
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	3301      	adds	r3, #1
 801ad62:	61fb      	str	r3, [r7, #28]
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	2b03      	cmp	r3, #3
 801ad68:	ddee      	ble.n	801ad48 <dwt_write32bitoffsetreg+0x12>
  }

  reg = dwt_writetodevice(regFileID, regOffset, 4, buffer);
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	b298      	uxth	r0, r3
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	b299      	uxth	r1, r3
 801ad72:	f107 0314 	add.w	r3, r7, #20
 801ad76:	2204      	movs	r2, #4
 801ad78:	f7ff fec6 	bl	801ab08 <dwt_writetodevice>
 801ad7c:	61b8      	str	r0, [r7, #24]

  return reg;
 801ad7e:	69bb      	ldr	r3, [r7, #24]

}  // end dwt_write32bitoffsetreg()
 801ad80:	4618      	mov	r0, r3
 801ad82:	3720      	adds	r7, #32
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd80      	pop	{r7, pc}

0801ad88 <dwt_enableframefilter>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_enableframefilter(uint16 enable) {
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b084      	sub	sp, #16
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	4603      	mov	r3, r0
 801ad90:	80fb      	strh	r3, [r7, #6]
  uint32 sysconfig =
      SYS_CFG_MASK & dwt_read32bitreg(SYS_CFG_ID);  // Read sysconfig register
 801ad92:	2100      	movs	r1, #0
 801ad94:	2004      	movs	r0, #4
 801ad96:	f7ff ff64 	bl	801ac62 <dwt_read32bitoffsetreg>
 801ad9a:	4602      	mov	r2, r0
  uint32 sysconfig =
 801ad9c:	4b11      	ldr	r3, [pc, #68]	@ (801ade4 <dwt_enableframefilter+0x5c>)
 801ad9e:	4013      	ands	r3, r2
 801ada0:	60fb      	str	r3, [r7, #12]

  if (enable) {
 801ada2:	88fb      	ldrh	r3, [r7, #6]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d00c      	beq.n	801adc2 <dwt_enableframefilter+0x3a>
    // Enable frame filtering and configure frame types
    sysconfig &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 801adae:	60fb      	str	r3, [r7, #12]
    sysconfig |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
 801adb0:	88fb      	ldrh	r3, [r7, #6]
 801adb2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	4313      	orrs	r3, r2
 801adba:	f043 0301 	orr.w	r3, r3, #1
 801adbe:	60fb      	str	r3, [r7, #12]
 801adc0:	e003      	b.n	801adca <dwt_enableframefilter+0x42>
  } else {
    sysconfig &= ~(SYS_CFG_FFE);
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	f023 0301 	bic.w	r3, r3, #1
 801adc8:	60fb      	str	r3, [r7, #12]
  }

  dw1000local.sysCFGreg = sysconfig;
 801adca:	4a07      	ldr	r2, [pc, #28]	@ (801ade8 <dwt_enableframefilter+0x60>)
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	6193      	str	r3, [r2, #24]
  dwt_write32bitreg(SYS_CFG_ID, sysconfig);
 801add0:	68fa      	ldr	r2, [r7, #12]
 801add2:	2100      	movs	r1, #0
 801add4:	2004      	movs	r0, #4
 801add6:	f7ff ffae 	bl	801ad36 <dwt_write32bitoffsetreg>
}
 801adda:	bf00      	nop
 801addc:	3710      	adds	r7, #16
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop
 801ade4:	f047ffff 	.word	0xf047ffff
 801ade8:	24023960 	.word	0x24023960

0801adec <dwt_setpanid>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setpanid(uint16 panID) {
 801adec:	b580      	push	{r7, lr}
 801adee:	b082      	sub	sp, #8
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	4603      	mov	r3, r0
 801adf4:	80fb      	strh	r3, [r7, #6]
  // PAN ID is high 16 bits of register
  dwt_write16bitoffsetreg(PANADR_ID, 2, panID);
 801adf6:	88fb      	ldrh	r3, [r7, #6]
 801adf8:	461a      	mov	r2, r3
 801adfa:	2102      	movs	r1, #2
 801adfc:	2003      	movs	r0, #3
 801adfe:	f7ff ff7c 	bl	801acfa <dwt_write16bitoffsetreg>
}
 801ae02:	bf00      	nop
 801ae04:	3708      	adds	r7, #8
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}

0801ae0a <dwt_setaddress16>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setaddress16(uint16 shortAddress) {
 801ae0a:	b580      	push	{r7, lr}
 801ae0c:	b082      	sub	sp, #8
 801ae0e:	af00      	add	r7, sp, #0
 801ae10:	4603      	mov	r3, r0
 801ae12:	80fb      	strh	r3, [r7, #6]
  // Short address into low 16 bits
  dwt_write16bitoffsetreg(PANADR_ID, 0, shortAddress);
 801ae14:	88fb      	ldrh	r3, [r7, #6]
 801ae16:	461a      	mov	r2, r3
 801ae18:	2100      	movs	r1, #0
 801ae1a:	2003      	movs	r0, #3
 801ae1c:	f7ff ff6d 	bl	801acfa <dwt_write16bitoffsetreg>
}
 801ae20:	bf00      	nop
 801ae22:	3708      	adds	r7, #8
 801ae24:	46bd      	mov	sp, r7
 801ae26:	bd80      	pop	{r7, pc}

0801ae28 <_dwt_otpread>:
 *
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address) {
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
  uint8 buf[4];
  uint32 ret_data;

  buf[1] = (address >> 8) & 0xff;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	0a1b      	lsrs	r3, r3, #8
 801ae34:	b2db      	uxtb	r3, r3
 801ae36:	727b      	strb	r3, [r7, #9]
  buf[0] = address & 0xff;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	723b      	strb	r3, [r7, #8]

  // Write the address
  dwt_writetodevice(OTP_IF_ID, OTP_ADDR, 2, buf);
 801ae3e:	f107 0308 	add.w	r3, r7, #8
 801ae42:	2202      	movs	r2, #2
 801ae44:	2104      	movs	r1, #4
 801ae46:	202d      	movs	r0, #45	@ 0x2d
 801ae48:	f7ff fe5e 	bl	801ab08 <dwt_writetodevice>

  // Assert OTP Read (self clearing)
  buf[0] = 0x03;  // 0x03 for manual drive of OTP_READ
 801ae4c:	2303      	movs	r3, #3
 801ae4e:	723b      	strb	r3, [r7, #8]
  dwt_writetodevice(OTP_IF_ID, OTP_CTRL, 1, buf);
 801ae50:	f107 0308 	add.w	r3, r7, #8
 801ae54:	2201      	movs	r2, #1
 801ae56:	2106      	movs	r1, #6
 801ae58:	202d      	movs	r0, #45	@ 0x2d
 801ae5a:	f7ff fe55 	bl	801ab08 <dwt_writetodevice>
  buf[0] = 0x00;  // Bit0 is not autoclearing, so clear it (Bit 1 is but we
 801ae5e:	2300      	movs	r3, #0
 801ae60:	723b      	strb	r3, [r7, #8]
                  // clear it anyway).
  dwt_writetodevice(OTP_IF_ID, OTP_CTRL, 1, buf);
 801ae62:	f107 0308 	add.w	r3, r7, #8
 801ae66:	2201      	movs	r2, #1
 801ae68:	2106      	movs	r1, #6
 801ae6a:	202d      	movs	r0, #45	@ 0x2d
 801ae6c:	f7ff fe4c 	bl	801ab08 <dwt_writetodevice>

  // Read read data, available 40ns after rising edge of OTP_READ
  ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 801ae70:	210a      	movs	r1, #10
 801ae72:	202d      	movs	r0, #45	@ 0x2d
 801ae74:	f7ff fef5 	bl	801ac62 <dwt_read32bitoffsetreg>
 801ae78:	60f8      	str	r0, [r7, #12]

  // Return the 32bit of read data
  return (ret_data);
 801ae7a:	68fb      	ldr	r3, [r7, #12]
}
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3710      	adds	r7, #16
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}

0801ae84 <dwt_entersleepaftertx>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable) {
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b084      	sub	sp, #16
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
  uint32 reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 801ae8c:	2104      	movs	r1, #4
 801ae8e:	2036      	movs	r0, #54	@ 0x36
 801ae90:	f7ff fee7 	bl	801ac62 <dwt_read32bitoffsetreg>
 801ae94:	60f8      	str	r0, [r7, #12]
  // Set the auto TX -> sleep bit
  if (enable) {
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d004      	beq.n	801aea6 <dwt_entersleepaftertx+0x22>
    reg |= PMSC_CTRL1_ATXSLP;
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801aea2:	60fb      	str	r3, [r7, #12]
 801aea4:	e003      	b.n	801aeae <dwt_entersleepaftertx+0x2a>
  } else {
    reg &= ~(PMSC_CTRL1_ATXSLP);
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801aeac:	60fb      	str	r3, [r7, #12]
  }
  dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 801aeae:	68fa      	ldr	r2, [r7, #12]
 801aeb0:	2104      	movs	r1, #4
 801aeb2:	2036      	movs	r0, #54	@ 0x36
 801aeb4:	f7ff ff3f 	bl	801ad36 <dwt_write32bitoffsetreg>
}
 801aeb8:	bf00      	nop
 801aeba:	3710      	adds	r7, #16
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <_dwt_configlde>:
 *
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex) {
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
  uint8 x = LDE_PARAM1;
 801aec8:	236d      	movs	r3, #109	@ 0x6d
 801aeca:	73fb      	strb	r3, [r7, #15]

  dwt_writetodevice(LDE_IF_ID, LDE_CFG1_OFFSET, 1,
 801aecc:	f107 030f 	add.w	r3, r7, #15
 801aed0:	2201      	movs	r2, #1
 801aed2:	f640 0106 	movw	r1, #2054	@ 0x806
 801aed6:	202e      	movs	r0, #46	@ 0x2e
 801aed8:	f7ff fe16 	bl	801ab08 <dwt_writetodevice>
                    &x);  // 8-bit configuration register

  if (prfIndex) {
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d007      	beq.n	801aef2 <_dwt_configlde+0x32>
    dwt_write16bitoffsetreg(
 801aee2:	f240 6207 	movw	r2, #1543	@ 0x607
 801aee6:	f641 0106 	movw	r1, #6150	@ 0x1806
 801aeea:	202e      	movs	r0, #46	@ 0x2e
 801aeec:	f7ff ff05 	bl	801acfa <dwt_write16bitoffsetreg>
        LDE_IF_ID, LDE_CFG2_OFFSET,
        (uint16)LDE_PARAM3_64);  // 16-bit LDE configuration tuning register
  } else {
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_CFG2_OFFSET, (uint16)LDE_PARAM3_16);
  }
}
 801aef0:	e006      	b.n	801af00 <_dwt_configlde+0x40>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_CFG2_OFFSET, (uint16)LDE_PARAM3_16);
 801aef2:	f241 6207 	movw	r2, #5639	@ 0x1607
 801aef6:	f641 0106 	movw	r1, #6150	@ 0x1806
 801aefa:	202e      	movs	r0, #46	@ 0x2e
 801aefc:	f7ff fefd 	bl	801acfa <dwt_write16bitoffsetreg>
}
 801af00:	bf00      	nop
 801af02:	3710      	adds	r7, #16
 801af04:	46bd      	mov	sp, r7
 801af06:	bd80      	pop	{r7, pc}

0801af08 <_dwt_loaducodefromrom>:
 *
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void) {
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
  uint8 wr_buf[2];

  // Set up clocks
  wr_buf[1] = 0x03;
 801af0e:	2303      	movs	r3, #3
 801af10:	717b      	strb	r3, [r7, #5]
  wr_buf[0] = 0x01;
 801af12:	2301      	movs	r3, #1
 801af14:	713b      	strb	r3, [r7, #4]
  dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, wr_buf);
 801af16:	1d3b      	adds	r3, r7, #4
 801af18:	2202      	movs	r2, #2
 801af1a:	2100      	movs	r1, #0
 801af1c:	2036      	movs	r0, #54	@ 0x36
 801af1e:	f7ff fdf3 	bl	801ab08 <dwt_writetodevice>
  // Kick off the LDE load
  dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL,
 801af22:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801af26:	2106      	movs	r1, #6
 801af28:	202d      	movs	r0, #45	@ 0x2d
 801af2a:	f7ff fee6 	bl	801acfa <dwt_write16bitoffsetreg>
                          OTP_CTRL_LDELOAD);  // Set load LDE kick bit

  deca_sleep(1);  // Allow time for code to upload (should take up to 120 us)
 801af2e:	2001      	movs	r0, #1
 801af30:	f7e5 fd50 	bl	80009d4 <deca_sleep>

  // Default clocks (ENABLE_ALL_SEQ)
  _dwt_enableclocks(ENABLE_ALL_SEQ);  // Enable clocks for sequencing
 801af34:	2001      	movs	r0, #1
 801af36:	f000 f879 	bl	801b02c <_dwt_enableclocks>
}
 801af3a:	bf00      	nop
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}

0801af42 <dwt_setleds>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setleds(uint8 test) {
 801af42:	b580      	push	{r7, lr}
 801af44:	b084      	sub	sp, #16
 801af46:	af00      	add	r7, sp, #0
 801af48:	4603      	mov	r3, r0
 801af4a:	71fb      	strb	r3, [r7, #7]
  uint8 buf[2];

  if (test & 0x1) {
 801af4c:	79fb      	ldrb	r3, [r7, #7]
 801af4e:	f003 0301 	and.w	r3, r3, #1
 801af52:	2b00      	cmp	r3, #0
 801af54:	d037      	beq.n	801afc6 <dwt_setleds+0x84>
    // Set up MFIO for LED output
    dwt_readfromdevice(GPIO_CTRL_ID, 0x00, 2, buf);
 801af56:	f107 030c 	add.w	r3, r7, #12
 801af5a:	2202      	movs	r2, #2
 801af5c:	2100      	movs	r1, #0
 801af5e:	2026      	movs	r0, #38	@ 0x26
 801af60:	f7ff fe2a 	bl	801abb8 <dwt_readfromdevice>
    buf[1] &= ~0x3C;  // clear the bits
 801af64:	7b7b      	ldrb	r3, [r7, #13]
 801af66:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	737b      	strb	r3, [r7, #13]
    buf[1] |= 0x14;
 801af6e:	7b7b      	ldrb	r3, [r7, #13]
 801af70:	f043 0314 	orr.w	r3, r3, #20
 801af74:	b2db      	uxtb	r3, r3
 801af76:	737b      	strb	r3, [r7, #13]
    dwt_writetodevice(GPIO_CTRL_ID, 0x01, 1, &buf[1]);
 801af78:	f107 030c 	add.w	r3, r7, #12
 801af7c:	3301      	adds	r3, #1
 801af7e:	2201      	movs	r2, #1
 801af80:	2101      	movs	r1, #1
 801af82:	2026      	movs	r0, #38	@ 0x26
 801af84:	f7ff fdc0 	bl	801ab08 <dwt_writetodevice>

    // Enable LP Oscillator to run from counter, turn on debounce clock
    dwt_readfromdevice(PMSC_ID, 0x02, 1, buf);
 801af88:	f107 030c 	add.w	r3, r7, #12
 801af8c:	2201      	movs	r2, #1
 801af8e:	2102      	movs	r1, #2
 801af90:	2036      	movs	r0, #54	@ 0x36
 801af92:	f7ff fe11 	bl	801abb8 <dwt_readfromdevice>
    buf[0] |= 0x84;  //
 801af96:	7b3b      	ldrb	r3, [r7, #12]
 801af98:	f063 037b 	orn	r3, r3, #123	@ 0x7b
 801af9c:	b2db      	uxtb	r3, r3
 801af9e:	733b      	strb	r3, [r7, #12]
    dwt_writetodevice(PMSC_ID, 0x02, 1, buf);
 801afa0:	f107 030c 	add.w	r3, r7, #12
 801afa4:	2201      	movs	r2, #1
 801afa6:	2102      	movs	r1, #2
 801afa8:	2036      	movs	r0, #54	@ 0x36
 801afaa:	f7ff fdad 	bl	801ab08 <dwt_writetodevice>

    // Enable LEDs to blink
    buf[0] = 0x10;  // Blink period.
 801afae:	2310      	movs	r3, #16
 801afb0:	733b      	strb	r3, [r7, #12]
    buf[1] = 0x01;  // Enable blink counter
 801afb2:	2301      	movs	r3, #1
 801afb4:	737b      	strb	r3, [r7, #13]
    dwt_writetodevice(PMSC_ID, PMSC_LEDC_OFFSET, 2, buf);
 801afb6:	f107 030c 	add.w	r3, r7, #12
 801afba:	2202      	movs	r2, #2
 801afbc:	2128      	movs	r1, #40	@ 0x28
 801afbe:	2036      	movs	r0, #54	@ 0x36
 801afc0:	f7ff fda2 	bl	801ab08 <dwt_writetodevice>
 801afc4:	e017      	b.n	801aff6 <dwt_setleds+0xb4>

  } else if ((test & 0x1) == 0) {
 801afc6:	79fb      	ldrb	r3, [r7, #7]
 801afc8:	f003 0301 	and.w	r3, r3, #1
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d112      	bne.n	801aff6 <dwt_setleds+0xb4>
    // Clear the GPIO bits that are used for LED control
    dwt_readfromdevice(GPIO_CTRL_ID, 0x00, 2, buf);
 801afd0:	f107 030c 	add.w	r3, r7, #12
 801afd4:	2202      	movs	r2, #2
 801afd6:	2100      	movs	r1, #0
 801afd8:	2026      	movs	r0, #38	@ 0x26
 801afda:	f7ff fded 	bl	801abb8 <dwt_readfromdevice>
    buf[1] &= ~(0x14);
 801afde:	7b7b      	ldrb	r3, [r7, #13]
 801afe0:	f023 0314 	bic.w	r3, r3, #20
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	737b      	strb	r3, [r7, #13]
    dwt_writetodevice(GPIO_CTRL_ID, 0x00, 2, buf);
 801afe8:	f107 030c 	add.w	r3, r7, #12
 801afec:	2202      	movs	r2, #2
 801afee:	2100      	movs	r1, #0
 801aff0:	2026      	movs	r0, #38	@ 0x26
 801aff2:	f7ff fd89 	bl	801ab08 <dwt_writetodevice>
  }

  // Test LEDs
  if (test & 0x2) {
 801aff6:	79fb      	ldrb	r3, [r7, #7]
 801aff8:	f003 0302 	and.w	r3, r3, #2
 801affc:	2b00      	cmp	r3, #0
 801affe:	d011      	beq.n	801b024 <dwt_setleds+0xe2>
    buf[0] = 0x0f;  // Fire a LED blink trigger
 801b000:	230f      	movs	r3, #15
 801b002:	733b      	strb	r3, [r7, #12]
    dwt_writetodevice(PMSC_ID, 0x2a, 1, buf);
 801b004:	f107 030c 	add.w	r3, r7, #12
 801b008:	2201      	movs	r2, #1
 801b00a:	212a      	movs	r1, #42	@ 0x2a
 801b00c:	2036      	movs	r0, #54	@ 0x36
 801b00e:	f7ff fd7b 	bl	801ab08 <dwt_writetodevice>
    buf[0] = 0x00;  // Clear forced trigger bits
 801b012:	2300      	movs	r3, #0
 801b014:	733b      	strb	r3, [r7, #12]
    dwt_writetodevice(PMSC_ID, 0x2a, 1, buf);
 801b016:	f107 030c 	add.w	r3, r7, #12
 801b01a:	2201      	movs	r2, #1
 801b01c:	212a      	movs	r1, #42	@ 0x2a
 801b01e:	2036      	movs	r0, #54	@ 0x36
 801b020:	f7ff fd72 	bl	801ab08 <dwt_writetodevice>
  }

}  // end _dwt_enableleds()
 801b024:	bf00      	nop
 801b026:	3710      	adds	r7, #16
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}

0801b02c <_dwt_enableclocks>:
 *
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks) {
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b084      	sub	sp, #16
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
  uint8 reg[2];

  dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 801b034:	f107 030c 	add.w	r3, r7, #12
 801b038:	2202      	movs	r2, #2
 801b03a:	2100      	movs	r1, #0
 801b03c:	2036      	movs	r0, #54	@ 0x36
 801b03e:	f7ff fdbb 	bl	801abb8 <dwt_readfromdevice>
  switch (clocks) {
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	2b0d      	cmp	r3, #13
 801b046:	d86f      	bhi.n	801b128 <_dwt_enableclocks+0xfc>
 801b048:	a201      	add	r2, pc, #4	@ (adr r2, 801b050 <_dwt_enableclocks+0x24>)
 801b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b04e:	bf00      	nop
 801b050:	0801b099 	.word	0x0801b099
 801b054:	0801b089 	.word	0x0801b089
 801b058:	0801b0af 	.word	0x0801b0af
 801b05c:	0801b129 	.word	0x0801b129
 801b060:	0801b129 	.word	0x0801b129
 801b064:	0801b129 	.word	0x0801b129
 801b068:	0801b129 	.word	0x0801b129
 801b06c:	0801b0c5 	.word	0x0801b0c5
 801b070:	0801b0e5 	.word	0x0801b0e5
 801b074:	0801b129 	.word	0x0801b129
 801b078:	0801b129 	.word	0x0801b129
 801b07c:	0801b0fb 	.word	0x0801b0fb
 801b080:	0801b107 	.word	0x0801b107
 801b084:	0801b113 	.word	0x0801b113
    case ENABLE_ALL_SEQ: {
      reg[0] = 0x00;
 801b088:	2300      	movs	r3, #0
 801b08a:	733b      	strb	r3, [r7, #12]
      reg[1] = reg[1] & 0xfe;
 801b08c:	7b7b      	ldrb	r3, [r7, #13]
 801b08e:	f023 0301 	bic.w	r3, r3, #1
 801b092:	b2db      	uxtb	r3, r3
 801b094:	737b      	strb	r3, [r7, #13]
    } break;
 801b096:	e048      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case FORCE_SYS_XTI: {
      // System and RX
      reg[0] = 0x01 | (reg[0] & 0xfc);
 801b098:	7b3b      	ldrb	r3, [r7, #12]
 801b09a:	b25b      	sxtb	r3, r3
 801b09c:	f023 0303 	bic.w	r3, r3, #3
 801b0a0:	b25b      	sxtb	r3, r3
 801b0a2:	f043 0301 	orr.w	r3, r3, #1
 801b0a6:	b25b      	sxtb	r3, r3
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	733b      	strb	r3, [r7, #12]
    } break;
 801b0ac:	e03d      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case FORCE_SYS_PLL: {
      // System
      reg[0] = 0x02 | (reg[0] & 0xfc);
 801b0ae:	7b3b      	ldrb	r3, [r7, #12]
 801b0b0:	b25b      	sxtb	r3, r3
 801b0b2:	f023 0303 	bic.w	r3, r3, #3
 801b0b6:	b25b      	sxtb	r3, r3
 801b0b8:	f043 0302 	orr.w	r3, r3, #2
 801b0bc:	b25b      	sxtb	r3, r3
 801b0be:	b2db      	uxtb	r3, r3
 801b0c0:	733b      	strb	r3, [r7, #12]
    } break;
 801b0c2:	e032      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case READ_ACC_ON: {
      reg[0] = 0x48 | (reg[0] & 0xb3);
 801b0c4:	7b3b      	ldrb	r3, [r7, #12]
 801b0c6:	b25b      	sxtb	r3, r3
 801b0c8:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 801b0cc:	b25b      	sxtb	r3, r3
 801b0ce:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 801b0d2:	b25b      	sxtb	r3, r3
 801b0d4:	b2db      	uxtb	r3, r3
 801b0d6:	733b      	strb	r3, [r7, #12]
      reg[1] = 0x80 | reg[1];
 801b0d8:	7b7b      	ldrb	r3, [r7, #13]
 801b0da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b0de:	b2db      	uxtb	r3, r3
 801b0e0:	737b      	strb	r3, [r7, #13]
    } break;
 801b0e2:	e022      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case READ_ACC_OFF: {
      reg[0] = reg[0] & 0xb3;
 801b0e4:	7b3b      	ldrb	r3, [r7, #12]
 801b0e6:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 801b0ea:	b2db      	uxtb	r3, r3
 801b0ec:	733b      	strb	r3, [r7, #12]
      reg[1] = 0x7f & reg[1];
 801b0ee:	7b7b      	ldrb	r3, [r7, #13]
 801b0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b0f4:	b2db      	uxtb	r3, r3
 801b0f6:	737b      	strb	r3, [r7, #13]

    } break;
 801b0f8:	e017      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case FORCE_OTP_ON: {
      reg[1] = 0x02 | reg[1];
 801b0fa:	7b7b      	ldrb	r3, [r7, #13]
 801b0fc:	f043 0302 	orr.w	r3, r3, #2
 801b100:	b2db      	uxtb	r3, r3
 801b102:	737b      	strb	r3, [r7, #13]
    } break;
 801b104:	e011      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case FORCE_OTP_OFF: {
      reg[1] = reg[1] & 0xfd;
 801b106:	7b7b      	ldrb	r3, [r7, #13]
 801b108:	f023 0302 	bic.w	r3, r3, #2
 801b10c:	b2db      	uxtb	r3, r3
 801b10e:	737b      	strb	r3, [r7, #13]
    } break;
 801b110:	e00b      	b.n	801b12a <_dwt_enableclocks+0xfe>
    case FORCE_TX_PLL: {
      reg[0] = 0x20 | (reg[0] & 0xcf);
 801b112:	7b3b      	ldrb	r3, [r7, #12]
 801b114:	b25b      	sxtb	r3, r3
 801b116:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801b11a:	b25b      	sxtb	r3, r3
 801b11c:	f043 0320 	orr.w	r3, r3, #32
 801b120:	b25b      	sxtb	r3, r3
 801b122:	b2db      	uxtb	r3, r3
 801b124:	733b      	strb	r3, [r7, #12]
    } break;
 801b126:	e000      	b.n	801b12a <_dwt_enableclocks+0xfe>
    default:
      break;
 801b128:	bf00      	nop
  }

  // Need to write lower byte separately before setting the higher byte(s)
  dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 801b12a:	f107 030c 	add.w	r3, r7, #12
 801b12e:	2201      	movs	r2, #1
 801b130:	2100      	movs	r1, #0
 801b132:	2036      	movs	r0, #54	@ 0x36
 801b134:	f7ff fce8 	bl	801ab08 <dwt_writetodevice>
  dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 801b138:	f107 030c 	add.w	r3, r7, #12
 801b13c:	3301      	adds	r3, #1
 801b13e:	2201      	movs	r2, #1
 801b140:	2101      	movs	r1, #1
 801b142:	2036      	movs	r0, #54	@ 0x36
 801b144:	f7ff fce0 	bl	801ab08 <dwt_writetodevice>

}  // end _dwt_enableclocks()
 801b148:	bf00      	nop
 801b14a:	3710      	adds	r7, #16
 801b14c:	46bd      	mov	sp, r7
 801b14e:	bd80      	pop	{r7, pc}

0801b150 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed
 * transmission will fail if the delayed time has passed)
 */
int dwt_starttx(uint8 mode) {
 801b150:	b580      	push	{r7, lr}
 801b152:	b084      	sub	sp, #16
 801b154:	af00      	add	r7, sp, #0
 801b156:	4603      	mov	r3, r0
 801b158:	71fb      	strb	r3, [r7, #7]
  int retval = DWT_SUCCESS;
 801b15a:	2300      	movs	r3, #0
 801b15c:	60fb      	str	r3, [r7, #12]
  uint8 temp = 0x00;
 801b15e:	2300      	movs	r3, #0
 801b160:	727b      	strb	r3, [r7, #9]
  uint16 checkTxOK = 0;
 801b162:	2300      	movs	r3, #0
 801b164:	817b      	strh	r3, [r7, #10]

  if (mode & DWT_RESPONSE_EXPECTED) {
 801b166:	79fb      	ldrb	r3, [r7, #7]
 801b168:	f003 0302 	and.w	r3, r3, #2
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00c      	beq.n	801b18a <dwt_starttx+0x3a>
    temp = (uint8)SYS_CTRL_WAIT4RESP;  // Set wait4response bit
 801b170:	2380      	movs	r3, #128	@ 0x80
 801b172:	727b      	strb	r3, [r7, #9]
    dwt_writetodevice(SYS_CTRL_ID, 0, 1, &temp);
 801b174:	f107 0309 	add.w	r3, r7, #9
 801b178:	2201      	movs	r2, #1
 801b17a:	2100      	movs	r1, #0
 801b17c:	200d      	movs	r0, #13
 801b17e:	f7ff fcc3 	bl	801ab08 <dwt_writetodevice>
    dw1000local.wait4resp = 1;
 801b182:	4b24      	ldr	r3, [pc, #144]	@ (801b214 <dwt_starttx+0xc4>)
 801b184:	2201      	movs	r2, #1
 801b186:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }

  if (mode & DWT_START_TX_DELAYED) {
 801b18a:	79fb      	ldrb	r3, [r7, #7]
 801b18c:	f003 0301 	and.w	r3, r3, #1
 801b190:	2b00      	cmp	r3, #0
 801b192:	d02d      	beq.n	801b1f0 <dwt_starttx+0xa0>
    // uint32 status ;

    // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
    temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT);
 801b194:	7a7b      	ldrb	r3, [r7, #9]
 801b196:	f043 0306 	orr.w	r3, r3, #6
 801b19a:	b2db      	uxtb	r3, r3
 801b19c:	727b      	strb	r3, [r7, #9]
    dwt_writetodevice(SYS_CTRL_ID, 0, 1, &temp);
 801b19e:	f107 0309 	add.w	r3, r7, #9
 801b1a2:	2201      	movs	r2, #1
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	200d      	movs	r0, #13
 801b1a8:	f7ff fcae 	bl	801ab08 <dwt_writetodevice>
    checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3);
 801b1ac:	2103      	movs	r1, #3
 801b1ae:	200f      	movs	r0, #15
 801b1b0:	f7ff fd83 	bl	801acba <dwt_read16bitoffsetreg>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	817b      	strh	r3, [r7, #10]
    // status = dwt_read32bitreg(SYS_STATUS_ID) ; // Read status register
    if ((checkTxOK & SYS_STATUS_TXERR) ==
 801b1b8:	897b      	ldrh	r3, [r7, #10]
 801b1ba:	f403 6381 	and.w	r3, r3, #1032	@ 0x408
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d102      	bne.n	801b1c8 <dwt_starttx+0x78>
        0)  // Transmit Delayed Send set over Half a Period away or Power Up
            // error (there is enough time to send but not to power up
            // individual blocks).
    {
      // printf("tx delayed \n");
      retval = DWT_SUCCESS;  // All okay
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	60fb      	str	r3, [r7, #12]
 801b1c6:	e01f      	b.n	801b208 <dwt_starttx+0xb8>
    } else {
      // I am taking DSHP set to Indicate that the TXDLYS was set too late for
      // the specified DX_TIME. Remedial Action - (a) cancel delayed send
      temp =
 801b1c8:	2340      	movs	r3, #64	@ 0x40
 801b1ca:	727b      	strb	r3, [r7, #9]
          (uint8)SYS_CTRL_TRXOFF;  // This assumes the bit is in the lowest byte
      dwt_writetodevice(SYS_CTRL_ID, 0, 1, &temp);
 801b1cc:	f107 0309 	add.w	r3, r7, #9
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	2100      	movs	r1, #0
 801b1d4:	200d      	movs	r0, #13
 801b1d6:	f7ff fc97 	bl	801ab08 <dwt_writetodevice>
      // late.....
      // ... instead return and assume return value of 1 will be used to detect
      // and recover from the issue.

      // Clear the "auto TX to sleep" bit
      dwt_entersleepaftertx(0);
 801b1da:	2000      	movs	r0, #0
 801b1dc:	f7ff fe52 	bl	801ae84 <dwt_entersleepaftertx>
      dw1000local.wait4resp = 0;
 801b1e0:	4b0c      	ldr	r3, [pc, #48]	@ (801b214 <dwt_starttx+0xc4>)
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      retval = DWT_ERROR;  // Failed !
 801b1e8:	f04f 33ff 	mov.w	r3, #4294967295
 801b1ec:	60fb      	str	r3, [r7, #12]
 801b1ee:	e00b      	b.n	801b208 <dwt_starttx+0xb8>
    }
  } else {
    temp |= (uint8)SYS_CTRL_TXSTRT;
 801b1f0:	7a7b      	ldrb	r3, [r7, #9]
 801b1f2:	f043 0302 	orr.w	r3, r3, #2
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	727b      	strb	r3, [r7, #9]
    dwt_writetodevice(SYS_CTRL_ID, 0, 1, &temp);
 801b1fa:	f107 0309 	add.w	r3, r7, #9
 801b1fe:	2201      	movs	r2, #1
 801b200:	2100      	movs	r1, #0
 801b202:	200d      	movs	r0, #13
 801b204:	f7ff fc80 	bl	801ab08 <dwt_writetodevice>
  }

  return retval;
 801b208:	68fb      	ldr	r3, [r7, #12]

}  // end dwt_starttx()
 801b20a:	4618      	mov	r0, r3
 801b20c:	3710      	adds	r7, #16
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}
 801b212:	bf00      	nop
 801b214:	24023960 	.word	0x24023960

0801b218 <dwt_forcetrxoff>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void) {
 801b218:	b580      	push	{r7, lr}
 801b21a:	b084      	sub	sp, #16
 801b21c:	af00      	add	r7, sp, #0
  decaIrqStatus_t stat;
  uint8 temp;
  uint32 mask;

  temp = (uint8)SYS_CTRL_TRXOFF;  // This assumes the bit is in the lowest byte
 801b21e:	2340      	movs	r3, #64	@ 0x40
 801b220:	71fb      	strb	r3, [r7, #7]

  mask = dwt_read32bitreg(SYS_MASK_ID);  // Read set interrupt mask
 801b222:	2100      	movs	r1, #0
 801b224:	200e      	movs	r0, #14
 801b226:	f7ff fd1c 	bl	801ac62 <dwt_read32bitoffsetreg>
 801b22a:	60f8      	str	r0, [r7, #12]
  // Need to beware of interrupts occurring in the middle of following read
  // modify write cycle We can disable the radio, but before the status is
  // cleared an interrupt can be set (e.g. the event has just happened before
  // the radio was disabled) thus we need to disable interrupt during this
  // operation
  stat = decamutexon();
 801b22c:	f7e5 fbb6 	bl	800099c <decamutexon>
 801b230:	60b8      	str	r0, [r7, #8]

  dwt_write32bitreg(
 801b232:	2200      	movs	r2, #0
 801b234:	2100      	movs	r1, #0
 801b236:	200e      	movs	r0, #14
 801b238:	f7ff fd7d 	bl	801ad36 <dwt_write32bitoffsetreg>
      SYS_MASK_ID,
      0);  // Clear interrupt mask - so we don't get any unwanted events

  dwt_writetodevice(SYS_CTRL_ID, 0, 1, &temp);  // Disable the radio
 801b23c:	1dfb      	adds	r3, r7, #7
 801b23e:	2201      	movs	r2, #1
 801b240:	2100      	movs	r1, #0
 801b242:	200d      	movs	r0, #13
 801b244:	f7ff fc60 	bl	801ab08 <dwt_writetodevice>

  // Forcing Transceiver off - so we do not want to see any new events that may
  // have happened
  dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR |
 801b248:	4a0b      	ldr	r2, [pc, #44]	@ (801b278 <dwt_forcetrxoff+0x60>)
 801b24a:	2100      	movs	r1, #0
 801b24c:	200f      	movs	r0, #15
 801b24e:	f7ff fd72 	bl	801ad36 <dwt_write32bitoffsetreg>
                                    SYS_STATUS_ALL_RX_GOOD));

  dwt_syncrxbufptrs();
 801b252:	f000 f815 	bl	801b280 <dwt_syncrxbufptrs>

  dwt_write32bitreg(SYS_MASK_ID, mask);  // Set interrupt mask to what it was
 801b256:	68fa      	ldr	r2, [r7, #12]
 801b258:	2100      	movs	r1, #0
 801b25a:	200e      	movs	r0, #14
 801b25c:	f7ff fd6b 	bl	801ad36 <dwt_write32bitoffsetreg>

  // Enable/restore interrupts again...
  decamutexoff(stat);
 801b260:	68b8      	ldr	r0, [r7, #8]
 801b262:	f7e5 fbaa 	bl	80009ba <decamutexoff>
  dw1000local.wait4resp = 0;
 801b266:	4b05      	ldr	r3, [pc, #20]	@ (801b27c <dwt_forcetrxoff+0x64>)
 801b268:	2200      	movs	r2, #0
 801b26a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

}  // end deviceforcetrxoff()
 801b26e:	bf00      	nop
 801b270:	3710      	adds	r7, #16
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
 801b276:	bf00      	nop
 801b278:	2427fff8 	.word	0x2427fff8
 801b27c:	24023960 	.word	0x24023960

0801b280 <dwt_syncrxbufptrs>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void) {
 801b280:	b580      	push	{r7, lr}
 801b282:	b082      	sub	sp, #8
 801b284:	af00      	add	r7, sp, #0
  uint8 buff;
  // Need to make sure that the host/IC buffer pointers are aligned before
  // starting RX
  dwt_readfromdevice(SYS_STATUS_ID, 3, 1, &buff);
 801b286:	1dfb      	adds	r3, r7, #7
 801b288:	2201      	movs	r2, #1
 801b28a:	2103      	movs	r1, #3
 801b28c:	200f      	movs	r0, #15
 801b28e:	f7ff fc93 	bl	801abb8 <dwt_readfromdevice>

  if ((buff & (SYS_STATUS_ICRBP >> 24)) !=  // IC side Receive Buffer Pointer
 801b292:	79fb      	ldrb	r3, [r7, #7]
 801b294:	461a      	mov	r2, r3
      ((buff & (SYS_STATUS_HSRBP >> 24))
       << 1))  // Host Side Receive Buffer Pointer
 801b296:	79fb      	ldrb	r3, [r7, #7]
 801b298:	005b      	lsls	r3, r3, #1
  if ((buff & (SYS_STATUS_ICRBP >> 24)) !=  // IC side Receive Buffer Pointer
 801b29a:	4053      	eors	r3, r2
 801b29c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d007      	beq.n	801b2b4 <dwt_syncrxbufptrs+0x34>
  {
    uint8 hsrb = 0x01;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	71bb      	strb	r3, [r7, #6]
    dwt_writetodevice(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1,
 801b2a8:	1dbb      	adds	r3, r7, #6
 801b2aa:	2201      	movs	r2, #1
 801b2ac:	2103      	movs	r1, #3
 801b2ae:	200d      	movs	r0, #13
 801b2b0:	f7ff fc2a 	bl	801ab08 <dwt_writetodevice>
                      &hsrb);  // We need to swap RX buffer status reg (write
                               // one to toggle internally)
  }
}
 801b2b4:	bf00      	nop
 801b2b6:	3708      	adds	r7, #8
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}

0801b2bc <dwt_rxenable>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed
 * receive enable will be too far in the future if delayed time has passed (if
 * delayed time is > 8s from now))
 */
int dwt_rxenable(int delayed) {
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
  uint16 temp;
  uint8 temp1 = 0;
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	737b      	strb	r3, [r7, #13]
  dwt_syncrxbufptrs();
 801b2c8:	f7ff ffda 	bl	801b280 <dwt_syncrxbufptrs>

  temp = (uint16)SYS_CTRL_RXENAB;
 801b2cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b2d0:	81fb      	strh	r3, [r7, #14]

  if (delayed) {
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d003      	beq.n	801b2e0 <dwt_rxenable+0x24>
    temp |= (uint16)SYS_CTRL_RXDLYE;
 801b2d8:	89fb      	ldrh	r3, [r7, #14]
 801b2da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801b2de:	81fb      	strh	r3, [r7, #14]
  }

  dwt_write16bitoffsetreg(SYS_CTRL_ID, 0, temp);
 801b2e0:	89fb      	ldrh	r3, [r7, #14]
 801b2e2:	461a      	mov	r2, r3
 801b2e4:	2100      	movs	r1, #0
 801b2e6:	200d      	movs	r0, #13
 801b2e8:	f7ff fd07 	bl	801acfa <dwt_write16bitoffsetreg>

  if (delayed)  // Check for errors
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d019      	beq.n	801b326 <dwt_rxenable+0x6a>
  {
    // uint32 status1 = dwt_read32bitreg(SYS_STATUS_ID) ; // Read status
    // register

    dwt_readfromdevice(SYS_STATUS_ID, 3, 1, &temp1);
 801b2f2:	f107 030d 	add.w	r3, r7, #13
 801b2f6:	2201      	movs	r2, #1
 801b2f8:	2103      	movs	r1, #3
 801b2fa:	200f      	movs	r0, #15
 801b2fc:	f7ff fc5c 	bl	801abb8 <dwt_readfromdevice>

    if (temp1 &
 801b300:	7b7b      	ldrb	r3, [r7, #13]
 801b302:	f003 0308 	and.w	r3, r3, #8
 801b306:	2b00      	cmp	r3, #0
 801b308:	d00d      	beq.n	801b326 <dwt_rxenable+0x6a>
        (SYS_STATUS_HPDWARN >>
         24))  // If delay has not passed do delayed else immediate RX on
    {
      dwt_forcetrxoff();  // Turn the delayed receive off, and do immediate
 801b30a:	f7ff ff85 	bl	801b218 <dwt_forcetrxoff>
                          // receive, return warning indication
      temp = (uint16)SYS_CTRL_RXENAB;  // Clear the delay bit
 801b30e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b312:	81fb      	strh	r3, [r7, #14]
      dwt_write16bitoffsetreg(SYS_CTRL_ID, 0, temp);
 801b314:	89fb      	ldrh	r3, [r7, #14]
 801b316:	461a      	mov	r2, r3
 801b318:	2100      	movs	r1, #0
 801b31a:	200d      	movs	r0, #13
 801b31c:	f7ff fced 	bl	801acfa <dwt_write16bitoffsetreg>
      return DWT_ERROR;
 801b320:	f04f 33ff 	mov.w	r3, #4294967295
 801b324:	e000      	b.n	801b328 <dwt_rxenable+0x6c>
    }
  }

  return DWT_SUCCESS;
 801b326:	2300      	movs	r3, #0
}  // end dwt_rxenable()
 801b328:	4618      	mov	r0, r3
 801b32a:	3710      	adds	r7, #16
 801b32c:	46bd      	mov	sp, r7
 801b32e:	bd80      	pop	{r7, pc}

0801b330 <dwt_setrxtimeout>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time) {
 801b330:	b580      	push	{r7, lr}
 801b332:	b084      	sub	sp, #16
 801b334:	af00      	add	r7, sp, #0
 801b336:	4603      	mov	r3, r0
 801b338:	80fb      	strh	r3, [r7, #6]
  uint8 temp;

  dwt_readfromdevice(SYS_CFG_ID, 3, 1, &temp);  // Read register
 801b33a:	f107 030f 	add.w	r3, r7, #15
 801b33e:	2201      	movs	r2, #1
 801b340:	2103      	movs	r1, #3
 801b342:	2004      	movs	r0, #4
 801b344:	f7ff fc38 	bl	801abb8 <dwt_readfromdevice>

  if (time > 0) {
 801b348:	88fb      	ldrh	r3, [r7, #6]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d018      	beq.n	801b380 <dwt_setrxtimeout+0x50>
    dwt_write16bitoffsetreg(RX_FWTO_ID, 0x0, time);
 801b34e:	88fb      	ldrh	r3, [r7, #6]
 801b350:	461a      	mov	r2, r3
 801b352:	2100      	movs	r1, #0
 801b354:	200c      	movs	r0, #12
 801b356:	f7ff fcd0 	bl	801acfa <dwt_write16bitoffsetreg>

    temp |= (uint8)(SYS_CFG_RXWTOE >> 24);
 801b35a:	7bfb      	ldrb	r3, [r7, #15]
 801b35c:	f043 0310 	orr.w	r3, r3, #16
 801b360:	b2db      	uxtb	r3, r3
 801b362:	73fb      	strb	r3, [r7, #15]
    // OR in 32bit value (1 bit set), I know this is in high byte.
    dw1000local.sysCFGreg |= SYS_CFG_RXWTOE;
 801b364:	4b11      	ldr	r3, [pc, #68]	@ (801b3ac <dwt_setrxtimeout+0x7c>)
 801b366:	699b      	ldr	r3, [r3, #24]
 801b368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801b36c:	4a0f      	ldr	r2, [pc, #60]	@ (801b3ac <dwt_setrxtimeout+0x7c>)
 801b36e:	6193      	str	r3, [r2, #24]

    dwt_writetodevice(SYS_CFG_ID, 3, 1, &temp);
 801b370:	f107 030f 	add.w	r3, r7, #15
 801b374:	2201      	movs	r2, #1
 801b376:	2103      	movs	r1, #3
 801b378:	2004      	movs	r0, #4
 801b37a:	f7ff fbc5 	bl	801ab08 <dwt_writetodevice>

    // dwt_write16bitoffsetreg(RX_FWTO_ID,0,0) ; // Clearing the time is not
    // needed
  }

}  // end dwt_setrxtimeout()
 801b37e:	e011      	b.n	801b3a4 <dwt_setrxtimeout+0x74>
    temp &= ~((uint8)(SYS_CFG_RXWTOE >> 24));
 801b380:	7bfb      	ldrb	r3, [r7, #15]
 801b382:	f023 0310 	bic.w	r3, r3, #16
 801b386:	b2db      	uxtb	r3, r3
 801b388:	73fb      	strb	r3, [r7, #15]
    dw1000local.sysCFGreg &= ~(SYS_CFG_RXWTOE);
 801b38a:	4b08      	ldr	r3, [pc, #32]	@ (801b3ac <dwt_setrxtimeout+0x7c>)
 801b38c:	699b      	ldr	r3, [r3, #24]
 801b38e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b392:	4a06      	ldr	r2, [pc, #24]	@ (801b3ac <dwt_setrxtimeout+0x7c>)
 801b394:	6193      	str	r3, [r2, #24]
    dwt_writetodevice(SYS_CFG_ID, 3, 1, &temp);
 801b396:	f107 030f 	add.w	r3, r7, #15
 801b39a:	2201      	movs	r2, #1
 801b39c:	2103      	movs	r1, #3
 801b39e:	2004      	movs	r0, #4
 801b3a0:	f7ff fbb2 	bl	801ab08 <dwt_writetodevice>
}  // end dwt_setrxtimeout()
 801b3a4:	bf00      	nop
 801b3a6:	3710      	adds	r7, #16
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	24023960 	.word	0x24023960

0801b3b0 <dwt_setinterrupt>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 enable) {
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b084      	sub	sp, #16
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	460b      	mov	r3, r1
 801b3ba:	70fb      	strb	r3, [r7, #3]
  decaIrqStatus_t stat;
  uint32 mask;

  // Need to beware of interrupts occurring in the middle of following read
  // modify write cycle
  stat = decamutexon();
 801b3bc:	f7e5 faee 	bl	800099c <decamutexon>
 801b3c0:	60b8      	str	r0, [r7, #8]

  mask = dwt_read32bitreg(SYS_MASK_ID);  // Read register
 801b3c2:	2100      	movs	r1, #0
 801b3c4:	200e      	movs	r0, #14
 801b3c6:	f7ff fc4c 	bl	801ac62 <dwt_read32bitoffsetreg>
 801b3ca:	60f8      	str	r0, [r7, #12]

  if (enable) {
 801b3cc:	78fb      	ldrb	r3, [r7, #3]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d004      	beq.n	801b3dc <dwt_setinterrupt+0x2c>
    mask |= bitmask;
 801b3d2:	68fa      	ldr	r2, [r7, #12]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	4313      	orrs	r3, r2
 801b3d8:	60fb      	str	r3, [r7, #12]
 801b3da:	e004      	b.n	801b3e6 <dwt_setinterrupt+0x36>
  } else {
    mask &= ~bitmask;  // Clear the bit
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	43db      	mvns	r3, r3
 801b3e0:	68fa      	ldr	r2, [r7, #12]
 801b3e2:	4013      	ands	r3, r2
 801b3e4:	60fb      	str	r3, [r7, #12]
  }
  dwt_write32bitreg(SYS_MASK_ID, mask);  // New value
 801b3e6:	68fa      	ldr	r2, [r7, #12]
 801b3e8:	2100      	movs	r1, #0
 801b3ea:	200e      	movs	r0, #14
 801b3ec:	f7ff fca3 	bl	801ad36 <dwt_write32bitoffsetreg>

  decamutexoff(stat);
 801b3f0:	68b8      	ldr	r0, [r7, #8]
 801b3f2:	f7e5 fae2 	bl	80009ba <decamutexoff>
}
 801b3f6:	bf00      	nop
 801b3f8:	3710      	adds	r7, #16
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}

0801b3fe <dwt_rxreset>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void) {
 801b3fe:	b580      	push	{r7, lr}
 801b400:	b082      	sub	sp, #8
 801b402:	af00      	add	r7, sp, #0
  uint8 resetrx = 0xe0;
 801b404:	23e0      	movs	r3, #224	@ 0xe0
 801b406:	71fb      	strb	r3, [r7, #7]
  // Set RX reset
  dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 801b408:	1dfb      	adds	r3, r7, #7
 801b40a:	2201      	movs	r2, #1
 801b40c:	2103      	movs	r1, #3
 801b40e:	2036      	movs	r0, #54	@ 0x36
 801b410:	f7ff fb7a 	bl	801ab08 <dwt_writetodevice>

  resetrx = 0xf0;  // Clear RX reset
 801b414:	23f0      	movs	r3, #240	@ 0xf0
 801b416:	71fb      	strb	r3, [r7, #7]
  dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 801b418:	1dfb      	adds	r3, r7, #7
 801b41a:	2201      	movs	r2, #1
 801b41c:	2103      	movs	r1, #3
 801b41e:	2036      	movs	r0, #54	@ 0x36
 801b420:	f7ff fb72 	bl	801ab08 <dwt_writetodevice>
}
 801b424:	bf00      	nop
 801b426:	3708      	adds	r7, #8
 801b428:	46bd      	mov	sp, r7
 801b42a:	bd80      	pop	{r7, pc}

0801b42c <dwt_xtaltrim>:
 *
 * @output
 *
 * no return value
 */
void dwt_xtaltrim(uint8 value) {
 801b42c:	b580      	push	{r7, lr}
 801b42e:	b084      	sub	sp, #16
 801b430:	af00      	add	r7, sp, #0
 801b432:	4603      	mov	r3, r0
 801b434:	71fb      	strb	r3, [r7, #7]
  uint8 write_buf;

  dwt_readfromdevice(FS_CTRL_ID, FS_XTALT_OFFSET, 1, &write_buf);
 801b436:	f107 030f 	add.w	r3, r7, #15
 801b43a:	2201      	movs	r2, #1
 801b43c:	210e      	movs	r1, #14
 801b43e:	202b      	movs	r0, #43	@ 0x2b
 801b440:	f7ff fbba 	bl	801abb8 <dwt_readfromdevice>

  write_buf &= ~FS_XTALT_MASK;
 801b444:	7bfb      	ldrb	r3, [r7, #15]
 801b446:	f023 031f 	bic.w	r3, r3, #31
 801b44a:	b2db      	uxtb	r3, r3
 801b44c:	73fb      	strb	r3, [r7, #15]

  write_buf |= (FS_XTALT_MASK & value);  // We should not change high bits,
 801b44e:	79fb      	ldrb	r3, [r7, #7]
 801b450:	f003 031f 	and.w	r3, r3, #31
 801b454:	b2da      	uxtb	r2, r3
 801b456:	7bfb      	ldrb	r3, [r7, #15]
 801b458:	4313      	orrs	r3, r2
 801b45a:	b2db      	uxtb	r3, r3
 801b45c:	73fb      	strb	r3, [r7, #15]
                                         // cause it will cause malfunction

  dwt_writetodevice(FS_CTRL_ID, FS_XTALT_OFFSET, 1, &write_buf);
 801b45e:	f107 030f 	add.w	r3, r7, #15
 801b462:	2201      	movs	r2, #1
 801b464:	210e      	movs	r1, #14
 801b466:	202b      	movs	r0, #43	@ 0x2b
 801b468:	f7ff fb4e 	bl	801ab08 <dwt_writetodevice>
}
 801b46c:	bf00      	nop
 801b46e:	3710      	adds	r7, #16
 801b470:	46bd      	mov	sp, r7
 801b472:	bd80      	pop	{r7, pc}

0801b474 <__cvt>:
 801b474:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b476:	ed2d 8b02 	vpush	{d8}
 801b47a:	eeb0 8b40 	vmov.f64	d8, d0
 801b47e:	b085      	sub	sp, #20
 801b480:	4617      	mov	r7, r2
 801b482:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801b484:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b486:	ee18 2a90 	vmov	r2, s17
 801b48a:	f025 0520 	bic.w	r5, r5, #32
 801b48e:	2a00      	cmp	r2, #0
 801b490:	bfb6      	itet	lt
 801b492:	222d      	movlt	r2, #45	@ 0x2d
 801b494:	2200      	movge	r2, #0
 801b496:	eeb1 8b40 	vneglt.f64	d8, d0
 801b49a:	2d46      	cmp	r5, #70	@ 0x46
 801b49c:	460c      	mov	r4, r1
 801b49e:	701a      	strb	r2, [r3, #0]
 801b4a0:	d004      	beq.n	801b4ac <__cvt+0x38>
 801b4a2:	2d45      	cmp	r5, #69	@ 0x45
 801b4a4:	d100      	bne.n	801b4a8 <__cvt+0x34>
 801b4a6:	3401      	adds	r4, #1
 801b4a8:	2102      	movs	r1, #2
 801b4aa:	e000      	b.n	801b4ae <__cvt+0x3a>
 801b4ac:	2103      	movs	r1, #3
 801b4ae:	ab03      	add	r3, sp, #12
 801b4b0:	9301      	str	r3, [sp, #4]
 801b4b2:	ab02      	add	r3, sp, #8
 801b4b4:	9300      	str	r3, [sp, #0]
 801b4b6:	4622      	mov	r2, r4
 801b4b8:	4633      	mov	r3, r6
 801b4ba:	eeb0 0b48 	vmov.f64	d0, d8
 801b4be:	f000 ff8b 	bl	801c3d8 <_dtoa_r>
 801b4c2:	2d47      	cmp	r5, #71	@ 0x47
 801b4c4:	d114      	bne.n	801b4f0 <__cvt+0x7c>
 801b4c6:	07fb      	lsls	r3, r7, #31
 801b4c8:	d50a      	bpl.n	801b4e0 <__cvt+0x6c>
 801b4ca:	1902      	adds	r2, r0, r4
 801b4cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d4:	bf08      	it	eq
 801b4d6:	9203      	streq	r2, [sp, #12]
 801b4d8:	2130      	movs	r1, #48	@ 0x30
 801b4da:	9b03      	ldr	r3, [sp, #12]
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d319      	bcc.n	801b514 <__cvt+0xa0>
 801b4e0:	9b03      	ldr	r3, [sp, #12]
 801b4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b4e4:	1a1b      	subs	r3, r3, r0
 801b4e6:	6013      	str	r3, [r2, #0]
 801b4e8:	b005      	add	sp, #20
 801b4ea:	ecbd 8b02 	vpop	{d8}
 801b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4f0:	2d46      	cmp	r5, #70	@ 0x46
 801b4f2:	eb00 0204 	add.w	r2, r0, r4
 801b4f6:	d1e9      	bne.n	801b4cc <__cvt+0x58>
 801b4f8:	7803      	ldrb	r3, [r0, #0]
 801b4fa:	2b30      	cmp	r3, #48	@ 0x30
 801b4fc:	d107      	bne.n	801b50e <__cvt+0x9a>
 801b4fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b506:	bf1c      	itt	ne
 801b508:	f1c4 0401 	rsbne	r4, r4, #1
 801b50c:	6034      	strne	r4, [r6, #0]
 801b50e:	6833      	ldr	r3, [r6, #0]
 801b510:	441a      	add	r2, r3
 801b512:	e7db      	b.n	801b4cc <__cvt+0x58>
 801b514:	1c5c      	adds	r4, r3, #1
 801b516:	9403      	str	r4, [sp, #12]
 801b518:	7019      	strb	r1, [r3, #0]
 801b51a:	e7de      	b.n	801b4da <__cvt+0x66>

0801b51c <__exponent>:
 801b51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b51e:	2900      	cmp	r1, #0
 801b520:	bfba      	itte	lt
 801b522:	4249      	neglt	r1, r1
 801b524:	232d      	movlt	r3, #45	@ 0x2d
 801b526:	232b      	movge	r3, #43	@ 0x2b
 801b528:	2909      	cmp	r1, #9
 801b52a:	7002      	strb	r2, [r0, #0]
 801b52c:	7043      	strb	r3, [r0, #1]
 801b52e:	dd29      	ble.n	801b584 <__exponent+0x68>
 801b530:	f10d 0307 	add.w	r3, sp, #7
 801b534:	461d      	mov	r5, r3
 801b536:	270a      	movs	r7, #10
 801b538:	461a      	mov	r2, r3
 801b53a:	fbb1 f6f7 	udiv	r6, r1, r7
 801b53e:	fb07 1416 	mls	r4, r7, r6, r1
 801b542:	3430      	adds	r4, #48	@ 0x30
 801b544:	f802 4c01 	strb.w	r4, [r2, #-1]
 801b548:	460c      	mov	r4, r1
 801b54a:	2c63      	cmp	r4, #99	@ 0x63
 801b54c:	f103 33ff 	add.w	r3, r3, #4294967295
 801b550:	4631      	mov	r1, r6
 801b552:	dcf1      	bgt.n	801b538 <__exponent+0x1c>
 801b554:	3130      	adds	r1, #48	@ 0x30
 801b556:	1e94      	subs	r4, r2, #2
 801b558:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b55c:	1c41      	adds	r1, r0, #1
 801b55e:	4623      	mov	r3, r4
 801b560:	42ab      	cmp	r3, r5
 801b562:	d30a      	bcc.n	801b57a <__exponent+0x5e>
 801b564:	f10d 0309 	add.w	r3, sp, #9
 801b568:	1a9b      	subs	r3, r3, r2
 801b56a:	42ac      	cmp	r4, r5
 801b56c:	bf88      	it	hi
 801b56e:	2300      	movhi	r3, #0
 801b570:	3302      	adds	r3, #2
 801b572:	4403      	add	r3, r0
 801b574:	1a18      	subs	r0, r3, r0
 801b576:	b003      	add	sp, #12
 801b578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b57a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b57e:	f801 6f01 	strb.w	r6, [r1, #1]!
 801b582:	e7ed      	b.n	801b560 <__exponent+0x44>
 801b584:	2330      	movs	r3, #48	@ 0x30
 801b586:	3130      	adds	r1, #48	@ 0x30
 801b588:	7083      	strb	r3, [r0, #2]
 801b58a:	70c1      	strb	r1, [r0, #3]
 801b58c:	1d03      	adds	r3, r0, #4
 801b58e:	e7f1      	b.n	801b574 <__exponent+0x58>

0801b590 <_printf_float>:
 801b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b594:	b08d      	sub	sp, #52	@ 0x34
 801b596:	460c      	mov	r4, r1
 801b598:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b59c:	4616      	mov	r6, r2
 801b59e:	461f      	mov	r7, r3
 801b5a0:	4605      	mov	r5, r0
 801b5a2:	f000 fdad 	bl	801c100 <_localeconv_r>
 801b5a6:	f8d0 b000 	ldr.w	fp, [r0]
 801b5aa:	4658      	mov	r0, fp
 801b5ac:	f7e4 fee8 	bl	8000380 <strlen>
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5b4:	f8d8 3000 	ldr.w	r3, [r8]
 801b5b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b5bc:	6822      	ldr	r2, [r4, #0]
 801b5be:	9005      	str	r0, [sp, #20]
 801b5c0:	3307      	adds	r3, #7
 801b5c2:	f023 0307 	bic.w	r3, r3, #7
 801b5c6:	f103 0108 	add.w	r1, r3, #8
 801b5ca:	f8c8 1000 	str.w	r1, [r8]
 801b5ce:	ed93 0b00 	vldr	d0, [r3]
 801b5d2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801b830 <_printf_float+0x2a0>
 801b5d6:	eeb0 7bc0 	vabs.f64	d7, d0
 801b5da:	eeb4 7b46 	vcmp.f64	d7, d6
 801b5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5e2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801b5e6:	dd24      	ble.n	801b632 <_printf_float+0xa2>
 801b5e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5f0:	d502      	bpl.n	801b5f8 <_printf_float+0x68>
 801b5f2:	232d      	movs	r3, #45	@ 0x2d
 801b5f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b5f8:	498f      	ldr	r1, [pc, #572]	@ (801b838 <_printf_float+0x2a8>)
 801b5fa:	4b90      	ldr	r3, [pc, #576]	@ (801b83c <_printf_float+0x2ac>)
 801b5fc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801b600:	bf8c      	ite	hi
 801b602:	4688      	movhi	r8, r1
 801b604:	4698      	movls	r8, r3
 801b606:	f022 0204 	bic.w	r2, r2, #4
 801b60a:	2303      	movs	r3, #3
 801b60c:	6123      	str	r3, [r4, #16]
 801b60e:	6022      	str	r2, [r4, #0]
 801b610:	f04f 0a00 	mov.w	sl, #0
 801b614:	9700      	str	r7, [sp, #0]
 801b616:	4633      	mov	r3, r6
 801b618:	aa0b      	add	r2, sp, #44	@ 0x2c
 801b61a:	4621      	mov	r1, r4
 801b61c:	4628      	mov	r0, r5
 801b61e:	f000 f9d1 	bl	801b9c4 <_printf_common>
 801b622:	3001      	adds	r0, #1
 801b624:	f040 8089 	bne.w	801b73a <_printf_float+0x1aa>
 801b628:	f04f 30ff 	mov.w	r0, #4294967295
 801b62c:	b00d      	add	sp, #52	@ 0x34
 801b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b632:	eeb4 0b40 	vcmp.f64	d0, d0
 801b636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b63a:	d709      	bvc.n	801b650 <_printf_float+0xc0>
 801b63c:	ee10 3a90 	vmov	r3, s1
 801b640:	2b00      	cmp	r3, #0
 801b642:	bfbc      	itt	lt
 801b644:	232d      	movlt	r3, #45	@ 0x2d
 801b646:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801b64a:	497d      	ldr	r1, [pc, #500]	@ (801b840 <_printf_float+0x2b0>)
 801b64c:	4b7d      	ldr	r3, [pc, #500]	@ (801b844 <_printf_float+0x2b4>)
 801b64e:	e7d5      	b.n	801b5fc <_printf_float+0x6c>
 801b650:	6863      	ldr	r3, [r4, #4]
 801b652:	1c59      	adds	r1, r3, #1
 801b654:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801b658:	d139      	bne.n	801b6ce <_printf_float+0x13e>
 801b65a:	2306      	movs	r3, #6
 801b65c:	6063      	str	r3, [r4, #4]
 801b65e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801b662:	2300      	movs	r3, #0
 801b664:	6022      	str	r2, [r4, #0]
 801b666:	9303      	str	r3, [sp, #12]
 801b668:	ab0a      	add	r3, sp, #40	@ 0x28
 801b66a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b66e:	ab09      	add	r3, sp, #36	@ 0x24
 801b670:	9300      	str	r3, [sp, #0]
 801b672:	6861      	ldr	r1, [r4, #4]
 801b674:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801b678:	4628      	mov	r0, r5
 801b67a:	f7ff fefb 	bl	801b474 <__cvt>
 801b67e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b682:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b684:	4680      	mov	r8, r0
 801b686:	d129      	bne.n	801b6dc <_printf_float+0x14c>
 801b688:	1cc8      	adds	r0, r1, #3
 801b68a:	db02      	blt.n	801b692 <_printf_float+0x102>
 801b68c:	6863      	ldr	r3, [r4, #4]
 801b68e:	4299      	cmp	r1, r3
 801b690:	dd41      	ble.n	801b716 <_printf_float+0x186>
 801b692:	f1a9 0902 	sub.w	r9, r9, #2
 801b696:	fa5f f989 	uxtb.w	r9, r9
 801b69a:	3901      	subs	r1, #1
 801b69c:	464a      	mov	r2, r9
 801b69e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b6a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801b6a4:	f7ff ff3a 	bl	801b51c <__exponent>
 801b6a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b6aa:	1813      	adds	r3, r2, r0
 801b6ac:	2a01      	cmp	r2, #1
 801b6ae:	4682      	mov	sl, r0
 801b6b0:	6123      	str	r3, [r4, #16]
 801b6b2:	dc02      	bgt.n	801b6ba <_printf_float+0x12a>
 801b6b4:	6822      	ldr	r2, [r4, #0]
 801b6b6:	07d2      	lsls	r2, r2, #31
 801b6b8:	d501      	bpl.n	801b6be <_printf_float+0x12e>
 801b6ba:	3301      	adds	r3, #1
 801b6bc:	6123      	str	r3, [r4, #16]
 801b6be:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d0a6      	beq.n	801b614 <_printf_float+0x84>
 801b6c6:	232d      	movs	r3, #45	@ 0x2d
 801b6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b6cc:	e7a2      	b.n	801b614 <_printf_float+0x84>
 801b6ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b6d2:	d1c4      	bne.n	801b65e <_printf_float+0xce>
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d1c2      	bne.n	801b65e <_printf_float+0xce>
 801b6d8:	2301      	movs	r3, #1
 801b6da:	e7bf      	b.n	801b65c <_printf_float+0xcc>
 801b6dc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801b6e0:	d9db      	bls.n	801b69a <_printf_float+0x10a>
 801b6e2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801b6e6:	d118      	bne.n	801b71a <_printf_float+0x18a>
 801b6e8:	2900      	cmp	r1, #0
 801b6ea:	6863      	ldr	r3, [r4, #4]
 801b6ec:	dd0b      	ble.n	801b706 <_printf_float+0x176>
 801b6ee:	6121      	str	r1, [r4, #16]
 801b6f0:	b913      	cbnz	r3, 801b6f8 <_printf_float+0x168>
 801b6f2:	6822      	ldr	r2, [r4, #0]
 801b6f4:	07d0      	lsls	r0, r2, #31
 801b6f6:	d502      	bpl.n	801b6fe <_printf_float+0x16e>
 801b6f8:	3301      	adds	r3, #1
 801b6fa:	440b      	add	r3, r1
 801b6fc:	6123      	str	r3, [r4, #16]
 801b6fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b700:	f04f 0a00 	mov.w	sl, #0
 801b704:	e7db      	b.n	801b6be <_printf_float+0x12e>
 801b706:	b913      	cbnz	r3, 801b70e <_printf_float+0x17e>
 801b708:	6822      	ldr	r2, [r4, #0]
 801b70a:	07d2      	lsls	r2, r2, #31
 801b70c:	d501      	bpl.n	801b712 <_printf_float+0x182>
 801b70e:	3302      	adds	r3, #2
 801b710:	e7f4      	b.n	801b6fc <_printf_float+0x16c>
 801b712:	2301      	movs	r3, #1
 801b714:	e7f2      	b.n	801b6fc <_printf_float+0x16c>
 801b716:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801b71a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b71c:	4299      	cmp	r1, r3
 801b71e:	db05      	blt.n	801b72c <_printf_float+0x19c>
 801b720:	6823      	ldr	r3, [r4, #0]
 801b722:	6121      	str	r1, [r4, #16]
 801b724:	07d8      	lsls	r0, r3, #31
 801b726:	d5ea      	bpl.n	801b6fe <_printf_float+0x16e>
 801b728:	1c4b      	adds	r3, r1, #1
 801b72a:	e7e7      	b.n	801b6fc <_printf_float+0x16c>
 801b72c:	2900      	cmp	r1, #0
 801b72e:	bfd4      	ite	le
 801b730:	f1c1 0202 	rsble	r2, r1, #2
 801b734:	2201      	movgt	r2, #1
 801b736:	4413      	add	r3, r2
 801b738:	e7e0      	b.n	801b6fc <_printf_float+0x16c>
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	055a      	lsls	r2, r3, #21
 801b73e:	d407      	bmi.n	801b750 <_printf_float+0x1c0>
 801b740:	6923      	ldr	r3, [r4, #16]
 801b742:	4642      	mov	r2, r8
 801b744:	4631      	mov	r1, r6
 801b746:	4628      	mov	r0, r5
 801b748:	47b8      	blx	r7
 801b74a:	3001      	adds	r0, #1
 801b74c:	d12a      	bne.n	801b7a4 <_printf_float+0x214>
 801b74e:	e76b      	b.n	801b628 <_printf_float+0x98>
 801b750:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801b754:	f240 80e0 	bls.w	801b918 <_printf_float+0x388>
 801b758:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801b75c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b764:	d133      	bne.n	801b7ce <_printf_float+0x23e>
 801b766:	4a38      	ldr	r2, [pc, #224]	@ (801b848 <_printf_float+0x2b8>)
 801b768:	2301      	movs	r3, #1
 801b76a:	4631      	mov	r1, r6
 801b76c:	4628      	mov	r0, r5
 801b76e:	47b8      	blx	r7
 801b770:	3001      	adds	r0, #1
 801b772:	f43f af59 	beq.w	801b628 <_printf_float+0x98>
 801b776:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801b77a:	4543      	cmp	r3, r8
 801b77c:	db02      	blt.n	801b784 <_printf_float+0x1f4>
 801b77e:	6823      	ldr	r3, [r4, #0]
 801b780:	07d8      	lsls	r0, r3, #31
 801b782:	d50f      	bpl.n	801b7a4 <_printf_float+0x214>
 801b784:	9b05      	ldr	r3, [sp, #20]
 801b786:	465a      	mov	r2, fp
 801b788:	4631      	mov	r1, r6
 801b78a:	4628      	mov	r0, r5
 801b78c:	47b8      	blx	r7
 801b78e:	3001      	adds	r0, #1
 801b790:	f43f af4a 	beq.w	801b628 <_printf_float+0x98>
 801b794:	f04f 0900 	mov.w	r9, #0
 801b798:	f108 38ff 	add.w	r8, r8, #4294967295
 801b79c:	f104 0a1a 	add.w	sl, r4, #26
 801b7a0:	45c8      	cmp	r8, r9
 801b7a2:	dc09      	bgt.n	801b7b8 <_printf_float+0x228>
 801b7a4:	6823      	ldr	r3, [r4, #0]
 801b7a6:	079b      	lsls	r3, r3, #30
 801b7a8:	f100 8107 	bmi.w	801b9ba <_printf_float+0x42a>
 801b7ac:	68e0      	ldr	r0, [r4, #12]
 801b7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b7b0:	4298      	cmp	r0, r3
 801b7b2:	bfb8      	it	lt
 801b7b4:	4618      	movlt	r0, r3
 801b7b6:	e739      	b.n	801b62c <_printf_float+0x9c>
 801b7b8:	2301      	movs	r3, #1
 801b7ba:	4652      	mov	r2, sl
 801b7bc:	4631      	mov	r1, r6
 801b7be:	4628      	mov	r0, r5
 801b7c0:	47b8      	blx	r7
 801b7c2:	3001      	adds	r0, #1
 801b7c4:	f43f af30 	beq.w	801b628 <_printf_float+0x98>
 801b7c8:	f109 0901 	add.w	r9, r9, #1
 801b7cc:	e7e8      	b.n	801b7a0 <_printf_float+0x210>
 801b7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	dc3b      	bgt.n	801b84c <_printf_float+0x2bc>
 801b7d4:	4a1c      	ldr	r2, [pc, #112]	@ (801b848 <_printf_float+0x2b8>)
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	4631      	mov	r1, r6
 801b7da:	4628      	mov	r0, r5
 801b7dc:	47b8      	blx	r7
 801b7de:	3001      	adds	r0, #1
 801b7e0:	f43f af22 	beq.w	801b628 <_printf_float+0x98>
 801b7e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801b7e8:	ea59 0303 	orrs.w	r3, r9, r3
 801b7ec:	d102      	bne.n	801b7f4 <_printf_float+0x264>
 801b7ee:	6823      	ldr	r3, [r4, #0]
 801b7f0:	07d9      	lsls	r1, r3, #31
 801b7f2:	d5d7      	bpl.n	801b7a4 <_printf_float+0x214>
 801b7f4:	9b05      	ldr	r3, [sp, #20]
 801b7f6:	465a      	mov	r2, fp
 801b7f8:	4631      	mov	r1, r6
 801b7fa:	4628      	mov	r0, r5
 801b7fc:	47b8      	blx	r7
 801b7fe:	3001      	adds	r0, #1
 801b800:	f43f af12 	beq.w	801b628 <_printf_float+0x98>
 801b804:	f04f 0a00 	mov.w	sl, #0
 801b808:	f104 0b1a 	add.w	fp, r4, #26
 801b80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b80e:	425b      	negs	r3, r3
 801b810:	4553      	cmp	r3, sl
 801b812:	dc01      	bgt.n	801b818 <_printf_float+0x288>
 801b814:	464b      	mov	r3, r9
 801b816:	e794      	b.n	801b742 <_printf_float+0x1b2>
 801b818:	2301      	movs	r3, #1
 801b81a:	465a      	mov	r2, fp
 801b81c:	4631      	mov	r1, r6
 801b81e:	4628      	mov	r0, r5
 801b820:	47b8      	blx	r7
 801b822:	3001      	adds	r0, #1
 801b824:	f43f af00 	beq.w	801b628 <_printf_float+0x98>
 801b828:	f10a 0a01 	add.w	sl, sl, #1
 801b82c:	e7ee      	b.n	801b80c <_printf_float+0x27c>
 801b82e:	bf00      	nop
 801b830:	ffffffff 	.word	0xffffffff
 801b834:	7fefffff 	.word	0x7fefffff
 801b838:	0801efca 	.word	0x0801efca
 801b83c:	0801efc6 	.word	0x0801efc6
 801b840:	0801efd2 	.word	0x0801efd2
 801b844:	0801efce 	.word	0x0801efce
 801b848:	0801efd6 	.word	0x0801efd6
 801b84c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b84e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b852:	4553      	cmp	r3, sl
 801b854:	bfa8      	it	ge
 801b856:	4653      	movge	r3, sl
 801b858:	2b00      	cmp	r3, #0
 801b85a:	4699      	mov	r9, r3
 801b85c:	dc37      	bgt.n	801b8ce <_printf_float+0x33e>
 801b85e:	2300      	movs	r3, #0
 801b860:	9307      	str	r3, [sp, #28]
 801b862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b866:	f104 021a 	add.w	r2, r4, #26
 801b86a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b86c:	9907      	ldr	r1, [sp, #28]
 801b86e:	9306      	str	r3, [sp, #24]
 801b870:	eba3 0309 	sub.w	r3, r3, r9
 801b874:	428b      	cmp	r3, r1
 801b876:	dc31      	bgt.n	801b8dc <_printf_float+0x34c>
 801b878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b87a:	459a      	cmp	sl, r3
 801b87c:	dc3b      	bgt.n	801b8f6 <_printf_float+0x366>
 801b87e:	6823      	ldr	r3, [r4, #0]
 801b880:	07da      	lsls	r2, r3, #31
 801b882:	d438      	bmi.n	801b8f6 <_printf_float+0x366>
 801b884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b886:	ebaa 0903 	sub.w	r9, sl, r3
 801b88a:	9b06      	ldr	r3, [sp, #24]
 801b88c:	ebaa 0303 	sub.w	r3, sl, r3
 801b890:	4599      	cmp	r9, r3
 801b892:	bfa8      	it	ge
 801b894:	4699      	movge	r9, r3
 801b896:	f1b9 0f00 	cmp.w	r9, #0
 801b89a:	dc34      	bgt.n	801b906 <_printf_float+0x376>
 801b89c:	f04f 0800 	mov.w	r8, #0
 801b8a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b8a4:	f104 0b1a 	add.w	fp, r4, #26
 801b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8aa:	ebaa 0303 	sub.w	r3, sl, r3
 801b8ae:	eba3 0309 	sub.w	r3, r3, r9
 801b8b2:	4543      	cmp	r3, r8
 801b8b4:	f77f af76 	ble.w	801b7a4 <_printf_float+0x214>
 801b8b8:	2301      	movs	r3, #1
 801b8ba:	465a      	mov	r2, fp
 801b8bc:	4631      	mov	r1, r6
 801b8be:	4628      	mov	r0, r5
 801b8c0:	47b8      	blx	r7
 801b8c2:	3001      	adds	r0, #1
 801b8c4:	f43f aeb0 	beq.w	801b628 <_printf_float+0x98>
 801b8c8:	f108 0801 	add.w	r8, r8, #1
 801b8cc:	e7ec      	b.n	801b8a8 <_printf_float+0x318>
 801b8ce:	4642      	mov	r2, r8
 801b8d0:	4631      	mov	r1, r6
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	47b8      	blx	r7
 801b8d6:	3001      	adds	r0, #1
 801b8d8:	d1c1      	bne.n	801b85e <_printf_float+0x2ce>
 801b8da:	e6a5      	b.n	801b628 <_printf_float+0x98>
 801b8dc:	2301      	movs	r3, #1
 801b8de:	4631      	mov	r1, r6
 801b8e0:	4628      	mov	r0, r5
 801b8e2:	9206      	str	r2, [sp, #24]
 801b8e4:	47b8      	blx	r7
 801b8e6:	3001      	adds	r0, #1
 801b8e8:	f43f ae9e 	beq.w	801b628 <_printf_float+0x98>
 801b8ec:	9b07      	ldr	r3, [sp, #28]
 801b8ee:	9a06      	ldr	r2, [sp, #24]
 801b8f0:	3301      	adds	r3, #1
 801b8f2:	9307      	str	r3, [sp, #28]
 801b8f4:	e7b9      	b.n	801b86a <_printf_float+0x2da>
 801b8f6:	9b05      	ldr	r3, [sp, #20]
 801b8f8:	465a      	mov	r2, fp
 801b8fa:	4631      	mov	r1, r6
 801b8fc:	4628      	mov	r0, r5
 801b8fe:	47b8      	blx	r7
 801b900:	3001      	adds	r0, #1
 801b902:	d1bf      	bne.n	801b884 <_printf_float+0x2f4>
 801b904:	e690      	b.n	801b628 <_printf_float+0x98>
 801b906:	9a06      	ldr	r2, [sp, #24]
 801b908:	464b      	mov	r3, r9
 801b90a:	4442      	add	r2, r8
 801b90c:	4631      	mov	r1, r6
 801b90e:	4628      	mov	r0, r5
 801b910:	47b8      	blx	r7
 801b912:	3001      	adds	r0, #1
 801b914:	d1c2      	bne.n	801b89c <_printf_float+0x30c>
 801b916:	e687      	b.n	801b628 <_printf_float+0x98>
 801b918:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801b91c:	f1b9 0f01 	cmp.w	r9, #1
 801b920:	dc01      	bgt.n	801b926 <_printf_float+0x396>
 801b922:	07db      	lsls	r3, r3, #31
 801b924:	d536      	bpl.n	801b994 <_printf_float+0x404>
 801b926:	2301      	movs	r3, #1
 801b928:	4642      	mov	r2, r8
 801b92a:	4631      	mov	r1, r6
 801b92c:	4628      	mov	r0, r5
 801b92e:	47b8      	blx	r7
 801b930:	3001      	adds	r0, #1
 801b932:	f43f ae79 	beq.w	801b628 <_printf_float+0x98>
 801b936:	9b05      	ldr	r3, [sp, #20]
 801b938:	465a      	mov	r2, fp
 801b93a:	4631      	mov	r1, r6
 801b93c:	4628      	mov	r0, r5
 801b93e:	47b8      	blx	r7
 801b940:	3001      	adds	r0, #1
 801b942:	f43f ae71 	beq.w	801b628 <_printf_float+0x98>
 801b946:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801b94a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b952:	f109 39ff 	add.w	r9, r9, #4294967295
 801b956:	d018      	beq.n	801b98a <_printf_float+0x3fa>
 801b958:	464b      	mov	r3, r9
 801b95a:	f108 0201 	add.w	r2, r8, #1
 801b95e:	4631      	mov	r1, r6
 801b960:	4628      	mov	r0, r5
 801b962:	47b8      	blx	r7
 801b964:	3001      	adds	r0, #1
 801b966:	d10c      	bne.n	801b982 <_printf_float+0x3f2>
 801b968:	e65e      	b.n	801b628 <_printf_float+0x98>
 801b96a:	2301      	movs	r3, #1
 801b96c:	465a      	mov	r2, fp
 801b96e:	4631      	mov	r1, r6
 801b970:	4628      	mov	r0, r5
 801b972:	47b8      	blx	r7
 801b974:	3001      	adds	r0, #1
 801b976:	f43f ae57 	beq.w	801b628 <_printf_float+0x98>
 801b97a:	f108 0801 	add.w	r8, r8, #1
 801b97e:	45c8      	cmp	r8, r9
 801b980:	dbf3      	blt.n	801b96a <_printf_float+0x3da>
 801b982:	4653      	mov	r3, sl
 801b984:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801b988:	e6dc      	b.n	801b744 <_printf_float+0x1b4>
 801b98a:	f04f 0800 	mov.w	r8, #0
 801b98e:	f104 0b1a 	add.w	fp, r4, #26
 801b992:	e7f4      	b.n	801b97e <_printf_float+0x3ee>
 801b994:	2301      	movs	r3, #1
 801b996:	4642      	mov	r2, r8
 801b998:	e7e1      	b.n	801b95e <_printf_float+0x3ce>
 801b99a:	2301      	movs	r3, #1
 801b99c:	464a      	mov	r2, r9
 801b99e:	4631      	mov	r1, r6
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	47b8      	blx	r7
 801b9a4:	3001      	adds	r0, #1
 801b9a6:	f43f ae3f 	beq.w	801b628 <_printf_float+0x98>
 801b9aa:	f108 0801 	add.w	r8, r8, #1
 801b9ae:	68e3      	ldr	r3, [r4, #12]
 801b9b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b9b2:	1a5b      	subs	r3, r3, r1
 801b9b4:	4543      	cmp	r3, r8
 801b9b6:	dcf0      	bgt.n	801b99a <_printf_float+0x40a>
 801b9b8:	e6f8      	b.n	801b7ac <_printf_float+0x21c>
 801b9ba:	f04f 0800 	mov.w	r8, #0
 801b9be:	f104 0919 	add.w	r9, r4, #25
 801b9c2:	e7f4      	b.n	801b9ae <_printf_float+0x41e>

0801b9c4 <_printf_common>:
 801b9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9c8:	4616      	mov	r6, r2
 801b9ca:	4698      	mov	r8, r3
 801b9cc:	688a      	ldr	r2, [r1, #8]
 801b9ce:	690b      	ldr	r3, [r1, #16]
 801b9d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	bfb8      	it	lt
 801b9d8:	4613      	movlt	r3, r2
 801b9da:	6033      	str	r3, [r6, #0]
 801b9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b9e0:	4607      	mov	r7, r0
 801b9e2:	460c      	mov	r4, r1
 801b9e4:	b10a      	cbz	r2, 801b9ea <_printf_common+0x26>
 801b9e6:	3301      	adds	r3, #1
 801b9e8:	6033      	str	r3, [r6, #0]
 801b9ea:	6823      	ldr	r3, [r4, #0]
 801b9ec:	0699      	lsls	r1, r3, #26
 801b9ee:	bf42      	ittt	mi
 801b9f0:	6833      	ldrmi	r3, [r6, #0]
 801b9f2:	3302      	addmi	r3, #2
 801b9f4:	6033      	strmi	r3, [r6, #0]
 801b9f6:	6825      	ldr	r5, [r4, #0]
 801b9f8:	f015 0506 	ands.w	r5, r5, #6
 801b9fc:	d106      	bne.n	801ba0c <_printf_common+0x48>
 801b9fe:	f104 0a19 	add.w	sl, r4, #25
 801ba02:	68e3      	ldr	r3, [r4, #12]
 801ba04:	6832      	ldr	r2, [r6, #0]
 801ba06:	1a9b      	subs	r3, r3, r2
 801ba08:	42ab      	cmp	r3, r5
 801ba0a:	dc26      	bgt.n	801ba5a <_printf_common+0x96>
 801ba0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ba10:	6822      	ldr	r2, [r4, #0]
 801ba12:	3b00      	subs	r3, #0
 801ba14:	bf18      	it	ne
 801ba16:	2301      	movne	r3, #1
 801ba18:	0692      	lsls	r2, r2, #26
 801ba1a:	d42b      	bmi.n	801ba74 <_printf_common+0xb0>
 801ba1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ba20:	4641      	mov	r1, r8
 801ba22:	4638      	mov	r0, r7
 801ba24:	47c8      	blx	r9
 801ba26:	3001      	adds	r0, #1
 801ba28:	d01e      	beq.n	801ba68 <_printf_common+0xa4>
 801ba2a:	6823      	ldr	r3, [r4, #0]
 801ba2c:	6922      	ldr	r2, [r4, #16]
 801ba2e:	f003 0306 	and.w	r3, r3, #6
 801ba32:	2b04      	cmp	r3, #4
 801ba34:	bf02      	ittt	eq
 801ba36:	68e5      	ldreq	r5, [r4, #12]
 801ba38:	6833      	ldreq	r3, [r6, #0]
 801ba3a:	1aed      	subeq	r5, r5, r3
 801ba3c:	68a3      	ldr	r3, [r4, #8]
 801ba3e:	bf0c      	ite	eq
 801ba40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba44:	2500      	movne	r5, #0
 801ba46:	4293      	cmp	r3, r2
 801ba48:	bfc4      	itt	gt
 801ba4a:	1a9b      	subgt	r3, r3, r2
 801ba4c:	18ed      	addgt	r5, r5, r3
 801ba4e:	2600      	movs	r6, #0
 801ba50:	341a      	adds	r4, #26
 801ba52:	42b5      	cmp	r5, r6
 801ba54:	d11a      	bne.n	801ba8c <_printf_common+0xc8>
 801ba56:	2000      	movs	r0, #0
 801ba58:	e008      	b.n	801ba6c <_printf_common+0xa8>
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	4652      	mov	r2, sl
 801ba5e:	4641      	mov	r1, r8
 801ba60:	4638      	mov	r0, r7
 801ba62:	47c8      	blx	r9
 801ba64:	3001      	adds	r0, #1
 801ba66:	d103      	bne.n	801ba70 <_printf_common+0xac>
 801ba68:	f04f 30ff 	mov.w	r0, #4294967295
 801ba6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba70:	3501      	adds	r5, #1
 801ba72:	e7c6      	b.n	801ba02 <_printf_common+0x3e>
 801ba74:	18e1      	adds	r1, r4, r3
 801ba76:	1c5a      	adds	r2, r3, #1
 801ba78:	2030      	movs	r0, #48	@ 0x30
 801ba7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ba7e:	4422      	add	r2, r4
 801ba80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ba84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ba88:	3302      	adds	r3, #2
 801ba8a:	e7c7      	b.n	801ba1c <_printf_common+0x58>
 801ba8c:	2301      	movs	r3, #1
 801ba8e:	4622      	mov	r2, r4
 801ba90:	4641      	mov	r1, r8
 801ba92:	4638      	mov	r0, r7
 801ba94:	47c8      	blx	r9
 801ba96:	3001      	adds	r0, #1
 801ba98:	d0e6      	beq.n	801ba68 <_printf_common+0xa4>
 801ba9a:	3601      	adds	r6, #1
 801ba9c:	e7d9      	b.n	801ba52 <_printf_common+0x8e>
	...

0801baa0 <_printf_i>:
 801baa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801baa4:	7e0f      	ldrb	r7, [r1, #24]
 801baa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801baa8:	2f78      	cmp	r7, #120	@ 0x78
 801baaa:	4691      	mov	r9, r2
 801baac:	4680      	mov	r8, r0
 801baae:	460c      	mov	r4, r1
 801bab0:	469a      	mov	sl, r3
 801bab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bab6:	d807      	bhi.n	801bac8 <_printf_i+0x28>
 801bab8:	2f62      	cmp	r7, #98	@ 0x62
 801baba:	d80a      	bhi.n	801bad2 <_printf_i+0x32>
 801babc:	2f00      	cmp	r7, #0
 801babe:	f000 80d1 	beq.w	801bc64 <_printf_i+0x1c4>
 801bac2:	2f58      	cmp	r7, #88	@ 0x58
 801bac4:	f000 80b8 	beq.w	801bc38 <_printf_i+0x198>
 801bac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bacc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bad0:	e03a      	b.n	801bb48 <_printf_i+0xa8>
 801bad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bad6:	2b15      	cmp	r3, #21
 801bad8:	d8f6      	bhi.n	801bac8 <_printf_i+0x28>
 801bada:	a101      	add	r1, pc, #4	@ (adr r1, 801bae0 <_printf_i+0x40>)
 801badc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bae0:	0801bb39 	.word	0x0801bb39
 801bae4:	0801bb4d 	.word	0x0801bb4d
 801bae8:	0801bac9 	.word	0x0801bac9
 801baec:	0801bac9 	.word	0x0801bac9
 801baf0:	0801bac9 	.word	0x0801bac9
 801baf4:	0801bac9 	.word	0x0801bac9
 801baf8:	0801bb4d 	.word	0x0801bb4d
 801bafc:	0801bac9 	.word	0x0801bac9
 801bb00:	0801bac9 	.word	0x0801bac9
 801bb04:	0801bac9 	.word	0x0801bac9
 801bb08:	0801bac9 	.word	0x0801bac9
 801bb0c:	0801bc4b 	.word	0x0801bc4b
 801bb10:	0801bb77 	.word	0x0801bb77
 801bb14:	0801bc05 	.word	0x0801bc05
 801bb18:	0801bac9 	.word	0x0801bac9
 801bb1c:	0801bac9 	.word	0x0801bac9
 801bb20:	0801bc6d 	.word	0x0801bc6d
 801bb24:	0801bac9 	.word	0x0801bac9
 801bb28:	0801bb77 	.word	0x0801bb77
 801bb2c:	0801bac9 	.word	0x0801bac9
 801bb30:	0801bac9 	.word	0x0801bac9
 801bb34:	0801bc0d 	.word	0x0801bc0d
 801bb38:	6833      	ldr	r3, [r6, #0]
 801bb3a:	1d1a      	adds	r2, r3, #4
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	6032      	str	r2, [r6, #0]
 801bb40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bb44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bb48:	2301      	movs	r3, #1
 801bb4a:	e09c      	b.n	801bc86 <_printf_i+0x1e6>
 801bb4c:	6833      	ldr	r3, [r6, #0]
 801bb4e:	6820      	ldr	r0, [r4, #0]
 801bb50:	1d19      	adds	r1, r3, #4
 801bb52:	6031      	str	r1, [r6, #0]
 801bb54:	0606      	lsls	r6, r0, #24
 801bb56:	d501      	bpl.n	801bb5c <_printf_i+0xbc>
 801bb58:	681d      	ldr	r5, [r3, #0]
 801bb5a:	e003      	b.n	801bb64 <_printf_i+0xc4>
 801bb5c:	0645      	lsls	r5, r0, #25
 801bb5e:	d5fb      	bpl.n	801bb58 <_printf_i+0xb8>
 801bb60:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bb64:	2d00      	cmp	r5, #0
 801bb66:	da03      	bge.n	801bb70 <_printf_i+0xd0>
 801bb68:	232d      	movs	r3, #45	@ 0x2d
 801bb6a:	426d      	negs	r5, r5
 801bb6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb70:	4858      	ldr	r0, [pc, #352]	@ (801bcd4 <_printf_i+0x234>)
 801bb72:	230a      	movs	r3, #10
 801bb74:	e011      	b.n	801bb9a <_printf_i+0xfa>
 801bb76:	6821      	ldr	r1, [r4, #0]
 801bb78:	6833      	ldr	r3, [r6, #0]
 801bb7a:	0608      	lsls	r0, r1, #24
 801bb7c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bb80:	d402      	bmi.n	801bb88 <_printf_i+0xe8>
 801bb82:	0649      	lsls	r1, r1, #25
 801bb84:	bf48      	it	mi
 801bb86:	b2ad      	uxthmi	r5, r5
 801bb88:	2f6f      	cmp	r7, #111	@ 0x6f
 801bb8a:	4852      	ldr	r0, [pc, #328]	@ (801bcd4 <_printf_i+0x234>)
 801bb8c:	6033      	str	r3, [r6, #0]
 801bb8e:	bf14      	ite	ne
 801bb90:	230a      	movne	r3, #10
 801bb92:	2308      	moveq	r3, #8
 801bb94:	2100      	movs	r1, #0
 801bb96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bb9a:	6866      	ldr	r6, [r4, #4]
 801bb9c:	60a6      	str	r6, [r4, #8]
 801bb9e:	2e00      	cmp	r6, #0
 801bba0:	db05      	blt.n	801bbae <_printf_i+0x10e>
 801bba2:	6821      	ldr	r1, [r4, #0]
 801bba4:	432e      	orrs	r6, r5
 801bba6:	f021 0104 	bic.w	r1, r1, #4
 801bbaa:	6021      	str	r1, [r4, #0]
 801bbac:	d04b      	beq.n	801bc46 <_printf_i+0x1a6>
 801bbae:	4616      	mov	r6, r2
 801bbb0:	fbb5 f1f3 	udiv	r1, r5, r3
 801bbb4:	fb03 5711 	mls	r7, r3, r1, r5
 801bbb8:	5dc7      	ldrb	r7, [r0, r7]
 801bbba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bbbe:	462f      	mov	r7, r5
 801bbc0:	42bb      	cmp	r3, r7
 801bbc2:	460d      	mov	r5, r1
 801bbc4:	d9f4      	bls.n	801bbb0 <_printf_i+0x110>
 801bbc6:	2b08      	cmp	r3, #8
 801bbc8:	d10b      	bne.n	801bbe2 <_printf_i+0x142>
 801bbca:	6823      	ldr	r3, [r4, #0]
 801bbcc:	07df      	lsls	r7, r3, #31
 801bbce:	d508      	bpl.n	801bbe2 <_printf_i+0x142>
 801bbd0:	6923      	ldr	r3, [r4, #16]
 801bbd2:	6861      	ldr	r1, [r4, #4]
 801bbd4:	4299      	cmp	r1, r3
 801bbd6:	bfde      	ittt	le
 801bbd8:	2330      	movle	r3, #48	@ 0x30
 801bbda:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bbde:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bbe2:	1b92      	subs	r2, r2, r6
 801bbe4:	6122      	str	r2, [r4, #16]
 801bbe6:	f8cd a000 	str.w	sl, [sp]
 801bbea:	464b      	mov	r3, r9
 801bbec:	aa03      	add	r2, sp, #12
 801bbee:	4621      	mov	r1, r4
 801bbf0:	4640      	mov	r0, r8
 801bbf2:	f7ff fee7 	bl	801b9c4 <_printf_common>
 801bbf6:	3001      	adds	r0, #1
 801bbf8:	d14a      	bne.n	801bc90 <_printf_i+0x1f0>
 801bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 801bbfe:	b004      	add	sp, #16
 801bc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc04:	6823      	ldr	r3, [r4, #0]
 801bc06:	f043 0320 	orr.w	r3, r3, #32
 801bc0a:	6023      	str	r3, [r4, #0]
 801bc0c:	4832      	ldr	r0, [pc, #200]	@ (801bcd8 <_printf_i+0x238>)
 801bc0e:	2778      	movs	r7, #120	@ 0x78
 801bc10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bc14:	6823      	ldr	r3, [r4, #0]
 801bc16:	6831      	ldr	r1, [r6, #0]
 801bc18:	061f      	lsls	r7, r3, #24
 801bc1a:	f851 5b04 	ldr.w	r5, [r1], #4
 801bc1e:	d402      	bmi.n	801bc26 <_printf_i+0x186>
 801bc20:	065f      	lsls	r7, r3, #25
 801bc22:	bf48      	it	mi
 801bc24:	b2ad      	uxthmi	r5, r5
 801bc26:	6031      	str	r1, [r6, #0]
 801bc28:	07d9      	lsls	r1, r3, #31
 801bc2a:	bf44      	itt	mi
 801bc2c:	f043 0320 	orrmi.w	r3, r3, #32
 801bc30:	6023      	strmi	r3, [r4, #0]
 801bc32:	b11d      	cbz	r5, 801bc3c <_printf_i+0x19c>
 801bc34:	2310      	movs	r3, #16
 801bc36:	e7ad      	b.n	801bb94 <_printf_i+0xf4>
 801bc38:	4826      	ldr	r0, [pc, #152]	@ (801bcd4 <_printf_i+0x234>)
 801bc3a:	e7e9      	b.n	801bc10 <_printf_i+0x170>
 801bc3c:	6823      	ldr	r3, [r4, #0]
 801bc3e:	f023 0320 	bic.w	r3, r3, #32
 801bc42:	6023      	str	r3, [r4, #0]
 801bc44:	e7f6      	b.n	801bc34 <_printf_i+0x194>
 801bc46:	4616      	mov	r6, r2
 801bc48:	e7bd      	b.n	801bbc6 <_printf_i+0x126>
 801bc4a:	6833      	ldr	r3, [r6, #0]
 801bc4c:	6825      	ldr	r5, [r4, #0]
 801bc4e:	6961      	ldr	r1, [r4, #20]
 801bc50:	1d18      	adds	r0, r3, #4
 801bc52:	6030      	str	r0, [r6, #0]
 801bc54:	062e      	lsls	r6, r5, #24
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	d501      	bpl.n	801bc5e <_printf_i+0x1be>
 801bc5a:	6019      	str	r1, [r3, #0]
 801bc5c:	e002      	b.n	801bc64 <_printf_i+0x1c4>
 801bc5e:	0668      	lsls	r0, r5, #25
 801bc60:	d5fb      	bpl.n	801bc5a <_printf_i+0x1ba>
 801bc62:	8019      	strh	r1, [r3, #0]
 801bc64:	2300      	movs	r3, #0
 801bc66:	6123      	str	r3, [r4, #16]
 801bc68:	4616      	mov	r6, r2
 801bc6a:	e7bc      	b.n	801bbe6 <_printf_i+0x146>
 801bc6c:	6833      	ldr	r3, [r6, #0]
 801bc6e:	1d1a      	adds	r2, r3, #4
 801bc70:	6032      	str	r2, [r6, #0]
 801bc72:	681e      	ldr	r6, [r3, #0]
 801bc74:	6862      	ldr	r2, [r4, #4]
 801bc76:	2100      	movs	r1, #0
 801bc78:	4630      	mov	r0, r6
 801bc7a:	f7e4 fb31 	bl	80002e0 <memchr>
 801bc7e:	b108      	cbz	r0, 801bc84 <_printf_i+0x1e4>
 801bc80:	1b80      	subs	r0, r0, r6
 801bc82:	6060      	str	r0, [r4, #4]
 801bc84:	6863      	ldr	r3, [r4, #4]
 801bc86:	6123      	str	r3, [r4, #16]
 801bc88:	2300      	movs	r3, #0
 801bc8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bc8e:	e7aa      	b.n	801bbe6 <_printf_i+0x146>
 801bc90:	6923      	ldr	r3, [r4, #16]
 801bc92:	4632      	mov	r2, r6
 801bc94:	4649      	mov	r1, r9
 801bc96:	4640      	mov	r0, r8
 801bc98:	47d0      	blx	sl
 801bc9a:	3001      	adds	r0, #1
 801bc9c:	d0ad      	beq.n	801bbfa <_printf_i+0x15a>
 801bc9e:	6823      	ldr	r3, [r4, #0]
 801bca0:	079b      	lsls	r3, r3, #30
 801bca2:	d413      	bmi.n	801bccc <_printf_i+0x22c>
 801bca4:	68e0      	ldr	r0, [r4, #12]
 801bca6:	9b03      	ldr	r3, [sp, #12]
 801bca8:	4298      	cmp	r0, r3
 801bcaa:	bfb8      	it	lt
 801bcac:	4618      	movlt	r0, r3
 801bcae:	e7a6      	b.n	801bbfe <_printf_i+0x15e>
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	4632      	mov	r2, r6
 801bcb4:	4649      	mov	r1, r9
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	47d0      	blx	sl
 801bcba:	3001      	adds	r0, #1
 801bcbc:	d09d      	beq.n	801bbfa <_printf_i+0x15a>
 801bcbe:	3501      	adds	r5, #1
 801bcc0:	68e3      	ldr	r3, [r4, #12]
 801bcc2:	9903      	ldr	r1, [sp, #12]
 801bcc4:	1a5b      	subs	r3, r3, r1
 801bcc6:	42ab      	cmp	r3, r5
 801bcc8:	dcf2      	bgt.n	801bcb0 <_printf_i+0x210>
 801bcca:	e7eb      	b.n	801bca4 <_printf_i+0x204>
 801bccc:	2500      	movs	r5, #0
 801bcce:	f104 0619 	add.w	r6, r4, #25
 801bcd2:	e7f5      	b.n	801bcc0 <_printf_i+0x220>
 801bcd4:	0801efd8 	.word	0x0801efd8
 801bcd8:	0801efe9 	.word	0x0801efe9

0801bcdc <std>:
 801bcdc:	2300      	movs	r3, #0
 801bcde:	b510      	push	{r4, lr}
 801bce0:	4604      	mov	r4, r0
 801bce2:	e9c0 3300 	strd	r3, r3, [r0]
 801bce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bcea:	6083      	str	r3, [r0, #8]
 801bcec:	8181      	strh	r1, [r0, #12]
 801bcee:	6643      	str	r3, [r0, #100]	@ 0x64
 801bcf0:	81c2      	strh	r2, [r0, #14]
 801bcf2:	6183      	str	r3, [r0, #24]
 801bcf4:	4619      	mov	r1, r3
 801bcf6:	2208      	movs	r2, #8
 801bcf8:	305c      	adds	r0, #92	@ 0x5c
 801bcfa:	f000 f9f9 	bl	801c0f0 <memset>
 801bcfe:	4b0d      	ldr	r3, [pc, #52]	@ (801bd34 <std+0x58>)
 801bd00:	6263      	str	r3, [r4, #36]	@ 0x24
 801bd02:	4b0d      	ldr	r3, [pc, #52]	@ (801bd38 <std+0x5c>)
 801bd04:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bd06:	4b0d      	ldr	r3, [pc, #52]	@ (801bd3c <std+0x60>)
 801bd08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bd0a:	4b0d      	ldr	r3, [pc, #52]	@ (801bd40 <std+0x64>)
 801bd0c:	6323      	str	r3, [r4, #48]	@ 0x30
 801bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (801bd44 <std+0x68>)
 801bd10:	6224      	str	r4, [r4, #32]
 801bd12:	429c      	cmp	r4, r3
 801bd14:	d006      	beq.n	801bd24 <std+0x48>
 801bd16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bd1a:	4294      	cmp	r4, r2
 801bd1c:	d002      	beq.n	801bd24 <std+0x48>
 801bd1e:	33d0      	adds	r3, #208	@ 0xd0
 801bd20:	429c      	cmp	r4, r3
 801bd22:	d105      	bne.n	801bd30 <std+0x54>
 801bd24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd2c:	f000 baba 	b.w	801c2a4 <__retarget_lock_init_recursive>
 801bd30:	bd10      	pop	{r4, pc}
 801bd32:	bf00      	nop
 801bd34:	0801bf41 	.word	0x0801bf41
 801bd38:	0801bf63 	.word	0x0801bf63
 801bd3c:	0801bf9b 	.word	0x0801bf9b
 801bd40:	0801bfbf 	.word	0x0801bfbf
 801bd44:	2402399c 	.word	0x2402399c

0801bd48 <stdio_exit_handler>:
 801bd48:	4a02      	ldr	r2, [pc, #8]	@ (801bd54 <stdio_exit_handler+0xc>)
 801bd4a:	4903      	ldr	r1, [pc, #12]	@ (801bd58 <stdio_exit_handler+0x10>)
 801bd4c:	4803      	ldr	r0, [pc, #12]	@ (801bd5c <stdio_exit_handler+0x14>)
 801bd4e:	f000 b869 	b.w	801be24 <_fwalk_sglue>
 801bd52:	bf00      	nop
 801bd54:	24000028 	.word	0x24000028
 801bd58:	0801db15 	.word	0x0801db15
 801bd5c:	24000038 	.word	0x24000038

0801bd60 <cleanup_stdio>:
 801bd60:	6841      	ldr	r1, [r0, #4]
 801bd62:	4b0c      	ldr	r3, [pc, #48]	@ (801bd94 <cleanup_stdio+0x34>)
 801bd64:	4299      	cmp	r1, r3
 801bd66:	b510      	push	{r4, lr}
 801bd68:	4604      	mov	r4, r0
 801bd6a:	d001      	beq.n	801bd70 <cleanup_stdio+0x10>
 801bd6c:	f001 fed2 	bl	801db14 <_fflush_r>
 801bd70:	68a1      	ldr	r1, [r4, #8]
 801bd72:	4b09      	ldr	r3, [pc, #36]	@ (801bd98 <cleanup_stdio+0x38>)
 801bd74:	4299      	cmp	r1, r3
 801bd76:	d002      	beq.n	801bd7e <cleanup_stdio+0x1e>
 801bd78:	4620      	mov	r0, r4
 801bd7a:	f001 fecb 	bl	801db14 <_fflush_r>
 801bd7e:	68e1      	ldr	r1, [r4, #12]
 801bd80:	4b06      	ldr	r3, [pc, #24]	@ (801bd9c <cleanup_stdio+0x3c>)
 801bd82:	4299      	cmp	r1, r3
 801bd84:	d004      	beq.n	801bd90 <cleanup_stdio+0x30>
 801bd86:	4620      	mov	r0, r4
 801bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd8c:	f001 bec2 	b.w	801db14 <_fflush_r>
 801bd90:	bd10      	pop	{r4, pc}
 801bd92:	bf00      	nop
 801bd94:	2402399c 	.word	0x2402399c
 801bd98:	24023a04 	.word	0x24023a04
 801bd9c:	24023a6c 	.word	0x24023a6c

0801bda0 <global_stdio_init.part.0>:
 801bda0:	b510      	push	{r4, lr}
 801bda2:	4b0b      	ldr	r3, [pc, #44]	@ (801bdd0 <global_stdio_init.part.0+0x30>)
 801bda4:	4c0b      	ldr	r4, [pc, #44]	@ (801bdd4 <global_stdio_init.part.0+0x34>)
 801bda6:	4a0c      	ldr	r2, [pc, #48]	@ (801bdd8 <global_stdio_init.part.0+0x38>)
 801bda8:	601a      	str	r2, [r3, #0]
 801bdaa:	4620      	mov	r0, r4
 801bdac:	2200      	movs	r2, #0
 801bdae:	2104      	movs	r1, #4
 801bdb0:	f7ff ff94 	bl	801bcdc <std>
 801bdb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801bdb8:	2201      	movs	r2, #1
 801bdba:	2109      	movs	r1, #9
 801bdbc:	f7ff ff8e 	bl	801bcdc <std>
 801bdc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801bdc4:	2202      	movs	r2, #2
 801bdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdca:	2112      	movs	r1, #18
 801bdcc:	f7ff bf86 	b.w	801bcdc <std>
 801bdd0:	24023ad4 	.word	0x24023ad4
 801bdd4:	2402399c 	.word	0x2402399c
 801bdd8:	0801bd49 	.word	0x0801bd49

0801bddc <__sfp_lock_acquire>:
 801bddc:	4801      	ldr	r0, [pc, #4]	@ (801bde4 <__sfp_lock_acquire+0x8>)
 801bdde:	f000 ba62 	b.w	801c2a6 <__retarget_lock_acquire_recursive>
 801bde2:	bf00      	nop
 801bde4:	24023add 	.word	0x24023add

0801bde8 <__sfp_lock_release>:
 801bde8:	4801      	ldr	r0, [pc, #4]	@ (801bdf0 <__sfp_lock_release+0x8>)
 801bdea:	f000 ba5d 	b.w	801c2a8 <__retarget_lock_release_recursive>
 801bdee:	bf00      	nop
 801bdf0:	24023add 	.word	0x24023add

0801bdf4 <__sinit>:
 801bdf4:	b510      	push	{r4, lr}
 801bdf6:	4604      	mov	r4, r0
 801bdf8:	f7ff fff0 	bl	801bddc <__sfp_lock_acquire>
 801bdfc:	6a23      	ldr	r3, [r4, #32]
 801bdfe:	b11b      	cbz	r3, 801be08 <__sinit+0x14>
 801be00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be04:	f7ff bff0 	b.w	801bde8 <__sfp_lock_release>
 801be08:	4b04      	ldr	r3, [pc, #16]	@ (801be1c <__sinit+0x28>)
 801be0a:	6223      	str	r3, [r4, #32]
 801be0c:	4b04      	ldr	r3, [pc, #16]	@ (801be20 <__sinit+0x2c>)
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d1f5      	bne.n	801be00 <__sinit+0xc>
 801be14:	f7ff ffc4 	bl	801bda0 <global_stdio_init.part.0>
 801be18:	e7f2      	b.n	801be00 <__sinit+0xc>
 801be1a:	bf00      	nop
 801be1c:	0801bd61 	.word	0x0801bd61
 801be20:	24023ad4 	.word	0x24023ad4

0801be24 <_fwalk_sglue>:
 801be24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be28:	4607      	mov	r7, r0
 801be2a:	4688      	mov	r8, r1
 801be2c:	4614      	mov	r4, r2
 801be2e:	2600      	movs	r6, #0
 801be30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801be34:	f1b9 0901 	subs.w	r9, r9, #1
 801be38:	d505      	bpl.n	801be46 <_fwalk_sglue+0x22>
 801be3a:	6824      	ldr	r4, [r4, #0]
 801be3c:	2c00      	cmp	r4, #0
 801be3e:	d1f7      	bne.n	801be30 <_fwalk_sglue+0xc>
 801be40:	4630      	mov	r0, r6
 801be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be46:	89ab      	ldrh	r3, [r5, #12]
 801be48:	2b01      	cmp	r3, #1
 801be4a:	d907      	bls.n	801be5c <_fwalk_sglue+0x38>
 801be4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801be50:	3301      	adds	r3, #1
 801be52:	d003      	beq.n	801be5c <_fwalk_sglue+0x38>
 801be54:	4629      	mov	r1, r5
 801be56:	4638      	mov	r0, r7
 801be58:	47c0      	blx	r8
 801be5a:	4306      	orrs	r6, r0
 801be5c:	3568      	adds	r5, #104	@ 0x68
 801be5e:	e7e9      	b.n	801be34 <_fwalk_sglue+0x10>

0801be60 <iprintf>:
 801be60:	b40f      	push	{r0, r1, r2, r3}
 801be62:	b507      	push	{r0, r1, r2, lr}
 801be64:	4906      	ldr	r1, [pc, #24]	@ (801be80 <iprintf+0x20>)
 801be66:	ab04      	add	r3, sp, #16
 801be68:	6808      	ldr	r0, [r1, #0]
 801be6a:	f853 2b04 	ldr.w	r2, [r3], #4
 801be6e:	6881      	ldr	r1, [r0, #8]
 801be70:	9301      	str	r3, [sp, #4]
 801be72:	f001 fcb3 	bl	801d7dc <_vfiprintf_r>
 801be76:	b003      	add	sp, #12
 801be78:	f85d eb04 	ldr.w	lr, [sp], #4
 801be7c:	b004      	add	sp, #16
 801be7e:	4770      	bx	lr
 801be80:	24000034 	.word	0x24000034

0801be84 <_puts_r>:
 801be84:	6a03      	ldr	r3, [r0, #32]
 801be86:	b570      	push	{r4, r5, r6, lr}
 801be88:	6884      	ldr	r4, [r0, #8]
 801be8a:	4605      	mov	r5, r0
 801be8c:	460e      	mov	r6, r1
 801be8e:	b90b      	cbnz	r3, 801be94 <_puts_r+0x10>
 801be90:	f7ff ffb0 	bl	801bdf4 <__sinit>
 801be94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801be96:	07db      	lsls	r3, r3, #31
 801be98:	d405      	bmi.n	801bea6 <_puts_r+0x22>
 801be9a:	89a3      	ldrh	r3, [r4, #12]
 801be9c:	0598      	lsls	r0, r3, #22
 801be9e:	d402      	bmi.n	801bea6 <_puts_r+0x22>
 801bea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bea2:	f000 fa00 	bl	801c2a6 <__retarget_lock_acquire_recursive>
 801bea6:	89a3      	ldrh	r3, [r4, #12]
 801bea8:	0719      	lsls	r1, r3, #28
 801beaa:	d502      	bpl.n	801beb2 <_puts_r+0x2e>
 801beac:	6923      	ldr	r3, [r4, #16]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d135      	bne.n	801bf1e <_puts_r+0x9a>
 801beb2:	4621      	mov	r1, r4
 801beb4:	4628      	mov	r0, r5
 801beb6:	f000 f8c5 	bl	801c044 <__swsetup_r>
 801beba:	b380      	cbz	r0, 801bf1e <_puts_r+0x9a>
 801bebc:	f04f 35ff 	mov.w	r5, #4294967295
 801bec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bec2:	07da      	lsls	r2, r3, #31
 801bec4:	d405      	bmi.n	801bed2 <_puts_r+0x4e>
 801bec6:	89a3      	ldrh	r3, [r4, #12]
 801bec8:	059b      	lsls	r3, r3, #22
 801beca:	d402      	bmi.n	801bed2 <_puts_r+0x4e>
 801becc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bece:	f000 f9eb 	bl	801c2a8 <__retarget_lock_release_recursive>
 801bed2:	4628      	mov	r0, r5
 801bed4:	bd70      	pop	{r4, r5, r6, pc}
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	da04      	bge.n	801bee4 <_puts_r+0x60>
 801beda:	69a2      	ldr	r2, [r4, #24]
 801bedc:	429a      	cmp	r2, r3
 801bede:	dc17      	bgt.n	801bf10 <_puts_r+0x8c>
 801bee0:	290a      	cmp	r1, #10
 801bee2:	d015      	beq.n	801bf10 <_puts_r+0x8c>
 801bee4:	6823      	ldr	r3, [r4, #0]
 801bee6:	1c5a      	adds	r2, r3, #1
 801bee8:	6022      	str	r2, [r4, #0]
 801beea:	7019      	strb	r1, [r3, #0]
 801beec:	68a3      	ldr	r3, [r4, #8]
 801beee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bef2:	3b01      	subs	r3, #1
 801bef4:	60a3      	str	r3, [r4, #8]
 801bef6:	2900      	cmp	r1, #0
 801bef8:	d1ed      	bne.n	801bed6 <_puts_r+0x52>
 801befa:	2b00      	cmp	r3, #0
 801befc:	da11      	bge.n	801bf22 <_puts_r+0x9e>
 801befe:	4622      	mov	r2, r4
 801bf00:	210a      	movs	r1, #10
 801bf02:	4628      	mov	r0, r5
 801bf04:	f000 f85f 	bl	801bfc6 <__swbuf_r>
 801bf08:	3001      	adds	r0, #1
 801bf0a:	d0d7      	beq.n	801bebc <_puts_r+0x38>
 801bf0c:	250a      	movs	r5, #10
 801bf0e:	e7d7      	b.n	801bec0 <_puts_r+0x3c>
 801bf10:	4622      	mov	r2, r4
 801bf12:	4628      	mov	r0, r5
 801bf14:	f000 f857 	bl	801bfc6 <__swbuf_r>
 801bf18:	3001      	adds	r0, #1
 801bf1a:	d1e7      	bne.n	801beec <_puts_r+0x68>
 801bf1c:	e7ce      	b.n	801bebc <_puts_r+0x38>
 801bf1e:	3e01      	subs	r6, #1
 801bf20:	e7e4      	b.n	801beec <_puts_r+0x68>
 801bf22:	6823      	ldr	r3, [r4, #0]
 801bf24:	1c5a      	adds	r2, r3, #1
 801bf26:	6022      	str	r2, [r4, #0]
 801bf28:	220a      	movs	r2, #10
 801bf2a:	701a      	strb	r2, [r3, #0]
 801bf2c:	e7ee      	b.n	801bf0c <_puts_r+0x88>
	...

0801bf30 <puts>:
 801bf30:	4b02      	ldr	r3, [pc, #8]	@ (801bf3c <puts+0xc>)
 801bf32:	4601      	mov	r1, r0
 801bf34:	6818      	ldr	r0, [r3, #0]
 801bf36:	f7ff bfa5 	b.w	801be84 <_puts_r>
 801bf3a:	bf00      	nop
 801bf3c:	24000034 	.word	0x24000034

0801bf40 <__sread>:
 801bf40:	b510      	push	{r4, lr}
 801bf42:	460c      	mov	r4, r1
 801bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf48:	f000 f95e 	bl	801c208 <_read_r>
 801bf4c:	2800      	cmp	r0, #0
 801bf4e:	bfab      	itete	ge
 801bf50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bf52:	89a3      	ldrhlt	r3, [r4, #12]
 801bf54:	181b      	addge	r3, r3, r0
 801bf56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bf5a:	bfac      	ite	ge
 801bf5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bf5e:	81a3      	strhlt	r3, [r4, #12]
 801bf60:	bd10      	pop	{r4, pc}

0801bf62 <__swrite>:
 801bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf66:	461f      	mov	r7, r3
 801bf68:	898b      	ldrh	r3, [r1, #12]
 801bf6a:	05db      	lsls	r3, r3, #23
 801bf6c:	4605      	mov	r5, r0
 801bf6e:	460c      	mov	r4, r1
 801bf70:	4616      	mov	r6, r2
 801bf72:	d505      	bpl.n	801bf80 <__swrite+0x1e>
 801bf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf78:	2302      	movs	r3, #2
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	f000 f932 	bl	801c1e4 <_lseek_r>
 801bf80:	89a3      	ldrh	r3, [r4, #12]
 801bf82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bf8a:	81a3      	strh	r3, [r4, #12]
 801bf8c:	4632      	mov	r2, r6
 801bf8e:	463b      	mov	r3, r7
 801bf90:	4628      	mov	r0, r5
 801bf92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf96:	f000 b949 	b.w	801c22c <_write_r>

0801bf9a <__sseek>:
 801bf9a:	b510      	push	{r4, lr}
 801bf9c:	460c      	mov	r4, r1
 801bf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfa2:	f000 f91f 	bl	801c1e4 <_lseek_r>
 801bfa6:	1c43      	adds	r3, r0, #1
 801bfa8:	89a3      	ldrh	r3, [r4, #12]
 801bfaa:	bf15      	itete	ne
 801bfac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bfae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bfb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bfb6:	81a3      	strheq	r3, [r4, #12]
 801bfb8:	bf18      	it	ne
 801bfba:	81a3      	strhne	r3, [r4, #12]
 801bfbc:	bd10      	pop	{r4, pc}

0801bfbe <__sclose>:
 801bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfc2:	f000 b8a1 	b.w	801c108 <_close_r>

0801bfc6 <__swbuf_r>:
 801bfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfc8:	460e      	mov	r6, r1
 801bfca:	4614      	mov	r4, r2
 801bfcc:	4605      	mov	r5, r0
 801bfce:	b118      	cbz	r0, 801bfd8 <__swbuf_r+0x12>
 801bfd0:	6a03      	ldr	r3, [r0, #32]
 801bfd2:	b90b      	cbnz	r3, 801bfd8 <__swbuf_r+0x12>
 801bfd4:	f7ff ff0e 	bl	801bdf4 <__sinit>
 801bfd8:	69a3      	ldr	r3, [r4, #24]
 801bfda:	60a3      	str	r3, [r4, #8]
 801bfdc:	89a3      	ldrh	r3, [r4, #12]
 801bfde:	071a      	lsls	r2, r3, #28
 801bfe0:	d501      	bpl.n	801bfe6 <__swbuf_r+0x20>
 801bfe2:	6923      	ldr	r3, [r4, #16]
 801bfe4:	b943      	cbnz	r3, 801bff8 <__swbuf_r+0x32>
 801bfe6:	4621      	mov	r1, r4
 801bfe8:	4628      	mov	r0, r5
 801bfea:	f000 f82b 	bl	801c044 <__swsetup_r>
 801bfee:	b118      	cbz	r0, 801bff8 <__swbuf_r+0x32>
 801bff0:	f04f 37ff 	mov.w	r7, #4294967295
 801bff4:	4638      	mov	r0, r7
 801bff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bff8:	6823      	ldr	r3, [r4, #0]
 801bffa:	6922      	ldr	r2, [r4, #16]
 801bffc:	1a98      	subs	r0, r3, r2
 801bffe:	6963      	ldr	r3, [r4, #20]
 801c000:	b2f6      	uxtb	r6, r6
 801c002:	4283      	cmp	r3, r0
 801c004:	4637      	mov	r7, r6
 801c006:	dc05      	bgt.n	801c014 <__swbuf_r+0x4e>
 801c008:	4621      	mov	r1, r4
 801c00a:	4628      	mov	r0, r5
 801c00c:	f001 fd82 	bl	801db14 <_fflush_r>
 801c010:	2800      	cmp	r0, #0
 801c012:	d1ed      	bne.n	801bff0 <__swbuf_r+0x2a>
 801c014:	68a3      	ldr	r3, [r4, #8]
 801c016:	3b01      	subs	r3, #1
 801c018:	60a3      	str	r3, [r4, #8]
 801c01a:	6823      	ldr	r3, [r4, #0]
 801c01c:	1c5a      	adds	r2, r3, #1
 801c01e:	6022      	str	r2, [r4, #0]
 801c020:	701e      	strb	r6, [r3, #0]
 801c022:	6962      	ldr	r2, [r4, #20]
 801c024:	1c43      	adds	r3, r0, #1
 801c026:	429a      	cmp	r2, r3
 801c028:	d004      	beq.n	801c034 <__swbuf_r+0x6e>
 801c02a:	89a3      	ldrh	r3, [r4, #12]
 801c02c:	07db      	lsls	r3, r3, #31
 801c02e:	d5e1      	bpl.n	801bff4 <__swbuf_r+0x2e>
 801c030:	2e0a      	cmp	r6, #10
 801c032:	d1df      	bne.n	801bff4 <__swbuf_r+0x2e>
 801c034:	4621      	mov	r1, r4
 801c036:	4628      	mov	r0, r5
 801c038:	f001 fd6c 	bl	801db14 <_fflush_r>
 801c03c:	2800      	cmp	r0, #0
 801c03e:	d0d9      	beq.n	801bff4 <__swbuf_r+0x2e>
 801c040:	e7d6      	b.n	801bff0 <__swbuf_r+0x2a>
	...

0801c044 <__swsetup_r>:
 801c044:	b538      	push	{r3, r4, r5, lr}
 801c046:	4b29      	ldr	r3, [pc, #164]	@ (801c0ec <__swsetup_r+0xa8>)
 801c048:	4605      	mov	r5, r0
 801c04a:	6818      	ldr	r0, [r3, #0]
 801c04c:	460c      	mov	r4, r1
 801c04e:	b118      	cbz	r0, 801c058 <__swsetup_r+0x14>
 801c050:	6a03      	ldr	r3, [r0, #32]
 801c052:	b90b      	cbnz	r3, 801c058 <__swsetup_r+0x14>
 801c054:	f7ff fece 	bl	801bdf4 <__sinit>
 801c058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c05c:	0719      	lsls	r1, r3, #28
 801c05e:	d422      	bmi.n	801c0a6 <__swsetup_r+0x62>
 801c060:	06da      	lsls	r2, r3, #27
 801c062:	d407      	bmi.n	801c074 <__swsetup_r+0x30>
 801c064:	2209      	movs	r2, #9
 801c066:	602a      	str	r2, [r5, #0]
 801c068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c06c:	81a3      	strh	r3, [r4, #12]
 801c06e:	f04f 30ff 	mov.w	r0, #4294967295
 801c072:	e033      	b.n	801c0dc <__swsetup_r+0x98>
 801c074:	0758      	lsls	r0, r3, #29
 801c076:	d512      	bpl.n	801c09e <__swsetup_r+0x5a>
 801c078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c07a:	b141      	cbz	r1, 801c08e <__swsetup_r+0x4a>
 801c07c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c080:	4299      	cmp	r1, r3
 801c082:	d002      	beq.n	801c08a <__swsetup_r+0x46>
 801c084:	4628      	mov	r0, r5
 801c086:	f000 ff05 	bl	801ce94 <_free_r>
 801c08a:	2300      	movs	r3, #0
 801c08c:	6363      	str	r3, [r4, #52]	@ 0x34
 801c08e:	89a3      	ldrh	r3, [r4, #12]
 801c090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c094:	81a3      	strh	r3, [r4, #12]
 801c096:	2300      	movs	r3, #0
 801c098:	6063      	str	r3, [r4, #4]
 801c09a:	6923      	ldr	r3, [r4, #16]
 801c09c:	6023      	str	r3, [r4, #0]
 801c09e:	89a3      	ldrh	r3, [r4, #12]
 801c0a0:	f043 0308 	orr.w	r3, r3, #8
 801c0a4:	81a3      	strh	r3, [r4, #12]
 801c0a6:	6923      	ldr	r3, [r4, #16]
 801c0a8:	b94b      	cbnz	r3, 801c0be <__swsetup_r+0x7a>
 801c0aa:	89a3      	ldrh	r3, [r4, #12]
 801c0ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c0b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c0b4:	d003      	beq.n	801c0be <__swsetup_r+0x7a>
 801c0b6:	4621      	mov	r1, r4
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	f001 fd79 	bl	801dbb0 <__smakebuf_r>
 801c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0c2:	f013 0201 	ands.w	r2, r3, #1
 801c0c6:	d00a      	beq.n	801c0de <__swsetup_r+0x9a>
 801c0c8:	2200      	movs	r2, #0
 801c0ca:	60a2      	str	r2, [r4, #8]
 801c0cc:	6962      	ldr	r2, [r4, #20]
 801c0ce:	4252      	negs	r2, r2
 801c0d0:	61a2      	str	r2, [r4, #24]
 801c0d2:	6922      	ldr	r2, [r4, #16]
 801c0d4:	b942      	cbnz	r2, 801c0e8 <__swsetup_r+0xa4>
 801c0d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c0da:	d1c5      	bne.n	801c068 <__swsetup_r+0x24>
 801c0dc:	bd38      	pop	{r3, r4, r5, pc}
 801c0de:	0799      	lsls	r1, r3, #30
 801c0e0:	bf58      	it	pl
 801c0e2:	6962      	ldrpl	r2, [r4, #20]
 801c0e4:	60a2      	str	r2, [r4, #8]
 801c0e6:	e7f4      	b.n	801c0d2 <__swsetup_r+0x8e>
 801c0e8:	2000      	movs	r0, #0
 801c0ea:	e7f7      	b.n	801c0dc <__swsetup_r+0x98>
 801c0ec:	24000034 	.word	0x24000034

0801c0f0 <memset>:
 801c0f0:	4402      	add	r2, r0
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	4293      	cmp	r3, r2
 801c0f6:	d100      	bne.n	801c0fa <memset+0xa>
 801c0f8:	4770      	bx	lr
 801c0fa:	f803 1b01 	strb.w	r1, [r3], #1
 801c0fe:	e7f9      	b.n	801c0f4 <memset+0x4>

0801c100 <_localeconv_r>:
 801c100:	4800      	ldr	r0, [pc, #0]	@ (801c104 <_localeconv_r+0x4>)
 801c102:	4770      	bx	lr
 801c104:	24000174 	.word	0x24000174

0801c108 <_close_r>:
 801c108:	b538      	push	{r3, r4, r5, lr}
 801c10a:	4d06      	ldr	r5, [pc, #24]	@ (801c124 <_close_r+0x1c>)
 801c10c:	2300      	movs	r3, #0
 801c10e:	4604      	mov	r4, r0
 801c110:	4608      	mov	r0, r1
 801c112:	602b      	str	r3, [r5, #0]
 801c114:	f7e6 fe2c 	bl	8002d70 <_close>
 801c118:	1c43      	adds	r3, r0, #1
 801c11a:	d102      	bne.n	801c122 <_close_r+0x1a>
 801c11c:	682b      	ldr	r3, [r5, #0]
 801c11e:	b103      	cbz	r3, 801c122 <_close_r+0x1a>
 801c120:	6023      	str	r3, [r4, #0]
 801c122:	bd38      	pop	{r3, r4, r5, pc}
 801c124:	24023ad8 	.word	0x24023ad8

0801c128 <_reclaim_reent>:
 801c128:	4b2d      	ldr	r3, [pc, #180]	@ (801c1e0 <_reclaim_reent+0xb8>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	4283      	cmp	r3, r0
 801c12e:	b570      	push	{r4, r5, r6, lr}
 801c130:	4604      	mov	r4, r0
 801c132:	d053      	beq.n	801c1dc <_reclaim_reent+0xb4>
 801c134:	69c3      	ldr	r3, [r0, #28]
 801c136:	b31b      	cbz	r3, 801c180 <_reclaim_reent+0x58>
 801c138:	68db      	ldr	r3, [r3, #12]
 801c13a:	b163      	cbz	r3, 801c156 <_reclaim_reent+0x2e>
 801c13c:	2500      	movs	r5, #0
 801c13e:	69e3      	ldr	r3, [r4, #28]
 801c140:	68db      	ldr	r3, [r3, #12]
 801c142:	5959      	ldr	r1, [r3, r5]
 801c144:	b9b1      	cbnz	r1, 801c174 <_reclaim_reent+0x4c>
 801c146:	3504      	adds	r5, #4
 801c148:	2d80      	cmp	r5, #128	@ 0x80
 801c14a:	d1f8      	bne.n	801c13e <_reclaim_reent+0x16>
 801c14c:	69e3      	ldr	r3, [r4, #28]
 801c14e:	4620      	mov	r0, r4
 801c150:	68d9      	ldr	r1, [r3, #12]
 801c152:	f000 fe9f 	bl	801ce94 <_free_r>
 801c156:	69e3      	ldr	r3, [r4, #28]
 801c158:	6819      	ldr	r1, [r3, #0]
 801c15a:	b111      	cbz	r1, 801c162 <_reclaim_reent+0x3a>
 801c15c:	4620      	mov	r0, r4
 801c15e:	f000 fe99 	bl	801ce94 <_free_r>
 801c162:	69e3      	ldr	r3, [r4, #28]
 801c164:	689d      	ldr	r5, [r3, #8]
 801c166:	b15d      	cbz	r5, 801c180 <_reclaim_reent+0x58>
 801c168:	4629      	mov	r1, r5
 801c16a:	4620      	mov	r0, r4
 801c16c:	682d      	ldr	r5, [r5, #0]
 801c16e:	f000 fe91 	bl	801ce94 <_free_r>
 801c172:	e7f8      	b.n	801c166 <_reclaim_reent+0x3e>
 801c174:	680e      	ldr	r6, [r1, #0]
 801c176:	4620      	mov	r0, r4
 801c178:	f000 fe8c 	bl	801ce94 <_free_r>
 801c17c:	4631      	mov	r1, r6
 801c17e:	e7e1      	b.n	801c144 <_reclaim_reent+0x1c>
 801c180:	6961      	ldr	r1, [r4, #20]
 801c182:	b111      	cbz	r1, 801c18a <_reclaim_reent+0x62>
 801c184:	4620      	mov	r0, r4
 801c186:	f000 fe85 	bl	801ce94 <_free_r>
 801c18a:	69e1      	ldr	r1, [r4, #28]
 801c18c:	b111      	cbz	r1, 801c194 <_reclaim_reent+0x6c>
 801c18e:	4620      	mov	r0, r4
 801c190:	f000 fe80 	bl	801ce94 <_free_r>
 801c194:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c196:	b111      	cbz	r1, 801c19e <_reclaim_reent+0x76>
 801c198:	4620      	mov	r0, r4
 801c19a:	f000 fe7b 	bl	801ce94 <_free_r>
 801c19e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c1a0:	b111      	cbz	r1, 801c1a8 <_reclaim_reent+0x80>
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	f000 fe76 	bl	801ce94 <_free_r>
 801c1a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c1aa:	b111      	cbz	r1, 801c1b2 <_reclaim_reent+0x8a>
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f000 fe71 	bl	801ce94 <_free_r>
 801c1b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c1b4:	b111      	cbz	r1, 801c1bc <_reclaim_reent+0x94>
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f000 fe6c 	bl	801ce94 <_free_r>
 801c1bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c1be:	b111      	cbz	r1, 801c1c6 <_reclaim_reent+0x9e>
 801c1c0:	4620      	mov	r0, r4
 801c1c2:	f000 fe67 	bl	801ce94 <_free_r>
 801c1c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c1c8:	b111      	cbz	r1, 801c1d0 <_reclaim_reent+0xa8>
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	f000 fe62 	bl	801ce94 <_free_r>
 801c1d0:	6a23      	ldr	r3, [r4, #32]
 801c1d2:	b11b      	cbz	r3, 801c1dc <_reclaim_reent+0xb4>
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1da:	4718      	bx	r3
 801c1dc:	bd70      	pop	{r4, r5, r6, pc}
 801c1de:	bf00      	nop
 801c1e0:	24000034 	.word	0x24000034

0801c1e4 <_lseek_r>:
 801c1e4:	b538      	push	{r3, r4, r5, lr}
 801c1e6:	4d07      	ldr	r5, [pc, #28]	@ (801c204 <_lseek_r+0x20>)
 801c1e8:	4604      	mov	r4, r0
 801c1ea:	4608      	mov	r0, r1
 801c1ec:	4611      	mov	r1, r2
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	602a      	str	r2, [r5, #0]
 801c1f2:	461a      	mov	r2, r3
 801c1f4:	f7e6 fde3 	bl	8002dbe <_lseek>
 801c1f8:	1c43      	adds	r3, r0, #1
 801c1fa:	d102      	bne.n	801c202 <_lseek_r+0x1e>
 801c1fc:	682b      	ldr	r3, [r5, #0]
 801c1fe:	b103      	cbz	r3, 801c202 <_lseek_r+0x1e>
 801c200:	6023      	str	r3, [r4, #0]
 801c202:	bd38      	pop	{r3, r4, r5, pc}
 801c204:	24023ad8 	.word	0x24023ad8

0801c208 <_read_r>:
 801c208:	b538      	push	{r3, r4, r5, lr}
 801c20a:	4d07      	ldr	r5, [pc, #28]	@ (801c228 <_read_r+0x20>)
 801c20c:	4604      	mov	r4, r0
 801c20e:	4608      	mov	r0, r1
 801c210:	4611      	mov	r1, r2
 801c212:	2200      	movs	r2, #0
 801c214:	602a      	str	r2, [r5, #0]
 801c216:	461a      	mov	r2, r3
 801c218:	f7e6 fd71 	bl	8002cfe <_read>
 801c21c:	1c43      	adds	r3, r0, #1
 801c21e:	d102      	bne.n	801c226 <_read_r+0x1e>
 801c220:	682b      	ldr	r3, [r5, #0]
 801c222:	b103      	cbz	r3, 801c226 <_read_r+0x1e>
 801c224:	6023      	str	r3, [r4, #0]
 801c226:	bd38      	pop	{r3, r4, r5, pc}
 801c228:	24023ad8 	.word	0x24023ad8

0801c22c <_write_r>:
 801c22c:	b538      	push	{r3, r4, r5, lr}
 801c22e:	4d07      	ldr	r5, [pc, #28]	@ (801c24c <_write_r+0x20>)
 801c230:	4604      	mov	r4, r0
 801c232:	4608      	mov	r0, r1
 801c234:	4611      	mov	r1, r2
 801c236:	2200      	movs	r2, #0
 801c238:	602a      	str	r2, [r5, #0]
 801c23a:	461a      	mov	r2, r3
 801c23c:	f7e6 fd7c 	bl	8002d38 <_write>
 801c240:	1c43      	adds	r3, r0, #1
 801c242:	d102      	bne.n	801c24a <_write_r+0x1e>
 801c244:	682b      	ldr	r3, [r5, #0]
 801c246:	b103      	cbz	r3, 801c24a <_write_r+0x1e>
 801c248:	6023      	str	r3, [r4, #0]
 801c24a:	bd38      	pop	{r3, r4, r5, pc}
 801c24c:	24023ad8 	.word	0x24023ad8

0801c250 <__errno>:
 801c250:	4b01      	ldr	r3, [pc, #4]	@ (801c258 <__errno+0x8>)
 801c252:	6818      	ldr	r0, [r3, #0]
 801c254:	4770      	bx	lr
 801c256:	bf00      	nop
 801c258:	24000034 	.word	0x24000034

0801c25c <__libc_init_array>:
 801c25c:	b570      	push	{r4, r5, r6, lr}
 801c25e:	4d0d      	ldr	r5, [pc, #52]	@ (801c294 <__libc_init_array+0x38>)
 801c260:	4c0d      	ldr	r4, [pc, #52]	@ (801c298 <__libc_init_array+0x3c>)
 801c262:	1b64      	subs	r4, r4, r5
 801c264:	10a4      	asrs	r4, r4, #2
 801c266:	2600      	movs	r6, #0
 801c268:	42a6      	cmp	r6, r4
 801c26a:	d109      	bne.n	801c280 <__libc_init_array+0x24>
 801c26c:	4d0b      	ldr	r5, [pc, #44]	@ (801c29c <__libc_init_array+0x40>)
 801c26e:	4c0c      	ldr	r4, [pc, #48]	@ (801c2a0 <__libc_init_array+0x44>)
 801c270:	f001 fdbc 	bl	801ddec <_init>
 801c274:	1b64      	subs	r4, r4, r5
 801c276:	10a4      	asrs	r4, r4, #2
 801c278:	2600      	movs	r6, #0
 801c27a:	42a6      	cmp	r6, r4
 801c27c:	d105      	bne.n	801c28a <__libc_init_array+0x2e>
 801c27e:	bd70      	pop	{r4, r5, r6, pc}
 801c280:	f855 3b04 	ldr.w	r3, [r5], #4
 801c284:	4798      	blx	r3
 801c286:	3601      	adds	r6, #1
 801c288:	e7ee      	b.n	801c268 <__libc_init_array+0xc>
 801c28a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c28e:	4798      	blx	r3
 801c290:	3601      	adds	r6, #1
 801c292:	e7f2      	b.n	801c27a <__libc_init_array+0x1e>
 801c294:	0801f344 	.word	0x0801f344
 801c298:	0801f344 	.word	0x0801f344
 801c29c:	0801f344 	.word	0x0801f344
 801c2a0:	0801f348 	.word	0x0801f348

0801c2a4 <__retarget_lock_init_recursive>:
 801c2a4:	4770      	bx	lr

0801c2a6 <__retarget_lock_acquire_recursive>:
 801c2a6:	4770      	bx	lr

0801c2a8 <__retarget_lock_release_recursive>:
 801c2a8:	4770      	bx	lr

0801c2aa <memcpy>:
 801c2aa:	440a      	add	r2, r1
 801c2ac:	4291      	cmp	r1, r2
 801c2ae:	f100 33ff 	add.w	r3, r0, #4294967295
 801c2b2:	d100      	bne.n	801c2b6 <memcpy+0xc>
 801c2b4:	4770      	bx	lr
 801c2b6:	b510      	push	{r4, lr}
 801c2b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c2bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c2c0:	4291      	cmp	r1, r2
 801c2c2:	d1f9      	bne.n	801c2b8 <memcpy+0xe>
 801c2c4:	bd10      	pop	{r4, pc}

0801c2c6 <quorem>:
 801c2c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ca:	6903      	ldr	r3, [r0, #16]
 801c2cc:	690c      	ldr	r4, [r1, #16]
 801c2ce:	42a3      	cmp	r3, r4
 801c2d0:	4607      	mov	r7, r0
 801c2d2:	db7e      	blt.n	801c3d2 <quorem+0x10c>
 801c2d4:	3c01      	subs	r4, #1
 801c2d6:	f101 0814 	add.w	r8, r1, #20
 801c2da:	00a3      	lsls	r3, r4, #2
 801c2dc:	f100 0514 	add.w	r5, r0, #20
 801c2e0:	9300      	str	r3, [sp, #0]
 801c2e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c2e6:	9301      	str	r3, [sp, #4]
 801c2e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c2ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c2f0:	3301      	adds	r3, #1
 801c2f2:	429a      	cmp	r2, r3
 801c2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 801c2fc:	d32e      	bcc.n	801c35c <quorem+0x96>
 801c2fe:	f04f 0a00 	mov.w	sl, #0
 801c302:	46c4      	mov	ip, r8
 801c304:	46ae      	mov	lr, r5
 801c306:	46d3      	mov	fp, sl
 801c308:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c30c:	b298      	uxth	r0, r3
 801c30e:	fb06 a000 	mla	r0, r6, r0, sl
 801c312:	0c02      	lsrs	r2, r0, #16
 801c314:	0c1b      	lsrs	r3, r3, #16
 801c316:	fb06 2303 	mla	r3, r6, r3, r2
 801c31a:	f8de 2000 	ldr.w	r2, [lr]
 801c31e:	b280      	uxth	r0, r0
 801c320:	b292      	uxth	r2, r2
 801c322:	1a12      	subs	r2, r2, r0
 801c324:	445a      	add	r2, fp
 801c326:	f8de 0000 	ldr.w	r0, [lr]
 801c32a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c32e:	b29b      	uxth	r3, r3
 801c330:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c334:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c338:	b292      	uxth	r2, r2
 801c33a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c33e:	45e1      	cmp	r9, ip
 801c340:	f84e 2b04 	str.w	r2, [lr], #4
 801c344:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c348:	d2de      	bcs.n	801c308 <quorem+0x42>
 801c34a:	9b00      	ldr	r3, [sp, #0]
 801c34c:	58eb      	ldr	r3, [r5, r3]
 801c34e:	b92b      	cbnz	r3, 801c35c <quorem+0x96>
 801c350:	9b01      	ldr	r3, [sp, #4]
 801c352:	3b04      	subs	r3, #4
 801c354:	429d      	cmp	r5, r3
 801c356:	461a      	mov	r2, r3
 801c358:	d32f      	bcc.n	801c3ba <quorem+0xf4>
 801c35a:	613c      	str	r4, [r7, #16]
 801c35c:	4638      	mov	r0, r7
 801c35e:	f001 f90b 	bl	801d578 <__mcmp>
 801c362:	2800      	cmp	r0, #0
 801c364:	db25      	blt.n	801c3b2 <quorem+0xec>
 801c366:	4629      	mov	r1, r5
 801c368:	2000      	movs	r0, #0
 801c36a:	f858 2b04 	ldr.w	r2, [r8], #4
 801c36e:	f8d1 c000 	ldr.w	ip, [r1]
 801c372:	fa1f fe82 	uxth.w	lr, r2
 801c376:	fa1f f38c 	uxth.w	r3, ip
 801c37a:	eba3 030e 	sub.w	r3, r3, lr
 801c37e:	4403      	add	r3, r0
 801c380:	0c12      	lsrs	r2, r2, #16
 801c382:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c386:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c38a:	b29b      	uxth	r3, r3
 801c38c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c390:	45c1      	cmp	r9, r8
 801c392:	f841 3b04 	str.w	r3, [r1], #4
 801c396:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c39a:	d2e6      	bcs.n	801c36a <quorem+0xa4>
 801c39c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3a4:	b922      	cbnz	r2, 801c3b0 <quorem+0xea>
 801c3a6:	3b04      	subs	r3, #4
 801c3a8:	429d      	cmp	r5, r3
 801c3aa:	461a      	mov	r2, r3
 801c3ac:	d30b      	bcc.n	801c3c6 <quorem+0x100>
 801c3ae:	613c      	str	r4, [r7, #16]
 801c3b0:	3601      	adds	r6, #1
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	b003      	add	sp, #12
 801c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ba:	6812      	ldr	r2, [r2, #0]
 801c3bc:	3b04      	subs	r3, #4
 801c3be:	2a00      	cmp	r2, #0
 801c3c0:	d1cb      	bne.n	801c35a <quorem+0x94>
 801c3c2:	3c01      	subs	r4, #1
 801c3c4:	e7c6      	b.n	801c354 <quorem+0x8e>
 801c3c6:	6812      	ldr	r2, [r2, #0]
 801c3c8:	3b04      	subs	r3, #4
 801c3ca:	2a00      	cmp	r2, #0
 801c3cc:	d1ef      	bne.n	801c3ae <quorem+0xe8>
 801c3ce:	3c01      	subs	r4, #1
 801c3d0:	e7ea      	b.n	801c3a8 <quorem+0xe2>
 801c3d2:	2000      	movs	r0, #0
 801c3d4:	e7ee      	b.n	801c3b4 <quorem+0xee>
	...

0801c3d8 <_dtoa_r>:
 801c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3dc:	ed2d 8b02 	vpush	{d8}
 801c3e0:	69c7      	ldr	r7, [r0, #28]
 801c3e2:	b091      	sub	sp, #68	@ 0x44
 801c3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c3e8:	ec55 4b10 	vmov	r4, r5, d0
 801c3ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801c3ee:	9107      	str	r1, [sp, #28]
 801c3f0:	4681      	mov	r9, r0
 801c3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c3f4:	930d      	str	r3, [sp, #52]	@ 0x34
 801c3f6:	b97f      	cbnz	r7, 801c418 <_dtoa_r+0x40>
 801c3f8:	2010      	movs	r0, #16
 801c3fa:	f000 fd95 	bl	801cf28 <malloc>
 801c3fe:	4602      	mov	r2, r0
 801c400:	f8c9 001c 	str.w	r0, [r9, #28]
 801c404:	b920      	cbnz	r0, 801c410 <_dtoa_r+0x38>
 801c406:	4ba0      	ldr	r3, [pc, #640]	@ (801c688 <_dtoa_r+0x2b0>)
 801c408:	21ef      	movs	r1, #239	@ 0xef
 801c40a:	48a0      	ldr	r0, [pc, #640]	@ (801c68c <_dtoa_r+0x2b4>)
 801c40c:	f001 fc3e 	bl	801dc8c <__assert_func>
 801c410:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c414:	6007      	str	r7, [r0, #0]
 801c416:	60c7      	str	r7, [r0, #12]
 801c418:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c41c:	6819      	ldr	r1, [r3, #0]
 801c41e:	b159      	cbz	r1, 801c438 <_dtoa_r+0x60>
 801c420:	685a      	ldr	r2, [r3, #4]
 801c422:	604a      	str	r2, [r1, #4]
 801c424:	2301      	movs	r3, #1
 801c426:	4093      	lsls	r3, r2
 801c428:	608b      	str	r3, [r1, #8]
 801c42a:	4648      	mov	r0, r9
 801c42c:	f000 fe72 	bl	801d114 <_Bfree>
 801c430:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c434:	2200      	movs	r2, #0
 801c436:	601a      	str	r2, [r3, #0]
 801c438:	1e2b      	subs	r3, r5, #0
 801c43a:	bfbb      	ittet	lt
 801c43c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c440:	9303      	strlt	r3, [sp, #12]
 801c442:	2300      	movge	r3, #0
 801c444:	2201      	movlt	r2, #1
 801c446:	bfac      	ite	ge
 801c448:	6033      	strge	r3, [r6, #0]
 801c44a:	6032      	strlt	r2, [r6, #0]
 801c44c:	4b90      	ldr	r3, [pc, #576]	@ (801c690 <_dtoa_r+0x2b8>)
 801c44e:	9e03      	ldr	r6, [sp, #12]
 801c450:	43b3      	bics	r3, r6
 801c452:	d110      	bne.n	801c476 <_dtoa_r+0x9e>
 801c454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c456:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c45a:	6013      	str	r3, [r2, #0]
 801c45c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801c460:	4323      	orrs	r3, r4
 801c462:	f000 84e6 	beq.w	801ce32 <_dtoa_r+0xa5a>
 801c466:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c468:	4f8a      	ldr	r7, [pc, #552]	@ (801c694 <_dtoa_r+0x2bc>)
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	f000 84e8 	beq.w	801ce40 <_dtoa_r+0xa68>
 801c470:	1cfb      	adds	r3, r7, #3
 801c472:	f000 bce3 	b.w	801ce3c <_dtoa_r+0xa64>
 801c476:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c47a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c482:	d10a      	bne.n	801c49a <_dtoa_r+0xc2>
 801c484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c486:	2301      	movs	r3, #1
 801c488:	6013      	str	r3, [r2, #0]
 801c48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c48c:	b113      	cbz	r3, 801c494 <_dtoa_r+0xbc>
 801c48e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801c490:	4b81      	ldr	r3, [pc, #516]	@ (801c698 <_dtoa_r+0x2c0>)
 801c492:	6013      	str	r3, [r2, #0]
 801c494:	4f81      	ldr	r7, [pc, #516]	@ (801c69c <_dtoa_r+0x2c4>)
 801c496:	f000 bcd3 	b.w	801ce40 <_dtoa_r+0xa68>
 801c49a:	aa0e      	add	r2, sp, #56	@ 0x38
 801c49c:	a90f      	add	r1, sp, #60	@ 0x3c
 801c49e:	4648      	mov	r0, r9
 801c4a0:	eeb0 0b48 	vmov.f64	d0, d8
 801c4a4:	f001 f918 	bl	801d6d8 <__d2b>
 801c4a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801c4ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c4ae:	9001      	str	r0, [sp, #4]
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d045      	beq.n	801c540 <_dtoa_r+0x168>
 801c4b4:	eeb0 7b48 	vmov.f64	d7, d8
 801c4b8:	ee18 1a90 	vmov	r1, s17
 801c4bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c4c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801c4c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801c4c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801c4cc:	2500      	movs	r5, #0
 801c4ce:	ee07 1a90 	vmov	s15, r1
 801c4d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801c4d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801c670 <_dtoa_r+0x298>
 801c4da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c4de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801c678 <_dtoa_r+0x2a0>
 801c4e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c4e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801c680 <_dtoa_r+0x2a8>
 801c4ea:	ee07 3a90 	vmov	s15, r3
 801c4ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c4f2:	eeb0 7b46 	vmov.f64	d7, d6
 801c4f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c4fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c4fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c506:	ee16 8a90 	vmov	r8, s13
 801c50a:	d508      	bpl.n	801c51e <_dtoa_r+0x146>
 801c50c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c510:	eeb4 6b47 	vcmp.f64	d6, d7
 801c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c518:	bf18      	it	ne
 801c51a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801c51e:	f1b8 0f16 	cmp.w	r8, #22
 801c522:	d82b      	bhi.n	801c57c <_dtoa_r+0x1a4>
 801c524:	495e      	ldr	r1, [pc, #376]	@ (801c6a0 <_dtoa_r+0x2c8>)
 801c526:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801c52a:	ed91 7b00 	vldr	d7, [r1]
 801c52e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c536:	d501      	bpl.n	801c53c <_dtoa_r+0x164>
 801c538:	f108 38ff 	add.w	r8, r8, #4294967295
 801c53c:	2100      	movs	r1, #0
 801c53e:	e01e      	b.n	801c57e <_dtoa_r+0x1a6>
 801c540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c542:	4413      	add	r3, r2
 801c544:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801c548:	2920      	cmp	r1, #32
 801c54a:	bfc1      	itttt	gt
 801c54c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801c550:	408e      	lslgt	r6, r1
 801c552:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801c556:	fa24 f101 	lsrgt.w	r1, r4, r1
 801c55a:	bfd6      	itet	le
 801c55c:	f1c1 0120 	rsble	r1, r1, #32
 801c560:	4331      	orrgt	r1, r6
 801c562:	fa04 f101 	lslle.w	r1, r4, r1
 801c566:	ee07 1a90 	vmov	s15, r1
 801c56a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c56e:	3b01      	subs	r3, #1
 801c570:	ee17 1a90 	vmov	r1, s15
 801c574:	2501      	movs	r5, #1
 801c576:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801c57a:	e7a8      	b.n	801c4ce <_dtoa_r+0xf6>
 801c57c:	2101      	movs	r1, #1
 801c57e:	1ad2      	subs	r2, r2, r3
 801c580:	1e53      	subs	r3, r2, #1
 801c582:	9306      	str	r3, [sp, #24]
 801c584:	bf45      	ittet	mi
 801c586:	f1c2 0301 	rsbmi	r3, r2, #1
 801c58a:	9304      	strmi	r3, [sp, #16]
 801c58c:	2300      	movpl	r3, #0
 801c58e:	2300      	movmi	r3, #0
 801c590:	bf4c      	ite	mi
 801c592:	9306      	strmi	r3, [sp, #24]
 801c594:	9304      	strpl	r3, [sp, #16]
 801c596:	f1b8 0f00 	cmp.w	r8, #0
 801c59a:	910c      	str	r1, [sp, #48]	@ 0x30
 801c59c:	db18      	blt.n	801c5d0 <_dtoa_r+0x1f8>
 801c59e:	9b06      	ldr	r3, [sp, #24]
 801c5a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801c5a4:	4443      	add	r3, r8
 801c5a6:	9306      	str	r3, [sp, #24]
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	9a07      	ldr	r2, [sp, #28]
 801c5ac:	2a09      	cmp	r2, #9
 801c5ae:	d845      	bhi.n	801c63c <_dtoa_r+0x264>
 801c5b0:	2a05      	cmp	r2, #5
 801c5b2:	bfc4      	itt	gt
 801c5b4:	3a04      	subgt	r2, #4
 801c5b6:	9207      	strgt	r2, [sp, #28]
 801c5b8:	9a07      	ldr	r2, [sp, #28]
 801c5ba:	f1a2 0202 	sub.w	r2, r2, #2
 801c5be:	bfcc      	ite	gt
 801c5c0:	2400      	movgt	r4, #0
 801c5c2:	2401      	movle	r4, #1
 801c5c4:	2a03      	cmp	r2, #3
 801c5c6:	d844      	bhi.n	801c652 <_dtoa_r+0x27a>
 801c5c8:	e8df f002 	tbb	[pc, r2]
 801c5cc:	0b173634 	.word	0x0b173634
 801c5d0:	9b04      	ldr	r3, [sp, #16]
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	eba3 0308 	sub.w	r3, r3, r8
 801c5d8:	9304      	str	r3, [sp, #16]
 801c5da:	920a      	str	r2, [sp, #40]	@ 0x28
 801c5dc:	f1c8 0300 	rsb	r3, r8, #0
 801c5e0:	e7e3      	b.n	801c5aa <_dtoa_r+0x1d2>
 801c5e2:	2201      	movs	r2, #1
 801c5e4:	9208      	str	r2, [sp, #32]
 801c5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c5e8:	eb08 0b02 	add.w	fp, r8, r2
 801c5ec:	f10b 0a01 	add.w	sl, fp, #1
 801c5f0:	4652      	mov	r2, sl
 801c5f2:	2a01      	cmp	r2, #1
 801c5f4:	bfb8      	it	lt
 801c5f6:	2201      	movlt	r2, #1
 801c5f8:	e006      	b.n	801c608 <_dtoa_r+0x230>
 801c5fa:	2201      	movs	r2, #1
 801c5fc:	9208      	str	r2, [sp, #32]
 801c5fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c600:	2a00      	cmp	r2, #0
 801c602:	dd29      	ble.n	801c658 <_dtoa_r+0x280>
 801c604:	4693      	mov	fp, r2
 801c606:	4692      	mov	sl, r2
 801c608:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801c60c:	2100      	movs	r1, #0
 801c60e:	2004      	movs	r0, #4
 801c610:	f100 0614 	add.w	r6, r0, #20
 801c614:	4296      	cmp	r6, r2
 801c616:	d926      	bls.n	801c666 <_dtoa_r+0x28e>
 801c618:	6079      	str	r1, [r7, #4]
 801c61a:	4648      	mov	r0, r9
 801c61c:	9305      	str	r3, [sp, #20]
 801c61e:	f000 fd39 	bl	801d094 <_Balloc>
 801c622:	9b05      	ldr	r3, [sp, #20]
 801c624:	4607      	mov	r7, r0
 801c626:	2800      	cmp	r0, #0
 801c628:	d13e      	bne.n	801c6a8 <_dtoa_r+0x2d0>
 801c62a:	4b1e      	ldr	r3, [pc, #120]	@ (801c6a4 <_dtoa_r+0x2cc>)
 801c62c:	4602      	mov	r2, r0
 801c62e:	f240 11af 	movw	r1, #431	@ 0x1af
 801c632:	e6ea      	b.n	801c40a <_dtoa_r+0x32>
 801c634:	2200      	movs	r2, #0
 801c636:	e7e1      	b.n	801c5fc <_dtoa_r+0x224>
 801c638:	2200      	movs	r2, #0
 801c63a:	e7d3      	b.n	801c5e4 <_dtoa_r+0x20c>
 801c63c:	2401      	movs	r4, #1
 801c63e:	2200      	movs	r2, #0
 801c640:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801c644:	f04f 3bff 	mov.w	fp, #4294967295
 801c648:	2100      	movs	r1, #0
 801c64a:	46da      	mov	sl, fp
 801c64c:	2212      	movs	r2, #18
 801c64e:	9109      	str	r1, [sp, #36]	@ 0x24
 801c650:	e7da      	b.n	801c608 <_dtoa_r+0x230>
 801c652:	2201      	movs	r2, #1
 801c654:	9208      	str	r2, [sp, #32]
 801c656:	e7f5      	b.n	801c644 <_dtoa_r+0x26c>
 801c658:	f04f 0b01 	mov.w	fp, #1
 801c65c:	46da      	mov	sl, fp
 801c65e:	465a      	mov	r2, fp
 801c660:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801c664:	e7d0      	b.n	801c608 <_dtoa_r+0x230>
 801c666:	3101      	adds	r1, #1
 801c668:	0040      	lsls	r0, r0, #1
 801c66a:	e7d1      	b.n	801c610 <_dtoa_r+0x238>
 801c66c:	f3af 8000 	nop.w
 801c670:	636f4361 	.word	0x636f4361
 801c674:	3fd287a7 	.word	0x3fd287a7
 801c678:	8b60c8b3 	.word	0x8b60c8b3
 801c67c:	3fc68a28 	.word	0x3fc68a28
 801c680:	509f79fb 	.word	0x509f79fb
 801c684:	3fd34413 	.word	0x3fd34413
 801c688:	0801f007 	.word	0x0801f007
 801c68c:	0801f01e 	.word	0x0801f01e
 801c690:	7ff00000 	.word	0x7ff00000
 801c694:	0801f003 	.word	0x0801f003
 801c698:	0801efd7 	.word	0x0801efd7
 801c69c:	0801efd6 	.word	0x0801efd6
 801c6a0:	0801f170 	.word	0x0801f170
 801c6a4:	0801f076 	.word	0x0801f076
 801c6a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801c6ac:	f1ba 0f0e 	cmp.w	sl, #14
 801c6b0:	6010      	str	r0, [r2, #0]
 801c6b2:	d86e      	bhi.n	801c792 <_dtoa_r+0x3ba>
 801c6b4:	2c00      	cmp	r4, #0
 801c6b6:	d06c      	beq.n	801c792 <_dtoa_r+0x3ba>
 801c6b8:	f1b8 0f00 	cmp.w	r8, #0
 801c6bc:	f340 80b4 	ble.w	801c828 <_dtoa_r+0x450>
 801c6c0:	4ac8      	ldr	r2, [pc, #800]	@ (801c9e4 <_dtoa_r+0x60c>)
 801c6c2:	f008 010f 	and.w	r1, r8, #15
 801c6c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c6ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801c6ce:	ed92 7b00 	vldr	d7, [r2]
 801c6d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 801c6d6:	f000 809b 	beq.w	801c810 <_dtoa_r+0x438>
 801c6da:	4ac3      	ldr	r2, [pc, #780]	@ (801c9e8 <_dtoa_r+0x610>)
 801c6dc:	ed92 6b08 	vldr	d6, [r2, #32]
 801c6e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c6e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c6e8:	f001 010f 	and.w	r1, r1, #15
 801c6ec:	2203      	movs	r2, #3
 801c6ee:	48be      	ldr	r0, [pc, #760]	@ (801c9e8 <_dtoa_r+0x610>)
 801c6f0:	2900      	cmp	r1, #0
 801c6f2:	f040 808f 	bne.w	801c814 <_dtoa_r+0x43c>
 801c6f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c6fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c6fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c702:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c704:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c708:	2900      	cmp	r1, #0
 801c70a:	f000 80b3 	beq.w	801c874 <_dtoa_r+0x49c>
 801c70e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801c712:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71a:	f140 80ab 	bpl.w	801c874 <_dtoa_r+0x49c>
 801c71e:	f1ba 0f00 	cmp.w	sl, #0
 801c722:	f000 80a7 	beq.w	801c874 <_dtoa_r+0x49c>
 801c726:	f1bb 0f00 	cmp.w	fp, #0
 801c72a:	dd30      	ble.n	801c78e <_dtoa_r+0x3b6>
 801c72c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801c730:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c734:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c738:	f108 31ff 	add.w	r1, r8, #4294967295
 801c73c:	9105      	str	r1, [sp, #20]
 801c73e:	3201      	adds	r2, #1
 801c740:	465c      	mov	r4, fp
 801c742:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c746:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801c74a:	ee07 2a90 	vmov	s15, r2
 801c74e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c752:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c756:	ee15 2a90 	vmov	r2, s11
 801c75a:	ec51 0b15 	vmov	r0, r1, d5
 801c75e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801c762:	2c00      	cmp	r4, #0
 801c764:	f040 808a 	bne.w	801c87c <_dtoa_r+0x4a4>
 801c768:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801c76c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c770:	ec41 0b17 	vmov	d7, r0, r1
 801c774:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c77c:	f300 826a 	bgt.w	801cc54 <_dtoa_r+0x87c>
 801c780:	eeb1 7b47 	vneg.f64	d7, d7
 801c784:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c78c:	d423      	bmi.n	801c7d6 <_dtoa_r+0x3fe>
 801c78e:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c792:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c794:	2a00      	cmp	r2, #0
 801c796:	f2c0 8129 	blt.w	801c9ec <_dtoa_r+0x614>
 801c79a:	f1b8 0f0e 	cmp.w	r8, #14
 801c79e:	f300 8125 	bgt.w	801c9ec <_dtoa_r+0x614>
 801c7a2:	4b90      	ldr	r3, [pc, #576]	@ (801c9e4 <_dtoa_r+0x60c>)
 801c7a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c7a8:	ed93 6b00 	vldr	d6, [r3]
 801c7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	f280 80c8 	bge.w	801c944 <_dtoa_r+0x56c>
 801c7b4:	f1ba 0f00 	cmp.w	sl, #0
 801c7b8:	f300 80c4 	bgt.w	801c944 <_dtoa_r+0x56c>
 801c7bc:	d10b      	bne.n	801c7d6 <_dtoa_r+0x3fe>
 801c7be:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801c7c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c7c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c7ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7d2:	f2c0 823c 	blt.w	801cc4e <_dtoa_r+0x876>
 801c7d6:	2400      	movs	r4, #0
 801c7d8:	4625      	mov	r5, r4
 801c7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7dc:	43db      	mvns	r3, r3
 801c7de:	9305      	str	r3, [sp, #20]
 801c7e0:	463e      	mov	r6, r7
 801c7e2:	f04f 0800 	mov.w	r8, #0
 801c7e6:	4621      	mov	r1, r4
 801c7e8:	4648      	mov	r0, r9
 801c7ea:	f000 fc93 	bl	801d114 <_Bfree>
 801c7ee:	2d00      	cmp	r5, #0
 801c7f0:	f000 80a2 	beq.w	801c938 <_dtoa_r+0x560>
 801c7f4:	f1b8 0f00 	cmp.w	r8, #0
 801c7f8:	d005      	beq.n	801c806 <_dtoa_r+0x42e>
 801c7fa:	45a8      	cmp	r8, r5
 801c7fc:	d003      	beq.n	801c806 <_dtoa_r+0x42e>
 801c7fe:	4641      	mov	r1, r8
 801c800:	4648      	mov	r0, r9
 801c802:	f000 fc87 	bl	801d114 <_Bfree>
 801c806:	4629      	mov	r1, r5
 801c808:	4648      	mov	r0, r9
 801c80a:	f000 fc83 	bl	801d114 <_Bfree>
 801c80e:	e093      	b.n	801c938 <_dtoa_r+0x560>
 801c810:	2202      	movs	r2, #2
 801c812:	e76c      	b.n	801c6ee <_dtoa_r+0x316>
 801c814:	07cc      	lsls	r4, r1, #31
 801c816:	d504      	bpl.n	801c822 <_dtoa_r+0x44a>
 801c818:	ed90 6b00 	vldr	d6, [r0]
 801c81c:	3201      	adds	r2, #1
 801c81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c822:	1049      	asrs	r1, r1, #1
 801c824:	3008      	adds	r0, #8
 801c826:	e763      	b.n	801c6f0 <_dtoa_r+0x318>
 801c828:	d022      	beq.n	801c870 <_dtoa_r+0x498>
 801c82a:	f1c8 0100 	rsb	r1, r8, #0
 801c82e:	4a6d      	ldr	r2, [pc, #436]	@ (801c9e4 <_dtoa_r+0x60c>)
 801c830:	f001 000f 	and.w	r0, r1, #15
 801c834:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c838:	ed92 7b00 	vldr	d7, [r2]
 801c83c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c840:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c844:	4868      	ldr	r0, [pc, #416]	@ (801c9e8 <_dtoa_r+0x610>)
 801c846:	1109      	asrs	r1, r1, #4
 801c848:	2400      	movs	r4, #0
 801c84a:	2202      	movs	r2, #2
 801c84c:	b929      	cbnz	r1, 801c85a <_dtoa_r+0x482>
 801c84e:	2c00      	cmp	r4, #0
 801c850:	f43f af57 	beq.w	801c702 <_dtoa_r+0x32a>
 801c854:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c858:	e753      	b.n	801c702 <_dtoa_r+0x32a>
 801c85a:	07ce      	lsls	r6, r1, #31
 801c85c:	d505      	bpl.n	801c86a <_dtoa_r+0x492>
 801c85e:	ed90 6b00 	vldr	d6, [r0]
 801c862:	3201      	adds	r2, #1
 801c864:	2401      	movs	r4, #1
 801c866:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c86a:	1049      	asrs	r1, r1, #1
 801c86c:	3008      	adds	r0, #8
 801c86e:	e7ed      	b.n	801c84c <_dtoa_r+0x474>
 801c870:	2202      	movs	r2, #2
 801c872:	e746      	b.n	801c702 <_dtoa_r+0x32a>
 801c874:	f8cd 8014 	str.w	r8, [sp, #20]
 801c878:	4654      	mov	r4, sl
 801c87a:	e762      	b.n	801c742 <_dtoa_r+0x36a>
 801c87c:	4a59      	ldr	r2, [pc, #356]	@ (801c9e4 <_dtoa_r+0x60c>)
 801c87e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801c882:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c886:	9a08      	ldr	r2, [sp, #32]
 801c888:	ec41 0b17 	vmov	d7, r0, r1
 801c88c:	443c      	add	r4, r7
 801c88e:	b34a      	cbz	r2, 801c8e4 <_dtoa_r+0x50c>
 801c890:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801c894:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801c898:	463e      	mov	r6, r7
 801c89a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c89e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801c8a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c8a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c8aa:	ee14 2a90 	vmov	r2, s9
 801c8ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c8b2:	3230      	adds	r2, #48	@ 0x30
 801c8b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c8b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8c0:	f806 2b01 	strb.w	r2, [r6], #1
 801c8c4:	d438      	bmi.n	801c938 <_dtoa_r+0x560>
 801c8c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c8ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8d2:	d46e      	bmi.n	801c9b2 <_dtoa_r+0x5da>
 801c8d4:	42a6      	cmp	r6, r4
 801c8d6:	f43f af5a 	beq.w	801c78e <_dtoa_r+0x3b6>
 801c8da:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c8de:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c8e2:	e7e0      	b.n	801c8a6 <_dtoa_r+0x4ce>
 801c8e4:	4621      	mov	r1, r4
 801c8e6:	463e      	mov	r6, r7
 801c8e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c8ec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801c8f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c8f4:	ee14 2a90 	vmov	r2, s9
 801c8f8:	3230      	adds	r2, #48	@ 0x30
 801c8fa:	f806 2b01 	strb.w	r2, [r6], #1
 801c8fe:	42a6      	cmp	r6, r4
 801c900:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c904:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c908:	d119      	bne.n	801c93e <_dtoa_r+0x566>
 801c90a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801c90e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c912:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c91a:	dc4a      	bgt.n	801c9b2 <_dtoa_r+0x5da>
 801c91c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c920:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c928:	f57f af31 	bpl.w	801c78e <_dtoa_r+0x3b6>
 801c92c:	460e      	mov	r6, r1
 801c92e:	3901      	subs	r1, #1
 801c930:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c934:	2b30      	cmp	r3, #48	@ 0x30
 801c936:	d0f9      	beq.n	801c92c <_dtoa_r+0x554>
 801c938:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c93c:	e027      	b.n	801c98e <_dtoa_r+0x5b6>
 801c93e:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c942:	e7d5      	b.n	801c8f0 <_dtoa_r+0x518>
 801c944:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c948:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801c94c:	463e      	mov	r6, r7
 801c94e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c952:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c956:	ee15 3a10 	vmov	r3, s10
 801c95a:	3330      	adds	r3, #48	@ 0x30
 801c95c:	f806 3b01 	strb.w	r3, [r6], #1
 801c960:	1bf3      	subs	r3, r6, r7
 801c962:	459a      	cmp	sl, r3
 801c964:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c968:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c96c:	d132      	bne.n	801c9d4 <_dtoa_r+0x5fc>
 801c96e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c972:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c97a:	dc18      	bgt.n	801c9ae <_dtoa_r+0x5d6>
 801c97c:	eeb4 7b46 	vcmp.f64	d7, d6
 801c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c984:	d103      	bne.n	801c98e <_dtoa_r+0x5b6>
 801c986:	ee15 3a10 	vmov	r3, s10
 801c98a:	07db      	lsls	r3, r3, #31
 801c98c:	d40f      	bmi.n	801c9ae <_dtoa_r+0x5d6>
 801c98e:	9901      	ldr	r1, [sp, #4]
 801c990:	4648      	mov	r0, r9
 801c992:	f000 fbbf 	bl	801d114 <_Bfree>
 801c996:	2300      	movs	r3, #0
 801c998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c99a:	7033      	strb	r3, [r6, #0]
 801c99c:	f108 0301 	add.w	r3, r8, #1
 801c9a0:	6013      	str	r3, [r2, #0]
 801c9a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	f000 824b 	beq.w	801ce40 <_dtoa_r+0xa68>
 801c9aa:	601e      	str	r6, [r3, #0]
 801c9ac:	e248      	b.n	801ce40 <_dtoa_r+0xa68>
 801c9ae:	f8cd 8014 	str.w	r8, [sp, #20]
 801c9b2:	4633      	mov	r3, r6
 801c9b4:	461e      	mov	r6, r3
 801c9b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c9ba:	2a39      	cmp	r2, #57	@ 0x39
 801c9bc:	d106      	bne.n	801c9cc <_dtoa_r+0x5f4>
 801c9be:	429f      	cmp	r7, r3
 801c9c0:	d1f8      	bne.n	801c9b4 <_dtoa_r+0x5dc>
 801c9c2:	9a05      	ldr	r2, [sp, #20]
 801c9c4:	3201      	adds	r2, #1
 801c9c6:	9205      	str	r2, [sp, #20]
 801c9c8:	2230      	movs	r2, #48	@ 0x30
 801c9ca:	703a      	strb	r2, [r7, #0]
 801c9cc:	781a      	ldrb	r2, [r3, #0]
 801c9ce:	3201      	adds	r2, #1
 801c9d0:	701a      	strb	r2, [r3, #0]
 801c9d2:	e7b1      	b.n	801c938 <_dtoa_r+0x560>
 801c9d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c9d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9e0:	d1b5      	bne.n	801c94e <_dtoa_r+0x576>
 801c9e2:	e7d4      	b.n	801c98e <_dtoa_r+0x5b6>
 801c9e4:	0801f170 	.word	0x0801f170
 801c9e8:	0801f148 	.word	0x0801f148
 801c9ec:	9908      	ldr	r1, [sp, #32]
 801c9ee:	2900      	cmp	r1, #0
 801c9f0:	f000 80e9 	beq.w	801cbc6 <_dtoa_r+0x7ee>
 801c9f4:	9907      	ldr	r1, [sp, #28]
 801c9f6:	2901      	cmp	r1, #1
 801c9f8:	f300 80cb 	bgt.w	801cb92 <_dtoa_r+0x7ba>
 801c9fc:	2d00      	cmp	r5, #0
 801c9fe:	f000 80c4 	beq.w	801cb8a <_dtoa_r+0x7b2>
 801ca02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801ca06:	9e04      	ldr	r6, [sp, #16]
 801ca08:	461c      	mov	r4, r3
 801ca0a:	9305      	str	r3, [sp, #20]
 801ca0c:	9b04      	ldr	r3, [sp, #16]
 801ca0e:	4413      	add	r3, r2
 801ca10:	9304      	str	r3, [sp, #16]
 801ca12:	9b06      	ldr	r3, [sp, #24]
 801ca14:	2101      	movs	r1, #1
 801ca16:	4413      	add	r3, r2
 801ca18:	4648      	mov	r0, r9
 801ca1a:	9306      	str	r3, [sp, #24]
 801ca1c:	f000 fc2e 	bl	801d27c <__i2b>
 801ca20:	9b05      	ldr	r3, [sp, #20]
 801ca22:	4605      	mov	r5, r0
 801ca24:	b166      	cbz	r6, 801ca40 <_dtoa_r+0x668>
 801ca26:	9a06      	ldr	r2, [sp, #24]
 801ca28:	2a00      	cmp	r2, #0
 801ca2a:	dd09      	ble.n	801ca40 <_dtoa_r+0x668>
 801ca2c:	42b2      	cmp	r2, r6
 801ca2e:	9904      	ldr	r1, [sp, #16]
 801ca30:	bfa8      	it	ge
 801ca32:	4632      	movge	r2, r6
 801ca34:	1a89      	subs	r1, r1, r2
 801ca36:	9104      	str	r1, [sp, #16]
 801ca38:	9906      	ldr	r1, [sp, #24]
 801ca3a:	1ab6      	subs	r6, r6, r2
 801ca3c:	1a8a      	subs	r2, r1, r2
 801ca3e:	9206      	str	r2, [sp, #24]
 801ca40:	b30b      	cbz	r3, 801ca86 <_dtoa_r+0x6ae>
 801ca42:	9a08      	ldr	r2, [sp, #32]
 801ca44:	2a00      	cmp	r2, #0
 801ca46:	f000 80c5 	beq.w	801cbd4 <_dtoa_r+0x7fc>
 801ca4a:	2c00      	cmp	r4, #0
 801ca4c:	f000 80bf 	beq.w	801cbce <_dtoa_r+0x7f6>
 801ca50:	4629      	mov	r1, r5
 801ca52:	4622      	mov	r2, r4
 801ca54:	4648      	mov	r0, r9
 801ca56:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ca58:	f000 fcc8 	bl	801d3ec <__pow5mult>
 801ca5c:	9a01      	ldr	r2, [sp, #4]
 801ca5e:	4601      	mov	r1, r0
 801ca60:	4605      	mov	r5, r0
 801ca62:	4648      	mov	r0, r9
 801ca64:	f000 fc20 	bl	801d2a8 <__multiply>
 801ca68:	9901      	ldr	r1, [sp, #4]
 801ca6a:	9005      	str	r0, [sp, #20]
 801ca6c:	4648      	mov	r0, r9
 801ca6e:	f000 fb51 	bl	801d114 <_Bfree>
 801ca72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca74:	1b1b      	subs	r3, r3, r4
 801ca76:	f000 80b0 	beq.w	801cbda <_dtoa_r+0x802>
 801ca7a:	9905      	ldr	r1, [sp, #20]
 801ca7c:	461a      	mov	r2, r3
 801ca7e:	4648      	mov	r0, r9
 801ca80:	f000 fcb4 	bl	801d3ec <__pow5mult>
 801ca84:	9001      	str	r0, [sp, #4]
 801ca86:	2101      	movs	r1, #1
 801ca88:	4648      	mov	r0, r9
 801ca8a:	f000 fbf7 	bl	801d27c <__i2b>
 801ca8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca90:	4604      	mov	r4, r0
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	f000 81da 	beq.w	801ce4c <_dtoa_r+0xa74>
 801ca98:	461a      	mov	r2, r3
 801ca9a:	4601      	mov	r1, r0
 801ca9c:	4648      	mov	r0, r9
 801ca9e:	f000 fca5 	bl	801d3ec <__pow5mult>
 801caa2:	9b07      	ldr	r3, [sp, #28]
 801caa4:	2b01      	cmp	r3, #1
 801caa6:	4604      	mov	r4, r0
 801caa8:	f300 80a0 	bgt.w	801cbec <_dtoa_r+0x814>
 801caac:	9b02      	ldr	r3, [sp, #8]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	f040 8096 	bne.w	801cbe0 <_dtoa_r+0x808>
 801cab4:	9b03      	ldr	r3, [sp, #12]
 801cab6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801caba:	2a00      	cmp	r2, #0
 801cabc:	f040 8092 	bne.w	801cbe4 <_dtoa_r+0x80c>
 801cac0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801cac4:	0d12      	lsrs	r2, r2, #20
 801cac6:	0512      	lsls	r2, r2, #20
 801cac8:	2a00      	cmp	r2, #0
 801caca:	f000 808d 	beq.w	801cbe8 <_dtoa_r+0x810>
 801cace:	9b04      	ldr	r3, [sp, #16]
 801cad0:	3301      	adds	r3, #1
 801cad2:	9304      	str	r3, [sp, #16]
 801cad4:	9b06      	ldr	r3, [sp, #24]
 801cad6:	3301      	adds	r3, #1
 801cad8:	9306      	str	r3, [sp, #24]
 801cada:	2301      	movs	r3, #1
 801cadc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	f000 81b9 	beq.w	801ce58 <_dtoa_r+0xa80>
 801cae6:	6922      	ldr	r2, [r4, #16]
 801cae8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801caec:	6910      	ldr	r0, [r2, #16]
 801caee:	f000 fb79 	bl	801d1e4 <__hi0bits>
 801caf2:	f1c0 0020 	rsb	r0, r0, #32
 801caf6:	9b06      	ldr	r3, [sp, #24]
 801caf8:	4418      	add	r0, r3
 801cafa:	f010 001f 	ands.w	r0, r0, #31
 801cafe:	f000 8081 	beq.w	801cc04 <_dtoa_r+0x82c>
 801cb02:	f1c0 0220 	rsb	r2, r0, #32
 801cb06:	2a04      	cmp	r2, #4
 801cb08:	dd73      	ble.n	801cbf2 <_dtoa_r+0x81a>
 801cb0a:	9b04      	ldr	r3, [sp, #16]
 801cb0c:	f1c0 001c 	rsb	r0, r0, #28
 801cb10:	4403      	add	r3, r0
 801cb12:	9304      	str	r3, [sp, #16]
 801cb14:	9b06      	ldr	r3, [sp, #24]
 801cb16:	4406      	add	r6, r0
 801cb18:	4403      	add	r3, r0
 801cb1a:	9306      	str	r3, [sp, #24]
 801cb1c:	9b04      	ldr	r3, [sp, #16]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	dd05      	ble.n	801cb2e <_dtoa_r+0x756>
 801cb22:	9901      	ldr	r1, [sp, #4]
 801cb24:	461a      	mov	r2, r3
 801cb26:	4648      	mov	r0, r9
 801cb28:	f000 fcba 	bl	801d4a0 <__lshift>
 801cb2c:	9001      	str	r0, [sp, #4]
 801cb2e:	9b06      	ldr	r3, [sp, #24]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	dd05      	ble.n	801cb40 <_dtoa_r+0x768>
 801cb34:	4621      	mov	r1, r4
 801cb36:	461a      	mov	r2, r3
 801cb38:	4648      	mov	r0, r9
 801cb3a:	f000 fcb1 	bl	801d4a0 <__lshift>
 801cb3e:	4604      	mov	r4, r0
 801cb40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d060      	beq.n	801cc08 <_dtoa_r+0x830>
 801cb46:	9801      	ldr	r0, [sp, #4]
 801cb48:	4621      	mov	r1, r4
 801cb4a:	f000 fd15 	bl	801d578 <__mcmp>
 801cb4e:	2800      	cmp	r0, #0
 801cb50:	da5a      	bge.n	801cc08 <_dtoa_r+0x830>
 801cb52:	f108 33ff 	add.w	r3, r8, #4294967295
 801cb56:	9305      	str	r3, [sp, #20]
 801cb58:	9901      	ldr	r1, [sp, #4]
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	220a      	movs	r2, #10
 801cb5e:	4648      	mov	r0, r9
 801cb60:	f000 fafa 	bl	801d158 <__multadd>
 801cb64:	9b08      	ldr	r3, [sp, #32]
 801cb66:	9001      	str	r0, [sp, #4]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	f000 8177 	beq.w	801ce5c <_dtoa_r+0xa84>
 801cb6e:	4629      	mov	r1, r5
 801cb70:	2300      	movs	r3, #0
 801cb72:	220a      	movs	r2, #10
 801cb74:	4648      	mov	r0, r9
 801cb76:	f000 faef 	bl	801d158 <__multadd>
 801cb7a:	f1bb 0f00 	cmp.w	fp, #0
 801cb7e:	4605      	mov	r5, r0
 801cb80:	dc6e      	bgt.n	801cc60 <_dtoa_r+0x888>
 801cb82:	9b07      	ldr	r3, [sp, #28]
 801cb84:	2b02      	cmp	r3, #2
 801cb86:	dc48      	bgt.n	801cc1a <_dtoa_r+0x842>
 801cb88:	e06a      	b.n	801cc60 <_dtoa_r+0x888>
 801cb8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801cb90:	e739      	b.n	801ca06 <_dtoa_r+0x62e>
 801cb92:	f10a 34ff 	add.w	r4, sl, #4294967295
 801cb96:	42a3      	cmp	r3, r4
 801cb98:	db07      	blt.n	801cbaa <_dtoa_r+0x7d2>
 801cb9a:	f1ba 0f00 	cmp.w	sl, #0
 801cb9e:	eba3 0404 	sub.w	r4, r3, r4
 801cba2:	db0b      	blt.n	801cbbc <_dtoa_r+0x7e4>
 801cba4:	9e04      	ldr	r6, [sp, #16]
 801cba6:	4652      	mov	r2, sl
 801cba8:	e72f      	b.n	801ca0a <_dtoa_r+0x632>
 801cbaa:	1ae2      	subs	r2, r4, r3
 801cbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cbae:	9e04      	ldr	r6, [sp, #16]
 801cbb0:	4413      	add	r3, r2
 801cbb2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cbb4:	4652      	mov	r2, sl
 801cbb6:	4623      	mov	r3, r4
 801cbb8:	2400      	movs	r4, #0
 801cbba:	e726      	b.n	801ca0a <_dtoa_r+0x632>
 801cbbc:	9a04      	ldr	r2, [sp, #16]
 801cbbe:	eba2 060a 	sub.w	r6, r2, sl
 801cbc2:	2200      	movs	r2, #0
 801cbc4:	e721      	b.n	801ca0a <_dtoa_r+0x632>
 801cbc6:	9e04      	ldr	r6, [sp, #16]
 801cbc8:	9d08      	ldr	r5, [sp, #32]
 801cbca:	461c      	mov	r4, r3
 801cbcc:	e72a      	b.n	801ca24 <_dtoa_r+0x64c>
 801cbce:	9a01      	ldr	r2, [sp, #4]
 801cbd0:	9205      	str	r2, [sp, #20]
 801cbd2:	e752      	b.n	801ca7a <_dtoa_r+0x6a2>
 801cbd4:	9901      	ldr	r1, [sp, #4]
 801cbd6:	461a      	mov	r2, r3
 801cbd8:	e751      	b.n	801ca7e <_dtoa_r+0x6a6>
 801cbda:	9b05      	ldr	r3, [sp, #20]
 801cbdc:	9301      	str	r3, [sp, #4]
 801cbde:	e752      	b.n	801ca86 <_dtoa_r+0x6ae>
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	e77b      	b.n	801cadc <_dtoa_r+0x704>
 801cbe4:	9b02      	ldr	r3, [sp, #8]
 801cbe6:	e779      	b.n	801cadc <_dtoa_r+0x704>
 801cbe8:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cbea:	e778      	b.n	801cade <_dtoa_r+0x706>
 801cbec:	2300      	movs	r3, #0
 801cbee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cbf0:	e779      	b.n	801cae6 <_dtoa_r+0x70e>
 801cbf2:	d093      	beq.n	801cb1c <_dtoa_r+0x744>
 801cbf4:	9b04      	ldr	r3, [sp, #16]
 801cbf6:	321c      	adds	r2, #28
 801cbf8:	4413      	add	r3, r2
 801cbfa:	9304      	str	r3, [sp, #16]
 801cbfc:	9b06      	ldr	r3, [sp, #24]
 801cbfe:	4416      	add	r6, r2
 801cc00:	4413      	add	r3, r2
 801cc02:	e78a      	b.n	801cb1a <_dtoa_r+0x742>
 801cc04:	4602      	mov	r2, r0
 801cc06:	e7f5      	b.n	801cbf4 <_dtoa_r+0x81c>
 801cc08:	f1ba 0f00 	cmp.w	sl, #0
 801cc0c:	f8cd 8014 	str.w	r8, [sp, #20]
 801cc10:	46d3      	mov	fp, sl
 801cc12:	dc21      	bgt.n	801cc58 <_dtoa_r+0x880>
 801cc14:	9b07      	ldr	r3, [sp, #28]
 801cc16:	2b02      	cmp	r3, #2
 801cc18:	dd1e      	ble.n	801cc58 <_dtoa_r+0x880>
 801cc1a:	f1bb 0f00 	cmp.w	fp, #0
 801cc1e:	f47f addc 	bne.w	801c7da <_dtoa_r+0x402>
 801cc22:	4621      	mov	r1, r4
 801cc24:	465b      	mov	r3, fp
 801cc26:	2205      	movs	r2, #5
 801cc28:	4648      	mov	r0, r9
 801cc2a:	f000 fa95 	bl	801d158 <__multadd>
 801cc2e:	4601      	mov	r1, r0
 801cc30:	4604      	mov	r4, r0
 801cc32:	9801      	ldr	r0, [sp, #4]
 801cc34:	f000 fca0 	bl	801d578 <__mcmp>
 801cc38:	2800      	cmp	r0, #0
 801cc3a:	f77f adce 	ble.w	801c7da <_dtoa_r+0x402>
 801cc3e:	463e      	mov	r6, r7
 801cc40:	2331      	movs	r3, #49	@ 0x31
 801cc42:	f806 3b01 	strb.w	r3, [r6], #1
 801cc46:	9b05      	ldr	r3, [sp, #20]
 801cc48:	3301      	adds	r3, #1
 801cc4a:	9305      	str	r3, [sp, #20]
 801cc4c:	e5c9      	b.n	801c7e2 <_dtoa_r+0x40a>
 801cc4e:	f8cd 8014 	str.w	r8, [sp, #20]
 801cc52:	4654      	mov	r4, sl
 801cc54:	4625      	mov	r5, r4
 801cc56:	e7f2      	b.n	801cc3e <_dtoa_r+0x866>
 801cc58:	9b08      	ldr	r3, [sp, #32]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	f000 8102 	beq.w	801ce64 <_dtoa_r+0xa8c>
 801cc60:	2e00      	cmp	r6, #0
 801cc62:	dd05      	ble.n	801cc70 <_dtoa_r+0x898>
 801cc64:	4629      	mov	r1, r5
 801cc66:	4632      	mov	r2, r6
 801cc68:	4648      	mov	r0, r9
 801cc6a:	f000 fc19 	bl	801d4a0 <__lshift>
 801cc6e:	4605      	mov	r5, r0
 801cc70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d058      	beq.n	801cd28 <_dtoa_r+0x950>
 801cc76:	6869      	ldr	r1, [r5, #4]
 801cc78:	4648      	mov	r0, r9
 801cc7a:	f000 fa0b 	bl	801d094 <_Balloc>
 801cc7e:	4606      	mov	r6, r0
 801cc80:	b928      	cbnz	r0, 801cc8e <_dtoa_r+0x8b6>
 801cc82:	4b82      	ldr	r3, [pc, #520]	@ (801ce8c <_dtoa_r+0xab4>)
 801cc84:	4602      	mov	r2, r0
 801cc86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801cc8a:	f7ff bbbe 	b.w	801c40a <_dtoa_r+0x32>
 801cc8e:	692a      	ldr	r2, [r5, #16]
 801cc90:	3202      	adds	r2, #2
 801cc92:	0092      	lsls	r2, r2, #2
 801cc94:	f105 010c 	add.w	r1, r5, #12
 801cc98:	300c      	adds	r0, #12
 801cc9a:	f7ff fb06 	bl	801c2aa <memcpy>
 801cc9e:	2201      	movs	r2, #1
 801cca0:	4631      	mov	r1, r6
 801cca2:	4648      	mov	r0, r9
 801cca4:	f000 fbfc 	bl	801d4a0 <__lshift>
 801cca8:	1c7b      	adds	r3, r7, #1
 801ccaa:	9304      	str	r3, [sp, #16]
 801ccac:	eb07 030b 	add.w	r3, r7, fp
 801ccb0:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccb2:	9b02      	ldr	r3, [sp, #8]
 801ccb4:	f003 0301 	and.w	r3, r3, #1
 801ccb8:	46a8      	mov	r8, r5
 801ccba:	9308      	str	r3, [sp, #32]
 801ccbc:	4605      	mov	r5, r0
 801ccbe:	9b04      	ldr	r3, [sp, #16]
 801ccc0:	9801      	ldr	r0, [sp, #4]
 801ccc2:	4621      	mov	r1, r4
 801ccc4:	f103 3bff 	add.w	fp, r3, #4294967295
 801ccc8:	f7ff fafd 	bl	801c2c6 <quorem>
 801cccc:	4641      	mov	r1, r8
 801ccce:	9002      	str	r0, [sp, #8]
 801ccd0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ccd4:	9801      	ldr	r0, [sp, #4]
 801ccd6:	f000 fc4f 	bl	801d578 <__mcmp>
 801ccda:	462a      	mov	r2, r5
 801ccdc:	9006      	str	r0, [sp, #24]
 801ccde:	4621      	mov	r1, r4
 801cce0:	4648      	mov	r0, r9
 801cce2:	f000 fc65 	bl	801d5b0 <__mdiff>
 801cce6:	68c2      	ldr	r2, [r0, #12]
 801cce8:	4606      	mov	r6, r0
 801ccea:	b9fa      	cbnz	r2, 801cd2c <_dtoa_r+0x954>
 801ccec:	4601      	mov	r1, r0
 801ccee:	9801      	ldr	r0, [sp, #4]
 801ccf0:	f000 fc42 	bl	801d578 <__mcmp>
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	4631      	mov	r1, r6
 801ccf8:	4648      	mov	r0, r9
 801ccfa:	920a      	str	r2, [sp, #40]	@ 0x28
 801ccfc:	f000 fa0a 	bl	801d114 <_Bfree>
 801cd00:	9b07      	ldr	r3, [sp, #28]
 801cd02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd04:	9e04      	ldr	r6, [sp, #16]
 801cd06:	ea42 0103 	orr.w	r1, r2, r3
 801cd0a:	9b08      	ldr	r3, [sp, #32]
 801cd0c:	4319      	orrs	r1, r3
 801cd0e:	d10f      	bne.n	801cd30 <_dtoa_r+0x958>
 801cd10:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801cd14:	d028      	beq.n	801cd68 <_dtoa_r+0x990>
 801cd16:	9b06      	ldr	r3, [sp, #24]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	dd02      	ble.n	801cd22 <_dtoa_r+0x94a>
 801cd1c:	9b02      	ldr	r3, [sp, #8]
 801cd1e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801cd22:	f88b a000 	strb.w	sl, [fp]
 801cd26:	e55e      	b.n	801c7e6 <_dtoa_r+0x40e>
 801cd28:	4628      	mov	r0, r5
 801cd2a:	e7bd      	b.n	801cca8 <_dtoa_r+0x8d0>
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	e7e2      	b.n	801ccf6 <_dtoa_r+0x91e>
 801cd30:	9b06      	ldr	r3, [sp, #24]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	db04      	blt.n	801cd40 <_dtoa_r+0x968>
 801cd36:	9907      	ldr	r1, [sp, #28]
 801cd38:	430b      	orrs	r3, r1
 801cd3a:	9908      	ldr	r1, [sp, #32]
 801cd3c:	430b      	orrs	r3, r1
 801cd3e:	d120      	bne.n	801cd82 <_dtoa_r+0x9aa>
 801cd40:	2a00      	cmp	r2, #0
 801cd42:	ddee      	ble.n	801cd22 <_dtoa_r+0x94a>
 801cd44:	9901      	ldr	r1, [sp, #4]
 801cd46:	2201      	movs	r2, #1
 801cd48:	4648      	mov	r0, r9
 801cd4a:	f000 fba9 	bl	801d4a0 <__lshift>
 801cd4e:	4621      	mov	r1, r4
 801cd50:	9001      	str	r0, [sp, #4]
 801cd52:	f000 fc11 	bl	801d578 <__mcmp>
 801cd56:	2800      	cmp	r0, #0
 801cd58:	dc03      	bgt.n	801cd62 <_dtoa_r+0x98a>
 801cd5a:	d1e2      	bne.n	801cd22 <_dtoa_r+0x94a>
 801cd5c:	f01a 0f01 	tst.w	sl, #1
 801cd60:	d0df      	beq.n	801cd22 <_dtoa_r+0x94a>
 801cd62:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801cd66:	d1d9      	bne.n	801cd1c <_dtoa_r+0x944>
 801cd68:	2339      	movs	r3, #57	@ 0x39
 801cd6a:	f88b 3000 	strb.w	r3, [fp]
 801cd6e:	4633      	mov	r3, r6
 801cd70:	461e      	mov	r6, r3
 801cd72:	3b01      	subs	r3, #1
 801cd74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801cd78:	2a39      	cmp	r2, #57	@ 0x39
 801cd7a:	d052      	beq.n	801ce22 <_dtoa_r+0xa4a>
 801cd7c:	3201      	adds	r2, #1
 801cd7e:	701a      	strb	r2, [r3, #0]
 801cd80:	e531      	b.n	801c7e6 <_dtoa_r+0x40e>
 801cd82:	2a00      	cmp	r2, #0
 801cd84:	dd07      	ble.n	801cd96 <_dtoa_r+0x9be>
 801cd86:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801cd8a:	d0ed      	beq.n	801cd68 <_dtoa_r+0x990>
 801cd8c:	f10a 0301 	add.w	r3, sl, #1
 801cd90:	f88b 3000 	strb.w	r3, [fp]
 801cd94:	e527      	b.n	801c7e6 <_dtoa_r+0x40e>
 801cd96:	9b04      	ldr	r3, [sp, #16]
 801cd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd9a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801cd9e:	4293      	cmp	r3, r2
 801cda0:	d029      	beq.n	801cdf6 <_dtoa_r+0xa1e>
 801cda2:	9901      	ldr	r1, [sp, #4]
 801cda4:	2300      	movs	r3, #0
 801cda6:	220a      	movs	r2, #10
 801cda8:	4648      	mov	r0, r9
 801cdaa:	f000 f9d5 	bl	801d158 <__multadd>
 801cdae:	45a8      	cmp	r8, r5
 801cdb0:	9001      	str	r0, [sp, #4]
 801cdb2:	f04f 0300 	mov.w	r3, #0
 801cdb6:	f04f 020a 	mov.w	r2, #10
 801cdba:	4641      	mov	r1, r8
 801cdbc:	4648      	mov	r0, r9
 801cdbe:	d107      	bne.n	801cdd0 <_dtoa_r+0x9f8>
 801cdc0:	f000 f9ca 	bl	801d158 <__multadd>
 801cdc4:	4680      	mov	r8, r0
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	9b04      	ldr	r3, [sp, #16]
 801cdca:	3301      	adds	r3, #1
 801cdcc:	9304      	str	r3, [sp, #16]
 801cdce:	e776      	b.n	801ccbe <_dtoa_r+0x8e6>
 801cdd0:	f000 f9c2 	bl	801d158 <__multadd>
 801cdd4:	4629      	mov	r1, r5
 801cdd6:	4680      	mov	r8, r0
 801cdd8:	2300      	movs	r3, #0
 801cdda:	220a      	movs	r2, #10
 801cddc:	4648      	mov	r0, r9
 801cdde:	f000 f9bb 	bl	801d158 <__multadd>
 801cde2:	4605      	mov	r5, r0
 801cde4:	e7f0      	b.n	801cdc8 <_dtoa_r+0x9f0>
 801cde6:	f1bb 0f00 	cmp.w	fp, #0
 801cdea:	bfcc      	ite	gt
 801cdec:	465e      	movgt	r6, fp
 801cdee:	2601      	movle	r6, #1
 801cdf0:	443e      	add	r6, r7
 801cdf2:	f04f 0800 	mov.w	r8, #0
 801cdf6:	9901      	ldr	r1, [sp, #4]
 801cdf8:	2201      	movs	r2, #1
 801cdfa:	4648      	mov	r0, r9
 801cdfc:	f000 fb50 	bl	801d4a0 <__lshift>
 801ce00:	4621      	mov	r1, r4
 801ce02:	9001      	str	r0, [sp, #4]
 801ce04:	f000 fbb8 	bl	801d578 <__mcmp>
 801ce08:	2800      	cmp	r0, #0
 801ce0a:	dcb0      	bgt.n	801cd6e <_dtoa_r+0x996>
 801ce0c:	d102      	bne.n	801ce14 <_dtoa_r+0xa3c>
 801ce0e:	f01a 0f01 	tst.w	sl, #1
 801ce12:	d1ac      	bne.n	801cd6e <_dtoa_r+0x996>
 801ce14:	4633      	mov	r3, r6
 801ce16:	461e      	mov	r6, r3
 801ce18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce1c:	2a30      	cmp	r2, #48	@ 0x30
 801ce1e:	d0fa      	beq.n	801ce16 <_dtoa_r+0xa3e>
 801ce20:	e4e1      	b.n	801c7e6 <_dtoa_r+0x40e>
 801ce22:	429f      	cmp	r7, r3
 801ce24:	d1a4      	bne.n	801cd70 <_dtoa_r+0x998>
 801ce26:	9b05      	ldr	r3, [sp, #20]
 801ce28:	3301      	adds	r3, #1
 801ce2a:	9305      	str	r3, [sp, #20]
 801ce2c:	2331      	movs	r3, #49	@ 0x31
 801ce2e:	703b      	strb	r3, [r7, #0]
 801ce30:	e4d9      	b.n	801c7e6 <_dtoa_r+0x40e>
 801ce32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ce34:	4f16      	ldr	r7, [pc, #88]	@ (801ce90 <_dtoa_r+0xab8>)
 801ce36:	b11b      	cbz	r3, 801ce40 <_dtoa_r+0xa68>
 801ce38:	f107 0308 	add.w	r3, r7, #8
 801ce3c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ce3e:	6013      	str	r3, [r2, #0]
 801ce40:	4638      	mov	r0, r7
 801ce42:	b011      	add	sp, #68	@ 0x44
 801ce44:	ecbd 8b02 	vpop	{d8}
 801ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce4c:	9b07      	ldr	r3, [sp, #28]
 801ce4e:	2b01      	cmp	r3, #1
 801ce50:	f77f ae2c 	ble.w	801caac <_dtoa_r+0x6d4>
 801ce54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce56:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce58:	2001      	movs	r0, #1
 801ce5a:	e64c      	b.n	801caf6 <_dtoa_r+0x71e>
 801ce5c:	f1bb 0f00 	cmp.w	fp, #0
 801ce60:	f77f aed8 	ble.w	801cc14 <_dtoa_r+0x83c>
 801ce64:	463e      	mov	r6, r7
 801ce66:	9801      	ldr	r0, [sp, #4]
 801ce68:	4621      	mov	r1, r4
 801ce6a:	f7ff fa2c 	bl	801c2c6 <quorem>
 801ce6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ce72:	f806 ab01 	strb.w	sl, [r6], #1
 801ce76:	1bf2      	subs	r2, r6, r7
 801ce78:	4593      	cmp	fp, r2
 801ce7a:	ddb4      	ble.n	801cde6 <_dtoa_r+0xa0e>
 801ce7c:	9901      	ldr	r1, [sp, #4]
 801ce7e:	2300      	movs	r3, #0
 801ce80:	220a      	movs	r2, #10
 801ce82:	4648      	mov	r0, r9
 801ce84:	f000 f968 	bl	801d158 <__multadd>
 801ce88:	9001      	str	r0, [sp, #4]
 801ce8a:	e7ec      	b.n	801ce66 <_dtoa_r+0xa8e>
 801ce8c:	0801f076 	.word	0x0801f076
 801ce90:	0801effa 	.word	0x0801effa

0801ce94 <_free_r>:
 801ce94:	b538      	push	{r3, r4, r5, lr}
 801ce96:	4605      	mov	r5, r0
 801ce98:	2900      	cmp	r1, #0
 801ce9a:	d041      	beq.n	801cf20 <_free_r+0x8c>
 801ce9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cea0:	1f0c      	subs	r4, r1, #4
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	bfb8      	it	lt
 801cea6:	18e4      	addlt	r4, r4, r3
 801cea8:	f000 f8e8 	bl	801d07c <__malloc_lock>
 801ceac:	4a1d      	ldr	r2, [pc, #116]	@ (801cf24 <_free_r+0x90>)
 801ceae:	6813      	ldr	r3, [r2, #0]
 801ceb0:	b933      	cbnz	r3, 801cec0 <_free_r+0x2c>
 801ceb2:	6063      	str	r3, [r4, #4]
 801ceb4:	6014      	str	r4, [r2, #0]
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cebc:	f000 b8e4 	b.w	801d088 <__malloc_unlock>
 801cec0:	42a3      	cmp	r3, r4
 801cec2:	d908      	bls.n	801ced6 <_free_r+0x42>
 801cec4:	6820      	ldr	r0, [r4, #0]
 801cec6:	1821      	adds	r1, r4, r0
 801cec8:	428b      	cmp	r3, r1
 801ceca:	bf01      	itttt	eq
 801cecc:	6819      	ldreq	r1, [r3, #0]
 801cece:	685b      	ldreq	r3, [r3, #4]
 801ced0:	1809      	addeq	r1, r1, r0
 801ced2:	6021      	streq	r1, [r4, #0]
 801ced4:	e7ed      	b.n	801ceb2 <_free_r+0x1e>
 801ced6:	461a      	mov	r2, r3
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	b10b      	cbz	r3, 801cee0 <_free_r+0x4c>
 801cedc:	42a3      	cmp	r3, r4
 801cede:	d9fa      	bls.n	801ced6 <_free_r+0x42>
 801cee0:	6811      	ldr	r1, [r2, #0]
 801cee2:	1850      	adds	r0, r2, r1
 801cee4:	42a0      	cmp	r0, r4
 801cee6:	d10b      	bne.n	801cf00 <_free_r+0x6c>
 801cee8:	6820      	ldr	r0, [r4, #0]
 801ceea:	4401      	add	r1, r0
 801ceec:	1850      	adds	r0, r2, r1
 801ceee:	4283      	cmp	r3, r0
 801cef0:	6011      	str	r1, [r2, #0]
 801cef2:	d1e0      	bne.n	801ceb6 <_free_r+0x22>
 801cef4:	6818      	ldr	r0, [r3, #0]
 801cef6:	685b      	ldr	r3, [r3, #4]
 801cef8:	6053      	str	r3, [r2, #4]
 801cefa:	4408      	add	r0, r1
 801cefc:	6010      	str	r0, [r2, #0]
 801cefe:	e7da      	b.n	801ceb6 <_free_r+0x22>
 801cf00:	d902      	bls.n	801cf08 <_free_r+0x74>
 801cf02:	230c      	movs	r3, #12
 801cf04:	602b      	str	r3, [r5, #0]
 801cf06:	e7d6      	b.n	801ceb6 <_free_r+0x22>
 801cf08:	6820      	ldr	r0, [r4, #0]
 801cf0a:	1821      	adds	r1, r4, r0
 801cf0c:	428b      	cmp	r3, r1
 801cf0e:	bf04      	itt	eq
 801cf10:	6819      	ldreq	r1, [r3, #0]
 801cf12:	685b      	ldreq	r3, [r3, #4]
 801cf14:	6063      	str	r3, [r4, #4]
 801cf16:	bf04      	itt	eq
 801cf18:	1809      	addeq	r1, r1, r0
 801cf1a:	6021      	streq	r1, [r4, #0]
 801cf1c:	6054      	str	r4, [r2, #4]
 801cf1e:	e7ca      	b.n	801ceb6 <_free_r+0x22>
 801cf20:	bd38      	pop	{r3, r4, r5, pc}
 801cf22:	bf00      	nop
 801cf24:	24023ae4 	.word	0x24023ae4

0801cf28 <malloc>:
 801cf28:	4b02      	ldr	r3, [pc, #8]	@ (801cf34 <malloc+0xc>)
 801cf2a:	4601      	mov	r1, r0
 801cf2c:	6818      	ldr	r0, [r3, #0]
 801cf2e:	f000 b825 	b.w	801cf7c <_malloc_r>
 801cf32:	bf00      	nop
 801cf34:	24000034 	.word	0x24000034

0801cf38 <sbrk_aligned>:
 801cf38:	b570      	push	{r4, r5, r6, lr}
 801cf3a:	4e0f      	ldr	r6, [pc, #60]	@ (801cf78 <sbrk_aligned+0x40>)
 801cf3c:	460c      	mov	r4, r1
 801cf3e:	6831      	ldr	r1, [r6, #0]
 801cf40:	4605      	mov	r5, r0
 801cf42:	b911      	cbnz	r1, 801cf4a <sbrk_aligned+0x12>
 801cf44:	f000 fe92 	bl	801dc6c <_sbrk_r>
 801cf48:	6030      	str	r0, [r6, #0]
 801cf4a:	4621      	mov	r1, r4
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	f000 fe8d 	bl	801dc6c <_sbrk_r>
 801cf52:	1c43      	adds	r3, r0, #1
 801cf54:	d103      	bne.n	801cf5e <sbrk_aligned+0x26>
 801cf56:	f04f 34ff 	mov.w	r4, #4294967295
 801cf5a:	4620      	mov	r0, r4
 801cf5c:	bd70      	pop	{r4, r5, r6, pc}
 801cf5e:	1cc4      	adds	r4, r0, #3
 801cf60:	f024 0403 	bic.w	r4, r4, #3
 801cf64:	42a0      	cmp	r0, r4
 801cf66:	d0f8      	beq.n	801cf5a <sbrk_aligned+0x22>
 801cf68:	1a21      	subs	r1, r4, r0
 801cf6a:	4628      	mov	r0, r5
 801cf6c:	f000 fe7e 	bl	801dc6c <_sbrk_r>
 801cf70:	3001      	adds	r0, #1
 801cf72:	d1f2      	bne.n	801cf5a <sbrk_aligned+0x22>
 801cf74:	e7ef      	b.n	801cf56 <sbrk_aligned+0x1e>
 801cf76:	bf00      	nop
 801cf78:	24023ae0 	.word	0x24023ae0

0801cf7c <_malloc_r>:
 801cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf80:	1ccd      	adds	r5, r1, #3
 801cf82:	f025 0503 	bic.w	r5, r5, #3
 801cf86:	3508      	adds	r5, #8
 801cf88:	2d0c      	cmp	r5, #12
 801cf8a:	bf38      	it	cc
 801cf8c:	250c      	movcc	r5, #12
 801cf8e:	2d00      	cmp	r5, #0
 801cf90:	4606      	mov	r6, r0
 801cf92:	db01      	blt.n	801cf98 <_malloc_r+0x1c>
 801cf94:	42a9      	cmp	r1, r5
 801cf96:	d904      	bls.n	801cfa2 <_malloc_r+0x26>
 801cf98:	230c      	movs	r3, #12
 801cf9a:	6033      	str	r3, [r6, #0]
 801cf9c:	2000      	movs	r0, #0
 801cf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d078 <_malloc_r+0xfc>
 801cfa6:	f000 f869 	bl	801d07c <__malloc_lock>
 801cfaa:	f8d8 3000 	ldr.w	r3, [r8]
 801cfae:	461c      	mov	r4, r3
 801cfb0:	bb44      	cbnz	r4, 801d004 <_malloc_r+0x88>
 801cfb2:	4629      	mov	r1, r5
 801cfb4:	4630      	mov	r0, r6
 801cfb6:	f7ff ffbf 	bl	801cf38 <sbrk_aligned>
 801cfba:	1c43      	adds	r3, r0, #1
 801cfbc:	4604      	mov	r4, r0
 801cfbe:	d158      	bne.n	801d072 <_malloc_r+0xf6>
 801cfc0:	f8d8 4000 	ldr.w	r4, [r8]
 801cfc4:	4627      	mov	r7, r4
 801cfc6:	2f00      	cmp	r7, #0
 801cfc8:	d143      	bne.n	801d052 <_malloc_r+0xd6>
 801cfca:	2c00      	cmp	r4, #0
 801cfcc:	d04b      	beq.n	801d066 <_malloc_r+0xea>
 801cfce:	6823      	ldr	r3, [r4, #0]
 801cfd0:	4639      	mov	r1, r7
 801cfd2:	4630      	mov	r0, r6
 801cfd4:	eb04 0903 	add.w	r9, r4, r3
 801cfd8:	f000 fe48 	bl	801dc6c <_sbrk_r>
 801cfdc:	4581      	cmp	r9, r0
 801cfde:	d142      	bne.n	801d066 <_malloc_r+0xea>
 801cfe0:	6821      	ldr	r1, [r4, #0]
 801cfe2:	1a6d      	subs	r5, r5, r1
 801cfe4:	4629      	mov	r1, r5
 801cfe6:	4630      	mov	r0, r6
 801cfe8:	f7ff ffa6 	bl	801cf38 <sbrk_aligned>
 801cfec:	3001      	adds	r0, #1
 801cfee:	d03a      	beq.n	801d066 <_malloc_r+0xea>
 801cff0:	6823      	ldr	r3, [r4, #0]
 801cff2:	442b      	add	r3, r5
 801cff4:	6023      	str	r3, [r4, #0]
 801cff6:	f8d8 3000 	ldr.w	r3, [r8]
 801cffa:	685a      	ldr	r2, [r3, #4]
 801cffc:	bb62      	cbnz	r2, 801d058 <_malloc_r+0xdc>
 801cffe:	f8c8 7000 	str.w	r7, [r8]
 801d002:	e00f      	b.n	801d024 <_malloc_r+0xa8>
 801d004:	6822      	ldr	r2, [r4, #0]
 801d006:	1b52      	subs	r2, r2, r5
 801d008:	d420      	bmi.n	801d04c <_malloc_r+0xd0>
 801d00a:	2a0b      	cmp	r2, #11
 801d00c:	d917      	bls.n	801d03e <_malloc_r+0xc2>
 801d00e:	1961      	adds	r1, r4, r5
 801d010:	42a3      	cmp	r3, r4
 801d012:	6025      	str	r5, [r4, #0]
 801d014:	bf18      	it	ne
 801d016:	6059      	strne	r1, [r3, #4]
 801d018:	6863      	ldr	r3, [r4, #4]
 801d01a:	bf08      	it	eq
 801d01c:	f8c8 1000 	streq.w	r1, [r8]
 801d020:	5162      	str	r2, [r4, r5]
 801d022:	604b      	str	r3, [r1, #4]
 801d024:	4630      	mov	r0, r6
 801d026:	f000 f82f 	bl	801d088 <__malloc_unlock>
 801d02a:	f104 000b 	add.w	r0, r4, #11
 801d02e:	1d23      	adds	r3, r4, #4
 801d030:	f020 0007 	bic.w	r0, r0, #7
 801d034:	1ac2      	subs	r2, r0, r3
 801d036:	bf1c      	itt	ne
 801d038:	1a1b      	subne	r3, r3, r0
 801d03a:	50a3      	strne	r3, [r4, r2]
 801d03c:	e7af      	b.n	801cf9e <_malloc_r+0x22>
 801d03e:	6862      	ldr	r2, [r4, #4]
 801d040:	42a3      	cmp	r3, r4
 801d042:	bf0c      	ite	eq
 801d044:	f8c8 2000 	streq.w	r2, [r8]
 801d048:	605a      	strne	r2, [r3, #4]
 801d04a:	e7eb      	b.n	801d024 <_malloc_r+0xa8>
 801d04c:	4623      	mov	r3, r4
 801d04e:	6864      	ldr	r4, [r4, #4]
 801d050:	e7ae      	b.n	801cfb0 <_malloc_r+0x34>
 801d052:	463c      	mov	r4, r7
 801d054:	687f      	ldr	r7, [r7, #4]
 801d056:	e7b6      	b.n	801cfc6 <_malloc_r+0x4a>
 801d058:	461a      	mov	r2, r3
 801d05a:	685b      	ldr	r3, [r3, #4]
 801d05c:	42a3      	cmp	r3, r4
 801d05e:	d1fb      	bne.n	801d058 <_malloc_r+0xdc>
 801d060:	2300      	movs	r3, #0
 801d062:	6053      	str	r3, [r2, #4]
 801d064:	e7de      	b.n	801d024 <_malloc_r+0xa8>
 801d066:	230c      	movs	r3, #12
 801d068:	6033      	str	r3, [r6, #0]
 801d06a:	4630      	mov	r0, r6
 801d06c:	f000 f80c 	bl	801d088 <__malloc_unlock>
 801d070:	e794      	b.n	801cf9c <_malloc_r+0x20>
 801d072:	6005      	str	r5, [r0, #0]
 801d074:	e7d6      	b.n	801d024 <_malloc_r+0xa8>
 801d076:	bf00      	nop
 801d078:	24023ae4 	.word	0x24023ae4

0801d07c <__malloc_lock>:
 801d07c:	4801      	ldr	r0, [pc, #4]	@ (801d084 <__malloc_lock+0x8>)
 801d07e:	f7ff b912 	b.w	801c2a6 <__retarget_lock_acquire_recursive>
 801d082:	bf00      	nop
 801d084:	24023adc 	.word	0x24023adc

0801d088 <__malloc_unlock>:
 801d088:	4801      	ldr	r0, [pc, #4]	@ (801d090 <__malloc_unlock+0x8>)
 801d08a:	f7ff b90d 	b.w	801c2a8 <__retarget_lock_release_recursive>
 801d08e:	bf00      	nop
 801d090:	24023adc 	.word	0x24023adc

0801d094 <_Balloc>:
 801d094:	b570      	push	{r4, r5, r6, lr}
 801d096:	69c6      	ldr	r6, [r0, #28]
 801d098:	4604      	mov	r4, r0
 801d09a:	460d      	mov	r5, r1
 801d09c:	b976      	cbnz	r6, 801d0bc <_Balloc+0x28>
 801d09e:	2010      	movs	r0, #16
 801d0a0:	f7ff ff42 	bl	801cf28 <malloc>
 801d0a4:	4602      	mov	r2, r0
 801d0a6:	61e0      	str	r0, [r4, #28]
 801d0a8:	b920      	cbnz	r0, 801d0b4 <_Balloc+0x20>
 801d0aa:	4b18      	ldr	r3, [pc, #96]	@ (801d10c <_Balloc+0x78>)
 801d0ac:	4818      	ldr	r0, [pc, #96]	@ (801d110 <_Balloc+0x7c>)
 801d0ae:	216b      	movs	r1, #107	@ 0x6b
 801d0b0:	f000 fdec 	bl	801dc8c <__assert_func>
 801d0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0b8:	6006      	str	r6, [r0, #0]
 801d0ba:	60c6      	str	r6, [r0, #12]
 801d0bc:	69e6      	ldr	r6, [r4, #28]
 801d0be:	68f3      	ldr	r3, [r6, #12]
 801d0c0:	b183      	cbz	r3, 801d0e4 <_Balloc+0x50>
 801d0c2:	69e3      	ldr	r3, [r4, #28]
 801d0c4:	68db      	ldr	r3, [r3, #12]
 801d0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d0ca:	b9b8      	cbnz	r0, 801d0fc <_Balloc+0x68>
 801d0cc:	2101      	movs	r1, #1
 801d0ce:	fa01 f605 	lsl.w	r6, r1, r5
 801d0d2:	1d72      	adds	r2, r6, #5
 801d0d4:	0092      	lsls	r2, r2, #2
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f000 fdf6 	bl	801dcc8 <_calloc_r>
 801d0dc:	b160      	cbz	r0, 801d0f8 <_Balloc+0x64>
 801d0de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d0e2:	e00e      	b.n	801d102 <_Balloc+0x6e>
 801d0e4:	2221      	movs	r2, #33	@ 0x21
 801d0e6:	2104      	movs	r1, #4
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f000 fded 	bl	801dcc8 <_calloc_r>
 801d0ee:	69e3      	ldr	r3, [r4, #28]
 801d0f0:	60f0      	str	r0, [r6, #12]
 801d0f2:	68db      	ldr	r3, [r3, #12]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d1e4      	bne.n	801d0c2 <_Balloc+0x2e>
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	bd70      	pop	{r4, r5, r6, pc}
 801d0fc:	6802      	ldr	r2, [r0, #0]
 801d0fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d102:	2300      	movs	r3, #0
 801d104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d108:	e7f7      	b.n	801d0fa <_Balloc+0x66>
 801d10a:	bf00      	nop
 801d10c:	0801f007 	.word	0x0801f007
 801d110:	0801f087 	.word	0x0801f087

0801d114 <_Bfree>:
 801d114:	b570      	push	{r4, r5, r6, lr}
 801d116:	69c6      	ldr	r6, [r0, #28]
 801d118:	4605      	mov	r5, r0
 801d11a:	460c      	mov	r4, r1
 801d11c:	b976      	cbnz	r6, 801d13c <_Bfree+0x28>
 801d11e:	2010      	movs	r0, #16
 801d120:	f7ff ff02 	bl	801cf28 <malloc>
 801d124:	4602      	mov	r2, r0
 801d126:	61e8      	str	r0, [r5, #28]
 801d128:	b920      	cbnz	r0, 801d134 <_Bfree+0x20>
 801d12a:	4b09      	ldr	r3, [pc, #36]	@ (801d150 <_Bfree+0x3c>)
 801d12c:	4809      	ldr	r0, [pc, #36]	@ (801d154 <_Bfree+0x40>)
 801d12e:	218f      	movs	r1, #143	@ 0x8f
 801d130:	f000 fdac 	bl	801dc8c <__assert_func>
 801d134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d138:	6006      	str	r6, [r0, #0]
 801d13a:	60c6      	str	r6, [r0, #12]
 801d13c:	b13c      	cbz	r4, 801d14e <_Bfree+0x3a>
 801d13e:	69eb      	ldr	r3, [r5, #28]
 801d140:	6862      	ldr	r2, [r4, #4]
 801d142:	68db      	ldr	r3, [r3, #12]
 801d144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d148:	6021      	str	r1, [r4, #0]
 801d14a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d14e:	bd70      	pop	{r4, r5, r6, pc}
 801d150:	0801f007 	.word	0x0801f007
 801d154:	0801f087 	.word	0x0801f087

0801d158 <__multadd>:
 801d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d15c:	690d      	ldr	r5, [r1, #16]
 801d15e:	4607      	mov	r7, r0
 801d160:	460c      	mov	r4, r1
 801d162:	461e      	mov	r6, r3
 801d164:	f101 0c14 	add.w	ip, r1, #20
 801d168:	2000      	movs	r0, #0
 801d16a:	f8dc 3000 	ldr.w	r3, [ip]
 801d16e:	b299      	uxth	r1, r3
 801d170:	fb02 6101 	mla	r1, r2, r1, r6
 801d174:	0c1e      	lsrs	r6, r3, #16
 801d176:	0c0b      	lsrs	r3, r1, #16
 801d178:	fb02 3306 	mla	r3, r2, r6, r3
 801d17c:	b289      	uxth	r1, r1
 801d17e:	3001      	adds	r0, #1
 801d180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d184:	4285      	cmp	r5, r0
 801d186:	f84c 1b04 	str.w	r1, [ip], #4
 801d18a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d18e:	dcec      	bgt.n	801d16a <__multadd+0x12>
 801d190:	b30e      	cbz	r6, 801d1d6 <__multadd+0x7e>
 801d192:	68a3      	ldr	r3, [r4, #8]
 801d194:	42ab      	cmp	r3, r5
 801d196:	dc19      	bgt.n	801d1cc <__multadd+0x74>
 801d198:	6861      	ldr	r1, [r4, #4]
 801d19a:	4638      	mov	r0, r7
 801d19c:	3101      	adds	r1, #1
 801d19e:	f7ff ff79 	bl	801d094 <_Balloc>
 801d1a2:	4680      	mov	r8, r0
 801d1a4:	b928      	cbnz	r0, 801d1b2 <__multadd+0x5a>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	4b0c      	ldr	r3, [pc, #48]	@ (801d1dc <__multadd+0x84>)
 801d1aa:	480d      	ldr	r0, [pc, #52]	@ (801d1e0 <__multadd+0x88>)
 801d1ac:	21ba      	movs	r1, #186	@ 0xba
 801d1ae:	f000 fd6d 	bl	801dc8c <__assert_func>
 801d1b2:	6922      	ldr	r2, [r4, #16]
 801d1b4:	3202      	adds	r2, #2
 801d1b6:	f104 010c 	add.w	r1, r4, #12
 801d1ba:	0092      	lsls	r2, r2, #2
 801d1bc:	300c      	adds	r0, #12
 801d1be:	f7ff f874 	bl	801c2aa <memcpy>
 801d1c2:	4621      	mov	r1, r4
 801d1c4:	4638      	mov	r0, r7
 801d1c6:	f7ff ffa5 	bl	801d114 <_Bfree>
 801d1ca:	4644      	mov	r4, r8
 801d1cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d1d0:	3501      	adds	r5, #1
 801d1d2:	615e      	str	r6, [r3, #20]
 801d1d4:	6125      	str	r5, [r4, #16]
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1dc:	0801f076 	.word	0x0801f076
 801d1e0:	0801f087 	.word	0x0801f087

0801d1e4 <__hi0bits>:
 801d1e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	bf36      	itet	cc
 801d1ec:	0403      	lslcc	r3, r0, #16
 801d1ee:	2000      	movcs	r0, #0
 801d1f0:	2010      	movcc	r0, #16
 801d1f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d1f6:	bf3c      	itt	cc
 801d1f8:	021b      	lslcc	r3, r3, #8
 801d1fa:	3008      	addcc	r0, #8
 801d1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d200:	bf3c      	itt	cc
 801d202:	011b      	lslcc	r3, r3, #4
 801d204:	3004      	addcc	r0, #4
 801d206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d20a:	bf3c      	itt	cc
 801d20c:	009b      	lslcc	r3, r3, #2
 801d20e:	3002      	addcc	r0, #2
 801d210:	2b00      	cmp	r3, #0
 801d212:	db05      	blt.n	801d220 <__hi0bits+0x3c>
 801d214:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d218:	f100 0001 	add.w	r0, r0, #1
 801d21c:	bf08      	it	eq
 801d21e:	2020      	moveq	r0, #32
 801d220:	4770      	bx	lr

0801d222 <__lo0bits>:
 801d222:	6803      	ldr	r3, [r0, #0]
 801d224:	4602      	mov	r2, r0
 801d226:	f013 0007 	ands.w	r0, r3, #7
 801d22a:	d00b      	beq.n	801d244 <__lo0bits+0x22>
 801d22c:	07d9      	lsls	r1, r3, #31
 801d22e:	d421      	bmi.n	801d274 <__lo0bits+0x52>
 801d230:	0798      	lsls	r0, r3, #30
 801d232:	bf49      	itett	mi
 801d234:	085b      	lsrmi	r3, r3, #1
 801d236:	089b      	lsrpl	r3, r3, #2
 801d238:	2001      	movmi	r0, #1
 801d23a:	6013      	strmi	r3, [r2, #0]
 801d23c:	bf5c      	itt	pl
 801d23e:	6013      	strpl	r3, [r2, #0]
 801d240:	2002      	movpl	r0, #2
 801d242:	4770      	bx	lr
 801d244:	b299      	uxth	r1, r3
 801d246:	b909      	cbnz	r1, 801d24c <__lo0bits+0x2a>
 801d248:	0c1b      	lsrs	r3, r3, #16
 801d24a:	2010      	movs	r0, #16
 801d24c:	b2d9      	uxtb	r1, r3
 801d24e:	b909      	cbnz	r1, 801d254 <__lo0bits+0x32>
 801d250:	3008      	adds	r0, #8
 801d252:	0a1b      	lsrs	r3, r3, #8
 801d254:	0719      	lsls	r1, r3, #28
 801d256:	bf04      	itt	eq
 801d258:	091b      	lsreq	r3, r3, #4
 801d25a:	3004      	addeq	r0, #4
 801d25c:	0799      	lsls	r1, r3, #30
 801d25e:	bf04      	itt	eq
 801d260:	089b      	lsreq	r3, r3, #2
 801d262:	3002      	addeq	r0, #2
 801d264:	07d9      	lsls	r1, r3, #31
 801d266:	d403      	bmi.n	801d270 <__lo0bits+0x4e>
 801d268:	085b      	lsrs	r3, r3, #1
 801d26a:	f100 0001 	add.w	r0, r0, #1
 801d26e:	d003      	beq.n	801d278 <__lo0bits+0x56>
 801d270:	6013      	str	r3, [r2, #0]
 801d272:	4770      	bx	lr
 801d274:	2000      	movs	r0, #0
 801d276:	4770      	bx	lr
 801d278:	2020      	movs	r0, #32
 801d27a:	4770      	bx	lr

0801d27c <__i2b>:
 801d27c:	b510      	push	{r4, lr}
 801d27e:	460c      	mov	r4, r1
 801d280:	2101      	movs	r1, #1
 801d282:	f7ff ff07 	bl	801d094 <_Balloc>
 801d286:	4602      	mov	r2, r0
 801d288:	b928      	cbnz	r0, 801d296 <__i2b+0x1a>
 801d28a:	4b05      	ldr	r3, [pc, #20]	@ (801d2a0 <__i2b+0x24>)
 801d28c:	4805      	ldr	r0, [pc, #20]	@ (801d2a4 <__i2b+0x28>)
 801d28e:	f240 1145 	movw	r1, #325	@ 0x145
 801d292:	f000 fcfb 	bl	801dc8c <__assert_func>
 801d296:	2301      	movs	r3, #1
 801d298:	6144      	str	r4, [r0, #20]
 801d29a:	6103      	str	r3, [r0, #16]
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	bf00      	nop
 801d2a0:	0801f076 	.word	0x0801f076
 801d2a4:	0801f087 	.word	0x0801f087

0801d2a8 <__multiply>:
 801d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2ac:	4617      	mov	r7, r2
 801d2ae:	690a      	ldr	r2, [r1, #16]
 801d2b0:	693b      	ldr	r3, [r7, #16]
 801d2b2:	429a      	cmp	r2, r3
 801d2b4:	bfa8      	it	ge
 801d2b6:	463b      	movge	r3, r7
 801d2b8:	4689      	mov	r9, r1
 801d2ba:	bfa4      	itt	ge
 801d2bc:	460f      	movge	r7, r1
 801d2be:	4699      	movge	r9, r3
 801d2c0:	693d      	ldr	r5, [r7, #16]
 801d2c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	6879      	ldr	r1, [r7, #4]
 801d2ca:	eb05 060a 	add.w	r6, r5, sl
 801d2ce:	42b3      	cmp	r3, r6
 801d2d0:	b085      	sub	sp, #20
 801d2d2:	bfb8      	it	lt
 801d2d4:	3101      	addlt	r1, #1
 801d2d6:	f7ff fedd 	bl	801d094 <_Balloc>
 801d2da:	b930      	cbnz	r0, 801d2ea <__multiply+0x42>
 801d2dc:	4602      	mov	r2, r0
 801d2de:	4b41      	ldr	r3, [pc, #260]	@ (801d3e4 <__multiply+0x13c>)
 801d2e0:	4841      	ldr	r0, [pc, #260]	@ (801d3e8 <__multiply+0x140>)
 801d2e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d2e6:	f000 fcd1 	bl	801dc8c <__assert_func>
 801d2ea:	f100 0414 	add.w	r4, r0, #20
 801d2ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d2f2:	4623      	mov	r3, r4
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	4573      	cmp	r3, lr
 801d2f8:	d320      	bcc.n	801d33c <__multiply+0x94>
 801d2fa:	f107 0814 	add.w	r8, r7, #20
 801d2fe:	f109 0114 	add.w	r1, r9, #20
 801d302:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d306:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d30a:	9302      	str	r3, [sp, #8]
 801d30c:	1beb      	subs	r3, r5, r7
 801d30e:	3b15      	subs	r3, #21
 801d310:	f023 0303 	bic.w	r3, r3, #3
 801d314:	3304      	adds	r3, #4
 801d316:	3715      	adds	r7, #21
 801d318:	42bd      	cmp	r5, r7
 801d31a:	bf38      	it	cc
 801d31c:	2304      	movcc	r3, #4
 801d31e:	9301      	str	r3, [sp, #4]
 801d320:	9b02      	ldr	r3, [sp, #8]
 801d322:	9103      	str	r1, [sp, #12]
 801d324:	428b      	cmp	r3, r1
 801d326:	d80c      	bhi.n	801d342 <__multiply+0x9a>
 801d328:	2e00      	cmp	r6, #0
 801d32a:	dd03      	ble.n	801d334 <__multiply+0x8c>
 801d32c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d330:	2b00      	cmp	r3, #0
 801d332:	d055      	beq.n	801d3e0 <__multiply+0x138>
 801d334:	6106      	str	r6, [r0, #16]
 801d336:	b005      	add	sp, #20
 801d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d33c:	f843 2b04 	str.w	r2, [r3], #4
 801d340:	e7d9      	b.n	801d2f6 <__multiply+0x4e>
 801d342:	f8b1 a000 	ldrh.w	sl, [r1]
 801d346:	f1ba 0f00 	cmp.w	sl, #0
 801d34a:	d01f      	beq.n	801d38c <__multiply+0xe4>
 801d34c:	46c4      	mov	ip, r8
 801d34e:	46a1      	mov	r9, r4
 801d350:	2700      	movs	r7, #0
 801d352:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d356:	f8d9 3000 	ldr.w	r3, [r9]
 801d35a:	fa1f fb82 	uxth.w	fp, r2
 801d35e:	b29b      	uxth	r3, r3
 801d360:	fb0a 330b 	mla	r3, sl, fp, r3
 801d364:	443b      	add	r3, r7
 801d366:	f8d9 7000 	ldr.w	r7, [r9]
 801d36a:	0c12      	lsrs	r2, r2, #16
 801d36c:	0c3f      	lsrs	r7, r7, #16
 801d36e:	fb0a 7202 	mla	r2, sl, r2, r7
 801d372:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d376:	b29b      	uxth	r3, r3
 801d378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d37c:	4565      	cmp	r5, ip
 801d37e:	f849 3b04 	str.w	r3, [r9], #4
 801d382:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d386:	d8e4      	bhi.n	801d352 <__multiply+0xaa>
 801d388:	9b01      	ldr	r3, [sp, #4]
 801d38a:	50e7      	str	r7, [r4, r3]
 801d38c:	9b03      	ldr	r3, [sp, #12]
 801d38e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d392:	3104      	adds	r1, #4
 801d394:	f1b9 0f00 	cmp.w	r9, #0
 801d398:	d020      	beq.n	801d3dc <__multiply+0x134>
 801d39a:	6823      	ldr	r3, [r4, #0]
 801d39c:	4647      	mov	r7, r8
 801d39e:	46a4      	mov	ip, r4
 801d3a0:	f04f 0a00 	mov.w	sl, #0
 801d3a4:	f8b7 b000 	ldrh.w	fp, [r7]
 801d3a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d3ac:	fb09 220b 	mla	r2, r9, fp, r2
 801d3b0:	4452      	add	r2, sl
 801d3b2:	b29b      	uxth	r3, r3
 801d3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d3b8:	f84c 3b04 	str.w	r3, [ip], #4
 801d3bc:	f857 3b04 	ldr.w	r3, [r7], #4
 801d3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d3c4:	f8bc 3000 	ldrh.w	r3, [ip]
 801d3c8:	fb09 330a 	mla	r3, r9, sl, r3
 801d3cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d3d0:	42bd      	cmp	r5, r7
 801d3d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d3d6:	d8e5      	bhi.n	801d3a4 <__multiply+0xfc>
 801d3d8:	9a01      	ldr	r2, [sp, #4]
 801d3da:	50a3      	str	r3, [r4, r2]
 801d3dc:	3404      	adds	r4, #4
 801d3de:	e79f      	b.n	801d320 <__multiply+0x78>
 801d3e0:	3e01      	subs	r6, #1
 801d3e2:	e7a1      	b.n	801d328 <__multiply+0x80>
 801d3e4:	0801f076 	.word	0x0801f076
 801d3e8:	0801f087 	.word	0x0801f087

0801d3ec <__pow5mult>:
 801d3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3f0:	4615      	mov	r5, r2
 801d3f2:	f012 0203 	ands.w	r2, r2, #3
 801d3f6:	4607      	mov	r7, r0
 801d3f8:	460e      	mov	r6, r1
 801d3fa:	d007      	beq.n	801d40c <__pow5mult+0x20>
 801d3fc:	4c25      	ldr	r4, [pc, #148]	@ (801d494 <__pow5mult+0xa8>)
 801d3fe:	3a01      	subs	r2, #1
 801d400:	2300      	movs	r3, #0
 801d402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d406:	f7ff fea7 	bl	801d158 <__multadd>
 801d40a:	4606      	mov	r6, r0
 801d40c:	10ad      	asrs	r5, r5, #2
 801d40e:	d03d      	beq.n	801d48c <__pow5mult+0xa0>
 801d410:	69fc      	ldr	r4, [r7, #28]
 801d412:	b97c      	cbnz	r4, 801d434 <__pow5mult+0x48>
 801d414:	2010      	movs	r0, #16
 801d416:	f7ff fd87 	bl	801cf28 <malloc>
 801d41a:	4602      	mov	r2, r0
 801d41c:	61f8      	str	r0, [r7, #28]
 801d41e:	b928      	cbnz	r0, 801d42c <__pow5mult+0x40>
 801d420:	4b1d      	ldr	r3, [pc, #116]	@ (801d498 <__pow5mult+0xac>)
 801d422:	481e      	ldr	r0, [pc, #120]	@ (801d49c <__pow5mult+0xb0>)
 801d424:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d428:	f000 fc30 	bl	801dc8c <__assert_func>
 801d42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d430:	6004      	str	r4, [r0, #0]
 801d432:	60c4      	str	r4, [r0, #12]
 801d434:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d43c:	b94c      	cbnz	r4, 801d452 <__pow5mult+0x66>
 801d43e:	f240 2171 	movw	r1, #625	@ 0x271
 801d442:	4638      	mov	r0, r7
 801d444:	f7ff ff1a 	bl	801d27c <__i2b>
 801d448:	2300      	movs	r3, #0
 801d44a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d44e:	4604      	mov	r4, r0
 801d450:	6003      	str	r3, [r0, #0]
 801d452:	f04f 0900 	mov.w	r9, #0
 801d456:	07eb      	lsls	r3, r5, #31
 801d458:	d50a      	bpl.n	801d470 <__pow5mult+0x84>
 801d45a:	4631      	mov	r1, r6
 801d45c:	4622      	mov	r2, r4
 801d45e:	4638      	mov	r0, r7
 801d460:	f7ff ff22 	bl	801d2a8 <__multiply>
 801d464:	4631      	mov	r1, r6
 801d466:	4680      	mov	r8, r0
 801d468:	4638      	mov	r0, r7
 801d46a:	f7ff fe53 	bl	801d114 <_Bfree>
 801d46e:	4646      	mov	r6, r8
 801d470:	106d      	asrs	r5, r5, #1
 801d472:	d00b      	beq.n	801d48c <__pow5mult+0xa0>
 801d474:	6820      	ldr	r0, [r4, #0]
 801d476:	b938      	cbnz	r0, 801d488 <__pow5mult+0x9c>
 801d478:	4622      	mov	r2, r4
 801d47a:	4621      	mov	r1, r4
 801d47c:	4638      	mov	r0, r7
 801d47e:	f7ff ff13 	bl	801d2a8 <__multiply>
 801d482:	6020      	str	r0, [r4, #0]
 801d484:	f8c0 9000 	str.w	r9, [r0]
 801d488:	4604      	mov	r4, r0
 801d48a:	e7e4      	b.n	801d456 <__pow5mult+0x6a>
 801d48c:	4630      	mov	r0, r6
 801d48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d492:	bf00      	nop
 801d494:	0801f138 	.word	0x0801f138
 801d498:	0801f007 	.word	0x0801f007
 801d49c:	0801f087 	.word	0x0801f087

0801d4a0 <__lshift>:
 801d4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a4:	460c      	mov	r4, r1
 801d4a6:	6849      	ldr	r1, [r1, #4]
 801d4a8:	6923      	ldr	r3, [r4, #16]
 801d4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d4ae:	68a3      	ldr	r3, [r4, #8]
 801d4b0:	4607      	mov	r7, r0
 801d4b2:	4691      	mov	r9, r2
 801d4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d4b8:	f108 0601 	add.w	r6, r8, #1
 801d4bc:	42b3      	cmp	r3, r6
 801d4be:	db0b      	blt.n	801d4d8 <__lshift+0x38>
 801d4c0:	4638      	mov	r0, r7
 801d4c2:	f7ff fde7 	bl	801d094 <_Balloc>
 801d4c6:	4605      	mov	r5, r0
 801d4c8:	b948      	cbnz	r0, 801d4de <__lshift+0x3e>
 801d4ca:	4602      	mov	r2, r0
 801d4cc:	4b28      	ldr	r3, [pc, #160]	@ (801d570 <__lshift+0xd0>)
 801d4ce:	4829      	ldr	r0, [pc, #164]	@ (801d574 <__lshift+0xd4>)
 801d4d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d4d4:	f000 fbda 	bl	801dc8c <__assert_func>
 801d4d8:	3101      	adds	r1, #1
 801d4da:	005b      	lsls	r3, r3, #1
 801d4dc:	e7ee      	b.n	801d4bc <__lshift+0x1c>
 801d4de:	2300      	movs	r3, #0
 801d4e0:	f100 0114 	add.w	r1, r0, #20
 801d4e4:	f100 0210 	add.w	r2, r0, #16
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	4553      	cmp	r3, sl
 801d4ec:	db33      	blt.n	801d556 <__lshift+0xb6>
 801d4ee:	6920      	ldr	r0, [r4, #16]
 801d4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d4f4:	f104 0314 	add.w	r3, r4, #20
 801d4f8:	f019 091f 	ands.w	r9, r9, #31
 801d4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d504:	d02b      	beq.n	801d55e <__lshift+0xbe>
 801d506:	f1c9 0e20 	rsb	lr, r9, #32
 801d50a:	468a      	mov	sl, r1
 801d50c:	2200      	movs	r2, #0
 801d50e:	6818      	ldr	r0, [r3, #0]
 801d510:	fa00 f009 	lsl.w	r0, r0, r9
 801d514:	4310      	orrs	r0, r2
 801d516:	f84a 0b04 	str.w	r0, [sl], #4
 801d51a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d51e:	459c      	cmp	ip, r3
 801d520:	fa22 f20e 	lsr.w	r2, r2, lr
 801d524:	d8f3      	bhi.n	801d50e <__lshift+0x6e>
 801d526:	ebac 0304 	sub.w	r3, ip, r4
 801d52a:	3b15      	subs	r3, #21
 801d52c:	f023 0303 	bic.w	r3, r3, #3
 801d530:	3304      	adds	r3, #4
 801d532:	f104 0015 	add.w	r0, r4, #21
 801d536:	4560      	cmp	r0, ip
 801d538:	bf88      	it	hi
 801d53a:	2304      	movhi	r3, #4
 801d53c:	50ca      	str	r2, [r1, r3]
 801d53e:	b10a      	cbz	r2, 801d544 <__lshift+0xa4>
 801d540:	f108 0602 	add.w	r6, r8, #2
 801d544:	3e01      	subs	r6, #1
 801d546:	4638      	mov	r0, r7
 801d548:	612e      	str	r6, [r5, #16]
 801d54a:	4621      	mov	r1, r4
 801d54c:	f7ff fde2 	bl	801d114 <_Bfree>
 801d550:	4628      	mov	r0, r5
 801d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d556:	f842 0f04 	str.w	r0, [r2, #4]!
 801d55a:	3301      	adds	r3, #1
 801d55c:	e7c5      	b.n	801d4ea <__lshift+0x4a>
 801d55e:	3904      	subs	r1, #4
 801d560:	f853 2b04 	ldr.w	r2, [r3], #4
 801d564:	f841 2f04 	str.w	r2, [r1, #4]!
 801d568:	459c      	cmp	ip, r3
 801d56a:	d8f9      	bhi.n	801d560 <__lshift+0xc0>
 801d56c:	e7ea      	b.n	801d544 <__lshift+0xa4>
 801d56e:	bf00      	nop
 801d570:	0801f076 	.word	0x0801f076
 801d574:	0801f087 	.word	0x0801f087

0801d578 <__mcmp>:
 801d578:	690a      	ldr	r2, [r1, #16]
 801d57a:	4603      	mov	r3, r0
 801d57c:	6900      	ldr	r0, [r0, #16]
 801d57e:	1a80      	subs	r0, r0, r2
 801d580:	b530      	push	{r4, r5, lr}
 801d582:	d10e      	bne.n	801d5a2 <__mcmp+0x2a>
 801d584:	3314      	adds	r3, #20
 801d586:	3114      	adds	r1, #20
 801d588:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d58c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d598:	4295      	cmp	r5, r2
 801d59a:	d003      	beq.n	801d5a4 <__mcmp+0x2c>
 801d59c:	d205      	bcs.n	801d5aa <__mcmp+0x32>
 801d59e:	f04f 30ff 	mov.w	r0, #4294967295
 801d5a2:	bd30      	pop	{r4, r5, pc}
 801d5a4:	42a3      	cmp	r3, r4
 801d5a6:	d3f3      	bcc.n	801d590 <__mcmp+0x18>
 801d5a8:	e7fb      	b.n	801d5a2 <__mcmp+0x2a>
 801d5aa:	2001      	movs	r0, #1
 801d5ac:	e7f9      	b.n	801d5a2 <__mcmp+0x2a>
	...

0801d5b0 <__mdiff>:
 801d5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b4:	4689      	mov	r9, r1
 801d5b6:	4606      	mov	r6, r0
 801d5b8:	4611      	mov	r1, r2
 801d5ba:	4648      	mov	r0, r9
 801d5bc:	4614      	mov	r4, r2
 801d5be:	f7ff ffdb 	bl	801d578 <__mcmp>
 801d5c2:	1e05      	subs	r5, r0, #0
 801d5c4:	d112      	bne.n	801d5ec <__mdiff+0x3c>
 801d5c6:	4629      	mov	r1, r5
 801d5c8:	4630      	mov	r0, r6
 801d5ca:	f7ff fd63 	bl	801d094 <_Balloc>
 801d5ce:	4602      	mov	r2, r0
 801d5d0:	b928      	cbnz	r0, 801d5de <__mdiff+0x2e>
 801d5d2:	4b3f      	ldr	r3, [pc, #252]	@ (801d6d0 <__mdiff+0x120>)
 801d5d4:	f240 2137 	movw	r1, #567	@ 0x237
 801d5d8:	483e      	ldr	r0, [pc, #248]	@ (801d6d4 <__mdiff+0x124>)
 801d5da:	f000 fb57 	bl	801dc8c <__assert_func>
 801d5de:	2301      	movs	r3, #1
 801d5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d5e4:	4610      	mov	r0, r2
 801d5e6:	b003      	add	sp, #12
 801d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5ec:	bfbc      	itt	lt
 801d5ee:	464b      	movlt	r3, r9
 801d5f0:	46a1      	movlt	r9, r4
 801d5f2:	4630      	mov	r0, r6
 801d5f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d5f8:	bfba      	itte	lt
 801d5fa:	461c      	movlt	r4, r3
 801d5fc:	2501      	movlt	r5, #1
 801d5fe:	2500      	movge	r5, #0
 801d600:	f7ff fd48 	bl	801d094 <_Balloc>
 801d604:	4602      	mov	r2, r0
 801d606:	b918      	cbnz	r0, 801d610 <__mdiff+0x60>
 801d608:	4b31      	ldr	r3, [pc, #196]	@ (801d6d0 <__mdiff+0x120>)
 801d60a:	f240 2145 	movw	r1, #581	@ 0x245
 801d60e:	e7e3      	b.n	801d5d8 <__mdiff+0x28>
 801d610:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d614:	6926      	ldr	r6, [r4, #16]
 801d616:	60c5      	str	r5, [r0, #12]
 801d618:	f109 0310 	add.w	r3, r9, #16
 801d61c:	f109 0514 	add.w	r5, r9, #20
 801d620:	f104 0e14 	add.w	lr, r4, #20
 801d624:	f100 0b14 	add.w	fp, r0, #20
 801d628:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d62c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d630:	9301      	str	r3, [sp, #4]
 801d632:	46d9      	mov	r9, fp
 801d634:	f04f 0c00 	mov.w	ip, #0
 801d638:	9b01      	ldr	r3, [sp, #4]
 801d63a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d63e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d642:	9301      	str	r3, [sp, #4]
 801d644:	fa1f f38a 	uxth.w	r3, sl
 801d648:	4619      	mov	r1, r3
 801d64a:	b283      	uxth	r3, r0
 801d64c:	1acb      	subs	r3, r1, r3
 801d64e:	0c00      	lsrs	r0, r0, #16
 801d650:	4463      	add	r3, ip
 801d652:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d656:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d65a:	b29b      	uxth	r3, r3
 801d65c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d660:	4576      	cmp	r6, lr
 801d662:	f849 3b04 	str.w	r3, [r9], #4
 801d666:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d66a:	d8e5      	bhi.n	801d638 <__mdiff+0x88>
 801d66c:	1b33      	subs	r3, r6, r4
 801d66e:	3b15      	subs	r3, #21
 801d670:	f023 0303 	bic.w	r3, r3, #3
 801d674:	3415      	adds	r4, #21
 801d676:	3304      	adds	r3, #4
 801d678:	42a6      	cmp	r6, r4
 801d67a:	bf38      	it	cc
 801d67c:	2304      	movcc	r3, #4
 801d67e:	441d      	add	r5, r3
 801d680:	445b      	add	r3, fp
 801d682:	461e      	mov	r6, r3
 801d684:	462c      	mov	r4, r5
 801d686:	4544      	cmp	r4, r8
 801d688:	d30e      	bcc.n	801d6a8 <__mdiff+0xf8>
 801d68a:	f108 0103 	add.w	r1, r8, #3
 801d68e:	1b49      	subs	r1, r1, r5
 801d690:	f021 0103 	bic.w	r1, r1, #3
 801d694:	3d03      	subs	r5, #3
 801d696:	45a8      	cmp	r8, r5
 801d698:	bf38      	it	cc
 801d69a:	2100      	movcc	r1, #0
 801d69c:	440b      	add	r3, r1
 801d69e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d6a2:	b191      	cbz	r1, 801d6ca <__mdiff+0x11a>
 801d6a4:	6117      	str	r7, [r2, #16]
 801d6a6:	e79d      	b.n	801d5e4 <__mdiff+0x34>
 801d6a8:	f854 1b04 	ldr.w	r1, [r4], #4
 801d6ac:	46e6      	mov	lr, ip
 801d6ae:	0c08      	lsrs	r0, r1, #16
 801d6b0:	fa1c fc81 	uxtah	ip, ip, r1
 801d6b4:	4471      	add	r1, lr
 801d6b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d6ba:	b289      	uxth	r1, r1
 801d6bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d6c0:	f846 1b04 	str.w	r1, [r6], #4
 801d6c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d6c8:	e7dd      	b.n	801d686 <__mdiff+0xd6>
 801d6ca:	3f01      	subs	r7, #1
 801d6cc:	e7e7      	b.n	801d69e <__mdiff+0xee>
 801d6ce:	bf00      	nop
 801d6d0:	0801f076 	.word	0x0801f076
 801d6d4:	0801f087 	.word	0x0801f087

0801d6d8 <__d2b>:
 801d6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d6dc:	460f      	mov	r7, r1
 801d6de:	2101      	movs	r1, #1
 801d6e0:	ec59 8b10 	vmov	r8, r9, d0
 801d6e4:	4616      	mov	r6, r2
 801d6e6:	f7ff fcd5 	bl	801d094 <_Balloc>
 801d6ea:	4604      	mov	r4, r0
 801d6ec:	b930      	cbnz	r0, 801d6fc <__d2b+0x24>
 801d6ee:	4602      	mov	r2, r0
 801d6f0:	4b23      	ldr	r3, [pc, #140]	@ (801d780 <__d2b+0xa8>)
 801d6f2:	4824      	ldr	r0, [pc, #144]	@ (801d784 <__d2b+0xac>)
 801d6f4:	f240 310f 	movw	r1, #783	@ 0x30f
 801d6f8:	f000 fac8 	bl	801dc8c <__assert_func>
 801d6fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d704:	b10d      	cbz	r5, 801d70a <__d2b+0x32>
 801d706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d70a:	9301      	str	r3, [sp, #4]
 801d70c:	f1b8 0300 	subs.w	r3, r8, #0
 801d710:	d023      	beq.n	801d75a <__d2b+0x82>
 801d712:	4668      	mov	r0, sp
 801d714:	9300      	str	r3, [sp, #0]
 801d716:	f7ff fd84 	bl	801d222 <__lo0bits>
 801d71a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d71e:	b1d0      	cbz	r0, 801d756 <__d2b+0x7e>
 801d720:	f1c0 0320 	rsb	r3, r0, #32
 801d724:	fa02 f303 	lsl.w	r3, r2, r3
 801d728:	430b      	orrs	r3, r1
 801d72a:	40c2      	lsrs	r2, r0
 801d72c:	6163      	str	r3, [r4, #20]
 801d72e:	9201      	str	r2, [sp, #4]
 801d730:	9b01      	ldr	r3, [sp, #4]
 801d732:	61a3      	str	r3, [r4, #24]
 801d734:	2b00      	cmp	r3, #0
 801d736:	bf0c      	ite	eq
 801d738:	2201      	moveq	r2, #1
 801d73a:	2202      	movne	r2, #2
 801d73c:	6122      	str	r2, [r4, #16]
 801d73e:	b1a5      	cbz	r5, 801d76a <__d2b+0x92>
 801d740:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d744:	4405      	add	r5, r0
 801d746:	603d      	str	r5, [r7, #0]
 801d748:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d74c:	6030      	str	r0, [r6, #0]
 801d74e:	4620      	mov	r0, r4
 801d750:	b003      	add	sp, #12
 801d752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d756:	6161      	str	r1, [r4, #20]
 801d758:	e7ea      	b.n	801d730 <__d2b+0x58>
 801d75a:	a801      	add	r0, sp, #4
 801d75c:	f7ff fd61 	bl	801d222 <__lo0bits>
 801d760:	9b01      	ldr	r3, [sp, #4]
 801d762:	6163      	str	r3, [r4, #20]
 801d764:	3020      	adds	r0, #32
 801d766:	2201      	movs	r2, #1
 801d768:	e7e8      	b.n	801d73c <__d2b+0x64>
 801d76a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d76e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d772:	6038      	str	r0, [r7, #0]
 801d774:	6918      	ldr	r0, [r3, #16]
 801d776:	f7ff fd35 	bl	801d1e4 <__hi0bits>
 801d77a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d77e:	e7e5      	b.n	801d74c <__d2b+0x74>
 801d780:	0801f076 	.word	0x0801f076
 801d784:	0801f087 	.word	0x0801f087

0801d788 <__sfputc_r>:
 801d788:	6893      	ldr	r3, [r2, #8]
 801d78a:	3b01      	subs	r3, #1
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	b410      	push	{r4}
 801d790:	6093      	str	r3, [r2, #8]
 801d792:	da08      	bge.n	801d7a6 <__sfputc_r+0x1e>
 801d794:	6994      	ldr	r4, [r2, #24]
 801d796:	42a3      	cmp	r3, r4
 801d798:	db01      	blt.n	801d79e <__sfputc_r+0x16>
 801d79a:	290a      	cmp	r1, #10
 801d79c:	d103      	bne.n	801d7a6 <__sfputc_r+0x1e>
 801d79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7a2:	f7fe bc10 	b.w	801bfc6 <__swbuf_r>
 801d7a6:	6813      	ldr	r3, [r2, #0]
 801d7a8:	1c58      	adds	r0, r3, #1
 801d7aa:	6010      	str	r0, [r2, #0]
 801d7ac:	7019      	strb	r1, [r3, #0]
 801d7ae:	4608      	mov	r0, r1
 801d7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7b4:	4770      	bx	lr

0801d7b6 <__sfputs_r>:
 801d7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7b8:	4606      	mov	r6, r0
 801d7ba:	460f      	mov	r7, r1
 801d7bc:	4614      	mov	r4, r2
 801d7be:	18d5      	adds	r5, r2, r3
 801d7c0:	42ac      	cmp	r4, r5
 801d7c2:	d101      	bne.n	801d7c8 <__sfputs_r+0x12>
 801d7c4:	2000      	movs	r0, #0
 801d7c6:	e007      	b.n	801d7d8 <__sfputs_r+0x22>
 801d7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7cc:	463a      	mov	r2, r7
 801d7ce:	4630      	mov	r0, r6
 801d7d0:	f7ff ffda 	bl	801d788 <__sfputc_r>
 801d7d4:	1c43      	adds	r3, r0, #1
 801d7d6:	d1f3      	bne.n	801d7c0 <__sfputs_r+0xa>
 801d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7dc <_vfiprintf_r>:
 801d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e0:	460d      	mov	r5, r1
 801d7e2:	b09d      	sub	sp, #116	@ 0x74
 801d7e4:	4614      	mov	r4, r2
 801d7e6:	4698      	mov	r8, r3
 801d7e8:	4606      	mov	r6, r0
 801d7ea:	b118      	cbz	r0, 801d7f4 <_vfiprintf_r+0x18>
 801d7ec:	6a03      	ldr	r3, [r0, #32]
 801d7ee:	b90b      	cbnz	r3, 801d7f4 <_vfiprintf_r+0x18>
 801d7f0:	f7fe fb00 	bl	801bdf4 <__sinit>
 801d7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d7f6:	07d9      	lsls	r1, r3, #31
 801d7f8:	d405      	bmi.n	801d806 <_vfiprintf_r+0x2a>
 801d7fa:	89ab      	ldrh	r3, [r5, #12]
 801d7fc:	059a      	lsls	r2, r3, #22
 801d7fe:	d402      	bmi.n	801d806 <_vfiprintf_r+0x2a>
 801d800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d802:	f7fe fd50 	bl	801c2a6 <__retarget_lock_acquire_recursive>
 801d806:	89ab      	ldrh	r3, [r5, #12]
 801d808:	071b      	lsls	r3, r3, #28
 801d80a:	d501      	bpl.n	801d810 <_vfiprintf_r+0x34>
 801d80c:	692b      	ldr	r3, [r5, #16]
 801d80e:	b99b      	cbnz	r3, 801d838 <_vfiprintf_r+0x5c>
 801d810:	4629      	mov	r1, r5
 801d812:	4630      	mov	r0, r6
 801d814:	f7fe fc16 	bl	801c044 <__swsetup_r>
 801d818:	b170      	cbz	r0, 801d838 <_vfiprintf_r+0x5c>
 801d81a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d81c:	07dc      	lsls	r4, r3, #31
 801d81e:	d504      	bpl.n	801d82a <_vfiprintf_r+0x4e>
 801d820:	f04f 30ff 	mov.w	r0, #4294967295
 801d824:	b01d      	add	sp, #116	@ 0x74
 801d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d82a:	89ab      	ldrh	r3, [r5, #12]
 801d82c:	0598      	lsls	r0, r3, #22
 801d82e:	d4f7      	bmi.n	801d820 <_vfiprintf_r+0x44>
 801d830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d832:	f7fe fd39 	bl	801c2a8 <__retarget_lock_release_recursive>
 801d836:	e7f3      	b.n	801d820 <_vfiprintf_r+0x44>
 801d838:	2300      	movs	r3, #0
 801d83a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d83c:	2320      	movs	r3, #32
 801d83e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d842:	f8cd 800c 	str.w	r8, [sp, #12]
 801d846:	2330      	movs	r3, #48	@ 0x30
 801d848:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d9f8 <_vfiprintf_r+0x21c>
 801d84c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d850:	f04f 0901 	mov.w	r9, #1
 801d854:	4623      	mov	r3, r4
 801d856:	469a      	mov	sl, r3
 801d858:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d85c:	b10a      	cbz	r2, 801d862 <_vfiprintf_r+0x86>
 801d85e:	2a25      	cmp	r2, #37	@ 0x25
 801d860:	d1f9      	bne.n	801d856 <_vfiprintf_r+0x7a>
 801d862:	ebba 0b04 	subs.w	fp, sl, r4
 801d866:	d00b      	beq.n	801d880 <_vfiprintf_r+0xa4>
 801d868:	465b      	mov	r3, fp
 801d86a:	4622      	mov	r2, r4
 801d86c:	4629      	mov	r1, r5
 801d86e:	4630      	mov	r0, r6
 801d870:	f7ff ffa1 	bl	801d7b6 <__sfputs_r>
 801d874:	3001      	adds	r0, #1
 801d876:	f000 80a7 	beq.w	801d9c8 <_vfiprintf_r+0x1ec>
 801d87a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d87c:	445a      	add	r2, fp
 801d87e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d880:	f89a 3000 	ldrb.w	r3, [sl]
 801d884:	2b00      	cmp	r3, #0
 801d886:	f000 809f 	beq.w	801d9c8 <_vfiprintf_r+0x1ec>
 801d88a:	2300      	movs	r3, #0
 801d88c:	f04f 32ff 	mov.w	r2, #4294967295
 801d890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d894:	f10a 0a01 	add.w	sl, sl, #1
 801d898:	9304      	str	r3, [sp, #16]
 801d89a:	9307      	str	r3, [sp, #28]
 801d89c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d8a0:	931a      	str	r3, [sp, #104]	@ 0x68
 801d8a2:	4654      	mov	r4, sl
 801d8a4:	2205      	movs	r2, #5
 801d8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8aa:	4853      	ldr	r0, [pc, #332]	@ (801d9f8 <_vfiprintf_r+0x21c>)
 801d8ac:	f7e2 fd18 	bl	80002e0 <memchr>
 801d8b0:	9a04      	ldr	r2, [sp, #16]
 801d8b2:	b9d8      	cbnz	r0, 801d8ec <_vfiprintf_r+0x110>
 801d8b4:	06d1      	lsls	r1, r2, #27
 801d8b6:	bf44      	itt	mi
 801d8b8:	2320      	movmi	r3, #32
 801d8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8be:	0713      	lsls	r3, r2, #28
 801d8c0:	bf44      	itt	mi
 801d8c2:	232b      	movmi	r3, #43	@ 0x2b
 801d8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8c8:	f89a 3000 	ldrb.w	r3, [sl]
 801d8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8ce:	d015      	beq.n	801d8fc <_vfiprintf_r+0x120>
 801d8d0:	9a07      	ldr	r2, [sp, #28]
 801d8d2:	4654      	mov	r4, sl
 801d8d4:	2000      	movs	r0, #0
 801d8d6:	f04f 0c0a 	mov.w	ip, #10
 801d8da:	4621      	mov	r1, r4
 801d8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8e0:	3b30      	subs	r3, #48	@ 0x30
 801d8e2:	2b09      	cmp	r3, #9
 801d8e4:	d94b      	bls.n	801d97e <_vfiprintf_r+0x1a2>
 801d8e6:	b1b0      	cbz	r0, 801d916 <_vfiprintf_r+0x13a>
 801d8e8:	9207      	str	r2, [sp, #28]
 801d8ea:	e014      	b.n	801d916 <_vfiprintf_r+0x13a>
 801d8ec:	eba0 0308 	sub.w	r3, r0, r8
 801d8f0:	fa09 f303 	lsl.w	r3, r9, r3
 801d8f4:	4313      	orrs	r3, r2
 801d8f6:	9304      	str	r3, [sp, #16]
 801d8f8:	46a2      	mov	sl, r4
 801d8fa:	e7d2      	b.n	801d8a2 <_vfiprintf_r+0xc6>
 801d8fc:	9b03      	ldr	r3, [sp, #12]
 801d8fe:	1d19      	adds	r1, r3, #4
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	9103      	str	r1, [sp, #12]
 801d904:	2b00      	cmp	r3, #0
 801d906:	bfbb      	ittet	lt
 801d908:	425b      	neglt	r3, r3
 801d90a:	f042 0202 	orrlt.w	r2, r2, #2
 801d90e:	9307      	strge	r3, [sp, #28]
 801d910:	9307      	strlt	r3, [sp, #28]
 801d912:	bfb8      	it	lt
 801d914:	9204      	strlt	r2, [sp, #16]
 801d916:	7823      	ldrb	r3, [r4, #0]
 801d918:	2b2e      	cmp	r3, #46	@ 0x2e
 801d91a:	d10a      	bne.n	801d932 <_vfiprintf_r+0x156>
 801d91c:	7863      	ldrb	r3, [r4, #1]
 801d91e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d920:	d132      	bne.n	801d988 <_vfiprintf_r+0x1ac>
 801d922:	9b03      	ldr	r3, [sp, #12]
 801d924:	1d1a      	adds	r2, r3, #4
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	9203      	str	r2, [sp, #12]
 801d92a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d92e:	3402      	adds	r4, #2
 801d930:	9305      	str	r3, [sp, #20]
 801d932:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801da08 <_vfiprintf_r+0x22c>
 801d936:	7821      	ldrb	r1, [r4, #0]
 801d938:	2203      	movs	r2, #3
 801d93a:	4650      	mov	r0, sl
 801d93c:	f7e2 fcd0 	bl	80002e0 <memchr>
 801d940:	b138      	cbz	r0, 801d952 <_vfiprintf_r+0x176>
 801d942:	9b04      	ldr	r3, [sp, #16]
 801d944:	eba0 000a 	sub.w	r0, r0, sl
 801d948:	2240      	movs	r2, #64	@ 0x40
 801d94a:	4082      	lsls	r2, r0
 801d94c:	4313      	orrs	r3, r2
 801d94e:	3401      	adds	r4, #1
 801d950:	9304      	str	r3, [sp, #16]
 801d952:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d956:	4829      	ldr	r0, [pc, #164]	@ (801d9fc <_vfiprintf_r+0x220>)
 801d958:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d95c:	2206      	movs	r2, #6
 801d95e:	f7e2 fcbf 	bl	80002e0 <memchr>
 801d962:	2800      	cmp	r0, #0
 801d964:	d03f      	beq.n	801d9e6 <_vfiprintf_r+0x20a>
 801d966:	4b26      	ldr	r3, [pc, #152]	@ (801da00 <_vfiprintf_r+0x224>)
 801d968:	bb1b      	cbnz	r3, 801d9b2 <_vfiprintf_r+0x1d6>
 801d96a:	9b03      	ldr	r3, [sp, #12]
 801d96c:	3307      	adds	r3, #7
 801d96e:	f023 0307 	bic.w	r3, r3, #7
 801d972:	3308      	adds	r3, #8
 801d974:	9303      	str	r3, [sp, #12]
 801d976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d978:	443b      	add	r3, r7
 801d97a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d97c:	e76a      	b.n	801d854 <_vfiprintf_r+0x78>
 801d97e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d982:	460c      	mov	r4, r1
 801d984:	2001      	movs	r0, #1
 801d986:	e7a8      	b.n	801d8da <_vfiprintf_r+0xfe>
 801d988:	2300      	movs	r3, #0
 801d98a:	3401      	adds	r4, #1
 801d98c:	9305      	str	r3, [sp, #20]
 801d98e:	4619      	mov	r1, r3
 801d990:	f04f 0c0a 	mov.w	ip, #10
 801d994:	4620      	mov	r0, r4
 801d996:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d99a:	3a30      	subs	r2, #48	@ 0x30
 801d99c:	2a09      	cmp	r2, #9
 801d99e:	d903      	bls.n	801d9a8 <_vfiprintf_r+0x1cc>
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d0c6      	beq.n	801d932 <_vfiprintf_r+0x156>
 801d9a4:	9105      	str	r1, [sp, #20]
 801d9a6:	e7c4      	b.n	801d932 <_vfiprintf_r+0x156>
 801d9a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9ac:	4604      	mov	r4, r0
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	e7f0      	b.n	801d994 <_vfiprintf_r+0x1b8>
 801d9b2:	ab03      	add	r3, sp, #12
 801d9b4:	9300      	str	r3, [sp, #0]
 801d9b6:	462a      	mov	r2, r5
 801d9b8:	4b12      	ldr	r3, [pc, #72]	@ (801da04 <_vfiprintf_r+0x228>)
 801d9ba:	a904      	add	r1, sp, #16
 801d9bc:	4630      	mov	r0, r6
 801d9be:	f7fd fde7 	bl	801b590 <_printf_float>
 801d9c2:	4607      	mov	r7, r0
 801d9c4:	1c78      	adds	r0, r7, #1
 801d9c6:	d1d6      	bne.n	801d976 <_vfiprintf_r+0x19a>
 801d9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9ca:	07d9      	lsls	r1, r3, #31
 801d9cc:	d405      	bmi.n	801d9da <_vfiprintf_r+0x1fe>
 801d9ce:	89ab      	ldrh	r3, [r5, #12]
 801d9d0:	059a      	lsls	r2, r3, #22
 801d9d2:	d402      	bmi.n	801d9da <_vfiprintf_r+0x1fe>
 801d9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9d6:	f7fe fc67 	bl	801c2a8 <__retarget_lock_release_recursive>
 801d9da:	89ab      	ldrh	r3, [r5, #12]
 801d9dc:	065b      	lsls	r3, r3, #25
 801d9de:	f53f af1f 	bmi.w	801d820 <_vfiprintf_r+0x44>
 801d9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9e4:	e71e      	b.n	801d824 <_vfiprintf_r+0x48>
 801d9e6:	ab03      	add	r3, sp, #12
 801d9e8:	9300      	str	r3, [sp, #0]
 801d9ea:	462a      	mov	r2, r5
 801d9ec:	4b05      	ldr	r3, [pc, #20]	@ (801da04 <_vfiprintf_r+0x228>)
 801d9ee:	a904      	add	r1, sp, #16
 801d9f0:	4630      	mov	r0, r6
 801d9f2:	f7fe f855 	bl	801baa0 <_printf_i>
 801d9f6:	e7e4      	b.n	801d9c2 <_vfiprintf_r+0x1e6>
 801d9f8:	0801f0e0 	.word	0x0801f0e0
 801d9fc:	0801f0ea 	.word	0x0801f0ea
 801da00:	0801b591 	.word	0x0801b591
 801da04:	0801d7b7 	.word	0x0801d7b7
 801da08:	0801f0e6 	.word	0x0801f0e6

0801da0c <__sflush_r>:
 801da0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da14:	0716      	lsls	r6, r2, #28
 801da16:	4605      	mov	r5, r0
 801da18:	460c      	mov	r4, r1
 801da1a:	d454      	bmi.n	801dac6 <__sflush_r+0xba>
 801da1c:	684b      	ldr	r3, [r1, #4]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	dc02      	bgt.n	801da28 <__sflush_r+0x1c>
 801da22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801da24:	2b00      	cmp	r3, #0
 801da26:	dd48      	ble.n	801daba <__sflush_r+0xae>
 801da28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801da2a:	2e00      	cmp	r6, #0
 801da2c:	d045      	beq.n	801daba <__sflush_r+0xae>
 801da2e:	2300      	movs	r3, #0
 801da30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801da34:	682f      	ldr	r7, [r5, #0]
 801da36:	6a21      	ldr	r1, [r4, #32]
 801da38:	602b      	str	r3, [r5, #0]
 801da3a:	d030      	beq.n	801da9e <__sflush_r+0x92>
 801da3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801da3e:	89a3      	ldrh	r3, [r4, #12]
 801da40:	0759      	lsls	r1, r3, #29
 801da42:	d505      	bpl.n	801da50 <__sflush_r+0x44>
 801da44:	6863      	ldr	r3, [r4, #4]
 801da46:	1ad2      	subs	r2, r2, r3
 801da48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801da4a:	b10b      	cbz	r3, 801da50 <__sflush_r+0x44>
 801da4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801da4e:	1ad2      	subs	r2, r2, r3
 801da50:	2300      	movs	r3, #0
 801da52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801da54:	6a21      	ldr	r1, [r4, #32]
 801da56:	4628      	mov	r0, r5
 801da58:	47b0      	blx	r6
 801da5a:	1c43      	adds	r3, r0, #1
 801da5c:	89a3      	ldrh	r3, [r4, #12]
 801da5e:	d106      	bne.n	801da6e <__sflush_r+0x62>
 801da60:	6829      	ldr	r1, [r5, #0]
 801da62:	291d      	cmp	r1, #29
 801da64:	d82b      	bhi.n	801dabe <__sflush_r+0xb2>
 801da66:	4a2a      	ldr	r2, [pc, #168]	@ (801db10 <__sflush_r+0x104>)
 801da68:	40ca      	lsrs	r2, r1
 801da6a:	07d6      	lsls	r6, r2, #31
 801da6c:	d527      	bpl.n	801dabe <__sflush_r+0xb2>
 801da6e:	2200      	movs	r2, #0
 801da70:	6062      	str	r2, [r4, #4]
 801da72:	04d9      	lsls	r1, r3, #19
 801da74:	6922      	ldr	r2, [r4, #16]
 801da76:	6022      	str	r2, [r4, #0]
 801da78:	d504      	bpl.n	801da84 <__sflush_r+0x78>
 801da7a:	1c42      	adds	r2, r0, #1
 801da7c:	d101      	bne.n	801da82 <__sflush_r+0x76>
 801da7e:	682b      	ldr	r3, [r5, #0]
 801da80:	b903      	cbnz	r3, 801da84 <__sflush_r+0x78>
 801da82:	6560      	str	r0, [r4, #84]	@ 0x54
 801da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da86:	602f      	str	r7, [r5, #0]
 801da88:	b1b9      	cbz	r1, 801daba <__sflush_r+0xae>
 801da8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da8e:	4299      	cmp	r1, r3
 801da90:	d002      	beq.n	801da98 <__sflush_r+0x8c>
 801da92:	4628      	mov	r0, r5
 801da94:	f7ff f9fe 	bl	801ce94 <_free_r>
 801da98:	2300      	movs	r3, #0
 801da9a:	6363      	str	r3, [r4, #52]	@ 0x34
 801da9c:	e00d      	b.n	801daba <__sflush_r+0xae>
 801da9e:	2301      	movs	r3, #1
 801daa0:	4628      	mov	r0, r5
 801daa2:	47b0      	blx	r6
 801daa4:	4602      	mov	r2, r0
 801daa6:	1c50      	adds	r0, r2, #1
 801daa8:	d1c9      	bne.n	801da3e <__sflush_r+0x32>
 801daaa:	682b      	ldr	r3, [r5, #0]
 801daac:	2b00      	cmp	r3, #0
 801daae:	d0c6      	beq.n	801da3e <__sflush_r+0x32>
 801dab0:	2b1d      	cmp	r3, #29
 801dab2:	d001      	beq.n	801dab8 <__sflush_r+0xac>
 801dab4:	2b16      	cmp	r3, #22
 801dab6:	d11e      	bne.n	801daf6 <__sflush_r+0xea>
 801dab8:	602f      	str	r7, [r5, #0]
 801daba:	2000      	movs	r0, #0
 801dabc:	e022      	b.n	801db04 <__sflush_r+0xf8>
 801dabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dac2:	b21b      	sxth	r3, r3
 801dac4:	e01b      	b.n	801dafe <__sflush_r+0xf2>
 801dac6:	690f      	ldr	r7, [r1, #16]
 801dac8:	2f00      	cmp	r7, #0
 801daca:	d0f6      	beq.n	801daba <__sflush_r+0xae>
 801dacc:	0793      	lsls	r3, r2, #30
 801dace:	680e      	ldr	r6, [r1, #0]
 801dad0:	bf08      	it	eq
 801dad2:	694b      	ldreq	r3, [r1, #20]
 801dad4:	600f      	str	r7, [r1, #0]
 801dad6:	bf18      	it	ne
 801dad8:	2300      	movne	r3, #0
 801dada:	eba6 0807 	sub.w	r8, r6, r7
 801dade:	608b      	str	r3, [r1, #8]
 801dae0:	f1b8 0f00 	cmp.w	r8, #0
 801dae4:	dde9      	ble.n	801daba <__sflush_r+0xae>
 801dae6:	6a21      	ldr	r1, [r4, #32]
 801dae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801daea:	4643      	mov	r3, r8
 801daec:	463a      	mov	r2, r7
 801daee:	4628      	mov	r0, r5
 801daf0:	47b0      	blx	r6
 801daf2:	2800      	cmp	r0, #0
 801daf4:	dc08      	bgt.n	801db08 <__sflush_r+0xfc>
 801daf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dafe:	81a3      	strh	r3, [r4, #12]
 801db00:	f04f 30ff 	mov.w	r0, #4294967295
 801db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db08:	4407      	add	r7, r0
 801db0a:	eba8 0800 	sub.w	r8, r8, r0
 801db0e:	e7e7      	b.n	801dae0 <__sflush_r+0xd4>
 801db10:	20400001 	.word	0x20400001

0801db14 <_fflush_r>:
 801db14:	b538      	push	{r3, r4, r5, lr}
 801db16:	690b      	ldr	r3, [r1, #16]
 801db18:	4605      	mov	r5, r0
 801db1a:	460c      	mov	r4, r1
 801db1c:	b913      	cbnz	r3, 801db24 <_fflush_r+0x10>
 801db1e:	2500      	movs	r5, #0
 801db20:	4628      	mov	r0, r5
 801db22:	bd38      	pop	{r3, r4, r5, pc}
 801db24:	b118      	cbz	r0, 801db2e <_fflush_r+0x1a>
 801db26:	6a03      	ldr	r3, [r0, #32]
 801db28:	b90b      	cbnz	r3, 801db2e <_fflush_r+0x1a>
 801db2a:	f7fe f963 	bl	801bdf4 <__sinit>
 801db2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db32:	2b00      	cmp	r3, #0
 801db34:	d0f3      	beq.n	801db1e <_fflush_r+0xa>
 801db36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801db38:	07d0      	lsls	r0, r2, #31
 801db3a:	d404      	bmi.n	801db46 <_fflush_r+0x32>
 801db3c:	0599      	lsls	r1, r3, #22
 801db3e:	d402      	bmi.n	801db46 <_fflush_r+0x32>
 801db40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db42:	f7fe fbb0 	bl	801c2a6 <__retarget_lock_acquire_recursive>
 801db46:	4628      	mov	r0, r5
 801db48:	4621      	mov	r1, r4
 801db4a:	f7ff ff5f 	bl	801da0c <__sflush_r>
 801db4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801db50:	07da      	lsls	r2, r3, #31
 801db52:	4605      	mov	r5, r0
 801db54:	d4e4      	bmi.n	801db20 <_fflush_r+0xc>
 801db56:	89a3      	ldrh	r3, [r4, #12]
 801db58:	059b      	lsls	r3, r3, #22
 801db5a:	d4e1      	bmi.n	801db20 <_fflush_r+0xc>
 801db5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db5e:	f7fe fba3 	bl	801c2a8 <__retarget_lock_release_recursive>
 801db62:	e7dd      	b.n	801db20 <_fflush_r+0xc>

0801db64 <__swhatbuf_r>:
 801db64:	b570      	push	{r4, r5, r6, lr}
 801db66:	460c      	mov	r4, r1
 801db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db6c:	2900      	cmp	r1, #0
 801db6e:	b096      	sub	sp, #88	@ 0x58
 801db70:	4615      	mov	r5, r2
 801db72:	461e      	mov	r6, r3
 801db74:	da0d      	bge.n	801db92 <__swhatbuf_r+0x2e>
 801db76:	89a3      	ldrh	r3, [r4, #12]
 801db78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db7c:	f04f 0100 	mov.w	r1, #0
 801db80:	bf14      	ite	ne
 801db82:	2340      	movne	r3, #64	@ 0x40
 801db84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db88:	2000      	movs	r0, #0
 801db8a:	6031      	str	r1, [r6, #0]
 801db8c:	602b      	str	r3, [r5, #0]
 801db8e:	b016      	add	sp, #88	@ 0x58
 801db90:	bd70      	pop	{r4, r5, r6, pc}
 801db92:	466a      	mov	r2, sp
 801db94:	f000 f848 	bl	801dc28 <_fstat_r>
 801db98:	2800      	cmp	r0, #0
 801db9a:	dbec      	blt.n	801db76 <__swhatbuf_r+0x12>
 801db9c:	9901      	ldr	r1, [sp, #4]
 801db9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dba6:	4259      	negs	r1, r3
 801dba8:	4159      	adcs	r1, r3
 801dbaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dbae:	e7eb      	b.n	801db88 <__swhatbuf_r+0x24>

0801dbb0 <__smakebuf_r>:
 801dbb0:	898b      	ldrh	r3, [r1, #12]
 801dbb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dbb4:	079d      	lsls	r5, r3, #30
 801dbb6:	4606      	mov	r6, r0
 801dbb8:	460c      	mov	r4, r1
 801dbba:	d507      	bpl.n	801dbcc <__smakebuf_r+0x1c>
 801dbbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dbc0:	6023      	str	r3, [r4, #0]
 801dbc2:	6123      	str	r3, [r4, #16]
 801dbc4:	2301      	movs	r3, #1
 801dbc6:	6163      	str	r3, [r4, #20]
 801dbc8:	b003      	add	sp, #12
 801dbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbcc:	ab01      	add	r3, sp, #4
 801dbce:	466a      	mov	r2, sp
 801dbd0:	f7ff ffc8 	bl	801db64 <__swhatbuf_r>
 801dbd4:	9f00      	ldr	r7, [sp, #0]
 801dbd6:	4605      	mov	r5, r0
 801dbd8:	4639      	mov	r1, r7
 801dbda:	4630      	mov	r0, r6
 801dbdc:	f7ff f9ce 	bl	801cf7c <_malloc_r>
 801dbe0:	b948      	cbnz	r0, 801dbf6 <__smakebuf_r+0x46>
 801dbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbe6:	059a      	lsls	r2, r3, #22
 801dbe8:	d4ee      	bmi.n	801dbc8 <__smakebuf_r+0x18>
 801dbea:	f023 0303 	bic.w	r3, r3, #3
 801dbee:	f043 0302 	orr.w	r3, r3, #2
 801dbf2:	81a3      	strh	r3, [r4, #12]
 801dbf4:	e7e2      	b.n	801dbbc <__smakebuf_r+0xc>
 801dbf6:	89a3      	ldrh	r3, [r4, #12]
 801dbf8:	6020      	str	r0, [r4, #0]
 801dbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dbfe:	81a3      	strh	r3, [r4, #12]
 801dc00:	9b01      	ldr	r3, [sp, #4]
 801dc02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dc06:	b15b      	cbz	r3, 801dc20 <__smakebuf_r+0x70>
 801dc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	f000 f81d 	bl	801dc4c <_isatty_r>
 801dc12:	b128      	cbz	r0, 801dc20 <__smakebuf_r+0x70>
 801dc14:	89a3      	ldrh	r3, [r4, #12]
 801dc16:	f023 0303 	bic.w	r3, r3, #3
 801dc1a:	f043 0301 	orr.w	r3, r3, #1
 801dc1e:	81a3      	strh	r3, [r4, #12]
 801dc20:	89a3      	ldrh	r3, [r4, #12]
 801dc22:	431d      	orrs	r5, r3
 801dc24:	81a5      	strh	r5, [r4, #12]
 801dc26:	e7cf      	b.n	801dbc8 <__smakebuf_r+0x18>

0801dc28 <_fstat_r>:
 801dc28:	b538      	push	{r3, r4, r5, lr}
 801dc2a:	4d07      	ldr	r5, [pc, #28]	@ (801dc48 <_fstat_r+0x20>)
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	4604      	mov	r4, r0
 801dc30:	4608      	mov	r0, r1
 801dc32:	4611      	mov	r1, r2
 801dc34:	602b      	str	r3, [r5, #0]
 801dc36:	f7e5 f8a7 	bl	8002d88 <_fstat>
 801dc3a:	1c43      	adds	r3, r0, #1
 801dc3c:	d102      	bne.n	801dc44 <_fstat_r+0x1c>
 801dc3e:	682b      	ldr	r3, [r5, #0]
 801dc40:	b103      	cbz	r3, 801dc44 <_fstat_r+0x1c>
 801dc42:	6023      	str	r3, [r4, #0]
 801dc44:	bd38      	pop	{r3, r4, r5, pc}
 801dc46:	bf00      	nop
 801dc48:	24023ad8 	.word	0x24023ad8

0801dc4c <_isatty_r>:
 801dc4c:	b538      	push	{r3, r4, r5, lr}
 801dc4e:	4d06      	ldr	r5, [pc, #24]	@ (801dc68 <_isatty_r+0x1c>)
 801dc50:	2300      	movs	r3, #0
 801dc52:	4604      	mov	r4, r0
 801dc54:	4608      	mov	r0, r1
 801dc56:	602b      	str	r3, [r5, #0]
 801dc58:	f7e5 f8a6 	bl	8002da8 <_isatty>
 801dc5c:	1c43      	adds	r3, r0, #1
 801dc5e:	d102      	bne.n	801dc66 <_isatty_r+0x1a>
 801dc60:	682b      	ldr	r3, [r5, #0]
 801dc62:	b103      	cbz	r3, 801dc66 <_isatty_r+0x1a>
 801dc64:	6023      	str	r3, [r4, #0]
 801dc66:	bd38      	pop	{r3, r4, r5, pc}
 801dc68:	24023ad8 	.word	0x24023ad8

0801dc6c <_sbrk_r>:
 801dc6c:	b538      	push	{r3, r4, r5, lr}
 801dc6e:	4d06      	ldr	r5, [pc, #24]	@ (801dc88 <_sbrk_r+0x1c>)
 801dc70:	2300      	movs	r3, #0
 801dc72:	4604      	mov	r4, r0
 801dc74:	4608      	mov	r0, r1
 801dc76:	602b      	str	r3, [r5, #0]
 801dc78:	f7e5 f8ae 	bl	8002dd8 <_sbrk>
 801dc7c:	1c43      	adds	r3, r0, #1
 801dc7e:	d102      	bne.n	801dc86 <_sbrk_r+0x1a>
 801dc80:	682b      	ldr	r3, [r5, #0]
 801dc82:	b103      	cbz	r3, 801dc86 <_sbrk_r+0x1a>
 801dc84:	6023      	str	r3, [r4, #0]
 801dc86:	bd38      	pop	{r3, r4, r5, pc}
 801dc88:	24023ad8 	.word	0x24023ad8

0801dc8c <__assert_func>:
 801dc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dc8e:	4614      	mov	r4, r2
 801dc90:	461a      	mov	r2, r3
 801dc92:	4b09      	ldr	r3, [pc, #36]	@ (801dcb8 <__assert_func+0x2c>)
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	4605      	mov	r5, r0
 801dc98:	68d8      	ldr	r0, [r3, #12]
 801dc9a:	b14c      	cbz	r4, 801dcb0 <__assert_func+0x24>
 801dc9c:	4b07      	ldr	r3, [pc, #28]	@ (801dcbc <__assert_func+0x30>)
 801dc9e:	9100      	str	r1, [sp, #0]
 801dca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dca4:	4906      	ldr	r1, [pc, #24]	@ (801dcc0 <__assert_func+0x34>)
 801dca6:	462b      	mov	r3, r5
 801dca8:	f000 f842 	bl	801dd30 <fiprintf>
 801dcac:	f000 f852 	bl	801dd54 <abort>
 801dcb0:	4b04      	ldr	r3, [pc, #16]	@ (801dcc4 <__assert_func+0x38>)
 801dcb2:	461c      	mov	r4, r3
 801dcb4:	e7f3      	b.n	801dc9e <__assert_func+0x12>
 801dcb6:	bf00      	nop
 801dcb8:	24000034 	.word	0x24000034
 801dcbc:	0801f0fb 	.word	0x0801f0fb
 801dcc0:	0801f108 	.word	0x0801f108
 801dcc4:	0801f136 	.word	0x0801f136

0801dcc8 <_calloc_r>:
 801dcc8:	b570      	push	{r4, r5, r6, lr}
 801dcca:	fba1 5402 	umull	r5, r4, r1, r2
 801dcce:	b934      	cbnz	r4, 801dcde <_calloc_r+0x16>
 801dcd0:	4629      	mov	r1, r5
 801dcd2:	f7ff f953 	bl	801cf7c <_malloc_r>
 801dcd6:	4606      	mov	r6, r0
 801dcd8:	b928      	cbnz	r0, 801dce6 <_calloc_r+0x1e>
 801dcda:	4630      	mov	r0, r6
 801dcdc:	bd70      	pop	{r4, r5, r6, pc}
 801dcde:	220c      	movs	r2, #12
 801dce0:	6002      	str	r2, [r0, #0]
 801dce2:	2600      	movs	r6, #0
 801dce4:	e7f9      	b.n	801dcda <_calloc_r+0x12>
 801dce6:	462a      	mov	r2, r5
 801dce8:	4621      	mov	r1, r4
 801dcea:	f7fe fa01 	bl	801c0f0 <memset>
 801dcee:	e7f4      	b.n	801dcda <_calloc_r+0x12>

0801dcf0 <__ascii_mbtowc>:
 801dcf0:	b082      	sub	sp, #8
 801dcf2:	b901      	cbnz	r1, 801dcf6 <__ascii_mbtowc+0x6>
 801dcf4:	a901      	add	r1, sp, #4
 801dcf6:	b142      	cbz	r2, 801dd0a <__ascii_mbtowc+0x1a>
 801dcf8:	b14b      	cbz	r3, 801dd0e <__ascii_mbtowc+0x1e>
 801dcfa:	7813      	ldrb	r3, [r2, #0]
 801dcfc:	600b      	str	r3, [r1, #0]
 801dcfe:	7812      	ldrb	r2, [r2, #0]
 801dd00:	1e10      	subs	r0, r2, #0
 801dd02:	bf18      	it	ne
 801dd04:	2001      	movne	r0, #1
 801dd06:	b002      	add	sp, #8
 801dd08:	4770      	bx	lr
 801dd0a:	4610      	mov	r0, r2
 801dd0c:	e7fb      	b.n	801dd06 <__ascii_mbtowc+0x16>
 801dd0e:	f06f 0001 	mvn.w	r0, #1
 801dd12:	e7f8      	b.n	801dd06 <__ascii_mbtowc+0x16>

0801dd14 <__ascii_wctomb>:
 801dd14:	4603      	mov	r3, r0
 801dd16:	4608      	mov	r0, r1
 801dd18:	b141      	cbz	r1, 801dd2c <__ascii_wctomb+0x18>
 801dd1a:	2aff      	cmp	r2, #255	@ 0xff
 801dd1c:	d904      	bls.n	801dd28 <__ascii_wctomb+0x14>
 801dd1e:	228a      	movs	r2, #138	@ 0x8a
 801dd20:	601a      	str	r2, [r3, #0]
 801dd22:	f04f 30ff 	mov.w	r0, #4294967295
 801dd26:	4770      	bx	lr
 801dd28:	700a      	strb	r2, [r1, #0]
 801dd2a:	2001      	movs	r0, #1
 801dd2c:	4770      	bx	lr
	...

0801dd30 <fiprintf>:
 801dd30:	b40e      	push	{r1, r2, r3}
 801dd32:	b503      	push	{r0, r1, lr}
 801dd34:	4601      	mov	r1, r0
 801dd36:	ab03      	add	r3, sp, #12
 801dd38:	4805      	ldr	r0, [pc, #20]	@ (801dd50 <fiprintf+0x20>)
 801dd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd3e:	6800      	ldr	r0, [r0, #0]
 801dd40:	9301      	str	r3, [sp, #4]
 801dd42:	f7ff fd4b 	bl	801d7dc <_vfiprintf_r>
 801dd46:	b002      	add	sp, #8
 801dd48:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd4c:	b003      	add	sp, #12
 801dd4e:	4770      	bx	lr
 801dd50:	24000034 	.word	0x24000034

0801dd54 <abort>:
 801dd54:	b508      	push	{r3, lr}
 801dd56:	2006      	movs	r0, #6
 801dd58:	f000 f82c 	bl	801ddb4 <raise>
 801dd5c:	2001      	movs	r0, #1
 801dd5e:	f7e4 ffc3 	bl	8002ce8 <_exit>

0801dd62 <_raise_r>:
 801dd62:	291f      	cmp	r1, #31
 801dd64:	b538      	push	{r3, r4, r5, lr}
 801dd66:	4605      	mov	r5, r0
 801dd68:	460c      	mov	r4, r1
 801dd6a:	d904      	bls.n	801dd76 <_raise_r+0x14>
 801dd6c:	2316      	movs	r3, #22
 801dd6e:	6003      	str	r3, [r0, #0]
 801dd70:	f04f 30ff 	mov.w	r0, #4294967295
 801dd74:	bd38      	pop	{r3, r4, r5, pc}
 801dd76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dd78:	b112      	cbz	r2, 801dd80 <_raise_r+0x1e>
 801dd7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dd7e:	b94b      	cbnz	r3, 801dd94 <_raise_r+0x32>
 801dd80:	4628      	mov	r0, r5
 801dd82:	f000 f831 	bl	801dde8 <_getpid_r>
 801dd86:	4622      	mov	r2, r4
 801dd88:	4601      	mov	r1, r0
 801dd8a:	4628      	mov	r0, r5
 801dd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd90:	f000 b818 	b.w	801ddc4 <_kill_r>
 801dd94:	2b01      	cmp	r3, #1
 801dd96:	d00a      	beq.n	801ddae <_raise_r+0x4c>
 801dd98:	1c59      	adds	r1, r3, #1
 801dd9a:	d103      	bne.n	801dda4 <_raise_r+0x42>
 801dd9c:	2316      	movs	r3, #22
 801dd9e:	6003      	str	r3, [r0, #0]
 801dda0:	2001      	movs	r0, #1
 801dda2:	e7e7      	b.n	801dd74 <_raise_r+0x12>
 801dda4:	2100      	movs	r1, #0
 801dda6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ddaa:	4620      	mov	r0, r4
 801ddac:	4798      	blx	r3
 801ddae:	2000      	movs	r0, #0
 801ddb0:	e7e0      	b.n	801dd74 <_raise_r+0x12>
	...

0801ddb4 <raise>:
 801ddb4:	4b02      	ldr	r3, [pc, #8]	@ (801ddc0 <raise+0xc>)
 801ddb6:	4601      	mov	r1, r0
 801ddb8:	6818      	ldr	r0, [r3, #0]
 801ddba:	f7ff bfd2 	b.w	801dd62 <_raise_r>
 801ddbe:	bf00      	nop
 801ddc0:	24000034 	.word	0x24000034

0801ddc4 <_kill_r>:
 801ddc4:	b538      	push	{r3, r4, r5, lr}
 801ddc6:	4d07      	ldr	r5, [pc, #28]	@ (801dde4 <_kill_r+0x20>)
 801ddc8:	2300      	movs	r3, #0
 801ddca:	4604      	mov	r4, r0
 801ddcc:	4608      	mov	r0, r1
 801ddce:	4611      	mov	r1, r2
 801ddd0:	602b      	str	r3, [r5, #0]
 801ddd2:	f7e4 ff79 	bl	8002cc8 <_kill>
 801ddd6:	1c43      	adds	r3, r0, #1
 801ddd8:	d102      	bne.n	801dde0 <_kill_r+0x1c>
 801ddda:	682b      	ldr	r3, [r5, #0]
 801dddc:	b103      	cbz	r3, 801dde0 <_kill_r+0x1c>
 801ddde:	6023      	str	r3, [r4, #0]
 801dde0:	bd38      	pop	{r3, r4, r5, pc}
 801dde2:	bf00      	nop
 801dde4:	24023ad8 	.word	0x24023ad8

0801dde8 <_getpid_r>:
 801dde8:	f7e4 bf66 	b.w	8002cb8 <_getpid>

0801ddec <_init>:
 801ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddee:	bf00      	nop
 801ddf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddf2:	bc08      	pop	{r3}
 801ddf4:	469e      	mov	lr, r3
 801ddf6:	4770      	bx	lr

0801ddf8 <_fini>:
 801ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddfa:	bf00      	nop
 801ddfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddfe:	bc08      	pop	{r3}
 801de00:	469e      	mov	lr, r3
 801de02:	4770      	bx	lr
