
UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000110c  0801a660  0801a660  0001b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b76c  0801b76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b774  0801b774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b778  0801b778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  0801b77c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00022ab8  24000078  0801b7f4  0001d078  2**3
                  ALLOC
  8 ._user_heap_stack 00003000  24022b30  0801b7f4  0001db30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039eab  00000000  00000000  0001d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000075e4  00000000  00000000  00056f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc8  00000000  00000000  0005e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000021a6  00000000  00000000  00061100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042c5e  00000000  00000000  000632a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f255  00000000  00000000  000a5f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001812f5  00000000  00000000  000e5159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026644e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bdc8  00000000  00000000  00266494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  0027225c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a648 	.word	0x0801a648

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0801a648 	.word	0x0801a648

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <HAL_GPIO_EXTI_Callback>:
#include "FreeRTOS.h"
#include "imusamplingtask.h"
#include "main.h"
#include "task.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4) {
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2b10      	cmp	r3, #16
 80006ba:	d118      	bne.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
    if (imusamplingTaskNotifyHandle != NULL) {
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d014      	beq.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
      vTaskNotifyGiveFromISR(imusamplingTaskNotifyHandle,
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f017 fc7c 	bl	8017fd0 <vTaskNotifyGiveFromISR>
                             &xHigherPriorityTaskWoken);
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <HAL_GPIO_EXTI_Callback+0x42>
 80006de:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <HAL_GPIO_EXTI_Callback+0x50>)
 80006e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	f3bf 8f6f 	isb	sy
  else if (GPIO_Pin == GPIO_PIN_0) {
  }

  else {
  }
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400139c 	.word	0x2400139c
 80006fc:	e000ed04 	.word	0xe000ed04

08000700 <SPI_CS_Control>:

extern SPI_HandleTypeDef hspi1;

stmdev_ctx_t dev_ctx;  // imu设备

static void SPI_CS_Control(uint8_t state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if (state == 0)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d105      	bne.n	800071c <SPI_CS_Control+0x1c>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <SPI_CS_Control+0x30>)
 8000716:	f005 fb25 	bl	8005d64 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
}
 800071a:	e004      	b.n	8000726 <SPI_CS_Control+0x26>
    HAL_GPIO_WritePin(ASM330_CS_GPIO_Port, ASM330_CS_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <SPI_CS_Control+0x30>)
 8000722:	f005 fb1f 	bl	8005d64 <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020800 	.word	0x58020800

08000734 <Asm330_write>:

static int32_t Asm330_write(void *handle, uint8_t reg, const uint8_t *bufp,
                            uint16_t len) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	461a      	mov	r2, r3
 8000740:	460b      	mov	r3, r1
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	4613      	mov	r3, r2
 8000746:	813b      	strh	r3, [r7, #8]
  if (bufp == NULL || len == 0) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <Asm330_write+0x20>
 800074e:	893b      	ldrh	r3, [r7, #8]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <Asm330_write+0x26>
    return -1;
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	e02e      	b.n	80007b8 <Asm330_write+0x84>
  }
  SPI_CS_Control(0);  // 拉低cs
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd0 	bl	8000700 <SPI_CS_Control>
  uint8_t temp = reg;
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	75fb      	strb	r3, [r7, #23]
  temp &= 0x7F;  // 确保最高位为0，表示写操作
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 800076e:	f107 0117 	add.w	r1, r7, #23
 8000772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000776:	2201      	movs	r2, #1
 8000778:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <Asm330_write+0x8c>)
 800077a:	f00a fe29 	bl	800b3d0 <HAL_SPI_Transmit>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <Asm330_write+0x5c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ffbb 	bl	8000700 <SPI_CS_Control>
    return -2;          // 地址发送失败
 800078a:	f06f 0301 	mvn.w	r3, #1
 800078e:	e013      	b.n	80007b8 <Asm330_write+0x84>
  }
  // 发送要写入的数据（长度为len）
  if (HAL_SPI_Transmit(&hspi1, bufp, len, 1000) != HAL_OK) {
 8000790:	893a      	ldrh	r2, [r7, #8]
 8000792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <Asm330_write+0x8c>)
 800079a:	f00a fe19 	bl	800b3d0 <HAL_SPI_Transmit>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <Asm330_write+0x7c>
    SPI_CS_Control(1);  // 出错时及时释放片选
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ffab 	bl	8000700 <SPI_CS_Control>
    return -3;          // 数据发送失败
 80007aa:	f06f 0302 	mvn.w	r3, #2
 80007ae:	e003      	b.n	80007b8 <Asm330_write+0x84>
  }

  SPI_CS_Control(1);  // 拉高cs
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffa5 	bl	8000700 <SPI_CS_Control>
  return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	24001444 	.word	0x24001444

080007c4 <Asm330_read>:

static int32_t Asm330_read(void *handle, uint8_t reg, uint8_t *bufp,
                           uint16_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	72fb      	strb	r3, [r7, #11]
 80007d4:	4613      	mov	r3, r2
 80007d6:	813b      	strh	r3, [r7, #8]
  if (len == 0) {
 80007d8:	893b      	ldrh	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <Asm330_read+0x20>
    return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e02e      	b.n	8000842 <Asm330_read+0x7e>
  }
  SPI_CS_Control(0);  // 拉低cs
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff8b 	bl	8000700 <SPI_CS_Control>

  uint8_t temp = reg;
 80007ea:	7afb      	ldrb	r3, [r7, #11]
 80007ec:	75fb      	strb	r3, [r7, #23]
  temp |= 0x80;  // 确保最高位为1，表示读操作
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	75fb      	strb	r3, [r7, #23]
  if (HAL_SPI_Transmit(&hspi1, &temp, 1, 1000) != HAL_OK) {
 80007f8:	f107 0117 	add.w	r1, r7, #23
 80007fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000800:	2201      	movs	r2, #1
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <Asm330_read+0x88>)
 8000804:	f00a fde4 	bl	800b3d0 <HAL_SPI_Transmit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <Asm330_read+0x56>
    SPI_CS_Control(1);  // 出错时及时释放片选
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ff76 	bl	8000700 <SPI_CS_Control>
    return -2;          // 地址发送失败
 8000814:	f06f 0301 	mvn.w	r3, #1
 8000818:	e013      	b.n	8000842 <Asm330_read+0x7e>
  }

  // 读出数据（长度为len）
  if (HAL_SPI_Receive(&hspi1, bufp, len, 1000) != HAL_OK) {
 800081a:	893a      	ldrh	r2, [r7, #8]
 800081c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	480a      	ldr	r0, [pc, #40]	@ (800084c <Asm330_read+0x88>)
 8000824:	f00a ffc2 	bl	800b7ac <HAL_SPI_Receive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <Asm330_read+0x76>
    SPI_CS_Control(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff66 	bl	8000700 <SPI_CS_Control>
    return -3;
 8000834:	f06f 0302 	mvn.w	r3, #2
 8000838:	e003      	b.n	8000842 <Asm330_read+0x7e>
  }
  SPI_CS_Control(1);  // 拉高cs
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff60 	bl	8000700 <SPI_CS_Control>

  return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24001444 	.word	0x24001444

08000850 <Asm330_Drive_Init>:

int32_t Asm330_Drive_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  SPI_CS_Control(1);  // CS high
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff53 	bl	8000700 <SPI_CS_Control>
  dev_ctx.write_reg = Asm330_write;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <Asm330_Drive_Init+0x24>)
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <Asm330_Drive_Init+0x28>)
 800085e:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = Asm330_read;
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <Asm330_Drive_Init+0x24>)
 8000862:	4a06      	ldr	r2, [pc, #24]	@ (800087c <Asm330_Drive_Init+0x2c>)
 8000864:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = HAL_Delay;
 8000866:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <Asm330_Drive_Init+0x24>)
 8000868:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <Asm330_Drive_Init+0x30>)
 800086a:	609a      	str	r2, [r3, #8]

  return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	24000094 	.word	0x24000094
 8000878:	08000735 	.word	0x08000735
 800087c:	080007c5 	.word	0x080007c5
 8000880:	08002b3d 	.word	0x08002b3d

08000884 <RB_Init>:
#include "DoubleRingBuffer.h"

#include "string.h"

int RB_Init(RingBuffer *rb, uint8_t *memPool, size_t bufSize) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	80fb      	strh	r3, [r7, #6]
  if (!rb || !memPool || bufSize == 0) return -1;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d005      	beq.n	80008a4 <RB_Init+0x20>
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <RB_Init+0x20>
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <RB_Init+0x26>
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e034      	b.n	8000914 <RB_Init+0x90>

  rb->bufferSize = bufSize;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	811a      	strh	r2, [r3, #8]
  rb->activeBuf = 0;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	749a      	strb	r2, [r3, #18]

  rb->buffers[0] = memPool;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
  rb->buffers[1] = memPool + bufSize;
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	441a      	add	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]

  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e01f      	b.n	800090c <RB_Init+0x88>
    rb->writePos[i] = 0;
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3304      	adds	r3, #4
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	805a      	strh	r2, [r3, #2]
    rb->readPos[i] = 0;
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3304      	adds	r3, #4
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	80da      	strh	r2, [r3, #6]
    rb->bufFullFlag[i] = 0;
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	3313      	adds	r3, #19
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    memset(rb->buffers[i], 0, bufSize);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fc:	88fa      	ldrh	r2, [r7, #6]
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f019 f8b3 	bl	8019a6c <memset>
  for (int i = 0; i < RB_BUFFER_COUNT; i++) {
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b01      	cmp	r3, #1
 8000910:	dddc      	ble.n	80008cc <RB_Init+0x48>
  }
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <RB_Write>:

int RB_Write(RingBuffer *rb, const uint8_t *data, size_t len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]
  if (!rb || !data || len == 0) return -1;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <RB_Write+0x20>
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <RB_Write+0x20>
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <RB_Write+0x26>
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	e065      	b.n	8000a0e <RB_Write+0xf2>

  size_t remaining = len;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	83fb      	strh	r3, [r7, #30]
  size_t offset = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	83bb      	strh	r3, [r7, #28]

  while (remaining > 0) {
 800094a:	e05c      	b.n	8000a06 <RB_Write+0xea>
    uint8_t bufIdx = rb->activeBuf;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	7c9b      	ldrb	r3, [r3, #18]
 8000950:	76fb      	strb	r3, [r7, #27]
    size_t spaceLeft = rb->bufferSize - rb->writePos[bufIdx];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	891a      	ldrh	r2, [r3, #8]
 8000956:	7efb      	ldrb	r3, [r7, #27]
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	3304      	adds	r3, #4
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	440b      	add	r3, r1
 8000960:	885b      	ldrh	r3, [r3, #2]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	833b      	strh	r3, [r7, #24]

    if (spaceLeft == 0) {
 8000966:	8b3b      	ldrh	r3, [r7, #24]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10d      	bne.n	8000988 <RB_Write+0x6c>
      // 当前缓冲区已满 -> 标志置位
      rb->bufFullFlag[bufIdx] = 1;
 800096c:	7efb      	ldrb	r3, [r7, #27]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	2201      	movs	r2, #1
 8000974:	74da      	strb	r2, [r3, #19]
      // 切换到另一缓冲区
      RB_SwitchBuffer(rb);
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f8c2 	bl	8000b00 <RB_SwitchBuffer>
      bufIdx = rb->activeBuf;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	7c9b      	ldrb	r3, [r3, #18]
 8000980:	76fb      	strb	r3, [r7, #27]
      spaceLeft = rb->bufferSize;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	891b      	ldrh	r3, [r3, #8]
 8000986:	833b      	strh	r3, [r7, #24]
    }

    size_t toWrite = (remaining < spaceLeft) ? remaining : spaceLeft;
 8000988:	8b3a      	ldrh	r2, [r7, #24]
 800098a:	8bfb      	ldrh	r3, [r7, #30]
 800098c:	4293      	cmp	r3, r2
 800098e:	bf28      	it	cs
 8000990:	4613      	movcs	r3, r2
 8000992:	82fb      	strh	r3, [r7, #22]
    memcpy(rb->buffers[bufIdx] + rb->writePos[bufIdx], data + offset, toWrite);
 8000994:	7efa      	ldrb	r2, [r7, #27]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800099c:	7efb      	ldrb	r3, [r7, #27]
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	3304      	adds	r3, #4
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	440b      	add	r3, r1
 80009a6:	885b      	ldrh	r3, [r3, #2]
 80009a8:	18d0      	adds	r0, r2, r3
 80009aa:	8bbb      	ldrh	r3, [r7, #28]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	8afa      	ldrh	r2, [r7, #22]
 80009b2:	4619      	mov	r1, r3
 80009b4:	f019 f933 	bl	8019c1e <memcpy>
    rb->writePos[bufIdx] += toWrite;
 80009b8:	7efb      	ldrb	r3, [r7, #27]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	8859      	ldrh	r1, [r3, #2]
 80009c4:	7efb      	ldrb	r3, [r7, #27]
 80009c6:	8afa      	ldrh	r2, [r7, #22]
 80009c8:	440a      	add	r2, r1
 80009ca:	b291      	uxth	r1, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	3304      	adds	r3, #4
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	460a      	mov	r2, r1
 80009d6:	805a      	strh	r2, [r3, #2]
    offset += toWrite;
 80009d8:	8bba      	ldrh	r2, [r7, #28]
 80009da:	8afb      	ldrh	r3, [r7, #22]
 80009dc:	4413      	add	r3, r2
 80009de:	83bb      	strh	r3, [r7, #28]
    remaining -= toWrite;
 80009e0:	8bfa      	ldrh	r2, [r7, #30]
 80009e2:	8afb      	ldrh	r3, [r7, #22]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	83fb      	strh	r3, [r7, #30]

    // 如果正好写满，则置标志可用
    if (rb->writePos[bufIdx] >= rb->bufferSize) {
 80009e8:	7efb      	ldrb	r3, [r7, #27]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	3304      	adds	r3, #4
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	885a      	ldrh	r2, [r3, #2]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	891b      	ldrh	r3, [r3, #8]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d304      	bcc.n	8000a06 <RB_Write+0xea>
      rb->bufFullFlag[bufIdx] = 1;
 80009fc:	7efb      	ldrb	r3, [r7, #27]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	74da      	strb	r2, [r3, #19]
  while (remaining > 0) {
 8000a06:	8bfb      	ldrh	r3, [r7, #30]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d19f      	bne.n	800094c <RB_Write+0x30>
    }
  }

  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <RB_Read>:

size_t RB_Read(RingBuffer *rb, uint8_t *outBuf, size_t len) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80fb      	strh	r3, [r7, #6]
  if (!rb || !outBuf || len == 0) return 0;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <RB_Read+0x20>
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <RB_Read+0x20>
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <RB_Read+0x24>
 8000a36:	2300      	movs	r3, #0
 8000a38:	e05e      	b.n	8000af8 <RB_Read+0xe2>

  uint8_t bufIdx = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	7c9b      	ldrb	r3, [r3, #18]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	bfb8      	it	lt
 8000a48:	425b      	neglt	r3, r3
 8000a4a:	75fb      	strb	r3, [r7, #23]
  size_t available = rb->writePos[bufIdx] - rb->readPos[bufIdx];
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	885a      	ldrh	r2, [r3, #2]
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	68f9      	ldr	r1, [r7, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	440b      	add	r3, r1
 8000a62:	88db      	ldrh	r3, [r3, #6]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	82bb      	strh	r3, [r7, #20]
  size_t toRead = (len < available) ? len : available;
 8000a68:	8aba      	ldrh	r2, [r7, #20]
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	bf28      	it	cs
 8000a70:	4613      	movcs	r3, r2
 8000a72:	827b      	strh	r3, [r7, #18]

  memcpy(outBuf, rb->buffers[bufIdx] + rb->readPos[bufIdx], toRead);
 8000a74:	7dfa      	ldrb	r2, [r7, #23]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	3304      	adds	r3, #4
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	440b      	add	r3, r1
 8000a86:	88db      	ldrh	r3, [r3, #6]
 8000a88:	4413      	add	r3, r2
 8000a8a:	8a7a      	ldrh	r2, [r7, #18]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	68b8      	ldr	r0, [r7, #8]
 8000a90:	f019 f8c5 	bl	8019c1e <memcpy>
  rb->readPos[bufIdx] += toRead;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	88d9      	ldrh	r1, [r3, #6]
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
 8000aa2:	8a7a      	ldrh	r2, [r7, #18]
 8000aa4:	440a      	add	r2, r1
 8000aa6:	b291      	uxth	r1, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	80da      	strh	r2, [r3, #6]

  if (rb->readPos[bufIdx] >= rb->writePos[bufIdx]) {
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	88da      	ldrh	r2, [r3, #6]
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	68f9      	ldr	r1, [r7, #12]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	440b      	add	r3, r1
 8000aca:	885b      	ldrh	r3, [r3, #2]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d312      	bcc.n	8000af6 <RB_Read+0xe0>
    rb->readPos[bufIdx] = 0;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	80da      	strh	r2, [r3, #6]
    rb->writePos[bufIdx] = 0;
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	805a      	strh	r2, [r3, #2]
    rb->bufFullFlag[bufIdx] = 0;  // 清除满标志
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	74da      	strb	r2, [r3, #19]
  }

  return toRead;
 8000af6:	8a7b      	ldrh	r3, [r7, #18]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <RB_SwitchBuffer>:

void RB_SwitchBuffer(RingBuffer *rb) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  rb->activeBuf = (rb->activeBuf + 1) % RB_BUFFER_COUNT;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7c9b      	ldrb	r3, [r3, #18]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	bfb8      	it	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	749a      	strb	r2, [r3, #18]
  rb->writePos[rb->activeBuf] = 0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7c9b      	ldrb	r3, [r3, #18]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	3304      	adds	r3, #4
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	805a      	strh	r2, [r3, #2]
  rb->readPos[rb->activeBuf] = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7c9b      	ldrb	r3, [r3, #18]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	80da      	strh	r2, [r3, #6]
  rb->bufFullFlag[rb->activeBuf] = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7c9b      	ldrb	r3, [r3, #18]
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	74da      	strb	r2, [r3, #19]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <RB_IsBufferFull>:
size_t RB_GetDataLength(const RingBuffer *rb, uint8_t bufIndex) {
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
  return rb->writePos[bufIndex] - rb->readPos[bufIndex];
}

int RB_IsBufferFull(const RingBuffer *rb, uint8_t bufIndex) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return 0;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <RB_IsBufferFull+0x18>
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d901      	bls.n	8000b74 <RB_IsBufferFull+0x1c>
 8000b70:	2300      	movs	r3, #0
 8000b72:	e003      	b.n	8000b7c <RB_IsBufferFull+0x24>
  return rb->bufFullFlag[bufIndex];
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	7cdb      	ldrb	r3, [r3, #19]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <RB_ClearBufferFlag>:

void RB_ClearBufferFlag(RingBuffer *rb, uint8_t bufIndex) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <RB_ClearBufferFlag+0x24>
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d805      	bhi.n	8000bac <RB_ClearBufferFlag+0x24>
  rb->bufFullFlag[bufIndex] = 0;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	74da      	strb	r2, [r3, #19]
 8000baa:	e000      	b.n	8000bae <RB_ClearBufferFlag+0x26>
  if (!rb || bufIndex >= RB_BUFFER_COUNT) return;
 8000bac:	bf00      	nop
}
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <rb_init>:

#include "gnss_parser.h"

// --- 循环缓冲区实现 ---

void rb_init(ring_buffer_t *rb, uint8_t *buffer, size_t size) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
  rb->head = 0;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  rb->tail = 0;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <rb_read_byte>:
  rb->head = next_head;
  return true;
}

// 供解析器任务调用，从缓冲区读取数据
bool rb_read_byte(ring_buffer_t *rb, uint8_t *byte) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  if (rb->head == rb->tail) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d101      	bne.n	8000c02 <rb_read_byte+0x1a>
    // 缓冲区为空
    return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e014      	b.n	8000c2c <rb_read_byte+0x44>
  }
  *byte = rb->buffer[rb->tail];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
  rb->tail = (rb->tail + 1) % rb->size;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	6852      	ldr	r2, [r2, #4]
 8000c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c20:	fb01 f202 	mul.w	r2, r1, r2
 8000c24:	1a9a      	subs	r2, r3, r2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60da      	str	r2, [r3, #12]
  return true;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <calculate_crc32>:
    0xbdbdf21cUL, 0xcabac28aUL, 0x53b39330UL, 0x24b4a3a6UL, 0xbad03605UL,
    0xcdd70693UL, 0x54de5729UL, 0x23d967bfUL, 0xb3667a2eUL, 0xc4614ab8UL,
    0x5d681b02UL, 0x2a6f2b94UL, 0xb40bbe37UL, 0xc30c8ea1UL, 0x5a05df1bUL,
    0x2d02ef8dUL};

uint32_t calculate_crc32(const uint8_t *data, uint16_t length) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
  uint16_t iIndex;
  uint32_t ulCRC = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  for (iIndex = 0; iIndex < length; iIndex++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	81fb      	strh	r3, [r7, #14]
 8000c4c:	e011      	b.n	8000c72 <calculate_crc32+0x3a>
    ulCRC = CrcTable32[(ulCRC ^ data[iIndex]) & 0xff] ^ (ulCRC >> 8);
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <calculate_crc32+0x50>)
 8000c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	4053      	eors	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  for (iIndex = 0; iIndex < length; iIndex++) {
 8000c6c:	89fb      	ldrh	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	81fb      	strh	r3, [r7, #14]
 8000c72:	89fa      	ldrh	r2, [r7, #14]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3e9      	bcc.n	8000c4e <calculate_crc32+0x16>
  }
  return ulCRC;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	0801a9ac 	.word	0x0801a9ac

08000c8c <gnss_parser_init>:

// --- 解析器实现 ---
// g_gnss_rb

void gnss_parser_init(gnss_parser_t *parser, ring_buffer_t *rb,
                      gnss_message_handler_t handler) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  parser->rb = rb;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	601a      	str	r2, [r3, #0]
  parser->handler = handler;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
  parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	711a      	strb	r2, [r3, #4]
  parser->bytes_read = 0;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
  parser->payload_length = 0;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <gnss_parser_process>:

// 这是解析器的核心，在后台任务中被循环调用
void gnss_parser_process(gnss_parser_t *parser) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint8_t byte;

  // 持续处理缓冲区中的所有数据，直到为空
  while (rb_read_byte(parser->rb, &byte)) {
 8000cd0:	e109      	b.n	8000ee6 <gnss_parser_process+0x21e>
    switch (parser->state) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	f200 8105 	bhi.w	8000ee6 <gnss_parser_process+0x21e>
 8000cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <gnss_parser_process+0x1c>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000d01 	.word	0x08000d01
 8000ce8:	08000d1f 	.word	0x08000d1f
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d67 	.word	0x08000d67
 8000cf4:	08000db1 	.word	0x08000db1
 8000cf8:	08000e0f 	.word	0x08000e0f
 8000cfc:	08000e45 	.word	0x08000e45
      case PARSER_STATE_WAIT_SYNC_1:
        if (byte == GNSS_SYNC_BYTE_1) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2baa      	cmp	r3, #170	@ 0xaa
 8000d04:	f040 80e6 	bne.w	8000ed4 <gnss_parser_process+0x20c>
          parser->msg_buffer[0] = byte;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	731a      	strb	r2, [r3, #12]
          parser->bytes_read = 1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_2;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000d1c:	e0da      	b.n	8000ed4 <gnss_parser_process+0x20c>

      case PARSER_STATE_WAIT_SYNC_2:
        if (byte == GNSS_SYNC_BYTE_2) {
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2b44      	cmp	r3, #68	@ 0x44
 8000d22:	d10a      	bne.n	8000d3a <gnss_parser_process+0x72>
          parser->msg_buffer[1] = byte;
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	735a      	strb	r2, [r3, #13]
          parser->bytes_read = 2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_WAIT_SYNC_3;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2202      	movs	r2, #2
 8000d36:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 8000d38:	e0d5      	b.n	8000ee6 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	711a      	strb	r2, [r3, #4]
        break;
 8000d40:	e0d1      	b.n	8000ee6 <gnss_parser_process+0x21e>

      case PARSER_STATE_WAIT_SYNC_3:
        if (byte == GNSS_SYNC_BYTE_3) {
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2bb5      	cmp	r3, #181	@ 0xb5
 8000d46:	d10a      	bne.n	8000d5e <gnss_parser_process+0x96>
          parser->msg_buffer[2] = byte;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	739a      	strb	r2, [r3, #14]
          parser->bytes_read = 3;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	f8a3 2410 	strh.w	r2, [r3, #1040]	@ 0x410
          parser->state = PARSER_STATE_READ_MSG_ID;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	711a      	strb	r2, [r3, #4]
        } else {
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
        }
        break;
 8000d5c:	e0c3      	b.n	8000ee6 <gnss_parser_process+0x21e>
          parser->state = PARSER_STATE_WAIT_SYNC_1;  // 序列错误，重新寻找帧头
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	711a      	strb	r2, [r3, #4]
        break;
 8000d64:	e0bf      	b.n	8000ee6 <gnss_parser_process+0x21e>

      case PARSER_STATE_READ_MSG_ID:

        parser->msg_buffer[parser->bytes_read++] = byte;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	b291      	uxth	r1, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000d76:	4619      	mov	r1, r3
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_MSG_ID_OFFSET + GNSS_MSG_ID_SIZE) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	f040 80a6 	bne.w	8000ed8 <gnss_parser_process+0x210>
          // 消息ID是小端格式
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7c5b      	ldrb	r3, [r3, #17]
                               << 8 |
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
                           parser->msg_buffer[GNSS_MSG_ID_OFFSET];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7c1b      	ldrb	r3, [r3, #16]
 8000d9a:	b21b      	sxth	r3, r3
                               << 8 |
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	b29a      	uxth	r2, r3
          parser->msg_id = (uint16_t)parser->msg_buffer[GNSS_MSG_ID_OFFSET + 1]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          parser->state = PARSER_STATE_READ_LENGTH;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000dae:	e093      	b.n	8000ed8 <gnss_parser_process+0x210>

      case PARSER_STATE_READ_LENGTH:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	b291      	uxth	r1, r2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	440b      	add	r3, r1
 8000dc8:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read == GNSS_LENGTH_OFFSET + GNSS_LENGTH_SIZE) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	f040 8083 	bne.w	8000edc <gnss_parser_process+0x214>
          // 长度是小端格式
          parser->payload_length =
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7cdb      	ldrb	r3, [r3, #19]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
              parser->msg_buffer[GNSS_LENGTH_OFFSET];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7c9b      	ldrb	r3, [r3, #18]
 8000de4:	b21b      	sxth	r3, r3
              (uint16_t)parser->msg_buffer[GNSS_LENGTH_OFFSET + 1] << 8 |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
          parser->payload_length =
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8a3 240e 	strh.w	r2, [r3, #1038]	@ 0x40e
          if (parser->payload_length > GNSS_MAX_PAYLOAD_SIZE) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dfc:	d903      	bls.n	8000e06 <gnss_parser_process+0x13e>
            // 载荷过长，可能是错误的数据帧，复位状态机
            parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	711a      	strb	r2, [r3, #4]
          } else {
            parser->state = PARSER_STATE_READ_PAYLOAD;
          }
        }
        break;
 8000e04:	e06a      	b.n	8000edc <gnss_parser_process+0x214>
            parser->state = PARSER_STATE_READ_PAYLOAD;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	711a      	strb	r2, [r3, #4]
        break;
 8000e0c:	e066      	b.n	8000edc <gnss_parser_process+0x214>

      case PARSER_STATE_READ_PAYLOAD:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	b291      	uxth	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000e1e:	4619      	mov	r1, r3
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	440b      	add	r3, r1
 8000e26:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e2e:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e36:	3318      	adds	r3, #24
        if (parser->bytes_read ==
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d151      	bne.n	8000ee0 <gnss_parser_process+0x218>
          parser->state = PARSER_STATE_READ_CRC;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2206      	movs	r2, #6
 8000e40:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000e42:	e04d      	b.n	8000ee0 <gnss_parser_process+0x218>

      case PARSER_STATE_READ_CRC:
        parser->msg_buffer[parser->bytes_read++] = byte;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	b291      	uxth	r1, r2
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	f8a2 1410 	strh.w	r1, [r2, #1040]	@ 0x410
 8000e54:	4619      	mov	r1, r3
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	731a      	strb	r2, [r3, #12]
        if (parser->bytes_read ==
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e64:	461a      	mov	r2, r3
            GNSS_MESSAGE_OFFSET + parser->payload_length + GNSS_CRC_SIZE) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e6c:	331c      	adds	r3, #28
        if (parser->bytes_read ==
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d138      	bne.n	8000ee4 <gnss_parser_process+0x21c>
          // --- 消息接收完整，开始校验 ---
          uint32_t received_crc =
              *(uint32_t *)&parser
                   ->msg_buffer[parser->bytes_read - GNSS_CRC_SIZE];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	@ 0x410
 8000e78:	3b04      	subs	r3, #4
              *(uint32_t *)&parser
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	3304      	adds	r3, #4
          uint32_t received_crc =
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61fb      	str	r3, [r7, #28]

          // CRC校验的范围是从消息ID开始，到Payload结束
          size_t crc_check_len =
              GNSS_MSG_ID_SIZE + GNSS_LENGTH_SIZE + parser->payload_length;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	@ 0x40e
 8000e8c:	3304      	adds	r3, #4
          size_t crc_check_len =
 8000e8e:	61bb      	str	r3, [r7, #24]
          uint32_t calculated_crc = calculate_crc32(
              &parser->msg_buffer[GNSS_HEADER_SIZE], crc_check_len);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	330f      	adds	r3, #15
          uint32_t calculated_crc = calculate_crc32(
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	b292      	uxth	r2, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fecc 	bl	8000c38 <calculate_crc32>
 8000ea0:	6178      	str	r0, [r7, #20]

          if (received_crc == calculated_crc) {
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d110      	bne.n	8000ecc <gnss_parser_process+0x204>
            // CRC校验成功！调用回调函数处理数据
            if (parser->handler) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00c      	beq.n	8000ecc <gnss_parser_process+0x204>
              const uint8_t *payload_ptr =
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3324      	adds	r3, #36	@ 0x24
 8000eb6:	613b      	str	r3, [r7, #16]
                  &parser->msg_buffer[GNSS_MESSAGE_OFFSET];
              parser->handler(parser->msg_id, payload_ptr,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	f8b2 240e 	ldrh.w	r2, [r2, #1038]	@ 0x40e
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	4798      	blx	r3
                              parser->payload_length);
            }
          }

          // 不论校验成功与否，一帧处理完毕，复位状态机寻找下一帧
          parser->state = PARSER_STATE_WAIT_SYNC_1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000ed2:	e007      	b.n	8000ee4 <gnss_parser_process+0x21c>
        break;
 8000ed4:	bf00      	nop
 8000ed6:	e006      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <gnss_parser_process+0x21e>
        break;
 8000ee4:	bf00      	nop
  while (rb_read_byte(parser->rb, &byte)) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f107 020f 	add.w	r2, r7, #15
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fe79 	bl	8000be8 <rb_read_byte>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f aeea 	bne.w	8000cd2 <gnss_parser_process+0xa>
    }
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <FatFs_Check>:

//	函数：FatFs_Check
//	功能：进行FatFs文件系统的挂载

void FatFs_Check(void)  // 判断FatFs是否挂载成功，若没有创建FatFs则格式化SD卡
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f0e:	af02      	add	r7, sp, #8
  BYTE work[_MAX_SS];
  uint8_t MyFile_Res;
  //	FATFS_LinkDriver(&SD_Driver, SDPath);	  // 初始化驱动
  MyFile_Res = f_mount(&SDFatFS, (const TCHAR *)SDPath, 1);  //	挂载SD卡
 8000f10:	2201      	movs	r2, #1
 8000f12:	4917      	ldr	r1, [pc, #92]	@ (8000f70 <FatFs_Check+0x68>)
 8000f14:	4817      	ldr	r0, [pc, #92]	@ (8000f74 <FatFs_Check+0x6c>)
 8000f16:	f012 f925 	bl	8013164 <f_mount>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207

  if (MyFile_Res == FR_OK)  // 判断是否挂载成功
 8000f20:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <FatFs_Check+0x28>
  {
    // f_setlabel("UFO");
    printf("\r\nSD文件系统挂载成功\r\n");
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <FatFs_Check+0x70>)
 8000f2a:	f018 fcbf 	bl	80198ac <puts>
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
      printf("SD卡格式化成功！\r\n");
    else
      printf("格式化失败，请检查或更换SD卡！\r\n");
  }
}
 8000f2e:	e019      	b.n	8000f64 <FatFs_Check+0x5c>
    printf("SD卡还未创建文件系统，即将格式化\r\n");
 8000f30:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <FatFs_Check+0x74>)
 8000f32:	f018 fcbb 	bl	80198ac <puts>
    MyFile_Res = f_mkfs("0:", FM_FAT32, 0, work,
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2102      	movs	r1, #2
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <FatFs_Check+0x78>)
 8000f44:	f012 ff7e 	bl	8013e44 <f_mkfs>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (MyFile_Res == FR_OK)  // 判断是否格式化成功
 8000f4e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <FatFs_Check+0x56>
      printf("SD卡格式化成功！\r\n");
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <FatFs_Check+0x7c>)
 8000f58:	f018 fca8 	bl	80198ac <puts>
}
 8000f5c:	e002      	b.n	8000f64 <FatFs_Check+0x5c>
      printf("格式化失败，请检查或更换SD卡！\r\n");
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <FatFs_Check+0x80>)
 8000f60:	f018 fca4 	bl	80198ac <puts>
}
 8000f64:	bf00      	nop
 8000f66:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	24001984 	.word	0x24001984
 8000f74:	24001988 	.word	0x24001988
 8000f78:	0801a660 	.word	0x0801a660
 8000f7c:	0801a680 	.word	0x0801a680
 8000f80:	0801a6b4 	.word	0x0801a6b4
 8000f84:	0801a6b8 	.word	0x0801a6b8
 8000f88:	0801a6d4 	.word	0x0801a6d4

08000f8c <SDCardTaskFunc>:
    return -1;
  }
  return 0;
}

int16_t SDCardTaskFunc(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8000f92:	af00      	add	r7, sp, #0
  static uint8_t FullBufferIndex = 0;  // 0表示都不满，1-2分别表示两段满
  static uint8_t WriteToSdData[SDLength];
  static uint16_t bufferDataLength;

  // 初始化内存池
  if (RB_Init(&rb, ToSDdataPool, SDLength) != 0) {
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	4940      	ldr	r1, [pc, #256]	@ (800109c <SDCardTaskFunc+0x110>)
 8000f9a:	4841      	ldr	r0, [pc, #260]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000f9c:	f7ff fc72 	bl	8000884 <RB_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <SDCardTaskFunc+0x26>
    printf("RingBuffer 初始化失败！\n");
 8000fa6:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <SDCardTaskFunc+0x118>)
 8000fa8:	f018 fc80 	bl	80198ac <puts>
    return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	e06e      	b.n	8001090 <SDCardTaskFunc+0x104>
  }

  MyFile_Res = f_open(
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	493b      	ldr	r1, [pc, #236]	@ (80010a8 <SDCardTaskFunc+0x11c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f012 f936 	bl	801322c <f_open>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
      &MyFile, "IMUNewData.txt",
      FA_CREATE_ALWAYS | FA_WRITE);  // 打开文件，若不存在,则在sd卡中，创建文件

  if (MyFile_Res == FR_OK) {
 8000fc6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d15b      	bne.n	8001086 <SDCardTaskFunc+0xfa>
    printf("文件打开/创建成功，准备写入数据...\r\n");
 8000fce:	4837      	ldr	r0, [pc, #220]	@ (80010ac <SDCardTaskFunc+0x120>)
 8000fd0:	f018 fc6c 	bl	80198ac <puts>

    while (1) {
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 8000fd4:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <SDCardTaskFunc+0x124>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	4935      	ldr	r1, [pc, #212]	@ (80010b4 <SDCardTaskFunc+0x128>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f015 fa7e 	bl	80164e0 <xQueueReceive>
      FileWriteBufferPoint = (uint8_t *)&MsgSD;
 8000fe4:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <SDCardTaskFunc+0x128>)
 8000fe6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
      RB_Write(&rb, FileWriteBufferPoint, sizeof(MsgIMU_t));
 8000fea:	2231      	movs	r2, #49	@ 0x31
 8000fec:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8000ff0:	482b      	ldr	r0, [pc, #172]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000ff2:	f7ff fc93 	bl	800091c <RB_Write>

      if (RB_IsBufferFull(&rb, 0)) {
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4829      	ldr	r0, [pc, #164]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8000ffa:	f7ff fdad 	bl	8000b58 <RB_IsBufferFull>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <SDCardTaskFunc+0x80>
        FullBufferIndex = 1;
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e009      	b.n	8001020 <SDCardTaskFunc+0x94>
      }

      else if (RB_IsBufferFull(&rb, 1)) {
 800100c:	2101      	movs	r1, #1
 800100e:	4824      	ldr	r0, [pc, #144]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8001010:	f7ff fda2 	bl	8000b58 <RB_IsBufferFull>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SDCardTaskFunc+0x94>
        FullBufferIndex = 2;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
      }

      else {
      }

      if (FullBufferIndex) {
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0d5      	beq.n	8000fd4 <SDCardTaskFunc+0x48>
        bufferDataLength = RB_Read(&rb, WriteToSdData, SDLength);
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	4923      	ldr	r1, [pc, #140]	@ (80010bc <SDCardTaskFunc+0x130>)
 800102e:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <SDCardTaskFunc+0x114>)
 8001030:	f7ff fcf1 	bl	8000a16 <RB_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <SDCardTaskFunc+0x134>)
 800103a:	801a      	strh	r2, [r3, #0]
        if (bufferDataLength > 0) {
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <SDCardTaskFunc+0x134>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <SDCardTaskFunc+0xe2>
          MyFile_Res =
              f_write(&MyFile, WriteToSdData, bufferDataLength, &MyFile_Num);
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <SDCardTaskFunc+0x134>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	f107 0008 	add.w	r0, r7, #8
 8001050:	491a      	ldr	r1, [pc, #104]	@ (80010bc <SDCardTaskFunc+0x130>)
 8001052:	f012 fbd1 	bl	80137f8 <f_write>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267

          f_sync(&MyFile);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4618      	mov	r0, r3
 8001062:	f012 fdac 	bl	8013bbe <f_sync>
          HAL_GPIO_TogglePin(SDLEDGPIOx, SDLEDPINx);
 8001066:	2110      	movs	r1, #16
 8001068:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <SDCardTaskFunc+0x138>)
 800106a:	f004 fe94 	bl	8005d96 <HAL_GPIO_TogglePin>
        } else {
        }

        RB_ClearBufferFlag(&rb, FullBufferIndex - 1);  // 清除标志
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <SDCardTaskFunc+0x114>)
 800107a:	f7ff fd85 	bl	8000b88 <RB_ClearBufferFlag>
        FullBufferIndex = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <SDCardTaskFunc+0x12c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
      xQueueReceive(IMUDataToSDTaskQueue, &MsgSD, portMAX_DELAY);
 8001084:	e7a6      	b.n	8000fd4 <SDCardTaskFunc+0x48>

    f_close(&MyFile);  // 关闭文件
  }

  else {
    printf("文件打开/创建失败...\r\n");
 8001086:	4810      	ldr	r0, [pc, #64]	@ (80010c8 <SDCardTaskFunc+0x13c>)
 8001088:	f018 fc10 	bl	80198ac <puts>
    return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
  }
  return 0;
}
 8001090:	4618      	mov	r0, r3
 8001092:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240000c0 	.word	0x240000c0
 80010a0:	240000a8 	.word	0x240000a8
 80010a4:	0801a7cc 	.word	0x0801a7cc
 80010a8:	0801a7ec 	.word	0x0801a7ec
 80010ac:	0801a778 	.word	0x0801a778
 80010b0:	24001320 	.word	0x24001320
 80010b4:	240004c0 	.word	0x240004c0
 80010b8:	240004f1 	.word	0x240004f1
 80010bc:	240004f4 	.word	0x240004f4
 80010c0:	240006f4 	.word	0x240006f4
 80010c4:	58021000 	.word	0x58021000
 80010c8:	0801a7ac 	.word	0x0801a7ac

080010cc <UM960SamplingTaskFunc>:
TaskHandle_t UM960samplingTaskNotifyHandle = NULL;

void ring_buffer_update_head_from_dma(ring_buffer_t* rb,
                                      DMA_Stream_TypeDef* dma_stream);

void UM960SamplingTaskFunc(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  UM960samplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 80010d0:	f016 fd94 	bl	8017bfc <xTaskGetCurrentTaskHandle>
 80010d4:	4603      	mov	r3, r0
  UM960samplingTaskNotifyHandle =
 80010d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001108 <UM960SamplingTaskFunc+0x3c>)
 80010d8:	6013      	str	r3, [r2, #0]

  rb_init(&g_gnss_rb, gnss_rx_buffer, RING_BUFFER_SIZE);
 80010da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010de:	490b      	ldr	r1, [pc, #44]	@ (800110c <UM960SamplingTaskFunc+0x40>)
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <UM960SamplingTaskFunc+0x44>)
 80010e2:	f7ff fd69 	bl	8000bb8 <rb_init>
  gnss_parser_init(&g_gnss_parser, &g_gnss_rb, my_gnss_message_handler);
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <UM960SamplingTaskFunc+0x48>)
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <UM960SamplingTaskFunc+0x44>)
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <UM960SamplingTaskFunc+0x4c>)
 80010ec:	f7ff fdce 	bl	8000c8c <gnss_parser_init>

  // b. 任务主循环
  for (;;) {
    // 调用解析器，它会处理缓冲区中所有的新数据
    ring_buffer_update_head_from_dma(&g_gnss_rb, DMA1_Stream0);
 80010f0:	490a      	ldr	r1, [pc, #40]	@ (800111c <UM960SamplingTaskFunc+0x50>)
 80010f2:	4807      	ldr	r0, [pc, #28]	@ (8001110 <UM960SamplingTaskFunc+0x44>)
 80010f4:	f000 f876 	bl	80011e4 <ring_buffer_update_head_from_dma>
    gnss_parser_process(&g_gnss_parser);
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <UM960SamplingTaskFunc+0x4c>)
 80010fa:	f7ff fde5 	bl	8000cc8 <gnss_parser_process>

    // 让出CPU，避免空转。
    // 10ms的延时意味着任务每秒最多轮询100次。
    osDelay(10);
 80010fe:	200a      	movs	r0, #10
 8001100:	f014 fa91 	bl	8015626 <osDelay>
    ring_buffer_update_head_from_dma(&g_gnss_rb, DMA1_Stream0);
 8001104:	bf00      	nop
 8001106:	e7f3      	b.n	80010f0 <UM960SamplingTaskFunc+0x24>
 8001108:	2400131c 	.word	0x2400131c
 800110c:	240006f8 	.word	0x240006f8
 8001110:	24000ef8 	.word	0x24000ef8
 8001114:	08001121 	.word	0x08001121
 8001118:	24000f08 	.word	0x24000f08
 800111c:	40020010 	.word	0x40020010

08001120 <my_gnss_message_handler>:
  }
}

// length 数据长度
void my_gnss_message_handler(uint16_t msg_id, const uint8_t* payload,
                             uint16_t length) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
  // 根据消息ID来解析不同的消息
  switch (msg_id) {
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f640 0246 	movw	r2, #2118	@ 0x846
 8001136:	4293      	cmp	r3, r2
 8001138:	d12e      	bne.n	8001198 <my_gnss_message_handler+0x78>
    case 0x0846:  // 假设这是BESTPOSA消息的ID
      if (length == sizeof(bestnav_t)) {
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	2b78      	cmp	r3, #120	@ 0x78
 800113e:	d12d      	bne.n	800119c <my_gnss_message_handler+0x7c>
        const bestnav_t* nav = (const bestnav_t*)payload;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	60fb      	str	r3, [r7, #12]
        // 在这里使用解析出的数据，例如打印或更新全局变量
        // 打印一些关键信息进行验证
        printf("--- BESTNAV Received ---\n");
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <my_gnss_message_handler+0x88>)
 8001146:	f018 fbb1 	bl	80198ac <puts>
        printf("  Position Type: %u\n", (unsigned int)nav->pos_type);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4619      	mov	r1, r3
 8001150:	4816      	ldr	r0, [pc, #88]	@ (80011ac <my_gnss_message_handler+0x8c>)
 8001152:	f018 fb43 	bl	80197dc <iprintf>
        printf("  Latitude:  %.8f\n", nav->lat);
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	688a      	ldr	r2, [r1, #8]
 800115a:	68cb      	ldr	r3, [r1, #12]
 800115c:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <my_gnss_message_handler+0x90>)
 800115e:	f018 fb3d 	bl	80197dc <iprintf>
        printf("  Longitude: %.8f\n", nav->lon);
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	690a      	ldr	r2, [r1, #16]
 8001166:	694b      	ldr	r3, [r1, #20]
 8001168:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <my_gnss_message_handler+0x94>)
 800116a:	f018 fb37 	bl	80197dc <iprintf>
        printf("  Height:    %.4f m\n", nav->hgt);
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	698a      	ldr	r2, [r1, #24]
 8001172:	69cb      	ldr	r3, [r1, #28]
 8001174:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <my_gnss_message_handler+0x98>)
 8001176:	f018 fb31 	bl	80197dc <iprintf>
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001180:	4619      	mov	r1, r3
               nav->svs_in_sol);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        printf("  SVs Tracked: %u, SVs in Solution: %u\n", nav->svs_tracked,
 8001188:	461a      	mov	r2, r3
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <my_gnss_message_handler+0x9c>)
 800118c:	f018 fb26 	bl	80197dc <iprintf>
        printf("--------------------------\n\n");
 8001190:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <my_gnss_message_handler+0xa0>)
 8001192:	f018 fb8b 	bl	80198ac <puts>
      }
      break;
 8001196:	e001      	b.n	800119c <my_gnss_message_handler+0x7c>
      // case 0x...: // 处理其他您关心的消息
      //     break;

    default:
      // 不关心的消息可以忽略
      break;
 8001198:	bf00      	nop
 800119a:	e000      	b.n	800119e <my_gnss_message_handler+0x7e>
      break;
 800119c:	bf00      	nop
  }
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	0801a7fc 	.word	0x0801a7fc
 80011ac:	0801a818 	.word	0x0801a818
 80011b0:	0801a830 	.word	0x0801a830
 80011b4:	0801a844 	.word	0x0801a844
 80011b8:	0801a858 	.word	0x0801a858
 80011bc:	0801a870 	.word	0x0801a870
 80011c0:	0801a898 	.word	0x0801a898

080011c4 <GNSSInit>:

int16_t GNSSInit(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&GNSSUartFx, gnss_rx_buffer,
 80011c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011cc:	4903      	ldr	r1, [pc, #12]	@ (80011dc <GNSSInit+0x18>)
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <GNSSInit+0x1c>)
 80011d0:	f00b fd82 	bl	800ccd8 <HAL_UART_Receive_DMA>
                       RING_BUFFER_SIZE);  // 启动 DMA 循环接收
  // __HAL_UART_ENABLE_IT(&GNSSUartFx, UART_IT_IDLE);
  // 开启空闲中断,循环解析的，中断不需要了

  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240006f8 	.word	0x240006f8
 80011e0:	24001690 	.word	0x24001690

080011e4 <ring_buffer_update_head_from_dma>:
    __HAL_UART_CLEAR_IDLEFLAG(&GNSSUartFx);
  }
}

void ring_buffer_update_head_from_dma(ring_buffer_t* rb,
                                      DMA_Stream_TypeDef* dma_stream) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  // 关键步骤：
  // DMA的"剩余传输单元数寄存器"(NDTR或CNDTR)是向下计数的。
  // 它的初始值等于缓冲区总大小(rb->size)。
  // 因此，DMA当前写入的位置 = 缓冲区总大小 - 剩余未传输的数量。
  rb->head = rb->size - dma_stream->NDTR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	1ad2      	subs	r2, r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <imuDataDealTaskFunc>:

QueueHandle_t IMUDataToSDTaskQueue = NULL;  // 创建队列来完成数据的传输;

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size);

void imuDataDealTaskFunc(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
  IMUOrigData_t IMU_DatatoSD;

  /* Infinite loop */
  for (;;) {
    static MsgIMU_t msg = {0};
    xQueueReceive(xIMUDataQueue, &IMU_DatatoSD, portMAX_DELAY);
 800120e:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <imuDataDealTaskFunc+0x100>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4639      	mov	r1, r7
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	4618      	mov	r0, r3
 800121a:	f015 f961 	bl	80164e0 <xQueueReceive>
    msg.hdr.sync1 = 0xAA;
 800121e:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001220:	22aa      	movs	r2, #170	@ 0xaa
 8001222:	701a      	strb	r2, [r3, #0]
    msg.hdr.sync2 = 0x44;
 8001224:	4b39      	ldr	r3, [pc, #228]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001226:	2244      	movs	r2, #68	@ 0x44
 8001228:	705a      	strb	r2, [r3, #1]
    msg.hdr.sync3 = 0x55;
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <imuDataDealTaskFunc+0x104>)
 800122c:	2255      	movs	r2, #85	@ 0x55
 800122e:	709a      	strb	r2, [r3, #2]
    msg.hdr.cpuIdle = 0;
 8001230:	4b36      	ldr	r3, [pc, #216]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
    msg.hdr.msgID = 1;
 8001236:	4b35      	ldr	r3, [pc, #212]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001238:	2201      	movs	r2, #1
 800123a:	809a      	strh	r2, [r3, #4]
    msg.hdr.msgLen = sizeof(MsgIMU_t);
 800123c:	4b33      	ldr	r3, [pc, #204]	@ (800130c <imuDataDealTaskFunc+0x104>)
 800123e:	2231      	movs	r2, #49	@ 0x31
 8001240:	80da      	strh	r2, [r3, #6]
    msg.hdr.timeRef = 0;
 8001242:	4b32      	ldr	r3, [pc, #200]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001244:	2200      	movs	r2, #0
 8001246:	721a      	strb	r2, [r3, #8]

    msg.hdr.timeStatus = 0;
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <imuDataDealTaskFunc+0x104>)
 800124a:	2200      	movs	r2, #0
 800124c:	725a      	strb	r2, [r3, #9]
    msg.hdr.time = IMU_DatatoSD.sec;
 800124e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001252:	492e      	ldr	r1, [pc, #184]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001254:	3110      	adds	r1, #16
 8001256:	3906      	subs	r1, #6
 8001258:	600a      	str	r2, [r1, #0]
 800125a:	604b      	str	r3, [r1, #4]
    msg.hdr.sec = IMU_DatatoSD._50us;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001260:	f8c3 2012 	str.w	r2, [r3, #18]
    msg.hdr.version = 0;
 8001264:	4b29      	ldr	r3, [pc, #164]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001266:	2200      	movs	r2, #0
 8001268:	769a      	strb	r2, [r3, #26]
    msg.hdr.leapSec = 0;
 800126a:	4b28      	ldr	r3, [pc, #160]	@ (800130c <imuDataDealTaskFunc+0x104>)
 800126c:	2200      	movs	r2, #0
 800126e:	76da      	strb	r2, [r3, #27]
    msg.hdr.delayMs = 0;
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001272:	2200      	movs	r2, #0
 8001274:	839a      	strh	r2, [r3, #28]

    msg.body.sensor = 0;
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001278:	2200      	movs	r2, #0
 800127a:	779a      	strb	r2, [r3, #30]
    msg.body.sensitivity = (asm_config.g_fs << 8) | asm_config.xl_fs;
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <imuDataDealTaskFunc+0x108>)
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	b21b      	sxth	r3, r3
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <imuDataDealTaskFunc+0x108>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <imuDataDealTaskFunc+0x104>)
 8001294:	f8a3 201f 	strh.w	r2, [r3, #31]

    msg.body.gyro[0] = IMU_DatatoSD.gyro[0];
 8001298:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <imuDataDealTaskFunc+0x104>)
 800129e:	f8a3 2021 	strh.w	r2, [r3, #33]	@ 0x21
    msg.body.gyro[1] = IMU_DatatoSD.gyro[1];
 80012a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012a8:	f8a3 2023 	strh.w	r2, [r3, #35]	@ 0x23
    msg.body.gyro[2] = IMU_DatatoSD.gyro[2];
 80012ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012b2:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25

    msg.body.accel[0] = IMU_DatatoSD.accel[0];
 80012b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012bc:	f8a3 2027 	strh.w	r2, [r3, #39]	@ 0x27
    msg.body.accel[1] = IMU_DatatoSD.accel[1];
 80012c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012c6:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29
    msg.body.accel[2] = IMU_DatatoSD.accel[2];
 80012ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012d0:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b

    msg.body.crc =
        CalculateCRC32((uint8_t *)&msg, sizeof(msg) - sizeof(msg.body.crc));
 80012d4:	212d      	movs	r1, #45	@ 0x2d
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012d8:	f000 f820 	bl	800131c <CalculateCRC32>
 80012dc:	4603      	mov	r3, r0
    msg.body.crc =
 80012de:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012e0:	f8c2 302d 	str.w	r3, [r2, #45]	@ 0x2d

    BaseType_t Xsendresult = xQueueSend(IMUDataToSDTaskQueue, &msg, 0);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <imuDataDealTaskFunc+0x10c>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	2200      	movs	r2, #0
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <imuDataDealTaskFunc+0x104>)
 80012ee:	f014 fec7 	bl	8016080 <xQueueGenericSend>
 80012f2:	6278      	str	r0, [r7, #36]	@ 0x24

    if (Xsendresult != pdPASS) {
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d002      	beq.n	8001300 <imuDataDealTaskFunc+0xf8>
      printf("datadeal queue full\r\n");
 80012fa:	4807      	ldr	r0, [pc, #28]	@ (8001318 <imuDataDealTaskFunc+0x110>)
 80012fc:	f018 fad6 	bl	80198ac <puts>
    }

    osDelay(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f014 f990 	bl	8015626 <osDelay>
  for (;;) {
 8001306:	e782      	b.n	800120e <imuDataDealTaskFunc+0x6>
 8001308:	24001398 	.word	0x24001398
 800130c:	24001324 	.word	0x24001324
 8001310:	24000000 	.word	0x24000000
 8001314:	24001320 	.word	0x24001320
 8001318:	0801a8b4 	.word	0x0801a8b4

0800131c <CalculateCRC32>:
    0xbdbdf21cUL, 0xcabac28aUL, 0x53b39330UL, 0x24b4a3a6UL, 0xbad03605UL,
    0xcdd70693UL, 0x54de5729UL, 0x23d967bfUL, 0xb3667a2eUL, 0xc4614ab8UL,
    0x5d681b02UL, 0x2a6f2b94UL, 0xb40bbe37UL, 0xc30c8ea1UL, 0x5a05df1bUL,
    0x2d02ef8dUL};

static uint32_t CalculateCRC32(uint8_t *buf, uint8_t size) {
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
  uint32_t crc = 0x00;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	e011      	b.n	8001356 <CalculateCRC32+0x3a>
    crc = aulCrcTable[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4053      	eors	r3, r2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <CalculateCRC32+0x50>)
 8001344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	4053      	eors	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3301      	adds	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbe9      	blt.n	8001332 <CalculateCRC32+0x16>
  }
  return crc;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	0801adac 	.word	0x0801adac

08001370 <IMUSamplingTaskFunc>:
static timestamp_def timestampOrig;  // 时间戳原始数据

QueueHandle_t xIMUDataQueue = NULL;               // 创建队列来完成数据的传输
TaskHandle_t imusamplingTaskNotifyHandle = NULL;  // 创建imu采样线程句柄

int16_t IMUSamplingTaskFunc(void *argument) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6178      	str	r0, [r7, #20]
  imusamplingTaskNotifyHandle =
      xTaskGetCurrentTaskHandle();  // 获取当前线程句柄
 8001378:	f016 fc40 	bl	8017bfc <xTaskGetCurrentTaskHandle>
 800137c:	4603      	mov	r3, r0
  imusamplingTaskNotifyHandle =
 800137e:	4a27      	ldr	r2, [pc, #156]	@ (800141c <IMUSamplingTaskFunc+0xac>)
 8001380:	6013      	str	r3, [r2, #0]



  static int16_t IMUInitResult;

  IMUInitResult = Imu_Init();
 8001382:	f000 f85f 	bl	8001444 <Imu_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <IMUSamplingTaskFunc+0xb0>)
 800138c:	801a      	strh	r2, [r3, #0]

  while (!IMUInitResult) {
 800138e:	e03e      	b.n	800140e <IMUSamplingTaskFunc+0x9e>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	2001      	movs	r0, #1
 8001396:	f016 fdcf 	bl	8017f38 <ulTaskNotifyTake>
    asm330lhh_acceleration_raw_get(&dev_ctx,
 800139a:	4922      	ldr	r1, [pc, #136]	@ (8001424 <IMUSamplingTaskFunc+0xb4>)
 800139c:	4822      	ldr	r0, [pc, #136]	@ (8001428 <IMUSamplingTaskFunc+0xb8>)
 800139e:	f017 ffeb 	bl	8019378 <asm330lhh_acceleration_raw_get>
                                   (int16_t *)dmaBuffer);  // 读取加速度计
    asm330lhh_angular_rate_raw_get(&dev_ctx,
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <IMUSamplingTaskFunc+0xbc>)
 80013a4:	4619      	mov	r1, r3
 80013a6:	4820      	ldr	r0, [pc, #128]	@ (8001428 <IMUSamplingTaskFunc+0xb8>)
 80013a8:	f017 ff9e 	bl	80192e8 <asm330lhh_angular_rate_raw_get>
                                   (int16_t *)(dmaBuffer + 6));  // 读取陀螺仪

    memcpy(imuData.accel, dmaBuffer, 6);
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <IMUSamplingTaskFunc+0xc0>)
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <IMUSamplingTaskFunc+0xb4>)
 80013b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b4:	6018      	str	r0, [r3, #0]
 80013b6:	3304      	adds	r3, #4
 80013b8:	8019      	strh	r1, [r3, #0]
    memcpy(imuData.gyro, dmaBuffer + 6, 6);
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <IMUSamplingTaskFunc+0xbc>)
 80013bc:	2206      	movs	r2, #6
 80013be:	4619      	mov	r1, r3
 80013c0:	481c      	ldr	r0, [pc, #112]	@ (8001434 <IMUSamplingTaskFunc+0xc4>)
 80013c2:	f018 fc2c 	bl	8019c1e <memcpy>

    timestampOrig = GetCurrentTimestamp();
 80013c6:	4c1c      	ldr	r4, [pc, #112]	@ (8001438 <IMUSamplingTaskFunc+0xc8>)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f8b4 	bl	8001538 <GetCurrentTimestamp>
 80013d0:	463b      	mov	r3, r7
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    imuData.sec = timestampOrig.sec;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <IMUSamplingTaskFunc+0xc8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	4914      	ldr	r1, [pc, #80]	@ (8001430 <IMUSamplingTaskFunc+0xc0>)
 80013e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imuData._50us = timestampOrig._50us;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <IMUSamplingTaskFunc+0xc8>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <IMUSamplingTaskFunc+0xc0>)
 80013ea:	6193      	str	r3, [r2, #24]

    BaseType_t Xsendresult = xQueueSend(xIMUDataQueue, &imuData, 0);
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <IMUSamplingTaskFunc+0xcc>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	2200      	movs	r2, #0
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <IMUSamplingTaskFunc+0xc0>)
 80013f6:	f014 fe43 	bl	8016080 <xQueueGenericSend>
 80013fa:	61f8      	str	r0, [r7, #28]
    if (Xsendresult != pdPASS) {
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d002      	beq.n	8001408 <IMUSamplingTaskFunc+0x98>
      printf("sampling queue full\r\n");
 8001402:	480f      	ldr	r0, [pc, #60]	@ (8001440 <IMUSamplingTaskFunc+0xd0>)
 8001404:	f018 fa52 	bl	80198ac <puts>
    }
    osDelay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f014 f90c 	bl	8015626 <osDelay>
  while (!IMUInitResult) {
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <IMUSamplingTaskFunc+0xb0>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0bb      	beq.n	8001390 <IMUSamplingTaskFunc+0x20>
  }

  for (;;) {
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <IMUSamplingTaskFunc+0xa8>
 800141c:	2400139c 	.word	0x2400139c
 8001420:	240013a0 	.word	0x240013a0
 8001424:	24001358 	.word	0x24001358
 8001428:	24000094 	.word	0x24000094
 800142c:	2400135e 	.word	0x2400135e
 8001430:	24001368 	.word	0x24001368
 8001434:	2400136e 	.word	0x2400136e
 8001438:	24001388 	.word	0x24001388
 800143c:	24001398 	.word	0x24001398
 8001440:	0801a8cc 	.word	0x0801a8cc

08001444 <Imu_Init>:

  return 0;
}

// 初始化，如果有系统的存在，请在系统初始化之前完成初始化
int16_t Imu_Init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  Asm330_Drive_Init();  // 驱动库初始化代码
 800144a:	f7ff fa01 	bl	8000850 <Asm330_Drive_Init>

  // 软件复位
  static uint8_t rst;
  asm330lhh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800144e:	2101      	movs	r1, #1
 8001450:	482a      	ldr	r0, [pc, #168]	@ (80014fc <Imu_Init+0xb8>)
 8001452:	f018 f836 	bl	80194c2 <asm330lhh_reset_set>
  do {
    asm330lhh_reset_get(&dev_ctx, &rst);
 8001456:	492a      	ldr	r1, [pc, #168]	@ (8001500 <Imu_Init+0xbc>)
 8001458:	4828      	ldr	r0, [pc, #160]	@ (80014fc <Imu_Init+0xb8>)
 800145a:	f018 f858 	bl	801950e <asm330lhh_reset_get>
  } while (rst);
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <Imu_Init+0xbc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f7      	bne.n	8001456 <Imu_Init+0x12>

  /* Start device configuration. */
  asm330lhh_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 8001466:	2101      	movs	r1, #1
 8001468:	4824      	ldr	r0, [pc, #144]	@ (80014fc <Imu_Init+0xb8>)
 800146a:	f017 ffcd 	bl	8019408 <asm330lhh_device_conf_set>
  /* Enable Block Data Update */
  asm330lhh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800146e:	2101      	movs	r1, #1
 8001470:	4822      	ldr	r0, [pc, #136]	@ (80014fc <Imu_Init+0xb8>)
 8001472:	f017 ff13 	bl	801929c <asm330lhh_block_data_update_set>
  /* Set Output Data Rate */
  asm330lhh_xl_data_rate_set(&dev_ctx, asm_config.xl_odr);
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <Imu_Init+0xc0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	481f      	ldr	r0, [pc, #124]	@ (80014fc <Imu_Init+0xb8>)
 800147e:	f017 fe8d 	bl	801919c <asm330lhh_xl_data_rate_set>
  asm330lhh_gy_data_rate_set(&dev_ctx, asm_config.g_odr);
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <Imu_Init+0xc0>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	4619      	mov	r1, r3
 8001488:	481c      	ldr	r0, [pc, #112]	@ (80014fc <Imu_Init+0xb8>)
 800148a:	f017 feda 	bl	8019242 <asm330lhh_gy_data_rate_set>
  /* Set full scale */
  asm330lhh_xl_full_scale_set(&dev_ctx, asm_config.xl_fs);
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <Imu_Init+0xc0>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	4619      	mov	r1, r3
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <Imu_Init+0xb8>)
 8001496:	f017 fe5b 	bl	8019150 <asm330lhh_xl_full_scale_set>
  asm330lhh_gy_full_scale_set(&dev_ctx, asm_config.g_fs);
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <Imu_Init+0xc0>)
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	4619      	mov	r1, r3
 80014a0:	4816      	ldr	r0, [pc, #88]	@ (80014fc <Imu_Init+0xb8>)
 80014a2:	f017 fea8 	bl	80191f6 <asm330lhh_gy_full_scale_set>

  asm330lhh_data_ready_mode_set(&dev_ctx, asm_config.dr_p);
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <Imu_Init+0xc0>)
 80014a8:	791b      	ldrb	r3, [r3, #4]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <Imu_Init+0xb8>)
 80014ae:	f017 ffd1 	bl	8019454 <asm330lhh_data_ready_mode_set>

  asm330lhh_pin_int1_route_t route_val = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	80bb      	strh	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_xl = 1;
 80014b6:	793b      	ldrb	r3, [r7, #4]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	713b      	strb	r3, [r7, #4]
  route_val.int1_ctrl.int1_drdy_g = 1;
 80014be:	793b      	ldrb	r3, [r7, #4]
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	713b      	strb	r3, [r7, #4]
  asm330lhh_pin_int1_route_set(&dev_ctx, &route_val);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	@ (80014fc <Imu_Init+0xb8>)
 80014cc:	f018 f838 	bl	8019540 <asm330lhh_pin_int1_route_set>

  uint8_t IDdata;
  asm330lhh_device_id_get(&dev_ctx, &IDdata);
 80014d0:	1cfb      	adds	r3, r7, #3
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <Imu_Init+0xb8>)
 80014d6:	f017 ffe3 	bl	80194a0 <asm330lhh_device_id_get>

  if (IDdata != 0x6B) {
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2b6b      	cmp	r3, #107	@ 0x6b
 80014de:	d005      	beq.n	80014ec <Imu_Init+0xa8>
    printf("ASM330 Init error\r\n");
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <Imu_Init+0xc4>)
 80014e2:	f018 f9e3 	bl	80198ac <puts>
    return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e003      	b.n	80014f4 <Imu_Init+0xb0>
  }
  printf("ASM330 Init succeed\r\n");
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <Imu_Init+0xc8>)
 80014ee:	f018 f9dd 	bl	80198ac <puts>

  return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	24000094 	.word	0x24000094
 8001500:	240013a2 	.word	0x240013a2
 8001504:	24000000 	.word	0x24000000
 8001508:	0801a8e4 	.word	0x0801a8e4
 800150c:	0801a8f8 	.word	0x0801a8f8

08001510 <TIM_Call_Callback>:

// 时间戳变量
static volatile uint64_t system_seconds = 0;

// 定时器中断回调函数，每1s触发一次
void TIM_Call_Callback(void) { system_seconds++; }
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <TIM_Call_Callback+0x20>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	1c50      	adds	r0, r2, #1
 800151c:	f143 0100 	adc.w	r1, r3, #0
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <TIM_Call_Callback+0x20>)
 8001522:	e9c3 0100 	strd	r0, r1, [r3]
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	240013a8 	.word	0x240013a8
 8001534:	00000000 	.word	0x00000000

08001538 <GetCurrentTimestamp>:

// 获取当前时间戳
timestamp_def GetCurrentTimestamp(void) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  timestamp_def time;

  // 关中断或使用临界区确保读取的一致性
  taskENTER_CRITICAL();
 8001540:	f017 faba 	bl	8018ab8 <vPortEnterCritical>

  time.sec = system_seconds;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <GetCurrentTimestamp+0x58>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  time._50us = __HAL_TIM_GET_COUNTER(&htim16) * 0.00005;  // 0.05ms为单位
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <GetCurrentTimestamp+0x5c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800155c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001588 <GetCurrentTimestamp+0x50>
 8001560:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001564:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001568:	edc7 7a04 	vstr	s15, [r7, #16]

  taskEXIT_CRITICAL();
 800156c:	f017 fad6 	bl	8018b1c <vPortExitCritical>

  return time;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	461c      	mov	r4, r3
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	eb1c432d 	.word	0xeb1c432d
 800158c:	3f0a36e2 	.word	0x3f0a36e2
 8001590:	240013a8 	.word	0x240013a8
 8001594:	2400151c 	.word	0x2400151c

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_DMA_Init+0x7c>)
 80015a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <MX_DMA_Init+0x7c>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_DMA_Init+0x7c>)
 80015b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2105      	movs	r1, #5
 80015c0:	200b      	movs	r0, #11
 80015c2:	f001 fba3 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015c6:	200b      	movs	r0, #11
 80015c8:	f001 fbba 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2105      	movs	r1, #5
 80015d0:	200c      	movs	r0, #12
 80015d2:	f001 fb9b 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015d6:	200c      	movs	r0, #12
 80015d8:	f001 fbb2 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	200d      	movs	r0, #13
 80015e2:	f001 fb93 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015e6:	200d      	movs	r0, #13
 80015e8:	f001 fbaa 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	200e      	movs	r0, #14
 80015f2:	f001 fb8b 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015f6:	200e      	movs	r0, #14
 80015f8:	f001 fba2 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	200f      	movs	r0, #15
 8001602:	f001 fb83 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001606:	200f      	movs	r0, #15
 8001608:	f001 fb9a 	bl	8002d40 <HAL_NVIC_EnableIRQ>

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58024400 	.word	0x58024400

08001618 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xIMUDataQueue = xQueueCreate(128, sizeof(IMUOrigData_t));  // 128 帧
 800161c:	2200      	movs	r2, #0
 800161e:	2120      	movs	r1, #32
 8001620:	2080      	movs	r0, #128	@ 0x80
 8001622:	f014 fc60 	bl	8015ee6 <xQueueGenericCreate>
 8001626:	4603      	mov	r3, r0
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <MX_FREERTOS_Init+0x88>)
 800162a:	6013      	str	r3, [r2, #0]

  IMUDataToSDTaskQueue =
      xQueueCreate(64, sizeof(MsgIMU_t));  // 64 帧 一帧 49字节
 800162c:	2200      	movs	r2, #0
 800162e:	2131      	movs	r1, #49	@ 0x31
 8001630:	2040      	movs	r0, #64	@ 0x40
 8001632:	f014 fc58 	bl	8015ee6 <xQueueGenericCreate>
 8001636:	4603      	mov	r3, r0
  IMUDataToSDTaskQueue =
 8001638:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <MX_FREERTOS_Init+0x8c>)
 800163a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800163c:	4a1a      	ldr	r2, [pc, #104]	@ (80016a8 <MX_FREERTOS_Init+0x90>)
 800163e:	2100      	movs	r1, #0
 8001640:	481a      	ldr	r0, [pc, #104]	@ (80016ac <MX_FREERTOS_Init+0x94>)
 8001642:	f013 ff26 	bl	8015492 <osThreadNew>
 8001646:	4603      	mov	r3, r0
 8001648:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <MX_FREERTOS_Init+0x98>)
 800164a:	6013      	str	r3, [r2, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(IMUTask, NULL, &IMU_attributes);
 800164c:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <MX_FREERTOS_Init+0x9c>)
 800164e:	2100      	movs	r1, #0
 8001650:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <MX_FREERTOS_Init+0xa0>)
 8001652:	f013 ff1e 	bl	8015492 <osThreadNew>
 8001656:	4603      	mov	r3, r0
 8001658:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_FREERTOS_Init+0xa4>)
 800165a:	6013      	str	r3, [r2, #0]

  /* creation of SDMMC */
  SDMMCHandle = osThreadNew(SDMMCTask, NULL, &SDMMC_attributes);
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <MX_FREERTOS_Init+0xa8>)
 800165e:	2100      	movs	r1, #0
 8001660:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <MX_FREERTOS_Init+0xac>)
 8001662:	f013 ff16 	bl	8015492 <osThreadNew>
 8001666:	4603      	mov	r3, r0
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <MX_FREERTOS_Init+0xb0>)
 800166a:	6013      	str	r3, [r2, #0]

  /* creation of GNSS */
  GNSSHandle = osThreadNew(GNSSTask, NULL, &GNSS_attributes);
 800166c:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <MX_FREERTOS_Init+0xb4>)
 800166e:	2100      	movs	r1, #0
 8001670:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <MX_FREERTOS_Init+0xb8>)
 8001672:	f013 ff0e 	bl	8015492 <osThreadNew>
 8001676:	4603      	mov	r3, r0
 8001678:	4a16      	ldr	r2, [pc, #88]	@ (80016d4 <MX_FREERTOS_Init+0xbc>)
 800167a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  IMUDealHandle = osThreadNew(IMUDataDealTask, NULL, &IMuUDeal_attributes);
 800167c:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <MX_FREERTOS_Init+0xc0>)
 800167e:	2100      	movs	r1, #0
 8001680:	4816      	ldr	r0, [pc, #88]	@ (80016dc <MX_FREERTOS_Init+0xc4>)
 8001682:	f013 ff06 	bl	8015492 <osThreadNew>
 8001686:	4603      	mov	r3, r0
 8001688:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <MX_FREERTOS_Init+0xc8>)
 800168a:	6013      	str	r3, [r2, #0]
  InitHandle = osThreadNew(InitTask, NULL, &Init_attributes);
 800168c:	4a15      	ldr	r2, [pc, #84]	@ (80016e4 <MX_FREERTOS_Init+0xcc>)
 800168e:	2100      	movs	r1, #0
 8001690:	4815      	ldr	r0, [pc, #84]	@ (80016e8 <MX_FREERTOS_Init+0xd0>)
 8001692:	f013 fefe 	bl	8015492 <osThreadNew>
 8001696:	4603      	mov	r3, r0
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <MX_FREERTOS_Init+0xd4>)
 800169a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24001398 	.word	0x24001398
 80016a4:	24001320 	.word	0x24001320
 80016a8:	0801b1ac 	.word	0x0801b1ac
 80016ac:	080016f1 	.word	0x080016f1
 80016b0:	240013b0 	.word	0x240013b0
 80016b4:	0801b1d0 	.word	0x0801b1d0
 80016b8:	08001701 	.word	0x08001701
 80016bc:	240013b4 	.word	0x240013b4
 80016c0:	0801b1f4 	.word	0x0801b1f4
 80016c4:	08001717 	.word	0x08001717
 80016c8:	240013b8 	.word	0x240013b8
 80016cc:	0801b218 	.word	0x0801b218
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	240013bc 	.word	0x240013bc
 80016d8:	0801b23c 	.word	0x0801b23c
 80016dc:	08001743 	.word	0x08001743
 80016e0:	240013c0 	.word	0x240013c0
 80016e4:	0801b260 	.word	0x0801b260
 80016e8:	08001759 	.word	0x08001759
 80016ec:	240013c4 	.word	0x240013c4

080016f0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for (;;) {
    osDelay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f013 ff94 	bl	8015626 <osDelay>
 80016fe:	e7fb      	b.n	80016f8 <StartDefaultTask+0x8>

08001700 <IMUTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IMUTask */
void IMUTask(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMUTask */

  IMUSamplingTaskFunc(argument);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe31 	bl	8001370 <IMUSamplingTaskFunc>
  /* Infinite loop */
  for (;;) {
    osDelay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f013 ff89 	bl	8015626 <osDelay>
 8001714:	e7fb      	b.n	800170e <IMUTask+0xe>

08001716 <SDMMCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDMMCTask */
void SDMMCTask(void *argument)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDMMCTask */
  /* Infinite loop */
  FatFs_Check();
 800171e:	f7ff fbf3 	bl	8000f08 <FatFs_Check>
  SDCardTaskFunc();
 8001722:	f7ff fc33 	bl	8000f8c <SDCardTaskFunc>
  // FatFs_FileTest();
  // sd_wirte_IMU();

  for (;;) {
    osDelay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f013 ff7d 	bl	8015626 <osDelay>
 800172c:	e7fb      	b.n	8001726 <SDMMCTask+0x10>

0800172e <GNSSTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GNSSTask */
void GNSSTask(void *argument)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GNSSTask */

  UM960SamplingTaskFunc();
 8001736:	f7ff fcc9 	bl	80010cc <UM960SamplingTaskFunc>

    // UartRx_CopyToRB();

    // ParseFrames();

    osDelay(1);
 800173a:	2001      	movs	r0, #1
 800173c:	f013 ff73 	bl	8015626 <osDelay>
 8001740:	e7fb      	b.n	800173a <GNSSTask+0xc>

08001742 <IMUDataDealTask>:
  /* USER CODE END GNSSTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMUDataDealTask(void *argument) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  imuDataDealTaskFunc();
 800174a:	f7ff fd5d 	bl	8001208 <imuDataDealTaskFunc>
  for (;;) {
    osDelay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f013 ff69 	bl	8015626 <osDelay>
 8001754:	e7fb      	b.n	800174e <IMUDataDealTask+0xc>
	...

08001758 <InitTask>:
  }
}

void InitTask(void *argument) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  // 此线程优先级极高，在线程中完成各个中断的初始化，然后删除该线程
  //  中断初始化代码，禁止在main函数中初始化
  GNSSInit();
 8001760:	f7ff fd30 	bl	80011c4 <GNSSInit>
  HAL_TIM_Base_Start_IT(&htim16);
 8001764:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <InitTask+0x48>)
 8001766:	f00a fbd3 	bl	800bf10 <HAL_TIM_Base_Start_IT>

  // 2. 在所有准备工作都完成后，最后再使能中断
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2105      	movs	r1, #5
 800176e:	2008      	movs	r0, #8
 8001770:	f001 facc 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001774:	2008      	movs	r0, #8
 8001776:	f001 fae3 	bl	8002d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	200a      	movs	r0, #10
 8001780:	f001 fac4 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001784:	200a      	movs	r0, #10
 8001786:	f001 fadb 	bl	8002d40 <HAL_NVIC_EnableIRQ>

  // HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
  // HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  // 3. 删除任务
  osThreadTerminate(osThreadGetId());
 800178a:	f013 ff14 	bl	80155b6 <osThreadGetId>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f013 ff1b 	bl	80155cc <osThreadTerminate>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2400151c 	.word	0x2400151c

080017a4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ba:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <MX_GPIO_Init+0x188>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	4a5a      	ldr	r2, [pc, #360]	@ (800192c <MX_GPIO_Init+0x188>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <MX_GPIO_Init+0x188>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d8:	4b54      	ldr	r3, [pc, #336]	@ (800192c <MX_GPIO_Init+0x188>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	4a53      	ldr	r2, [pc, #332]	@ (800192c <MX_GPIO_Init+0x188>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e8:	4b50      	ldr	r3, [pc, #320]	@ (800192c <MX_GPIO_Init+0x188>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <MX_GPIO_Init+0x188>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fc:	4a4b      	ldr	r2, [pc, #300]	@ (800192c <MX_GPIO_Init+0x188>)
 80017fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001806:	4b49      	ldr	r3, [pc, #292]	@ (800192c <MX_GPIO_Init+0x188>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <MX_GPIO_Init+0x188>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	4a44      	ldr	r2, [pc, #272]	@ (800192c <MX_GPIO_Init+0x188>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <MX_GPIO_Init+0x188>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <MX_GPIO_Init+0x188>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	4a3c      	ldr	r2, [pc, #240]	@ (800192c <MX_GPIO_Init+0x188>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001842:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <MX_GPIO_Init+0x188>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <MX_GPIO_Init+0x188>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	4a35      	ldr	r2, [pc, #212]	@ (800192c <MX_GPIO_Init+0x188>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001860:	4b32      	ldr	r3, [pc, #200]	@ (800192c <MX_GPIO_Init+0x188>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2170      	movs	r1, #112	@ 0x70
 8001872:	482f      	ldr	r0, [pc, #188]	@ (8001930 <MX_GPIO_Init+0x18c>)
 8001874:	f004 fa76 	bl	8005d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	f242 0110 	movw	r1, #8208	@ 0x2010
 800187e:	482d      	ldr	r0, [pc, #180]	@ (8001934 <MX_GPIO_Init+0x190>)
 8001880:	f004 fa70 	bl	8005d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001884:	2304      	movs	r3, #4
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4825      	ldr	r0, [pc, #148]	@ (8001930 <MX_GPIO_Init+0x18c>)
 800189a:	f004 f89b 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800189e:	2370      	movs	r3, #112	@ 0x70
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <MX_GPIO_Init+0x18c>)
 80018b6:	f004 f88d 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 80018ba:	f242 0310 	movw	r3, #8208	@ 0x2010
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4818      	ldr	r0, [pc, #96]	@ (8001934 <MX_GPIO_Init+0x190>)
 80018d4:	f004 f87e 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4811      	ldr	r0, [pc, #68]	@ (8001934 <MX_GPIO_Init+0x190>)
 80018ee:	f004 f871 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f2:	2310      	movs	r3, #16
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	480c      	ldr	r0, [pc, #48]	@ (8001938 <MX_GPIO_Init+0x194>)
 8001908:	f004 f864 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800190c:	2320      	movs	r3, #32
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	@ (800193c <MX_GPIO_Init+0x198>)
 8001920:	f004 f858 	bl	80059d4 <HAL_GPIO_Init>


}
 8001924:	bf00      	nop
 8001926:	3730      	adds	r7, #48	@ 0x30
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	58021000 	.word	0x58021000
 8001934:	58020800 	.word	0x58020800
 8001938:	58020000 	.word	0x58020000
 800193c:	58020400 	.word	0x58020400

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001944:	f001 f89e 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001948:	f000 f81c 	bl	8001984 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800194c:	f000 f896 	bl	8001a7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001950:	f7ff ff28 	bl	80017a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001954:	f7ff fe20 	bl	8001598 <MX_DMA_Init>
  MX_SPI1_Init();
 8001958:	f000 f988 	bl	8001c6c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800195c:	f000 fdac 	bl	80024b8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8001960:	f000 f8ca 	bl	8001af8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001964:	f00d fe9a 	bl	800f69c <MX_FATFS_Init>
  MX_TIM16_Init();
 8001968:	f000 fcba 	bl	80022e0 <MX_TIM16_Init>
  MX_USART3_UART_Init();
 800196c:	f000 fdf0 	bl	8002550 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001970:	f000 fd56 	bl	8002420 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001974:	f013 fd0c 	bl	8015390 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001978:	f7ff fe4e 	bl	8001618 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800197c:	f013 fd4e 	bl	801541c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <main+0x40>

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09c      	sub	sp, #112	@ 0x70
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198e:	224c      	movs	r2, #76	@ 0x4c
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f018 f86a 	bl	8019a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2220      	movs	r2, #32
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f018 f864 	bl	8019a6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019a4:	2002      	movs	r0, #2
 80019a6:	f004 fa2b 	bl	8005e00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <SystemClock_Config+0xf0>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a30      	ldr	r2, [pc, #192]	@ (8001a74 <SystemClock_Config+0xf0>)
 80019b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <SystemClock_Config+0xf0>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <SystemClock_Config+0xf4>)
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <SystemClock_Config+0xf4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <SystemClock_Config+0xf4>)
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019dc:	bf00      	nop
 80019de:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <SystemClock_Config+0xf0>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ea:	d1f8      	bne.n	80019de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ec:	2302      	movs	r3, #2
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f4:	2340      	movs	r3, #64	@ 0x40
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a04:	233c      	movs	r3, #60	@ 0x3c
 8001a06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a14:	230c      	movs	r3, #12
 8001a16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 fa25 	bl	8005e74 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a30:	f000 f85c 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	233f      	movs	r3, #63	@ 0x3f
 8001a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a40:	2308      	movs	r3, #8
 8001a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a48:	2340      	movs	r3, #64	@ 0x40
 8001a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a52:	2340      	movs	r3, #64	@ 0x40
 8001a54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fe64 	bl	8006728 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a66:	f000 f841 	bl	8001aec <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3770      	adds	r7, #112	@ 0x70
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	58024800 	.word	0x58024800
 8001a78:	58000400 	.word	0x58000400

08001a7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0b0      	sub	sp, #192	@ 0xc0
 8001a80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	22c0      	movs	r2, #192	@ 0xc0
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f017 ffef 	bl	8019a6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001a8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 fa0f 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001aac:	f000 f81e 	bl	8001aec <Error_Handler>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	37c0      	adds	r7, #192	@ 0xc0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001aca:	f001 f817 	bl	8002afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM16) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x24>
    TIM_Call_Callback();
 8001ad8:	f7ff fd1a 	bl	8001510 <TIM_Call_Callback>
  }

  /* USER CODE END Callback 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40014800 	.word	0x40014800
 8001ae8:	40014400 	.word	0x40014400

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <MX_SDMMC1_SD_Init+0x44>)
 8001b00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b14:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b1e:	2205      	movs	r2, #5
 8001b20:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <MX_SDMMC1_SD_Init+0x40>)
 8001b24:	f007 fecc 	bl	80098c0 <HAL_SD_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001b2e:	f7ff ffdd 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	240013c8 	.word	0x240013c8
 8001b3c:	52007000 	.word	0x52007000

08001b40 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0bc      	sub	sp, #240	@ 0xf0
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	22c0      	movs	r2, #192	@ 0xc0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f017 ff83 	bl	8019a6c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c5c <HAL_SD_MspInit+0x11c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d171      	bne.n	8001c54 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001b70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 f99d 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001b90:	f7ff ffac 	bl	8001aec <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001b96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b9a:	4a31      	ldr	r2, [pc, #196]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001ba6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb8:	4a29      	ldr	r2, [pc, #164]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc2:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd6:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <HAL_SD_MspInit+0x120>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001bee:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c12:	4619      	mov	r1, r3
 8001c14:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <HAL_SD_MspInit+0x124>)
 8001c16:	f003 fedd 	bl	80059d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c32:	230c      	movs	r3, #12
 8001c34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <HAL_SD_MspInit+0x128>)
 8001c40:	f003 fec8 	bl	80059d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2031      	movs	r0, #49	@ 0x31
 8001c4a:	f001 f85f 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001c4e:	2031      	movs	r0, #49	@ 0x31
 8001c50:	f001 f876 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	37f0      	adds	r7, #240	@ 0xf0
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	52007000 	.word	0x52007000
 8001c60:	58024400 	.word	0x58024400
 8001c64:	58020800 	.word	0x58020800
 8001c68:	58020c00 	.word	0x58020c00

08001c6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c70:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c72:	4a29      	ldr	r2, [pc, #164]	@ (8001d18 <MX_SPI1_Init+0xac>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c86:	2207      	movs	r2, #7
 8001c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001c9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001ca4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <MX_SPI1_Init+0xa8>)
 8001d02:	f009 fa41 	bl	800b188 <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001d0c:	f7ff feee 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24001444 	.word	0x24001444
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	22c0      	movs	r2, #192	@ 0xc0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f017 fe95 	bl	8019a6c <memset>
  if(spiHandle->Instance==SPI1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a26      	ldr	r2, [pc, #152]	@ (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d145      	bne.n	8001dd8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001d58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d5c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f8ae 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001d6e:	f7ff febd 	bl	8001aec <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d78:	4a1a      	ldr	r2, [pc, #104]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001d7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d96:	4a13      	ldr	r2, [pc, #76]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dae:	23e0      	movs	r3, #224	@ 0xe0
 8001db0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <HAL_SPI_MspInit+0xcc>)
 8001dd4:	f003 fdfe 	bl	80059d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dd8:	bf00      	nop
 8001dda:	37e8      	adds	r7, #232	@ 0xe8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013000 	.word	0x40013000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020000 	.word	0x58020000

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_MspInit+0x38>)
 8001df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_MspInit+0x38>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_MspInit+0x38>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	210f      	movs	r1, #15
 8001e14:	f06f 0001 	mvn.w	r0, #1
 8001e18:	f000 ff78 	bl	8002d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58024400 	.word	0x58024400

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	@ 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	d844      	bhi.n	8001ec0 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	2076      	movs	r0, #118	@ 0x76
 8001e3c:	f000 ff66 	bl	8002d0c <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001e40:	2076      	movs	r0, #118	@ 0x76
 8001e42:	f000 ff7d 	bl	8002d40 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001e46:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <HAL_InitTick+0xb0>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_InitTick+0xb4>)
 8001e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e52:	4a22      	ldr	r2, [pc, #136]	@ (8001edc <HAL_InitTick+0xb4>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <HAL_InitTick+0xb4>)
 8001e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6a:	f107 020c 	add.w	r2, r7, #12
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 ffe3 	bl	8006e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e7a:	f004 ffcb 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e86:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_InitTick+0xb8>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001e94:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <HAL_InitTick+0xc0>)
 8001e96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001e9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e9e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001eb2:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001eb4:	f009 ffd5 	bl	800be62 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_InitTick+0xa6>
 8001ebe:	e001      	b.n	8001ec4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e005      	b.n	8001ed0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001ec4:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <HAL_InitTick+0xbc>)
 8001ec6:	f00a f823 	bl	800bf10 <HAL_TIM_Base_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3738      	adds	r7, #56	@ 0x38
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	24000010 	.word	0x24000010
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	431bde83 	.word	0x431bde83
 8001ee4:	240014cc 	.word	0x240014cc
 8001ee8:	40014800 	.word	0x40014800

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <MemManage_Handler+0x4>

08001f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f003 ff4f 	bl	8005dca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001f34:	2004      	movs	r0, #4
 8001f36:	f003 ff48 	bl	8005dca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f42:	2010      	movs	r0, #16
 8001f44:	f003 ff41 	bl	8005dca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <DMA1_Stream0_IRQHandler+0x10>)
 8001f52:	f002 fa2d 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	24001814 	.word	0x24001814

08001f60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <DMA1_Stream1_IRQHandler+0x10>)
 8001f66:	f002 fa23 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2400188c 	.word	0x2400188c

08001f74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <DMA1_Stream2_IRQHandler+0x10>)
 8001f7a:	f002 fa19 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24001904 	.word	0x24001904

08001f88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA1_Stream3_IRQHandler+0x10>)
 8001f8e:	f002 fa0f 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	24001724 	.word	0x24001724

08001f9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA1_Stream4_IRQHandler+0x10>)
 8001fa2:	f002 fa05 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2400179c 	.word	0x2400179c

08001fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <USART1_IRQHandler+0x10>)
 8001fb6:	f00a fedb 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	240015fc 	.word	0x240015fc

08001fc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <USART3_IRQHandler+0x10>)
 8001fca:	f00a fed1 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	24001690 	.word	0x24001690

08001fd8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <SDMMC1_IRQHandler+0x10>)
 8001fde:	f007 fedf 	bl	8009da0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	240013c8 	.word	0x240013c8

08001fec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <UART4_IRQHandler+0x10>)
 8001ff2:	f00a febd 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24001568 	.word	0x24001568

08002000 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM16_IRQHandler+0x10>)
 8002006:	f00a f85c 	bl	800c0c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2400151c 	.word	0x2400151c

08002014 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM17_IRQHandler+0x10>)
 800201a:	f00a f852 	bl	800c0c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	240014cc 	.word	0x240014cc

08002028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e00a      	b.n	8002050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800203a:	f3af 8000 	nop.w
 800203e:	4601      	mov	r1, r0
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf0      	blt.n	800203a <_read+0x12>
  }

  return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e009      	b.n	8002088 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf1      	blt.n	8002074 <_write+0x12>
  }
  return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_close>:

int _close(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
  return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f017 fd46 	bl	8019bc4 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	24080000 	.word	0x24080000
 8002164:	00002000 	.word	0x00002000
 8002168:	24001518 	.word	0x24001518
 800216c:	24022b30 	.word	0x24022b30

08002170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002174:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <SystemInit+0x114>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	4a42      	ldr	r2, [pc, #264]	@ (8002284 <SystemInit+0x114>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002184:	4b40      	ldr	r3, [pc, #256]	@ (8002288 <SystemInit+0x118>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b06      	cmp	r3, #6
 800218e:	d807      	bhi.n	80021a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002190:	4b3d      	ldr	r3, [pc, #244]	@ (8002288 <SystemInit+0x118>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	4a3b      	ldr	r2, [pc, #236]	@ (8002288 <SystemInit+0x118>)
 800219a:	f043 0307 	orr.w	r3, r3, #7
 800219e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021a0:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <SystemInit+0x11c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a39      	ldr	r2, [pc, #228]	@ (800228c <SystemInit+0x11c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ac:	4b37      	ldr	r3, [pc, #220]	@ (800228c <SystemInit+0x11c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <SystemInit+0x11c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4935      	ldr	r1, [pc, #212]	@ (800228c <SystemInit+0x11c>)
 80021b8:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <SystemInit+0x120>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021be:	4b32      	ldr	r3, [pc, #200]	@ (8002288 <SystemInit+0x118>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <SystemInit+0x118>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 030f 	bic.w	r3, r3, #15
 80021d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002288 <SystemInit+0x118>)
 80021d4:	f043 0307 	orr.w	r3, r3, #7
 80021d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021da:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <SystemInit+0x11c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <SystemInit+0x11c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021e6:	4b29      	ldr	r3, [pc, #164]	@ (800228c <SystemInit+0x11c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <SystemInit+0x11c>)
 80021ee:	4a29      	ldr	r2, [pc, #164]	@ (8002294 <SystemInit+0x124>)
 80021f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <SystemInit+0x11c>)
 80021f4:	4a28      	ldr	r2, [pc, #160]	@ (8002298 <SystemInit+0x128>)
 80021f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <SystemInit+0x11c>)
 80021fa:	4a28      	ldr	r2, [pc, #160]	@ (800229c <SystemInit+0x12c>)
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <SystemInit+0x11c>)
 8002200:	2200      	movs	r2, #0
 8002202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002204:	4b21      	ldr	r3, [pc, #132]	@ (800228c <SystemInit+0x11c>)
 8002206:	4a25      	ldr	r2, [pc, #148]	@ (800229c <SystemInit+0x12c>)
 8002208:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <SystemInit+0x11c>)
 800220c:	2200      	movs	r2, #0
 800220e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002210:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <SystemInit+0x11c>)
 8002212:	4a22      	ldr	r2, [pc, #136]	@ (800229c <SystemInit+0x12c>)
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <SystemInit+0x11c>)
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <SystemInit+0x11c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <SystemInit+0x11c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <SystemInit+0x11c>)
 800222a:	2200      	movs	r2, #0
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800222e:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <SystemInit+0x130>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <SystemInit+0x134>)
 8002234:	4013      	ands	r3, r2
 8002236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800223a:	d202      	bcs.n	8002242 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <SystemInit+0x138>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <SystemInit+0x11c>)
 8002244:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d113      	bne.n	8002278 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <SystemInit+0x11c>)
 8002252:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002256:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <SystemInit+0x11c>)
 8002258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800225c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <SystemInit+0x13c>)
 8002262:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002266:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <SystemInit+0x11c>)
 800226a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800226e:	4a07      	ldr	r2, [pc, #28]	@ (800228c <SystemInit+0x11c>)
 8002270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002274:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	52002000 	.word	0x52002000
 800228c:	58024400 	.word	0x58024400
 8002290:	eaf6ed7f 	.word	0xeaf6ed7f
 8002294:	02020200 	.word	0x02020200
 8002298:	01ff0000 	.word	0x01ff0000
 800229c:	01010280 	.word	0x01010280
 80022a0:	5c001000 	.word	0x5c001000
 80022a4:	ffff0000 	.word	0xffff0000
 80022a8:	51008108 	.word	0x51008108
 80022ac:	52004000 	.word	0x52004000

080022b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <ExitRun0Mode+0x2c>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <ExitRun0Mode+0x2c>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80022c0:	bf00      	nop
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <ExitRun0Mode+0x2c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f9      	beq.n	80022c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	58024800 	.word	0x58024800

080022e0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b092      	sub	sp, #72	@ 0x48
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	222c      	movs	r2, #44	@ 0x2c
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f017 fbb3 	bl	8019a6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002308:	4a30      	ldr	r2, [pc, #192]	@ (80023cc <MX_TIM16_Init+0xec>)
 800230a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 11999;
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 800230e:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8002312:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 800231a:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 800231c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002320:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002334:	4824      	ldr	r0, [pc, #144]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002336:	f009 fd94 	bl	800be62 <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8002340:	f7ff fbd4 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002344:	4820      	ldr	r0, [pc, #128]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 8002346:	f009 fe5b 	bl	800c000 <HAL_TIM_OC_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8002350:	f7ff fbcc 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	4813      	ldr	r0, [pc, #76]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 800237a:	f009 ffa9 	bl	800c2d0 <HAL_TIM_OC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002384:	f7ff fbb2 	bl	8001aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800239c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80023aa:	463b      	mov	r3, r7
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	@ (80023c8 <MX_TIM16_Init+0xe8>)
 80023b0:	f00a fba6 	bl	800cb00 <HAL_TIMEx_ConfigBreakDeadTime>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80023ba:	f7ff fb97 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	3748      	adds	r7, #72	@ 0x48
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2400151c 	.word	0x2400151c
 80023cc:	40014400 	.word	0x40014400

080023d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002418 <HAL_TIM_Base_MspInit+0x48>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d116      	bne.n	8002410 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e8:	4a0c      	ldr	r2, [pc, #48]	@ (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2105      	movs	r1, #5
 8002404:	2075      	movs	r0, #117	@ 0x75
 8002406:	f000 fc81 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800240a:	2075      	movs	r0, #117	@ 0x75
 800240c:	f000 fc98 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40014400 	.word	0x40014400
 800241c:	58024400 	.word	0x58024400

08002420 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002426:	4a23      	ldr	r2, [pc, #140]	@ (80024b4 <MX_UART4_Init+0x94>)
 8002428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800242a:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <MX_UART4_Init+0x90>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <MX_UART4_Init+0x90>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <MX_UART4_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <MX_UART4_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <MX_UART4_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002468:	4811      	ldr	r0, [pc, #68]	@ (80024b0 <MX_UART4_Init+0x90>)
 800246a:	f00a fbe5 	bl	800cc38 <HAL_UART_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002474:	f7ff fb3a 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	480d      	ldr	r0, [pc, #52]	@ (80024b0 <MX_UART4_Init+0x90>)
 800247c:	f00c fa79 	bl	800e972 <HAL_UARTEx_SetTxFifoThreshold>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7ff fb31 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <MX_UART4_Init+0x90>)
 800248e:	f00c faae 	bl	800e9ee <HAL_UARTEx_SetRxFifoThreshold>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002498:	f7ff fb28 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <MX_UART4_Init+0x90>)
 800249e:	f00c fa2f 	bl	800e900 <HAL_UARTEx_DisableFifoMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024a8:	f7ff fb20 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24001568 	.word	0x24001568
 80024b4:	40004c00 	.word	0x40004c00

080024b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024be:	4a23      	ldr	r2, [pc, #140]	@ (800254c <MX_USART1_UART_Init+0x94>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024c2:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ee:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002500:	4811      	ldr	r0, [pc, #68]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 8002502:	f00a fb99 	bl	800cc38 <HAL_UART_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800250c:	f7ff faee 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002510:	2100      	movs	r1, #0
 8002512:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 8002514:	f00c fa2d 	bl	800e972 <HAL_UARTEx_SetTxFifoThreshold>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800251e:	f7ff fae5 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002522:	2100      	movs	r1, #0
 8002524:	4808      	ldr	r0, [pc, #32]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 8002526:	f00c fa62 	bl	800e9ee <HAL_UARTEx_SetRxFifoThreshold>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002530:	f7ff fadc 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002534:	4804      	ldr	r0, [pc, #16]	@ (8002548 <MX_USART1_UART_Init+0x90>)
 8002536:	f00c f9e3 	bl	800e900 <HAL_UARTEx_DisableFifoMode>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002540:	f7ff fad4 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	240015fc 	.word	0x240015fc
 800254c:	40011000 	.word	0x40011000

08002550 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002554:	4b22      	ldr	r3, [pc, #136]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002556:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <MX_USART3_UART_Init+0x94>)
 8002558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800255a:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 800255c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800256e:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002598:	4811      	ldr	r0, [pc, #68]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 800259a:	f00a fb4d 	bl	800cc38 <HAL_UART_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025a4:	f7ff faa2 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a8:	2100      	movs	r1, #0
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 80025ac:	f00c f9e1 	bl	800e972 <HAL_UARTEx_SetTxFifoThreshold>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025b6:	f7ff fa99 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ba:	2100      	movs	r1, #0
 80025bc:	4808      	ldr	r0, [pc, #32]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 80025be:	f00c fa16 	bl	800e9ee <HAL_UARTEx_SetRxFifoThreshold>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025c8:	f7ff fa90 	bl	8001aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	@ (80025e0 <MX_USART3_UART_Init+0x90>)
 80025ce:	f00c f997 	bl	800e900 <HAL_UARTEx_DisableFifoMode>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80025d8:	f7ff fa88 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	24001690 	.word	0x24001690
 80025e4:	40004800 	.word	0x40004800

080025e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0be      	sub	sp, #248	@ 0xf8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	22c0      	movs	r2, #192	@ 0xc0
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f017 fa2f 	bl	8019a6c <memset>
  if(uartHandle->Instance==UART4)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a9a      	ldr	r2, [pc, #616]	@ (800287c <HAL_UART_MspInit+0x294>)
 8002614:	4293      	cmp	r3, r2
 8002616:	f040 80ab 	bne.w	8002770 <HAL_UART_MspInit+0x188>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800261a:	f04f 0202 	mov.w	r2, #2
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262c:	f107 0320 	add.w	r3, r7, #32
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fc47 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800263c:	f7ff fa56 	bl	8001aec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002640:	4b8f      	ldr	r3, [pc, #572]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002646:	4a8e      	ldr	r2, [pc, #568]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002648:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800264c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002650:	4b8b      	ldr	r3, [pc, #556]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002664:	4a86      	ldr	r2, [pc, #536]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266e:	4b84      	ldr	r3, [pc, #528]	@ (8002880 <HAL_UART_MspInit+0x298>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800267c:	2303      	movs	r3, #3
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002694:	2308      	movs	r3, #8
 8002696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800269e:	4619      	mov	r1, r3
 80026a0:	4878      	ldr	r0, [pc, #480]	@ (8002884 <HAL_UART_MspInit+0x29c>)
 80026a2:	f003 f997 	bl	80059d4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80026a6:	4b78      	ldr	r3, [pc, #480]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026a8:	4a78      	ldr	r2, [pc, #480]	@ (800288c <HAL_UART_MspInit+0x2a4>)
 80026aa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80026ac:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026ae:	223f      	movs	r2, #63	@ 0x3f
 80026b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b2:	4b75      	ldr	r3, [pc, #468]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b73      	ldr	r3, [pc, #460]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b72      	ldr	r3, [pc, #456]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c6:	4b70      	ldr	r3, [pc, #448]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80026d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026da:	4b6b      	ldr	r3, [pc, #428]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	4b69      	ldr	r3, [pc, #420]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80026e6:	4868      	ldr	r0, [pc, #416]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026e8:	f000 fb38 	bl	8002d5c <HAL_DMA_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80026f2:	f7ff f9fb 	bl	8001aec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a63      	ldr	r2, [pc, #396]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 80026fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026fe:	4a62      	ldr	r2, [pc, #392]	@ (8002888 <HAL_UART_MspInit+0x2a0>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002704:	4b62      	ldr	r3, [pc, #392]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002706:	4a63      	ldr	r2, [pc, #396]	@ (8002894 <HAL_UART_MspInit+0x2ac>)
 8002708:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800270a:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002710:	4b5f      	ldr	r3, [pc, #380]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002712:	2240      	movs	r2, #64	@ 0x40
 8002714:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002716:	4b5e      	ldr	r3, [pc, #376]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800271c:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 800271e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002722:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002724:	4b5a      	ldr	r3, [pc, #360]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272a:	4b59      	ldr	r3, [pc, #356]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002730:	4b57      	ldr	r3, [pc, #348]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002736:	4b56      	ldr	r3, [pc, #344]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273c:	4b54      	ldr	r3, [pc, #336]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002742:	4853      	ldr	r0, [pc, #332]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002744:	f000 fb0a 	bl	8002d5c <HAL_DMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800274e:	f7ff f9cd 	bl	8001aec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 8002756:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002758:	4a4d      	ldr	r2, [pc, #308]	@ (8002890 <HAL_UART_MspInit+0x2a8>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2105      	movs	r1, #5
 8002762:	2034      	movs	r0, #52	@ 0x34
 8002764:	f000 fad2 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002768:	2034      	movs	r0, #52	@ 0x34
 800276a:	f000 fae9 	bl	8002d40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800276e:	e14a      	b.n	8002a06 <HAL_UART_MspInit+0x41e>
  else if(uartHandle->Instance==USART1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a48      	ldr	r2, [pc, #288]	@ (8002898 <HAL_UART_MspInit+0x2b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f040 8094 	bne.w	80028a4 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800277c:	f04f 0201 	mov.w	r2, #1
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	4618      	mov	r0, r3
 8002794:	f004 fb96 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800279e:	f7ff f9a5 	bl	8001aec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a8:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_UART_MspInit+0x298>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f8:	2307      	movs	r3, #7
 80027fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002802:	4619      	mov	r1, r3
 8002804:	481f      	ldr	r0, [pc, #124]	@ (8002884 <HAL_UART_MspInit+0x29c>)
 8002806:	f003 f8e5 	bl	80059d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 800280c:	4a24      	ldr	r2, [pc, #144]	@ (80028a0 <HAL_UART_MspInit+0x2b8>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002810:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002812:	2229      	movs	r2, #41	@ 0x29
 8002814:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002816:	4b21      	ldr	r3, [pc, #132]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002828:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002830:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800283c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002846:	2200      	movs	r2, #0
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800284a:	4814      	ldr	r0, [pc, #80]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 800284c:	f000 fa86 	bl	8002d5c <HAL_DMA_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_UART_MspInit+0x272>
      Error_Handler();
 8002856:	f7ff f949 	bl	8001aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0f      	ldr	r2, [pc, #60]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 800285e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002862:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <HAL_UART_MspInit+0x2b4>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2105      	movs	r1, #5
 800286c:	2025      	movs	r0, #37	@ 0x25
 800286e:	f000 fa4d 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002872:	2025      	movs	r0, #37	@ 0x25
 8002874:	f000 fa64 	bl	8002d40 <HAL_NVIC_EnableIRQ>
}
 8002878:	e0c5      	b.n	8002a06 <HAL_UART_MspInit+0x41e>
 800287a:	bf00      	nop
 800287c:	40004c00 	.word	0x40004c00
 8002880:	58024400 	.word	0x58024400
 8002884:	58020000 	.word	0x58020000
 8002888:	24001724 	.word	0x24001724
 800288c:	40020058 	.word	0x40020058
 8002890:	2400179c 	.word	0x2400179c
 8002894:	40020070 	.word	0x40020070
 8002898:	40011000 	.word	0x40011000
 800289c:	24001814 	.word	0x24001814
 80028a0:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a59      	ldr	r2, [pc, #356]	@ (8002a10 <HAL_UART_MspInit+0x428>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 80ab 	bne.w	8002a06 <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028b0:	f04f 0202 	mov.w	r2, #2
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	f107 0320 	add.w	r3, r7, #32
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fafc 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80028d2:	f7ff f90b 	bl	8001aec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 80028d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 80028de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 80028e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f4:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 80028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fa:	4a46      	ldr	r2, [pc, #280]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_UART_MspInit+0x42c>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002912:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800292c:	2307      	movs	r3, #7
 800292e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002936:	4619      	mov	r1, r3
 8002938:	4837      	ldr	r0, [pc, #220]	@ (8002a18 <HAL_UART_MspInit+0x430>)
 800293a:	f003 f84b 	bl	80059d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800293e:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002940:	4a37      	ldr	r2, [pc, #220]	@ (8002a20 <HAL_UART_MspInit+0x438>)
 8002942:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002944:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002946:	222d      	movs	r2, #45	@ 0x2d
 8002948:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294a:	4b34      	ldr	r3, [pc, #208]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002958:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800295c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800295e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800296a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 800296c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002970:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002972:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002978:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800297e:	4827      	ldr	r0, [pc, #156]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002980:	f000 f9ec 	bl	8002d5c <HAL_DMA_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800298a:	f7ff f8af 	bl	8001aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a22      	ldr	r2, [pc, #136]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002996:	4a21      	ldr	r2, [pc, #132]	@ (8002a1c <HAL_UART_MspInit+0x434>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 800299e:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <HAL_UART_MspInit+0x440>)
 80029a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029a4:	222e      	movs	r2, #46	@ 0x2e
 80029a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029c8:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029da:	4812      	ldr	r0, [pc, #72]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029dc:	f000 f9be 	bl	8002d5c <HAL_DMA_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_UART_MspInit+0x402>
      Error_Handler();
 80029e6:	f7ff f881 	bl	8001aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <HAL_UART_MspInit+0x43c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2105      	movs	r1, #5
 80029fa:	2027      	movs	r0, #39	@ 0x27
 80029fc:	f000 f986 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a00:	2027      	movs	r0, #39	@ 0x27
 8002a02:	f000 f99d 	bl	8002d40 <HAL_NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	37f8      	adds	r7, #248	@ 0xf8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40004800 	.word	0x40004800
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58020400 	.word	0x58020400
 8002a1c:	2400188c 	.word	0x2400188c
 8002a20:	40020028 	.word	0x40020028
 8002a24:	24001904 	.word	0x24001904
 8002a28:	40020040 	.word	0x40020040

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a2c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002a68 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002a30:	f7ff fc3e 	bl	80022b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a34:	f7ff fb9c 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	@ (8002a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	@ (8002a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f017 f8b7 	bl	8019bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7fe ff6d 	bl	8001940 <main>
  bx  lr
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a70:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002a74:	0801b77c 	.word	0x0801b77c
  ldr r2, =_sbss
 8002a78:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002a7c:	24022b30 	.word	0x24022b30

08002a80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC3_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	f000 f933 	bl	8002cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a90:	f004 f800 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <HAL_Init+0x68>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	4913      	ldr	r1, [pc, #76]	@ (8002af0 <HAL_Init+0x6c>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_Init+0x68>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <HAL_Init+0x6c>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <HAL_Init+0x70>)
 8002ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_Init+0x74>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f7ff f9aa 	bl	8001e28 <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e002      	b.n	8002ae4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7ff f985 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	0801b284 	.word	0x0801b284
 8002af4:	2400000c 	.word	0x2400000c
 8002af8:	24000008 	.word	0x24000008

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	24000014 	.word	0x24000014
 8002b20:	2400197c 	.word	0x2400197c

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2400197c 	.word	0x2400197c

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	24000014 	.word	0x24000014

08002b84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <HAL_GetREVID+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	5c001000 	.word	0x5c001000

08002b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x40>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x40>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00
 8002be0:	05fa0000 	.word	0x05fa0000

08002be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <__NVIC_GetPriorityGrouping+0x18>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0307 	and.w	r3, r3, #7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0b      	blt.n	8002c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4907      	ldr	r1, [pc, #28]	@ (8002c38 <__NVIC_EnableIRQ+0x38>)
 8002c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2001      	movs	r0, #1
 8002c22:	fa00 f202 	lsl.w	r2, r0, r2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db0a      	blt.n	8002c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	@ (8002c88 <__NVIC_SetPriority+0x4c>)
 8002c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c64:	e00a      	b.n	8002c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4908      	ldr	r1, [pc, #32]	@ (8002c8c <__NVIC_SetPriority+0x50>)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	3b04      	subs	r3, #4
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	761a      	strb	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1c3 0307 	rsb	r3, r3, #7
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	bf28      	it	cs
 8002cae:	2304      	movcs	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d902      	bls.n	8002cc0 <NVIC_EncodePriority+0x30>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3b03      	subs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <NVIC_EncodePriority+0x32>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	4313      	orrs	r3, r2
         );
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	@ 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ff4c 	bl	8002b9c <__NVIC_SetPriorityGrouping>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1a:	f7ff ff63 	bl	8002be4 <__NVIC_GetPriorityGrouping>
 8002d1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f7ff ffb3 	bl	8002c90 <NVIC_EncodePriority>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff82 	bl	8002c3c <__NVIC_SetPriority>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff56 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff fede 	bl	8002b24 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e316      	b.n	80033a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a66      	ldr	r2, [pc, #408]	@ (8002f14 <HAL_DMA_Init+0x1b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_DMA_Init+0x1bc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d045      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a63      	ldr	r2, [pc, #396]	@ (8002f1c <HAL_DMA_Init+0x1c0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a62      	ldr	r2, [pc, #392]	@ (8002f20 <HAL_DMA_Init+0x1c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d03b      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_DMA_Init+0x1c8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5f      	ldr	r2, [pc, #380]	@ (8002f28 <HAL_DMA_Init+0x1cc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f2c <HAL_DMA_Init+0x1d0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02c      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002f30 <HAL_DMA_Init+0x1d4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d027      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f34 <HAL_DMA_Init+0x1d8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a59      	ldr	r2, [pc, #356]	@ (8002f38 <HAL_DMA_Init+0x1dc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a57      	ldr	r2, [pc, #348]	@ (8002f3c <HAL_DMA_Init+0x1e0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a56      	ldr	r2, [pc, #344]	@ (8002f40 <HAL_DMA_Init+0x1e4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_DMA_Init+0x1e8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a53      	ldr	r2, [pc, #332]	@ (8002f48 <HAL_DMA_Init+0x1ec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a51      	ldr	r2, [pc, #324]	@ (8002f4c <HAL_DMA_Init+0x1f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_Init+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a50      	ldr	r2, [pc, #320]	@ (8002f50 <HAL_DMA_Init+0x1f4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_Init+0xbc>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_DMA_Init+0xbe>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 813b 	beq.w	8003096 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a37      	ldr	r2, [pc, #220]	@ (8002f14 <HAL_DMA_Init+0x1b8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04a      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a36      	ldr	r2, [pc, #216]	@ (8002f18 <HAL_DMA_Init+0x1bc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d045      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a34      	ldr	r2, [pc, #208]	@ (8002f1c <HAL_DMA_Init+0x1c0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a33      	ldr	r2, [pc, #204]	@ (8002f20 <HAL_DMA_Init+0x1c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d03b      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <HAL_DMA_Init+0x1c8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <HAL_DMA_Init+0x1cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d031      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2e      	ldr	r2, [pc, #184]	@ (8002f2c <HAL_DMA_Init+0x1d0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02c      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f30 <HAL_DMA_Init+0x1d4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d027      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2b      	ldr	r2, [pc, #172]	@ (8002f34 <HAL_DMA_Init+0x1d8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_DMA_Init+0x1dc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01d      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <HAL_DMA_Init+0x1e0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a27      	ldr	r2, [pc, #156]	@ (8002f40 <HAL_DMA_Init+0x1e4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a25      	ldr	r2, [pc, #148]	@ (8002f44 <HAL_DMA_Init+0x1e8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a24      	ldr	r2, [pc, #144]	@ (8002f48 <HAL_DMA_Init+0x1ec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <HAL_DMA_Init+0x1f0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_Init+0x174>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <HAL_DMA_Init+0x1f4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d108      	bne.n	8002ee2 <HAL_DMA_Init+0x186>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e007      	b.n	8002ef2 <HAL_DMA_Init+0x196>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ef2:	e02f      	b.n	8002f54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef4:	f7ff fe16 	bl	8002b24 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d928      	bls.n	8002f54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e246      	b.n	80033a2 <HAL_DMA_Init+0x646>
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1c8      	bne.n	8002ef4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4b83      	ldr	r3, [pc, #524]	@ (800317c <HAL_DMA_Init+0x420>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fb8:	4b71      	ldr	r3, [pc, #452]	@ (8003180 <HAL_DMA_Init+0x424>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b71      	ldr	r3, [pc, #452]	@ (8003184 <HAL_DMA_Init+0x428>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc4:	d328      	bcc.n	8003018 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b28      	cmp	r3, #40	@ 0x28
 8002fcc:	d903      	bls.n	8002fd6 <HAL_DMA_Init+0x27a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd4:	d917      	bls.n	8003006 <HAL_DMA_Init+0x2aa>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fdc:	d903      	bls.n	8002fe6 <HAL_DMA_Init+0x28a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b42      	cmp	r3, #66	@ 0x42
 8002fe4:	d90f      	bls.n	8003006 <HAL_DMA_Init+0x2aa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b46      	cmp	r3, #70	@ 0x46
 8002fec:	d903      	bls.n	8002ff6 <HAL_DMA_Init+0x29a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b48      	cmp	r3, #72	@ 0x48
 8002ff4:	d907      	bls.n	8003006 <HAL_DMA_Init+0x2aa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ffc:	d905      	bls.n	800300a <HAL_DMA_Init+0x2ae>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b52      	cmp	r3, #82	@ 0x52
 8003004:	d801      	bhi.n	800300a <HAL_DMA_Init+0x2ae>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_DMA_Init+0x2b0>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003016:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f002 fb33 	bl	80056c0 <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e197      	b.n	80033a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f002 fa6e 	bl	800555c <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	223f      	movs	r2, #63	@ 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e0cd      	b.n	8003232 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a3b      	ldr	r2, [pc, #236]	@ (8003188 <HAL_DMA_Init+0x42c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_DMA_Init+0x430>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a38      	ldr	r2, [pc, #224]	@ (8003190 <HAL_DMA_Init+0x434>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a36      	ldr	r2, [pc, #216]	@ (8003194 <HAL_DMA_Init+0x438>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a35      	ldr	r2, [pc, #212]	@ (8003198 <HAL_DMA_Init+0x43c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a33      	ldr	r2, [pc, #204]	@ (800319c <HAL_DMA_Init+0x440>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_DMA_Init+0x444>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Init+0x38a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_DMA_Init+0x448>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Init+0x38e>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Init+0x390>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8097 	beq.w	8003220 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a24      	ldr	r2, [pc, #144]	@ (8003188 <HAL_DMA_Init+0x42c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d021      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_DMA_Init+0x430>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01c      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a21      	ldr	r2, [pc, #132]	@ (8003190 <HAL_DMA_Init+0x434>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d017      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_DMA_Init+0x438>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d012      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1e      	ldr	r2, [pc, #120]	@ (8003198 <HAL_DMA_Init+0x43c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00d      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_DMA_Init+0x440>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d008      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	@ (80031a0 <HAL_DMA_Init+0x444>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <HAL_DMA_Init+0x3e4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_DMA_Init+0x448>)
 800313e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <HAL_DMA_Init+0x44c>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d021      	beq.n	80031ac <HAL_DMA_Init+0x450>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b80      	cmp	r3, #128	@ 0x80
 800316e:	d102      	bne.n	8003176 <HAL_DMA_Init+0x41a>
 8003170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003174:	e01b      	b.n	80031ae <HAL_DMA_Init+0x452>
 8003176:	2300      	movs	r3, #0
 8003178:	e019      	b.n	80031ae <HAL_DMA_Init+0x452>
 800317a:	bf00      	nop
 800317c:	fe10803f 	.word	0xfe10803f
 8003180:	5c001000 	.word	0x5c001000
 8003184:	ffff0000 	.word	0xffff0000
 8003188:	58025408 	.word	0x58025408
 800318c:	5802541c 	.word	0x5802541c
 8003190:	58025430 	.word	0x58025430
 8003194:	58025444 	.word	0x58025444
 8003198:	58025458 	.word	0x58025458
 800319c:	5802546c 	.word	0x5802546c
 80031a0:	58025480 	.word	0x58025480
 80031a4:	58025494 	.word	0x58025494
 80031a8:	fffe000f 	.word	0xfffe000f
 80031ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b6e      	ldr	r3, [pc, #440]	@ (80033ac <HAL_DMA_Init+0x650>)
 80031f4:	4413      	add	r3, r2
 80031f6:	4a6e      	ldr	r2, [pc, #440]	@ (80033b0 <HAL_DMA_Init+0x654>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f002 f9a9 	bl	800555c <DMA_CalcBaseAndBitshift>
 800320a:	4603      	mov	r3, r0
 800320c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2201      	movs	r2, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	e008      	b.n	8003232 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2240      	movs	r2, #64	@ 0x40
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0b7      	b.n	80033a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5f      	ldr	r2, [pc, #380]	@ (80033b4 <HAL_DMA_Init+0x658>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d072      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5d      	ldr	r2, [pc, #372]	@ (80033b8 <HAL_DMA_Init+0x65c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d06d      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5c      	ldr	r2, [pc, #368]	@ (80033bc <HAL_DMA_Init+0x660>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d068      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5a      	ldr	r2, [pc, #360]	@ (80033c0 <HAL_DMA_Init+0x664>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a59      	ldr	r2, [pc, #356]	@ (80033c4 <HAL_DMA_Init+0x668>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d05e      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a57      	ldr	r2, [pc, #348]	@ (80033c8 <HAL_DMA_Init+0x66c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d059      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a56      	ldr	r2, [pc, #344]	@ (80033cc <HAL_DMA_Init+0x670>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d054      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a54      	ldr	r2, [pc, #336]	@ (80033d0 <HAL_DMA_Init+0x674>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04f      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a53      	ldr	r2, [pc, #332]	@ (80033d4 <HAL_DMA_Init+0x678>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a51      	ldr	r2, [pc, #324]	@ (80033d8 <HAL_DMA_Init+0x67c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a50      	ldr	r2, [pc, #320]	@ (80033dc <HAL_DMA_Init+0x680>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4e      	ldr	r2, [pc, #312]	@ (80033e0 <HAL_DMA_Init+0x684>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4d      	ldr	r2, [pc, #308]	@ (80033e4 <HAL_DMA_Init+0x688>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4b      	ldr	r2, [pc, #300]	@ (80033e8 <HAL_DMA_Init+0x68c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4a      	ldr	r2, [pc, #296]	@ (80033ec <HAL_DMA_Init+0x690>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a48      	ldr	r2, [pc, #288]	@ (80033f0 <HAL_DMA_Init+0x694>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a47      	ldr	r2, [pc, #284]	@ (80033f4 <HAL_DMA_Init+0x698>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a45      	ldr	r2, [pc, #276]	@ (80033f8 <HAL_DMA_Init+0x69c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a44      	ldr	r2, [pc, #272]	@ (80033fc <HAL_DMA_Init+0x6a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a42      	ldr	r2, [pc, #264]	@ (8003400 <HAL_DMA_Init+0x6a4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a41      	ldr	r2, [pc, #260]	@ (8003404 <HAL_DMA_Init+0x6a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3f      	ldr	r2, [pc, #252]	@ (8003408 <HAL_DMA_Init+0x6ac>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3e      	ldr	r2, [pc, #248]	@ (800340c <HAL_DMA_Init+0x6b0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_Init+0x5c6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3c      	ldr	r2, [pc, #240]	@ (8003410 <HAL_DMA_Init+0x6b4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Init+0x5ca>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_DMA_Init+0x5cc>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d032      	beq.n	8003392 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f002 fa43 	bl	80057b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d102      	bne.n	8003340 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003354:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_DMA_Init+0x624>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d80c      	bhi.n	8003380 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f002 fac0 	bl	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e008      	b.n	8003392 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	a7fdabf8 	.word	0xa7fdabf8
 80033b0:	cccccccd 	.word	0xcccccccd
 80033b4:	40020010 	.word	0x40020010
 80033b8:	40020028 	.word	0x40020028
 80033bc:	40020040 	.word	0x40020040
 80033c0:	40020058 	.word	0x40020058
 80033c4:	40020070 	.word	0x40020070
 80033c8:	40020088 	.word	0x40020088
 80033cc:	400200a0 	.word	0x400200a0
 80033d0:	400200b8 	.word	0x400200b8
 80033d4:	40020410 	.word	0x40020410
 80033d8:	40020428 	.word	0x40020428
 80033dc:	40020440 	.word	0x40020440
 80033e0:	40020458 	.word	0x40020458
 80033e4:	40020470 	.word	0x40020470
 80033e8:	40020488 	.word	0x40020488
 80033ec:	400204a0 	.word	0x400204a0
 80033f0:	400204b8 	.word	0x400204b8
 80033f4:	58025408 	.word	0x58025408
 80033f8:	5802541c 	.word	0x5802541c
 80033fc:	58025430 	.word	0x58025430
 8003400:	58025444 	.word	0x58025444
 8003404:	58025458 	.word	0x58025458
 8003408:	5802546c 	.word	0x5802546c
 800340c:	58025480 	.word	0x58025480
 8003410:	58025494 	.word	0x58025494

08003414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e226      	b.n	800387e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_DMA_Start_IT+0x2a>
 800343a:	2302      	movs	r3, #2
 800343c:	e21f      	b.n	800387e <HAL_DMA_Start_IT+0x46a>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	f040 820a 	bne.w	8003868 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a68      	ldr	r2, [pc, #416]	@ (8003608 <HAL_DMA_Start_IT+0x1f4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a66      	ldr	r2, [pc, #408]	@ (800360c <HAL_DMA_Start_IT+0x1f8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_DMA_Start_IT+0x1fc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a63      	ldr	r2, [pc, #396]	@ (8003614 <HAL_DMA_Start_IT+0x200>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a62      	ldr	r2, [pc, #392]	@ (8003618 <HAL_DMA_Start_IT+0x204>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a60      	ldr	r2, [pc, #384]	@ (800361c <HAL_DMA_Start_IT+0x208>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003620 <HAL_DMA_Start_IT+0x20c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003624 <HAL_DMA_Start_IT+0x210>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003628 <HAL_DMA_Start_IT+0x214>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5a      	ldr	r2, [pc, #360]	@ (800362c <HAL_DMA_Start_IT+0x218>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a59      	ldr	r2, [pc, #356]	@ (8003630 <HAL_DMA_Start_IT+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a57      	ldr	r2, [pc, #348]	@ (8003634 <HAL_DMA_Start_IT+0x220>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a56      	ldr	r2, [pc, #344]	@ (8003638 <HAL_DMA_Start_IT+0x224>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a54      	ldr	r2, [pc, #336]	@ (800363c <HAL_DMA_Start_IT+0x228>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a53      	ldr	r2, [pc, #332]	@ (8003640 <HAL_DMA_Start_IT+0x22c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_Start_IT+0xee>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a51      	ldr	r2, [pc, #324]	@ (8003644 <HAL_DMA_Start_IT+0x230>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d108      	bne.n	8003514 <HAL_DMA_Start_IT+0x100>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <HAL_DMA_Start_IT+0x110>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f001 fe6a 	bl	8005204 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	@ (8003608 <HAL_DMA_Start_IT+0x1f4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d04a      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a33      	ldr	r2, [pc, #204]	@ (800360c <HAL_DMA_Start_IT+0x1f8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d045      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a31      	ldr	r2, [pc, #196]	@ (8003610 <HAL_DMA_Start_IT+0x1fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d040      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a30      	ldr	r2, [pc, #192]	@ (8003614 <HAL_DMA_Start_IT+0x200>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d03b      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2e      	ldr	r2, [pc, #184]	@ (8003618 <HAL_DMA_Start_IT+0x204>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d036      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <HAL_DMA_Start_IT+0x208>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d031      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2b      	ldr	r2, [pc, #172]	@ (8003620 <HAL_DMA_Start_IT+0x20c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02c      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2a      	ldr	r2, [pc, #168]	@ (8003624 <HAL_DMA_Start_IT+0x210>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d027      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <HAL_DMA_Start_IT+0x214>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d022      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	@ (800362c <HAL_DMA_Start_IT+0x218>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d01d      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a25      	ldr	r2, [pc, #148]	@ (8003630 <HAL_DMA_Start_IT+0x21c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d018      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <HAL_DMA_Start_IT+0x220>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	@ (8003638 <HAL_DMA_Start_IT+0x224>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00e      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a21      	ldr	r2, [pc, #132]	@ (800363c <HAL_DMA_Start_IT+0x228>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d009      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003640 <HAL_DMA_Start_IT+0x22c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <HAL_DMA_Start_IT+0x1bc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <HAL_DMA_Start_IT+0x230>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Start_IT+0x1c0>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_Start_IT+0x1c2>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d036      	beq.n	8003648 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 021e 	bic.w	r2, r3, #30
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0216 	orr.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03e      	beq.n	8003674 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e035      	b.n	8003674 <HAL_DMA_Start_IT+0x260>
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020e 	bic.w	r2, r3, #14
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 020a 	orr.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0204 	orr.w	r2, r2, #4
 8003672:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a83      	ldr	r2, [pc, #524]	@ (8003888 <HAL_DMA_Start_IT+0x474>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d072      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a82      	ldr	r2, [pc, #520]	@ (800388c <HAL_DMA_Start_IT+0x478>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d06d      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	@ (8003890 <HAL_DMA_Start_IT+0x47c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d068      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7f      	ldr	r2, [pc, #508]	@ (8003894 <HAL_DMA_Start_IT+0x480>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d063      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	@ (8003898 <HAL_DMA_Start_IT+0x484>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d05e      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7c      	ldr	r2, [pc, #496]	@ (800389c <HAL_DMA_Start_IT+0x488>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d059      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7a      	ldr	r2, [pc, #488]	@ (80038a0 <HAL_DMA_Start_IT+0x48c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d054      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a79      	ldr	r2, [pc, #484]	@ (80038a4 <HAL_DMA_Start_IT+0x490>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d04f      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	@ (80038a8 <HAL_DMA_Start_IT+0x494>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d04a      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a76      	ldr	r2, [pc, #472]	@ (80038ac <HAL_DMA_Start_IT+0x498>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d045      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	@ (80038b0 <HAL_DMA_Start_IT+0x49c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d040      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	@ (80038b4 <HAL_DMA_Start_IT+0x4a0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d03b      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a71      	ldr	r2, [pc, #452]	@ (80038b8 <HAL_DMA_Start_IT+0x4a4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d036      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a70      	ldr	r2, [pc, #448]	@ (80038bc <HAL_DMA_Start_IT+0x4a8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d031      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_DMA_Start_IT+0x4ac>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d02c      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6d      	ldr	r2, [pc, #436]	@ (80038c4 <HAL_DMA_Start_IT+0x4b0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d027      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6b      	ldr	r2, [pc, #428]	@ (80038c8 <HAL_DMA_Start_IT+0x4b4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d022      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6a      	ldr	r2, [pc, #424]	@ (80038cc <HAL_DMA_Start_IT+0x4b8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01d      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a68      	ldr	r2, [pc, #416]	@ (80038d0 <HAL_DMA_Start_IT+0x4bc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d018      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a67      	ldr	r2, [pc, #412]	@ (80038d4 <HAL_DMA_Start_IT+0x4c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a65      	ldr	r2, [pc, #404]	@ (80038d8 <HAL_DMA_Start_IT+0x4c4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00e      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a64      	ldr	r2, [pc, #400]	@ (80038dc <HAL_DMA_Start_IT+0x4c8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a62      	ldr	r2, [pc, #392]	@ (80038e0 <HAL_DMA_Start_IT+0x4cc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_DMA_Start_IT+0x350>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a61      	ldr	r2, [pc, #388]	@ (80038e4 <HAL_DMA_Start_IT+0x4d0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Start_IT+0x354>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_DMA_Start_IT+0x356>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01a      	beq.n	80037a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800378a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a37      	ldr	r2, [pc, #220]	@ (8003888 <HAL_DMA_Start_IT+0x474>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a36      	ldr	r2, [pc, #216]	@ (800388c <HAL_DMA_Start_IT+0x478>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a34      	ldr	r2, [pc, #208]	@ (8003890 <HAL_DMA_Start_IT+0x47c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a33      	ldr	r2, [pc, #204]	@ (8003894 <HAL_DMA_Start_IT+0x480>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a31      	ldr	r2, [pc, #196]	@ (8003898 <HAL_DMA_Start_IT+0x484>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a30      	ldr	r2, [pc, #192]	@ (800389c <HAL_DMA_Start_IT+0x488>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2e      	ldr	r2, [pc, #184]	@ (80038a0 <HAL_DMA_Start_IT+0x48c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2d      	ldr	r2, [pc, #180]	@ (80038a4 <HAL_DMA_Start_IT+0x490>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2b      	ldr	r2, [pc, #172]	@ (80038a8 <HAL_DMA_Start_IT+0x494>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2a      	ldr	r2, [pc, #168]	@ (80038ac <HAL_DMA_Start_IT+0x498>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a28      	ldr	r2, [pc, #160]	@ (80038b0 <HAL_DMA_Start_IT+0x49c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a27      	ldr	r2, [pc, #156]	@ (80038b4 <HAL_DMA_Start_IT+0x4a0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a25      	ldr	r2, [pc, #148]	@ (80038b8 <HAL_DMA_Start_IT+0x4a4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a24      	ldr	r2, [pc, #144]	@ (80038bc <HAL_DMA_Start_IT+0x4a8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <HAL_DMA_Start_IT+0x4ac>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Start_IT+0x430>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <HAL_DMA_Start_IT+0x4b0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_DMA_Start_IT+0x442>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e012      	b.n	800387c <HAL_DMA_Start_IT+0x468>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e009      	b.n	800387c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800387c:	7dfb      	ldrb	r3, [r7, #23]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
 80038c8:	58025408 	.word	0x58025408
 80038cc:	5802541c 	.word	0x5802541c
 80038d0:	58025430 	.word	0x58025430
 80038d4:	58025444 	.word	0x58025444
 80038d8:	58025458 	.word	0x58025458
 80038dc:	5802546c 	.word	0x5802546c
 80038e0:	58025480 	.word	0x58025480
 80038e4:	58025494 	.word	0x58025494

080038e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff f918 	bl	8002b24 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e2dc      	b.n	8003eba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d008      	beq.n	800391e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e2cd      	b.n	8003eba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a76      	ldr	r2, [pc, #472]	@ (8003afc <HAL_DMA_Abort+0x214>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04a      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a74      	ldr	r2, [pc, #464]	@ (8003b00 <HAL_DMA_Abort+0x218>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d045      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a73      	ldr	r2, [pc, #460]	@ (8003b04 <HAL_DMA_Abort+0x21c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d040      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a71      	ldr	r2, [pc, #452]	@ (8003b08 <HAL_DMA_Abort+0x220>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a70      	ldr	r2, [pc, #448]	@ (8003b0c <HAL_DMA_Abort+0x224>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d036      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6e      	ldr	r2, [pc, #440]	@ (8003b10 <HAL_DMA_Abort+0x228>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d031      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6d      	ldr	r2, [pc, #436]	@ (8003b14 <HAL_DMA_Abort+0x22c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d02c      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	@ (8003b18 <HAL_DMA_Abort+0x230>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d027      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6a      	ldr	r2, [pc, #424]	@ (8003b1c <HAL_DMA_Abort+0x234>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a68      	ldr	r2, [pc, #416]	@ (8003b20 <HAL_DMA_Abort+0x238>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01d      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a67      	ldr	r2, [pc, #412]	@ (8003b24 <HAL_DMA_Abort+0x23c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d018      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a65      	ldr	r2, [pc, #404]	@ (8003b28 <HAL_DMA_Abort+0x240>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a64      	ldr	r2, [pc, #400]	@ (8003b2c <HAL_DMA_Abort+0x244>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a62      	ldr	r2, [pc, #392]	@ (8003b30 <HAL_DMA_Abort+0x248>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a61      	ldr	r2, [pc, #388]	@ (8003b34 <HAL_DMA_Abort+0x24c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Abort+0xd6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_DMA_Abort+0x250>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Abort+0xda>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_Abort+0xdc>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 021e 	bic.w	r2, r2, #30
 80039d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e00a      	b.n	8003a06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 020e 	bic.w	r2, r2, #14
 80039fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003afc <HAL_DMA_Abort+0x214>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d072      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3a      	ldr	r2, [pc, #232]	@ (8003b00 <HAL_DMA_Abort+0x218>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d06d      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a39      	ldr	r2, [pc, #228]	@ (8003b04 <HAL_DMA_Abort+0x21c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d068      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a37      	ldr	r2, [pc, #220]	@ (8003b08 <HAL_DMA_Abort+0x220>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d063      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a36      	ldr	r2, [pc, #216]	@ (8003b0c <HAL_DMA_Abort+0x224>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d05e      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	@ (8003b10 <HAL_DMA_Abort+0x228>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d059      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a33      	ldr	r2, [pc, #204]	@ (8003b14 <HAL_DMA_Abort+0x22c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d054      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <HAL_DMA_Abort+0x230>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04f      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_DMA_Abort+0x234>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	@ (8003b20 <HAL_DMA_Abort+0x238>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <HAL_DMA_Abort+0x23c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_DMA_Abort+0x240>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <HAL_DMA_Abort+0x244>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_DMA_Abort+0x248>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_DMA_Abort+0x24c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	@ (8003b38 <HAL_DMA_Abort+0x250>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <HAL_DMA_Abort+0x254>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_DMA_Abort+0x258>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <HAL_DMA_Abort+0x25c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_DMA_Abort+0x260>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_DMA_Abort+0x264>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_DMA_Abort+0x268>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_DMA_Abort+0x26c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_Abort+0x20e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_DMA_Abort+0x270>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d132      	bne.n	8003b5c <HAL_DMA_Abort+0x274>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e031      	b.n	8003b5e <HAL_DMA_Abort+0x276>
 8003afa:	bf00      	nop
 8003afc:	40020010 	.word	0x40020010
 8003b00:	40020028 	.word	0x40020028
 8003b04:	40020040 	.word	0x40020040
 8003b08:	40020058 	.word	0x40020058
 8003b0c:	40020070 	.word	0x40020070
 8003b10:	40020088 	.word	0x40020088
 8003b14:	400200a0 	.word	0x400200a0
 8003b18:	400200b8 	.word	0x400200b8
 8003b1c:	40020410 	.word	0x40020410
 8003b20:	40020428 	.word	0x40020428
 8003b24:	40020440 	.word	0x40020440
 8003b28:	40020458 	.word	0x40020458
 8003b2c:	40020470 	.word	0x40020470
 8003b30:	40020488 	.word	0x40020488
 8003b34:	400204a0 	.word	0x400204a0
 8003b38:	400204b8 	.word	0x400204b8
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6d      	ldr	r2, [pc, #436]	@ (8003d2c <HAL_DMA_Abort+0x444>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04a      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6b      	ldr	r2, [pc, #428]	@ (8003d30 <HAL_DMA_Abort+0x448>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_DMA_Abort+0x44c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d040      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_DMA_Abort+0x450>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a67      	ldr	r2, [pc, #412]	@ (8003d3c <HAL_DMA_Abort+0x454>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d036      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_DMA_Abort+0x458>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a64      	ldr	r2, [pc, #400]	@ (8003d44 <HAL_DMA_Abort+0x45c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02c      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a62      	ldr	r2, [pc, #392]	@ (8003d48 <HAL_DMA_Abort+0x460>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a61      	ldr	r2, [pc, #388]	@ (8003d4c <HAL_DMA_Abort+0x464>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d50 <HAL_DMA_Abort+0x468>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5e      	ldr	r2, [pc, #376]	@ (8003d54 <HAL_DMA_Abort+0x46c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d58 <HAL_DMA_Abort+0x470>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5b      	ldr	r2, [pc, #364]	@ (8003d5c <HAL_DMA_Abort+0x474>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a59      	ldr	r2, [pc, #356]	@ (8003d60 <HAL_DMA_Abort+0x478>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a58      	ldr	r2, [pc, #352]	@ (8003d64 <HAL_DMA_Abort+0x47c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_DMA_Abort+0x32a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_DMA_Abort+0x480>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <HAL_DMA_Abort+0x33c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e007      	b.n	8003c34 <HAL_DMA_Abort+0x34c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c34:	e013      	b.n	8003c5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c36:	f7fe ff75 	bl	8002b24 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d90c      	bls.n	8003c5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e12d      	b.n	8003eba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d2c <HAL_DMA_Abort+0x444>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2d      	ldr	r2, [pc, #180]	@ (8003d30 <HAL_DMA_Abort+0x448>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <HAL_DMA_Abort+0x44c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <HAL_DMA_Abort+0x450>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_DMA_Abort+0x454>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <HAL_DMA_Abort+0x458>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a26      	ldr	r2, [pc, #152]	@ (8003d44 <HAL_DMA_Abort+0x45c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <HAL_DMA_Abort+0x460>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <HAL_DMA_Abort+0x464>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_DMA_Abort+0x468>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a20      	ldr	r2, [pc, #128]	@ (8003d54 <HAL_DMA_Abort+0x46c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <HAL_DMA_Abort+0x470>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <HAL_DMA_Abort+0x474>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <HAL_DMA_Abort+0x478>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <HAL_DMA_Abort+0x47c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_Abort+0x422>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <HAL_DMA_Abort+0x480>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_Abort+0x426>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_DMA_Abort+0x428>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02b      	beq.n	8003d6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	223f      	movs	r2, #63	@ 0x3f
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e02a      	b.n	8003d82 <HAL_DMA_Abort+0x49a>
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec4 <HAL_DMA_Abort+0x5dc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d072      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec8 <HAL_DMA_Abort+0x5e0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d06d      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8003ecc <HAL_DMA_Abort+0x5e4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d068      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed0 <HAL_DMA_Abort+0x5e8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d063      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a49      	ldr	r2, [pc, #292]	@ (8003ed4 <HAL_DMA_Abort+0x5ec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d05e      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a47      	ldr	r2, [pc, #284]	@ (8003ed8 <HAL_DMA_Abort+0x5f0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d059      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a46      	ldr	r2, [pc, #280]	@ (8003edc <HAL_DMA_Abort+0x5f4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d054      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a44      	ldr	r2, [pc, #272]	@ (8003ee0 <HAL_DMA_Abort+0x5f8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d04f      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a43      	ldr	r2, [pc, #268]	@ (8003ee4 <HAL_DMA_Abort+0x5fc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a41      	ldr	r2, [pc, #260]	@ (8003ee8 <HAL_DMA_Abort+0x600>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a40      	ldr	r2, [pc, #256]	@ (8003eec <HAL_DMA_Abort+0x604>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef0 <HAL_DMA_Abort+0x608>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef4 <HAL_DMA_Abort+0x60c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef8 <HAL_DMA_Abort+0x610>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3a      	ldr	r2, [pc, #232]	@ (8003efc <HAL_DMA_Abort+0x614>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a38      	ldr	r2, [pc, #224]	@ (8003f00 <HAL_DMA_Abort+0x618>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a37      	ldr	r2, [pc, #220]	@ (8003f04 <HAL_DMA_Abort+0x61c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <HAL_DMA_Abort+0x620>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a34      	ldr	r2, [pc, #208]	@ (8003f0c <HAL_DMA_Abort+0x624>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a32      	ldr	r2, [pc, #200]	@ (8003f10 <HAL_DMA_Abort+0x628>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_DMA_Abort+0x62c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <HAL_DMA_Abort+0x630>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <HAL_DMA_Abort+0x634>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_Abort+0x58a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f20 <HAL_DMA_Abort+0x638>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Abort+0x58e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_DMA_Abort+0x590>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ea6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020010 	.word	0x40020010
 8003ec8:	40020028 	.word	0x40020028
 8003ecc:	40020040 	.word	0x40020040
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	40020070 	.word	0x40020070
 8003ed8:	40020088 	.word	0x40020088
 8003edc:	400200a0 	.word	0x400200a0
 8003ee0:	400200b8 	.word	0x400200b8
 8003ee4:	40020410 	.word	0x40020410
 8003ee8:	40020428 	.word	0x40020428
 8003eec:	40020440 	.word	0x40020440
 8003ef0:	40020458 	.word	0x40020458
 8003ef4:	40020470 	.word	0x40020470
 8003ef8:	40020488 	.word	0x40020488
 8003efc:	400204a0 	.word	0x400204a0
 8003f00:	400204b8 	.word	0x400204b8
 8003f04:	58025408 	.word	0x58025408
 8003f08:	5802541c 	.word	0x5802541c
 8003f0c:	58025430 	.word	0x58025430
 8003f10:	58025444 	.word	0x58025444
 8003f14:	58025458 	.word	0x58025458
 8003f18:	5802546c 	.word	0x5802546c
 8003f1c:	58025480 	.word	0x58025480
 8003f20:	58025494 	.word	0x58025494

08003f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e237      	b.n	80043a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d004      	beq.n	8003f4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2280      	movs	r2, #128	@ 0x80
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e22c      	b.n	80043a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a5c      	ldr	r2, [pc, #368]	@ (80040c4 <HAL_DMA_Abort_IT+0x1a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04a      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80040c8 <HAL_DMA_Abort_IT+0x1a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d045      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a59      	ldr	r2, [pc, #356]	@ (80040cc <HAL_DMA_Abort_IT+0x1a8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a58      	ldr	r2, [pc, #352]	@ (80040d0 <HAL_DMA_Abort_IT+0x1ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d03b      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a56      	ldr	r2, [pc, #344]	@ (80040d4 <HAL_DMA_Abort_IT+0x1b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a55      	ldr	r2, [pc, #340]	@ (80040d8 <HAL_DMA_Abort_IT+0x1b4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a53      	ldr	r2, [pc, #332]	@ (80040dc <HAL_DMA_Abort_IT+0x1b8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a52      	ldr	r2, [pc, #328]	@ (80040e0 <HAL_DMA_Abort_IT+0x1bc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d027      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a50      	ldr	r2, [pc, #320]	@ (80040e4 <HAL_DMA_Abort_IT+0x1c0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4f      	ldr	r2, [pc, #316]	@ (80040e8 <HAL_DMA_Abort_IT+0x1c4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80040ec <HAL_DMA_Abort_IT+0x1c8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80040f0 <HAL_DMA_Abort_IT+0x1cc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80040f4 <HAL_DMA_Abort_IT+0x1d0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a49      	ldr	r2, [pc, #292]	@ (80040f8 <HAL_DMA_Abort_IT+0x1d4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a47      	ldr	r2, [pc, #284]	@ (80040fc <HAL_DMA_Abort_IT+0x1d8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_Abort_IT+0xc8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a46      	ldr	r2, [pc, #280]	@ (8004100 <HAL_DMA_Abort_IT+0x1dc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMA_Abort_IT+0xcc>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xce>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8086 	beq.w	8004104 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2f      	ldr	r2, [pc, #188]	@ (80040c4 <HAL_DMA_Abort_IT+0x1a0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d04a      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <HAL_DMA_Abort_IT+0x1a4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d045      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <HAL_DMA_Abort_IT+0x1a8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d040      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_DMA_Abort_IT+0x1ac>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d03b      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <HAL_DMA_Abort_IT+0x1b0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d036      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a28      	ldr	r2, [pc, #160]	@ (80040d8 <HAL_DMA_Abort_IT+0x1b4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a26      	ldr	r2, [pc, #152]	@ (80040dc <HAL_DMA_Abort_IT+0x1b8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <HAL_DMA_Abort_IT+0x1bc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d027      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <HAL_DMA_Abort_IT+0x1c0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d022      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_DMA_Abort_IT+0x1c4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d01d      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a20      	ldr	r2, [pc, #128]	@ (80040ec <HAL_DMA_Abort_IT+0x1c8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_DMA_Abort_IT+0x1cc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <HAL_DMA_Abort_IT+0x1d0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_DMA_Abort_IT+0x1d4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1a      	ldr	r2, [pc, #104]	@ (80040fc <HAL_DMA_Abort_IT+0x1d8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x17c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <HAL_DMA_Abort_IT+0x1dc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d108      	bne.n	80040b2 <HAL_DMA_Abort_IT+0x18e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e178      	b.n	80043a4 <HAL_DMA_Abort_IT+0x480>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e16f      	b.n	80043a4 <HAL_DMA_Abort_IT+0x480>
 80040c4:	40020010 	.word	0x40020010
 80040c8:	40020028 	.word	0x40020028
 80040cc:	40020040 	.word	0x40020040
 80040d0:	40020058 	.word	0x40020058
 80040d4:	40020070 	.word	0x40020070
 80040d8:	40020088 	.word	0x40020088
 80040dc:	400200a0 	.word	0x400200a0
 80040e0:	400200b8 	.word	0x400200b8
 80040e4:	40020410 	.word	0x40020410
 80040e8:	40020428 	.word	0x40020428
 80040ec:	40020440 	.word	0x40020440
 80040f0:	40020458 	.word	0x40020458
 80040f4:	40020470 	.word	0x40020470
 80040f8:	40020488 	.word	0x40020488
 80040fc:	400204a0 	.word	0x400204a0
 8004100:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 020e 	bic.w	r2, r2, #14
 8004112:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6c      	ldr	r2, [pc, #432]	@ (80042cc <HAL_DMA_Abort_IT+0x3a8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04a      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6b      	ldr	r2, [pc, #428]	@ (80042d0 <HAL_DMA_Abort_IT+0x3ac>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d045      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a69      	ldr	r2, [pc, #420]	@ (80042d4 <HAL_DMA_Abort_IT+0x3b0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d040      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a68      	ldr	r2, [pc, #416]	@ (80042d8 <HAL_DMA_Abort_IT+0x3b4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d03b      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a66      	ldr	r2, [pc, #408]	@ (80042dc <HAL_DMA_Abort_IT+0x3b8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d036      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a65      	ldr	r2, [pc, #404]	@ (80042e0 <HAL_DMA_Abort_IT+0x3bc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d031      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a63      	ldr	r2, [pc, #396]	@ (80042e4 <HAL_DMA_Abort_IT+0x3c0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02c      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a62      	ldr	r2, [pc, #392]	@ (80042e8 <HAL_DMA_Abort_IT+0x3c4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d027      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a60      	ldr	r2, [pc, #384]	@ (80042ec <HAL_DMA_Abort_IT+0x3c8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a5f      	ldr	r2, [pc, #380]	@ (80042f0 <HAL_DMA_Abort_IT+0x3cc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a5d      	ldr	r2, [pc, #372]	@ (80042f4 <HAL_DMA_Abort_IT+0x3d0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a5c      	ldr	r2, [pc, #368]	@ (80042f8 <HAL_DMA_Abort_IT+0x3d4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5a      	ldr	r2, [pc, #360]	@ (80042fc <HAL_DMA_Abort_IT+0x3d8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a59      	ldr	r2, [pc, #356]	@ (8004300 <HAL_DMA_Abort_IT+0x3dc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a57      	ldr	r2, [pc, #348]	@ (8004304 <HAL_DMA_Abort_IT+0x3e0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x290>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a56      	ldr	r2, [pc, #344]	@ (8004308 <HAL_DMA_Abort_IT+0x3e4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <HAL_DMA_Abort_IT+0x2a2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e007      	b.n	80041d6 <HAL_DMA_Abort_IT+0x2b2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3c      	ldr	r2, [pc, #240]	@ (80042cc <HAL_DMA_Abort_IT+0x3a8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d072      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3a      	ldr	r2, [pc, #232]	@ (80042d0 <HAL_DMA_Abort_IT+0x3ac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d06d      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a39      	ldr	r2, [pc, #228]	@ (80042d4 <HAL_DMA_Abort_IT+0x3b0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d068      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a37      	ldr	r2, [pc, #220]	@ (80042d8 <HAL_DMA_Abort_IT+0x3b4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d063      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a36      	ldr	r2, [pc, #216]	@ (80042dc <HAL_DMA_Abort_IT+0x3b8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d05e      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a34      	ldr	r2, [pc, #208]	@ (80042e0 <HAL_DMA_Abort_IT+0x3bc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d059      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a33      	ldr	r2, [pc, #204]	@ (80042e4 <HAL_DMA_Abort_IT+0x3c0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d054      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a31      	ldr	r2, [pc, #196]	@ (80042e8 <HAL_DMA_Abort_IT+0x3c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d04f      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a30      	ldr	r2, [pc, #192]	@ (80042ec <HAL_DMA_Abort_IT+0x3c8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2e      	ldr	r2, [pc, #184]	@ (80042f0 <HAL_DMA_Abort_IT+0x3cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_DMA_Abort_IT+0x3d0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2b      	ldr	r2, [pc, #172]	@ (80042f8 <HAL_DMA_Abort_IT+0x3d4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <HAL_DMA_Abort_IT+0x3d8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a28      	ldr	r2, [pc, #160]	@ (8004300 <HAL_DMA_Abort_IT+0x3dc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a27      	ldr	r2, [pc, #156]	@ (8004304 <HAL_DMA_Abort_IT+0x3e0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a25      	ldr	r2, [pc, #148]	@ (8004308 <HAL_DMA_Abort_IT+0x3e4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a24      	ldr	r2, [pc, #144]	@ (800430c <HAL_DMA_Abort_IT+0x3e8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <HAL_DMA_Abort_IT+0x3ec>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_DMA_Abort_IT+0x3f0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <HAL_DMA_Abort_IT+0x3f4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <HAL_DMA_Abort_IT+0x3f8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <HAL_DMA_Abort_IT+0x3fc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_DMA_Abort_IT+0x400>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x3a2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_DMA_Abort_IT+0x404>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d132      	bne.n	800432c <HAL_DMA_Abort_IT+0x408>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e031      	b.n	800432e <HAL_DMA_Abort_IT+0x40a>
 80042ca:	bf00      	nop
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d028      	beq.n	8004384 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004340:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004360:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004374:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004378:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004382:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop

080043b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	@ 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043bc:	4b67      	ldr	r3, [pc, #412]	@ (800455c <HAL_DMA_IRQHandler+0x1ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a67      	ldr	r2, [pc, #412]	@ (8004560 <HAL_DMA_IRQHandler+0x1b0>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004564 <HAL_DMA_IRQHandler+0x1b4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004568 <HAL_DMA_IRQHandler+0x1b8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5c      	ldr	r2, [pc, #368]	@ (800456c <HAL_DMA_IRQHandler+0x1bc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5a      	ldr	r2, [pc, #360]	@ (8004570 <HAL_DMA_IRQHandler+0x1c0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a59      	ldr	r2, [pc, #356]	@ (8004574 <HAL_DMA_IRQHandler+0x1c4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a57      	ldr	r2, [pc, #348]	@ (8004578 <HAL_DMA_IRQHandler+0x1c8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a56      	ldr	r2, [pc, #344]	@ (800457c <HAL_DMA_IRQHandler+0x1cc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a54      	ldr	r2, [pc, #336]	@ (8004580 <HAL_DMA_IRQHandler+0x1d0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a53      	ldr	r2, [pc, #332]	@ (8004584 <HAL_DMA_IRQHandler+0x1d4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a51      	ldr	r2, [pc, #324]	@ (8004588 <HAL_DMA_IRQHandler+0x1d8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a50      	ldr	r2, [pc, #320]	@ (800458c <HAL_DMA_IRQHandler+0x1dc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4e      	ldr	r2, [pc, #312]	@ (8004590 <HAL_DMA_IRQHandler+0x1e0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4d      	ldr	r2, [pc, #308]	@ (8004594 <HAL_DMA_IRQHandler+0x1e4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <HAL_DMA_IRQHandler+0x1e8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a4a      	ldr	r2, [pc, #296]	@ (800459c <HAL_DMA_IRQHandler+0x1ec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_IRQHandler+0xd2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a48      	ldr	r2, [pc, #288]	@ (80045a0 <HAL_DMA_IRQHandler+0x1f0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_DMA_IRQHandler+0xd6>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_DMA_IRQHandler+0xd8>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 842b 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2208      	movs	r2, #8
 8004498:	409a      	lsls	r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80a2 	beq.w	80045e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004564 <HAL_DMA_IRQHandler+0x1b4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04a      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <HAL_DMA_IRQHandler+0x1b8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d045      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2b      	ldr	r2, [pc, #172]	@ (800456c <HAL_DMA_IRQHandler+0x1bc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d040      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004570 <HAL_DMA_IRQHandler+0x1c0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d03b      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a28      	ldr	r2, [pc, #160]	@ (8004574 <HAL_DMA_IRQHandler+0x1c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d036      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a27      	ldr	r2, [pc, #156]	@ (8004578 <HAL_DMA_IRQHandler+0x1c8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d031      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a25      	ldr	r2, [pc, #148]	@ (800457c <HAL_DMA_IRQHandler+0x1cc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02c      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a24      	ldr	r2, [pc, #144]	@ (8004580 <HAL_DMA_IRQHandler+0x1d0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d027      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <HAL_DMA_IRQHandler+0x1d4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a21      	ldr	r2, [pc, #132]	@ (8004588 <HAL_DMA_IRQHandler+0x1d8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d01d      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <HAL_DMA_IRQHandler+0x1dc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <HAL_DMA_IRQHandler+0x1e0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1c      	ldr	r2, [pc, #112]	@ (8004594 <HAL_DMA_IRQHandler+0x1e4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1b      	ldr	r2, [pc, #108]	@ (8004598 <HAL_DMA_IRQHandler+0x1e8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a19      	ldr	r2, [pc, #100]	@ (800459c <HAL_DMA_IRQHandler+0x1ec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_DMA_IRQHandler+0x194>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <HAL_DMA_IRQHandler+0x1f0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d12f      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x1f4>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e02e      	b.n	80045b8 <HAL_DMA_IRQHandler+0x208>
 800455a:	bf00      	nop
 800455c:	24000008 	.word	0x24000008
 8004560:	1b4e81b5 	.word	0x1b4e81b5
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2208      	movs	r2, #8
 80045d6:	409a      	lsls	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06e      	beq.n	80046dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a69      	ldr	r2, [pc, #420]	@ (80047a8 <HAL_DMA_IRQHandler+0x3f8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04a      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <HAL_DMA_IRQHandler+0x3fc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d045      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a66      	ldr	r2, [pc, #408]	@ (80047b0 <HAL_DMA_IRQHandler+0x400>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d040      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a64      	ldr	r2, [pc, #400]	@ (80047b4 <HAL_DMA_IRQHandler+0x404>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a63      	ldr	r2, [pc, #396]	@ (80047b8 <HAL_DMA_IRQHandler+0x408>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d036      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a61      	ldr	r2, [pc, #388]	@ (80047bc <HAL_DMA_IRQHandler+0x40c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a60      	ldr	r2, [pc, #384]	@ (80047c0 <HAL_DMA_IRQHandler+0x410>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02c      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5e      	ldr	r2, [pc, #376]	@ (80047c4 <HAL_DMA_IRQHandler+0x414>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d027      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_DMA_IRQHandler+0x418>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a5b      	ldr	r2, [pc, #364]	@ (80047cc <HAL_DMA_IRQHandler+0x41c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5a      	ldr	r2, [pc, #360]	@ (80047d0 <HAL_DMA_IRQHandler+0x420>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a58      	ldr	r2, [pc, #352]	@ (80047d4 <HAL_DMA_IRQHandler+0x424>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a57      	ldr	r2, [pc, #348]	@ (80047d8 <HAL_DMA_IRQHandler+0x428>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a55      	ldr	r2, [pc, #340]	@ (80047dc <HAL_DMA_IRQHandler+0x42c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a54      	ldr	r2, [pc, #336]	@ (80047e0 <HAL_DMA_IRQHandler+0x430>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x2ee>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a52      	ldr	r2, [pc, #328]	@ (80047e4 <HAL_DMA_IRQHandler+0x434>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10a      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x304>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e003      	b.n	80046bc <HAL_DMA_IRQHandler+0x30c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	f043 0202 	orr.w	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2204      	movs	r2, #4
 80046e6:	409a      	lsls	r2, r3
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 808f 	beq.w	8004810 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <HAL_DMA_IRQHandler+0x3f8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d04a      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <HAL_DMA_IRQHandler+0x3fc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d045      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <HAL_DMA_IRQHandler+0x400>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d040      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <HAL_DMA_IRQHandler+0x404>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d03b      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <HAL_DMA_IRQHandler+0x408>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d036      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a24      	ldr	r2, [pc, #144]	@ (80047bc <HAL_DMA_IRQHandler+0x40c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a23      	ldr	r2, [pc, #140]	@ (80047c0 <HAL_DMA_IRQHandler+0x410>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d02c      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <HAL_DMA_IRQHandler+0x414>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d027      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a20      	ldr	r2, [pc, #128]	@ (80047c8 <HAL_DMA_IRQHandler+0x418>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_DMA_IRQHandler+0x41c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <HAL_DMA_IRQHandler+0x420>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <HAL_DMA_IRQHandler+0x424>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_DMA_IRQHandler+0x428>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_DMA_IRQHandler+0x42c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <HAL_DMA_IRQHandler+0x430>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_DMA_IRQHandler+0x3e2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <HAL_DMA_IRQHandler+0x434>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d12a      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x438>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e023      	b.n	80047f0 <HAL_DMA_IRQHandler+0x440>
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	2204      	movs	r2, #4
 80047fe:	409a      	lsls	r2, r3
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2210      	movs	r2, #16
 800481a:	409a      	lsls	r2, r3
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a6 	beq.w	8004972 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a85      	ldr	r2, [pc, #532]	@ (8004a40 <HAL_DMA_IRQHandler+0x690>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a83      	ldr	r2, [pc, #524]	@ (8004a44 <HAL_DMA_IRQHandler+0x694>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a82      	ldr	r2, [pc, #520]	@ (8004a48 <HAL_DMA_IRQHandler+0x698>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a80      	ldr	r2, [pc, #512]	@ (8004a4c <HAL_DMA_IRQHandler+0x69c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a7f      	ldr	r2, [pc, #508]	@ (8004a50 <HAL_DMA_IRQHandler+0x6a0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a54 <HAL_DMA_IRQHandler+0x6a4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7c      	ldr	r2, [pc, #496]	@ (8004a58 <HAL_DMA_IRQHandler+0x6a8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a7a      	ldr	r2, [pc, #488]	@ (8004a5c <HAL_DMA_IRQHandler+0x6ac>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a79      	ldr	r2, [pc, #484]	@ (8004a60 <HAL_DMA_IRQHandler+0x6b0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a77      	ldr	r2, [pc, #476]	@ (8004a64 <HAL_DMA_IRQHandler+0x6b4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a76      	ldr	r2, [pc, #472]	@ (8004a68 <HAL_DMA_IRQHandler+0x6b8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a74      	ldr	r2, [pc, #464]	@ (8004a6c <HAL_DMA_IRQHandler+0x6bc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a73      	ldr	r2, [pc, #460]	@ (8004a70 <HAL_DMA_IRQHandler+0x6c0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a71      	ldr	r2, [pc, #452]	@ (8004a74 <HAL_DMA_IRQHandler+0x6c4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a70      	ldr	r2, [pc, #448]	@ (8004a78 <HAL_DMA_IRQHandler+0x6c8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x516>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a7c <HAL_DMA_IRQHandler+0x6cc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10a      	bne.n	80048dc <HAL_DMA_IRQHandler+0x52c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e009      	b.n	80048f0 <HAL_DMA_IRQHandler+0x540>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d03e      	beq.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2210      	movs	r2, #16
 80048fe:	409a      	lsls	r2, r3
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d108      	bne.n	8004932 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d024      	beq.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e01f      	b.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01b      	beq.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	e016      	b.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0208 	bic.w	r2, r2, #8
 8004960:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2220      	movs	r2, #32
 800497c:	409a      	lsls	r2, r3
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8110 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <HAL_DMA_IRQHandler+0x690>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d04a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <HAL_DMA_IRQHandler+0x694>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d045      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a29      	ldr	r2, [pc, #164]	@ (8004a48 <HAL_DMA_IRQHandler+0x698>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d040      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a28      	ldr	r2, [pc, #160]	@ (8004a4c <HAL_DMA_IRQHandler+0x69c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d03b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a26      	ldr	r2, [pc, #152]	@ (8004a50 <HAL_DMA_IRQHandler+0x6a0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d036      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a25      	ldr	r2, [pc, #148]	@ (8004a54 <HAL_DMA_IRQHandler+0x6a4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d031      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <HAL_DMA_IRQHandler+0x6a8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02c      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a22      	ldr	r2, [pc, #136]	@ (8004a5c <HAL_DMA_IRQHandler+0x6ac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d027      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a20      	ldr	r2, [pc, #128]	@ (8004a60 <HAL_DMA_IRQHandler+0x6b0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <HAL_DMA_IRQHandler+0x6b4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01d      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_DMA_IRQHandler+0x6b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_DMA_IRQHandler+0x6bc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_DMA_IRQHandler+0x6c0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <HAL_DMA_IRQHandler+0x6c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_DMA_IRQHandler+0x6c8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x678>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_DMA_IRQHandler+0x6cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d12b      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x6d0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	e02a      	b.n	8004a94 <HAL_DMA_IRQHandler+0x6e4>
 8004a3e:	bf00      	nop
 8004a40:	40020010 	.word	0x40020010
 8004a44:	40020028 	.word	0x40020028
 8004a48:	40020040 	.word	0x40020040
 8004a4c:	40020058 	.word	0x40020058
 8004a50:	40020070 	.word	0x40020070
 8004a54:	40020088 	.word	0x40020088
 8004a58:	400200a0 	.word	0x400200a0
 8004a5c:	400200b8 	.word	0x400200b8
 8004a60:	40020410 	.word	0x40020410
 8004a64:	40020428 	.word	0x40020428
 8004a68:	40020440 	.word	0x40020440
 8004a6c:	40020458 	.word	0x40020458
 8004a70:	40020470 	.word	0x40020470
 8004a74:	40020488 	.word	0x40020488
 8004a78:	400204a0 	.word	0x400204a0
 8004a7c:	400204b8 	.word	0x400204b8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf14      	ite	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	2300      	moveq	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8087 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d139      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0216 	bic.w	r2, r2, #22
 8004ac4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ad4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x736>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0208 	bic.w	r2, r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	223f      	movs	r2, #63	@ 0x3f
 8004b00:	409a      	lsls	r2, r3
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 834a 	beq.w	80051b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
          }
          return;
 8004b28:	e344      	b.n	80051b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e027      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d023      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e01e      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0210 	bic.w	r2, r2, #16
 8004b86:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8306 	beq.w	80051be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8088 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7a      	ldr	r2, [pc, #488]	@ (8004db8 <HAL_DMA_IRQHandler+0xa08>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d04a      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a79      	ldr	r2, [pc, #484]	@ (8004dbc <HAL_DMA_IRQHandler+0xa0c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d045      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a77      	ldr	r2, [pc, #476]	@ (8004dc0 <HAL_DMA_IRQHandler+0xa10>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d040      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a76      	ldr	r2, [pc, #472]	@ (8004dc4 <HAL_DMA_IRQHandler+0xa14>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d03b      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a74      	ldr	r2, [pc, #464]	@ (8004dc8 <HAL_DMA_IRQHandler+0xa18>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d036      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a73      	ldr	r2, [pc, #460]	@ (8004dcc <HAL_DMA_IRQHandler+0xa1c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d031      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a71      	ldr	r2, [pc, #452]	@ (8004dd0 <HAL_DMA_IRQHandler+0xa20>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02c      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a70      	ldr	r2, [pc, #448]	@ (8004dd4 <HAL_DMA_IRQHandler+0xa24>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d027      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd8 <HAL_DMA_IRQHandler+0xa28>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6d      	ldr	r2, [pc, #436]	@ (8004ddc <HAL_DMA_IRQHandler+0xa2c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d01d      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6b      	ldr	r2, [pc, #428]	@ (8004de0 <HAL_DMA_IRQHandler+0xa30>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8004de4 <HAL_DMA_IRQHandler+0xa34>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a68      	ldr	r2, [pc, #416]	@ (8004de8 <HAL_DMA_IRQHandler+0xa38>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a67      	ldr	r2, [pc, #412]	@ (8004dec <HAL_DMA_IRQHandler+0xa3c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a65      	ldr	r2, [pc, #404]	@ (8004df0 <HAL_DMA_IRQHandler+0xa40>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x8b8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a64      	ldr	r2, [pc, #400]	@ (8004df4 <HAL_DMA_IRQHandler+0xa44>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <HAL_DMA_IRQHandler+0x8ca>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e007      	b.n	8004c8a <HAL_DMA_IRQHandler+0x8da>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d307      	bcc.n	8004ca6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f2      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x8da>
 8004ca4:	e000      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ca6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004cbe:	e003      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8272 	beq.w	80051be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
 8004ce2:	e26c      	b.n	80051be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a43      	ldr	r2, [pc, #268]	@ (8004df8 <HAL_DMA_IRQHandler+0xa48>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a42      	ldr	r2, [pc, #264]	@ (8004dfc <HAL_DMA_IRQHandler+0xa4c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a40      	ldr	r2, [pc, #256]	@ (8004e00 <HAL_DMA_IRQHandler+0xa50>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3f      	ldr	r2, [pc, #252]	@ (8004e04 <HAL_DMA_IRQHandler+0xa54>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3d      	ldr	r2, [pc, #244]	@ (8004e08 <HAL_DMA_IRQHandler+0xa58>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e0c <HAL_DMA_IRQHandler+0xa5c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a3a      	ldr	r2, [pc, #232]	@ (8004e10 <HAL_DMA_IRQHandler+0xa60>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x984>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a39      	ldr	r2, [pc, #228]	@ (8004e14 <HAL_DMA_IRQHandler+0xa64>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x988>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <HAL_DMA_IRQHandler+0x98a>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 823f 	beq.w	80051be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2204      	movs	r2, #4
 8004d52:	409a      	lsls	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80cd 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0xb48>
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 80c7 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2204      	movs	r2, #4
 8004d74:	409a      	lsls	r2, r3
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d049      	beq.n	8004e18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8210 	beq.w	80051b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da0:	e20a      	b.n	80051b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8206 	beq.w	80051b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db4:	e200      	b.n	80051b8 <HAL_DMA_IRQHandler+0xe08>
 8004db6:	bf00      	nop
 8004db8:	40020010 	.word	0x40020010
 8004dbc:	40020028 	.word	0x40020028
 8004dc0:	40020040 	.word	0x40020040
 8004dc4:	40020058 	.word	0x40020058
 8004dc8:	40020070 	.word	0x40020070
 8004dcc:	40020088 	.word	0x40020088
 8004dd0:	400200a0 	.word	0x400200a0
 8004dd4:	400200b8 	.word	0x400200b8
 8004dd8:	40020410 	.word	0x40020410
 8004ddc:	40020428 	.word	0x40020428
 8004de0:	40020440 	.word	0x40020440
 8004de4:	40020458 	.word	0x40020458
 8004de8:	40020470 	.word	0x40020470
 8004dec:	40020488 	.word	0x40020488
 8004df0:	400204a0 	.word	0x400204a0
 8004df4:	400204b8 	.word	0x400204b8
 8004df8:	58025408 	.word	0x58025408
 8004dfc:	5802541c 	.word	0x5802541c
 8004e00:	58025430 	.word	0x58025430
 8004e04:	58025444 	.word	0x58025444
 8004e08:	58025458 	.word	0x58025458
 8004e0c:	5802546c 	.word	0x5802546c
 8004e10:	58025480 	.word	0x58025480
 8004e14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d160      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7f      	ldr	r2, [pc, #508]	@ (8005024 <HAL_DMA_IRQHandler+0xc74>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d04a      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7d      	ldr	r2, [pc, #500]	@ (8005028 <HAL_DMA_IRQHandler+0xc78>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d045      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800502c <HAL_DMA_IRQHandler+0xc7c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d040      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7a      	ldr	r2, [pc, #488]	@ (8005030 <HAL_DMA_IRQHandler+0xc80>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d03b      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a79      	ldr	r2, [pc, #484]	@ (8005034 <HAL_DMA_IRQHandler+0xc84>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d036      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a77      	ldr	r2, [pc, #476]	@ (8005038 <HAL_DMA_IRQHandler+0xc88>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d031      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a76      	ldr	r2, [pc, #472]	@ (800503c <HAL_DMA_IRQHandler+0xc8c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d02c      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a74      	ldr	r2, [pc, #464]	@ (8005040 <HAL_DMA_IRQHandler+0xc90>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d027      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a73      	ldr	r2, [pc, #460]	@ (8005044 <HAL_DMA_IRQHandler+0xc94>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a71      	ldr	r2, [pc, #452]	@ (8005048 <HAL_DMA_IRQHandler+0xc98>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a70      	ldr	r2, [pc, #448]	@ (800504c <HAL_DMA_IRQHandler+0xc9c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a6e      	ldr	r2, [pc, #440]	@ (8005050 <HAL_DMA_IRQHandler+0xca0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8005054 <HAL_DMA_IRQHandler+0xca4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6b      	ldr	r2, [pc, #428]	@ (8005058 <HAL_DMA_IRQHandler+0xca8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800505c <HAL_DMA_IRQHandler+0xcac>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xb12>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	@ (8005060 <HAL_DMA_IRQHandler+0xcb0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d108      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0xb24>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0208 	bic.w	r2, r2, #8
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e007      	b.n	8004ee4 <HAL_DMA_IRQHandler+0xb34>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8165 	beq.w	80051b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef6:	e15f      	b.n	80051b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	2202      	movs	r2, #2
 8004f02:	409a      	lsls	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80c5 	beq.w	8005098 <HAL_DMA_IRQHandler+0xce8>
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80bf 	beq.w	8005098 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	2202      	movs	r2, #2
 8004f24:	409a      	lsls	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 813a 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f50:	e134      	b.n	80051bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8130 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f64:	e12a      	b.n	80051bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8089 	bne.w	8005084 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2b      	ldr	r2, [pc, #172]	@ (8005024 <HAL_DMA_IRQHandler+0xc74>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04a      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <HAL_DMA_IRQHandler+0xc78>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d045      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a28      	ldr	r2, [pc, #160]	@ (800502c <HAL_DMA_IRQHandler+0xc7c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d040      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a26      	ldr	r2, [pc, #152]	@ (8005030 <HAL_DMA_IRQHandler+0xc80>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a25      	ldr	r2, [pc, #148]	@ (8005034 <HAL_DMA_IRQHandler+0xc84>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d036      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <HAL_DMA_IRQHandler+0xc88>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d031      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	@ (800503c <HAL_DMA_IRQHandler+0xc8c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d02c      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <HAL_DMA_IRQHandler+0xc90>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005044 <HAL_DMA_IRQHandler+0xc94>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005048 <HAL_DMA_IRQHandler+0xc98>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <HAL_DMA_IRQHandler+0xc9c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <HAL_DMA_IRQHandler+0xca0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a19      	ldr	r2, [pc, #100]	@ (8005054 <HAL_DMA_IRQHandler+0xca4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <HAL_DMA_IRQHandler+0xca8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a16      	ldr	r2, [pc, #88]	@ (800505c <HAL_DMA_IRQHandler+0xcac>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_IRQHandler+0xc62>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <HAL_DMA_IRQHandler+0xcb0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d128      	bne.n	8005064 <HAL_DMA_IRQHandler+0xcb4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0214 	bic.w	r2, r2, #20
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e027      	b.n	8005074 <HAL_DMA_IRQHandler+0xcc4>
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 020a 	bic.w	r2, r2, #10
 8005072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8097 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005096:	e091      	b.n	80051bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2208      	movs	r2, #8
 80050a2:	409a      	lsls	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8088 	beq.w	80051be <HAL_DMA_IRQHandler+0xe0e>
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8082 	beq.w	80051be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a41      	ldr	r2, [pc, #260]	@ (80051c4 <HAL_DMA_IRQHandler+0xe14>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d04a      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3f      	ldr	r2, [pc, #252]	@ (80051c8 <HAL_DMA_IRQHandler+0xe18>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d045      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3e      	ldr	r2, [pc, #248]	@ (80051cc <HAL_DMA_IRQHandler+0xe1c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d040      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3c      	ldr	r2, [pc, #240]	@ (80051d0 <HAL_DMA_IRQHandler+0xe20>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d03b      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3b      	ldr	r2, [pc, #236]	@ (80051d4 <HAL_DMA_IRQHandler+0xe24>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d036      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a39      	ldr	r2, [pc, #228]	@ (80051d8 <HAL_DMA_IRQHandler+0xe28>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d031      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a38      	ldr	r2, [pc, #224]	@ (80051dc <HAL_DMA_IRQHandler+0xe2c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d02c      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a36      	ldr	r2, [pc, #216]	@ (80051e0 <HAL_DMA_IRQHandler+0xe30>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d027      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a35      	ldr	r2, [pc, #212]	@ (80051e4 <HAL_DMA_IRQHandler+0xe34>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a33      	ldr	r2, [pc, #204]	@ (80051e8 <HAL_DMA_IRQHandler+0xe38>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01d      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a32      	ldr	r2, [pc, #200]	@ (80051ec <HAL_DMA_IRQHandler+0xe3c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d018      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a30      	ldr	r2, [pc, #192]	@ (80051f0 <HAL_DMA_IRQHandler+0xe40>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2f      	ldr	r2, [pc, #188]	@ (80051f4 <HAL_DMA_IRQHandler+0xe44>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2d      	ldr	r2, [pc, #180]	@ (80051f8 <HAL_DMA_IRQHandler+0xe48>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2c      	ldr	r2, [pc, #176]	@ (80051fc <HAL_DMA_IRQHandler+0xe4c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_DMA_IRQHandler+0xdaa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2a      	ldr	r2, [pc, #168]	@ (8005200 <HAL_DMA_IRQHandler+0xe50>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <HAL_DMA_IRQHandler+0xdbc>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 021c 	bic.w	r2, r2, #28
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e007      	b.n	800517c <HAL_DMA_IRQHandler+0xdcc>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 020e 	bic.w	r2, r2, #14
 800517a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	2201      	movs	r2, #1
 8005186:	409a      	lsls	r2, r3
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
 80051b2:	e004      	b.n	80051be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051b4:	bf00      	nop
 80051b6:	e002      	b.n	80051be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051be:	3728      	adds	r7, #40	@ 0x28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8

08005204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005216:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a7f      	ldr	r2, [pc, #508]	@ (8005420 <DMA_SetConfig+0x21c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d072      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a7d      	ldr	r2, [pc, #500]	@ (8005424 <DMA_SetConfig+0x220>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d06d      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7c      	ldr	r2, [pc, #496]	@ (8005428 <DMA_SetConfig+0x224>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d068      	beq.n	800530e <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a7a      	ldr	r2, [pc, #488]	@ (800542c <DMA_SetConfig+0x228>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d063      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a79      	ldr	r2, [pc, #484]	@ (8005430 <DMA_SetConfig+0x22c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d05e      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a77      	ldr	r2, [pc, #476]	@ (8005434 <DMA_SetConfig+0x230>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d059      	beq.n	800530e <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a76      	ldr	r2, [pc, #472]	@ (8005438 <DMA_SetConfig+0x234>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d054      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a74      	ldr	r2, [pc, #464]	@ (800543c <DMA_SetConfig+0x238>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d04f      	beq.n	800530e <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a73      	ldr	r2, [pc, #460]	@ (8005440 <DMA_SetConfig+0x23c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d04a      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a71      	ldr	r2, [pc, #452]	@ (8005444 <DMA_SetConfig+0x240>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d045      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a70      	ldr	r2, [pc, #448]	@ (8005448 <DMA_SetConfig+0x244>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d040      	beq.n	800530e <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a6e      	ldr	r2, [pc, #440]	@ (800544c <DMA_SetConfig+0x248>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d03b      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6d      	ldr	r2, [pc, #436]	@ (8005450 <DMA_SetConfig+0x24c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d036      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6b      	ldr	r2, [pc, #428]	@ (8005454 <DMA_SetConfig+0x250>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d031      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005458 <DMA_SetConfig+0x254>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d02c      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a68      	ldr	r2, [pc, #416]	@ (800545c <DMA_SetConfig+0x258>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d027      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a67      	ldr	r2, [pc, #412]	@ (8005460 <DMA_SetConfig+0x25c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a65      	ldr	r2, [pc, #404]	@ (8005464 <DMA_SetConfig+0x260>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01d      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a64      	ldr	r2, [pc, #400]	@ (8005468 <DMA_SetConfig+0x264>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a62      	ldr	r2, [pc, #392]	@ (800546c <DMA_SetConfig+0x268>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a61      	ldr	r2, [pc, #388]	@ (8005470 <DMA_SetConfig+0x26c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005474 <DMA_SetConfig+0x270>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <DMA_SetConfig+0x10a>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005478 <DMA_SetConfig+0x274>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <DMA_SetConfig+0x10a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a5c      	ldr	r2, [pc, #368]	@ (800547c <DMA_SetConfig+0x278>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <DMA_SetConfig+0x10e>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <DMA_SetConfig+0x110>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005320:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005332:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a39      	ldr	r2, [pc, #228]	@ (8005420 <DMA_SetConfig+0x21c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d04a      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a38      	ldr	r2, [pc, #224]	@ (8005424 <DMA_SetConfig+0x220>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d045      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a36      	ldr	r2, [pc, #216]	@ (8005428 <DMA_SetConfig+0x224>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d040      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a35      	ldr	r2, [pc, #212]	@ (800542c <DMA_SetConfig+0x228>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d03b      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a33      	ldr	r2, [pc, #204]	@ (8005430 <DMA_SetConfig+0x22c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d036      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a32      	ldr	r2, [pc, #200]	@ (8005434 <DMA_SetConfig+0x230>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d031      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a30      	ldr	r2, [pc, #192]	@ (8005438 <DMA_SetConfig+0x234>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02c      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2f      	ldr	r2, [pc, #188]	@ (800543c <DMA_SetConfig+0x238>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d027      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2d      	ldr	r2, [pc, #180]	@ (8005440 <DMA_SetConfig+0x23c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <DMA_SetConfig+0x240>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01d      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2a      	ldr	r2, [pc, #168]	@ (8005448 <DMA_SetConfig+0x244>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a29      	ldr	r2, [pc, #164]	@ (800544c <DMA_SetConfig+0x248>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a27      	ldr	r2, [pc, #156]	@ (8005450 <DMA_SetConfig+0x24c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a26      	ldr	r2, [pc, #152]	@ (8005454 <DMA_SetConfig+0x250>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a24      	ldr	r2, [pc, #144]	@ (8005458 <DMA_SetConfig+0x254>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <DMA_SetConfig+0x1d0>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a23      	ldr	r2, [pc, #140]	@ (800545c <DMA_SetConfig+0x258>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <DMA_SetConfig+0x1d4>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <DMA_SetConfig+0x1d6>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d059      	beq.n	8005492 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	223f      	movs	r2, #63	@ 0x3f
 80053e8:	409a      	lsls	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b40      	cmp	r3, #64	@ 0x40
 800540c:	d138      	bne.n	8005480 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800541e:	e086      	b.n	800552e <DMA_SetConfig+0x32a>
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
 8005460:	58025408 	.word	0x58025408
 8005464:	5802541c 	.word	0x5802541c
 8005468:	58025430 	.word	0x58025430
 800546c:	58025444 	.word	0x58025444
 8005470:	58025458 	.word	0x58025458
 8005474:	5802546c 	.word	0x5802546c
 8005478:	58025480 	.word	0x58025480
 800547c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
}
 8005490:	e04d      	b.n	800552e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a29      	ldr	r2, [pc, #164]	@ (800553c <DMA_SetConfig+0x338>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a27      	ldr	r2, [pc, #156]	@ (8005540 <DMA_SetConfig+0x33c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a26      	ldr	r2, [pc, #152]	@ (8005544 <DMA_SetConfig+0x340>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <DMA_SetConfig+0x344>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a23      	ldr	r2, [pc, #140]	@ (800554c <DMA_SetConfig+0x348>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <DMA_SetConfig+0x34c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a20      	ldr	r2, [pc, #128]	@ (8005554 <DMA_SetConfig+0x350>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <DMA_SetConfig+0x2de>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <DMA_SetConfig+0x354>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <DMA_SetConfig+0x2e2>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <DMA_SetConfig+0x2e4>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d108      	bne.n	800551e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	60da      	str	r2, [r3, #12]
}
 800551c:	e007      	b.n	800552e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	58025408 	.word	0x58025408
 8005540:	5802541c 	.word	0x5802541c
 8005544:	58025430 	.word	0x58025430
 8005548:	58025444 	.word	0x58025444
 800554c:	58025458 	.word	0x58025458
 8005550:	5802546c 	.word	0x5802546c
 8005554:	58025480 	.word	0x58025480
 8005558:	58025494 	.word	0x58025494

0800555c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a42      	ldr	r2, [pc, #264]	@ (8005674 <DMA_CalcBaseAndBitshift+0x118>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a41      	ldr	r2, [pc, #260]	@ (8005678 <DMA_CalcBaseAndBitshift+0x11c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3f      	ldr	r2, [pc, #252]	@ (800567c <DMA_CalcBaseAndBitshift+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3e      	ldr	r2, [pc, #248]	@ (8005680 <DMA_CalcBaseAndBitshift+0x124>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3c      	ldr	r2, [pc, #240]	@ (8005684 <DMA_CalcBaseAndBitshift+0x128>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3b      	ldr	r2, [pc, #236]	@ (8005688 <DMA_CalcBaseAndBitshift+0x12c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a39      	ldr	r2, [pc, #228]	@ (800568c <DMA_CalcBaseAndBitshift+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a38      	ldr	r2, [pc, #224]	@ (8005690 <DMA_CalcBaseAndBitshift+0x134>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a36      	ldr	r2, [pc, #216]	@ (8005694 <DMA_CalcBaseAndBitshift+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a35      	ldr	r2, [pc, #212]	@ (8005698 <DMA_CalcBaseAndBitshift+0x13c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <DMA_CalcBaseAndBitshift+0x140>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <DMA_CalcBaseAndBitshift+0x144>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a30      	ldr	r2, [pc, #192]	@ (80056a4 <DMA_CalcBaseAndBitshift+0x148>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <DMA_CalcBaseAndBitshift+0x150>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <DMA_CalcBaseAndBitshift+0xa8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <DMA_CalcBaseAndBitshift+0x154>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <DMA_CalcBaseAndBitshift+0xac>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <DMA_CalcBaseAndBitshift+0xae>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d024      	beq.n	8005658 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b10      	subs	r3, #16
 8005616:	4a27      	ldr	r2, [pc, #156]	@ (80056b4 <DMA_CalcBaseAndBitshift+0x158>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	4a24      	ldr	r2, [pc, #144]	@ (80056b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005628:	5cd3      	ldrb	r3, [r2, r3]
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b03      	cmp	r3, #3
 8005634:	d908      	bls.n	8005648 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <DMA_CalcBaseAndBitshift+0x160>)
 800563e:	4013      	ands	r3, r2
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	659a      	str	r2, [r3, #88]	@ 0x58
 8005646:	e00d      	b.n	8005664 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <DMA_CalcBaseAndBitshift+0x160>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6593      	str	r3, [r2, #88]	@ 0x58
 8005656:	e005      	b.n	8005664 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8
 80056b4:	aaaaaaab 	.word	0xaaaaaaab
 80056b8:	0801b294 	.word	0x0801b294
 80056bc:	fffffc00 	.word	0xfffffc00

080056c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d120      	bne.n	8005716 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d858      	bhi.n	800578e <DMA_CheckFifoParam+0xce>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <DMA_CheckFifoParam+0x24>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	08005707 	.word	0x08005707
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	0800578f 	.word	0x0800578f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d048      	beq.n	8005792 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005704:	e045      	b.n	8005792 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800570e:	d142      	bne.n	8005796 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005714:	e03f      	b.n	8005796 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800571e:	d123      	bne.n	8005768 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	2b03      	cmp	r3, #3
 8005726:	d838      	bhi.n	800579a <DMA_CheckFifoParam+0xda>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <DMA_CheckFifoParam+0x70>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005741 	.word	0x08005741
 8005734:	08005747 	.word	0x08005747
 8005738:	08005741 	.word	0x08005741
 800573c:	08005759 	.word	0x08005759
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
        break;
 8005744:	e030      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d025      	beq.n	800579e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005756:	e022      	b.n	800579e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005760:	d11f      	bne.n	80057a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005766:	e01c      	b.n	80057a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	2b02      	cmp	r3, #2
 800576e:	d902      	bls.n	8005776 <DMA_CheckFifoParam+0xb6>
 8005770:	2b03      	cmp	r3, #3
 8005772:	d003      	beq.n	800577c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005774:	e018      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
        break;
 800577a:	e015      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
    break;
 800578c:	e00b      	b.n	80057a6 <DMA_CheckFifoParam+0xe6>
        break;
 800578e:	bf00      	nop
 8005790:	e00a      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005792:	bf00      	nop
 8005794:	e008      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005796:	bf00      	nop
 8005798:	e006      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        break;
 800579a:	bf00      	nop
 800579c:	e004      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        break;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
        break;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <DMA_CheckFifoParam+0xe8>
    break;
 80057a6:	bf00      	nop
    }
  }

  return status;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a38      	ldr	r2, [pc, #224]	@ (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a36      	ldr	r2, [pc, #216]	@ (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a32      	ldr	r2, [pc, #200]	@ (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a30      	ldr	r2, [pc, #192]	@ (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2f      	ldr	r2, [pc, #188]	@ (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2d      	ldr	r2, [pc, #180]	@ (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d101      	bne.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	3b08      	subs	r3, #8
 8005828:	4a28      	ldr	r2, [pc, #160]	@ (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	461a      	mov	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a24      	ldr	r2, [pc, #144]	@ (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005844:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005854:	e024      	b.n	80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	3b10      	subs	r3, #16
 800585e:	4a1e      	ldr	r2, [pc, #120]	@ (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d806      	bhi.n	800587e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a1b      	ldr	r2, [pc, #108]	@ (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d902      	bls.n	800587e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3308      	adds	r3, #8
 800587c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4b18      	ldr	r3, [pc, #96]	@ (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a16      	ldr	r2, [pc, #88]	@ (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005890:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	58025408 	.word	0x58025408
 80058b0:	5802541c 	.word	0x5802541c
 80058b4:	58025430 	.word	0x58025430
 80058b8:	58025444 	.word	0x58025444
 80058bc:	58025458 	.word	0x58025458
 80058c0:	5802546c 	.word	0x5802546c
 80058c4:	58025480 	.word	0x58025480
 80058c8:	58025494 	.word	0x58025494
 80058cc:	cccccccd 	.word	0xcccccccd
 80058d0:	16009600 	.word	0x16009600
 80058d4:	58025880 	.word	0x58025880
 80058d8:	aaaaaaab 	.word	0xaaaaaaab
 80058dc:	400204b8 	.word	0x400204b8
 80058e0:	4002040f 	.word	0x4002040f
 80058e4:	10008200 	.word	0x10008200
 80058e8:	40020880 	.word	0x40020880

080058ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d04a      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d847      	bhi.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a25      	ldr	r2, [pc, #148]	@ (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a24      	ldr	r2, [pc, #144]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	@ (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d101      	bne.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005974:	671a      	str	r2, [r3, #112]	@ 0x70
 8005976:	e009      	b.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	461a      	mov	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a11      	ldr	r2, [pc, #68]	@ (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800598a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3b01      	subs	r3, #1
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	58025408 	.word	0x58025408
 80059a8:	5802541c 	.word	0x5802541c
 80059ac:	58025430 	.word	0x58025430
 80059b0:	58025444 	.word	0x58025444
 80059b4:	58025458 	.word	0x58025458
 80059b8:	5802546c 	.word	0x5802546c
 80059bc:	58025480 	.word	0x58025480
 80059c0:	58025494 	.word	0x58025494
 80059c4:	1600963f 	.word	0x1600963f
 80059c8:	58025940 	.word	0x58025940
 80059cc:	1000823f 	.word	0x1000823f
 80059d0:	40020940 	.word	0x40020940

080059d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	@ 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059e2:	4b89      	ldr	r3, [pc, #548]	@ (8005c08 <HAL_GPIO_Init+0x234>)
 80059e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059e6:	e194      	b.n	8005d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	4013      	ands	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8186 	beq.w	8005d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d005      	beq.n	8005a18 <HAL_GPIO_Init+0x44>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d130      	bne.n	8005a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	2203      	movs	r2, #3
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a4e:	2201      	movs	r2, #1
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0201 	and.w	r2, r3, #1
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d017      	beq.n	8005ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	2203      	movs	r2, #3
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d123      	bne.n	8005b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	08da      	lsrs	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3208      	adds	r2, #8
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	220f      	movs	r2, #15
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2203      	movs	r2, #3
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 0203 	and.w	r2, r3, #3
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80e0 	beq.w	8005d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c0c <HAL_GPIO_Init+0x238>)
 8005b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b52:	4a2e      	ldr	r2, [pc, #184]	@ (8005c0c <HAL_GPIO_Init+0x238>)
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <HAL_GPIO_Init+0x238>)
 8005b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b6a:	4a29      	ldr	r2, [pc, #164]	@ (8005c10 <HAL_GPIO_Init+0x23c>)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	3302      	adds	r3, #2
 8005b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	220f      	movs	r2, #15
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a20      	ldr	r2, [pc, #128]	@ (8005c14 <HAL_GPIO_Init+0x240>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d052      	beq.n	8005c3c <HAL_GPIO_Init+0x268>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1f      	ldr	r2, [pc, #124]	@ (8005c18 <HAL_GPIO_Init+0x244>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d031      	beq.n	8005c02 <HAL_GPIO_Init+0x22e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c1c <HAL_GPIO_Init+0x248>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d02b      	beq.n	8005bfe <HAL_GPIO_Init+0x22a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <HAL_GPIO_Init+0x24c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d025      	beq.n	8005bfa <HAL_GPIO_Init+0x226>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c24 <HAL_GPIO_Init+0x250>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <HAL_GPIO_Init+0x222>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <HAL_GPIO_Init+0x254>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d019      	beq.n	8005bf2 <HAL_GPIO_Init+0x21e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <HAL_GPIO_Init+0x258>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_GPIO_Init+0x21a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <HAL_GPIO_Init+0x25c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00d      	beq.n	8005bea <HAL_GPIO_Init+0x216>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <HAL_GPIO_Init+0x260>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <HAL_GPIO_Init+0x212>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <HAL_GPIO_Init+0x264>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <HAL_GPIO_Init+0x20e>
 8005bde:	2309      	movs	r3, #9
 8005be0:	e02d      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005be2:	230a      	movs	r3, #10
 8005be4:	e02b      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005be6:	2308      	movs	r3, #8
 8005be8:	e029      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bea:	2307      	movs	r3, #7
 8005bec:	e027      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bee:	2306      	movs	r3, #6
 8005bf0:	e025      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bf2:	2305      	movs	r3, #5
 8005bf4:	e023      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	e021      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e01f      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e01d      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e01b      	b.n	8005c3e <HAL_GPIO_Init+0x26a>
 8005c06:	bf00      	nop
 8005c08:	58000080 	.word	0x58000080
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	58000400 	.word	0x58000400
 8005c14:	58020000 	.word	0x58020000
 8005c18:	58020400 	.word	0x58020400
 8005c1c:	58020800 	.word	0x58020800
 8005c20:	58020c00 	.word	0x58020c00
 8005c24:	58021000 	.word	0x58021000
 8005c28:	58021400 	.word	0x58021400
 8005c2c:	58021800 	.word	0x58021800
 8005c30:	58021c00 	.word	0x58021c00
 8005c34:	58022000 	.word	0x58022000
 8005c38:	58022400 	.word	0x58022400
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	f002 0203 	and.w	r2, r2, #3
 8005c44:	0092      	lsls	r2, r2, #2
 8005c46:	4093      	lsls	r3, r2
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c4e:	4938      	ldr	r1, [pc, #224]	@ (8005d30 <HAL_GPIO_Init+0x35c>)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	3302      	adds	r3, #2
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f47f ae63 	bne.w	80059e8 <HAL_GPIO_Init+0x14>
  }
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	3724      	adds	r7, #36	@ 0x24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	58000400 	.word	0x58000400

08005d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	887b      	ldrh	r3, [r7, #2]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
 8005d50:	e001      	b.n	8005d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
 8005d70:	4613      	mov	r3, r2
 8005d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d74:	787b      	ldrb	r3, [r7, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7a:	887a      	ldrh	r2, [r7, #2]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d80:	e003      	b.n	8005d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	041a      	lsls	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	619a      	str	r2, [r3, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005da8:	887a      	ldrh	r2, [r7, #2]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4013      	ands	r3, r2
 8005dae:	041a      	lsls	r2, r3, #16
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	43d9      	mvns	r1, r3
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	400b      	ands	r3, r1
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	619a      	str	r2, [r3, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005de4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fa fc5b 	bl	80006ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e08:	4b19      	ldr	r3, [pc, #100]	@ (8005e70 <HAL_PWREx_ConfigSupply+0x70>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d00a      	beq.n	8005e2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e14:	4b16      	ldr	r3, [pc, #88]	@ (8005e70 <HAL_PWREx_ConfigSupply+0x70>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e01f      	b.n	8005e66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e01d      	b.n	8005e66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e2a:	4b11      	ldr	r3, [pc, #68]	@ (8005e70 <HAL_PWREx_ConfigSupply+0x70>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 0207 	bic.w	r2, r3, #7
 8005e32:	490f      	ldr	r1, [pc, #60]	@ (8005e70 <HAL_PWREx_ConfigSupply+0x70>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e3a:	f7fc fe73 	bl	8002b24 <HAL_GetTick>
 8005e3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e40:	e009      	b.n	8005e56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e42:	f7fc fe6f 	bl	8002b24 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e50:	d901      	bls.n	8005e56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e007      	b.n	8005e66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e56:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <HAL_PWREx_ConfigSupply+0x70>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e62:	d1ee      	bne.n	8005e42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	58024800 	.word	0x58024800

08005e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	@ 0x30
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f000 bc48 	b.w	8006718 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8088 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e96:	4b99      	ldr	r3, [pc, #612]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ea0:	4b96      	ldr	r3, [pc, #600]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d007      	beq.n	8005ebc <HAL_RCC_OscConfig+0x48>
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	2b18      	cmp	r3, #24
 8005eb0:	d111      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x62>
 8005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d10c      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	4b8f      	ldr	r3, [pc, #572]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d06d      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x130>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d169      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f000 bc21 	b.w	8006718 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ede:	d106      	bne.n	8005eee <HAL_RCC_OscConfig+0x7a>
 8005ee0:	4b86      	ldr	r3, [pc, #536]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a85      	ldr	r2, [pc, #532]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e02e      	b.n	8005f4c <HAL_RCC_OscConfig+0xd8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x9c>
 8005ef6:	4b81      	ldr	r3, [pc, #516]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a80      	ldr	r2, [pc, #512]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b7e      	ldr	r3, [pc, #504]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a7d      	ldr	r2, [pc, #500]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e01d      	b.n	8005f4c <HAL_RCC_OscConfig+0xd8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0xc0>
 8005f1a:	4b78      	ldr	r3, [pc, #480]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a77      	ldr	r2, [pc, #476]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b75      	ldr	r3, [pc, #468]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a74      	ldr	r2, [pc, #464]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0xd8>
 8005f34:	4b71      	ldr	r3, [pc, #452]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a70      	ldr	r2, [pc, #448]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b6e      	ldr	r3, [pc, #440]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6d      	ldr	r2, [pc, #436]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fc fde6 	bl	8002b24 <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fc fde2 	bl	8002b24 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e3d4      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0xe8>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fc fdd2 	bl	8002b24 <HAL_GetTick>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fc fdce 	bl	8002b24 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	@ 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e3c0      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f96:	4b59      	ldr	r3, [pc, #356]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x110>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80ca 	beq.w	8006148 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb4:	4b51      	ldr	r3, [pc, #324]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_RCC_OscConfig+0x166>
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b18      	cmp	r3, #24
 8005fce:	d156      	bne.n	800607e <HAL_RCC_OscConfig+0x20a>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d151      	bne.n	800607e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fda:	4b48      	ldr	r3, [pc, #288]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x17e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e392      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ff2:	4b42      	ldr	r3, [pc, #264]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 0219 	bic.w	r2, r3, #25
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	493f      	ldr	r1, [pc, #252]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fc fd8e 	bl	8002b24 <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7fc fd8a 	bl	8002b24 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e37c      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800601e:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602a:	f7fc fdab 	bl	8002b84 <HAL_GetREVID>
 800602e:	4603      	mov	r3, r0
 8006030:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006034:	4293      	cmp	r3, r2
 8006036:	d817      	bhi.n	8006068 <HAL_RCC_OscConfig+0x1f4>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b40      	cmp	r3, #64	@ 0x40
 800603e:	d108      	bne.n	8006052 <HAL_RCC_OscConfig+0x1de>
 8006040:	4b2e      	ldr	r3, [pc, #184]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006048:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 800604a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006050:	e07a      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	4b2a      	ldr	r3, [pc, #168]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	031b      	lsls	r3, r3, #12
 8006060:	4926      	ldr	r1, [pc, #152]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006066:	e06f      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	4921      	ldr	r1, [pc, #132]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800607c:	e064      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d047      	beq.n	8006116 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006086:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 0219 	bic.w	r2, r3, #25
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	491a      	ldr	r1, [pc, #104]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fc fd44 	bl	8002b24 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a0:	f7fc fd40 	bl	8002b24 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e332      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	f7fc fd61 	bl	8002b84 <HAL_GetREVID>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d819      	bhi.n	8006100 <HAL_RCC_OscConfig+0x28c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	d108      	bne.n	80060e6 <HAL_RCC_OscConfig+0x272>
 80060d4:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80060dc:	4a07      	ldr	r2, [pc, #28]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 80060de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e2:	6053      	str	r3, [r2, #4]
 80060e4:	e030      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	031b      	lsls	r3, r3, #12
 80060f4:	4901      	ldr	r1, [pc, #4]	@ (80060fc <HAL_RCC_OscConfig+0x288>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	604b      	str	r3, [r1, #4]
 80060fa:	e025      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
 80060fc:	58024400 	.word	0x58024400
 8006100:	4b9a      	ldr	r3, [pc, #616]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	061b      	lsls	r3, r3, #24
 800610e:	4997      	ldr	r1, [pc, #604]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	e018      	b.n	8006148 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006116:	4b95      	ldr	r3, [pc, #596]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a94      	ldr	r2, [pc, #592]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006122:	f7fc fcff 	bl	8002b24 <HAL_GetTick>
 8006126:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800612a:	f7fc fcfb 	bl	8002b24 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e2ed      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800613c:	4b8b      	ldr	r3, [pc, #556]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a9 	beq.w	80062a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006156:	4b85      	ldr	r3, [pc, #532]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800615e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006160:	4b82      	ldr	r3, [pc, #520]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d007      	beq.n	800617c <HAL_RCC_OscConfig+0x308>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b18      	cmp	r3, #24
 8006170:	d13a      	bne.n	80061e8 <HAL_RCC_OscConfig+0x374>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	2b01      	cmp	r3, #1
 800617a:	d135      	bne.n	80061e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617c:	4b7b      	ldr	r3, [pc, #492]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_OscConfig+0x320>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d001      	beq.n	8006194 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e2c1      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006194:	f7fc fcf6 	bl	8002b84 <HAL_GetREVID>
 8006198:	4603      	mov	r3, r0
 800619a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800619e:	4293      	cmp	r3, r2
 80061a0:	d817      	bhi.n	80061d2 <HAL_RCC_OscConfig+0x35e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d108      	bne.n	80061bc <HAL_RCC_OscConfig+0x348>
 80061aa:	4b70      	ldr	r3, [pc, #448]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061b2:	4a6e      	ldr	r2, [pc, #440]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061ba:	e075      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061bc:	4b6b      	ldr	r3, [pc, #428]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	069b      	lsls	r3, r3, #26
 80061ca:	4968      	ldr	r1, [pc, #416]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061d0:	e06a      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061d2:	4b66      	ldr	r3, [pc, #408]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	4962      	ldr	r1, [pc, #392]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061e6:	e05f      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d042      	beq.n	8006276 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061f0:	4b5e      	ldr	r3, [pc, #376]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5d      	ldr	r2, [pc, #372]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fc fc92 	bl	8002b24 <HAL_GetTick>
 8006200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006204:	f7fc fc8e 	bl	8002b24 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e280      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006216:	4b55      	ldr	r3, [pc, #340]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006222:	f7fc fcaf 	bl	8002b84 <HAL_GetREVID>
 8006226:	4603      	mov	r3, r0
 8006228:	f241 0203 	movw	r2, #4099	@ 0x1003
 800622c:	4293      	cmp	r3, r2
 800622e:	d817      	bhi.n	8006260 <HAL_RCC_OscConfig+0x3ec>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	2b20      	cmp	r3, #32
 8006236:	d108      	bne.n	800624a <HAL_RCC_OscConfig+0x3d6>
 8006238:	4b4c      	ldr	r3, [pc, #304]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006240:	4a4a      	ldr	r2, [pc, #296]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006242:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006246:	6053      	str	r3, [r2, #4]
 8006248:	e02e      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
 800624a:	4b48      	ldr	r3, [pc, #288]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	069b      	lsls	r3, r3, #26
 8006258:	4944      	ldr	r1, [pc, #272]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800625a:	4313      	orrs	r3, r2
 800625c:	604b      	str	r3, [r1, #4]
 800625e:	e023      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
 8006260:	4b42      	ldr	r3, [pc, #264]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	061b      	lsls	r3, r3, #24
 800626e:	493f      	ldr	r1, [pc, #252]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006270:	4313      	orrs	r3, r2
 8006272:	60cb      	str	r3, [r1, #12]
 8006274:	e018      	b.n	80062a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006276:	4b3d      	ldr	r3, [pc, #244]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3c      	ldr	r2, [pc, #240]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800627c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fc fc4f 	bl	8002b24 <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800628a:	f7fc fc4b 	bl	8002b24 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e23d      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800629c:	4b33      	ldr	r3, [pc, #204]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d036      	beq.n	8006322 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d019      	beq.n	80062f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062bc:	4b2b      	ldr	r3, [pc, #172]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80062be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c0:	4a2a      	ldr	r2, [pc, #168]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c8:	f7fc fc2c 	bl	8002b24 <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d0:	f7fc fc28 	bl	8002b24 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e21a      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062e2:	4b22      	ldr	r3, [pc, #136]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80062e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x45c>
 80062ee:	e018      	b.n	8006322 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f0:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80062f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f4:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fc fc12 	bl	8002b24 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006304:	f7fc fc0e 	bl	8002b24 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e200      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d039      	beq.n	80063a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01c      	beq.n	8006370 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a0c      	ldr	r2, [pc, #48]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800633c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006340:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006342:	f7fc fbef 	bl	8002b24 <HAL_GetTick>
 8006346:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800634a:	f7fc fbeb 	bl	8002b24 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e1dd      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800635c:	4b03      	ldr	r3, [pc, #12]	@ (800636c <HAL_RCC_OscConfig+0x4f8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x4d6>
 8006368:	e01b      	b.n	80063a2 <HAL_RCC_OscConfig+0x52e>
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006370:	4b9b      	ldr	r3, [pc, #620]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a9a      	ldr	r2, [pc, #616]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006376:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800637a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800637c:	f7fc fbd2 	bl	8002b24 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006384:	f7fc fbce 	bl	8002b24 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e1c0      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006396:	4b92      	ldr	r3, [pc, #584]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8081 	beq.w	80064b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063b0:	4b8c      	ldr	r3, [pc, #560]	@ (80065e4 <HAL_RCC_OscConfig+0x770>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a8b      	ldr	r2, [pc, #556]	@ (80065e4 <HAL_RCC_OscConfig+0x770>)
 80063b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063bc:	f7fc fbb2 	bl	8002b24 <HAL_GetTick>
 80063c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c4:	f7fc fbae 	bl	8002b24 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1a0      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d6:	4b83      	ldr	r3, [pc, #524]	@ (80065e4 <HAL_RCC_OscConfig+0x770>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d106      	bne.n	80063f8 <HAL_RCC_OscConfig+0x584>
 80063ea:	4b7d      	ldr	r3, [pc, #500]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ee:	4a7c      	ldr	r2, [pc, #496]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f6:	e02d      	b.n	8006454 <HAL_RCC_OscConfig+0x5e0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10c      	bne.n	800641a <HAL_RCC_OscConfig+0x5a6>
 8006400:	4b77      	ldr	r3, [pc, #476]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006404:	4a76      	ldr	r2, [pc, #472]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	6713      	str	r3, [r2, #112]	@ 0x70
 800640c:	4b74      	ldr	r3, [pc, #464]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	4a73      	ldr	r2, [pc, #460]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006412:	f023 0304 	bic.w	r3, r3, #4
 8006416:	6713      	str	r3, [r2, #112]	@ 0x70
 8006418:	e01c      	b.n	8006454 <HAL_RCC_OscConfig+0x5e0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b05      	cmp	r3, #5
 8006420:	d10c      	bne.n	800643c <HAL_RCC_OscConfig+0x5c8>
 8006422:	4b6f      	ldr	r3, [pc, #444]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	4a6e      	ldr	r2, [pc, #440]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006428:	f043 0304 	orr.w	r3, r3, #4
 800642c:	6713      	str	r3, [r2, #112]	@ 0x70
 800642e:	4b6c      	ldr	r3, [pc, #432]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	4a6b      	ldr	r2, [pc, #428]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	6713      	str	r3, [r2, #112]	@ 0x70
 800643a:	e00b      	b.n	8006454 <HAL_RCC_OscConfig+0x5e0>
 800643c:	4b68      	ldr	r3, [pc, #416]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006440:	4a67      	ldr	r2, [pc, #412]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	6713      	str	r3, [r2, #112]	@ 0x70
 8006448:	4b65      	ldr	r3, [pc, #404]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800644a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644c:	4a64      	ldr	r2, [pc, #400]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800644e:	f023 0304 	bic.w	r3, r3, #4
 8006452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d015      	beq.n	8006488 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fc fb62 	bl	8002b24 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006462:	e00a      	b.n	800647a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006464:	f7fc fb5e 	bl	8002b24 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006472:	4293      	cmp	r3, r2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e14e      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800647a:	4b59      	ldr	r3, [pc, #356]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0ee      	beq.n	8006464 <HAL_RCC_OscConfig+0x5f0>
 8006486:	e014      	b.n	80064b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006488:	f7fc fb4c 	bl	8002b24 <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800648e:	e00a      	b.n	80064a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006490:	f7fc fb48 	bl	8002b24 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e138      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064a6:	4b4e      	ldr	r3, [pc, #312]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1ee      	bne.n	8006490 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 812d 	beq.w	8006716 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064bc:	4b48      	ldr	r3, [pc, #288]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c4:	2b18      	cmp	r3, #24
 80064c6:	f000 80bd 	beq.w	8006644 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	f040 809e 	bne.w	8006610 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d4:	4b42      	ldr	r3, [pc, #264]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a41      	ldr	r2, [pc, #260]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc fb20 	bl	8002b24 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fc fb1c 	bl	8002b24 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e10e      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064fa:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006506:	4b36      	ldr	r3, [pc, #216]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800650a:	4b37      	ldr	r3, [pc, #220]	@ (80065e8 <HAL_RCC_OscConfig+0x774>)
 800650c:	4013      	ands	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	430a      	orrs	r2, r1
 800651a:	4931      	ldr	r1, [pc, #196]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006524:	3b01      	subs	r3, #1
 8006526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652e:	3b01      	subs	r3, #1
 8006530:	025b      	lsls	r3, r3, #9
 8006532:	b29b      	uxth	r3, r3
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	3b01      	subs	r3, #1
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	3b01      	subs	r3, #1
 800654a:	061b      	lsls	r3, r3, #24
 800654c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006550:	4923      	ldr	r1, [pc, #140]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006556:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4a21      	ldr	r2, [pc, #132]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006562:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006566:	4b21      	ldr	r3, [pc, #132]	@ (80065ec <HAL_RCC_OscConfig+0x778>)
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800656e:	00d2      	lsls	r2, r2, #3
 8006570:	491b      	ldr	r1, [pc, #108]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006576:	4b1a      	ldr	r3, [pc, #104]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f023 020c 	bic.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	4917      	ldr	r1, [pc, #92]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006588:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	f023 0202 	bic.w	r2, r3, #2
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006594:	4912      	ldr	r1, [pc, #72]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800659a:	4b11      	ldr	r3, [pc, #68]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	4a10      	ldr	r2, [pc, #64]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a6:	4b0e      	ldr	r3, [pc, #56]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	4a0d      	ldr	r2, [pc, #52]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065b2:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	4a0a      	ldr	r2, [pc, #40]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4a07      	ldr	r2, [pc, #28]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ca:	4b05      	ldr	r3, [pc, #20]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a04      	ldr	r2, [pc, #16]	@ (80065e0 <HAL_RCC_OscConfig+0x76c>)
 80065d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d6:	f7fc faa5 	bl	8002b24 <HAL_GetTick>
 80065da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065dc:	e011      	b.n	8006602 <HAL_RCC_OscConfig+0x78e>
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	58024800 	.word	0x58024800
 80065e8:	fffffc0c 	.word	0xfffffc0c
 80065ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f0:	f7fc fa98 	bl	8002b24 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e08a      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006602:	4b47      	ldr	r3, [pc, #284]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x77c>
 800660e:	e082      	b.n	8006716 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006610:	4b43      	ldr	r3, [pc, #268]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a42      	ldr	r2, [pc, #264]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fc fa82 	bl	8002b24 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fc fa7e 	bl	8002b24 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e070      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006636:	4b3a      	ldr	r3, [pc, #232]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x7b0>
 8006642:	e068      	b.n	8006716 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006644:	4b36      	ldr	r3, [pc, #216]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800664a:	4b35      	ldr	r3, [pc, #212]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	2b01      	cmp	r3, #1
 8006656:	d031      	beq.n	80066bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f003 0203 	and.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d12a      	bne.n	80066bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d122      	bne.n	80066bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006682:	429a      	cmp	r2, r3
 8006684:	d11a      	bne.n	80066bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	0a5b      	lsrs	r3, r3, #9
 800668a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d111      	bne.n	80066bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d108      	bne.n	80066bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e02b      	b.n	8006718 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066c0:	4b17      	ldr	r3, [pc, #92]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 80066c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d01f      	beq.n	8006716 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066d6:	4b12      	ldr	r3, [pc, #72]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	4a11      	ldr	r2, [pc, #68]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066e2:	f7fc fa1f 	bl	8002b24 <HAL_GetTick>
 80066e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066e8:	bf00      	nop
 80066ea:	f7fc fa1b 	bl	8002b24 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d0f9      	beq.n	80066ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 80066f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCC_OscConfig+0x8b0>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006702:	00d2      	lsls	r2, r2, #3
 8006704:	4906      	ldr	r1, [pc, #24]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006706:	4313      	orrs	r3, r2
 8006708:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800670a:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	4a04      	ldr	r2, [pc, #16]	@ (8006720 <HAL_RCC_OscConfig+0x8ac>)
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3730      	adds	r7, #48	@ 0x30
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	58024400 	.word	0x58024400
 8006724:	ffff0007 	.word	0xffff0007

08006728 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e19c      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800673c:	4b8a      	ldr	r3, [pc, #552]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d910      	bls.n	800676c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b87      	ldr	r3, [pc, #540]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f023 020f 	bic.w	r2, r3, #15
 8006752:	4985      	ldr	r1, [pc, #532]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800675a:	4b83      	ldr	r3, [pc, #524]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e184      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	4b7b      	ldr	r3, [pc, #492]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006784:	429a      	cmp	r2, r3
 8006786:	d908      	bls.n	800679a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006788:	4b78      	ldr	r3, [pc, #480]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	4975      	ldr	r1, [pc, #468]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006796:	4313      	orrs	r3, r2
 8006798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d010      	beq.n	80067c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	4b70      	ldr	r3, [pc, #448]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d908      	bls.n	80067c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067b6:	4b6d      	ldr	r3, [pc, #436]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	496a      	ldr	r1, [pc, #424]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	4b64      	ldr	r3, [pc, #400]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d908      	bls.n	80067f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067e4:	4b61      	ldr	r3, [pc, #388]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	495e      	ldr	r1, [pc, #376]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	4b59      	ldr	r3, [pc, #356]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800680e:	429a      	cmp	r2, r3
 8006810:	d908      	bls.n	8006824 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006812:	4b56      	ldr	r3, [pc, #344]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4953      	ldr	r1, [pc, #332]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006820:	4313      	orrs	r3, r2
 8006822:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	4b4d      	ldr	r3, [pc, #308]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	429a      	cmp	r2, r3
 800683e:	d908      	bls.n	8006852 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006840:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f023 020f 	bic.w	r2, r3, #15
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4947      	ldr	r1, [pc, #284]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800684e:	4313      	orrs	r3, r2
 8006850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d055      	beq.n	800690a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800685e:	4b43      	ldr	r3, [pc, #268]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	4940      	ldr	r1, [pc, #256]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800686c:	4313      	orrs	r3, r2
 800686e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006878:	4b3c      	ldr	r3, [pc, #240]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d121      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0f6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d107      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006890:	4b36      	ldr	r3, [pc, #216]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d115      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0ea      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068a8:	4b30      	ldr	r3, [pc, #192]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0de      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068b8:	4b2c      	ldr	r3, [pc, #176]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0d6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068c8:	4b28      	ldr	r3, [pc, #160]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f023 0207 	bic.w	r2, r3, #7
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4925      	ldr	r1, [pc, #148]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fc f923 	bl	8002b24 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e0:	e00a      	b.n	80068f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e2:	f7fc f91f 	bl	8002b24 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e0be      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f8:	4b1c      	ldr	r3, [pc, #112]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	429a      	cmp	r2, r3
 8006908:	d1eb      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	4b14      	ldr	r3, [pc, #80]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	429a      	cmp	r2, r3
 8006924:	d208      	bcs.n	8006938 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006926:	4b11      	ldr	r3, [pc, #68]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f023 020f 	bic.w	r2, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	490e      	ldr	r1, [pc, #56]	@ (800696c <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d214      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 020f 	bic.w	r2, r3, #15
 800694e:	4906      	ldr	r1, [pc, #24]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006956:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e086      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
 8006968:	52002000 	.word	0x52002000
 800696c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	4b3f      	ldr	r3, [pc, #252]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006988:	429a      	cmp	r2, r3
 800698a:	d208      	bcs.n	800699e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800698c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	4939      	ldr	r1, [pc, #228]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 800699a:	4313      	orrs	r3, r2
 800699c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	4b34      	ldr	r3, [pc, #208]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d208      	bcs.n	80069cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069ba:	4b31      	ldr	r3, [pc, #196]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	492e      	ldr	r1, [pc, #184]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	4b28      	ldr	r3, [pc, #160]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d208      	bcs.n	80069fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069e8:	4b25      	ldr	r3, [pc, #148]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4922      	ldr	r1, [pc, #136]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d208      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a16:	4b1a      	ldr	r3, [pc, #104]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4917      	ldr	r1, [pc, #92]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a28:	f000 f834 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b14      	ldr	r3, [pc, #80]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	4912      	ldr	r1, [pc, #72]	@ (8006a84 <HAL_RCC_ClockConfig+0x35c>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a46:	4b0e      	ldr	r3, [pc, #56]	@ (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006a84 <HAL_RCC_ClockConfig+0x35c>)
 8006a50:	5cd3      	ldrb	r3, [r2, r3]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a88 <HAL_RCC_ClockConfig+0x360>)
 8006a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a60:	4a0a      	ldr	r2, [pc, #40]	@ (8006a8c <HAL_RCC_ClockConfig+0x364>)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <HAL_RCC_ClockConfig+0x368>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb f9dc 	bl	8001e28 <HAL_InitTick>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	0801b284 	.word	0x0801b284
 8006a88:	2400000c 	.word	0x2400000c
 8006a8c:	24000008 	.word	0x24000008
 8006a90:	24000010 	.word	0x24000010

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	@ 0x24
 8006a98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a9a:	4bb3      	ldr	r3, [pc, #716]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aa2:	2b18      	cmp	r3, #24
 8006aa4:	f200 8155 	bhi.w	8006d52 <HAL_RCC_GetSysClockFreq+0x2be>
 8006aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006b15 	.word	0x08006b15
 8006ab4:	08006d53 	.word	0x08006d53
 8006ab8:	08006d53 	.word	0x08006d53
 8006abc:	08006d53 	.word	0x08006d53
 8006ac0:	08006d53 	.word	0x08006d53
 8006ac4:	08006d53 	.word	0x08006d53
 8006ac8:	08006d53 	.word	0x08006d53
 8006acc:	08006d53 	.word	0x08006d53
 8006ad0:	08006b3b 	.word	0x08006b3b
 8006ad4:	08006d53 	.word	0x08006d53
 8006ad8:	08006d53 	.word	0x08006d53
 8006adc:	08006d53 	.word	0x08006d53
 8006ae0:	08006d53 	.word	0x08006d53
 8006ae4:	08006d53 	.word	0x08006d53
 8006ae8:	08006d53 	.word	0x08006d53
 8006aec:	08006d53 	.word	0x08006d53
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006d53 	.word	0x08006d53
 8006af8:	08006d53 	.word	0x08006d53
 8006afc:	08006d53 	.word	0x08006d53
 8006b00:	08006d53 	.word	0x08006d53
 8006b04:	08006d53 	.word	0x08006d53
 8006b08:	08006d53 	.word	0x08006d53
 8006b0c:	08006d53 	.word	0x08006d53
 8006b10:	08006b47 	.word	0x08006b47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b14:	4b94      	ldr	r3, [pc, #592]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b20:	4b91      	ldr	r3, [pc, #580]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	08db      	lsrs	r3, r3, #3
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	4a90      	ldr	r2, [pc, #576]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b32:	e111      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b34:	4b8d      	ldr	r3, [pc, #564]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b36:	61bb      	str	r3, [r7, #24]
      break;
 8006b38:	e10e      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b3c:	61bb      	str	r3, [r7, #24]
      break;
 8006b3e:	e10b      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b40:	4b8c      	ldr	r3, [pc, #560]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b42:	61bb      	str	r3, [r7, #24]
      break;
 8006b44:	e108      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b46:	4b88      	ldr	r3, [pc, #544]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b50:	4b85      	ldr	r3, [pc, #532]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b5c:	4b82      	ldr	r3, [pc, #520]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b66:	4b80      	ldr	r3, [pc, #512]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80e1 	beq.w	8006d4c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f000 8083 	beq.w	8006c98 <HAL_RCC_GetSysClockFreq+0x204>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	f200 80a1 	bhi.w	8006cdc <HAL_RCC_GetSysClockFreq+0x248>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x114>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d056      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ba6:	e099      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02d      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a6b      	ldr	r2, [pc, #428]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b62      	ldr	r3, [pc, #392]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c0e:	e087      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b51      	ldr	r3, [pc, #324]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c52:	e065      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b40      	ldr	r3, [pc, #256]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c96:	e043      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cda:	e021      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d02:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d20:	4b11      	ldr	r3, [pc, #68]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d44:	ee17 3a90 	vmov	r3, s15
 8006d48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d4a:	e005      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
      break;
 8006d50:	e002      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d52:	4b07      	ldr	r3, [pc, #28]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d54:	61bb      	str	r3, [r7, #24]
      break;
 8006d56:	bf00      	nop
  }

  return sysclockfreq;
 8006d58:	69bb      	ldr	r3, [r7, #24]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3724      	adds	r7, #36	@ 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	03d09000 	.word	0x03d09000
 8006d70:	003d0900 	.word	0x003d0900
 8006d74:	017d7840 	.word	0x017d7840
 8006d78:	46000000 	.word	0x46000000
 8006d7c:	4c742400 	.word	0x4c742400
 8006d80:	4a742400 	.word	0x4a742400
 8006d84:	4bbebc20 	.word	0x4bbebc20

08006d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d8e:	f7ff fe81 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006d92:	4602      	mov	r2, r0
 8006d94:	4b10      	ldr	r3, [pc, #64]	@ (8006dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	490f      	ldr	r1, [pc, #60]	@ (8006ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8006da0:	5ccb      	ldrb	r3, [r1, r3]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	fa22 f303 	lsr.w	r3, r2, r3
 8006daa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	4a09      	ldr	r2, [pc, #36]	@ (8006ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8006db6:	5cd3      	ldrb	r3, [r2, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	4a07      	ldr	r2, [pc, #28]	@ (8006de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dc6:	4a07      	ldr	r2, [pc, #28]	@ (8006de4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dcc:	4b04      	ldr	r3, [pc, #16]	@ (8006de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	0801b284 	.word	0x0801b284
 8006de0:	2400000c 	.word	0x2400000c
 8006de4:	24000008 	.word	0x24000008

08006de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006dec:	f7ff ffcc 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	4904      	ldr	r1, [pc, #16]	@ (8006e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	0801b284 	.word	0x0801b284

08006e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e18:	f7ff ffb6 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4904      	ldr	r1, [pc, #16]	@ (8006e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	0801b284 	.word	0x0801b284

08006e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	223f      	movs	r2, #63	@ 0x3f
 8006e4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e50:	4b1a      	ldr	r3, [pc, #104]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0207 	and.w	r2, r3, #7
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e5c:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e68:	4b14      	ldr	r3, [pc, #80]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e74:	4b11      	ldr	r3, [pc, #68]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e80:	4b0e      	ldr	r3, [pc, #56]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e98:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ea4:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_RCC_GetClockConfig+0x80>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	52002000 	.word	0x52002000

08006ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec8:	b0ca      	sub	sp, #296	@ 0x128
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ee8:	2500      	movs	r5, #0
 8006eea:	ea54 0305 	orrs.w	r3, r4, r5
 8006eee:	d049      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006efa:	d02f      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006efc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f00:	d828      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f06:	d01a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f0c:	d822      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f16:	d007      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f18:	e01c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1a:	4bb8      	ldr	r3, [pc, #736]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4ab7      	ldr	r2, [pc, #732]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f26:	e01a      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 fb61 	bl	80095f8 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	3328      	adds	r3, #40	@ 0x28
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fc08 	bl	800975c <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f52:	e004      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f5a:	e000      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f66:	4ba5      	ldr	r3, [pc, #660]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f74:	4aa1      	ldr	r2, [pc, #644]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f7a:	e003      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	ea58 0309 	orrs.w	r3, r8, r9
 8006f98:	d047      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d82a      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fcf 	.word	0x08006fcf
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08007003 	.word	0x08007003
 8006fbc:	08007003 	.word	0x08007003
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc4:	4a8d      	ldr	r2, [pc, #564]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fcc:	e01a      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fb0e 	bl	80095f8 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe2:	e00f      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe8:	3328      	adds	r3, #40	@ 0x28
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f002 fbb5 	bl	800975c <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff8:	e004      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800700c:	4b7b      	ldr	r3, [pc, #492]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800700e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007010:	f023 0107 	bic.w	r1, r3, #7
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	4a78      	ldr	r2, [pc, #480]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007036:	f04f 0b00 	mov.w	fp, #0
 800703a:	ea5a 030b 	orrs.w	r3, sl, fp
 800703e:	d04c      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704a:	d030      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800704c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007050:	d829      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007052:	2bc0      	cmp	r3, #192	@ 0xc0
 8007054:	d02d      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007056:	2bc0      	cmp	r3, #192	@ 0xc0
 8007058:	d825      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800705a:	2b80      	cmp	r3, #128	@ 0x80
 800705c:	d018      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800705e:	2b80      	cmp	r3, #128	@ 0x80
 8007060:	d821      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007066:	2b40      	cmp	r3, #64	@ 0x40
 8007068:	d007      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800706a:	e01c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b63      	ldr	r3, [pc, #396]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a62      	ldr	r2, [pc, #392]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007078:	e01c      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	3308      	adds	r3, #8
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fab8 	bl	80095f8 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800708e:	e011      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	3328      	adds	r3, #40	@ 0x28
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f002 fb5f 	bl	800975c <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070a4:	e006      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070bc:	4b4f      	ldr	r3, [pc, #316]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ca:	4a4c      	ldr	r2, [pc, #304]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80070e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80070f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d053      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007106:	d035      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800710c:	d82e      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800710e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007112:	d031      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007114:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007118:	d828      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800711a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800711e:	d01a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007124:	d822      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800712a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800712e:	d007      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007130:	e01c      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007132:	4b32      	ldr	r3, [pc, #200]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	4a31      	ldr	r2, [pc, #196]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800713c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800713e:	e01c      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	3308      	adds	r3, #8
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f002 fa55 	bl	80095f8 <RCCEx_PLL2_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007154:	e011      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	3328      	adds	r3, #40	@ 0x28
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f002 fafc 	bl	800975c <RCCEx_PLL3_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800716a:	e006      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007172:	e002      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10b      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007182:	4b1e      	ldr	r3, [pc, #120]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007186:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007192:	4a1a      	ldr	r2, [pc, #104]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007194:	430b      	orrs	r3, r1
 8007196:	6593      	str	r3, [r2, #88]	@ 0x58
 8007198:	e003      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80071ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d056      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071ce:	d038      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071d4:	d831      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071da:	d034      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80071dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071e0:	d82b      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071e6:	d01d      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80071e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ec:	d825      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80071f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071f8:	e01f      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007200:	4ba2      	ldr	r3, [pc, #648]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	4aa1      	ldr	r2, [pc, #644]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800720c:	e01c      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	3308      	adds	r3, #8
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f002 f9ee 	bl	80095f8 <RCCEx_PLL2_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007222:	e011      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	3328      	adds	r3, #40	@ 0x28
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f002 fa95 	bl	800975c <RCCEx_PLL3_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007238:	e006      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007240:	e002      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10b      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007250:	4b8e      	ldr	r3, [pc, #568]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007254:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007260:	4a8a      	ldr	r2, [pc, #552]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007262:	430b      	orrs	r3, r1
 8007264:	6593      	str	r3, [r2, #88]	@ 0x58
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800727c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007280:	2300      	movs	r3, #0
 8007282:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007286:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800728a:	460b      	mov	r3, r1
 800728c:	4313      	orrs	r3, r2
 800728e:	d03a      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007296:	2b30      	cmp	r3, #48	@ 0x30
 8007298:	d01f      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800729a:	2b30      	cmp	r3, #48	@ 0x30
 800729c:	d819      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d00c      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d815      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d019      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d111      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ae:	4b77      	ldr	r3, [pc, #476]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	4a76      	ldr	r2, [pc, #472]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072ba:	e011      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	3308      	adds	r3, #8
 80072c2:	2102      	movs	r1, #2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f002 f997 	bl	80095f8 <RCCEx_PLL2_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072d0:	e006      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80072de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072e8:	4b68      	ldr	r3, [pc, #416]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f6:	4a65      	ldr	r2, [pc, #404]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f8:	430b      	orrs	r3, r1
 80072fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007312:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007316:	2300      	movs	r3, #0
 8007318:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800731c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007320:	460b      	mov	r3, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d051      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800732c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007330:	d035      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007336:	d82e      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007338:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800733c:	d031      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800733e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007342:	d828      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007348:	d01a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800734a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800734e:	d822      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007358:	d007      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800735a:	e01c      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735c:	4b4b      	ldr	r3, [pc, #300]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	4a4a      	ldr	r2, [pc, #296]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007368:	e01c      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736e:	3308      	adds	r3, #8
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f002 f940 	bl	80095f8 <RCCEx_PLL2_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800737e:	e011      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007384:	3328      	adds	r3, #40	@ 0x28
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f002 f9e7 	bl	800975c <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007394:	e006      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073ac:	4b37      	ldr	r3, [pc, #220]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ba:	4a34      	ldr	r2, [pc, #208]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073bc:	430b      	orrs	r3, r1
 80073be:	6513      	str	r3, [r2, #80]	@ 0x50
 80073c0:	e003      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80073d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073da:	2300      	movs	r3, #0
 80073dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80073e4:	460b      	mov	r3, r1
 80073e6:	4313      	orrs	r3, r2
 80073e8:	d056      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073f4:	d033      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80073f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073fa:	d82c      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007400:	d02f      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007406:	d826      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800740c:	d02b      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800740e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007412:	d820      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007418:	d012      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800741a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741e:	d81a      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d022      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007428:	d115      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3308      	adds	r3, #8
 8007430:	2101      	movs	r1, #1
 8007432:	4618      	mov	r0, r3
 8007434:	f002 f8e0 	bl	80095f8 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800743e:	e015      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	3328      	adds	r3, #40	@ 0x28
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f002 f987 	bl	800975c <RCCEx_PLL3_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007454:	e00a      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800745e:	bf00      	nop
 8007460:	e004      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007462:	bf00      	nop
 8007464:	e002      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007466:	bf00      	nop
 8007468:	e000      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800746a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10d      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007474:	4b05      	ldr	r3, [pc, #20]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007478:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007482:	4a02      	ldr	r2, [pc, #8]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007484:	430b      	orrs	r3, r1
 8007486:	6513      	str	r3, [r2, #80]	@ 0x50
 8007488:	e006      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d055      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074c4:	d033      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80074c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074ca:	d82c      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d0:	d02f      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d6:	d826      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074dc:	d02b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80074de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074e2:	d820      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e8:	d012      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80074ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ee:	d81a      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d022      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80074f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f8:	d115      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	3308      	adds	r3, #8
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f002 f878 	bl	80095f8 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800750e:	e015      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f002 f91f 	bl	800975c <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007524:	e00a      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800752c:	e006      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800752e:	bf00      	nop
 8007530:	e004      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007532:	bf00      	nop
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007544:	4ba3      	ldr	r3, [pc, #652]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007548:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007554:	4a9f      	ldr	r2, [pc, #636]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007556:	430b      	orrs	r3, r1
 8007558:	6593      	str	r3, [r2, #88]	@ 0x58
 800755a:	e003      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800757a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800757e:	460b      	mov	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	d037      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758e:	d00e      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007594:	d816      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d018      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800759a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800759e:	d111      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a0:	4b8c      	ldr	r3, [pc, #560]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a8b      	ldr	r2, [pc, #556]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075ac:	e00f      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	3308      	adds	r3, #8
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f002 f81e 	bl	80095f8 <RCCEx_PLL2_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80075cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075d6:	4b7f      	ldr	r3, [pc, #508]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e4:	4a7b      	ldr	r2, [pc, #492]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800760a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d039      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761a:	2b03      	cmp	r3, #3
 800761c:	d81c      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007661 	.word	0x08007661
 8007628:	08007635 	.word	0x08007635
 800762c:	08007643 	.word	0x08007643
 8007630:	08007661 	.word	0x08007661
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007634:	4b67      	ldr	r3, [pc, #412]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	4a66      	ldr	r2, [pc, #408]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800763e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007640:	e00f      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	3308      	adds	r3, #8
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 ffd4 	bl	80095f8 <RCCEx_PLL2_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007656:	e004      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800765e:	e000      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800766a:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800766e:	f023 0103 	bic.w	r1, r3, #3
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007678:	4a56      	ldr	r2, [pc, #344]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800767a:	430b      	orrs	r3, r1
 800767c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800769e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f000 809f 	beq.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076aa:	4b4b      	ldr	r3, [pc, #300]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4a      	ldr	r2, [pc, #296]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076b6:	f7fb fa35 	bl	8002b24 <HAL_GetTick>
 80076ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076be:	e00b      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c0:	f7fb fa30 	bl	8002b24 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b64      	cmp	r3, #100	@ 0x64
 80076ce:	d903      	bls.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076d6:	e005      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076d8:	4b3f      	ldr	r3, [pc, #252]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0ed      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80076e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d179      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80076ec:	4b39      	ldr	r3, [pc, #228]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076f8:	4053      	eors	r3, r2
 80076fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d015      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007702:	4b34      	ldr	r3, [pc, #208]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800770e:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007712:	4a30      	ldr	r2, [pc, #192]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007718:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800771a:	4b2e      	ldr	r3, [pc, #184]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800771c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771e:	4a2d      	ldr	r2, [pc, #180]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007724:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007726:	4a2b      	ldr	r2, [pc, #172]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800772c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773a:	d118      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773c:	f7fb f9f2 	bl	8002b24 <HAL_GetTick>
 8007740:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007744:	e00d      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007746:	f7fb f9ed 	bl	8002b24 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007756:	429a      	cmp	r2, r3
 8007758:	d903      	bls.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007760:	e005      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007762:	4b1c      	ldr	r3, [pc, #112]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0eb      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007772:	2b00      	cmp	r3, #0
 8007774:	d129      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800777e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007786:	d10e      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007788:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007798:	091a      	lsrs	r2, r3, #4
 800779a:	4b10      	ldr	r3, [pc, #64]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800779c:	4013      	ands	r3, r2
 800779e:	4a0d      	ldr	r2, [pc, #52]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6113      	str	r3, [r2, #16]
 80077a4:	e005      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	4a0a      	ldr	r2, [pc, #40]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077b0:	6113      	str	r3, [r2, #16]
 80077b2:	4b08      	ldr	r3, [pc, #32]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077c2:	4a04      	ldr	r2, [pc, #16]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c8:	e00e      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80077d2:	e009      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80077d4:	58024400 	.word	0x58024400
 80077d8:	58024800 	.word	0x58024800
 80077dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f002 0301 	and.w	r3, r2, #1
 80077f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	f000 8089 	beq.w	800791c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007810:	2b28      	cmp	r3, #40	@ 0x28
 8007812:	d86b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	080078f5 	.word	0x080078f5
 8007820:	080078ed 	.word	0x080078ed
 8007824:	080078ed 	.word	0x080078ed
 8007828:	080078ed 	.word	0x080078ed
 800782c:	080078ed 	.word	0x080078ed
 8007830:	080078ed 	.word	0x080078ed
 8007834:	080078ed 	.word	0x080078ed
 8007838:	080078ed 	.word	0x080078ed
 800783c:	080078c1 	.word	0x080078c1
 8007840:	080078ed 	.word	0x080078ed
 8007844:	080078ed 	.word	0x080078ed
 8007848:	080078ed 	.word	0x080078ed
 800784c:	080078ed 	.word	0x080078ed
 8007850:	080078ed 	.word	0x080078ed
 8007854:	080078ed 	.word	0x080078ed
 8007858:	080078ed 	.word	0x080078ed
 800785c:	080078d7 	.word	0x080078d7
 8007860:	080078ed 	.word	0x080078ed
 8007864:	080078ed 	.word	0x080078ed
 8007868:	080078ed 	.word	0x080078ed
 800786c:	080078ed 	.word	0x080078ed
 8007870:	080078ed 	.word	0x080078ed
 8007874:	080078ed 	.word	0x080078ed
 8007878:	080078ed 	.word	0x080078ed
 800787c:	080078f5 	.word	0x080078f5
 8007880:	080078ed 	.word	0x080078ed
 8007884:	080078ed 	.word	0x080078ed
 8007888:	080078ed 	.word	0x080078ed
 800788c:	080078ed 	.word	0x080078ed
 8007890:	080078ed 	.word	0x080078ed
 8007894:	080078ed 	.word	0x080078ed
 8007898:	080078ed 	.word	0x080078ed
 800789c:	080078f5 	.word	0x080078f5
 80078a0:	080078ed 	.word	0x080078ed
 80078a4:	080078ed 	.word	0x080078ed
 80078a8:	080078ed 	.word	0x080078ed
 80078ac:	080078ed 	.word	0x080078ed
 80078b0:	080078ed 	.word	0x080078ed
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	080078ed 	.word	0x080078ed
 80078bc:	080078f5 	.word	0x080078f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	3308      	adds	r3, #8
 80078c6:	2101      	movs	r1, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fe95 	bl	80095f8 <RCCEx_PLL2_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80078d4:	e00f      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	3328      	adds	r3, #40	@ 0x28
 80078dc:	2101      	movs	r1, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 ff3c 	bl	800975c <RCCEx_PLL3_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078fe:	4bbf      	ldr	r3, [pc, #764]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800790c:	4abb      	ldr	r2, [pc, #748]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800790e:	430b      	orrs	r3, r1
 8007910:	6553      	str	r3, [r2, #84]	@ 0x54
 8007912:	e003      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f002 0302 	and.w	r3, r2, #2
 8007928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800792c:	2300      	movs	r3, #0
 800792e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007932:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007936:	460b      	mov	r3, r1
 8007938:	4313      	orrs	r3, r2
 800793a:	d041      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007942:	2b05      	cmp	r3, #5
 8007944:	d824      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007946:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007999 	.word	0x08007999
 8007950:	08007965 	.word	0x08007965
 8007954:	0800797b 	.word	0x0800797b
 8007958:	08007999 	.word	0x08007999
 800795c:	08007999 	.word	0x08007999
 8007960:	08007999 	.word	0x08007999
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007968:	3308      	adds	r3, #8
 800796a:	2101      	movs	r1, #1
 800796c:	4618      	mov	r0, r3
 800796e:	f001 fe43 	bl	80095f8 <RCCEx_PLL2_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007978:	e00f      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797e:	3328      	adds	r3, #40	@ 0x28
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f001 feea 	bl	800975c <RCCEx_PLL3_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800798e:	e004      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079a2:	4b96      	ldr	r3, [pc, #600]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a6:	f023 0107 	bic.w	r1, r3, #7
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b0:	4a92      	ldr	r2, [pc, #584]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079b2:	430b      	orrs	r3, r1
 80079b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f002 0304 	and.w	r3, r2, #4
 80079cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079da:	460b      	mov	r3, r1
 80079dc:	4313      	orrs	r3, r2
 80079de:	d044      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e8:	2b05      	cmp	r3, #5
 80079ea:	d825      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80079ec:	a201      	add	r2, pc, #4	@ (adr r2, 80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007a41 	.word	0x08007a41
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a23 	.word	0x08007a23
 8007a00:	08007a41 	.word	0x08007a41
 8007a04:	08007a41 	.word	0x08007a41
 8007a08:	08007a41 	.word	0x08007a41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	3308      	adds	r3, #8
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fdef 	bl	80095f8 <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a20:	e00f      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	3328      	adds	r3, #40	@ 0x28
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fe96 	bl	800975c <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4e:	f023 0107 	bic.w	r1, r3, #7
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5a:	4a68      	ldr	r2, [pc, #416]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f002 0320 	and.w	r3, r2, #32
 8007a76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d055      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a96:	d033      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a9c:	d82c      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa2:	d02f      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa8:	d826      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007aaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aae:	d02b      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ab4:	d820      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aba:	d012      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ac0:	d81a      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aca:	d115      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fd8f 	bl	80095f8 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ae0:	e015      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	3328      	adds	r3, #40	@ 0x28
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fe36 	bl	800975c <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007af6:	e00a      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b16:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b26:	4a35      	ldr	r2, [pc, #212]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b2c:	e003      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d058      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b62:	d033      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007b64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b68:	d82c      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6e:	d02f      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b74:	d826      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b7a:	d02b      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b80:	d820      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b86:	d012      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b8c:	d81a      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d022      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b96:	d115      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fd29 	bl	80095f8 <RCCEx_PLL2_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007bac:	e015      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	3328      	adds	r3, #40	@ 0x28
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 fdd0 	bl	800975c <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007bc2:	e00a      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bca:	e006      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bcc:	bf00      	nop
 8007bce:	e004      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bd0:	bf00      	nop
 8007bd2:	e002      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10e      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007be2:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bf2:	4a02      	ldr	r2, [pc, #8]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf8:	e006      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d055      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c34:	d033      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c3a:	d82c      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c40:	d02f      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c46:	d826      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c4c:	d02b      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007c4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c52:	d820      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c58:	d012      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c5e:	d81a      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d022      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c68:	d115      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6e:	3308      	adds	r3, #8
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fcc0 	bl	80095f8 <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c7e:	e015      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	3328      	adds	r3, #40	@ 0x28
 8007c86:	2102      	movs	r1, #2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 fd67 	bl	800975c <RCCEx_PLL3_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c94:	e00a      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9c:	e006      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c9e:	bf00      	nop
 8007ca0:	e004      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ca2:	bf00      	nop
 8007ca4:	e002      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10b      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cc4:	4a9d      	ldr	r2, [pc, #628]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f002 0308 	and.w	r3, r2, #8
 8007ce0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	d01e      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	3328      	adds	r3, #40	@ 0x28
 8007d08:	2102      	movs	r1, #2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 fd26 	bl	800975c <RCCEx_PLL3_Config>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d1c:	4b87      	ldr	r3, [pc, #540]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d2c:	4a83      	ldr	r2, [pc, #524]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f002 0310 	and.w	r3, r2, #16
 8007d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d42:	2300      	movs	r3, #0
 8007d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	d01e      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	3328      	adds	r3, #40	@ 0x28
 8007d66:	2102      	movs	r1, #2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fcf7 	bl	800975c <RCCEx_PLL3_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d7a:	4b70      	ldr	r3, [pc, #448]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007da0:	2300      	movs	r3, #0
 8007da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007da6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007daa:	460b      	mov	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	d03e      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dbc:	d022      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007dbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc2:	d81b      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dcc:	d00b      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007dce:	e015      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fc0d 	bl	80095f8 <RCCEx_PLL2_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007de4:	e00f      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	3328      	adds	r3, #40	@ 0x28
 8007dec:	2102      	movs	r1, #2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fcb4 	bl	800975c <RCCEx_PLL3_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007dfa:	e004      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e02:	e000      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e1e:	4a47      	ldr	r2, [pc, #284]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e24:	e003      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e44:	460b      	mov	r3, r1
 8007e46:	4313      	orrs	r3, r2
 8007e48:	d03b      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e56:	d01f      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007e58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e5c:	d818      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e68:	d007      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007e6a:	e011      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b33      	ldr	r3, [pc, #204]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a32      	ldr	r2, [pc, #200]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e78:	e00f      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	3328      	adds	r3, #40	@ 0x28
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fc6a 	bl	800975c <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e8e:	e004      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e96:	e000      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ea2:	4b26      	ldr	r3, [pc, #152]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb2:	4a22      	ldr	r2, [pc, #136]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eb8:	e003      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ece:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ed4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4313      	orrs	r3, r2
 8007edc:	d034      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eec:	d007      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007eee:	e011      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4b12      	ldr	r3, [pc, #72]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef4:	4a11      	ldr	r2, [pc, #68]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007efc:	e00e      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	3308      	adds	r3, #8
 8007f04:	2102      	movs	r1, #2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fb76 	bl	80095f8 <RCCEx_PLL2_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f24:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f32:	4a02      	ldr	r2, [pc, #8]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f38:	e006      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f56:	2300      	movs	r3, #0
 8007f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d00c      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f68:	3328      	adds	r3, #40	@ 0x28
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fbf5 	bl	800975c <RCCEx_PLL3_Config>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f94:	460b      	mov	r3, r1
 8007f96:	4313      	orrs	r3, r2
 8007f98:	d038      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fa6:	d018      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fac:	d811      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb2:	d014      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb8:	d80b      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d011      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc2:	d106      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4bc3      	ldr	r3, [pc, #780]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	4ac2      	ldr	r2, [pc, #776]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fd8:	e004      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10b      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fec:	4bb9      	ldr	r3, [pc, #740]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ffc:	4ab5      	ldr	r2, [pc, #724]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6553      	str	r3, [r2, #84]	@ 0x54
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800801a:	2300      	movs	r3, #0
 800801c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800801e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d009      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008028:	4baa      	ldr	r3, [pc, #680]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008036:	4aa7      	ldr	r2, [pc, #668]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008038:	430b      	orrs	r3, r1
 800803a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008048:	653b      	str	r3, [r7, #80]	@ 0x50
 800804a:	2300      	movs	r3, #0
 800804c:	657b      	str	r3, [r7, #84]	@ 0x54
 800804e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d00a      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008058:	4b9e      	ldr	r3, [pc, #632]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008064:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008068:	4a9a      	ldr	r2, [pc, #616]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800806a:	430b      	orrs	r3, r1
 800806c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800807a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800807c:	2300      	movs	r3, #0
 800807e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008080:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800808a:	4b92      	ldr	r3, [pc, #584]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008098:	4a8e      	ldr	r2, [pc, #568]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800809a:	430b      	orrs	r3, r1
 800809c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80080aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ac:	2300      	movs	r3, #0
 80080ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80080b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080b4:	460b      	mov	r3, r1
 80080b6:	4313      	orrs	r3, r2
 80080b8:	d00e      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080ba:	4b86      	ldr	r3, [pc, #536]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	4a85      	ldr	r2, [pc, #532]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080c4:	6113      	str	r3, [r2, #16]
 80080c6:	4b83      	ldr	r3, [pc, #524]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c8:	6919      	ldr	r1, [r3, #16]
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80080d2:	4a80      	ldr	r2, [pc, #512]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080e6:	2300      	movs	r3, #0
 80080e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80080ee:	460b      	mov	r3, r1
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080f4:	4b77      	ldr	r3, [pc, #476]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008102:	4a74      	ldr	r2, [pc, #464]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008104:	430b      	orrs	r3, r1
 8008106:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008114:	633b      	str	r3, [r7, #48]	@ 0x30
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d00a      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008124:	4b6b      	ldr	r3, [pc, #428]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008128:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008134:	4a67      	ldr	r2, [pc, #412]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008136:	430b      	orrs	r3, r1
 8008138:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	2100      	movs	r1, #0
 8008144:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800814c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008150:	460b      	mov	r3, r1
 8008152:	4313      	orrs	r3, r2
 8008154:	d011      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	3308      	adds	r3, #8
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fa4a 	bl	80095f8 <RCCEx_PLL2_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800816a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	2100      	movs	r1, #0
 8008184:	6239      	str	r1, [r7, #32]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
 800818c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008190:	460b      	mov	r3, r1
 8008192:	4313      	orrs	r3, r2
 8008194:	d011      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	3308      	adds	r3, #8
 800819c:	2101      	movs	r1, #1
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fa2a 	bl	80095f8 <RCCEx_PLL2_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	2100      	movs	r1, #0
 80081c4:	61b9      	str	r1, [r7, #24]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081d0:	460b      	mov	r3, r1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d011      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081da:	3308      	adds	r3, #8
 80081dc:	2102      	movs	r1, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 fa0a 	bl	80095f8 <RCCEx_PLL2_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	2100      	movs	r1, #0
 8008204:	6139      	str	r1, [r7, #16]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008210:	460b      	mov	r3, r1
 8008212:	4313      	orrs	r3, r2
 8008214:	d011      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	3328      	adds	r3, #40	@ 0x28
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fa9c 	bl	800975c <RCCEx_PLL3_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800822a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	2100      	movs	r1, #0
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008250:	460b      	mov	r3, r1
 8008252:	4313      	orrs	r3, r2
 8008254:	d011      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825a:	3328      	adds	r3, #40	@ 0x28
 800825c:	2101      	movs	r1, #1
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fa7c 	bl	800975c <RCCEx_PLL3_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800826a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	2100      	movs	r1, #0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008290:	460b      	mov	r3, r1
 8008292:	4313      	orrs	r3, r2
 8008294:	d011      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829a:	3328      	adds	r3, #40	@ 0x28
 800829c:	2102      	movs	r1, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fa5c 	bl	800975c <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80082ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80082ce:	46bd      	mov	sp, r7
 80082d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082d4:	58024400 	.word	0x58024400

080082d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b090      	sub	sp, #64	@ 0x40
 80082dc:	af00      	add	r7, sp, #0
 80082de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80082ea:	430b      	orrs	r3, r1
 80082ec:	f040 8094 	bne.w	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80082f0:	4b9e      	ldr	r3, [pc, #632]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	f200 8087 	bhi.w	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800831d 	.word	0x0800831d
 800830c:	08008345 	.word	0x08008345
 8008310:	0800836d 	.word	0x0800836d
 8008314:	08008409 	.word	0x08008409
 8008318:	08008395 	.word	0x08008395
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800831c:	4b93      	ldr	r3, [pc, #588]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008328:	d108      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800832a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f810 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008338:	f000 bd45 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008340:	f000 bd41 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008344:	4b89      	ldr	r3, [pc, #548]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008350:	d108      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008352:	f107 0318 	add.w	r3, r7, #24
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fd54 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008360:	f000 bd31 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008368:	f000 bd2d 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800836c:	4b7f      	ldr	r3, [pc, #508]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008378:	d108      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800837a:	f107 030c 	add.w	r3, r7, #12
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fe94 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008388:	f000 bd1d 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008390:	f000 bd19 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008394:	4b75      	ldr	r3, [pc, #468]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800839e:	4b73      	ldr	r3, [pc, #460]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d10c      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80083aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b0:	4b6e      	ldr	r3, [pc, #440]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	08db      	lsrs	r3, r3, #3
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	4a6d      	ldr	r2, [pc, #436]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c2:	e01f      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083c4:	4b69      	ldr	r3, [pc, #420]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d0:	d106      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80083d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083d8:	d102      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083da:	4b66      	ldr	r3, [pc, #408]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083de:	e011      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083e0:	4b62      	ldr	r3, [pc, #392]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ec:	d106      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80083ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f4:	d102      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083f6:	4b60      	ldr	r3, [pc, #384]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fa:	e003      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008400:	f000 bce1 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008404:	f000 bcdf 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008408:	4b5c      	ldr	r3, [pc, #368]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840c:	f000 bcdb 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008414:	f000 bcd7 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008420:	430b      	orrs	r3, r1
 8008422:	f040 80ad 	bne.w	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008426:	4b51      	ldr	r3, [pc, #324]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800842e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008436:	d056      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843e:	f200 8090 	bhi.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	2bc0      	cmp	r3, #192	@ 0xc0
 8008446:	f000 8088 	beq.w	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	2bc0      	cmp	r3, #192	@ 0xc0
 800844e:	f200 8088 	bhi.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	2b80      	cmp	r3, #128	@ 0x80
 8008456:	d032      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	2b80      	cmp	r3, #128	@ 0x80
 800845c:	f200 8081 	bhi.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	2b40      	cmp	r3, #64	@ 0x40
 800846a:	d014      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800846c:	e079      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800846e:	4b3f      	ldr	r3, [pc, #252]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800847a:	d108      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800847c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008480:	4618      	mov	r0, r3
 8008482:	f000 ff67 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800848a:	f000 bc9c 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008492:	f000 bc98 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008496:	4b35      	ldr	r3, [pc, #212]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800849e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084a2:	d108      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a4:	f107 0318 	add.w	r3, r7, #24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fcab 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b2:	f000 bc88 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ba:	f000 bc84 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084be:	4b2b      	ldr	r3, [pc, #172]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ca:	d108      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fdeb 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084da:	f000 bc74 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e2:	f000 bc70 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e6:	4b21      	ldr	r3, [pc, #132]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084f0:	4b1e      	ldr	r3, [pc, #120]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d10c      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80084fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008502:	4b1a      	ldr	r3, [pc, #104]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	08db      	lsrs	r3, r3, #3
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	4a18      	ldr	r2, [pc, #96]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800850e:	fa22 f303 	lsr.w	r3, r2, r3
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008514:	e01f      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008516:	4b15      	ldr	r3, [pc, #84]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008522:	d106      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852a:	d102      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800852c:	4b11      	ldr	r3, [pc, #68]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008530:	e011      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008532:	4b0e      	ldr	r3, [pc, #56]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800853e:	d106      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008546:	d102      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008548:	4b0b      	ldr	r3, [pc, #44]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854c:	e003      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008552:	f000 bc38 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008556:	f000 bc36 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800855a:	4b08      	ldr	r3, [pc, #32]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855e:	f000 bc32 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008566:	f000 bc2e 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800856a:	bf00      	nop
 800856c:	58024400 	.word	0x58024400
 8008570:	03d09000 	.word	0x03d09000
 8008574:	003d0900 	.word	0x003d0900
 8008578:	017d7840 	.word	0x017d7840
 800857c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008584:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008588:	430b      	orrs	r3, r1
 800858a:	f040 809c 	bne.w	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800858e:	4b9e      	ldr	r3, [pc, #632]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008592:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800859e:	d054      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80085a6:	f200 808b 	bhi.w	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80085b0:	f000 8083 	beq.w	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80085ba:	f200 8081 	bhi.w	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085c4:	d02f      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085cc:	d878      	bhi.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085da:	d012      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80085dc:	e070      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085de:	4b8a      	ldr	r3, [pc, #552]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ea:	d107      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 feaf 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fa:	e3e4      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008600:	e3e1      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008602:	4b81      	ldr	r3, [pc, #516]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800860a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800860e:	d107      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008610:	f107 0318 	add.w	r3, r7, #24
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fbf5 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861e:	e3d2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008624:	e3cf      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008626:	4b78      	ldr	r3, [pc, #480]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fd37 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008642:	e3c0      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008648:	e3bd      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800864a:	4b6f      	ldr	r3, [pc, #444]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800864c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800864e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008652:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008654:	4b6c      	ldr	r3, [pc, #432]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b04      	cmp	r3, #4
 800865e:	d10c      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008666:	4b68      	ldr	r3, [pc, #416]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	08db      	lsrs	r3, r3, #3
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	4a66      	ldr	r2, [pc, #408]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008672:	fa22 f303 	lsr.w	r3, r2, r3
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008678:	e01e      	b.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800867a:	4b63      	ldr	r3, [pc, #396]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008686:	d106      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800868e:	d102      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008690:	4b5f      	ldr	r3, [pc, #380]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008694:	e010      	b.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008696:	4b5c      	ldr	r3, [pc, #368]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800869e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086a2:	d106      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086ac:	4b59      	ldr	r3, [pc, #356]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086b6:	e386      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086b8:	e385      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086ba:	4b57      	ldr	r3, [pc, #348]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086be:	e382      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c4:	e37f      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80086c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80086ce:	430b      	orrs	r3, r1
 80086d0:	f040 80a7 	bne.w	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80086d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086e4:	d055      	beq.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086ec:	f200 8096 	bhi.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086f6:	f000 8084 	beq.w	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008700:	f200 808c 	bhi.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800870a:	d030      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008712:	f200 8083 	bhi.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008722:	d012      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008724:	e07a      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008726:	4b38      	ldr	r3, [pc, #224]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008732:	d107      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fe0b 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008742:	e340      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	e33d      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800874a:	4b2f      	ldr	r3, [pc, #188]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008756:	d107      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008758:	f107 0318 	add.w	r3, r7, #24
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fb51 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008766:	e32e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876c:	e32b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800876e:	4b26      	ldr	r3, [pc, #152]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800877a:	d107      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fc93 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878a:	e31c      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008790:	e319      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008792:	4b1d      	ldr	r3, [pc, #116]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800879c:	4b1a      	ldr	r3, [pc, #104]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d10c      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ae:	4b16      	ldr	r3, [pc, #88]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	4a14      	ldr	r2, [pc, #80]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087c0:	e01e      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087c2:	4b11      	ldr	r3, [pc, #68]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ce:	d106      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80087d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087d6:	d102      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087dc:	e010      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087de:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ea:	d106      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f2:	d102      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087f4:	4b07      	ldr	r3, [pc, #28]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087fe:	e2e2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008800:	e2e1      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008802:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e2de      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	003d0900 	.word	0x003d0900
 8008814:	017d7840 	.word	0x017d7840
 8008818:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008820:	e2d1      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008826:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800882a:	430b      	orrs	r3, r1
 800882c:	f040 809c 	bne.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008830:	4b93      	ldr	r3, [pc, #588]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008838:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008840:	d054      	beq.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008848:	f200 808b 	bhi.w	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008852:	f000 8083 	beq.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800885c:	f200 8081 	bhi.w	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008866:	d02f      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800886e:	d878      	bhi.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800887c:	d012      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800887e:	e070      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008880:	4b7f      	ldr	r3, [pc, #508]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800888c:	d107      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fd5e 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889c:	e293      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a2:	e290      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a4:	4b76      	ldr	r3, [pc, #472]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b2:	f107 0318 	add.w	r3, r7, #24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 faa4 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c0:	e281      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c6:	e27e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088c8:	4b6d      	ldr	r3, [pc, #436]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d4:	d107      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d6:	f107 030c 	add.w	r3, r7, #12
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fbe6 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e4:	e26f      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ea:	e26c      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088ec:	4b64      	ldr	r3, [pc, #400]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088f6:	4b62      	ldr	r3, [pc, #392]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d10c      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008908:	4b5d      	ldr	r3, [pc, #372]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a5c      	ldr	r2, [pc, #368]	@ (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800891a:	e01e      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800891c:	4b58      	ldr	r3, [pc, #352]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008928:	d106      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800892a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008930:	d102      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008932:	4b55      	ldr	r3, [pc, #340]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008936:	e010      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008938:	4b51      	ldr	r3, [pc, #324]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008944:	d106      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800894e:	4b4f      	ldr	r3, [pc, #316]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008952:	e002      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008958:	e235      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800895a:	e234      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800895c:	4b4c      	ldr	r3, [pc, #304]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008960:	e231      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008966:	e22e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008970:	430b      	orrs	r3, r1
 8008972:	f040 808f 	bne.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008976:	4b42      	ldr	r3, [pc, #264]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800897e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008986:	d06b      	beq.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800898e:	d874      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008996:	d056      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800899e:	d86c      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089a6:	d03b      	beq.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089ae:	d864      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b6:	d021      	beq.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80089b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089be:	d85c      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089cc:	d004      	beq.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80089ce:	e054      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80089d0:	f7fe fa0a 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 80089d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089d6:	e1f6      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089d8:	4b29      	ldr	r3, [pc, #164]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e4:	d107      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e6:	f107 0318 	add.w	r3, r7, #24
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fa0a 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f4:	e1e7      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fa:	e1e4      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089fc:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a08:	d107      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0a:	f107 030c 	add.w	r3, r7, #12
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fb4c 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a18:	e1d5      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1e:	e1d2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a20:	4b17      	ldr	r3, [pc, #92]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d109      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a2c:	4b14      	ldr	r3, [pc, #80]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	08db      	lsrs	r3, r3, #3
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	4a13      	ldr	r2, [pc, #76]	@ (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3e:	e1c2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a44:	e1bf      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a46:	4b0e      	ldr	r3, [pc, #56]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a52:	d102      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a58:	e1b5      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5e:	e1b2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a60:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a6c:	d102      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008a6e:	4b07      	ldr	r3, [pc, #28]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a72:	e1a8      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e1a5      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7e:	e1a2      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a80:	58024400 	.word	0x58024400
 8008a84:	03d09000 	.word	0x03d09000
 8008a88:	003d0900 	.word	0x003d0900
 8008a8c:	017d7840 	.word	0x017d7840
 8008a90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	d173      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008aa8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab0:	d02f      	beq.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab8:	d863      	bhi.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac6:	d012      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008ac8:	e05b      	b.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aca:	4b92      	ldr	r3, [pc, #584]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ad6:	d107      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad8:	f107 0318 	add.w	r3, r7, #24
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f991 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae6:	e16e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aec:	e16b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aee:	4b89      	ldr	r3, [pc, #548]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008afa:	d107      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fad3 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b0a:	e15c      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b10:	e159      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b12:	4b80      	ldr	r3, [pc, #512]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b1c:	4b7d      	ldr	r3, [pc, #500]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d10c      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b2e:	4b79      	ldr	r3, [pc, #484]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	4a77      	ldr	r2, [pc, #476]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b40:	e01e      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b42:	4b74      	ldr	r3, [pc, #464]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b4e:	d106      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b56:	d102      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b58:	4b70      	ldr	r3, [pc, #448]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b5c:	e010      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b6a:	d106      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b72:	d102      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b74:	4b6a      	ldr	r3, [pc, #424]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b78:	e002      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b7e:	e122      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b80:	e121      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b86:	e11e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b90:	430b      	orrs	r3, r1
 8008b92:	d133      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b94:	4b5f      	ldr	r3, [pc, #380]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008baa:	d012      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008bac:	e023      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bae:	4b59      	ldr	r3, [pc, #356]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bba:	d107      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fbc7 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bca:	e0fc      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd0:	e0f9      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bd2:	4b50      	ldr	r3, [pc, #320]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f90d 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bee:	e0ea      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e0e7      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfa:	e0e4      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008c04:	430b      	orrs	r3, r1
 8008c06:	f040 808d 	bne.w	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c0a:	4b42      	ldr	r3, [pc, #264]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c1a:	d06b      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c22:	d874      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2a:	d056      	beq.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c32:	d86c      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c3a:	d03b      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c42:	d864      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c4a:	d021      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c52:	d85c      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c60:	d004      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008c62:	e054      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c64:	f000 f8b8 	bl	8008dd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c6a:	e0ac      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c6c:	4b29      	ldr	r3, [pc, #164]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c78:	d107      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7a:	f107 0318 	add.w	r3, r7, #24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f8c0 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c88:	e09d      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8e:	e09a      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c9c:	d107      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fa02 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cac:	e08b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb2:	e088      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb4:	4b17      	ldr	r3, [pc, #92]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cc0:	4b14      	ldr	r3, [pc, #80]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a13      	ldr	r2, [pc, #76]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd2:	e078      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd8:	e075      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cda:	4b0e      	ldr	r3, [pc, #56]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce6:	d102      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cec:	e06b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf2:	e068      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf4:	4b07      	ldr	r3, [pc, #28]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d00:	d102      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008d02:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d06:	e05e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e05b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d12:	e058      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d14:	58024400 	.word	0x58024400
 8008d18:	03d09000 	.word	0x03d09000
 8008d1c:	003d0900 	.word	0x003d0900
 8008d20:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d28:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	d148      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008d30:	4b27      	ldr	r3, [pc, #156]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d40:	d02a      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d48:	d838      	bhi.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d56:	d00d      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008d58:	e030      	b.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d66:	d102      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008d68:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d6c:	e02b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d72:	e028      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d80:	d107      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fae4 	bl	8009354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d90:	e019      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d96:	e016      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d98:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008da4:	d107      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da6:	f107 0318 	add.w	r3, r7, #24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 f82a 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008db4:	e007      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dba:	e004      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e001      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3740      	adds	r7, #64	@ 0x40
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	017d7840 	.word	0x017d7840

08008dd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ddc:	f7fd ffd4 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8008de0:	4602      	mov	r2, r0
 8008de2:	4b06      	ldr	r3, [pc, #24]	@ (8008dfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	091b      	lsrs	r3, r3, #4
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	4904      	ldr	r1, [pc, #16]	@ (8008e00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008dee:	5ccb      	ldrb	r3, [r1, r3]
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	0801b284 	.word	0x0801b284

08008e04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b089      	sub	sp, #36	@ 0x24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e0c:	4ba1      	ldr	r3, [pc, #644]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008e16:	4b9f      	ldr	r3, [pc, #636]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1a:	0b1b      	lsrs	r3, r3, #12
 8008e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e22:	4b9c      	ldr	r3, [pc, #624]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008e2e:	4b99      	ldr	r3, [pc, #612]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e32:	08db      	lsrs	r3, r3, #3
 8008e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8111 	beq.w	8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	f000 8083 	beq.w	8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	f200 80a1 	bhi.w	8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d056      	beq.n	8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e6e:	e099      	b.n	8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e70:	4b88      	ldr	r3, [pc, #544]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02d      	beq.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e7c:	4b85      	ldr	r3, [pc, #532]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	08db      	lsrs	r3, r3, #3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	4a84      	ldr	r2, [pc, #528]	@ (8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea6:	4b7b      	ldr	r3, [pc, #492]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ed6:	e087      	b.n	8008fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eea:	4b6a      	ldr	r3, [pc, #424]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f1a:	e065      	b.n	8008fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2e:	4b59      	ldr	r3, [pc, #356]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f5e:	e043      	b.n	8008fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f72:	4b48      	ldr	r3, [pc, #288]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fa2:	e021      	b.n	8008fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb6:	4b37      	ldr	r3, [pc, #220]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fe6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fec:	0a5b      	lsrs	r3, r3, #9
 8008fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009002:	edd7 6a07 	vldr	s13, [r7, #28]
 8009006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800900e:	ee17 2a90 	vmov	r2, s15
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800902c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009030:	edd7 6a07 	vldr	s13, [r7, #28]
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800903c:	ee17 2a90 	vmov	r2, s15
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009044:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009048:	0e1b      	lsrs	r3, r3, #24
 800904a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800905a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906a:	ee17 2a90 	vmov	r2, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009072:	e008      	b.n	8009086 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
}
 8009086:	bf00      	nop
 8009088:	3724      	adds	r7, #36	@ 0x24
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	03d09000 	.word	0x03d09000
 800909c:	46000000 	.word	0x46000000
 80090a0:	4c742400 	.word	0x4c742400
 80090a4:	4a742400 	.word	0x4a742400
 80090a8:	4bbebc20 	.word	0x4bbebc20

080090ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b089      	sub	sp, #36	@ 0x24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090b4:	4ba1      	ldr	r3, [pc, #644]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80090be:	4b9f      	ldr	r3, [pc, #636]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	0d1b      	lsrs	r3, r3, #20
 80090c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090ca:	4b9c      	ldr	r3, [pc, #624]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	0a1b      	lsrs	r3, r3, #8
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80090d6:	4b99      	ldr	r3, [pc, #612]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	fb02 f303 	mul.w	r3, r2, r3
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8111 	beq.w	800931c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f000 8083 	beq.w	8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b02      	cmp	r3, #2
 8009106:	f200 80a1 	bhi.w	800924c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d056      	beq.n	80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009116:	e099      	b.n	800924c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009118:	4b88      	ldr	r3, [pc, #544]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d02d      	beq.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009124:	4b85      	ldr	r3, [pc, #532]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	08db      	lsrs	r3, r3, #3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	4a84      	ldr	r2, [pc, #528]	@ (8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b7b      	ldr	r3, [pc, #492]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800917e:	e087      	b.n	8009290 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800918e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009192:	4b6a      	ldr	r3, [pc, #424]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c2:	e065      	b.n	8009290 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800934c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d6:	4b59      	ldr	r3, [pc, #356]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009206:	e043      	b.n	8009290 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009350 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b48      	ldr	r3, [pc, #288]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800921c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922a:	ed97 6a03 	vldr	s12, [r7, #12]
 800922e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924a:	e021      	b.n	8009290 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800934c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800925a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925e:	4b37      	ldr	r3, [pc, #220]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009272:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800928e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009290:	4b2a      	ldr	r3, [pc, #168]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009294:	0a5b      	lsrs	r3, r3, #9
 8009296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b6:	ee17 2a90 	vmov	r2, s15
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80092be:	4b1f      	ldr	r3, [pc, #124]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e4:	ee17 2a90 	vmov	r2, s15
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80092ec:	4b13      	ldr	r3, [pc, #76]	@ (800933c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009306:	edd7 6a07 	vldr	s13, [r7, #28]
 800930a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800930e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009312:	ee17 2a90 	vmov	r2, s15
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800931a:	e008      	b.n	800932e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	609a      	str	r2, [r3, #8]
}
 800932e:	bf00      	nop
 8009330:	3724      	adds	r7, #36	@ 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	58024400 	.word	0x58024400
 8009340:	03d09000 	.word	0x03d09000
 8009344:	46000000 	.word	0x46000000
 8009348:	4c742400 	.word	0x4c742400
 800934c:	4a742400 	.word	0x4a742400
 8009350:	4bbebc20 	.word	0x4bbebc20

08009354 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009354:	b480      	push	{r7}
 8009356:	b089      	sub	sp, #36	@ 0x24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800935c:	4ba0      	ldr	r3, [pc, #640]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009366:	4b9e      	ldr	r3, [pc, #632]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009370:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009372:	4b9b      	ldr	r3, [pc, #620]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800937c:	4b98      	ldr	r3, [pc, #608]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009380:	08db      	lsrs	r3, r3, #3
 8009382:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009394:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8111 	beq.w	80095c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	f000 8083 	beq.w	80094ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	f200 80a1 	bhi.w	80094f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d056      	beq.n	800946a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80093bc:	e099      	b.n	80094f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093be:	4b88      	ldr	r3, [pc, #544]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d02d      	beq.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093ca:	4b85      	ldr	r3, [pc, #532]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	08db      	lsrs	r3, r3, #3
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	4a83      	ldr	r2, [pc, #524]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80093d6:	fa22 f303 	lsr.w	r3, r2, r3
 80093da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	ee07 3a90 	vmov	s15, r3
 80093ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f4:	4b7a      	ldr	r3, [pc, #488]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009404:	ed97 6a03 	vldr	s12, [r7, #12]
 8009408:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800940c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009420:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009424:	e087      	b.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009430:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009438:	4b69      	ldr	r3, [pc, #420]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800943a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009448:	ed97 6a03 	vldr	s12, [r7, #12]
 800944c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009468:	e065      	b.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009474:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80095f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947c:	4b58      	ldr	r3, [pc, #352]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009490:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ac:	e043      	b.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	ee07 3a90 	vmov	s15, r3
 80094b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80095f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80094bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c0:	4b47      	ldr	r3, [pc, #284]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c8:	ee07 3a90 	vmov	s15, r3
 80094cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f0:	e021      	b.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009504:	4b36      	ldr	r3, [pc, #216]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950c:	ee07 3a90 	vmov	s15, r3
 8009510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009514:	ed97 6a03 	vldr	s12, [r7, #12]
 8009518:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800951c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009534:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009536:	4b2a      	ldr	r3, [pc, #168]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953a:	0a5b      	lsrs	r3, r3, #9
 800953c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800954c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009550:	edd7 6a07 	vldr	s13, [r7, #28]
 8009554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955c:	ee17 2a90 	vmov	r2, s15
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009564:	4b1e      	ldr	r3, [pc, #120]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800957a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800957e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958a:	ee17 2a90 	vmov	r2, s15
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009592:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80095b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b8:	ee17 2a90 	vmov	r2, s15
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095c0:	e008      	b.n	80095d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	609a      	str	r2, [r3, #8]
}
 80095d4:	bf00      	nop
 80095d6:	3724      	adds	r7, #36	@ 0x24
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	58024400 	.word	0x58024400
 80095e4:	03d09000 	.word	0x03d09000
 80095e8:	46000000 	.word	0x46000000
 80095ec:	4c742400 	.word	0x4c742400
 80095f0:	4a742400 	.word	0x4a742400
 80095f4:	4bbebc20 	.word	0x4bbebc20

080095f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009606:	4b53      	ldr	r3, [pc, #332]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	2b03      	cmp	r3, #3
 8009610:	d101      	bne.n	8009616 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e099      	b.n	800974a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009616:	4b4f      	ldr	r3, [pc, #316]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a4e      	ldr	r2, [pc, #312]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800961c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009622:	f7f9 fa7f 	bl	8002b24 <HAL_GetTick>
 8009626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009628:	e008      	b.n	800963c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800962a:	f7f9 fa7b 	bl	8002b24 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d901      	bls.n	800963c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e086      	b.n	800974a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800963c:	4b45      	ldr	r3, [pc, #276]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1f0      	bne.n	800962a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009648:	4b42      	ldr	r3, [pc, #264]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	031b      	lsls	r3, r3, #12
 8009656:	493f      	ldr	r1, [pc, #252]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009658:	4313      	orrs	r3, r2
 800965a:	628b      	str	r3, [r1, #40]	@ 0x28
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	3b01      	subs	r3, #1
 8009662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	3b01      	subs	r3, #1
 800966c:	025b      	lsls	r3, r3, #9
 800966e:	b29b      	uxth	r3, r3
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	3b01      	subs	r3, #1
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800967e:	431a      	orrs	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	3b01      	subs	r3, #1
 8009686:	061b      	lsls	r3, r3, #24
 8009688:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800968c:	4931      	ldr	r1, [pc, #196]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800968e:	4313      	orrs	r3, r2
 8009690:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009692:	4b30      	ldr	r3, [pc, #192]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009696:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	492d      	ldr	r1, [pc, #180]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80096a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	f023 0220 	bic.w	r2, r3, #32
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	4928      	ldr	r1, [pc, #160]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096b6:	4b27      	ldr	r3, [pc, #156]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	4a26      	ldr	r2, [pc, #152]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096bc:	f023 0310 	bic.w	r3, r3, #16
 80096c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096c2:	4b24      	ldr	r3, [pc, #144]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096c6:	4b24      	ldr	r3, [pc, #144]	@ (8009758 <RCCEx_PLL2_Config+0x160>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	69d2      	ldr	r2, [r2, #28]
 80096ce:	00d2      	lsls	r2, r2, #3
 80096d0:	4920      	ldr	r1, [pc, #128]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	4a1e      	ldr	r2, [pc, #120]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096dc:	f043 0310 	orr.w	r3, r3, #16
 80096e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ec:	4a19      	ldr	r2, [pc, #100]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096f4:	e00f      	b.n	8009716 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d106      	bne.n	800970a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096fc:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 80096fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009700:	4a14      	ldr	r2, [pc, #80]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009708:	e005      	b.n	8009716 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800970a:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	4a11      	ldr	r2, [pc, #68]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009710:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009714:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009716:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a0e      	ldr	r2, [pc, #56]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800971c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009722:	f7f9 f9ff 	bl	8002b24 <HAL_GetTick>
 8009726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009728:	e008      	b.n	800973c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800972a:	f7f9 f9fb 	bl	8002b24 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d901      	bls.n	800973c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e006      	b.n	800974a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800973c:	4b05      	ldr	r3, [pc, #20]	@ (8009754 <RCCEx_PLL2_Config+0x15c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f0      	beq.n	800972a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	58024400 	.word	0x58024400
 8009758:	ffff0007 	.word	0xffff0007

0800975c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800976a:	4b53      	ldr	r3, [pc, #332]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800976c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b03      	cmp	r3, #3
 8009774:	d101      	bne.n	800977a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e099      	b.n	80098ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800977a:	4b4f      	ldr	r3, [pc, #316]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a4e      	ldr	r2, [pc, #312]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009786:	f7f9 f9cd 	bl	8002b24 <HAL_GetTick>
 800978a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800978c:	e008      	b.n	80097a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800978e:	f7f9 f9c9 	bl	8002b24 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b02      	cmp	r3, #2
 800979a:	d901      	bls.n	80097a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e086      	b.n	80098ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80097a0:	4b45      	ldr	r3, [pc, #276]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f0      	bne.n	800978e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80097ac:	4b42      	ldr	r3, [pc, #264]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	051b      	lsls	r3, r3, #20
 80097ba:	493f      	ldr	r1, [pc, #252]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	628b      	str	r3, [r1, #40]	@ 0x28
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	025b      	lsls	r3, r3, #9
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	3b01      	subs	r3, #1
 80097dc:	041b      	lsls	r3, r3, #16
 80097de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	061b      	lsls	r3, r3, #24
 80097ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097f0:	4931      	ldr	r1, [pc, #196]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097f6:	4b30      	ldr	r3, [pc, #192]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	492d      	ldr	r1, [pc, #180]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009804:	4313      	orrs	r3, r2
 8009806:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009808:	4b2b      	ldr	r3, [pc, #172]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	4928      	ldr	r1, [pc, #160]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800981a:	4b27      	ldr	r3, [pc, #156]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4a26      	ldr	r2, [pc, #152]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009826:	4b24      	ldr	r3, [pc, #144]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800982a:	4b24      	ldr	r3, [pc, #144]	@ (80098bc <RCCEx_PLL3_Config+0x160>)
 800982c:	4013      	ands	r3, r2
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	69d2      	ldr	r2, [r2, #28]
 8009832:	00d2      	lsls	r2, r2, #3
 8009834:	4920      	ldr	r1, [pc, #128]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009836:	4313      	orrs	r3, r2
 8009838:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800983a:	4b1f      	ldr	r3, [pc, #124]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	4a1e      	ldr	r2, [pc, #120]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d106      	bne.n	800985a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800984c:	4b1a      	ldr	r3, [pc, #104]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800984e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009850:	4a19      	ldr	r2, [pc, #100]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009852:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009856:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009858:	e00f      	b.n	800987a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d106      	bne.n	800986e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009860:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	4a14      	ldr	r2, [pc, #80]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009866:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800986a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800986c:	e005      	b.n	800987a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800986e:	4b12      	ldr	r3, [pc, #72]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009872:	4a11      	ldr	r2, [pc, #68]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009874:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009878:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800987a:	4b0f      	ldr	r3, [pc, #60]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a0e      	ldr	r2, [pc, #56]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 8009880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009886:	f7f9 f94d 	bl	8002b24 <HAL_GetTick>
 800988a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800988c:	e008      	b.n	80098a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800988e:	f7f9 f949 	bl	8002b24 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b02      	cmp	r3, #2
 800989a:	d901      	bls.n	80098a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e006      	b.n	80098ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80098a0:	4b05      	ldr	r3, [pc, #20]	@ (80098b8 <RCCEx_PLL3_Config+0x15c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0f0      	beq.n	800988e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	58024400 	.word	0x58024400
 80098bc:	ffff0007 	.word	0xffff0007

080098c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	@ 0x28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e075      	b.n	80099be <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7f8 f92b 	bl	8001b40 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2204      	movs	r2, #4
 80098ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f868 	bl	80099c8 <HAL_SD_InitCard>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e05d      	b.n	80099be <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fdaf 	bl	800a46c <HAL_SD_GetCardStatus>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e052      	b.n	80099be <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009918:	7e3b      	ldrb	r3, [r7, #24]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800991e:	7e7b      	ldrb	r3, [r7, #25]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	2b01      	cmp	r3, #1
 800992a:	d10a      	bne.n	8009942 <HAL_SD_Init+0x82>
 800992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <HAL_SD_Init+0x78>
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800993e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009940:	e00b      	b.n	800995a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009946:	2b01      	cmp	r3, #1
 8009948:	d104      	bne.n	8009954 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009950:	659a      	str	r2, [r3, #88]	@ 0x58
 8009952:	e002      	b.n	800995a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fe6d 	bl	800a640 <HAL_SD_ConfigWideBusOperation>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e026      	b.n	80099be <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009970:	f7f9 f8d8 	bl	8002b24 <HAL_GetTick>
 8009974:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009976:	e011      	b.n	800999c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009978:	f7f9 f8d4 	bl	8002b24 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009986:	d109      	bne.n	800999c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800998e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e010      	b.n	80099be <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 ff61 	bl	800a864 <HAL_SD_GetCardState>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d1e7      	bne.n	8009978 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3728      	adds	r7, #40	@ 0x28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
	...

080099c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b08d      	sub	sp, #52	@ 0x34
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80099dc:	2300      	movs	r3, #0
 80099de:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80099e0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80099e4:	f04f 0100 	mov.w	r1, #0
 80099e8:	f7fe fc76 	bl	80082d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80099ec:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009a02:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e070      	b.n	8009aea <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	4a39      	ldr	r2, [pc, #228]	@ (8009af4 <HAL_SD_InitCard+0x12c>)
 8009a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a12:	091b      	lsrs	r3, r3, #4
 8009a14:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681c      	ldr	r4, [r3, #0]
 8009a1a:	466a      	mov	r2, sp
 8009a1c:	f107 0318 	add.w	r3, r7, #24
 8009a20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a24:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a28:	f107 030c 	add.w	r3, r7, #12
 8009a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f005 f86a 	bl	800eb08 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f005 f8ad 	bl	800eb98 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009a56:	4a28      	ldr	r2, [pc, #160]	@ (8009af8 <HAL_SD_InitCard+0x130>)
 8009a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5e:	3301      	adds	r3, #1
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f9 f86b 	bl	8002b3c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 ffea 	bl	800aa40 <SD_PowerON>
 8009a6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e02e      	b.n	8009aea <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 ff09 	bl	800a8a4 <SD_InitCard>
 8009a92:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e01b      	b.n	8009aea <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009aba:	4618      	mov	r0, r3
 8009abc:	f005 f902 	bl	800ecc4 <SDMMC_CmdBlockLength>
 8009ac0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00f      	beq.n	8009ae8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a0b      	ldr	r2, [pc, #44]	@ (8009afc <HAL_SD_InitCard+0x134>)
 8009ace:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e000      	b.n	8009aea <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	372c      	adds	r7, #44	@ 0x2c
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd90      	pop	{r4, r7, pc}
 8009af2:	bf00      	nop
 8009af4:	014f8b59 	.word	0x014f8b59
 8009af8:	00012110 	.word	0x00012110
 8009afc:	1fe00fff 	.word	0x1fe00fff

08009b00 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08c      	sub	sp, #48	@ 0x30
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d107      	bne.n	8009b28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e08d      	b.n	8009c44 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	f040 8086 	bne.w	8009c42 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	441a      	add	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d907      	bls.n	8009b5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e074      	b.n	8009c44 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	025a      	lsls	r2, r3, #9
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d002      	beq.n	8009b86 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8009b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b82:	025b      	lsls	r3, r3, #9
 8009b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b86:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	025b      	lsls	r3, r3, #9
 8009b90:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b92:	2390      	movs	r3, #144	@ 0x90
 8009b94:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b96:	2302      	movs	r3, #2
 8009b98:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f107 0210 	add.w	r2, r7, #16
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f005 f85d 	bl	800ec6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bc0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d90a      	bls.n	8009bee <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2282      	movs	r2, #130	@ 0x82
 8009bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009be4:	4618      	mov	r0, r3
 8009be6:	f005 f8b3 	bl	800ed50 <SDMMC_CmdReadMultiBlock>
 8009bea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009bec:	e009      	b.n	8009c02 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2281      	movs	r2, #129	@ 0x81
 8009bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f005 f885 	bl	800ed0a <SDMMC_CmdReadSingleBlock>
 8009c00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d012      	beq.n	8009c2e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8009c4c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009c0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c16:	431a      	orrs	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e00a      	b.n	8009c44 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e000      	b.n	8009c44 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009c42:	2302      	movs	r3, #2
  }
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3730      	adds	r7, #48	@ 0x30
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	1fe00fff 	.word	0x1fe00fff

08009c50 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08c      	sub	sp, #48	@ 0x30
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e08d      	b.n	8009d94 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	f040 8086 	bne.w	8009d92 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	441a      	add	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d907      	bls.n	8009caa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e074      	b.n	8009d94 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2203      	movs	r2, #3
 8009cae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	025a      	lsls	r2, r3, #9
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d002      	beq.n	8009cd6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8009cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd2:	025b      	lsls	r3, r3, #9
 8009cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cda:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	025b      	lsls	r3, r3, #9
 8009ce0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ce2:	2390      	movs	r3, #144	@ 0x90
 8009ce4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f107 0210 	add.w	r2, r7, #16
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f004 ffb5 	bl	800ec6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d10:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d90a      	bls.n	8009d3e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	22a0      	movs	r2, #160	@ 0xa0
 8009d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d34:	4618      	mov	r0, r3
 8009d36:	f005 f851 	bl	800eddc <SDMMC_CmdWriteMultiBlock>
 8009d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009d3c:	e009      	b.n	8009d52 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2290      	movs	r2, #144	@ 0x90
 8009d42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f005 f823 	bl	800ed96 <SDMMC_CmdWriteSingleBlock>
 8009d50:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d012      	beq.n	8009d7e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8009d9c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009d5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e00a      	b.n	8009d94 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8009d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d92:	2302      	movs	r3, #2
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3730      	adds	r7, #48	@ 0x30
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	1fe00fff 	.word	0x1fe00fff

08009da0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <HAL_SD_IRQHandler+0x2e>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f003 0308 	and.w	r3, r3, #8
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 f926 	bl	800b018 <SD_Read_IT>
 8009dcc:	e19a      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 80ac 	beq.w	8009f36 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009de6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	4b59      	ldr	r3, [pc, #356]	@ (8009f58 <HAL_SD_IRQHandler+0x1b8>)
 8009df4:	400b      	ands	r3, r1
 8009df6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009e06:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e16:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d038      	beq.n	8009e94 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <HAL_SD_IRQHandler+0x96>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d011      	beq.n	8009e5a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f004 fff2 	bl	800ee24 <SDMMC_CmdStopTransfer>
 8009e40:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f95b 	bl	800a110 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8009f5c <HAL_SD_IRQHandler+0x1bc>)
 8009e60:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d104      	bne.n	8009e84 <HAL_SD_IRQHandler+0xe4>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f005 fca5 	bl	800f7d4 <HAL_SD_RxCpltCallback>
 8009e8a:	e13b      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f005 fc97 	bl	800f7c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e92:	e137      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 8132 	beq.w	800a104 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2200      	movs	r2, #0
 8009eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <HAL_SD_IRQHandler+0x12c>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d011      	beq.n	8009ef0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f004 ffa7 	bl	800ee24 <SDMMC_CmdStopTransfer>
 8009ed6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f910 	bl	800a110 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <HAL_SD_IRQHandler+0x172>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f003 0320 	and.w	r3, r3, #32
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f005 fc54 	bl	800f7c0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d105      	bne.n	8009f2e <HAL_SD_IRQHandler+0x18e>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 80eb 	beq.w	800a104 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f005 fc50 	bl	800f7d4 <HAL_SD_RxCpltCallback>
}
 8009f34:	e0e6      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00d      	beq.n	8009f60 <HAL_SD_IRQHandler+0x1c0>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0308 	and.w	r3, r3, #8
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d008      	beq.n	8009f60 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 f8a8 	bl	800b0a4 <SD_Write_IT>
 8009f54:	e0d6      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
 8009f56:	bf00      	nop
 8009f58:	ffff3ec5 	.word	0xffff3ec5
 8009f5c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f66:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 809d 	beq.w	800a0aa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f82:	f043 0202 	orr.w	r2, r3, #2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9c:	f043 0208 	orr.w	r2, r3, #8
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	f043 0220 	orr.w	r2, r3, #32
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd0:	f043 0210 	orr.w	r2, r3, #16
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800a10c <HAL_SD_IRQHandler+0x36c>)
 8009fde:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ffe:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a00e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a01e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f004 fefd 	bl	800ee24 <SDMMC_CmdStopTransfer>
 800a02a:	4602      	mov	r2, r0
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a030:	431a      	orrs	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a044:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a04e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f851 	bl	800a110 <HAL_SD_ErrorCallback>
}
 800a06e:	e049      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a076:	2b00      	cmp	r3, #0
 800a078:	d044      	beq.n	800a104 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d040      	beq.n	800a104 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a090:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f834 	bl	800a110 <HAL_SD_ErrorCallback>
}
 800a0a8:	e02c      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d025      	beq.n	800a104 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10c      	bne.n	800a0ea <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 f84a 	bl	800b174 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a0e0:	e010      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 f832 	bl	800b14c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a0e8:	e00c      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f833 	bl	800b160 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a0fa:	e003      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 f81b 	bl	800b138 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a102:	e7ff      	b.n	800a104 <HAL_SD_IRQHandler+0x364>
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	18000f3a 	.word	0x18000f3a

0800a110 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a132:	0f9b      	lsrs	r3, r3, #30
 800a134:	b2da      	uxtb	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a13e:	0e9b      	lsrs	r3, r3, #26
 800a140:	b2db      	uxtb	r3, r3
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	b2da      	uxtb	r2, r3
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	b2db      	uxtb	r3, r3
 800a154:	f003 0303 	and.w	r3, r3, #3
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a162:	0c1b      	lsrs	r3, r3, #16
 800a164:	b2da      	uxtb	r2, r3
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b2da      	uxtb	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a184:	0d1b      	lsrs	r3, r3, #20
 800a186:	b29a      	uxth	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a190:	0c1b      	lsrs	r3, r3, #16
 800a192:	b2db      	uxtb	r3, r3
 800a194:	f003 030f 	and.w	r3, r3, #15
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1a2:	0bdb      	lsrs	r3, r3, #15
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b4:	0b9b      	lsrs	r3, r3, #14
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c6:	0b5b      	lsrs	r3, r3, #13
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d8:	0b1b      	lsrs	r3, r3, #12
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d163      	bne.n	800a2bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1f8:	009a      	lsls	r2, r3, #2
 800a1fa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a1fe:	4013      	ands	r3, r2
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a204:	0f92      	lsrs	r2, r2, #30
 800a206:	431a      	orrs	r2, r3
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a210:	0edb      	lsrs	r3, r3, #27
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a222:	0e1b      	lsrs	r3, r3, #24
 800a224:	b2db      	uxtb	r3, r3
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a234:	0d5b      	lsrs	r3, r3, #21
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a246:	0c9b      	lsrs	r3, r3, #18
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	f003 0307 	and.w	r3, r3, #7
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a258:	0bdb      	lsrs	r3, r3, #15
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	b2da      	uxtb	r2, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	7e1b      	ldrb	r3, [r3, #24]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	3302      	adds	r3, #2
 800a27c:	2201      	movs	r2, #1
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a286:	fb03 f202 	mul.w	r2, r3, r2
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	7a1b      	ldrb	r3, [r3, #8]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 030f 	and.w	r3, r3, #15
 800a298:	2201      	movs	r2, #1
 800a29a:	409a      	lsls	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a2a8:	0a52      	lsrs	r2, r2, #9
 800a2aa:	fb03 f202 	mul.w	r2, r3, r2
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2b8:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2ba:	e031      	b.n	800a320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d11d      	bne.n	800a300 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	029a      	lsls	r2, r3, #10
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2fe:	e00f      	b.n	800a320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a58      	ldr	r2, [pc, #352]	@ (800a468 <HAL_SD_GetCardCSD+0x344>)
 800a306:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e09d      	b.n	800a45c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a324:	0b9b      	lsrs	r3, r3, #14
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a336:	09db      	lsrs	r3, r3, #7
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a358:	0fdb      	lsrs	r3, r3, #31
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a364:	0f5b      	lsrs	r3, r3, #29
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a376:	0e9b      	lsrs	r3, r3, #26
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a388:	0d9b      	lsrs	r3, r3, #22
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 030f 	and.w	r3, r3, #15
 800a390:	b2da      	uxtb	r2, r3
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a39a:	0d5b      	lsrs	r3, r3, #21
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3b6:	0c1b      	lsrs	r3, r3, #16
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3ca:	0bdb      	lsrs	r3, r3, #15
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3de:	0b9b      	lsrs	r3, r3, #14
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3f2:	0b5b      	lsrs	r3, r3, #13
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a406:	0b1b      	lsrs	r3, r3, #12
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a41a:	0a9b      	lsrs	r3, r3, #10
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	b2da      	uxtb	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b2db      	uxtb	r3, r3
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	b2da      	uxtb	r2, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	1fe00fff 	.word	0x1fe00fff

0800a46c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b094      	sub	sp, #80	@ 0x50
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b03      	cmp	r3, #3
 800a486:	d101      	bne.n	800a48c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0a7      	b.n	800a5dc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fb62 	bl	800ab5c <SD_SendSDStatus>
 800a498:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a49a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d011      	beq.n	800a4c4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a4f      	ldr	r2, [pc, #316]	@ (800a5e4 <HAL_SD_GetCardStatus+0x178>)
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a4c2:	e070      	b.n	800a5a6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	099b      	lsrs	r3, r3, #6
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	0e1b      	lsrs	r3, r3, #24
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	061a      	lsls	r2, r3, #24
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a50a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	0a1b      	lsrs	r3, r3, #8
 800a510:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a514:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	0e1b      	lsrs	r3, r3, #24
 800a51a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	0d1b      	lsrs	r3, r3, #20
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b29b      	uxth	r3, r3
 800a548:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	b29b      	uxth	r3, r3
 800a552:	b2db      	uxtb	r3, r3
 800a554:	b29b      	uxth	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	0a9b      	lsrs	r3, r3, #10
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	0a1b      	lsrs	r3, r3, #8
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 0303 	and.w	r3, r3, #3
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	091b      	lsrs	r3, r3, #4
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 030f 	and.w	r3, r3, #15
 800a596:	b2da      	uxtb	r2, r3
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	0e1b      	lsrs	r3, r3, #24
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f004 fb88 	bl	800ecc4 <SDMMC_CmdBlockLength>
 800a5b4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00d      	beq.n	800a5d8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a08      	ldr	r2, [pc, #32]	@ (800a5e4 <HAL_SD_GetCardStatus+0x178>)
 800a5c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800a5d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3750      	adds	r7, #80	@ 0x50
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	1fe00fff 	.word	0x1fe00fff

0800a5e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a640:	b590      	push	{r4, r7, lr}
 800a642:	b08d      	sub	sp, #52	@ 0x34
 800a644:	af02      	add	r7, sp, #8
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2203      	movs	r2, #3
 800a654:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d02e      	beq.n	800a6be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a666:	d106      	bne.n	800a676 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	635a      	str	r2, [r3, #52]	@ 0x34
 800a674:	e029      	b.n	800a6ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a67c:	d10a      	bne.n	800a694 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fb64 	bl	800ad4c <SD_WideBus_Enable>
 800a684:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	635a      	str	r2, [r3, #52]	@ 0x34
 800a692:	e01a      	b.n	800a6ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10a      	bne.n	800a6b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fba1 	bl	800ade2 <SD_WideBus_Disable>
 800a6a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	635a      	str	r2, [r3, #52]	@ 0x34
 800a6ae:	e00c      	b.n	800a6ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	635a      	str	r2, [r3, #52]	@ 0x34
 800a6bc:	e005      	b.n	800a6ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a5f      	ldr	r2, [pc, #380]	@ (800a854 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a6d8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a6e0:	e096      	b.n	800a810 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a6e2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a6e6:	f04f 0100 	mov.w	r1, #0
 800a6ea:	f7fd fdf5 	bl	80082d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6ee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 8083 	beq.w	800a7fe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	695a      	ldr	r2, [r3, #20]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4950      	ldr	r1, [pc, #320]	@ (800a858 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a716:	fba1 1303 	umull	r1, r3, r1, r3
 800a71a:	0e1b      	lsrs	r3, r3, #24
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d303      	bcc.n	800a728 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	e05a      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a730:	d103      	bne.n	800a73a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	e051      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a742:	d126      	bne.n	800a792 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10e      	bne.n	800a76a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4a43      	ldr	r2, [pc, #268]	@ (800a85c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	4a40      	ldr	r2, [pc, #256]	@ (800a858 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a758:	fba2 2303 	umull	r2, r3, r2, r3
 800a75c:	0e5b      	lsrs	r3, r3, #25
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	e03d      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	61bb      	str	r3, [r7, #24]
 800a768:	e039      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	69fa      	ldr	r2, [r7, #28]
 800a772:	fbb2 f3f3 	udiv	r3, r2, r3
 800a776:	4a39      	ldr	r2, [pc, #228]	@ (800a85c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d906      	bls.n	800a78a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	4a36      	ldr	r2, [pc, #216]	@ (800a858 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a780:	fba2 2303 	umull	r2, r3, r2, r3
 800a784:	0e5b      	lsrs	r3, r3, #25
 800a786:	61bb      	str	r3, [r7, #24]
 800a788:	e029      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	61bb      	str	r3, [r7, #24]
 800a790:	e025      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10e      	bne.n	800a7b8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	4a30      	ldr	r2, [pc, #192]	@ (800a860 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d906      	bls.n	800a7b0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4a2c      	ldr	r2, [pc, #176]	@ (800a858 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7aa:	0e1b      	lsrs	r3, r3, #24
 800a7ac:	61bb      	str	r3, [r7, #24]
 800a7ae:	e016      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	e012      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	69fa      	ldr	r2, [r7, #28]
 800a7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c4:	4a26      	ldr	r2, [pc, #152]	@ (800a860 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d906      	bls.n	800a7d8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	4a22      	ldr	r2, [pc, #136]	@ (800a858 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d2:	0e1b      	lsrs	r3, r3, #24
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	e002      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681c      	ldr	r4, [r3, #0]
 800a7e2:	466a      	mov	r2, sp
 800a7e4:	f107 0314 	add.w	r3, r7, #20
 800a7e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ec:	e882 0003 	stmia.w	r2, {r0, r1}
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f004 f986 	bl	800eb08 <SDMMC_Init>
 800a7fc:	e008      	b.n	800a810 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a802:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a818:	4618      	mov	r0, r3
 800a81a:	f004 fa53 	bl	800ecc4 <SDMMC_CmdBlockLength>
 800a81e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00c      	beq.n	800a840 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a0a      	ldr	r2, [pc, #40]	@ (800a854 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a82c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	372c      	adds	r7, #44	@ 0x2c
 800a850:	46bd      	mov	sp, r7
 800a852:	bd90      	pop	{r4, r7, pc}
 800a854:	1fe00fff 	.word	0x1fe00fff
 800a858:	55e63b89 	.word	0x55e63b89
 800a85c:	02faf080 	.word	0x02faf080
 800a860:	017d7840 	.word	0x017d7840

0800a864 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a870:	f107 030c 	add.w	r3, r7, #12
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa40 	bl	800acfc <SD_SendStatus>
 800a87c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	431a      	orrs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	0a5b      	lsrs	r3, r3, #9
 800a894:	f003 030f 	and.w	r3, r3, #15
 800a898:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a89a:	693b      	ldr	r3, [r7, #16]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b090      	sub	sp, #64	@ 0x40
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a8b0:	f7f8 f938 	bl	8002b24 <HAL_GetTick>
 800a8b4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f004 f97d 	bl	800ebba <SDMMC_GetPowerState>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a8ca:	e0b5      	b.n	800aa38 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d02e      	beq.n	800a932 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f004 fbc8 	bl	800f06e <SDMMC_CmdSendCID>
 800a8de:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <SD_InitCard+0x46>
    {
      return errorstate;
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	e0a6      	b.n	800aa38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f004 f9a8 	bl	800ec46 <SDMMC_GetResponse>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2104      	movs	r1, #4
 800a902:	4618      	mov	r0, r3
 800a904:	f004 f99f 	bl	800ec46 <SDMMC_GetResponse>
 800a908:	4602      	mov	r2, r0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2108      	movs	r1, #8
 800a914:	4618      	mov	r0, r3
 800a916:	f004 f996 	bl	800ec46 <SDMMC_GetResponse>
 800a91a:	4602      	mov	r2, r0
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	210c      	movs	r1, #12
 800a926:	4618      	mov	r0, r3
 800a928:	f004 f98d 	bl	800ec46 <SDMMC_GetResponse>
 800a92c:	4602      	mov	r2, r0
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a936:	2b03      	cmp	r3, #3
 800a938:	d01d      	beq.n	800a976 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a93a:	e019      	b.n	800a970 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f107 020a 	add.w	r2, r7, #10
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f004 fbd0 	bl	800f0ec <SDMMC_CmdSetRelAdd>
 800a94c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	e06f      	b.n	800aa38 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a958:	f7f8 f8e4 	bl	8002b24 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a966:	4293      	cmp	r3, r2
 800a968:	d902      	bls.n	800a970 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a96a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a96e:	e063      	b.n	800aa38 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a970:	897b      	ldrh	r3, [r7, #10]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0e2      	beq.n	800a93c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d036      	beq.n	800a9ec <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a97e:	897b      	ldrh	r3, [r7, #10]
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98e:	041b      	lsls	r3, r3, #16
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f004 fb8a 	bl	800f0ac <SDMMC_CmdSendCSD>
 800a998:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <SD_InitCard+0x100>
    {
      return errorstate;
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	e049      	b.n	800aa38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f004 f94b 	bl	800ec46 <SDMMC_GetResponse>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2104      	movs	r1, #4
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f004 f942 	bl	800ec46 <SDMMC_GetResponse>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2108      	movs	r1, #8
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f004 f939 	bl	800ec46 <SDMMC_GetResponse>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	210c      	movs	r1, #12
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f004 f930 	bl	800ec46 <SDMMC_GetResponse>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f004 f927 	bl	800ec46 <SDMMC_GetResponse>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	0d1a      	lsrs	r2, r3, #20
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa00:	f107 030c 	add.w	r3, r7, #12
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff fb8c 	bl	800a124 <HAL_SD_GetCardCSD>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aa16:	e00f      	b.n	800aa38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f004 fa39 	bl	800ee9c <SDMMC_CmdSelDesel>
 800aa2a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <SD_InitCard+0x192>
  {
    return errorstate;
 800aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa34:	e000      	b.n	800aa38 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3740      	adds	r7, #64	@ 0x40
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f004 fa42 	bl	800eee2 <SDMMC_CmdGoIdleState>
 800aa5e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	e072      	b.n	800ab50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f004 fa55 	bl	800ef1e <SDMMC_CmdOperCond>
 800aa74:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa7c:	d10d      	bne.n	800aa9a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f004 fa2a 	bl	800eee2 <SDMMC_CmdGoIdleState>
 800aa8e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d004      	beq.n	800aaa0 <SD_PowerON+0x60>
    {
      return errorstate;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	e05a      	b.n	800ab50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d137      	bne.n	800ab18 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f004 fa55 	bl	800ef5e <SDMMC_CmdAppCommand>
 800aab4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d02d      	beq.n	800ab18 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aabc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aac0:	e046      	b.n	800ab50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f004 fa48 	bl	800ef5e <SDMMC_CmdAppCommand>
 800aace:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <SD_PowerON+0x9a>
    {
      return errorstate;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e03a      	b.n	800ab50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	491e      	ldr	r1, [pc, #120]	@ (800ab58 <SD_PowerON+0x118>)
 800aae0:	4618      	mov	r0, r3
 800aae2:	f004 fa5f 	bl	800efa4 <SDMMC_CmdAppOperCommand>
 800aae6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aaf2:	e02d      	b.n	800ab50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f004 f8a3 	bl	800ec46 <SDMMC_GetResponse>
 800ab00:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	0fdb      	lsrs	r3, r3, #31
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <SD_PowerON+0xce>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <SD_PowerON+0xd0>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	613b      	str	r3, [r7, #16]

    count++;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d802      	bhi.n	800ab28 <SD_PowerON+0xe8>
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0cc      	beq.n	800aac2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d902      	bls.n	800ab38 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ab32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab36:	e00b      	b.n	800ab50 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	c1100000 	.word	0xc1100000

0800ab5c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08c      	sub	sp, #48	@ 0x30
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab66:	f7f7 ffdd 	bl	8002b24 <HAL_GetTick>
 800ab6a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f004 f865 	bl	800ec46 <SDMMC_GetResponse>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab86:	d102      	bne.n	800ab8e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab8c:	e0b0      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2140      	movs	r1, #64	@ 0x40
 800ab94:	4618      	mov	r0, r3
 800ab96:	f004 f895 	bl	800ecc4 <SDMMC_CmdBlockLength>
 800ab9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d005      	beq.n	800abae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	e0a0      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb6:	041b      	lsls	r3, r3, #16
 800abb8:	4619      	mov	r1, r3
 800abba:	4610      	mov	r0, r2
 800abbc:	f004 f9cf 	bl	800ef5e <SDMMC_CmdAppCommand>
 800abc0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	e08d      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abd4:	f04f 33ff 	mov.w	r3, #4294967295
 800abd8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800abda:	2340      	movs	r3, #64	@ 0x40
 800abdc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800abde:	2360      	movs	r3, #96	@ 0x60
 800abe0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800abe2:	2302      	movs	r3, #2
 800abe4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800abea:	2301      	movs	r3, #1
 800abec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f107 0208 	add.w	r2, r7, #8
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f004 f837 	bl	800ec6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f004 fab7 	bl	800f176 <SDMMC_CmdStatusRegister>
 800ac08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d02b      	beq.n	800ac68 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	e069      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d013      	beq.n	800ac52 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac2e:	e00d      	b.n	800ac4c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f003 ff91 	bl	800eb5c <SDMMC_ReadFIFO>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3e:	601a      	str	r2, [r3, #0]
        pData++;
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	3304      	adds	r3, #4
 800ac44:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800ac46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac48:	3301      	adds	r3, #1
 800ac4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	2b07      	cmp	r3, #7
 800ac50:	d9ee      	bls.n	800ac30 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ac52:	f7f7 ff67 	bl	8002b24 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac60:	d102      	bne.n	800ac68 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac66:	e043      	b.n	800acf0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0d2      	beq.n	800ac1c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac84:	2308      	movs	r3, #8
 800ac86:	e033      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac96:	2302      	movs	r3, #2
 800ac98:	e02a      	b.n	800acf0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d017      	beq.n	800acd8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800aca8:	2320      	movs	r3, #32
 800acaa:	e021      	b.n	800acf0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f003 ff53 	bl	800eb5c <SDMMC_ReadFIFO>
 800acb6:	4602      	mov	r2, r0
 800acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acba:	601a      	str	r2, [r3, #0]
    pData++;
 800acbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbe:	3304      	adds	r3, #4
 800acc0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800acc2:	f7f7 ff2f 	bl	8002b24 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d102      	bne.n	800acd8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800acd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acd6:	e00b      	b.n	800acf0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e2      	bne.n	800acac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a03      	ldr	r2, [pc, #12]	@ (800acf8 <SD_SendSDStatus+0x19c>)
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3730      	adds	r7, #48	@ 0x30
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	18000f3a 	.word	0x18000f3a

0800acfc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ad0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad10:	e018      	b.n	800ad44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1a:	041b      	lsls	r3, r3, #16
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4610      	mov	r0, r2
 800ad20:	f004 fa06 	bl	800f130 <SDMMC_CmdSendStatus>
 800ad24:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	e009      	b.n	800ad44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f003 ff85 	bl	800ec46 <SDMMC_GetResponse>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f003 ff6f 	bl	800ec46 <SDMMC_GetResponse>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad72:	d102      	bne.n	800ad7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad78:	e02f      	b.n	800adda <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f879 	bl	800ae78 <SD_FindSCR>
 800ad86:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	e023      	b.n	800adda <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01c      	beq.n	800add6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada4:	041b      	lsls	r3, r3, #16
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f004 f8d8 	bl	800ef5e <SDMMC_CmdAppCommand>
 800adae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	e00f      	b.n	800adda <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2102      	movs	r1, #2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f004 f90f 	bl	800efe4 <SDMMC_CmdBusWidth>
 800adc6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	e003      	b.n	800adda <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800add2:	2300      	movs	r3, #0
 800add4:	e001      	b.n	800adda <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800add6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	2300      	movs	r3, #0
 800adf0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2100      	movs	r1, #0
 800adf8:	4618      	mov	r0, r3
 800adfa:	f003 ff24 	bl	800ec46 <SDMMC_GetResponse>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae08:	d102      	bne.n	800ae10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae0e:	e02f      	b.n	800ae70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae10:	f107 030c 	add.w	r3, r7, #12
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f82e 	bl	800ae78 <SD_FindSCR>
 800ae1c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	e023      	b.n	800ae70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01c      	beq.n	800ae6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae3a:	041b      	lsls	r3, r3, #16
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f004 f88d 	bl	800ef5e <SDMMC_CmdAppCommand>
 800ae44:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	e00f      	b.n	800ae70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f004 f8c4 	bl	800efe4 <SDMMC_CmdBusWidth>
 800ae5c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	e003      	b.n	800ae70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e001      	b.n	800ae70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08e      	sub	sp, #56	@ 0x38
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae82:	f7f7 fe4f 	bl	8002b24 <HAL_GetTick>
 800ae86:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60bb      	str	r3, [r7, #8]
 800ae90:	2300      	movs	r3, #0
 800ae92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2108      	movs	r1, #8
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f003 ff10 	bl	800ecc4 <SDMMC_CmdBlockLength>
 800aea4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	e0ad      	b.n	800b00c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	4619      	mov	r1, r3
 800aebc:	4610      	mov	r0, r2
 800aebe:	f004 f84e 	bl	800ef5e <SDMMC_CmdAppCommand>
 800aec2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <SD_FindSCR+0x56>
  {
    return errorstate;
 800aeca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aecc:	e09e      	b.n	800b00c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aece:	f04f 33ff 	mov.w	r3, #4294967295
 800aed2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aed4:	2308      	movs	r3, #8
 800aed6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aed8:	2330      	movs	r3, #48	@ 0x30
 800aeda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aedc:	2302      	movs	r3, #2
 800aede:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f107 0210 	add.w	r2, r7, #16
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f003 feba 	bl	800ec6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f004 f894 	bl	800f02a <SDMMC_CmdSendSCR>
 800af02:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800af04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af06:	2b00      	cmp	r3, #0
 800af08:	d027      	beq.n	800af5a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	e07e      	b.n	800b00c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d113      	bne.n	800af44 <SD_FindSCR+0xcc>
 800af1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d110      	bne.n	800af44 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f003 fe18 	bl	800eb5c <SDMMC_ReadFIFO>
 800af2c:	4603      	mov	r3, r0
 800af2e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f003 fe11 	bl	800eb5c <SDMMC_ReadFIFO>
 800af3a:	4603      	mov	r3, r0
 800af3c:	60fb      	str	r3, [r7, #12]
      index++;
 800af3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af40:	3301      	adds	r3, #1
 800af42:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800af44:	f7f7 fdee 	bl	8002b24 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d102      	bne.n	800af5a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af58:	e058      	b.n	800b00c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af60:	f240 532a 	movw	r3, #1322	@ 0x52a
 800af64:	4013      	ands	r3, r2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0d1      	beq.n	800af0e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af70:	f003 0308 	and.w	r3, r3, #8
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2208      	movs	r2, #8
 800af7e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af80:	2308      	movs	r3, #8
 800af82:	e043      	b.n	800b00c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2202      	movs	r2, #2
 800af98:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af9a:	2302      	movs	r3, #2
 800af9c:	e036      	b.n	800b00c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2220      	movs	r2, #32
 800afb2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800afb4:	2320      	movs	r3, #32
 800afb6:	e029      	b.n	800b00c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a15      	ldr	r2, [pc, #84]	@ (800b014 <SD_FindSCR+0x19c>)
 800afbe:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	061a      	lsls	r2, r3, #24
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800afcc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	0a1b      	lsrs	r3, r3, #8
 800afd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800afd6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	0e1b      	lsrs	r3, r3, #24
 800afdc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800afde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe0:	601a      	str	r2, [r3, #0]
    scr++;
 800afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe4:	3304      	adds	r3, #4
 800afe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	061a      	lsls	r2, r3, #24
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	021b      	lsls	r3, r3, #8
 800aff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aff4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800affe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	0e1b      	lsrs	r3, r3, #24
 800b004:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b008:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3738      	adds	r7, #56	@ 0x38
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	18000f3a 	.word	0x18000f3a

0800b018 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b024:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02a:	2b1f      	cmp	r3, #31
 800b02c:	d936      	bls.n	800b09c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	e027      	b.n	800b084 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4618      	mov	r0, r3
 800b03a:	f003 fd8f 	bl	800eb5c <SDMMC_ReadFIFO>
 800b03e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	b2da      	uxtb	r2, r3
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	3301      	adds	r3, #1
 800b04c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	0a1b      	lsrs	r3, r3, #8
 800b052:	b2da      	uxtb	r2, r3
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	3301      	adds	r3, #1
 800b05c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	b2da      	uxtb	r2, r3
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	3301      	adds	r3, #1
 800b06c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	0e1b      	lsrs	r3, r3, #24
 800b072:	b2da      	uxtb	r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	3301      	adds	r3, #1
 800b07c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3301      	adds	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b07      	cmp	r3, #7
 800b088:	d9d4      	bls.n	800b034 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b094:	f1a3 0220 	sub.w	r2, r3, #32
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b09c:	bf00      	nop
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	2b1f      	cmp	r3, #31
 800b0b8:	d93a      	bls.n	800b130 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e02b      	b.n	800b118 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	021a      	lsls	r2, r3, #8
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	041a      	lsls	r2, r3, #16
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	061a      	lsls	r2, r3, #24
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3301      	adds	r3, #1
 800b100:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f107 020c 	add.w	r2, r7, #12
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f003 fd32 	bl	800eb76 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	3301      	adds	r3, #1
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b07      	cmp	r3, #7
 800b11c:	d9d0      	bls.n	800b0c0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	f1a3 0220 	sub.w	r2, r3, #32
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	621a      	str	r2, [r3, #32]
  }
}
 800b130:	bf00      	nop
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e10f      	b.n	800b3ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a87      	ldr	r2, [pc, #540]	@ (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00f      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a86      	ldr	r2, [pc, #536]	@ (800b3c8 <HAL_SPI_Init+0x240>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00a      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a84      	ldr	r2, [pc, #528]	@ (800b3cc <HAL_SPI_Init+0x244>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d005      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	2b0f      	cmp	r3, #15
 800b1c4:	d901      	bls.n	800b1ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e0f7      	b.n	800b3ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fe2e 	bl	800be2c <SPI_GetPacketSize>
 800b1d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a7b      	ldr	r2, [pc, #492]	@ (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00c      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a79      	ldr	r2, [pc, #484]	@ (800b3c8 <HAL_SPI_Init+0x240>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d007      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a78      	ldr	r2, [pc, #480]	@ (800b3cc <HAL_SPI_Init+0x244>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d002      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d811      	bhi.n	800b21a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1fa:	4a72      	ldr	r2, [pc, #456]	@ (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d009      	beq.n	800b214 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a70      	ldr	r2, [pc, #448]	@ (800b3c8 <HAL_SPI_Init+0x240>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d004      	beq.n	800b214 <HAL_SPI_Init+0x8c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a6f      	ldr	r2, [pc, #444]	@ (800b3cc <HAL_SPI_Init+0x244>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d104      	bne.n	800b21e <HAL_SPI_Init+0x96>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b10      	cmp	r3, #16
 800b218:	d901      	bls.n	800b21e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e0cd      	b.n	800b3ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f6 fd72 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b25a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b264:	d119      	bne.n	800b29a <HAL_SPI_Init+0x112>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b26e:	d103      	bne.n	800b278 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10c      	bne.n	800b29a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b288:	d107      	bne.n	800b29a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b298:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00f      	beq.n	800b2c6 <HAL_SPI_Init+0x13e>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	2b06      	cmp	r3, #6
 800b2ac:	d90b      	bls.n	800b2c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e007      	b.n	800b2d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b2d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	69da      	ldr	r2, [r3, #28]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2e8:	ea42 0103 	orr.w	r1, r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	431a      	orrs	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b336:	ea42 0103 	orr.w	r1, r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d113      	bne.n	800b376 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b360:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b374:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0201 	bic.w	r2, r2, #1
 800b384:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	40013000 	.word	0x40013000
 800b3c8:	40003800 	.word	0x40003800
 800b3cc:	40003c00 	.word	0x40003c00

0800b3d0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3320      	adds	r3, #32
 800b3e6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3e8:	f7f7 fb9c 	bl	8002b24 <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d001      	beq.n	800b3fe <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e1d1      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <HAL_SPI_Transmit+0x3a>
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e1c9      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_SPI_Transmit+0x4c>
 800b418:	2302      	movs	r3, #2
 800b41a:	e1c2      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2203      	movs	r2, #3
 800b428:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	88fa      	ldrh	r2, [r7, #6]
 800b43e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	88fa      	ldrh	r2, [r7, #6]
 800b446:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b474:	d108      	bne.n	800b488 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e009      	b.n	800b49c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b49a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	4b96      	ldr	r3, [pc, #600]	@ (800b6fc <HAL_SPI_Transmit+0x32c>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	88f9      	ldrh	r1, [r7, #6]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f042 0201 	orr.w	r2, r2, #1
 800b4be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4c8:	d107      	bne.n	800b4da <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d947      	bls.n	800b572 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b4e2:	e03f      	b.n	800b564 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d114      	bne.n	800b51c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6812      	ldr	r2, [r2, #0]
 800b4fc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b502:	1d1a      	adds	r2, r3, #4
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b50e:	b29b      	uxth	r3, r3
 800b510:	3b01      	subs	r3, #1
 800b512:	b29a      	uxth	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b51a:	e023      	b.n	800b564 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b51c:	f7f7 fb02 	bl	8002b24 <HAL_GetTick>
 800b520:	4602      	mov	r2, r0
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d803      	bhi.n	800b534 <HAL_SPI_Transmit+0x164>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b532:	d102      	bne.n	800b53a <HAL_SPI_Transmit+0x16a>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d114      	bne.n	800b564 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 fba8 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b546:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e11e      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1b9      	bne.n	800b4e4 <HAL_SPI_Transmit+0x114>
 800b570:	e0f1      	b.n	800b756 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	2b07      	cmp	r3, #7
 800b578:	f240 80e6 	bls.w	800b748 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b57c:	e05d      	b.n	800b63a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d132      	bne.n	800b5f2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b592:	b29b      	uxth	r3, r3
 800b594:	2b01      	cmp	r3, #1
 800b596:	d918      	bls.n	800b5ca <HAL_SPI_Transmit+0x1fa>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d014      	beq.n	800b5ca <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6812      	ldr	r2, [r2, #0]
 800b5aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5b0:	1d1a      	adds	r2, r3, #4
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b02      	subs	r3, #2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b5c8:	e037      	b.n	800b63a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5ce:	881a      	ldrh	r2, [r3, #0]
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5d8:	1c9a      	adds	r2, r3, #2
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b5f0:	e023      	b.n	800b63a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5f2:	f7f7 fa97 	bl	8002b24 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d803      	bhi.n	800b60a <HAL_SPI_Transmit+0x23a>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b608:	d102      	bne.n	800b610 <HAL_SPI_Transmit+0x240>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d114      	bne.n	800b63a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f000 fb3d 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b61c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e0b3      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b640:	b29b      	uxth	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d19b      	bne.n	800b57e <HAL_SPI_Transmit+0x1ae>
 800b646:	e086      	b.n	800b756 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b02      	cmp	r3, #2
 800b654:	d154      	bne.n	800b700 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d918      	bls.n	800b694 <HAL_SPI_Transmit+0x2c4>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b666:	2b40      	cmp	r3, #64	@ 0x40
 800b668:	d914      	bls.n	800b694 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b67a:	1d1a      	adds	r2, r3, #4
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b686:	b29b      	uxth	r3, r3
 800b688:	3b04      	subs	r3, #4
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b692:	e059      	b.n	800b748 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d917      	bls.n	800b6d0 <HAL_SPI_Transmit+0x300>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d013      	beq.n	800b6d0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6ac:	881a      	ldrh	r2, [r3, #0]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6b6:	1c9a      	adds	r2, r3, #2
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	3b02      	subs	r3, #2
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b6ce:	e03b      	b.n	800b748 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3320      	adds	r3, #32
 800b6da:	7812      	ldrb	r2, [r2, #0]
 800b6dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b6fa:	e025      	b.n	800b748 <HAL_SPI_Transmit+0x378>
 800b6fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b700:	f7f7 fa10 	bl	8002b24 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d803      	bhi.n	800b718 <HAL_SPI_Transmit+0x348>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d102      	bne.n	800b71e <HAL_SPI_Transmit+0x34e>
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d114      	bne.n	800b748 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 fab6 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b72a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e02c      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b74e:	b29b      	uxth	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	f47f af79 	bne.w	800b648 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2200      	movs	r2, #0
 800b75e:	2108      	movs	r1, #8
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 fb35 	bl	800bdd0 <SPI_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d007      	beq.n	800b77c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b772:	f043 0220 	orr.w	r2, r3, #32
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 fa87 	bl	800bc90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
  }
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop

0800b7ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c0:	095b      	lsrs	r3, r3, #5
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3330      	adds	r3, #48	@ 0x30
 800b7ce:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7d0:	f7f7 f9a8 	bl	8002b24 <HAL_GetTick>
 800b7d4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d001      	beq.n	800b7e6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e250      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <HAL_SPI_Receive+0x46>
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e248      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_SPI_Receive+0x58>
 800b800:	2302      	movs	r3, #2
 800b802:	e241      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2204      	movs	r2, #4
 800b810:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	88fa      	ldrh	r2, [r7, #6]
 800b826:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	88fa      	ldrh	r2, [r7, #6]
 800b82e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b85c:	d108      	bne.n	800b870 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e009      	b.n	800b884 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b882:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	4b95      	ldr	r3, [pc, #596]	@ (800bae0 <HAL_SPI_Receive+0x334>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	88f9      	ldrh	r1, [r7, #6]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	6812      	ldr	r2, [r2, #0]
 800b894:	430b      	orrs	r3, r1
 800b896:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f042 0201 	orr.w	r2, r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8b0:	d107      	bne.n	800b8c2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	2b0f      	cmp	r3, #15
 800b8c8:	d96c      	bls.n	800b9a4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b8ca:	e064      	b.n	800b996 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d114      	bne.n	800b90c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b8ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b90a:	e044      	b.n	800b996 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b912:	b29b      	uxth	r3, r3
 800b914:	8bfa      	ldrh	r2, [r7, #30]
 800b916:	429a      	cmp	r2, r3
 800b918:	d919      	bls.n	800b94e <HAL_SPI_Receive+0x1a2>
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d014      	beq.n	800b94e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b92c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b92e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b934:	1d1a      	adds	r2, r3, #4
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b940:	b29b      	uxth	r3, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	b29a      	uxth	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b94c:	e023      	b.n	800b996 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b94e:	f7f7 f8e9 	bl	8002b24 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d803      	bhi.n	800b966 <HAL_SPI_Receive+0x1ba>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b964:	d102      	bne.n	800b96c <HAL_SPI_Receive+0x1c0>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d114      	bne.n	800b996 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f98f 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e178      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d194      	bne.n	800b8cc <HAL_SPI_Receive+0x120>
 800b9a2:	e15e      	b.n	800bc62 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	2b07      	cmp	r3, #7
 800b9aa:	f240 8153 	bls.w	800bc54 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9ae:	e08f      	b.n	800bad0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d114      	bne.n	800b9f0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	8812      	ldrh	r2, [r2, #0]
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9d6:	1c9a      	adds	r2, r3, #2
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9ee:	e06f      	b.n	800bad0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	8bfa      	ldrh	r2, [r7, #30]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d924      	bls.n	800ba48 <HAL_SPI_Receive+0x29c>
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d01f      	beq.n	800ba48 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	8812      	ldrh	r2, [r2, #0]
 800ba10:	b292      	uxth	r2, r2
 800ba12:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba18:	1c9a      	adds	r2, r3, #2
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	8812      	ldrh	r2, [r2, #0]
 800ba26:	b292      	uxth	r2, r2
 800ba28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba2e:	1c9a      	adds	r2, r3, #2
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	3b02      	subs	r3, #2
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba46:	e043      	b.n	800bad0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d119      	bne.n	800ba88 <HAL_SPI_Receive+0x2dc>
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d014      	beq.n	800ba88 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	8812      	ldrh	r2, [r2, #0]
 800ba66:	b292      	uxth	r2, r2
 800ba68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba6e:	1c9a      	adds	r2, r3, #2
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba86:	e023      	b.n	800bad0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba88:	f7f7 f84c 	bl	8002b24 <HAL_GetTick>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d803      	bhi.n	800baa0 <HAL_SPI_Receive+0x2f4>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9e:	d102      	bne.n	800baa6 <HAL_SPI_Receive+0x2fa>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d114      	bne.n	800bad0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f8f2 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bab2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e0db      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f af69 	bne.w	800b9b0 <HAL_SPI_Receive+0x204>
 800bade:	e0c0      	b.n	800bc62 <HAL_SPI_Receive+0x4b6>
 800bae0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d117      	bne.n	800bb2a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb06:	7812      	ldrb	r2, [r2, #0]
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb28:	e094      	b.n	800bc54 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	8bfa      	ldrh	r2, [r7, #30]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d946      	bls.n	800bbc6 <HAL_SPI_Receive+0x41a>
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d041      	beq.n	800bbc6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb6a:	7812      	ldrb	r2, [r2, #0]
 800bb6c:	b2d2      	uxtb	r2, r2
 800bb6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb86:	7812      	ldrb	r2, [r2, #0]
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	b2d2      	uxtb	r2, r2
 800bba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	3b04      	subs	r3, #4
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbc4:	e046      	b.n	800bc54 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d81c      	bhi.n	800bc0c <HAL_SPI_Receive+0x460>
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d017      	beq.n	800bc0c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbe8:	7812      	ldrb	r2, [r2, #0]
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc0a:	e023      	b.n	800bc54 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc0c:	f7f6 ff8a 	bl	8002b24 <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d803      	bhi.n	800bc24 <HAL_SPI_Receive+0x478>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	d102      	bne.n	800bc2a <HAL_SPI_Receive+0x47e>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d114      	bne.n	800bc54 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f830 	bl	800bc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e019      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f47f af41 	bne.w	800bae4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f814 	bl	800bc90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e000      	b.n	800bc88 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bc86:	2300      	movs	r3, #0
  }
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3720      	adds	r7, #32
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f042 0208 	orr.w	r2, r2, #8
 800bcae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	699a      	ldr	r2, [r3, #24]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0210 	orr.w	r2, r2, #16
 800bcbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 0201 	bic.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6919      	ldr	r1, [r3, #16]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b3c      	ldr	r3, [pc, #240]	@ (800bdcc <SPI_CloseTransfer+0x13c>)
 800bcdc:	400b      	ands	r3, r1
 800bcde:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bcee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d014      	beq.n	800bd26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00f      	beq.n	800bd26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f042 0220 	orr.w	r2, r2, #32
 800bd24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d014      	beq.n	800bd5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00f      	beq.n	800bd5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd42:	f043 0204 	orr.w	r2, r3, #4
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	699a      	ldr	r2, [r3, #24]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd6c:	f043 0201 	orr.w	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	699a      	ldr	r2, [r3, #24]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00f      	beq.n	800bdb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd96:	f043 0208 	orr.w	r2, r3, #8
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	fffffc90 	.word	0xfffffc90

0800bdd0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	4613      	mov	r3, r2
 800bdde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bde0:	e010      	b.n	800be04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde2:	f7f6 fe9f 	bl	8002b24 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d803      	bhi.n	800bdfa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf8:	d102      	bne.n	800be00 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e00f      	b.n	800be24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	695a      	ldr	r2, [r3, #20]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4013      	ands	r3, r2
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	bf0c      	ite	eq
 800be14:	2301      	moveq	r3, #1
 800be16:	2300      	movne	r3, #0
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d0df      	beq.n	800bde2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be38:	095b      	lsrs	r3, r3, #5
 800be3a:	3301      	adds	r3, #1
 800be3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	3301      	adds	r3, #1
 800be44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	3307      	adds	r3, #7
 800be4a:	08db      	lsrs	r3, r3, #3
 800be4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	fb02 f303 	mul.w	r3, r2, r3
}
 800be56:	4618      	mov	r0, r3
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	e049      	b.n	800bf08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7f6 faa1 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2202      	movs	r2, #2
 800be92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4619      	mov	r1, r3
 800bea0:	4610      	mov	r0, r2
 800bea2:	f000 fab7 	bl	800c414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d001      	beq.n	800bf28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e054      	b.n	800bfd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f042 0201 	orr.w	r2, r2, #1
 800bf3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a26      	ldr	r2, [pc, #152]	@ (800bfe0 <HAL_TIM_Base_Start_IT+0xd0>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d022      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf52:	d01d      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a22      	ldr	r2, [pc, #136]	@ (800bfe4 <HAL_TIM_Base_Start_IT+0xd4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d018      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a21      	ldr	r2, [pc, #132]	@ (800bfe8 <HAL_TIM_Base_Start_IT+0xd8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d013      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a1f      	ldr	r2, [pc, #124]	@ (800bfec <HAL_TIM_Base_Start_IT+0xdc>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d00e      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a1e      	ldr	r2, [pc, #120]	@ (800bff0 <HAL_TIM_Base_Start_IT+0xe0>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d009      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a1c      	ldr	r2, [pc, #112]	@ (800bff4 <HAL_TIM_Base_Start_IT+0xe4>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d004      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x80>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a1b      	ldr	r2, [pc, #108]	@ (800bff8 <HAL_TIM_Base_Start_IT+0xe8>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d115      	bne.n	800bfbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689a      	ldr	r2, [r3, #8]
 800bf96:	4b19      	ldr	r3, [pc, #100]	@ (800bffc <HAL_TIM_Base_Start_IT+0xec>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b06      	cmp	r3, #6
 800bfa0:	d015      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0xbe>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfa8:	d011      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0201 	orr.w	r2, r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfba:	e008      	b.n	800bfce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0201 	orr.w	r2, r2, #1
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	e000      	b.n	800bfd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	40010000 	.word	0x40010000
 800bfe4:	40000400 	.word	0x40000400
 800bfe8:	40000800 	.word	0x40000800
 800bfec:	40000c00 	.word	0x40000c00
 800bff0:	40010400 	.word	0x40010400
 800bff4:	40001800 	.word	0x40001800
 800bff8:	40014000 	.word	0x40014000
 800bffc:	00010007 	.word	0x00010007

0800c000 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e049      	b.n	800c0a6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f841 	bl	800c0ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3304      	adds	r3, #4
 800c03c:	4619      	mov	r1, r3
 800c03e:	4610      	mov	r0, r2
 800c040:	f000 f9e8 	bl	800c414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f003 0302 	and.w	r3, r3, #2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d020      	beq.n	800c126 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d01b      	beq.n	800c126 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f06f 0202 	mvn.w	r2, #2
 800c0f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f963 	bl	800c3d8 <HAL_TIM_IC_CaptureCallback>
 800c112:	e005      	b.n	800c120 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f955 	bl	800c3c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f966 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d020      	beq.n	800c172 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01b      	beq.n	800c172 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f06f 0204 	mvn.w	r2, #4
 800c142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2202      	movs	r2, #2
 800c148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c154:	2b00      	cmp	r3, #0
 800c156:	d003      	beq.n	800c160 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f93d 	bl	800c3d8 <HAL_TIM_IC_CaptureCallback>
 800c15e:	e005      	b.n	800c16c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f92f 	bl	800c3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f940 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f003 0308 	and.w	r3, r3, #8
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d020      	beq.n	800c1be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f003 0308 	and.w	r3, r3, #8
 800c182:	2b00      	cmp	r3, #0
 800c184:	d01b      	beq.n	800c1be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f06f 0208 	mvn.w	r2, #8
 800c18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2204      	movs	r2, #4
 800c194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f917 	bl	800c3d8 <HAL_TIM_IC_CaptureCallback>
 800c1aa:	e005      	b.n	800c1b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f909 	bl	800c3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f91a 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	f003 0310 	and.w	r3, r3, #16
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d020      	beq.n	800c20a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f003 0310 	and.w	r3, r3, #16
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01b      	beq.n	800c20a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f06f 0210 	mvn.w	r2, #16
 800c1da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2208      	movs	r2, #8
 800c1e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f8f1 	bl	800c3d8 <HAL_TIM_IC_CaptureCallback>
 800c1f6:	e005      	b.n	800c204 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f8e3 	bl	800c3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f8f4 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00c      	beq.n	800c22e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d007      	beq.n	800c22e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f06f 0201 	mvn.w	r2, #1
 800c226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f5 fc45 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00c      	beq.n	800c25c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fcda 	bl	800cc10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00c      	beq.n	800c280 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d007      	beq.n	800c280 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fcd2 	bl	800cc24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00c      	beq.n	800c2a4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c290:	2b00      	cmp	r3, #0
 800c292:	d007      	beq.n	800c2a4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f8ae 	bl	800c400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00c      	beq.n	800c2c8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f003 0320 	and.w	r3, r3, #32
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f06f 0220 	mvn.w	r2, #32
 800c2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fc9a 	bl	800cbfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d101      	bne.n	800c2ee <HAL_TIM_OC_ConfigChannel+0x1e>
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	e066      	b.n	800c3bc <HAL_TIM_OC_ConfigChannel+0xec>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b14      	cmp	r3, #20
 800c2fa:	d857      	bhi.n	800c3ac <HAL_TIM_OC_ConfigChannel+0xdc>
 800c2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c304 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c359 	.word	0x0800c359
 800c308:	0800c3ad 	.word	0x0800c3ad
 800c30c:	0800c3ad 	.word	0x0800c3ad
 800c310:	0800c3ad 	.word	0x0800c3ad
 800c314:	0800c367 	.word	0x0800c367
 800c318:	0800c3ad 	.word	0x0800c3ad
 800c31c:	0800c3ad 	.word	0x0800c3ad
 800c320:	0800c3ad 	.word	0x0800c3ad
 800c324:	0800c375 	.word	0x0800c375
 800c328:	0800c3ad 	.word	0x0800c3ad
 800c32c:	0800c3ad 	.word	0x0800c3ad
 800c330:	0800c3ad 	.word	0x0800c3ad
 800c334:	0800c383 	.word	0x0800c383
 800c338:	0800c3ad 	.word	0x0800c3ad
 800c33c:	0800c3ad 	.word	0x0800c3ad
 800c340:	0800c3ad 	.word	0x0800c3ad
 800c344:	0800c391 	.word	0x0800c391
 800c348:	0800c3ad 	.word	0x0800c3ad
 800c34c:	0800c3ad 	.word	0x0800c3ad
 800c350:	0800c3ad 	.word	0x0800c3ad
 800c354:	0800c39f 	.word	0x0800c39f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68b9      	ldr	r1, [r7, #8]
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f8f8 	bl	800c554 <TIM_OC1_SetConfig>
      break;
 800c364:	e025      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 f981 	bl	800c674 <TIM_OC2_SetConfig>
      break;
 800c372:	e01e      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fa04 	bl	800c788 <TIM_OC3_SetConfig>
      break;
 800c380:	e017      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 fa85 	bl	800c898 <TIM_OC4_SetConfig>
      break;
 800c38e:	e010      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fae8 	bl	800c96c <TIM_OC5_SetConfig>
      break;
 800c39c:	e009      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fb45 	bl	800ca34 <TIM_OC6_SetConfig>
      break;
 800c3aa:	e002      	b.n	800c3b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	75fb      	strb	r3, [r7, #23]
      break;
 800c3b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a43      	ldr	r2, [pc, #268]	@ (800c534 <TIM_Base_SetConfig+0x120>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d013      	beq.n	800c454 <TIM_Base_SetConfig+0x40>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c432:	d00f      	beq.n	800c454 <TIM_Base_SetConfig+0x40>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a40      	ldr	r2, [pc, #256]	@ (800c538 <TIM_Base_SetConfig+0x124>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_Base_SetConfig+0x40>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a3f      	ldr	r2, [pc, #252]	@ (800c53c <TIM_Base_SetConfig+0x128>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_Base_SetConfig+0x40>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a3e      	ldr	r2, [pc, #248]	@ (800c540 <TIM_Base_SetConfig+0x12c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_Base_SetConfig+0x40>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a3d      	ldr	r2, [pc, #244]	@ (800c544 <TIM_Base_SetConfig+0x130>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d108      	bne.n	800c466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c45a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4313      	orrs	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a32      	ldr	r2, [pc, #200]	@ (800c534 <TIM_Base_SetConfig+0x120>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d01f      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c474:	d01b      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a2f      	ldr	r2, [pc, #188]	@ (800c538 <TIM_Base_SetConfig+0x124>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d017      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a2e      	ldr	r2, [pc, #184]	@ (800c53c <TIM_Base_SetConfig+0x128>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d013      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a2d      	ldr	r2, [pc, #180]	@ (800c540 <TIM_Base_SetConfig+0x12c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d00f      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a2c      	ldr	r2, [pc, #176]	@ (800c544 <TIM_Base_SetConfig+0x130>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d00b      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a2b      	ldr	r2, [pc, #172]	@ (800c548 <TIM_Base_SetConfig+0x134>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d007      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c54c <TIM_Base_SetConfig+0x138>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d003      	beq.n	800c4ae <TIM_Base_SetConfig+0x9a>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a29      	ldr	r2, [pc, #164]	@ (800c550 <TIM_Base_SetConfig+0x13c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d108      	bne.n	800c4c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	689a      	ldr	r2, [r3, #8]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a14      	ldr	r2, [pc, #80]	@ (800c534 <TIM_Base_SetConfig+0x120>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d00f      	beq.n	800c506 <TIM_Base_SetConfig+0xf2>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a16      	ldr	r2, [pc, #88]	@ (800c544 <TIM_Base_SetConfig+0x130>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00b      	beq.n	800c506 <TIM_Base_SetConfig+0xf2>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a15      	ldr	r2, [pc, #84]	@ (800c548 <TIM_Base_SetConfig+0x134>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d007      	beq.n	800c506 <TIM_Base_SetConfig+0xf2>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a14      	ldr	r2, [pc, #80]	@ (800c54c <TIM_Base_SetConfig+0x138>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d003      	beq.n	800c506 <TIM_Base_SetConfig+0xf2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a13      	ldr	r2, [pc, #76]	@ (800c550 <TIM_Base_SetConfig+0x13c>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d103      	bne.n	800c50e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	691a      	ldr	r2, [r3, #16]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f043 0204 	orr.w	r2, r3, #4
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	601a      	str	r2, [r3, #0]
}
 800c526:	bf00      	nop
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	40010000 	.word	0x40010000
 800c538:	40000400 	.word	0x40000400
 800c53c:	40000800 	.word	0x40000800
 800c540:	40000c00 	.word	0x40000c00
 800c544:	40010400 	.word	0x40010400
 800c548:	40014000 	.word	0x40014000
 800c54c:	40014400 	.word	0x40014400
 800c550:	40014800 	.word	0x40014800

0800c554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	f023 0201 	bic.w	r2, r3, #1
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4b37      	ldr	r3, [pc, #220]	@ (800c65c <TIM_OC1_SetConfig+0x108>)
 800c580:	4013      	ands	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0303 	bic.w	r3, r3, #3
 800c58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	4313      	orrs	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f023 0302 	bic.w	r3, r3, #2
 800c59c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c660 <TIM_OC1_SetConfig+0x10c>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00f      	beq.n	800c5d0 <TIM_OC1_SetConfig+0x7c>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a2c      	ldr	r2, [pc, #176]	@ (800c664 <TIM_OC1_SetConfig+0x110>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d00b      	beq.n	800c5d0 <TIM_OC1_SetConfig+0x7c>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c668 <TIM_OC1_SetConfig+0x114>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d007      	beq.n	800c5d0 <TIM_OC1_SetConfig+0x7c>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c66c <TIM_OC1_SetConfig+0x118>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d003      	beq.n	800c5d0 <TIM_OC1_SetConfig+0x7c>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a29      	ldr	r2, [pc, #164]	@ (800c670 <TIM_OC1_SetConfig+0x11c>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d10c      	bne.n	800c5ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f023 0308 	bic.w	r3, r3, #8
 800c5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f023 0304 	bic.w	r3, r3, #4
 800c5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c660 <TIM_OC1_SetConfig+0x10c>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d00f      	beq.n	800c612 <TIM_OC1_SetConfig+0xbe>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c664 <TIM_OC1_SetConfig+0x110>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d00b      	beq.n	800c612 <TIM_OC1_SetConfig+0xbe>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800c668 <TIM_OC1_SetConfig+0x114>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d007      	beq.n	800c612 <TIM_OC1_SetConfig+0xbe>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a19      	ldr	r2, [pc, #100]	@ (800c66c <TIM_OC1_SetConfig+0x118>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d003      	beq.n	800c612 <TIM_OC1_SetConfig+0xbe>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a18      	ldr	r2, [pc, #96]	@ (800c670 <TIM_OC1_SetConfig+0x11c>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d111      	bne.n	800c636 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4313      	orrs	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	4313      	orrs	r3, r2
 800c634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	621a      	str	r2, [r3, #32]
}
 800c650:	bf00      	nop
 800c652:	371c      	adds	r7, #28
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	fffeff8f 	.word	0xfffeff8f
 800c660:	40010000 	.word	0x40010000
 800c664:	40010400 	.word	0x40010400
 800c668:	40014000 	.word	0x40014000
 800c66c:	40014400 	.word	0x40014400
 800c670:	40014800 	.word	0x40014800

0800c674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a1b      	ldr	r3, [r3, #32]
 800c688:	f023 0210 	bic.w	r2, r3, #16
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	4b34      	ldr	r3, [pc, #208]	@ (800c770 <TIM_OC2_SetConfig+0xfc>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f023 0320 	bic.w	r3, r3, #32
 800c6be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	011b      	lsls	r3, r3, #4
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a29      	ldr	r2, [pc, #164]	@ (800c774 <TIM_OC2_SetConfig+0x100>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d003      	beq.n	800c6dc <TIM_OC2_SetConfig+0x68>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a28      	ldr	r2, [pc, #160]	@ (800c778 <TIM_OC2_SetConfig+0x104>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d10d      	bne.n	800c6f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c774 <TIM_OC2_SetConfig+0x100>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d00f      	beq.n	800c720 <TIM_OC2_SetConfig+0xac>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a1d      	ldr	r2, [pc, #116]	@ (800c778 <TIM_OC2_SetConfig+0x104>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d00b      	beq.n	800c720 <TIM_OC2_SetConfig+0xac>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a1c      	ldr	r2, [pc, #112]	@ (800c77c <TIM_OC2_SetConfig+0x108>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d007      	beq.n	800c720 <TIM_OC2_SetConfig+0xac>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a1b      	ldr	r2, [pc, #108]	@ (800c780 <TIM_OC2_SetConfig+0x10c>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_OC2_SetConfig+0xac>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a1a      	ldr	r2, [pc, #104]	@ (800c784 <TIM_OC2_SetConfig+0x110>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d113      	bne.n	800c748 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	4313      	orrs	r3, r2
 800c73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	4313      	orrs	r3, r2
 800c746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	621a      	str	r2, [r3, #32]
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	feff8fff 	.word	0xfeff8fff
 800c774:	40010000 	.word	0x40010000
 800c778:	40010400 	.word	0x40010400
 800c77c:	40014000 	.word	0x40014000
 800c780:	40014400 	.word	0x40014400
 800c784:	40014800 	.word	0x40014800

0800c788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4b33      	ldr	r3, [pc, #204]	@ (800c880 <TIM_OC3_SetConfig+0xf8>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 0303 	bic.w	r3, r3, #3
 800c7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c7d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a28      	ldr	r2, [pc, #160]	@ (800c884 <TIM_OC3_SetConfig+0xfc>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d003      	beq.n	800c7ee <TIM_OC3_SetConfig+0x66>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a27      	ldr	r2, [pc, #156]	@ (800c888 <TIM_OC3_SetConfig+0x100>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d10d      	bne.n	800c80a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a1d      	ldr	r2, [pc, #116]	@ (800c884 <TIM_OC3_SetConfig+0xfc>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d00f      	beq.n	800c832 <TIM_OC3_SetConfig+0xaa>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a1c      	ldr	r2, [pc, #112]	@ (800c888 <TIM_OC3_SetConfig+0x100>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00b      	beq.n	800c832 <TIM_OC3_SetConfig+0xaa>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <TIM_OC3_SetConfig+0x104>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d007      	beq.n	800c832 <TIM_OC3_SetConfig+0xaa>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a1a      	ldr	r2, [pc, #104]	@ (800c890 <TIM_OC3_SetConfig+0x108>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d003      	beq.n	800c832 <TIM_OC3_SetConfig+0xaa>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <TIM_OC3_SetConfig+0x10c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d113      	bne.n	800c85a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	011b      	lsls	r3, r3, #4
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	011b      	lsls	r3, r3, #4
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	4313      	orrs	r3, r2
 800c858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	685a      	ldr	r2, [r3, #4]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	621a      	str	r2, [r3, #32]
}
 800c874:	bf00      	nop
 800c876:	371c      	adds	r7, #28
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	fffeff8f 	.word	0xfffeff8f
 800c884:	40010000 	.word	0x40010000
 800c888:	40010400 	.word	0x40010400
 800c88c:	40014000 	.word	0x40014000
 800c890:	40014400 	.word	0x40014400
 800c894:	40014800 	.word	0x40014800

0800c898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <TIM_OC4_SetConfig+0xbc>)
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c8e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	031b      	lsls	r3, r3, #12
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a19      	ldr	r2, [pc, #100]	@ (800c958 <TIM_OC4_SetConfig+0xc0>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d00f      	beq.n	800c918 <TIM_OC4_SetConfig+0x80>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a18      	ldr	r2, [pc, #96]	@ (800c95c <TIM_OC4_SetConfig+0xc4>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00b      	beq.n	800c918 <TIM_OC4_SetConfig+0x80>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a17      	ldr	r2, [pc, #92]	@ (800c960 <TIM_OC4_SetConfig+0xc8>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d007      	beq.n	800c918 <TIM_OC4_SetConfig+0x80>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a16      	ldr	r2, [pc, #88]	@ (800c964 <TIM_OC4_SetConfig+0xcc>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC4_SetConfig+0x80>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a15      	ldr	r2, [pc, #84]	@ (800c968 <TIM_OC4_SetConfig+0xd0>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d109      	bne.n	800c92c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c91e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	019b      	lsls	r3, r3, #6
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4313      	orrs	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	621a      	str	r2, [r3, #32]
}
 800c946:	bf00      	nop
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	feff8fff 	.word	0xfeff8fff
 800c958:	40010000 	.word	0x40010000
 800c95c:	40010400 	.word	0x40010400
 800c960:	40014000 	.word	0x40014000
 800c964:	40014400 	.word	0x40014400
 800c968:	40014800 	.word	0x40014800

0800c96c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a1b      	ldr	r3, [r3, #32]
 800c980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	4b21      	ldr	r3, [pc, #132]	@ (800ca1c <TIM_OC5_SetConfig+0xb0>)
 800c998:	4013      	ands	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c9ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	041b      	lsls	r3, r3, #16
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a18      	ldr	r2, [pc, #96]	@ (800ca20 <TIM_OC5_SetConfig+0xb4>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d00f      	beq.n	800c9e2 <TIM_OC5_SetConfig+0x76>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a17      	ldr	r2, [pc, #92]	@ (800ca24 <TIM_OC5_SetConfig+0xb8>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00b      	beq.n	800c9e2 <TIM_OC5_SetConfig+0x76>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a16      	ldr	r2, [pc, #88]	@ (800ca28 <TIM_OC5_SetConfig+0xbc>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d007      	beq.n	800c9e2 <TIM_OC5_SetConfig+0x76>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a15      	ldr	r2, [pc, #84]	@ (800ca2c <TIM_OC5_SetConfig+0xc0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d003      	beq.n	800c9e2 <TIM_OC5_SetConfig+0x76>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a14      	ldr	r2, [pc, #80]	@ (800ca30 <TIM_OC5_SetConfig+0xc4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d109      	bne.n	800c9f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	021b      	lsls	r3, r3, #8
 800c9f0:	697a      	ldr	r2, [r7, #20]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	621a      	str	r2, [r3, #32]
}
 800ca10:	bf00      	nop
 800ca12:	371c      	adds	r7, #28
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	fffeff8f 	.word	0xfffeff8f
 800ca20:	40010000 	.word	0x40010000
 800ca24:	40010400 	.word	0x40010400
 800ca28:	40014000 	.word	0x40014000
 800ca2c:	40014400 	.word	0x40014400
 800ca30:	40014800 	.word	0x40014800

0800ca34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4b22      	ldr	r3, [pc, #136]	@ (800cae8 <TIM_OC6_SetConfig+0xb4>)
 800ca60:	4013      	ands	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	021b      	lsls	r3, r3, #8
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	051b      	lsls	r3, r3, #20
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a19      	ldr	r2, [pc, #100]	@ (800caec <TIM_OC6_SetConfig+0xb8>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d00f      	beq.n	800caac <TIM_OC6_SetConfig+0x78>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a18      	ldr	r2, [pc, #96]	@ (800caf0 <TIM_OC6_SetConfig+0xbc>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00b      	beq.n	800caac <TIM_OC6_SetConfig+0x78>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a17      	ldr	r2, [pc, #92]	@ (800caf4 <TIM_OC6_SetConfig+0xc0>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d007      	beq.n	800caac <TIM_OC6_SetConfig+0x78>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a16      	ldr	r2, [pc, #88]	@ (800caf8 <TIM_OC6_SetConfig+0xc4>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <TIM_OC6_SetConfig+0x78>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a15      	ldr	r2, [pc, #84]	@ (800cafc <TIM_OC6_SetConfig+0xc8>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d109      	bne.n	800cac0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	029b      	lsls	r3, r3, #10
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	621a      	str	r2, [r3, #32]
}
 800cada:	bf00      	nop
 800cadc:	371c      	adds	r7, #28
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	feff8fff 	.word	0xfeff8fff
 800caec:	40010000 	.word	0x40010000
 800caf0:	40010400 	.word	0x40010400
 800caf4:	40014000 	.word	0x40014000
 800caf8:	40014400 	.word	0x40014400
 800cafc:	40014800 	.word	0x40014800

0800cb00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d101      	bne.n	800cb1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e065      	b.n	800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	041b      	lsls	r3, r3, #16
 800cb92:	4313      	orrs	r3, r2
 800cb94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a16      	ldr	r2, [pc, #88]	@ (800cbf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d004      	beq.n	800cbaa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a14      	ldr	r2, [pc, #80]	@ (800cbf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d115      	bne.n	800cbd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb4:	051b      	lsls	r3, r3, #20
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	40010000 	.word	0x40010000
 800cbf8:	40010400 	.word	0x40010400

0800cbfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e042      	b.n	800ccd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7f5 fcc3 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2224      	movs	r2, #36	@ 0x24
 800cc66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f022 0201 	bic.w	r2, r2, #1
 800cc78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 f9e6 	bl	800e054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fc7b 	bl	800d584 <UART_SetConfig>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d101      	bne.n	800cc98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e01b      	b.n	800ccd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ccb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f042 0201 	orr.w	r2, r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f001 fa65 	bl	800e198 <UART_CheckIdleState>
 800ccce:	4603      	mov	r3, r0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08a      	sub	sp, #40	@ 0x28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	4613      	mov	r3, r2
 800cce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccec:	2b20      	cmp	r3, #32
 800ccee:	d137      	bne.n	800cd60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <HAL_UART_Receive_DMA+0x24>
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e030      	b.n	800cd62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a18      	ldr	r2, [pc, #96]	@ (800cd6c <HAL_UART_Receive_DMA+0x94>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d01f      	beq.n	800cd50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d018      	beq.n	800cd50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	e853 3f00 	ldrex	r3, [r3]
 800cd2a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd32:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	623b      	str	r3, [r7, #32]
 800cd3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	69f9      	ldr	r1, [r7, #28]
 800cd42:	6a3a      	ldr	r2, [r7, #32]
 800cd44:	e841 2300 	strex	r3, r2, [r1]
 800cd48:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e6      	bne.n	800cd1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	461a      	mov	r2, r3
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f001 fb36 	bl	800e3c8 <UART_Start_Receive_DMA>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	e000      	b.n	800cd62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cd60:	2302      	movs	r3, #2
  }
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3728      	adds	r7, #40	@ 0x28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	58000c00 	.word	0x58000c00

0800cd70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b0ba      	sub	sp, #232	@ 0xe8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cd9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cd9e:	4013      	ands	r3, r2
 800cda0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cda4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d11b      	bne.n	800cde4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdb0:	f003 0320 	and.w	r3, r3, #32
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d015      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 8393 	beq.w	800d500 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	4798      	blx	r3
      }
      return;
 800cde2:	e38d      	b.n	800d500 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cde4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 8123 	beq.w	800d034 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdf2:	4b8d      	ldr	r3, [pc, #564]	@ (800d028 <HAL_UART_IRQHandler+0x2b8>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cdfe:	4b8b      	ldr	r3, [pc, #556]	@ (800d02c <HAL_UART_IRQHandler+0x2bc>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 8116 	beq.w	800d034 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d011      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
 800ce14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2201      	movs	r2, #1
 800ce26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce2e:	f043 0201 	orr.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce3c:	f003 0302 	and.w	r3, r3, #2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d011      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
 800ce44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2202      	movs	r2, #2
 800ce56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce5e:	f043 0204 	orr.w	r2, r3, #4
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d011      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
 800ce74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00b      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2204      	movs	r2, #4
 800ce86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce8e:	f043 0202 	orr.w	r2, r3, #2
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d017      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cea8:	f003 0320 	and.w	r3, r3, #32
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d105      	bne.n	800cebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ceb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ceb4:	4b5c      	ldr	r3, [pc, #368]	@ (800d028 <HAL_UART_IRQHandler+0x2b8>)
 800ceb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2208      	movs	r2, #8
 800cec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceca:	f043 0208 	orr.w	r2, r3, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d012      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00c      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cefc:	f043 0220 	orr.w	r2, r3, #32
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 82f9 	beq.w	800d504 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf16:	f003 0320 	and.w	r3, r3, #32
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf22:	f003 0320 	and.w	r3, r3, #32
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf5a:	2b40      	cmp	r3, #64	@ 0x40
 800cf5c:	d005      	beq.n	800cf6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d054      	beq.n	800d014 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f001 fb14 	bl	800e598 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf7a:	2b40      	cmp	r3, #64	@ 0x40
 800cf7c:	d146      	bne.n	800d00c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3308      	adds	r3, #8
 800cf84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1d9      	bne.n	800cf7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d017      	beq.n	800d004 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfda:	4a15      	ldr	r2, [pc, #84]	@ (800d030 <HAL_UART_IRQHandler+0x2c0>)
 800cfdc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7f6 ff9d 	bl	8003f24 <HAL_DMA_Abort_IT>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d019      	beq.n	800d024 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cffe:	4610      	mov	r0, r2
 800d000:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d002:	e00f      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 faa7 	bl	800d558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d00a:	e00b      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 faa3 	bl	800d558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d012:	e007      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fa9f 	bl	800d558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d022:	e26f      	b.n	800d504 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d024:	bf00      	nop
    return;
 800d026:	e26d      	b.n	800d504 <HAL_UART_IRQHandler+0x794>
 800d028:	10000001 	.word	0x10000001
 800d02c:	04000120 	.word	0x04000120
 800d030:	0800e84b 	.word	0x0800e84b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d038:	2b01      	cmp	r3, #1
 800d03a:	f040 8203 	bne.w	800d444 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d042:	f003 0310 	and.w	r3, r3, #16
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 81fc 	beq.w	800d444 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d050:	f003 0310 	and.w	r3, r3, #16
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 81f5 	beq.w	800d444 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2210      	movs	r2, #16
 800d060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d06c:	2b40      	cmp	r3, #64	@ 0x40
 800d06e:	f040 816d 	bne.w	800d34c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4aa4      	ldr	r2, [pc, #656]	@ (800d30c <HAL_UART_IRQHandler+0x59c>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d068      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4aa1      	ldr	r2, [pc, #644]	@ (800d310 <HAL_UART_IRQHandler+0x5a0>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d061      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a9f      	ldr	r2, [pc, #636]	@ (800d314 <HAL_UART_IRQHandler+0x5a4>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d05a      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a9c      	ldr	r2, [pc, #624]	@ (800d318 <HAL_UART_IRQHandler+0x5a8>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d053      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a9a      	ldr	r2, [pc, #616]	@ (800d31c <HAL_UART_IRQHandler+0x5ac>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d04c      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a97      	ldr	r2, [pc, #604]	@ (800d320 <HAL_UART_IRQHandler+0x5b0>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d045      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a95      	ldr	r2, [pc, #596]	@ (800d324 <HAL_UART_IRQHandler+0x5b4>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d03e      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a92      	ldr	r2, [pc, #584]	@ (800d328 <HAL_UART_IRQHandler+0x5b8>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d037      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a90      	ldr	r2, [pc, #576]	@ (800d32c <HAL_UART_IRQHandler+0x5bc>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d030      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a8d      	ldr	r2, [pc, #564]	@ (800d330 <HAL_UART_IRQHandler+0x5c0>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d029      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a8b      	ldr	r2, [pc, #556]	@ (800d334 <HAL_UART_IRQHandler+0x5c4>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d022      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a88      	ldr	r2, [pc, #544]	@ (800d338 <HAL_UART_IRQHandler+0x5c8>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d01b      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a86      	ldr	r2, [pc, #536]	@ (800d33c <HAL_UART_IRQHandler+0x5cc>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d014      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a83      	ldr	r2, [pc, #524]	@ (800d340 <HAL_UART_IRQHandler+0x5d0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d00d      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a81      	ldr	r2, [pc, #516]	@ (800d344 <HAL_UART_IRQHandler+0x5d4>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d006      	beq.n	800d152 <HAL_UART_IRQHandler+0x3e2>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a7e      	ldr	r2, [pc, #504]	@ (800d348 <HAL_UART_IRQHandler+0x5d8>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d106      	bne.n	800d160 <HAL_UART_IRQHandler+0x3f0>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	e005      	b.n	800d16c <HAL_UART_IRQHandler+0x3fc>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 80ad 	beq.w	800d2d4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d184:	429a      	cmp	r2, r3
 800d186:	f080 80a5 	bcs.w	800d2d4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d19a:	69db      	ldr	r3, [r3, #28]
 800d19c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1a0:	f000 8087 	beq.w	800d2b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d1b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d1ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d1da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1de:	e841 2300 	strex	r3, r2, [r1]
 800d1e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1da      	bne.n	800d1a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1f8:	e853 3f00 	ldrex	r3, [r3]
 800d1fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d1fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d200:	f023 0301 	bic.w	r3, r3, #1
 800d204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3308      	adds	r3, #8
 800d20e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d212:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d216:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d21a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d21e:	e841 2300 	strex	r3, r2, [r1]
 800d222:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1e1      	bne.n	800d1ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3308      	adds	r3, #8
 800d230:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d234:	e853 3f00 	ldrex	r3, [r3]
 800d238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d23a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d23c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3308      	adds	r3, #8
 800d24a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d24e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d25c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e3      	bne.n	800d22a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2220      	movs	r2, #32
 800d266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d278:	e853 3f00 	ldrex	r3, [r3]
 800d27c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d27e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d280:	f023 0310 	bic.w	r3, r3, #16
 800d284:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d292:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d294:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e4      	bne.n	800d270 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f6 fb1b 	bl	80038e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f94d 	bl	800d56c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d2d2:	e119      	b.n	800d508 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d2da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	f040 8112 	bne.w	800d508 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	69db      	ldr	r3, [r3, #28]
 800d2ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2f0:	f040 810a 	bne.w	800d508 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f932 	bl	800d56c <HAL_UARTEx_RxEventCallback>
      return;
 800d308:	e0fe      	b.n	800d508 <HAL_UART_IRQHandler+0x798>
 800d30a:	bf00      	nop
 800d30c:	40020010 	.word	0x40020010
 800d310:	40020028 	.word	0x40020028
 800d314:	40020040 	.word	0x40020040
 800d318:	40020058 	.word	0x40020058
 800d31c:	40020070 	.word	0x40020070
 800d320:	40020088 	.word	0x40020088
 800d324:	400200a0 	.word	0x400200a0
 800d328:	400200b8 	.word	0x400200b8
 800d32c:	40020410 	.word	0x40020410
 800d330:	40020428 	.word	0x40020428
 800d334:	40020440 	.word	0x40020440
 800d338:	40020458 	.word	0x40020458
 800d33c:	40020470 	.word	0x40020470
 800d340:	40020488 	.word	0x40020488
 800d344:	400204a0 	.word	0x400204a0
 800d348:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d358:	b29b      	uxth	r3, r3
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d366:	b29b      	uxth	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 80cf 	beq.w	800d50c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d36e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 80ca 	beq.w	800d50c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	e853 3f00 	ldrex	r3, [r3]
 800d384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d38c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	461a      	mov	r2, r3
 800d396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d39a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d39c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3a2:	e841 2300 	strex	r3, r2, [r1]
 800d3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e4      	bne.n	800d378 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	e853 3f00 	ldrex	r3, [r3]
 800d3bc:	623b      	str	r3, [r7, #32]
   return(result);
 800d3be:	6a3a      	ldr	r2, [r7, #32]
 800d3c0:	4b55      	ldr	r3, [pc, #340]	@ (800d518 <HAL_UART_IRQHandler+0x7a8>)
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d3d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3da:	e841 2300 	strex	r3, r2, [r1]
 800d3de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e3      	bne.n	800d3ae <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	60fb      	str	r3, [r7, #12]
   return(result);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0310 	bic.w	r3, r3, #16
 800d40e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	69b9      	ldr	r1, [r7, #24]
 800d422:	69fa      	ldr	r2, [r7, #28]
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	617b      	str	r3, [r7, #20]
   return(result);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e4      	bne.n	800d3fa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f895 	bl	800d56c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d442:	e063      	b.n	800d50c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00e      	beq.n	800d46e <HAL_UART_IRQHandler+0x6fe>
 800d450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d008      	beq.n	800d46e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fa2c 	bl	800e8c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d46c:	e051      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d476:	2b00      	cmp	r3, #0
 800d478:	d014      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d48a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d008      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d496:	2b00      	cmp	r3, #0
 800d498:	d03a      	beq.n	800d510 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	4798      	blx	r3
    }
    return;
 800d4a2:	e035      	b.n	800d510 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x754>
 800d4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d003      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 f9d6 	bl	800e86e <UART_EndTransmit_IT>
    return;
 800d4c2:	e026      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d009      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x774>
 800d4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d003      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 fa05 	bl	800e8ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4e2:	e016      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d010      	beq.n	800d512 <HAL_UART_IRQHandler+0x7a2>
 800d4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da0c      	bge.n	800d512 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f001 f9ed 	bl	800e8d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4fe:	e008      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d500:	bf00      	nop
 800d502:	e006      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d504:	bf00      	nop
 800d506:	e004      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d508:	bf00      	nop
 800d50a:	e002      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d50c:	bf00      	nop
 800d50e:	e000      	b.n	800d512 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d510:	bf00      	nop
  }
}
 800d512:	37e8      	adds	r7, #232	@ 0xe8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	effffffe 	.word	0xeffffffe

0800d51c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d588:	b092      	sub	sp, #72	@ 0x48
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	431a      	orrs	r2, r3
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	69db      	ldr	r3, [r3, #28]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4bbe      	ldr	r3, [pc, #760]	@ (800d8ac <UART_SetConfig+0x328>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	6812      	ldr	r2, [r2, #0]
 800d5ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	68da      	ldr	r2, [r3, #12]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4ab3      	ldr	r2, [pc, #716]	@ (800d8b0 <UART_SetConfig+0x32c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d004      	beq.n	800d5f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	689a      	ldr	r2, [r3, #8]
 800d5f6:	4baf      	ldr	r3, [pc, #700]	@ (800d8b4 <UART_SetConfig+0x330>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	6812      	ldr	r2, [r2, #0]
 800d5fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d600:	430b      	orrs	r3, r1
 800d602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d60a:	f023 010f 	bic.w	r1, r3, #15
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	430a      	orrs	r2, r1
 800d618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4aa6      	ldr	r2, [pc, #664]	@ (800d8b8 <UART_SetConfig+0x334>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d177      	bne.n	800d714 <UART_SetConfig+0x190>
 800d624:	4ba5      	ldr	r3, [pc, #660]	@ (800d8bc <UART_SetConfig+0x338>)
 800d626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d62c:	2b28      	cmp	r3, #40	@ 0x28
 800d62e:	d86d      	bhi.n	800d70c <UART_SetConfig+0x188>
 800d630:	a201      	add	r2, pc, #4	@ (adr r2, 800d638 <UART_SetConfig+0xb4>)
 800d632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d636:	bf00      	nop
 800d638:	0800d6dd 	.word	0x0800d6dd
 800d63c:	0800d70d 	.word	0x0800d70d
 800d640:	0800d70d 	.word	0x0800d70d
 800d644:	0800d70d 	.word	0x0800d70d
 800d648:	0800d70d 	.word	0x0800d70d
 800d64c:	0800d70d 	.word	0x0800d70d
 800d650:	0800d70d 	.word	0x0800d70d
 800d654:	0800d70d 	.word	0x0800d70d
 800d658:	0800d6e5 	.word	0x0800d6e5
 800d65c:	0800d70d 	.word	0x0800d70d
 800d660:	0800d70d 	.word	0x0800d70d
 800d664:	0800d70d 	.word	0x0800d70d
 800d668:	0800d70d 	.word	0x0800d70d
 800d66c:	0800d70d 	.word	0x0800d70d
 800d670:	0800d70d 	.word	0x0800d70d
 800d674:	0800d70d 	.word	0x0800d70d
 800d678:	0800d6ed 	.word	0x0800d6ed
 800d67c:	0800d70d 	.word	0x0800d70d
 800d680:	0800d70d 	.word	0x0800d70d
 800d684:	0800d70d 	.word	0x0800d70d
 800d688:	0800d70d 	.word	0x0800d70d
 800d68c:	0800d70d 	.word	0x0800d70d
 800d690:	0800d70d 	.word	0x0800d70d
 800d694:	0800d70d 	.word	0x0800d70d
 800d698:	0800d6f5 	.word	0x0800d6f5
 800d69c:	0800d70d 	.word	0x0800d70d
 800d6a0:	0800d70d 	.word	0x0800d70d
 800d6a4:	0800d70d 	.word	0x0800d70d
 800d6a8:	0800d70d 	.word	0x0800d70d
 800d6ac:	0800d70d 	.word	0x0800d70d
 800d6b0:	0800d70d 	.word	0x0800d70d
 800d6b4:	0800d70d 	.word	0x0800d70d
 800d6b8:	0800d6fd 	.word	0x0800d6fd
 800d6bc:	0800d70d 	.word	0x0800d70d
 800d6c0:	0800d70d 	.word	0x0800d70d
 800d6c4:	0800d70d 	.word	0x0800d70d
 800d6c8:	0800d70d 	.word	0x0800d70d
 800d6cc:	0800d70d 	.word	0x0800d70d
 800d6d0:	0800d70d 	.word	0x0800d70d
 800d6d4:	0800d70d 	.word	0x0800d70d
 800d6d8:	0800d705 	.word	0x0800d705
 800d6dc:	2301      	movs	r3, #1
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e2:	e222      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d6e4:	2304      	movs	r3, #4
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ea:	e21e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d6ec:	2308      	movs	r3, #8
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f2:	e21a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d6f4:	2310      	movs	r3, #16
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fa:	e216      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d6fc:	2320      	movs	r3, #32
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d702:	e212      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d704:	2340      	movs	r3, #64	@ 0x40
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70a:	e20e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d70c:	2380      	movs	r3, #128	@ 0x80
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e20a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a69      	ldr	r2, [pc, #420]	@ (800d8c0 <UART_SetConfig+0x33c>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d130      	bne.n	800d780 <UART_SetConfig+0x1fc>
 800d71e:	4b67      	ldr	r3, [pc, #412]	@ (800d8bc <UART_SetConfig+0x338>)
 800d720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d722:	f003 0307 	and.w	r3, r3, #7
 800d726:	2b05      	cmp	r3, #5
 800d728:	d826      	bhi.n	800d778 <UART_SetConfig+0x1f4>
 800d72a:	a201      	add	r2, pc, #4	@ (adr r2, 800d730 <UART_SetConfig+0x1ac>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d749 	.word	0x0800d749
 800d734:	0800d751 	.word	0x0800d751
 800d738:	0800d759 	.word	0x0800d759
 800d73c:	0800d761 	.word	0x0800d761
 800d740:	0800d769 	.word	0x0800d769
 800d744:	0800d771 	.word	0x0800d771
 800d748:	2300      	movs	r3, #0
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74e:	e1ec      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d750:	2304      	movs	r3, #4
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e1e8      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d758:	2308      	movs	r3, #8
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e1e4      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d760:	2310      	movs	r3, #16
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e1e0      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d768:	2320      	movs	r3, #32
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e1dc      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d770:	2340      	movs	r3, #64	@ 0x40
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e1d8      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d778:	2380      	movs	r3, #128	@ 0x80
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e1d4      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a4f      	ldr	r2, [pc, #316]	@ (800d8c4 <UART_SetConfig+0x340>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d130      	bne.n	800d7ec <UART_SetConfig+0x268>
 800d78a:	4b4c      	ldr	r3, [pc, #304]	@ (800d8bc <UART_SetConfig+0x338>)
 800d78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d78e:	f003 0307 	and.w	r3, r3, #7
 800d792:	2b05      	cmp	r3, #5
 800d794:	d826      	bhi.n	800d7e4 <UART_SetConfig+0x260>
 800d796:	a201      	add	r2, pc, #4	@ (adr r2, 800d79c <UART_SetConfig+0x218>)
 800d798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79c:	0800d7b5 	.word	0x0800d7b5
 800d7a0:	0800d7bd 	.word	0x0800d7bd
 800d7a4:	0800d7c5 	.word	0x0800d7c5
 800d7a8:	0800d7cd 	.word	0x0800d7cd
 800d7ac:	0800d7d5 	.word	0x0800d7d5
 800d7b0:	0800d7dd 	.word	0x0800d7dd
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e1b6      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7bc:	2304      	movs	r3, #4
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e1b2      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7c4:	2308      	movs	r3, #8
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e1ae      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e1aa      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e1a6      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7dc:	2340      	movs	r3, #64	@ 0x40
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e1a2      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7e4:	2380      	movs	r3, #128	@ 0x80
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e19e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a35      	ldr	r2, [pc, #212]	@ (800d8c8 <UART_SetConfig+0x344>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d130      	bne.n	800d858 <UART_SetConfig+0x2d4>
 800d7f6:	4b31      	ldr	r3, [pc, #196]	@ (800d8bc <UART_SetConfig+0x338>)
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	2b05      	cmp	r3, #5
 800d800:	d826      	bhi.n	800d850 <UART_SetConfig+0x2cc>
 800d802:	a201      	add	r2, pc, #4	@ (adr r2, 800d808 <UART_SetConfig+0x284>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d821 	.word	0x0800d821
 800d80c:	0800d829 	.word	0x0800d829
 800d810:	0800d831 	.word	0x0800d831
 800d814:	0800d839 	.word	0x0800d839
 800d818:	0800d841 	.word	0x0800d841
 800d81c:	0800d849 	.word	0x0800d849
 800d820:	2300      	movs	r3, #0
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e180      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d828:	2304      	movs	r3, #4
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e17c      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d830:	2308      	movs	r3, #8
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e178      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d838:	2310      	movs	r3, #16
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e174      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d840:	2320      	movs	r3, #32
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e170      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d848:	2340      	movs	r3, #64	@ 0x40
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e16c      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d850:	2380      	movs	r3, #128	@ 0x80
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e168      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8cc <UART_SetConfig+0x348>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d142      	bne.n	800d8e8 <UART_SetConfig+0x364>
 800d862:	4b16      	ldr	r3, [pc, #88]	@ (800d8bc <UART_SetConfig+0x338>)
 800d864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d838      	bhi.n	800d8e0 <UART_SetConfig+0x35c>
 800d86e:	a201      	add	r2, pc, #4	@ (adr r2, 800d874 <UART_SetConfig+0x2f0>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d88d 	.word	0x0800d88d
 800d878:	0800d895 	.word	0x0800d895
 800d87c:	0800d89d 	.word	0x0800d89d
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8d1 	.word	0x0800d8d1
 800d888:	0800d8d9 	.word	0x0800d8d9
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e14a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d894:	2304      	movs	r3, #4
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e146      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d89c:	2308      	movs	r3, #8
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e142      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e13e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d8ac:	cfff69f3 	.word	0xcfff69f3
 800d8b0:	58000c00 	.word	0x58000c00
 800d8b4:	11fff4ff 	.word	0x11fff4ff
 800d8b8:	40011000 	.word	0x40011000
 800d8bc:	58024400 	.word	0x58024400
 800d8c0:	40004400 	.word	0x40004400
 800d8c4:	40004800 	.word	0x40004800
 800d8c8:	40004c00 	.word	0x40004c00
 800d8cc:	40005000 	.word	0x40005000
 800d8d0:	2320      	movs	r3, #32
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e128      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d8d8:	2340      	movs	r3, #64	@ 0x40
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e124      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d8e0:	2380      	movs	r3, #128	@ 0x80
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e120      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4acb      	ldr	r2, [pc, #812]	@ (800dc1c <UART_SetConfig+0x698>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d176      	bne.n	800d9e0 <UART_SetConfig+0x45c>
 800d8f2:	4bcb      	ldr	r3, [pc, #812]	@ (800dc20 <UART_SetConfig+0x69c>)
 800d8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d8fa:	2b28      	cmp	r3, #40	@ 0x28
 800d8fc:	d86c      	bhi.n	800d9d8 <UART_SetConfig+0x454>
 800d8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d904 <UART_SetConfig+0x380>)
 800d900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d904:	0800d9a9 	.word	0x0800d9a9
 800d908:	0800d9d9 	.word	0x0800d9d9
 800d90c:	0800d9d9 	.word	0x0800d9d9
 800d910:	0800d9d9 	.word	0x0800d9d9
 800d914:	0800d9d9 	.word	0x0800d9d9
 800d918:	0800d9d9 	.word	0x0800d9d9
 800d91c:	0800d9d9 	.word	0x0800d9d9
 800d920:	0800d9d9 	.word	0x0800d9d9
 800d924:	0800d9b1 	.word	0x0800d9b1
 800d928:	0800d9d9 	.word	0x0800d9d9
 800d92c:	0800d9d9 	.word	0x0800d9d9
 800d930:	0800d9d9 	.word	0x0800d9d9
 800d934:	0800d9d9 	.word	0x0800d9d9
 800d938:	0800d9d9 	.word	0x0800d9d9
 800d93c:	0800d9d9 	.word	0x0800d9d9
 800d940:	0800d9d9 	.word	0x0800d9d9
 800d944:	0800d9b9 	.word	0x0800d9b9
 800d948:	0800d9d9 	.word	0x0800d9d9
 800d94c:	0800d9d9 	.word	0x0800d9d9
 800d950:	0800d9d9 	.word	0x0800d9d9
 800d954:	0800d9d9 	.word	0x0800d9d9
 800d958:	0800d9d9 	.word	0x0800d9d9
 800d95c:	0800d9d9 	.word	0x0800d9d9
 800d960:	0800d9d9 	.word	0x0800d9d9
 800d964:	0800d9c1 	.word	0x0800d9c1
 800d968:	0800d9d9 	.word	0x0800d9d9
 800d96c:	0800d9d9 	.word	0x0800d9d9
 800d970:	0800d9d9 	.word	0x0800d9d9
 800d974:	0800d9d9 	.word	0x0800d9d9
 800d978:	0800d9d9 	.word	0x0800d9d9
 800d97c:	0800d9d9 	.word	0x0800d9d9
 800d980:	0800d9d9 	.word	0x0800d9d9
 800d984:	0800d9c9 	.word	0x0800d9c9
 800d988:	0800d9d9 	.word	0x0800d9d9
 800d98c:	0800d9d9 	.word	0x0800d9d9
 800d990:	0800d9d9 	.word	0x0800d9d9
 800d994:	0800d9d9 	.word	0x0800d9d9
 800d998:	0800d9d9 	.word	0x0800d9d9
 800d99c:	0800d9d9 	.word	0x0800d9d9
 800d9a0:	0800d9d9 	.word	0x0800d9d9
 800d9a4:	0800d9d1 	.word	0x0800d9d1
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ae:	e0bc      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9b0:	2304      	movs	r3, #4
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e0b8      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9b8:	2308      	movs	r3, #8
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e0b4      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9c0:	2310      	movs	r3, #16
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c6:	e0b0      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9c8:	2320      	movs	r3, #32
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e0ac      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9d0:	2340      	movs	r3, #64	@ 0x40
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e0a8      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9d8:	2380      	movs	r3, #128	@ 0x80
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e0a4      	b.n	800db2a <UART_SetConfig+0x5a6>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a8f      	ldr	r2, [pc, #572]	@ (800dc24 <UART_SetConfig+0x6a0>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d130      	bne.n	800da4c <UART_SetConfig+0x4c8>
 800d9ea:	4b8d      	ldr	r3, [pc, #564]	@ (800dc20 <UART_SetConfig+0x69c>)
 800d9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ee:	f003 0307 	and.w	r3, r3, #7
 800d9f2:	2b05      	cmp	r3, #5
 800d9f4:	d826      	bhi.n	800da44 <UART_SetConfig+0x4c0>
 800d9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9fc <UART_SetConfig+0x478>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800da15 	.word	0x0800da15
 800da00:	0800da1d 	.word	0x0800da1d
 800da04:	0800da25 	.word	0x0800da25
 800da08:	0800da2d 	.word	0x0800da2d
 800da0c:	0800da35 	.word	0x0800da35
 800da10:	0800da3d 	.word	0x0800da3d
 800da14:	2300      	movs	r3, #0
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e086      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da1c:	2304      	movs	r3, #4
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e082      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da24:	2308      	movs	r3, #8
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e07e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da2c:	2310      	movs	r3, #16
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e07a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da34:	2320      	movs	r3, #32
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e076      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da3c:	2340      	movs	r3, #64	@ 0x40
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e072      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da44:	2380      	movs	r3, #128	@ 0x80
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e06e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a75      	ldr	r2, [pc, #468]	@ (800dc28 <UART_SetConfig+0x6a4>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d130      	bne.n	800dab8 <UART_SetConfig+0x534>
 800da56:	4b72      	ldr	r3, [pc, #456]	@ (800dc20 <UART_SetConfig+0x69c>)
 800da58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	2b05      	cmp	r3, #5
 800da60:	d826      	bhi.n	800dab0 <UART_SetConfig+0x52c>
 800da62:	a201      	add	r2, pc, #4	@ (adr r2, 800da68 <UART_SetConfig+0x4e4>)
 800da64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da68:	0800da81 	.word	0x0800da81
 800da6c:	0800da89 	.word	0x0800da89
 800da70:	0800da91 	.word	0x0800da91
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800daa1 	.word	0x0800daa1
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e050      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da88:	2304      	movs	r3, #4
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e04c      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da90:	2308      	movs	r3, #8
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e048      	b.n	800db2a <UART_SetConfig+0x5a6>
 800da98:	2310      	movs	r3, #16
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9e:	e044      	b.n	800db2a <UART_SetConfig+0x5a6>
 800daa0:	2320      	movs	r3, #32
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e040      	b.n	800db2a <UART_SetConfig+0x5a6>
 800daa8:	2340      	movs	r3, #64	@ 0x40
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e03c      	b.n	800db2a <UART_SetConfig+0x5a6>
 800dab0:	2380      	movs	r3, #128	@ 0x80
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e038      	b.n	800db2a <UART_SetConfig+0x5a6>
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a5b      	ldr	r2, [pc, #364]	@ (800dc2c <UART_SetConfig+0x6a8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d130      	bne.n	800db24 <UART_SetConfig+0x5a0>
 800dac2:	4b57      	ldr	r3, [pc, #348]	@ (800dc20 <UART_SetConfig+0x69c>)
 800dac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dac6:	f003 0307 	and.w	r3, r3, #7
 800daca:	2b05      	cmp	r3, #5
 800dacc:	d826      	bhi.n	800db1c <UART_SetConfig+0x598>
 800dace:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <UART_SetConfig+0x550>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800daed 	.word	0x0800daed
 800dad8:	0800daf5 	.word	0x0800daf5
 800dadc:	0800dafd 	.word	0x0800dafd
 800dae0:	0800db05 	.word	0x0800db05
 800dae4:	0800db0d 	.word	0x0800db0d
 800dae8:	0800db15 	.word	0x0800db15
 800daec:	2302      	movs	r3, #2
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf2:	e01a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800daf4:	2304      	movs	r3, #4
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e016      	b.n	800db2a <UART_SetConfig+0x5a6>
 800dafc:	2308      	movs	r3, #8
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e012      	b.n	800db2a <UART_SetConfig+0x5a6>
 800db04:	2310      	movs	r3, #16
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e00e      	b.n	800db2a <UART_SetConfig+0x5a6>
 800db0c:	2320      	movs	r3, #32
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e00a      	b.n	800db2a <UART_SetConfig+0x5a6>
 800db14:	2340      	movs	r3, #64	@ 0x40
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e006      	b.n	800db2a <UART_SetConfig+0x5a6>
 800db1c:	2380      	movs	r3, #128	@ 0x80
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e002      	b.n	800db2a <UART_SetConfig+0x5a6>
 800db24:	2380      	movs	r3, #128	@ 0x80
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a3f      	ldr	r2, [pc, #252]	@ (800dc2c <UART_SetConfig+0x6a8>)
 800db30:	4293      	cmp	r3, r2
 800db32:	f040 80f8 	bne.w	800dd26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db3a:	2b20      	cmp	r3, #32
 800db3c:	dc46      	bgt.n	800dbcc <UART_SetConfig+0x648>
 800db3e:	2b02      	cmp	r3, #2
 800db40:	f2c0 8082 	blt.w	800dc48 <UART_SetConfig+0x6c4>
 800db44:	3b02      	subs	r3, #2
 800db46:	2b1e      	cmp	r3, #30
 800db48:	d87e      	bhi.n	800dc48 <UART_SetConfig+0x6c4>
 800db4a:	a201      	add	r2, pc, #4	@ (adr r2, 800db50 <UART_SetConfig+0x5cc>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800dbd3 	.word	0x0800dbd3
 800db54:	0800dc49 	.word	0x0800dc49
 800db58:	0800dbdb 	.word	0x0800dbdb
 800db5c:	0800dc49 	.word	0x0800dc49
 800db60:	0800dc49 	.word	0x0800dc49
 800db64:	0800dc49 	.word	0x0800dc49
 800db68:	0800dbeb 	.word	0x0800dbeb
 800db6c:	0800dc49 	.word	0x0800dc49
 800db70:	0800dc49 	.word	0x0800dc49
 800db74:	0800dc49 	.word	0x0800dc49
 800db78:	0800dc49 	.word	0x0800dc49
 800db7c:	0800dc49 	.word	0x0800dc49
 800db80:	0800dc49 	.word	0x0800dc49
 800db84:	0800dc49 	.word	0x0800dc49
 800db88:	0800dbfb 	.word	0x0800dbfb
 800db8c:	0800dc49 	.word	0x0800dc49
 800db90:	0800dc49 	.word	0x0800dc49
 800db94:	0800dc49 	.word	0x0800dc49
 800db98:	0800dc49 	.word	0x0800dc49
 800db9c:	0800dc49 	.word	0x0800dc49
 800dba0:	0800dc49 	.word	0x0800dc49
 800dba4:	0800dc49 	.word	0x0800dc49
 800dba8:	0800dc49 	.word	0x0800dc49
 800dbac:	0800dc49 	.word	0x0800dc49
 800dbb0:	0800dc49 	.word	0x0800dc49
 800dbb4:	0800dc49 	.word	0x0800dc49
 800dbb8:	0800dc49 	.word	0x0800dc49
 800dbbc:	0800dc49 	.word	0x0800dc49
 800dbc0:	0800dc49 	.word	0x0800dc49
 800dbc4:	0800dc49 	.word	0x0800dc49
 800dbc8:	0800dc3b 	.word	0x0800dc3b
 800dbcc:	2b40      	cmp	r3, #64	@ 0x40
 800dbce:	d037      	beq.n	800dc40 <UART_SetConfig+0x6bc>
 800dbd0:	e03a      	b.n	800dc48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbd2:	f7fb f901 	bl	8008dd8 <HAL_RCCEx_GetD3PCLK1Freq>
 800dbd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbd8:	e03c      	b.n	800dc54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fb f910 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbe8:	e034      	b.n	800dc54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbea:	f107 0318 	add.w	r3, r7, #24
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fb fa5c 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbf8:	e02c      	b.n	800dc54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbfa:	4b09      	ldr	r3, [pc, #36]	@ (800dc20 <UART_SetConfig+0x69c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 0320 	and.w	r3, r3, #32
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d016      	beq.n	800dc34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc06:	4b06      	ldr	r3, [pc, #24]	@ (800dc20 <UART_SetConfig+0x69c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	08db      	lsrs	r3, r3, #3
 800dc0c:	f003 0303 	and.w	r3, r3, #3
 800dc10:	4a07      	ldr	r2, [pc, #28]	@ (800dc30 <UART_SetConfig+0x6ac>)
 800dc12:	fa22 f303 	lsr.w	r3, r2, r3
 800dc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc18:	e01c      	b.n	800dc54 <UART_SetConfig+0x6d0>
 800dc1a:	bf00      	nop
 800dc1c:	40011400 	.word	0x40011400
 800dc20:	58024400 	.word	0x58024400
 800dc24:	40007800 	.word	0x40007800
 800dc28:	40007c00 	.word	0x40007c00
 800dc2c:	58000c00 	.word	0x58000c00
 800dc30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dc34:	4b9d      	ldr	r3, [pc, #628]	@ (800deac <UART_SetConfig+0x928>)
 800dc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc38:	e00c      	b.n	800dc54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc3a:	4b9d      	ldr	r3, [pc, #628]	@ (800deb0 <UART_SetConfig+0x92c>)
 800dc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc3e:	e009      	b.n	800dc54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc46:	e005      	b.n	800dc54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 81de 	beq.w	800e018 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc60:	4a94      	ldr	r2, [pc, #592]	@ (800deb4 <UART_SetConfig+0x930>)
 800dc62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc66:	461a      	mov	r2, r3
 800dc68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	4613      	mov	r3, r2
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	4413      	add	r3, r2
 800dc7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d305      	bcc.n	800dc8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d903      	bls.n	800dc94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc92:	e1c1      	b.n	800e018 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc96:	2200      	movs	r2, #0
 800dc98:	60bb      	str	r3, [r7, #8]
 800dc9a:	60fa      	str	r2, [r7, #12]
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca0:	4a84      	ldr	r2, [pc, #528]	@ (800deb4 <UART_SetConfig+0x930>)
 800dca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	2200      	movs	r2, #0
 800dcaa:	603b      	str	r3, [r7, #0]
 800dcac:	607a      	str	r2, [r7, #4]
 800dcae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcb6:	f7f2 fb63 	bl	8000380 <__aeabi_uldivmod>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	f04f 0300 	mov.w	r3, #0
 800dcca:	020b      	lsls	r3, r1, #8
 800dccc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcd0:	0202      	lsls	r2, r0, #8
 800dcd2:	6979      	ldr	r1, [r7, #20]
 800dcd4:	6849      	ldr	r1, [r1, #4]
 800dcd6:	0849      	lsrs	r1, r1, #1
 800dcd8:	2000      	movs	r0, #0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	4605      	mov	r5, r0
 800dcde:	eb12 0804 	adds.w	r8, r2, r4
 800dce2:	eb43 0905 	adc.w	r9, r3, r5
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	469a      	mov	sl, r3
 800dcee:	4693      	mov	fp, r2
 800dcf0:	4652      	mov	r2, sl
 800dcf2:	465b      	mov	r3, fp
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	f7f2 fb42 	bl	8000380 <__aeabi_uldivmod>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4613      	mov	r3, r2
 800dd02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd0a:	d308      	bcc.n	800dd1e <UART_SetConfig+0x79a>
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd12:	d204      	bcs.n	800dd1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd1a:	60da      	str	r2, [r3, #12]
 800dd1c:	e17c      	b.n	800e018 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd24:	e178      	b.n	800e018 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd2e:	f040 80c5 	bne.w	800debc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd36:	2b20      	cmp	r3, #32
 800dd38:	dc48      	bgt.n	800ddcc <UART_SetConfig+0x848>
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db7b      	blt.n	800de36 <UART_SetConfig+0x8b2>
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	d879      	bhi.n	800de36 <UART_SetConfig+0x8b2>
 800dd42:	a201      	add	r2, pc, #4	@ (adr r2, 800dd48 <UART_SetConfig+0x7c4>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800ddd3 	.word	0x0800ddd3
 800dd4c:	0800dddb 	.word	0x0800dddb
 800dd50:	0800de37 	.word	0x0800de37
 800dd54:	0800de37 	.word	0x0800de37
 800dd58:	0800dde3 	.word	0x0800dde3
 800dd5c:	0800de37 	.word	0x0800de37
 800dd60:	0800de37 	.word	0x0800de37
 800dd64:	0800de37 	.word	0x0800de37
 800dd68:	0800ddf3 	.word	0x0800ddf3
 800dd6c:	0800de37 	.word	0x0800de37
 800dd70:	0800de37 	.word	0x0800de37
 800dd74:	0800de37 	.word	0x0800de37
 800dd78:	0800de37 	.word	0x0800de37
 800dd7c:	0800de37 	.word	0x0800de37
 800dd80:	0800de37 	.word	0x0800de37
 800dd84:	0800de37 	.word	0x0800de37
 800dd88:	0800de03 	.word	0x0800de03
 800dd8c:	0800de37 	.word	0x0800de37
 800dd90:	0800de37 	.word	0x0800de37
 800dd94:	0800de37 	.word	0x0800de37
 800dd98:	0800de37 	.word	0x0800de37
 800dd9c:	0800de37 	.word	0x0800de37
 800dda0:	0800de37 	.word	0x0800de37
 800dda4:	0800de37 	.word	0x0800de37
 800dda8:	0800de37 	.word	0x0800de37
 800ddac:	0800de37 	.word	0x0800de37
 800ddb0:	0800de37 	.word	0x0800de37
 800ddb4:	0800de37 	.word	0x0800de37
 800ddb8:	0800de37 	.word	0x0800de37
 800ddbc:	0800de37 	.word	0x0800de37
 800ddc0:	0800de37 	.word	0x0800de37
 800ddc4:	0800de37 	.word	0x0800de37
 800ddc8:	0800de29 	.word	0x0800de29
 800ddcc:	2b40      	cmp	r3, #64	@ 0x40
 800ddce:	d02e      	beq.n	800de2e <UART_SetConfig+0x8aa>
 800ddd0:	e031      	b.n	800de36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddd2:	f7f9 f809 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 800ddd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddd8:	e033      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddda:	f7f9 f81b 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 800ddde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dde0:	e02f      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dde2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fb f80c 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddf0:	e027      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddf2:	f107 0318 	add.w	r3, r7, #24
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fb f958 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de00:	e01f      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de02:	4b2d      	ldr	r3, [pc, #180]	@ (800deb8 <UART_SetConfig+0x934>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f003 0320 	and.w	r3, r3, #32
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d009      	beq.n	800de22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de0e:	4b2a      	ldr	r3, [pc, #168]	@ (800deb8 <UART_SetConfig+0x934>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	08db      	lsrs	r3, r3, #3
 800de14:	f003 0303 	and.w	r3, r3, #3
 800de18:	4a24      	ldr	r2, [pc, #144]	@ (800deac <UART_SetConfig+0x928>)
 800de1a:	fa22 f303 	lsr.w	r3, r2, r3
 800de1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de20:	e00f      	b.n	800de42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de22:	4b22      	ldr	r3, [pc, #136]	@ (800deac <UART_SetConfig+0x928>)
 800de24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de26:	e00c      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de28:	4b21      	ldr	r3, [pc, #132]	@ (800deb0 <UART_SetConfig+0x92c>)
 800de2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de2c:	e009      	b.n	800de42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de34:	e005      	b.n	800de42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80e7 	beq.w	800e018 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4e:	4a19      	ldr	r2, [pc, #100]	@ (800deb4 <UART_SetConfig+0x930>)
 800de50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de54:	461a      	mov	r2, r3
 800de56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de58:	fbb3 f3f2 	udiv	r3, r3, r2
 800de5c:	005a      	lsls	r2, r3, #1
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	085b      	lsrs	r3, r3, #1
 800de64:	441a      	add	r2, r3
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de72:	2b0f      	cmp	r3, #15
 800de74:	d916      	bls.n	800dea4 <UART_SetConfig+0x920>
 800de76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de7c:	d212      	bcs.n	800dea4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de80:	b29b      	uxth	r3, r3
 800de82:	f023 030f 	bic.w	r3, r3, #15
 800de86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	085b      	lsrs	r3, r3, #1
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	f003 0307 	and.w	r3, r3, #7
 800de92:	b29a      	uxth	r2, r3
 800de94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de96:	4313      	orrs	r3, r2
 800de98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dea0:	60da      	str	r2, [r3, #12]
 800dea2:	e0b9      	b.n	800e018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800deaa:	e0b5      	b.n	800e018 <UART_SetConfig+0xa94>
 800deac:	03d09000 	.word	0x03d09000
 800deb0:	003d0900 	.word	0x003d0900
 800deb4:	0801b29c 	.word	0x0801b29c
 800deb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800debc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dec0:	2b20      	cmp	r3, #32
 800dec2:	dc49      	bgt.n	800df58 <UART_SetConfig+0x9d4>
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	db7c      	blt.n	800dfc2 <UART_SetConfig+0xa3e>
 800dec8:	2b20      	cmp	r3, #32
 800deca:	d87a      	bhi.n	800dfc2 <UART_SetConfig+0xa3e>
 800decc:	a201      	add	r2, pc, #4	@ (adr r2, 800ded4 <UART_SetConfig+0x950>)
 800dece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded2:	bf00      	nop
 800ded4:	0800df5f 	.word	0x0800df5f
 800ded8:	0800df67 	.word	0x0800df67
 800dedc:	0800dfc3 	.word	0x0800dfc3
 800dee0:	0800dfc3 	.word	0x0800dfc3
 800dee4:	0800df6f 	.word	0x0800df6f
 800dee8:	0800dfc3 	.word	0x0800dfc3
 800deec:	0800dfc3 	.word	0x0800dfc3
 800def0:	0800dfc3 	.word	0x0800dfc3
 800def4:	0800df7f 	.word	0x0800df7f
 800def8:	0800dfc3 	.word	0x0800dfc3
 800defc:	0800dfc3 	.word	0x0800dfc3
 800df00:	0800dfc3 	.word	0x0800dfc3
 800df04:	0800dfc3 	.word	0x0800dfc3
 800df08:	0800dfc3 	.word	0x0800dfc3
 800df0c:	0800dfc3 	.word	0x0800dfc3
 800df10:	0800dfc3 	.word	0x0800dfc3
 800df14:	0800df8f 	.word	0x0800df8f
 800df18:	0800dfc3 	.word	0x0800dfc3
 800df1c:	0800dfc3 	.word	0x0800dfc3
 800df20:	0800dfc3 	.word	0x0800dfc3
 800df24:	0800dfc3 	.word	0x0800dfc3
 800df28:	0800dfc3 	.word	0x0800dfc3
 800df2c:	0800dfc3 	.word	0x0800dfc3
 800df30:	0800dfc3 	.word	0x0800dfc3
 800df34:	0800dfc3 	.word	0x0800dfc3
 800df38:	0800dfc3 	.word	0x0800dfc3
 800df3c:	0800dfc3 	.word	0x0800dfc3
 800df40:	0800dfc3 	.word	0x0800dfc3
 800df44:	0800dfc3 	.word	0x0800dfc3
 800df48:	0800dfc3 	.word	0x0800dfc3
 800df4c:	0800dfc3 	.word	0x0800dfc3
 800df50:	0800dfc3 	.word	0x0800dfc3
 800df54:	0800dfb5 	.word	0x0800dfb5
 800df58:	2b40      	cmp	r3, #64	@ 0x40
 800df5a:	d02e      	beq.n	800dfba <UART_SetConfig+0xa36>
 800df5c:	e031      	b.n	800dfc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df5e:	f7f8 ff43 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 800df62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df64:	e033      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df66:	f7f8 ff55 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 800df6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df6c:	e02f      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df72:	4618      	mov	r0, r3
 800df74:	f7fa ff46 	bl	8008e04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df7c:	e027      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df7e:	f107 0318 	add.w	r3, r7, #24
 800df82:	4618      	mov	r0, r3
 800df84:	f7fb f892 	bl	80090ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df8c:	e01f      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df8e:	4b2d      	ldr	r3, [pc, #180]	@ (800e044 <UART_SetConfig+0xac0>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b00      	cmp	r3, #0
 800df98:	d009      	beq.n	800dfae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df9a:	4b2a      	ldr	r3, [pc, #168]	@ (800e044 <UART_SetConfig+0xac0>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	08db      	lsrs	r3, r3, #3
 800dfa0:	f003 0303 	and.w	r3, r3, #3
 800dfa4:	4a28      	ldr	r2, [pc, #160]	@ (800e048 <UART_SetConfig+0xac4>)
 800dfa6:	fa22 f303 	lsr.w	r3, r2, r3
 800dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfac:	e00f      	b.n	800dfce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dfae:	4b26      	ldr	r3, [pc, #152]	@ (800e048 <UART_SetConfig+0xac4>)
 800dfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfb2:	e00c      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfb4:	4b25      	ldr	r3, [pc, #148]	@ (800e04c <UART_SetConfig+0xac8>)
 800dfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfb8:	e009      	b.n	800dfce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfc0:	e005      	b.n	800dfce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dfcc:	bf00      	nop
    }

    if (pclk != 0U)
 800dfce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d021      	beq.n	800e018 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd8:	4a1d      	ldr	r2, [pc, #116]	@ (800e050 <UART_SetConfig+0xacc>)
 800dfda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe2:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	441a      	add	r2, r3
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	2b0f      	cmp	r3, #15
 800dffc:	d909      	bls.n	800e012 <UART_SetConfig+0xa8e>
 800dffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e004:	d205      	bcs.n	800e012 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e008:	b29a      	uxth	r2, r3
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60da      	str	r2, [r3, #12]
 800e010:	e002      	b.n	800e018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2201      	movs	r2, #1
 800e024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2200      	movs	r2, #0
 800e02c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	2200      	movs	r2, #0
 800e032:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e034:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3748      	adds	r7, #72	@ 0x48
 800e03c:	46bd      	mov	sp, r7
 800e03e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e042:	bf00      	nop
 800e044:	58024400 	.word	0x58024400
 800e048:	03d09000 	.word	0x03d09000
 800e04c:	003d0900 	.word	0x003d0900
 800e050:	0801b29c 	.word	0x0801b29c

0800e054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e060:	f003 0308 	and.w	r3, r3, #8
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00a      	beq.n	800e07e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	430a      	orrs	r2, r1
 800e07c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a4:	f003 0302 	and.w	r3, r3, #2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c6:	f003 0304 	and.w	r3, r3, #4
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00a      	beq.n	800e0e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e8:	f003 0310 	and.w	r3, r3, #16
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00a      	beq.n	800e106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	430a      	orrs	r2, r1
 800e104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e10a:	f003 0320 	and.w	r3, r3, #32
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	430a      	orrs	r2, r1
 800e126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e130:	2b00      	cmp	r3, #0
 800e132:	d01a      	beq.n	800e16a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e14e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e152:	d10a      	bne.n	800e16a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	430a      	orrs	r2, r1
 800e168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00a      	beq.n	800e18c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	430a      	orrs	r2, r1
 800e18a:	605a      	str	r2, [r3, #4]
  }
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b098      	sub	sp, #96	@ 0x60
 800e19c:	af02      	add	r7, sp, #8
 800e19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1a8:	f7f4 fcbc 	bl	8002b24 <HAL_GetTick>
 800e1ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 0308 	and.w	r3, r3, #8
 800e1b8:	2b08      	cmp	r3, #8
 800e1ba:	d12f      	bne.n	800e21c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f88e 	bl	800e2ec <UART_WaitOnFlagUntilTimeout>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d022      	beq.n	800e21c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1de:	e853 3f00 	ldrex	r3, [r3]
 800e1e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e1fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1fc:	e841 2300 	strex	r3, r2, [r1]
 800e200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e6      	bne.n	800e1d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2220      	movs	r2, #32
 800e20c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e218:	2303      	movs	r3, #3
 800e21a:	e063      	b.n	800e2e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f003 0304 	and.w	r3, r3, #4
 800e226:	2b04      	cmp	r3, #4
 800e228:	d149      	bne.n	800e2be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e22a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e232:	2200      	movs	r2, #0
 800e234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f857 	bl	800e2ec <UART_WaitOnFlagUntilTimeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d03c      	beq.n	800e2be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24c:	e853 3f00 	ldrex	r3, [r3]
 800e250:	623b      	str	r3, [r7, #32]
   return(result);
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e262:	633b      	str	r3, [r7, #48]	@ 0x30
 800e264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e26a:	e841 2300 	strex	r3, r2, [r1]
 800e26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1e6      	bne.n	800e244 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3308      	adds	r3, #8
 800e27c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	e853 3f00 	ldrex	r3, [r3]
 800e284:	60fb      	str	r3, [r7, #12]
   return(result);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f023 0301 	bic.w	r3, r3, #1
 800e28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3308      	adds	r3, #8
 800e294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e296:	61fa      	str	r2, [r7, #28]
 800e298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29a:	69b9      	ldr	r1, [r7, #24]
 800e29c:	69fa      	ldr	r2, [r7, #28]
 800e29e:	e841 2300 	strex	r3, r2, [r1]
 800e2a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1e5      	bne.n	800e276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	e012      	b.n	800e2e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2220      	movs	r2, #32
 800e2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2220      	movs	r2, #32
 800e2ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3758      	adds	r7, #88	@ 0x58
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	603b      	str	r3, [r7, #0]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2fc:	e04f      	b.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d04b      	beq.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e306:	f7f4 fc0d 	bl	8002b24 <HAL_GetTick>
 800e30a:	4602      	mov	r2, r0
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	69ba      	ldr	r2, [r7, #24]
 800e312:	429a      	cmp	r2, r3
 800e314:	d302      	bcc.n	800e31c <UART_WaitOnFlagUntilTimeout+0x30>
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e04e      	b.n	800e3be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f003 0304 	and.w	r3, r3, #4
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d037      	beq.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b80      	cmp	r3, #128	@ 0x80
 800e332:	d034      	beq.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2b40      	cmp	r3, #64	@ 0x40
 800e338:	d031      	beq.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	69db      	ldr	r3, [r3, #28]
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b08      	cmp	r3, #8
 800e346:	d110      	bne.n	800e36a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2208      	movs	r2, #8
 800e34e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f921 	bl	800e598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2208      	movs	r2, #8
 800e35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e029      	b.n	800e3be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	69db      	ldr	r3, [r3, #28]
 800e370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e378:	d111      	bne.n	800e39e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 f907 	bl	800e598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2220      	movs	r2, #32
 800e38e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e00f      	b.n	800e3be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	69da      	ldr	r2, [r3, #28]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	bf0c      	ite	eq
 800e3ae:	2301      	moveq	r3, #1
 800e3b0:	2300      	movne	r3, #0
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d0a0      	beq.n	800e2fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b096      	sub	sp, #88	@ 0x58
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	88fa      	ldrh	r2, [r7, #6]
 800e3e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2222      	movs	r2, #34	@ 0x22
 800e3f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d02d      	beq.n	800e45a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e404:	4a40      	ldr	r2, [pc, #256]	@ (800e508 <UART_Start_Receive_DMA+0x140>)
 800e406:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e40e:	4a3f      	ldr	r2, [pc, #252]	@ (800e50c <UART_Start_Receive_DMA+0x144>)
 800e410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e418:	4a3d      	ldr	r2, [pc, #244]	@ (800e510 <UART_Start_Receive_DMA+0x148>)
 800e41a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e422:	2200      	movs	r2, #0
 800e424:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3324      	adds	r3, #36	@ 0x24
 800e432:	4619      	mov	r1, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e438:	461a      	mov	r2, r3
 800e43a:	88fb      	ldrh	r3, [r7, #6]
 800e43c:	f7f4 ffea 	bl	8003414 <HAL_DMA_Start_IT>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d009      	beq.n	800e45a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2210      	movs	r2, #16
 800e44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2220      	movs	r2, #32
 800e452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e051      	b.n	800e4fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d018      	beq.n	800e494 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e46a:	e853 3f00 	ldrex	r3, [r3]
 800e46e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e476:	657b      	str	r3, [r7, #84]	@ 0x54
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	461a      	mov	r2, r3
 800e47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e480:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e482:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e488:	e841 2300 	strex	r3, r2, [r1]
 800e48c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e6      	bne.n	800e462 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3308      	adds	r3, #8
 800e49a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	e853 3f00 	ldrex	r3, [r3]
 800e4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e4b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800e4b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4bc:	e841 2300 	strex	r3, r2, [r1]
 800e4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1e5      	bne.n	800e494 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3308      	adds	r3, #8
 800e4ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	e853 3f00 	ldrex	r3, [r3]
 800e4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3308      	adds	r3, #8
 800e4e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4e8:	623a      	str	r2, [r7, #32]
 800e4ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ec:	69f9      	ldr	r1, [r7, #28]
 800e4ee:	6a3a      	ldr	r2, [r7, #32]
 800e4f0:	e841 2300 	strex	r3, r2, [r1]
 800e4f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1e5      	bne.n	800e4c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3758      	adds	r7, #88	@ 0x58
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	0800e665 	.word	0x0800e665
 800e50c:	0800e78d 	.word	0x0800e78d
 800e510:	0800e7cb 	.word	0x0800e7cb

0800e514 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e514:	b480      	push	{r7}
 800e516:	b08f      	sub	sp, #60	@ 0x3c
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	e853 3f00 	ldrex	r3, [r3]
 800e528:	61fb      	str	r3, [r7, #28]
   return(result);
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e530:	637b      	str	r3, [r7, #52]	@ 0x34
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e53c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e542:	e841 2300 	strex	r3, r2, [r1]
 800e546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1e6      	bne.n	800e51c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	e853 3f00 	ldrex	r3, [r3]
 800e55c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e564:	633b      	str	r3, [r7, #48]	@ 0x30
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	3308      	adds	r3, #8
 800e56c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e56e:	61ba      	str	r2, [r7, #24]
 800e570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e572:	6979      	ldr	r1, [r7, #20]
 800e574:	69ba      	ldr	r2, [r7, #24]
 800e576:	e841 2300 	strex	r3, r2, [r1]
 800e57a:	613b      	str	r3, [r7, #16]
   return(result);
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1e5      	bne.n	800e54e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2220      	movs	r2, #32
 800e586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e58a:	bf00      	nop
 800e58c:	373c      	adds	r7, #60	@ 0x3c
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
	...

0800e598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e598:	b480      	push	{r7}
 800e59a:	b095      	sub	sp, #84	@ 0x54
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5a8:	e853 3f00 	ldrex	r3, [r3]
 800e5ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e5b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5be:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e5c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5c6:	e841 2300 	strex	r3, r2, [r1]
 800e5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e6      	bne.n	800e5a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	e853 3f00 	ldrex	r3, [r3]
 800e5e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5e2:	69fa      	ldr	r2, [r7, #28]
 800e5e4:	4b1e      	ldr	r3, [pc, #120]	@ (800e660 <UART_EndRxTransfer+0xc8>)
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5fa:	e841 2300 	strex	r3, r2, [r1]
 800e5fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1e5      	bne.n	800e5d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d118      	bne.n	800e640 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	e853 3f00 	ldrex	r3, [r3]
 800e61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f023 0310 	bic.w	r3, r3, #16
 800e622:	647b      	str	r3, [r7, #68]	@ 0x44
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	461a      	mov	r2, r3
 800e62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e62c:	61bb      	str	r3, [r7, #24]
 800e62e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e630:	6979      	ldr	r1, [r7, #20]
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	e841 2300 	strex	r3, r2, [r1]
 800e638:	613b      	str	r3, [r7, #16]
   return(result);
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1e6      	bne.n	800e60e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2220      	movs	r2, #32
 800e644:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e654:	bf00      	nop
 800e656:	3754      	adds	r7, #84	@ 0x54
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	effffffe 	.word	0xeffffffe

0800e664 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b09c      	sub	sp, #112	@ 0x70
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e670:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	69db      	ldr	r3, [r3, #28]
 800e676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e67a:	d071      	beq.n	800e760 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e67e:	2200      	movs	r2, #0
 800e680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e68c:	e853 3f00 	ldrex	r3, [r3]
 800e690:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e6a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6aa:	e841 2300 	strex	r3, r2, [r1]
 800e6ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e6b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1e6      	bne.n	800e684 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6c8:	f023 0301 	bic.w	r3, r3, #1
 800e6cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3308      	adds	r3, #8
 800e6d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e6d6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e6d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6de:	e841 2300 	strex	r3, r2, [r1]
 800e6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1e5      	bne.n	800e6b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3308      	adds	r3, #8
 800e6f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f4:	e853 3f00 	ldrex	r3, [r3]
 800e6f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e700:	663b      	str	r3, [r7, #96]	@ 0x60
 800e702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3308      	adds	r3, #8
 800e708:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e70a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e712:	e841 2300 	strex	r3, r2, [r1]
 800e716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1e5      	bne.n	800e6ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e71e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e720:	2220      	movs	r2, #32
 800e722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d118      	bne.n	800e760 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e72e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	e853 3f00 	ldrex	r3, [r3]
 800e73a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f023 0310 	bic.w	r3, r3, #16
 800e742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	461a      	mov	r2, r3
 800e74a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e74c:	61fb      	str	r3, [r7, #28]
 800e74e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e750:	69b9      	ldr	r1, [r7, #24]
 800e752:	69fa      	ldr	r2, [r7, #28]
 800e754:	e841 2300 	strex	r3, r2, [r1]
 800e758:	617b      	str	r3, [r7, #20]
   return(result);
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d1e6      	bne.n	800e72e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e762:	2200      	movs	r2, #0
 800e764:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d107      	bne.n	800e77e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e76e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e774:	4619      	mov	r1, r3
 800e776:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e778:	f7fe fef8 	bl	800d56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e77c:	e002      	b.n	800e784 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e77e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e780:	f7fe fed6 	bl	800d530 <HAL_UART_RxCpltCallback>
}
 800e784:	bf00      	nop
 800e786:	3770      	adds	r7, #112	@ 0x70
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e798:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2201      	movs	r2, #1
 800e79e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d109      	bne.n	800e7bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e7ae:	085b      	lsrs	r3, r3, #1
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f7fe fed9 	bl	800d56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7ba:	e002      	b.n	800e7c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7fe fec1 	bl	800d544 <HAL_UART_RxHalfCpltCallback>
}
 800e7c2:	bf00      	nop
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b086      	sub	sp, #24
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7f2:	2b80      	cmp	r3, #128	@ 0x80
 800e7f4:	d109      	bne.n	800e80a <UART_DMAError+0x40>
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	2b21      	cmp	r3, #33	@ 0x21
 800e7fa:	d106      	bne.n	800e80a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e804:	6978      	ldr	r0, [r7, #20]
 800e806:	f7ff fe85 	bl	800e514 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e814:	2b40      	cmp	r3, #64	@ 0x40
 800e816:	d109      	bne.n	800e82c <UART_DMAError+0x62>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b22      	cmp	r3, #34	@ 0x22
 800e81c:	d106      	bne.n	800e82c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2200      	movs	r2, #0
 800e822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e826:	6978      	ldr	r0, [r7, #20]
 800e828:	f7ff feb6 	bl	800e598 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e832:	f043 0210 	orr.w	r2, r3, #16
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e83c:	6978      	ldr	r0, [r7, #20]
 800e83e:	f7fe fe8b 	bl	800d558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e842:	bf00      	nop
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7fe fe79 	bl	800d558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b088      	sub	sp, #32
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	e853 3f00 	ldrex	r3, [r3]
 800e882:	60bb      	str	r3, [r7, #8]
   return(result);
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e88a:	61fb      	str	r3, [r7, #28]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	461a      	mov	r2, r3
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	61bb      	str	r3, [r7, #24]
 800e896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e898:	6979      	ldr	r1, [r7, #20]
 800e89a:	69ba      	ldr	r2, [r7, #24]
 800e89c:	e841 2300 	strex	r3, r2, [r1]
 800e8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1e6      	bne.n	800e876 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7fe fe30 	bl	800d51c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8bc:	bf00      	nop
 800e8be:	3720      	adds	r7, #32
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d101      	bne.n	800e916 <HAL_UARTEx_DisableFifoMode+0x16>
 800e912:	2302      	movs	r3, #2
 800e914:	e027      	b.n	800e966 <HAL_UARTEx_DisableFifoMode+0x66>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2201      	movs	r2, #1
 800e91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2224      	movs	r2, #36	@ 0x24
 800e922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f022 0201 	bic.w	r2, r2, #1
 800e93c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2220      	movs	r2, #32
 800e958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e982:	2b01      	cmp	r3, #1
 800e984:	d101      	bne.n	800e98a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e986:	2302      	movs	r3, #2
 800e988:	e02d      	b.n	800e9e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2224      	movs	r2, #36	@ 0x24
 800e996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f022 0201 	bic.w	r2, r2, #1
 800e9b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	430a      	orrs	r2, r1
 800e9c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f850 	bl	800ea6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2220      	movs	r2, #32
 800e9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b084      	sub	sp, #16
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d101      	bne.n	800ea06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea02:	2302      	movs	r3, #2
 800ea04:	e02d      	b.n	800ea62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2224      	movs	r2, #36	@ 0x24
 800ea12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f022 0201 	bic.w	r2, r2, #1
 800ea2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f812 	bl	800ea6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2220      	movs	r2, #32
 800ea54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
	...

0800ea6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d108      	bne.n	800ea8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea8c:	e031      	b.n	800eaf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea8e:	2310      	movs	r3, #16
 800ea90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea92:	2310      	movs	r3, #16
 800ea94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	0e5b      	lsrs	r3, r3, #25
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	f003 0307 	and.w	r3, r3, #7
 800eaa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	0f5b      	lsrs	r3, r3, #29
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	f003 0307 	and.w	r3, r3, #7
 800eab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
 800eab8:	7b3a      	ldrb	r2, [r7, #12]
 800eaba:	4911      	ldr	r1, [pc, #68]	@ (800eb00 <UARTEx_SetNbDataToProcess+0x94>)
 800eabc:	5c8a      	ldrb	r2, [r1, r2]
 800eabe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eac2:	7b3a      	ldrb	r2, [r7, #12]
 800eac4:	490f      	ldr	r1, [pc, #60]	@ (800eb04 <UARTEx_SetNbDataToProcess+0x98>)
 800eac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eacc:	b29a      	uxth	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	7b7a      	ldrb	r2, [r7, #13]
 800ead8:	4909      	ldr	r1, [pc, #36]	@ (800eb00 <UARTEx_SetNbDataToProcess+0x94>)
 800eada:	5c8a      	ldrb	r2, [r1, r2]
 800eadc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eae0:	7b7a      	ldrb	r2, [r7, #13]
 800eae2:	4908      	ldr	r1, [pc, #32]	@ (800eb04 <UARTEx_SetNbDataToProcess+0x98>)
 800eae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eae6:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800eaf2:	bf00      	nop
 800eaf4:	3714      	adds	r7, #20
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	0801b2b4 	.word	0x0801b2b4
 800eb04:	0801b2bc 	.word	0x0801b2bc

0800eb08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800eb08:	b084      	sub	sp, #16
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	f107 001c 	add.w	r0, r7, #28
 800eb16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800eb1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800eb20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800eb22:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800eb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800eb26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800eb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800eb2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800eb2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	685a      	ldr	r2, [r3, #4]
 800eb3a:	4b07      	ldr	r3, [pc, #28]	@ (800eb58 <SDMMC_Init+0x50>)
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	431a      	orrs	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	b004      	add	sp, #16
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	ffc02c00 	.word	0xffc02c00

0800eb5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f043 0203 	orr.w	r2, r3, #3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f003 0303 	and.w	r3, r3, #3
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ebf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ebfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ec02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	4313      	orrs	r3, r2
 800ec08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68da      	ldr	r2, [r3, #12]
 800ec0e:	4b06      	ldr	r3, [pc, #24]	@ (800ec28 <SDMMC_SendCommand+0x50>)
 800ec10:	4013      	ands	r3, r2
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	431a      	orrs	r2, r3
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	fffee0c0 	.word	0xfffee0c0

0800ec2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	b2db      	uxtb	r3, r3
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b085      	sub	sp, #20
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3314      	adds	r3, #20
 800ec54:	461a      	mov	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	4413      	add	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ec92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ec98:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ec9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecaa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	431a      	orrs	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ecb6:	2300      	movs	r3, #0

}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ecd2:	2310      	movs	r3, #16
 800ecd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ece0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ece4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ece6:	f107 0308 	add.w	r3, r7, #8
 800ecea:	4619      	mov	r1, r3
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff ff73 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ecf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecf6:	2110      	movs	r1, #16
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fa5f 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ecfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed00:	69fb      	ldr	r3, [r7, #28]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3720      	adds	r7, #32
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b088      	sub	sp, #32
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ed18:	2311      	movs	r3, #17
 800ed1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed22:	2300      	movs	r3, #0
 800ed24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed2c:	f107 0308 	add.w	r3, r7, #8
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff ff50 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ed38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed3c:	2111      	movs	r1, #17
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fa3c 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ed44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed46:	69fb      	ldr	r3, [r7, #28]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3720      	adds	r7, #32
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ed5e:	2312      	movs	r3, #18
 800ed60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed72:	f107 0308 	add.w	r3, r7, #8
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff ff2d 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed82:	2112      	movs	r1, #18
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fa19 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ed8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed8c:	69fb      	ldr	r3, [r7, #28]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3720      	adds	r7, #32
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b088      	sub	sp, #32
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eda4:	2318      	movs	r3, #24
 800eda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eda8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800edac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edae:	2300      	movs	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800edb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edb8:	f107 0308 	add.w	r3, r7, #8
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff ff0a 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800edc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edc8:	2118      	movs	r1, #24
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f9f6 	bl	800f1bc <SDMMC_GetCmdResp1>
 800edd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edd2:	69fb      	ldr	r3, [r7, #28]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b088      	sub	sp, #32
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800edea:	2319      	movs	r3, #25
 800edec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800edf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edf4:	2300      	movs	r3, #0
 800edf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800edfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edfe:	f107 0308 	add.w	r3, r7, #8
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff fee7 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ee0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee0e:	2119      	movs	r1, #25
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f9d3 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ee16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee18:	69fb      	ldr	r3, [r7, #28]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ee30:	230c      	movs	r3, #12
 800ee32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee5c:	f107 0308 	add.w	r3, r7, #8
 800ee60:	4619      	mov	r1, r3
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff feb8 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ee68:	4a0b      	ldr	r2, [pc, #44]	@ (800ee98 <SDMMC_CmdStopTransfer+0x74>)
 800ee6a:	210c      	movs	r1, #12
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f9a5 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ee72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee86:	d101      	bne.n	800ee8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3720      	adds	r7, #32
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	05f5e100 	.word	0x05f5e100

0800ee9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800eeaa:	2307      	movs	r3, #7
 800eeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eeae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eeb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	4619      	mov	r1, r3
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7ff fe87 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800eeca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eece:	2107      	movs	r1, #7
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f973 	bl	800f1bc <SDMMC_GetCmdResp1>
 800eed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eed8:	69fb      	ldr	r3, [r7, #28]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3720      	adds	r7, #32
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b088      	sub	sp, #32
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eeee:	2300      	movs	r3, #0
 800eef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800eef2:	2300      	movs	r3, #0
 800eef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eef6:	2300      	movs	r3, #0
 800eef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eefa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eefe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef00:	f107 0308 	add.w	r3, r7, #8
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff fe66 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 fb97 	bl	800f640 <SDMMC_GetCmdError>
 800ef12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef14:	69fb      	ldr	r3, [r7, #28]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b088      	sub	sp, #32
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ef26:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ef2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ef2c:	2308      	movs	r3, #8
 800ef2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef36:	2300      	movs	r3, #0
 800ef38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef40:	f107 0308 	add.w	r3, r7, #8
 800ef44:	4619      	mov	r1, r3
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff fe46 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fb29 	bl	800f5a4 <SDMMC_GetCmdResp7>
 800ef52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef54:	69fb      	ldr	r3, [r7, #28]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3720      	adds	r7, #32
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b088      	sub	sp, #32
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
 800ef66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ef6c:	2337      	movs	r3, #55	@ 0x37
 800ef6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef76:	2300      	movs	r3, #0
 800ef78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef80:	f107 0308 	add.w	r3, r7, #8
 800ef84:	4619      	mov	r1, r3
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff fe26 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ef8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef90:	2137      	movs	r1, #55	@ 0x37
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 f912 	bl	800f1bc <SDMMC_GetCmdResp1>
 800ef98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3720      	adds	r7, #32
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800efb2:	2329      	movs	r3, #41	@ 0x29
 800efb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efbc:	2300      	movs	r3, #0
 800efbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800efc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efc6:	f107 0308 	add.w	r3, r7, #8
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff fe03 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fa2e 	bl	800f434 <SDMMC_GetCmdResp3>
 800efd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efda:	69fb      	ldr	r3, [r7, #28]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3720      	adds	r7, #32
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eff2:	2306      	movs	r3, #6
 800eff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800effa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800effc:	2300      	movs	r3, #0
 800effe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f006:	f107 0308 	add.w	r3, r7, #8
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff fde3 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f012:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f016:	2106      	movs	r1, #6
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f8cf 	bl	800f1bc <SDMMC_GetCmdResp1>
 800f01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f020:	69fb      	ldr	r3, [r7, #28]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3720      	adds	r7, #32
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b088      	sub	sp, #32
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f032:	2300      	movs	r3, #0
 800f034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f036:	2333      	movs	r3, #51	@ 0x33
 800f038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f03a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f040:	2300      	movs	r3, #0
 800f042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f04a:	f107 0308 	add.w	r3, r7, #8
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff fdc1 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f05a:	2133      	movs	r1, #51	@ 0x33
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f8ad 	bl	800f1bc <SDMMC_GetCmdResp1>
 800f062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f064:	69fb      	ldr	r3, [r7, #28]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3720      	adds	r7, #32
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b088      	sub	sp, #32
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f076:	2300      	movs	r3, #0
 800f078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f07a:	2302      	movs	r3, #2
 800f07c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f07e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f08c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f08e:	f107 0308 	add.w	r3, r7, #8
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7ff fd9f 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f980 	bl	800f3a0 <SDMMC_GetCmdResp2>
 800f0a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0a2:	69fb      	ldr	r3, [r7, #28]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b088      	sub	sp, #32
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f0ba:	2309      	movs	r3, #9
 800f0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f0be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f0c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0ce:	f107 0308 	add.w	r3, r7, #8
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff fd7f 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 f960 	bl	800f3a0 <SDMMC_GetCmdResp2>
 800f0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0e2:	69fb      	ldr	r3, [r7, #28]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3720      	adds	r7, #32
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b088      	sub	sp, #32
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f104:	2300      	movs	r3, #0
 800f106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f10e:	f107 0308 	add.w	r3, r7, #8
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7ff fd5f 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	2103      	movs	r1, #3
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f9c8 	bl	800f4b4 <SDMMC_GetCmdResp6>
 800f124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f126:	69fb      	ldr	r3, [r7, #28]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3720      	adds	r7, #32
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f13e:	230d      	movs	r3, #13
 800f140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f148:	2300      	movs	r3, #0
 800f14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f14c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f152:	f107 0308 	add.w	r3, r7, #8
 800f156:	4619      	mov	r1, r3
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7ff fd3d 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f15e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f162:	210d      	movs	r1, #13
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f829 	bl	800f1bc <SDMMC_GetCmdResp1>
 800f16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f16c:	69fb      	ldr	r3, [r7, #28]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3720      	adds	r7, #32
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b088      	sub	sp, #32
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f17e:	2300      	movs	r3, #0
 800f180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f182:	230d      	movs	r3, #13
 800f184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f186:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f18a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f18c:	2300      	movs	r3, #0
 800f18e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	4619      	mov	r1, r3
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff fd1b 	bl	800ebd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1a6:	210d      	movs	r1, #13
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f807 	bl	800f1bc <SDMMC_GetCmdResp1>
 800f1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3720      	adds	r7, #32
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
	...

0800f1bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b088      	sub	sp, #32
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1ca:	4b70      	ldr	r3, [pc, #448]	@ (800f38c <SDMMC_GetCmdResp1+0x1d0>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a70      	ldr	r2, [pc, #448]	@ (800f390 <SDMMC_GetCmdResp1+0x1d4>)
 800f1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d4:	0a5a      	lsrs	r2, r3, #9
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	fb02 f303 	mul.w	r3, r2, r3
 800f1dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	1e5a      	subs	r2, r3, #1
 800f1e2:	61fa      	str	r2, [r7, #28]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f1ec:	e0c9      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f1f4:	69ba      	ldr	r2, [r7, #24]
 800f1f6:	4b67      	ldr	r3, [pc, #412]	@ (800f394 <SDMMC_GetCmdResp1+0x1d8>)
 800f1f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d0ef      	beq.n	800f1de <SDMMC_GetCmdResp1+0x22>
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d1ea      	bne.n	800f1de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d004      	beq.n	800f21e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2204      	movs	r2, #4
 800f218:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f21a:	2304      	movs	r3, #4
 800f21c:	e0b1      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f222:	f003 0301 	and.w	r3, r3, #1
 800f226:	2b00      	cmp	r3, #0
 800f228:	d004      	beq.n	800f234 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2201      	movs	r2, #1
 800f22e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f230:	2301      	movs	r3, #1
 800f232:	e0a6      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4a58      	ldr	r2, [pc, #352]	@ (800f398 <SDMMC_GetCmdResp1+0x1dc>)
 800f238:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fcf6 	bl	800ec2c <SDMMC_GetCommandResponse>
 800f240:	4603      	mov	r3, r0
 800f242:	461a      	mov	r2, r3
 800f244:	7afb      	ldrb	r3, [r7, #11]
 800f246:	4293      	cmp	r3, r2
 800f248:	d001      	beq.n	800f24e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e099      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f24e:	2100      	movs	r1, #0
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f7ff fcf8 	bl	800ec46 <SDMMC_GetResponse>
 800f256:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f258:	697a      	ldr	r2, [r7, #20]
 800f25a:	4b50      	ldr	r3, [pc, #320]	@ (800f39c <SDMMC_GetCmdResp1+0x1e0>)
 800f25c:	4013      	ands	r3, r2
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f262:	2300      	movs	r3, #0
 800f264:	e08d      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	da02      	bge.n	800f272 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f26c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f270:	e087      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f27c:	2340      	movs	r3, #64	@ 0x40
 800f27e:	e080      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f28a:	2380      	movs	r3, #128	@ 0x80
 800f28c:	e079      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f29c:	e071      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f2a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f2ac:	e069      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f2b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2bc:	e061      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f2c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f2cc:	e059      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f2d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f2dc:	e051      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f2ec:	e049      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f2fc:	e041      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f30c:	e039      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f31c:	e031      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f328:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f32c:	e029      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f33c:	e021      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f348:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f34c:	e019      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d002      	beq.n	800f35e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f358:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f35c:	e011      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f368:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f36c:	e009      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	f003 0308 	and.w	r3, r3, #8
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f378:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f37c:	e001      	b.n	800f382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f37e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f382:	4618      	mov	r0, r3
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	24000008 	.word	0x24000008
 800f390:	10624dd3 	.word	0x10624dd3
 800f394:	00200045 	.word	0x00200045
 800f398:	002000c5 	.word	0x002000c5
 800f39c:	fdffe008 	.word	0xfdffe008

0800f3a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f3a8:	4b1f      	ldr	r3, [pc, #124]	@ (800f428 <SDMMC_GetCmdResp2+0x88>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a1f      	ldr	r2, [pc, #124]	@ (800f42c <SDMMC_GetCmdResp2+0x8c>)
 800f3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b2:	0a5b      	lsrs	r3, r3, #9
 800f3b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3b8:	fb02 f303 	mul.w	r3, r2, r3
 800f3bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	1e5a      	subs	r2, r3, #1
 800f3c2:	60fa      	str	r2, [r7, #12]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d102      	bne.n	800f3ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f3cc:	e026      	b.n	800f41c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0ef      	beq.n	800f3be <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1ea      	bne.n	800f3be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d004      	beq.n	800f3fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2204      	movs	r2, #4
 800f3f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3fa:	2304      	movs	r3, #4
 800f3fc:	e00e      	b.n	800f41c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f402:	f003 0301 	and.w	r3, r3, #1
 800f406:	2b00      	cmp	r3, #0
 800f408:	d004      	beq.n	800f414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f410:	2301      	movs	r3, #1
 800f412:	e003      	b.n	800f41c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a06      	ldr	r2, [pc, #24]	@ (800f430 <SDMMC_GetCmdResp2+0x90>)
 800f418:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f41a:	2300      	movs	r3, #0
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3714      	adds	r7, #20
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	24000008 	.word	0x24000008
 800f42c:	10624dd3 	.word	0x10624dd3
 800f430:	002000c5 	.word	0x002000c5

0800f434 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f43c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a8 <SDMMC_GetCmdResp3+0x74>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a1a      	ldr	r2, [pc, #104]	@ (800f4ac <SDMMC_GetCmdResp3+0x78>)
 800f442:	fba2 2303 	umull	r2, r3, r2, r3
 800f446:	0a5b      	lsrs	r3, r3, #9
 800f448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f44c:	fb02 f303 	mul.w	r3, r2, r3
 800f450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	1e5a      	subs	r2, r3, #1
 800f456:	60fa      	str	r2, [r7, #12]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d102      	bne.n	800f462 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f45c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f460:	e01b      	b.n	800f49a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f466:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d0ef      	beq.n	800f452 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1ea      	bne.n	800f452 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f480:	f003 0304 	and.w	r3, r3, #4
 800f484:	2b00      	cmp	r3, #0
 800f486:	d004      	beq.n	800f492 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2204      	movs	r2, #4
 800f48c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f48e:	2304      	movs	r3, #4
 800f490:	e003      	b.n	800f49a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a06      	ldr	r2, [pc, #24]	@ (800f4b0 <SDMMC_GetCmdResp3+0x7c>)
 800f496:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3714      	adds	r7, #20
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	24000008 	.word	0x24000008
 800f4ac:	10624dd3 	.word	0x10624dd3
 800f4b0:	002000c5 	.word	0x002000c5

0800f4b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b088      	sub	sp, #32
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	607a      	str	r2, [r7, #4]
 800f4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f4c2:	4b35      	ldr	r3, [pc, #212]	@ (800f598 <SDMMC_GetCmdResp6+0xe4>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a35      	ldr	r2, [pc, #212]	@ (800f59c <SDMMC_GetCmdResp6+0xe8>)
 800f4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f4cc:	0a5b      	lsrs	r3, r3, #9
 800f4ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4d2:	fb02 f303 	mul.w	r3, r2, r3
 800f4d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	1e5a      	subs	r2, r3, #1
 800f4dc:	61fa      	str	r2, [r7, #28]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d102      	bne.n	800f4e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f4e6:	e052      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0ef      	beq.n	800f4d8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1ea      	bne.n	800f4d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f506:	f003 0304 	and.w	r3, r3, #4
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d004      	beq.n	800f518 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2204      	movs	r2, #4
 800f512:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f514:	2304      	movs	r3, #4
 800f516:	e03a      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f51c:	f003 0301 	and.w	r3, r3, #1
 800f520:	2b00      	cmp	r3, #0
 800f522:	d004      	beq.n	800f52e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2201      	movs	r2, #1
 800f528:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f52a:	2301      	movs	r3, #1
 800f52c:	e02f      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7ff fb7c 	bl	800ec2c <SDMMC_GetCommandResponse>
 800f534:	4603      	mov	r3, r0
 800f536:	461a      	mov	r2, r3
 800f538:	7afb      	ldrb	r3, [r7, #11]
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d001      	beq.n	800f542 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f53e:	2301      	movs	r3, #1
 800f540:	e025      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	4a16      	ldr	r2, [pc, #88]	@ (800f5a0 <SDMMC_GetCmdResp6+0xec>)
 800f546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f548:	2100      	movs	r1, #0
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff fb7b 	bl	800ec46 <SDMMC_GetResponse>
 800f550:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d106      	bne.n	800f56a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	0c1b      	lsrs	r3, r3, #16
 800f560:	b29a      	uxth	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f566:	2300      	movs	r3, #0
 800f568:	e011      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d002      	beq.n	800f57a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f578:	e009      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f580:	2b00      	cmp	r3, #0
 800f582:	d002      	beq.n	800f58a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f588:	e001      	b.n	800f58e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f58a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3720      	adds	r7, #32
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	24000008 	.word	0x24000008
 800f59c:	10624dd3 	.word	0x10624dd3
 800f5a0:	002000c5 	.word	0x002000c5

0800f5a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f5ac:	4b22      	ldr	r3, [pc, #136]	@ (800f638 <SDMMC_GetCmdResp7+0x94>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a22      	ldr	r2, [pc, #136]	@ (800f63c <SDMMC_GetCmdResp7+0x98>)
 800f5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5b6:	0a5b      	lsrs	r3, r3, #9
 800f5b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5bc:	fb02 f303 	mul.w	r3, r2, r3
 800f5c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	1e5a      	subs	r2, r3, #1
 800f5c6:	60fa      	str	r2, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d102      	bne.n	800f5d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f5d0:	e02c      	b.n	800f62c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0ef      	beq.n	800f5c2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1ea      	bne.n	800f5c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2204      	movs	r2, #4
 800f5fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5fe:	2304      	movs	r3, #4
 800f600:	e014      	b.n	800f62c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f606:	f003 0301 	and.w	r3, r3, #1
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d004      	beq.n	800f618 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2201      	movs	r2, #1
 800f612:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f614:	2301      	movs	r3, #1
 800f616:	e009      	b.n	800f62c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f61c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2240      	movs	r2, #64	@ 0x40
 800f628:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f62a:	2300      	movs	r3, #0

}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	24000008 	.word	0x24000008
 800f63c:	10624dd3 	.word	0x10624dd3

0800f640 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f648:	4b11      	ldr	r3, [pc, #68]	@ (800f690 <SDMMC_GetCmdError+0x50>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a11      	ldr	r2, [pc, #68]	@ (800f694 <SDMMC_GetCmdError+0x54>)
 800f64e:	fba2 2303 	umull	r2, r3, r2, r3
 800f652:	0a5b      	lsrs	r3, r3, #9
 800f654:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f658:	fb02 f303 	mul.w	r3, r2, r3
 800f65c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	1e5a      	subs	r2, r3, #1
 800f662:	60fa      	str	r2, [r7, #12]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f66c:	e009      	b.n	800f682 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f676:	2b00      	cmp	r3, #0
 800f678:	d0f1      	beq.n	800f65e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a06      	ldr	r2, [pc, #24]	@ (800f698 <SDMMC_GetCmdError+0x58>)
 800f67e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	24000008 	.word	0x24000008
 800f694:	10624dd3 	.word	0x10624dd3
 800f698:	002000c5 	.word	0x002000c5

0800f69c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f6a0:	4904      	ldr	r1, [pc, #16]	@ (800f6b4 <MX_FATFS_Init+0x18>)
 800f6a2:	4805      	ldr	r0, [pc, #20]	@ (800f6b8 <MX_FATFS_Init+0x1c>)
 800f6a4:	f005 fcfc 	bl	80150a0 <FATFS_LinkDriver>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4b03      	ldr	r3, [pc, #12]	@ (800f6bc <MX_FATFS_Init+0x20>)
 800f6ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f6b0:	bf00      	nop
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	24001984 	.word	0x24001984
 800f6b8:	0801b2c4 	.word	0x0801b2c4
 800f6bc:	24001980 	.word	0x24001980

0800f6c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f6c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f6da:	f000 f885 	bl	800f7e8 <BSP_SD_IsDetected>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d001      	beq.n	800f6e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	e012      	b.n	800f70e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f6e8:	480b      	ldr	r0, [pc, #44]	@ (800f718 <BSP_SD_Init+0x48>)
 800f6ea:	f7fa f8e9 	bl	80098c0 <HAL_SD_Init>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d109      	bne.n	800f70c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f6f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f6fc:	4806      	ldr	r0, [pc, #24]	@ (800f718 <BSP_SD_Init+0x48>)
 800f6fe:	f7fa ff9f 	bl	800a640 <HAL_SD_ConfigWideBusOperation>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d001      	beq.n	800f70c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f708:	2301      	movs	r3, #1
 800f70a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f70c:	79fb      	ldrb	r3, [r7, #7]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3708      	adds	r7, #8
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	240013c8 	.word	0x240013c8

0800f71c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f728:	2300      	movs	r3, #0
 800f72a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	68f9      	ldr	r1, [r7, #12]
 800f732:	4806      	ldr	r0, [pc, #24]	@ (800f74c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f734:	f7fa f9e4 	bl	8009b00 <HAL_SD_ReadBlocks_DMA>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f742:	7dfb      	ldrb	r3, [r7, #23]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	240013c8 	.word	0x240013c8

0800f750 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	68f9      	ldr	r1, [r7, #12]
 800f766:	4806      	ldr	r0, [pc, #24]	@ (800f780 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f768:	f7fa fa72 	bl	8009c50 <HAL_SD_WriteBlocks_DMA>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f772:	2301      	movs	r3, #1
 800f774:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f776:	7dfb      	ldrb	r3, [r7, #23]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	240013c8 	.word	0x240013c8

0800f784 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f788:	4805      	ldr	r0, [pc, #20]	@ (800f7a0 <BSP_SD_GetCardState+0x1c>)
 800f78a:	f7fb f86b 	bl	800a864 <HAL_SD_GetCardState>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b04      	cmp	r3, #4
 800f792:	bf14      	ite	ne
 800f794:	2301      	movne	r3, #1
 800f796:	2300      	moveq	r3, #0
 800f798:	b2db      	uxtb	r3, r3
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	240013c8 	.word	0x240013c8

0800f7a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f7ac:	6879      	ldr	r1, [r7, #4]
 800f7ae:	4803      	ldr	r0, [pc, #12]	@ (800f7bc <BSP_SD_GetCardInfo+0x18>)
 800f7b0:	f7fa ff1a 	bl	800a5e8 <HAL_SD_GetCardInfo>
}
 800f7b4:	bf00      	nop
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	240013c8 	.word	0x240013c8

0800f7c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f7c8:	f000 f9ac 	bl	800fb24 <BSP_SD_WriteCpltCallback>
}
 800f7cc:	bf00      	nop
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f7dc:	f000 f9b4 	bl	800fb48 <BSP_SD_ReadCpltCallback>
}
 800f7e0:	bf00      	nop
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f7f2:	f000 f80b 	bl	800f80c <BSP_PlatformIsDetected>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d101      	bne.n	800f800 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	b2db      	uxtb	r3, r3
}
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f812:	2301      	movs	r3, #1
 800f814:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f816:	2120      	movs	r1, #32
 800f818:	4806      	ldr	r0, [pc, #24]	@ (800f834 <BSP_PlatformIsDetected+0x28>)
 800f81a:	f7f6 fa8b 	bl	8005d34 <HAL_GPIO_ReadPin>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f824:	2300      	movs	r3, #0
 800f826:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f828:	79fb      	ldrb	r3, [r7, #7]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	58020400 	.word	0x58020400

0800f838 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f840:	f005 fe12 	bl	8015468 <osKernelGetTickCount>
 800f844:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f846:	e006      	b.n	800f856 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f848:	f7ff ff9c 	bl	800f784 <BSP_SD_GetCardState>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f852:	2300      	movs	r3, #0
 800f854:	e009      	b.n	800f86a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f856:	f005 fe07 	bl	8015468 <osKernelGetTickCount>
 800f85a:	4602      	mov	r2, r0
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d8f0      	bhi.n	800f848 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
	...

0800f874 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f87e:	4b0b      	ldr	r3, [pc, #44]	@ (800f8ac <SD_CheckStatus+0x38>)
 800f880:	2201      	movs	r2, #1
 800f882:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f884:	f7ff ff7e 	bl	800f784 <BSP_SD_GetCardState>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f88e:	4b07      	ldr	r3, [pc, #28]	@ (800f8ac <SD_CheckStatus+0x38>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f023 0301 	bic.w	r3, r3, #1
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	4b04      	ldr	r3, [pc, #16]	@ (800f8ac <SD_CheckStatus+0x38>)
 800f89c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f89e:	4b03      	ldr	r3, [pc, #12]	@ (800f8ac <SD_CheckStatus+0x38>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	b2db      	uxtb	r3, r3
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	24000015 	.word	0x24000015

0800f8b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f8ba:	4b1c      	ldr	r3, [pc, #112]	@ (800f92c <SD_initialize+0x7c>)
 800f8bc:	2201      	movs	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f8c0:	f005 fd8a 	bl	80153d8 <osKernelGetState>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d129      	bne.n	800f91e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f8ca:	f7ff ff01 	bl	800f6d0 <BSP_SD_Init>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d107      	bne.n	800f8e4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff ffcc 	bl	800f874 <SD_CheckStatus>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	461a      	mov	r2, r3
 800f8e0:	4b12      	ldr	r3, [pc, #72]	@ (800f92c <SD_initialize+0x7c>)
 800f8e2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f8e4:	4b11      	ldr	r3, [pc, #68]	@ (800f92c <SD_initialize+0x7c>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d017      	beq.n	800f91e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f8ee:	4b10      	ldr	r3, [pc, #64]	@ (800f930 <SD_initialize+0x80>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d107      	bne.n	800f906 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2102      	movs	r1, #2
 800f8fa:	200a      	movs	r0, #10
 800f8fc:	f005 fff2 	bl	80158e4 <osMessageQueueNew>
 800f900:	4603      	mov	r3, r0
 800f902:	4a0b      	ldr	r2, [pc, #44]	@ (800f930 <SD_initialize+0x80>)
 800f904:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f906:	4b0a      	ldr	r3, [pc, #40]	@ (800f930 <SD_initialize+0x80>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d107      	bne.n	800f91e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f90e:	4b07      	ldr	r3, [pc, #28]	@ (800f92c <SD_initialize+0x7c>)
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f043 0301 	orr.w	r3, r3, #1
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	4b04      	ldr	r3, [pc, #16]	@ (800f92c <SD_initialize+0x7c>)
 800f91c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f91e:	4b03      	ldr	r3, [pc, #12]	@ (800f92c <SD_initialize+0x7c>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	b2db      	uxtb	r3, r3
}
 800f924:	4618      	mov	r0, r3
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	24000015 	.word	0x24000015
 800f930:	24001bc4 	.word	0x24001bc4

0800f934 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	4603      	mov	r3, r0
 800f93c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f93e:	79fb      	ldrb	r3, [r7, #7]
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff ff97 	bl	800f874 <SD_CheckStatus>
 800f946:	4603      	mov	r3, r0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b088      	sub	sp, #32
 800f954:	af00      	add	r7, sp, #0
 800f956:	60b9      	str	r1, [r7, #8]
 800f958:	607a      	str	r2, [r7, #4]
 800f95a:	603b      	str	r3, [r7, #0]
 800f95c:	4603      	mov	r3, r0
 800f95e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f960:	2301      	movs	r3, #1
 800f962:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f964:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f968:	f7ff ff66 	bl	800f838 <SD_CheckStatusWithTimeout>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	da01      	bge.n	800f976 <SD_read+0x26>
  {
    return res;
 800f972:	7ffb      	ldrb	r3, [r7, #31]
 800f974:	e02f      	b.n	800f9d6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f976:	683a      	ldr	r2, [r7, #0]
 800f978:	6879      	ldr	r1, [r7, #4]
 800f97a:	68b8      	ldr	r0, [r7, #8]
 800f97c:	f7ff fece 	bl	800f71c <BSP_SD_ReadBlocks_DMA>
 800f980:	4603      	mov	r3, r0
 800f982:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f984:	7fbb      	ldrb	r3, [r7, #30]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d124      	bne.n	800f9d4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f98a:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <SD_read+0x90>)
 800f98c:	6818      	ldr	r0, [r3, #0]
 800f98e:	f107 0112 	add.w	r1, r7, #18
 800f992:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f996:	2200      	movs	r2, #0
 800f998:	f006 f878 	bl	8015a8c <osMessageQueueGet>
 800f99c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d117      	bne.n	800f9d4 <SD_read+0x84>
 800f9a4:	8a7b      	ldrh	r3, [r7, #18]
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d114      	bne.n	800f9d4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f9aa:	f005 fd5d 	bl	8015468 <osKernelGetTickCount>
 800f9ae:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f9b0:	e007      	b.n	800f9c2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f9b2:	f7ff fee7 	bl	800f784 <BSP_SD_GetCardState>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d102      	bne.n	800f9c2 <SD_read+0x72>
              {
                res = RES_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f9c0:	e008      	b.n	800f9d4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f9c2:	f005 fd51 	bl	8015468 <osKernelGetTickCount>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d9ee      	bls.n	800f9b2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f9d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	24001bc4 	.word	0x24001bc4

0800f9e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b088      	sub	sp, #32
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60b9      	str	r1, [r7, #8]
 800f9ec:	607a      	str	r2, [r7, #4]
 800f9ee:	603b      	str	r3, [r7, #0]
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f9f8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f9fc:	f7ff ff1c 	bl	800f838 <SD_CheckStatusWithTimeout>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	da01      	bge.n	800fa0a <SD_write+0x26>
  {
    return res;
 800fa06:	7ffb      	ldrb	r3, [r7, #31]
 800fa08:	e02d      	b.n	800fa66 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	68b8      	ldr	r0, [r7, #8]
 800fa10:	f7ff fe9e 	bl	800f750 <BSP_SD_WriteBlocks_DMA>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d124      	bne.n	800fa64 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fa1a:	4b15      	ldr	r3, [pc, #84]	@ (800fa70 <SD_write+0x8c>)
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	f107 0112 	add.w	r1, r7, #18
 800fa22:	f247 5330 	movw	r3, #30000	@ 0x7530
 800fa26:	2200      	movs	r2, #0
 800fa28:	f006 f830 	bl	8015a8c <osMessageQueueGet>
 800fa2c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d117      	bne.n	800fa64 <SD_write+0x80>
 800fa34:	8a7b      	ldrh	r3, [r7, #18]
 800fa36:	2b02      	cmp	r3, #2
 800fa38:	d114      	bne.n	800fa64 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800fa3a:	f005 fd15 	bl	8015468 <osKernelGetTickCount>
 800fa3e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fa40:	e007      	b.n	800fa52 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fa42:	f7ff fe9f 	bl	800f784 <BSP_SD_GetCardState>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d102      	bne.n	800fa52 <SD_write+0x6e>
          {
            res = RES_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	77fb      	strb	r3, [r7, #31]
            break;
 800fa50:	e008      	b.n	800fa64 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fa52:	f005 fd09 	bl	8015468 <osKernelGetTickCount>
 800fa56:	4602      	mov	r2, r0
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d9ee      	bls.n	800fa42 <SD_write+0x5e>
        res = RES_OK;
    }

#endif

  return res;
 800fa64:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3720      	adds	r7, #32
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	24001bc4 	.word	0x24001bc4

0800fa74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08c      	sub	sp, #48	@ 0x30
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	603a      	str	r2, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
 800fa80:	460b      	mov	r3, r1
 800fa82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fa84:	2301      	movs	r3, #1
 800fa86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fa8a:	4b25      	ldr	r3, [pc, #148]	@ (800fb20 <SD_ioctl+0xac>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	f003 0301 	and.w	r3, r3, #1
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <SD_ioctl+0x28>
 800fa98:	2303      	movs	r3, #3
 800fa9a:	e03c      	b.n	800fb16 <SD_ioctl+0xa2>

  switch (cmd)
 800fa9c:	79bb      	ldrb	r3, [r7, #6]
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	d834      	bhi.n	800fb0c <SD_ioctl+0x98>
 800faa2:	a201      	add	r2, pc, #4	@ (adr r2, 800faa8 <SD_ioctl+0x34>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800fab9 	.word	0x0800fab9
 800faac:	0800fac1 	.word	0x0800fac1
 800fab0:	0800fad9 	.word	0x0800fad9
 800fab4:	0800faf3 	.word	0x0800faf3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fabe:	e028      	b.n	800fb12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fac0:	f107 0308 	add.w	r3, r7, #8
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fe6d 	bl	800f7a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800faca:	6a3a      	ldr	r2, [r7, #32]
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fad6:	e01c      	b.n	800fb12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fad8:	f107 0308 	add.w	r3, r7, #8
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff fe61 	bl	800f7a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800faf0:	e00f      	b.n	800fb12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800faf2:	f107 0308 	add.w	r3, r7, #8
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff fe54 	bl	800f7a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fafe:	0a5a      	lsrs	r2, r3, #9
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fb0a:	e002      	b.n	800fb12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fb0c:	2304      	movs	r3, #4
 800fb0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fb12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3730      	adds	r7, #48	@ 0x30
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	24000015 	.word	0x24000015

0800fb24 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800fb2e:	4b05      	ldr	r3, [pc, #20]	@ (800fb44 <BSP_SD_WriteCpltCallback+0x20>)
 800fb30:	6818      	ldr	r0, [r3, #0]
 800fb32:	1db9      	adds	r1, r7, #6
 800fb34:	2300      	movs	r3, #0
 800fb36:	2200      	movs	r2, #0
 800fb38:	f005 ff48 	bl	80159cc <osMessageQueuePut>
#endif
}
 800fb3c:	bf00      	nop
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	24001bc4 	.word	0x24001bc4

0800fb48 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800fb52:	4b05      	ldr	r3, [pc, #20]	@ (800fb68 <BSP_SD_ReadCpltCallback+0x20>)
 800fb54:	6818      	ldr	r0, [r3, #0]
 800fb56:	1db9      	adds	r1, r7, #6
 800fb58:	2300      	movs	r3, #0
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f005 ff36 	bl	80159cc <osMessageQueuePut>
#endif
}
 800fb60:	bf00      	nop
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	24001bc4 	.word	0x24001bc4

0800fb6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fb76:	79fb      	ldrb	r3, [r7, #7]
 800fb78:	4a08      	ldr	r2, [pc, #32]	@ (800fb9c <disk_status+0x30>)
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	79fa      	ldrb	r2, [r7, #7]
 800fb84:	4905      	ldr	r1, [pc, #20]	@ (800fb9c <disk_status+0x30>)
 800fb86:	440a      	add	r2, r1
 800fb88:	7a12      	ldrb	r2, [r2, #8]
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	4798      	blx	r3
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	24001bf0 	.word	0x24001bf0

0800fba0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fbae:	79fb      	ldrb	r3, [r7, #7]
 800fbb0:	4a0e      	ldr	r2, [pc, #56]	@ (800fbec <disk_initialize+0x4c>)
 800fbb2:	5cd3      	ldrb	r3, [r2, r3]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d114      	bne.n	800fbe2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	4a0c      	ldr	r2, [pc, #48]	@ (800fbec <disk_initialize+0x4c>)
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	79fa      	ldrb	r2, [r7, #7]
 800fbc6:	4909      	ldr	r1, [pc, #36]	@ (800fbec <disk_initialize+0x4c>)
 800fbc8:	440a      	add	r2, r1
 800fbca:	7a12      	ldrb	r2, [r2, #8]
 800fbcc:	4610      	mov	r0, r2
 800fbce:	4798      	blx	r3
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d103      	bne.n	800fbe2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	4a03      	ldr	r2, [pc, #12]	@ (800fbec <disk_initialize+0x4c>)
 800fbde:	2101      	movs	r1, #1
 800fbe0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	24001bf0 	.word	0x24001bf0

0800fbf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fbf0:	b590      	push	{r4, r7, lr}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60b9      	str	r1, [r7, #8]
 800fbf8:	607a      	str	r2, [r7, #4]
 800fbfa:	603b      	str	r3, [r7, #0]
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	4a0a      	ldr	r2, [pc, #40]	@ (800fc2c <disk_read+0x3c>)
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	4413      	add	r3, r2
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	689c      	ldr	r4, [r3, #8]
 800fc0c:	7bfb      	ldrb	r3, [r7, #15]
 800fc0e:	4a07      	ldr	r2, [pc, #28]	@ (800fc2c <disk_read+0x3c>)
 800fc10:	4413      	add	r3, r2
 800fc12:	7a18      	ldrb	r0, [r3, #8]
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	47a0      	blx	r4
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	371c      	adds	r7, #28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd90      	pop	{r4, r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	24001bf0 	.word	0x24001bf0

0800fc30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fc30:	b590      	push	{r4, r7, lr}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60b9      	str	r1, [r7, #8]
 800fc38:	607a      	str	r2, [r7, #4]
 800fc3a:	603b      	str	r3, [r7, #0]
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fc40:	7bfb      	ldrb	r3, [r7, #15]
 800fc42:	4a0a      	ldr	r2, [pc, #40]	@ (800fc6c <disk_write+0x3c>)
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	68dc      	ldr	r4, [r3, #12]
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
 800fc4e:	4a07      	ldr	r2, [pc, #28]	@ (800fc6c <disk_write+0x3c>)
 800fc50:	4413      	add	r3, r2
 800fc52:	7a18      	ldrb	r0, [r3, #8]
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	68b9      	ldr	r1, [r7, #8]
 800fc5a:	47a0      	blx	r4
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	371c      	adds	r7, #28
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd90      	pop	{r4, r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	24001bf0 	.word	0x24001bf0

0800fc70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	4603      	mov	r3, r0
 800fc78:	603a      	str	r2, [r7, #0]
 800fc7a:	71fb      	strb	r3, [r7, #7]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fc80:	79fb      	ldrb	r3, [r7, #7]
 800fc82:	4a09      	ldr	r2, [pc, #36]	@ (800fca8 <disk_ioctl+0x38>)
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	79fa      	ldrb	r2, [r7, #7]
 800fc8e:	4906      	ldr	r1, [pc, #24]	@ (800fca8 <disk_ioctl+0x38>)
 800fc90:	440a      	add	r2, r1
 800fc92:	7a10      	ldrb	r0, [r2, #8]
 800fc94:	79b9      	ldrb	r1, [r7, #6]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	4798      	blx	r3
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  return res;
 800fc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	24001bf0 	.word	0x24001bf0

0800fcac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fcbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fcc0:	021b      	lsls	r3, r3, #8
 800fcc2:	b21a      	sxth	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	b21b      	sxth	r3, r3
 800fcca:	4313      	orrs	r3, r2
 800fccc:	b21b      	sxth	r3, r3
 800fcce:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fcd0:	89fb      	ldrh	r3, [r7, #14]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3714      	adds	r7, #20
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fcde:	b480      	push	{r7}
 800fce0:	b085      	sub	sp, #20
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	3303      	adds	r3, #3
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	021b      	lsls	r3, r3, #8
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	3202      	adds	r2, #2
 800fcf6:	7812      	ldrb	r2, [r2, #0]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	021b      	lsls	r3, r3, #8
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	3201      	adds	r2, #1
 800fd04:	7812      	ldrb	r2, [r2, #0]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	021b      	lsls	r3, r3, #8
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	7812      	ldrb	r2, [r2, #0]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
	return rv;
 800fd16:	68fb      	ldr	r3, [r7, #12]
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800fd24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800fd28:	b09d      	sub	sp, #116	@ 0x74
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800fd2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd30:	3307      	adds	r3, #7
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2200      	movs	r2, #0
 800fd38:	469a      	mov	sl, r3
 800fd3a:	4693      	mov	fp, r2
 800fd3c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800fd40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fd44:	f04f 0000 	mov.w	r0, #0
 800fd48:	f04f 0100 	mov.w	r1, #0
 800fd4c:	0219      	lsls	r1, r3, #8
 800fd4e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fd52:	0210      	lsls	r0, r2, #8
 800fd54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd56:	3306      	adds	r3, #6
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	461c      	mov	r4, r3
 800fd60:	4615      	mov	r5, r2
 800fd62:	ea40 0804 	orr.w	r8, r0, r4
 800fd66:	ea41 0905 	orr.w	r9, r1, r5
 800fd6a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800fd6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fd72:	f04f 0000 	mov.w	r0, #0
 800fd76:	f04f 0100 	mov.w	r1, #0
 800fd7a:	0219      	lsls	r1, r3, #8
 800fd7c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fd80:	0210      	lsls	r0, r2, #8
 800fd82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd84:	3305      	adds	r3, #5
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fd8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800fd90:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800fd94:	4623      	mov	r3, r4
 800fd96:	4303      	orrs	r3, r0
 800fd98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd9a:	462b      	mov	r3, r5
 800fd9c:	430b      	orrs	r3, r1
 800fd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fda0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800fda4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800fda8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fdac:	f04f 0000 	mov.w	r0, #0
 800fdb0:	f04f 0100 	mov.w	r1, #0
 800fdb4:	0219      	lsls	r1, r3, #8
 800fdb6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fdba:	0210      	lsls	r0, r2, #8
 800fdbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdbe:	3304      	adds	r3, #4
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800fdc8:	657a      	str	r2, [r7, #84]	@ 0x54
 800fdca:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800fdce:	4623      	mov	r3, r4
 800fdd0:	4303      	orrs	r3, r0
 800fdd2:	623b      	str	r3, [r7, #32]
 800fdd4:	462b      	mov	r3, r5
 800fdd6:	430b      	orrs	r3, r1
 800fdd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdda:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800fdde:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800fde2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fde6:	f04f 0000 	mov.w	r0, #0
 800fdea:	f04f 0100 	mov.w	r1, #0
 800fdee:	0219      	lsls	r1, r3, #8
 800fdf0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fdf4:	0210      	lsls	r0, r2, #8
 800fdf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdf8:	3303      	adds	r3, #3
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2200      	movs	r2, #0
 800fe00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe02:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800fe04:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800fe08:	4623      	mov	r3, r4
 800fe0a:	4303      	orrs	r3, r0
 800fe0c:	61bb      	str	r3, [r7, #24]
 800fe0e:	462b      	mov	r3, r5
 800fe10:	430b      	orrs	r3, r1
 800fe12:	61fb      	str	r3, [r7, #28]
 800fe14:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fe18:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800fe1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fe20:	f04f 0000 	mov.w	r0, #0
 800fe24:	f04f 0100 	mov.w	r1, #0
 800fe28:	0219      	lsls	r1, r3, #8
 800fe2a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800fe2e:	0210      	lsls	r0, r2, #8
 800fe30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe32:	3302      	adds	r3, #2
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	2200      	movs	r2, #0
 800fe3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe3c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe3e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800fe42:	4623      	mov	r3, r4
 800fe44:	4303      	orrs	r3, r0
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	462b      	mov	r3, r5
 800fe4a:	430b      	orrs	r3, r1
 800fe4c:	617b      	str	r3, [r7, #20]
 800fe4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fe52:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800fe56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800fe5a:	f04f 0200 	mov.w	r2, #0
 800fe5e:	f04f 0300 	mov.w	r3, #0
 800fe62:	020b      	lsls	r3, r1, #8
 800fe64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe68:	0202      	lsls	r2, r0, #8
 800fe6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fe6c:	3101      	adds	r1, #1
 800fe6e:	7809      	ldrb	r1, [r1, #0]
 800fe70:	b2c9      	uxtb	r1, r1
 800fe72:	2000      	movs	r0, #0
 800fe74:	63b9      	str	r1, [r7, #56]	@ 0x38
 800fe76:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fe78:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800fe7c:	4621      	mov	r1, r4
 800fe7e:	4311      	orrs	r1, r2
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	4629      	mov	r1, r5
 800fe84:	4319      	orrs	r1, r3
 800fe86:	60f9      	str	r1, [r7, #12]
 800fe88:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fe8c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800fe90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800fe94:	f04f 0200 	mov.w	r2, #0
 800fe98:	f04f 0300 	mov.w	r3, #0
 800fe9c:	020b      	lsls	r3, r1, #8
 800fe9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fea2:	0202      	lsls	r2, r0, #8
 800fea4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fea6:	7809      	ldrb	r1, [r1, #0]
 800fea8:	b2c9      	uxtb	r1, r1
 800feaa:	2000      	movs	r0, #0
 800feac:	6339      	str	r1, [r7, #48]	@ 0x30
 800feae:	6378      	str	r0, [r7, #52]	@ 0x34
 800feb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800feb4:	4621      	mov	r1, r4
 800feb6:	4311      	orrs	r1, r2
 800feb8:	6039      	str	r1, [r7, #0]
 800feba:	4629      	mov	r1, r5
 800febc:	4319      	orrs	r1, r3
 800febe:	6079      	str	r1, [r7, #4]
 800fec0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fec4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800fec8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800fecc:	4610      	mov	r0, r2
 800fece:	4619      	mov	r1, r3
 800fed0:	3774      	adds	r7, #116	@ 0x74
 800fed2:	46bd      	mov	sp, r7
 800fed4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800fed8:	4770      	bx	lr

0800feda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800feda:	b480      	push	{r7}
 800fedc:	b083      	sub	sp, #12
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
 800fee2:	460b      	mov	r3, r1
 800fee4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	1c5a      	adds	r2, r3, #1
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	887a      	ldrh	r2, [r7, #2]
 800feee:	b2d2      	uxtb	r2, r2
 800fef0:	701a      	strb	r2, [r3, #0]
 800fef2:	887b      	ldrh	r3, [r7, #2]
 800fef4:	0a1b      	lsrs	r3, r3, #8
 800fef6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	607a      	str	r2, [r7, #4]
 800fefe:	887a      	ldrh	r2, [r7, #2]
 800ff00:	b2d2      	uxtb	r2, r2
 800ff02:	701a      	strb	r2, [r3, #0]
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	1c5a      	adds	r2, r3, #1
 800ff1e:	607a      	str	r2, [r7, #4]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	b2d2      	uxtb	r2, r2
 800ff24:	701a      	strb	r2, [r3, #0]
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	0a1b      	lsrs	r3, r3, #8
 800ff2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	607a      	str	r2, [r7, #4]
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	b2d2      	uxtb	r2, r2
 800ff36:	701a      	strb	r2, [r3, #0]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	0a1b      	lsrs	r3, r3, #8
 800ff3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	1c5a      	adds	r2, r3, #1
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	683a      	ldr	r2, [r7, #0]
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	0a1b      	lsrs	r3, r3, #8
 800ff4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	607a      	str	r2, [r7, #4]
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	b2d2      	uxtb	r2, r2
 800ff5a:	701a      	strb	r2, [r3, #0]
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	60fa      	str	r2, [r7, #12]
 800ff7a:	783a      	ldrb	r2, [r7, #0]
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff82:	f04f 0200 	mov.w	r2, #0
 800ff86:	f04f 0300 	mov.w	r3, #0
 800ff8a:	0a02      	lsrs	r2, r0, #8
 800ff8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ff90:	0a0b      	lsrs	r3, r1, #8
 800ff92:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	60fa      	str	r2, [r7, #12]
 800ff9c:	783a      	ldrb	r2, [r7, #0]
 800ff9e:	701a      	strb	r2, [r3, #0]
 800ffa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ffa4:	f04f 0200 	mov.w	r2, #0
 800ffa8:	f04f 0300 	mov.w	r3, #0
 800ffac:	0a02      	lsrs	r2, r0, #8
 800ffae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ffb2:	0a0b      	lsrs	r3, r1, #8
 800ffb4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	60fa      	str	r2, [r7, #12]
 800ffbe:	783a      	ldrb	r2, [r7, #0]
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ffc6:	f04f 0200 	mov.w	r2, #0
 800ffca:	f04f 0300 	mov.w	r3, #0
 800ffce:	0a02      	lsrs	r2, r0, #8
 800ffd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ffd4:	0a0b      	lsrs	r3, r1, #8
 800ffd6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	60fa      	str	r2, [r7, #12]
 800ffe0:	783a      	ldrb	r2, [r7, #0]
 800ffe2:	701a      	strb	r2, [r3, #0]
 800ffe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ffe8:	f04f 0200 	mov.w	r2, #0
 800ffec:	f04f 0300 	mov.w	r3, #0
 800fff0:	0a02      	lsrs	r2, r0, #8
 800fff2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800fff6:	0a0b      	lsrs	r3, r1, #8
 800fff8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	60fa      	str	r2, [r7, #12]
 8010002:	783a      	ldrb	r2, [r7, #0]
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	e9d7 0100 	ldrd	r0, r1, [r7]
 801000a:	f04f 0200 	mov.w	r2, #0
 801000e:	f04f 0300 	mov.w	r3, #0
 8010012:	0a02      	lsrs	r2, r0, #8
 8010014:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010018:	0a0b      	lsrs	r3, r1, #8
 801001a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	60fa      	str	r2, [r7, #12]
 8010024:	783a      	ldrb	r2, [r7, #0]
 8010026:	701a      	strb	r2, [r3, #0]
 8010028:	e9d7 0100 	ldrd	r0, r1, [r7]
 801002c:	f04f 0200 	mov.w	r2, #0
 8010030:	f04f 0300 	mov.w	r3, #0
 8010034:	0a02      	lsrs	r2, r0, #8
 8010036:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801003a:	0a0b      	lsrs	r3, r1, #8
 801003c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	60fa      	str	r2, [r7, #12]
 8010046:	783a      	ldrb	r2, [r7, #0]
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801004e:	f04f 0200 	mov.w	r2, #0
 8010052:	f04f 0300 	mov.w	r3, #0
 8010056:	0a02      	lsrs	r2, r0, #8
 8010058:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801005c:	0a0b      	lsrs	r3, r1, #8
 801005e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	60fa      	str	r2, [r7, #12]
 8010068:	783a      	ldrb	r2, [r7, #0]
 801006a:	701a      	strb	r2, [r3, #0]
}
 801006c:	bf00      	nop
 801006e:	3714      	adds	r7, #20
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010078:	b480      	push	{r7}
 801007a:	b087      	sub	sp, #28
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00d      	beq.n	80100ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	1c53      	adds	r3, r2, #1
 8010096:	613b      	str	r3, [r7, #16]
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	1c59      	adds	r1, r3, #1
 801009c:	6179      	str	r1, [r7, #20]
 801009e:	7812      	ldrb	r2, [r2, #0]
 80100a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	3b01      	subs	r3, #1
 80100a6:	607b      	str	r3, [r7, #4]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1f1      	bne.n	8010092 <mem_cpy+0x1a>
	}
}
 80100ae:	bf00      	nop
 80100b0:	371c      	adds	r7, #28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80100ba:	b480      	push	{r7}
 80100bc:	b087      	sub	sp, #28
 80100be:	af00      	add	r7, sp, #0
 80100c0:	60f8      	str	r0, [r7, #12]
 80100c2:	60b9      	str	r1, [r7, #8]
 80100c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	617a      	str	r2, [r7, #20]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	b2d2      	uxtb	r2, r2
 80100d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	3b01      	subs	r3, #1
 80100da:	607b      	str	r3, [r7, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1f3      	bne.n	80100ca <mem_set+0x10>
}
 80100e2:	bf00      	nop
 80100e4:	bf00      	nop
 80100e6:	371c      	adds	r7, #28
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80100f0:	b480      	push	{r7}
 80100f2:	b089      	sub	sp, #36	@ 0x24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	61fb      	str	r3, [r7, #28]
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010104:	2300      	movs	r3, #0
 8010106:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	61fa      	str	r2, [r7, #28]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	4619      	mov	r1, r3
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	61ba      	str	r2, [r7, #24]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	1acb      	subs	r3, r1, r3
 801011c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3b01      	subs	r3, #1
 8010122:	607b      	str	r3, [r7, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d002      	beq.n	8010130 <mem_cmp+0x40>
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d0eb      	beq.n	8010108 <mem_cmp+0x18>

	return r;
 8010130:	697b      	ldr	r3, [r7, #20]
}
 8010132:	4618      	mov	r0, r3
 8010134:	3724      	adds	r7, #36	@ 0x24
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801013e:	b480      	push	{r7}
 8010140:	b083      	sub	sp, #12
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010148:	e002      	b.n	8010150 <chk_chr+0x12>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	3301      	adds	r3, #1
 801014e:	607b      	str	r3, [r7, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d005      	beq.n	8010164 <chk_chr+0x26>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	461a      	mov	r2, r3
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	4293      	cmp	r3, r2
 8010162:	d1f2      	bne.n	801014a <chk_chr+0xc>
	return *str;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	781b      	ldrb	r3, [r3, #0]
}
 8010168:	4618      	mov	r0, r3
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d009      	beq.n	8010196 <lock_fs+0x22>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	4618      	mov	r0, r3
 8010188:	f005 f887 	bl	801529a <ff_req_grant>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <lock_fs+0x22>
 8010192:	2301      	movs	r3, #1
 8010194:	e000      	b.n	8010198 <lock_fs+0x24>
 8010196:	2300      	movs	r3, #0
}
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	460b      	mov	r3, r1
 80101aa:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00d      	beq.n	80101ce <unlock_fs+0x2e>
 80101b2:	78fb      	ldrb	r3, [r7, #3]
 80101b4:	2b0c      	cmp	r3, #12
 80101b6:	d00a      	beq.n	80101ce <unlock_fs+0x2e>
 80101b8:	78fb      	ldrb	r3, [r7, #3]
 80101ba:	2b0b      	cmp	r3, #11
 80101bc:	d007      	beq.n	80101ce <unlock_fs+0x2e>
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	2b0f      	cmp	r3, #15
 80101c2:	d004      	beq.n	80101ce <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f005 f87b 	bl	80152c4 <ff_rel_grant>
	}
}
 80101ce:	bf00      	nop
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
	...

080101d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80101e2:	2300      	movs	r3, #0
 80101e4:	60bb      	str	r3, [r7, #8]
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	60fb      	str	r3, [r7, #12]
 80101ea:	e029      	b.n	8010240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80101ec:	4a27      	ldr	r2, [pc, #156]	@ (801028c <chk_lock+0xb4>)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	011b      	lsls	r3, r3, #4
 80101f2:	4413      	add	r3, r2
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d01d      	beq.n	8010236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80101fa:	4a24      	ldr	r2, [pc, #144]	@ (801028c <chk_lock+0xb4>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	011b      	lsls	r3, r3, #4
 8010200:	4413      	add	r3, r2
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	429a      	cmp	r2, r3
 801020a:	d116      	bne.n	801023a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801020c:	4a1f      	ldr	r2, [pc, #124]	@ (801028c <chk_lock+0xb4>)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	011b      	lsls	r3, r3, #4
 8010212:	4413      	add	r3, r2
 8010214:	3304      	adds	r3, #4
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801021c:	429a      	cmp	r2, r3
 801021e:	d10c      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010220:	4a1a      	ldr	r2, [pc, #104]	@ (801028c <chk_lock+0xb4>)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	4413      	add	r3, r2
 8010228:	3308      	adds	r3, #8
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8010230:	429a      	cmp	r2, r3
 8010232:	d102      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010234:	e007      	b.n	8010246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010236:	2301      	movs	r3, #1
 8010238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3301      	adds	r3, #1
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d9d2      	bls.n	80101ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d109      	bne.n	8010260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <chk_lock+0x80>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b02      	cmp	r3, #2
 8010256:	d101      	bne.n	801025c <chk_lock+0x84>
 8010258:	2300      	movs	r3, #0
 801025a:	e010      	b.n	801027e <chk_lock+0xa6>
 801025c:	2312      	movs	r3, #18
 801025e:	e00e      	b.n	801027e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d108      	bne.n	8010278 <chk_lock+0xa0>
 8010266:	4a09      	ldr	r2, [pc, #36]	@ (801028c <chk_lock+0xb4>)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	011b      	lsls	r3, r3, #4
 801026c:	4413      	add	r3, r2
 801026e:	330c      	adds	r3, #12
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010276:	d101      	bne.n	801027c <chk_lock+0xa4>
 8010278:	2310      	movs	r3, #16
 801027a:	e000      	b.n	801027e <chk_lock+0xa6>
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	24001bd0 	.word	0x24001bd0

08010290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010296:	2300      	movs	r3, #0
 8010298:	607b      	str	r3, [r7, #4]
 801029a:	e002      	b.n	80102a2 <enq_lock+0x12>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3301      	adds	r3, #1
 80102a0:	607b      	str	r3, [r7, #4]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d806      	bhi.n	80102b6 <enq_lock+0x26>
 80102a8:	4a09      	ldr	r2, [pc, #36]	@ (80102d0 <enq_lock+0x40>)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	011b      	lsls	r3, r3, #4
 80102ae:	4413      	add	r3, r2
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1f2      	bne.n	801029c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	bf14      	ite	ne
 80102bc:	2301      	movne	r3, #1
 80102be:	2300      	moveq	r3, #0
 80102c0:	b2db      	uxtb	r3, r3
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	24001bd0 	.word	0x24001bd0

080102d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80102de:	2300      	movs	r3, #0
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	e01f      	b.n	8010324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80102e4:	4a41      	ldr	r2, [pc, #260]	@ (80103ec <inc_lock+0x118>)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	011b      	lsls	r3, r3, #4
 80102ea:	4413      	add	r3, r2
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d113      	bne.n	801031e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80102f6:	4a3d      	ldr	r2, [pc, #244]	@ (80103ec <inc_lock+0x118>)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	011b      	lsls	r3, r3, #4
 80102fc:	4413      	add	r3, r2
 80102fe:	3304      	adds	r3, #4
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010306:	429a      	cmp	r2, r3
 8010308:	d109      	bne.n	801031e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801030a:	4a38      	ldr	r2, [pc, #224]	@ (80103ec <inc_lock+0x118>)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	011b      	lsls	r3, r3, #4
 8010310:	4413      	add	r3, r2
 8010312:	3308      	adds	r3, #8
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d006      	beq.n	801032c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d9dc      	bls.n	80102e4 <inc_lock+0x10>
 801032a:	e000      	b.n	801032e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801032c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d132      	bne.n	801039a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010334:	2300      	movs	r3, #0
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e002      	b.n	8010340 <inc_lock+0x6c>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	3301      	adds	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d806      	bhi.n	8010354 <inc_lock+0x80>
 8010346:	4a29      	ldr	r2, [pc, #164]	@ (80103ec <inc_lock+0x118>)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	4413      	add	r3, r2
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1f2      	bne.n	801033a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b02      	cmp	r3, #2
 8010358:	d101      	bne.n	801035e <inc_lock+0x8a>
 801035a:	2300      	movs	r3, #0
 801035c:	e040      	b.n	80103e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4922      	ldr	r1, [pc, #136]	@ (80103ec <inc_lock+0x118>)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	440b      	add	r3, r1
 801036a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	689a      	ldr	r2, [r3, #8]
 8010370:	491e      	ldr	r1, [pc, #120]	@ (80103ec <inc_lock+0x118>)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	011b      	lsls	r3, r3, #4
 8010376:	440b      	add	r3, r1
 8010378:	3304      	adds	r3, #4
 801037a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010380:	491a      	ldr	r1, [pc, #104]	@ (80103ec <inc_lock+0x118>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	440b      	add	r3, r1
 8010388:	3308      	adds	r3, #8
 801038a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801038c:	4a17      	ldr	r2, [pc, #92]	@ (80103ec <inc_lock+0x118>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	4413      	add	r3, r2
 8010394:	330c      	adds	r3, #12
 8010396:	2200      	movs	r2, #0
 8010398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d009      	beq.n	80103b4 <inc_lock+0xe0>
 80103a0:	4a12      	ldr	r2, [pc, #72]	@ (80103ec <inc_lock+0x118>)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	011b      	lsls	r3, r3, #4
 80103a6:	4413      	add	r3, r2
 80103a8:	330c      	adds	r3, #12
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <inc_lock+0xe0>
 80103b0:	2300      	movs	r3, #0
 80103b2:	e015      	b.n	80103e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d108      	bne.n	80103cc <inc_lock+0xf8>
 80103ba:	4a0c      	ldr	r2, [pc, #48]	@ (80103ec <inc_lock+0x118>)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	011b      	lsls	r3, r3, #4
 80103c0:	4413      	add	r3, r2
 80103c2:	330c      	adds	r3, #12
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	3301      	adds	r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	e001      	b.n	80103d0 <inc_lock+0xfc>
 80103cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80103d0:	4906      	ldr	r1, [pc, #24]	@ (80103ec <inc_lock+0x118>)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	440b      	add	r3, r1
 80103d8:	330c      	adds	r3, #12
 80103da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3301      	adds	r3, #1
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	24001bd0 	.word	0x24001bd0

080103f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	e010      	b.n	8010420 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80103fe:	4a0d      	ldr	r2, [pc, #52]	@ (8010434 <clear_lock+0x44>)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	4413      	add	r3, r2
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d105      	bne.n	801041a <clear_lock+0x2a>
 801040e:	4a09      	ldr	r2, [pc, #36]	@ (8010434 <clear_lock+0x44>)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	011b      	lsls	r3, r3, #4
 8010414:	4413      	add	r3, r2
 8010416:	2200      	movs	r2, #0
 8010418:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d9eb      	bls.n	80103fe <clear_lock+0xe>
	}
}
 8010426:	bf00      	nop
 8010428:	bf00      	nop
 801042a:	3714      	adds	r7, #20
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	24001bd0 	.word	0x24001bd0

08010438 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	78db      	ldrb	r3, [r3, #3]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d034      	beq.n	80104b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010450:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7858      	ldrb	r0, [r3, #1]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801045c:	2301      	movs	r3, #1
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	f7ff fbe6 	bl	800fc30 <disk_write>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d002      	beq.n	8010470 <sync_window+0x38>
			res = FR_DISK_ERR;
 801046a:	2301      	movs	r3, #1
 801046c:	73fb      	strb	r3, [r7, #15]
 801046e:	e022      	b.n	80104b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2200      	movs	r2, #0
 8010474:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	1ad2      	subs	r2, r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010482:	429a      	cmp	r2, r3
 8010484:	d217      	bcs.n	80104b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	789b      	ldrb	r3, [r3, #2]
 801048a:	613b      	str	r3, [r7, #16]
 801048c:	e010      	b.n	80104b0 <sync_window+0x78>
					wsect += fs->fsize;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	4413      	add	r3, r2
 8010496:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	7858      	ldrb	r0, [r3, #1]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80104a2:	2301      	movs	r3, #1
 80104a4:	697a      	ldr	r2, [r7, #20]
 80104a6:	f7ff fbc3 	bl	800fc30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	3b01      	subs	r3, #1
 80104ae:	613b      	str	r3, [r7, #16]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d8eb      	bhi.n	801048e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80104ca:	2300      	movs	r3, #0
 80104cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d01b      	beq.n	8010510 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff ffad 	bl	8010438 <sync_window>
 80104de:	4603      	mov	r3, r0
 80104e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80104e2:	7bfb      	ldrb	r3, [r7, #15]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d113      	bne.n	8010510 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7858      	ldrb	r0, [r3, #1]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80104f2:	2301      	movs	r3, #1
 80104f4:	683a      	ldr	r2, [r7, #0]
 80104f6:	f7ff fb7b 	bl	800fbf0 <disk_read>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d004      	beq.n	801050a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010500:	f04f 33ff 	mov.w	r3, #4294967295
 8010504:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010506:	2301      	movs	r3, #1
 8010508:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	683a      	ldr	r2, [r7, #0]
 801050e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8010510:	7bfb      	ldrb	r3, [r7, #15]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff ff87 	bl	8010438 <sync_window>
 801052a:	4603      	mov	r3, r0
 801052c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d158      	bne.n	80105e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	2b03      	cmp	r3, #3
 801053a:	d148      	bne.n	80105ce <sync_fs+0xb2>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	791b      	ldrb	r3, [r3, #4]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d144      	bne.n	80105ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	333c      	adds	r3, #60	@ 0x3c
 8010548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801054c:	2100      	movs	r1, #0
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff fdb3 	bl	80100ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	333c      	adds	r3, #60	@ 0x3c
 8010558:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801055c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010560:	4618      	mov	r0, r3
 8010562:	f7ff fcba 	bl	800feda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	333c      	adds	r3, #60	@ 0x3c
 801056a:	4921      	ldr	r1, [pc, #132]	@ (80105f0 <sync_fs+0xd4>)
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fccf 	bl	800ff10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	333c      	adds	r3, #60	@ 0x3c
 8010576:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801057a:	491e      	ldr	r1, [pc, #120]	@ (80105f4 <sync_fs+0xd8>)
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff fcc7 	bl	800ff10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	333c      	adds	r3, #60	@ 0x3c
 8010586:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	69db      	ldr	r3, [r3, #28]
 801058e:	4619      	mov	r1, r3
 8010590:	4610      	mov	r0, r2
 8010592:	f7ff fcbd 	bl	800ff10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	333c      	adds	r3, #60	@ 0x3c
 801059a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	4619      	mov	r1, r3
 80105a4:	4610      	mov	r0, r2
 80105a6:	f7ff fcb3 	bl	800ff10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ae:	1c5a      	adds	r2, r3, #1
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	7858      	ldrb	r0, [r3, #1]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105c2:	2301      	movs	r3, #1
 80105c4:	f7ff fb34 	bl	800fc30 <disk_write>
			fs->fsi_flag = 0;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	785b      	ldrb	r3, [r3, #1]
 80105d2:	2200      	movs	r2, #0
 80105d4:	2100      	movs	r1, #0
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7ff fb4a 	bl	800fc70 <disk_ioctl>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <sync_fs+0xca>
 80105e2:	2301      	movs	r3, #1
 80105e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	41615252 	.word	0x41615252
 80105f4:	61417272 	.word	0x61417272

080105f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	3b02      	subs	r3, #2
 8010606:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6a1b      	ldr	r3, [r3, #32]
 801060c:	3b02      	subs	r3, #2
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	429a      	cmp	r2, r3
 8010612:	d301      	bcc.n	8010618 <clust2sect+0x20>
 8010614:	2300      	movs	r3, #0
 8010616:	e008      	b.n	801062a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	895b      	ldrh	r3, [r3, #10]
 801061c:	461a      	mov	r2, r3
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	fb03 f202 	mul.w	r2, r3, r2
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010628:	4413      	add	r3, r2
}
 801062a:	4618      	mov	r0, r3
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
	...

08010638 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b088      	sub	sp, #32
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010642:	6879      	ldr	r1, [r7, #4]
 8010644:	6809      	ldr	r1, [r1, #0]
 8010646:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	2901      	cmp	r1, #1
 801064c:	d904      	bls.n	8010658 <get_fat+0x20>
 801064e:	69b9      	ldr	r1, [r7, #24]
 8010650:	6a09      	ldr	r1, [r1, #32]
 8010652:	6838      	ldr	r0, [r7, #0]
 8010654:	4288      	cmp	r0, r1
 8010656:	d302      	bcc.n	801065e <get_fat+0x26>
		val = 1;	/* Internal error */
 8010658:	2301      	movs	r3, #1
 801065a:	61fb      	str	r3, [r7, #28]
 801065c:	e100      	b.n	8010860 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801065e:	f04f 31ff 	mov.w	r1, #4294967295
 8010662:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8010664:	69b9      	ldr	r1, [r7, #24]
 8010666:	7809      	ldrb	r1, [r1, #0]
 8010668:	3901      	subs	r1, #1
 801066a:	2903      	cmp	r1, #3
 801066c:	f200 80ec 	bhi.w	8010848 <get_fat+0x210>
 8010670:	a001      	add	r0, pc, #4	@ (adr r0, 8010678 <get_fat+0x40>)
 8010672:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010676:	bf00      	nop
 8010678:	08010689 	.word	0x08010689
 801067c:	0801070f 	.word	0x0801070f
 8010680:	08010745 	.word	0x08010745
 8010684:	0801077d 	.word	0x0801077d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	085b      	lsrs	r3, r3, #1
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	4413      	add	r3, r2
 8010694:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	0a5b      	lsrs	r3, r3, #9
 801069e:	4413      	add	r3, r2
 80106a0:	4619      	mov	r1, r3
 80106a2:	69b8      	ldr	r0, [r7, #24]
 80106a4:	f7ff ff0c 	bl	80104c0 <move_window>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f040 80cf 	bne.w	801084e <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	60fa      	str	r2, [r7, #12]
 80106b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106ba:	69ba      	ldr	r2, [r7, #24]
 80106bc:	4413      	add	r3, r2
 80106be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106c2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	0a5b      	lsrs	r3, r3, #9
 80106cc:	4413      	add	r3, r2
 80106ce:	4619      	mov	r1, r3
 80106d0:	69b8      	ldr	r0, [r7, #24]
 80106d2:	f7ff fef5 	bl	80104c0 <move_window>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f040 80ba 	bne.w	8010852 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106e4:	69ba      	ldr	r2, [r7, #24]
 80106e6:	4413      	add	r3, r2
 80106e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106ec:	021b      	lsls	r3, r3, #8
 80106ee:	68ba      	ldr	r2, [r7, #8]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	f003 0301 	and.w	r3, r3, #1
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d002      	beq.n	8010704 <get_fat+0xcc>
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	091b      	lsrs	r3, r3, #4
 8010702:	e002      	b.n	801070a <get_fat+0xd2>
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801070a:	61fb      	str	r3, [r7, #28]
			break;
 801070c:	e0a8      	b.n	8010860 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	0a1b      	lsrs	r3, r3, #8
 8010716:	4413      	add	r3, r2
 8010718:	4619      	mov	r1, r3
 801071a:	69b8      	ldr	r0, [r7, #24]
 801071c:	f7ff fed0 	bl	80104c0 <move_window>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	f040 8097 	bne.w	8010856 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	005b      	lsls	r3, r3, #1
 8010732:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010736:	4413      	add	r3, r2
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff fab7 	bl	800fcac <ld_word>
 801073e:	4603      	mov	r3, r0
 8010740:	61fb      	str	r3, [r7, #28]
			break;
 8010742:	e08d      	b.n	8010860 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	09db      	lsrs	r3, r3, #7
 801074c:	4413      	add	r3, r2
 801074e:	4619      	mov	r1, r3
 8010750:	69b8      	ldr	r0, [r7, #24]
 8010752:	f7ff feb5 	bl	80104c0 <move_window>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d17e      	bne.n	801085a <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801076a:	4413      	add	r3, r2
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff fab6 	bl	800fcde <ld_dword>
 8010772:	4603      	mov	r3, r0
 8010774:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010778:	61fb      	str	r3, [r7, #28]
			break;
 801077a:	e071      	b.n	8010860 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 801077c:	6879      	ldr	r1, [r7, #4]
 801077e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010782:	4301      	orrs	r1, r0
 8010784:	d060      	beq.n	8010848 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010786:	6879      	ldr	r1, [r7, #4]
 8010788:	6889      	ldr	r1, [r1, #8]
 801078a:	6838      	ldr	r0, [r7, #0]
 801078c:	1a41      	subs	r1, r0, r1
 801078e:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8010790:	6879      	ldr	r1, [r7, #4]
 8010792:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010796:	1e42      	subs	r2, r0, #1
 8010798:	f141 33ff 	adc.w	r3, r1, #4294967295
 801079c:	f04f 0000 	mov.w	r0, #0
 80107a0:	f04f 0100 	mov.w	r1, #0
 80107a4:	0a50      	lsrs	r0, r2, #9
 80107a6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80107aa:	0a59      	lsrs	r1, r3, #9
 80107ac:	4602      	mov	r2, r0
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	895b      	ldrh	r3, [r3, #10]
 80107b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80107b6:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	79db      	ldrb	r3, [r3, #7]
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d10e      	bne.n	80107de <get_fat+0x1a6>
					if (cofs <= clen) {
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d80a      	bhi.n	80107de <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80107c8:	697a      	ldr	r2, [r7, #20]
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d002      	beq.n	80107d6 <get_fat+0x19e>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	3301      	adds	r3, #1
 80107d4:	e001      	b.n	80107da <get_fat+0x1a2>
 80107d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107da:	61fb      	str	r3, [r7, #28]
						break;
 80107dc:	e040      	b.n	8010860 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	79db      	ldrb	r3, [r3, #7]
 80107e2:	2b03      	cmp	r3, #3
 80107e4:	d108      	bne.n	80107f8 <get_fat+0x1c0>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	697a      	ldr	r2, [r7, #20]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d203      	bcs.n	80107f8 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	3301      	adds	r3, #1
 80107f4:	61fb      	str	r3, [r7, #28]
					break;
 80107f6:	e033      	b.n	8010860 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	79db      	ldrb	r3, [r3, #7]
 80107fc:	2b02      	cmp	r3, #2
 80107fe:	d023      	beq.n	8010848 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010808:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801080c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 801080e:	e027      	b.n	8010860 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	09db      	lsrs	r3, r3, #7
 8010818:	4413      	add	r3, r2
 801081a:	4619      	mov	r1, r3
 801081c:	69b8      	ldr	r0, [r7, #24]
 801081e:	f7ff fe4f 	bl	80104c0 <move_window>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d11a      	bne.n	801085e <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010836:	4413      	add	r3, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff fa50 	bl	800fcde <ld_dword>
 801083e:	4603      	mov	r3, r0
 8010840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010844:	61fb      	str	r3, [r7, #28]
					break;
 8010846:	e00b      	b.n	8010860 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010848:	2301      	movs	r3, #1
 801084a:	61fb      	str	r3, [r7, #28]
 801084c:	e008      	b.n	8010860 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801084e:	bf00      	nop
 8010850:	e006      	b.n	8010860 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010852:	bf00      	nop
 8010854:	e004      	b.n	8010860 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010856:	bf00      	nop
 8010858:	e002      	b.n	8010860 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801085a:	bf00      	nop
 801085c:	e000      	b.n	8010860 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801085e:	bf00      	nop
		}
	}

	return val;
 8010860:	69fb      	ldr	r3, [r7, #28]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3720      	adds	r7, #32
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop

0801086c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801086c:	b590      	push	{r4, r7, lr}
 801086e:	b089      	sub	sp, #36	@ 0x24
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010878:	2302      	movs	r3, #2
 801087a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	2b01      	cmp	r3, #1
 8010880:	f240 80dd 	bls.w	8010a3e <put_fat+0x1d2>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6a1b      	ldr	r3, [r3, #32]
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	429a      	cmp	r2, r3
 801088c:	f080 80d7 	bcs.w	8010a3e <put_fat+0x1d2>
		switch (fs->fs_type) {
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2b04      	cmp	r3, #4
 8010896:	f300 80d2 	bgt.w	8010a3e <put_fat+0x1d2>
 801089a:	2b03      	cmp	r3, #3
 801089c:	f280 8093 	bge.w	80109c6 <put_fat+0x15a>
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d002      	beq.n	80108aa <put_fat+0x3e>
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	d06e      	beq.n	8010986 <put_fat+0x11a>
 80108a8:	e0c9      	b.n	8010a3e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	61bb      	str	r3, [r7, #24]
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	085b      	lsrs	r3, r3, #1
 80108b2:	69ba      	ldr	r2, [r7, #24]
 80108b4:	4413      	add	r3, r2
 80108b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	0a5b      	lsrs	r3, r3, #9
 80108c0:	4413      	add	r3, r2
 80108c2:	4619      	mov	r1, r3
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f7ff fdfb 	bl	80104c0 <move_window>
 80108ca:	4603      	mov	r3, r0
 80108cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80108ce:	7ffb      	ldrb	r3, [r7, #31]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f040 80ad 	bne.w	8010a30 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	1c59      	adds	r1, r3, #1
 80108e0:	61b9      	str	r1, [r7, #24]
 80108e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e6:	4413      	add	r3, r2
 80108e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	f003 0301 	and.w	r3, r3, #1
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00d      	beq.n	8010910 <put_fat+0xa4>
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	b25b      	sxtb	r3, r3
 80108fa:	f003 030f 	and.w	r3, r3, #15
 80108fe:	b25a      	sxtb	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	b25b      	sxtb	r3, r3
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	b25b      	sxtb	r3, r3
 8010908:	4313      	orrs	r3, r2
 801090a:	b25b      	sxtb	r3, r3
 801090c:	b2db      	uxtb	r3, r3
 801090e:	e001      	b.n	8010914 <put_fat+0xa8>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	b2db      	uxtb	r3, r3
 8010914:	697a      	ldr	r2, [r7, #20]
 8010916:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2201      	movs	r2, #1
 801091c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	0a5b      	lsrs	r3, r3, #9
 8010926:	4413      	add	r3, r2
 8010928:	4619      	mov	r1, r3
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f7ff fdc8 	bl	80104c0 <move_window>
 8010930:	4603      	mov	r3, r0
 8010932:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010934:	7ffb      	ldrb	r3, [r7, #31]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d17c      	bne.n	8010a34 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010946:	4413      	add	r3, r2
 8010948:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	f003 0301 	and.w	r3, r3, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	d003      	beq.n	801095c <put_fat+0xf0>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	091b      	lsrs	r3, r3, #4
 8010958:	b2db      	uxtb	r3, r3
 801095a:	e00e      	b.n	801097a <put_fat+0x10e>
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	b25b      	sxtb	r3, r3
 8010962:	f023 030f 	bic.w	r3, r3, #15
 8010966:	b25a      	sxtb	r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	0a1b      	lsrs	r3, r3, #8
 801096c:	b25b      	sxtb	r3, r3
 801096e:	f003 030f 	and.w	r3, r3, #15
 8010972:	b25b      	sxtb	r3, r3
 8010974:	4313      	orrs	r3, r2
 8010976:	b25b      	sxtb	r3, r3
 8010978:	b2db      	uxtb	r3, r3
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2201      	movs	r2, #1
 8010982:	70da      	strb	r2, [r3, #3]
			break;
 8010984:	e05b      	b.n	8010a3e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	0a1b      	lsrs	r3, r3, #8
 801098e:	4413      	add	r3, r2
 8010990:	4619      	mov	r1, r3
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	f7ff fd94 	bl	80104c0 <move_window>
 8010998:	4603      	mov	r3, r0
 801099a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801099c:	7ffb      	ldrb	r3, [r7, #31]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d14a      	bne.n	8010a38 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80109b0:	4413      	add	r3, r2
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	b292      	uxth	r2, r2
 80109b6:	4611      	mov	r1, r2
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7ff fa8e 	bl	800feda <st_word>
			fs->wflag = 1;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	70da      	strb	r2, [r3, #3]
			break;
 80109c4:	e03b      	b.n	8010a3e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	09db      	lsrs	r3, r3, #7
 80109ce:	4413      	add	r3, r2
 80109d0:	4619      	mov	r1, r3
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f7ff fd74 	bl	80104c0 <move_window>
 80109d8:	4603      	mov	r3, r0
 80109da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109dc:	7ffb      	ldrb	r3, [r7, #31]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d12c      	bne.n	8010a3c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	2b04      	cmp	r3, #4
 80109e8:	d012      	beq.n	8010a10 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80109fe:	4413      	add	r3, r2
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff f96c 	bl	800fcde <ld_dword>
 8010a06:	4603      	mov	r3, r0
 8010a08:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010a0c:	4323      	orrs	r3, r4
 8010a0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010a1e:	4413      	add	r3, r2
 8010a20:	6879      	ldr	r1, [r7, #4]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7ff fa74 	bl	800ff10 <st_dword>
			fs->wflag = 1;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	70da      	strb	r2, [r3, #3]
			break;
 8010a2e:	e006      	b.n	8010a3e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010a30:	bf00      	nop
 8010a32:	e004      	b.n	8010a3e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010a34:	bf00      	nop
 8010a36:	e002      	b.n	8010a3e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010a38:	bf00      	nop
 8010a3a:	e000      	b.n	8010a3e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8010a3c:	bf00      	nop
		}
	}
	return res;
 8010a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3724      	adds	r7, #36	@ 0x24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd90      	pop	{r4, r7, pc}

08010a48 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08a      	sub	sp, #40	@ 0x28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	3b02      	subs	r3, #2
 8010a58:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6a1b      	ldr	r3, [r3, #32]
 8010a5e:	3b02      	subs	r3, #2
 8010a60:	68ba      	ldr	r2, [r7, #8]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d301      	bcc.n	8010a6a <find_bitmap+0x22>
 8010a66:	2300      	movs	r3, #0
 8010a68:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	61fb      	str	r3, [r7, #28]
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	61bb      	str	r3, [r7, #24]
 8010a72:	2300      	movs	r3, #0
 8010a74:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	0b1b      	lsrs	r3, r3, #12
 8010a7e:	4413      	add	r3, r2
 8010a80:	4619      	mov	r1, r3
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f7ff fd1c 	bl	80104c0 <move_window>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d002      	beq.n	8010a94 <find_bitmap+0x4c>
 8010a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a92:	e051      	b.n	8010b38 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	08db      	lsrs	r3, r3, #3
 8010a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a9c:	623b      	str	r3, [r7, #32]
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	f003 0307 	and.w	r3, r3, #7
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8010aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	6a3b      	ldr	r3, [r7, #32]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	333c      	adds	r3, #60	@ 0x3c
 8010ab6:	781a      	ldrb	r2, [r3, #0]
 8010ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010abc:	4013      	ands	r3, r2
 8010abe:	74fb      	strb	r3, [r7, #19]
 8010ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	3301      	adds	r3, #1
 8010ace:	61fb      	str	r3, [r7, #28]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6a1b      	ldr	r3, [r3, #32]
 8010ad4:	3b02      	subs	r3, #2
 8010ad6:	69fa      	ldr	r2, [r7, #28]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d307      	bcc.n	8010aec <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8010adc:	2300      	movs	r3, #0
 8010ade:	61fb      	str	r3, [r7, #28]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010aea:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010aec:	7cfb      	ldrb	r3, [r7, #19]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d109      	bne.n	8010b06 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	3301      	adds	r3, #1
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d106      	bne.n	8010b0e <find_bitmap+0xc6>
 8010b00:	69bb      	ldr	r3, [r7, #24]
 8010b02:	3302      	adds	r3, #2
 8010b04:	e018      	b.n	8010b38 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	61bb      	str	r3, [r7, #24]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010b0e:	69fa      	ldr	r2, [r7, #28]
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d101      	bne.n	8010b1a <find_bitmap+0xd2>
 8010b16:	2300      	movs	r3, #0
 8010b18:	e00e      	b.n	8010b38 <find_bitmap+0xf0>
			} while (bm);
 8010b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1c5      	bne.n	8010aae <find_bitmap+0x66>
			bm = 1;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	623b      	str	r3, [r7, #32]
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b34:	d3bb      	bcc.n	8010aae <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010b36:	e79e      	b.n	8010a76 <find_bitmap+0x2e>
	}
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3728      	adds	r7, #40	@ 0x28
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	3b02      	subs	r3, #2
 8010b52:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	0b1b      	lsrs	r3, r3, #12
 8010b5c:	4413      	add	r3, r2
 8010b5e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	08db      	lsrs	r3, r3, #3
 8010b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b68:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	f003 0307 	and.w	r3, r3, #7
 8010b70:	2201      	movs	r2, #1
 8010b72:	fa02 f303 	lsl.w	r3, r2, r3
 8010b76:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	617a      	str	r2, [r7, #20]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f7ff fc9d 	bl	80104c0 <move_window>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d001      	beq.n	8010b90 <change_bitmap+0x50>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	e03d      	b.n	8010c0c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	4413      	add	r3, r2
 8010b96:	333c      	adds	r3, #60	@ 0x3c
 8010b98:	781a      	ldrb	r2, [r3, #0]
 8010b9a:	7ffb      	ldrb	r3, [r7, #31]
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	bf14      	ite	ne
 8010ba4:	2301      	movne	r3, #1
 8010ba6:	2300      	moveq	r3, #0
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	461a      	mov	r2, r3
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d101      	bne.n	8010bb6 <change_bitmap+0x76>
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	e02a      	b.n	8010c0c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	4413      	add	r3, r2
 8010bbc:	333c      	adds	r3, #60	@ 0x3c
 8010bbe:	781a      	ldrb	r2, [r3, #0]
 8010bc0:	7ffb      	ldrb	r3, [r7, #31]
 8010bc2:	4053      	eors	r3, r2
 8010bc4:	b2d9      	uxtb	r1, r3
 8010bc6:	68fa      	ldr	r2, [r7, #12]
 8010bc8:	69bb      	ldr	r3, [r7, #24]
 8010bca:	4413      	add	r3, r2
 8010bcc:	333c      	adds	r3, #60	@ 0x3c
 8010bce:	460a      	mov	r2, r1
 8010bd0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	607b      	str	r3, [r7, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d101      	bne.n	8010be8 <change_bitmap+0xa8>
 8010be4:	2300      	movs	r3, #0
 8010be6:	e011      	b.n	8010c0c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8010be8:	7ffb      	ldrb	r3, [r7, #31]
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	77fb      	strb	r3, [r7, #31]
 8010bee:	7ffb      	ldrb	r3, [r7, #31]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1cd      	bne.n	8010b90 <change_bitmap+0x50>
			bm = 1;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	61bb      	str	r3, [r7, #24]
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c04:	d3c4      	bcc.n	8010b90 <change_bitmap+0x50>
		i = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010c0a:	e7b5      	b.n	8010b78 <change_bitmap+0x38>
	}
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3720      	adds	r7, #32
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b086      	sub	sp, #24
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	79db      	ldrb	r3, [r3, #7]
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	d121      	bne.n	8010c68 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	617b      	str	r3, [r7, #20]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	699b      	ldr	r3, [r3, #24]
 8010c2e:	613b      	str	r3, [r7, #16]
 8010c30:	e014      	b.n	8010c5c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6818      	ldr	r0, [r3, #0]
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	6979      	ldr	r1, [r7, #20]
 8010c3e:	f7ff fe15 	bl	801086c <put_fat>
 8010c42:	4603      	mov	r3, r0
 8010c44:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d001      	beq.n	8010c50 <fill_first_frag+0x3c>
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	e00c      	b.n	8010c6a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	3301      	adds	r3, #1
 8010c54:	617b      	str	r3, [r7, #20]
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	613b      	str	r3, [r7, #16]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1e7      	bne.n	8010c32 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3718      	adds	r7, #24
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b086      	sub	sp, #24
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	60f8      	str	r0, [r7, #12]
 8010c7a:	60b9      	str	r1, [r7, #8]
 8010c7c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010c7e:	e020      	b.n	8010cc2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6818      	ldr	r0, [r3, #0]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	69db      	ldr	r3, [r3, #28]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	1ad3      	subs	r3, r2, r3
 8010c8c:	1c59      	adds	r1, r3, #1
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	69db      	ldr	r3, [r3, #28]
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d905      	bls.n	8010ca2 <fill_last_frag+0x30>
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	69db      	ldr	r3, [r3, #28]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	3302      	adds	r3, #2
 8010ca0:	e000      	b.n	8010ca4 <fill_last_frag+0x32>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	f7ff fde1 	bl	801086c <put_fat>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <fill_last_frag+0x46>
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	e009      	b.n	8010ccc <fill_last_frag+0x5a>
		obj->n_frag--;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	69db      	ldr	r3, [r3, #28]
 8010cbc:	1e5a      	subs	r2, r3, #1
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	69db      	ldr	r3, [r3, #28]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1da      	bne.n	8010c80 <fill_last_frag+0xe>
	}
	return FR_OK;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b08a      	sub	sp, #40	@ 0x28
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d904      	bls.n	8010d02 <remove_chain+0x2e>
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	6a1b      	ldr	r3, [r3, #32]
 8010cfc:	68ba      	ldr	r2, [r7, #8]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d301      	bcc.n	8010d06 <remove_chain+0x32>
 8010d02:	2302      	movs	r3, #2
 8010d04:	e096      	b.n	8010e34 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d014      	beq.n	8010d36 <remove_chain+0x62>
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	2b04      	cmp	r3, #4
 8010d12:	d103      	bne.n	8010d1c <remove_chain+0x48>
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	79db      	ldrb	r3, [r3, #7]
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d00c      	beq.n	8010d36 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d20:	6879      	ldr	r1, [r7, #4]
 8010d22:	69b8      	ldr	r0, [r7, #24]
 8010d24:	f7ff fda2 	bl	801086c <put_fat>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010d2c:	7ffb      	ldrb	r3, [r7, #31]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <remove_chain+0x62>
 8010d32:	7ffb      	ldrb	r3, [r7, #31]
 8010d34:	e07e      	b.n	8010e34 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010d36:	68b9      	ldr	r1, [r7, #8]
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f7ff fc7d 	bl	8010638 <get_fat>
 8010d3e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d055      	beq.n	8010df2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d101      	bne.n	8010d50 <remove_chain+0x7c>
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	e071      	b.n	8010e34 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d56:	d101      	bne.n	8010d5c <remove_chain+0x88>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e06b      	b.n	8010e34 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	2b04      	cmp	r3, #4
 8010d62:	d00b      	beq.n	8010d7c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010d64:	2200      	movs	r2, #0
 8010d66:	68b9      	ldr	r1, [r7, #8]
 8010d68:	69b8      	ldr	r0, [r7, #24]
 8010d6a:	f7ff fd7f 	bl	801086c <put_fat>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010d72:	7ffb      	ldrb	r3, [r7, #31]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <remove_chain+0xa8>
 8010d78:	7ffb      	ldrb	r3, [r7, #31]
 8010d7a:	e05b      	b.n	8010e34 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	69da      	ldr	r2, [r3, #28]
 8010d80:	69bb      	ldr	r3, [r7, #24]
 8010d82:	6a1b      	ldr	r3, [r3, #32]
 8010d84:	3b02      	subs	r3, #2
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d20b      	bcs.n	8010da2 <remove_chain+0xce>
			fs->free_clst++;
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	1c5a      	adds	r2, r3, #1
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	791b      	ldrb	r3, [r3, #4]
 8010d98:	f043 0301 	orr.w	r3, r3, #1
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	3301      	adds	r3, #1
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d102      	bne.n	8010db2 <remove_chain+0xde>
			ecl = nxt;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	623b      	str	r3, [r7, #32]
 8010db0:	e017      	b.n	8010de2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	2b04      	cmp	r3, #4
 8010db8:	d10f      	bne.n	8010dda <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8010dba:	6a3a      	ldr	r2, [r7, #32]
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	1c5a      	adds	r2, r3, #1
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010dc6:	69b8      	ldr	r0, [r7, #24]
 8010dc8:	f7ff feba 	bl	8010b40 <change_bitmap>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8010dd0:	7ffb      	ldrb	r3, [r7, #31]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d001      	beq.n	8010dda <remove_chain+0x106>
 8010dd6:	7ffb      	ldrb	r3, [r7, #31]
 8010dd8:	e02c      	b.n	8010e34 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	623b      	str	r3, [r7, #32]
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	68ba      	ldr	r2, [r7, #8]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d3a2      	bcc.n	8010d36 <remove_chain+0x62>
 8010df0:	e000      	b.n	8010df4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8010df2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2b04      	cmp	r3, #4
 8010dfa:	d11a      	bne.n	8010e32 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d103      	bne.n	8010e0a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2200      	movs	r2, #0
 8010e06:	71da      	strb	r2, [r3, #7]
 8010e08:	e013      	b.n	8010e32 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	79db      	ldrb	r3, [r3, #7]
 8010e0e:	2b03      	cmp	r3, #3
 8010e10:	d10f      	bne.n	8010e32 <remove_chain+0x15e>
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d30a      	bcc.n	8010e32 <remove_chain+0x15e>
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	689a      	ldr	r2, [r3, #8]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	699b      	ldr	r3, [r3, #24]
 8010e24:	4413      	add	r3, r2
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d802      	bhi.n	8010e32 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2202      	movs	r2, #2
 8010e30:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3728      	adds	r7, #40	@ 0x28
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b088      	sub	sp, #32
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10d      	bne.n	8010e6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d004      	beq.n	8010e68 <create_chain+0x2c>
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	6a1b      	ldr	r3, [r3, #32]
 8010e62:	69ba      	ldr	r2, [r7, #24]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d31b      	bcc.n	8010ea0 <create_chain+0x64>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	61bb      	str	r3, [r7, #24]
 8010e6c:	e018      	b.n	8010ea0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e6e:	6839      	ldr	r1, [r7, #0]
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7ff fbe1 	bl	8010638 <get_fat>
 8010e76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d801      	bhi.n	8010e82 <create_chain+0x46>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e0d9      	b.n	8011036 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e88:	d101      	bne.n	8010e8e <create_chain+0x52>
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	e0d3      	b.n	8011036 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	6a1b      	ldr	r3, [r3, #32]
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d201      	bcs.n	8010e9c <create_chain+0x60>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	e0cc      	b.n	8011036 <create_chain+0x1fa>
		scl = clst;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	2b04      	cmp	r3, #4
 8010ea6:	d164      	bne.n	8010f72 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	69b9      	ldr	r1, [r7, #24]
 8010eac:	6938      	ldr	r0, [r7, #16]
 8010eae:	f7ff fdcb 	bl	8010a48 <find_bitmap>
 8010eb2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <create_chain+0x86>
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec0:	d101      	bne.n	8010ec6 <create_chain+0x8a>
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	e0b7      	b.n	8011036 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	2201      	movs	r2, #1
 8010eca:	69f9      	ldr	r1, [r7, #28]
 8010ecc:	6938      	ldr	r0, [r7, #16]
 8010ece:	f7ff fe37 	bl	8010b40 <change_bitmap>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d101      	bne.n	8010ee0 <create_chain+0xa4>
 8010edc:	2301      	movs	r3, #1
 8010ede:	e0aa      	b.n	8011036 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d102      	bne.n	8010eec <create_chain+0xb0>
 8010ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8010eea:	e0a4      	b.n	8011036 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d103      	bne.n	8010efa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2202      	movs	r2, #2
 8010ef6:	71da      	strb	r2, [r3, #7]
 8010ef8:	e011      	b.n	8010f1e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	79db      	ldrb	r3, [r3, #7]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d10d      	bne.n	8010f1e <create_chain+0xe2>
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	3301      	adds	r3, #1
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d008      	beq.n	8010f1e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	689b      	ldr	r3, [r3, #8]
 8010f10:	69ba      	ldr	r2, [r7, #24]
 8010f12:	1ad2      	subs	r2, r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2203      	movs	r2, #3
 8010f1c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	79db      	ldrb	r3, [r3, #7]
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d064      	beq.n	8010ff0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	69fa      	ldr	r2, [r7, #28]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d10b      	bne.n	8010f48 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	69db      	ldr	r3, [r3, #28]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d003      	beq.n	8010f40 <create_chain+0x104>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	69db      	ldr	r3, [r3, #28]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	e000      	b.n	8010f42 <create_chain+0x106>
 8010f40:	2302      	movs	r3, #2
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	61d3      	str	r3, [r2, #28]
 8010f46:	e053      	b.n	8010ff0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	69db      	ldr	r3, [r3, #28]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <create_chain+0x11a>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8010f56:	69fa      	ldr	r2, [r7, #28]
 8010f58:	6839      	ldr	r1, [r7, #0]
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7ff fe89 	bl	8010c72 <fill_last_frag>
 8010f60:	4603      	mov	r3, r0
 8010f62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8010f64:	7dfb      	ldrb	r3, [r7, #23]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d142      	bne.n	8010ff0 <create_chain+0x1b4>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	61da      	str	r2, [r3, #28]
 8010f70:	e03e      	b.n	8010ff0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	6a1b      	ldr	r3, [r3, #32]
 8010f80:	69fa      	ldr	r2, [r7, #28]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d307      	bcc.n	8010f96 <create_chain+0x15a>
				ncl = 2;
 8010f86:	2302      	movs	r3, #2
 8010f88:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010f8a:	69fa      	ldr	r2, [r7, #28]
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d901      	bls.n	8010f96 <create_chain+0x15a>
 8010f92:	2300      	movs	r3, #0
 8010f94:	e04f      	b.n	8011036 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010f96:	69f9      	ldr	r1, [r7, #28]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ff fb4d 	bl	8010638 <get_fat>
 8010f9e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00e      	beq.n	8010fc4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	d003      	beq.n	8010fb4 <create_chain+0x178>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb2:	d101      	bne.n	8010fb8 <create_chain+0x17c>
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	e03e      	b.n	8011036 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8010fb8:	69fa      	ldr	r2, [r7, #28]
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d1da      	bne.n	8010f76 <create_chain+0x13a>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e038      	b.n	8011036 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8010fc4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fca:	69f9      	ldr	r1, [r7, #28]
 8010fcc:	6938      	ldr	r0, [r7, #16]
 8010fce:	f7ff fc4d 	bl	801086c <put_fat>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d109      	bne.n	8010ff0 <create_chain+0x1b4>
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d006      	beq.n	8010ff0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010fe2:	69fa      	ldr	r2, [r7, #28]
 8010fe4:	6839      	ldr	r1, [r7, #0]
 8010fe6:	6938      	ldr	r0, [r7, #16]
 8010fe8:	f7ff fc40 	bl	801086c <put_fat>
 8010fec:	4603      	mov	r3, r0
 8010fee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d116      	bne.n	8011024 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	69fa      	ldr	r2, [r7, #28]
 8010ffa:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	69da      	ldr	r2, [r3, #28]
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	6a1b      	ldr	r3, [r3, #32]
 8011004:	3b02      	subs	r3, #2
 8011006:	429a      	cmp	r2, r3
 8011008:	d804      	bhi.n	8011014 <create_chain+0x1d8>
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	1e5a      	subs	r2, r3, #1
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	791b      	ldrb	r3, [r3, #4]
 8011018:	f043 0301 	orr.w	r3, r3, #1
 801101c:	b2da      	uxtb	r2, r3
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	711a      	strb	r2, [r3, #4]
 8011022:	e007      	b.n	8011034 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	2b01      	cmp	r3, #1
 8011028:	d102      	bne.n	8011030 <create_chain+0x1f4>
 801102a:	f04f 33ff 	mov.w	r3, #4294967295
 801102e:	e000      	b.n	8011032 <create_chain+0x1f6>
 8011030:	2301      	movs	r3, #1
 8011032:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011034:	69fb      	ldr	r3, [r7, #28]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3720      	adds	r7, #32
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801103e:	b5b0      	push	{r4, r5, r7, lr}
 8011040:	b088      	sub	sp, #32
 8011042:	af00      	add	r7, sp, #0
 8011044:	60f8      	str	r0, [r7, #12]
 8011046:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011054:	3304      	adds	r3, #4
 8011056:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011058:	e9d7 2300 	ldrd	r2, r3, [r7]
 801105c:	f04f 0000 	mov.w	r0, #0
 8011060:	f04f 0100 	mov.w	r1, #0
 8011064:	0a50      	lsrs	r0, r2, #9
 8011066:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 801106a:	0a59      	lsrs	r1, r3, #9
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	895b      	ldrh	r3, [r3, #10]
 8011070:	b29b      	uxth	r3, r3
 8011072:	2200      	movs	r2, #0
 8011074:	461c      	mov	r4, r3
 8011076:	4615      	mov	r5, r2
 8011078:	4622      	mov	r2, r4
 801107a:	462b      	mov	r3, r5
 801107c:	f7ef f980 	bl	8000380 <__aeabi_uldivmod>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4613      	mov	r3, r2
 8011086:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011088:	69bb      	ldr	r3, [r7, #24]
 801108a:	1d1a      	adds	r2, r3, #4
 801108c:	61ba      	str	r2, [r7, #24]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <clmt_clust+0x5e>
 8011098:	2300      	movs	r3, #0
 801109a:	e010      	b.n	80110be <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 801109c:	69fa      	ldr	r2, [r7, #28]
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d307      	bcc.n	80110b4 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80110a4:	69fa      	ldr	r2, [r7, #28]
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	61fb      	str	r3, [r7, #28]
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	3304      	adds	r3, #4
 80110b0:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80110b2:	e7e9      	b.n	8011088 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 80110b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	4413      	add	r3, r2
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3720      	adds	r7, #32
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bdb0      	pop	{r4, r5, r7, pc}

080110c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b086      	sub	sp, #24
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b04      	cmp	r3, #4
 80110dc:	d102      	bne.n	80110e4 <dir_sdi+0x1e>
 80110de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110e2:	e001      	b.n	80110e8 <dir_sdi+0x22>
 80110e4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d904      	bls.n	80110f8 <dir_sdi+0x32>
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	f003 031f 	and.w	r3, r3, #31
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d001      	beq.n	80110fc <dir_sdi+0x36>
		return FR_INT_ERR;
 80110f8:	2302      	movs	r3, #2
 80110fa:	e066      	b.n	80111ca <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d109      	bne.n	8011122 <dir_sdi+0x5c>
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	2b02      	cmp	r3, #2
 8011114:	d905      	bls.n	8011122 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801111a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d10c      	bne.n	8011142 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	095b      	lsrs	r3, r3, #5
 801112c:	693a      	ldr	r2, [r7, #16]
 801112e:	8912      	ldrh	r2, [r2, #8]
 8011130:	4293      	cmp	r3, r2
 8011132:	d301      	bcc.n	8011138 <dir_sdi+0x72>
 8011134:	2302      	movs	r3, #2
 8011136:	e048      	b.n	80111ca <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011140:	e029      	b.n	8011196 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	895b      	ldrh	r3, [r3, #10]
 8011146:	025b      	lsls	r3, r3, #9
 8011148:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801114a:	e019      	b.n	8011180 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6979      	ldr	r1, [r7, #20]
 8011150:	4618      	mov	r0, r3
 8011152:	f7ff fa71 	bl	8010638 <get_fat>
 8011156:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801115e:	d101      	bne.n	8011164 <dir_sdi+0x9e>
 8011160:	2301      	movs	r3, #1
 8011162:	e032      	b.n	80111ca <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	2b01      	cmp	r3, #1
 8011168:	d904      	bls.n	8011174 <dir_sdi+0xae>
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	429a      	cmp	r2, r3
 8011172:	d301      	bcc.n	8011178 <dir_sdi+0xb2>
 8011174:	2302      	movs	r3, #2
 8011176:	e028      	b.n	80111ca <dir_sdi+0x104>
			ofs -= csz;
 8011178:	683a      	ldr	r2, [r7, #0]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011180:	683a      	ldr	r2, [r7, #0]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	429a      	cmp	r2, r3
 8011186:	d2e1      	bcs.n	801114c <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8011188:	6979      	ldr	r1, [r7, #20]
 801118a:	6938      	ldr	r0, [r7, #16]
 801118c:	f7ff fa34 	bl	80105f8 <clust2sect>
 8011190:	4602      	mov	r2, r0
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d101      	bne.n	80111a8 <dir_sdi+0xe2>
 80111a4:	2302      	movs	r3, #2
 80111a6:	e010      	b.n	80111ca <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	0a5b      	lsrs	r3, r3, #9
 80111b0:	441a      	add	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111c2:	441a      	add	r2, r3
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3718      	adds	r7, #24
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b086      	sub	sp, #24
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
 80111da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111e6:	3320      	adds	r3, #32
 80111e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00b      	beq.n	801120a <dir_next+0x38>
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	2b04      	cmp	r3, #4
 80111f8:	d102      	bne.n	8011200 <dir_next+0x2e>
 80111fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111fe:	e001      	b.n	8011204 <dir_next+0x32>
 8011200:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	429a      	cmp	r2, r3
 8011208:	d801      	bhi.n	801120e <dir_next+0x3c>
 801120a:	2304      	movs	r3, #4
 801120c:	e0b2      	b.n	8011374 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011214:	2b00      	cmp	r3, #0
 8011216:	f040 80a0 	bne.w	801135a <dir_next+0x188>
		dp->sect++;				/* Next sector */
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10b      	bne.n	8011244 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	095b      	lsrs	r3, r3, #5
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	8912      	ldrh	r2, [r2, #8]
 8011234:	4293      	cmp	r3, r2
 8011236:	f0c0 8090 	bcc.w	801135a <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011240:	2304      	movs	r3, #4
 8011242:	e097      	b.n	8011374 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	0a5b      	lsrs	r3, r3, #9
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	8952      	ldrh	r2, [r2, #10]
 801124c:	3a01      	subs	r2, #1
 801124e:	4013      	ands	r3, r2
 8011250:	2b00      	cmp	r3, #0
 8011252:	f040 8082 	bne.w	801135a <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801125c:	4619      	mov	r1, r3
 801125e:	4610      	mov	r0, r2
 8011260:	f7ff f9ea 	bl	8010638 <get_fat>
 8011264:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d801      	bhi.n	8011270 <dir_next+0x9e>
 801126c:	2302      	movs	r3, #2
 801126e:	e081      	b.n	8011374 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011276:	d101      	bne.n	801127c <dir_next+0xaa>
 8011278:	2301      	movs	r3, #1
 801127a:	e07b      	b.n	8011374 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	6a1b      	ldr	r3, [r3, #32]
 8011280:	697a      	ldr	r2, [r7, #20]
 8011282:	429a      	cmp	r2, r3
 8011284:	d35f      	bcc.n	8011346 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d104      	bne.n	8011296 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	639a      	str	r2, [r3, #56]	@ 0x38
 8011292:	2304      	movs	r3, #4
 8011294:	e06e      	b.n	8011374 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801129c:	4619      	mov	r1, r3
 801129e:	4610      	mov	r0, r2
 80112a0:	f7ff fdcc 	bl	8010e3c <create_chain>
 80112a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d101      	bne.n	80112b0 <dir_next+0xde>
 80112ac:	2307      	movs	r3, #7
 80112ae:	e061      	b.n	8011374 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d101      	bne.n	80112ba <dir_next+0xe8>
 80112b6:	2302      	movs	r3, #2
 80112b8:	e05c      	b.n	8011374 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c0:	d101      	bne.n	80112c6 <dir_next+0xf4>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e056      	b.n	8011374 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	79db      	ldrb	r3, [r3, #7]
 80112ca:	f043 0304 	orr.w	r3, r3, #4
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f7ff f8af 	bl	8010438 <sync_window>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <dir_next+0x112>
 80112e0:	2301      	movs	r3, #1
 80112e2:	e047      	b.n	8011374 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	333c      	adds	r3, #60	@ 0x3c
 80112e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112ec:	2100      	movs	r1, #0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fe fee3 	bl	80100ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80112f4:	2300      	movs	r3, #0
 80112f6:	613b      	str	r3, [r7, #16]
 80112f8:	6979      	ldr	r1, [r7, #20]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7ff f97c 	bl	80105f8 <clust2sect>
 8011300:	4602      	mov	r2, r0
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	639a      	str	r2, [r3, #56]	@ 0x38
 8011306:	e012      	b.n	801132e <dir_next+0x15c>
						fs->wflag = 1;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2201      	movs	r2, #1
 801130c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f7ff f892 	bl	8010438 <sync_window>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <dir_next+0x14c>
 801131a:	2301      	movs	r3, #1
 801131c:	e02a      	b.n	8011374 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	3301      	adds	r3, #1
 8011322:	613b      	str	r3, [r7, #16]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011328:	1c5a      	adds	r2, r3, #1
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	639a      	str	r2, [r3, #56]	@ 0x38
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	895b      	ldrh	r3, [r3, #10]
 8011332:	461a      	mov	r2, r3
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	4293      	cmp	r3, r2
 8011338:	d3e6      	bcc.n	8011308 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	1ad2      	subs	r2, r2, r3
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 801134c:	6979      	ldr	r1, [r7, #20]
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f7ff f952 	bl	80105f8 <clust2sect>
 8011354:	4602      	mov	r2, r0
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68ba      	ldr	r2, [r7, #8]
 801135e:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801136c:	441a      	add	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3718      	adds	r7, #24
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801138c:	2100      	movs	r1, #0
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7ff fe99 	bl	80110c6 <dir_sdi>
 8011394:	4603      	mov	r3, r0
 8011396:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011398:	7dfb      	ldrb	r3, [r7, #23]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d140      	bne.n	8011420 <dir_alloc+0xa4>
		n = 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a6:	4619      	mov	r1, r3
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f7ff f889 	bl	80104c0 <move_window>
 80113ae:	4603      	mov	r3, r0
 80113b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d132      	bne.n	801141e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	2b04      	cmp	r3, #4
 80113be:	d108      	bne.n	80113d2 <dir_alloc+0x56>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	b25b      	sxtb	r3, r3
 80113c8:	43db      	mvns	r3, r3
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	09db      	lsrs	r3, r3, #7
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	e00f      	b.n	80113f2 <dir_alloc+0x76>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	2be5      	cmp	r3, #229	@ 0xe5
 80113da:	d004      	beq.n	80113e6 <dir_alloc+0x6a>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <dir_alloc+0x6e>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e000      	b.n	80113ec <dir_alloc+0x70>
 80113ea:	2300      	movs	r3, #0
 80113ec:	f003 0301 	and.w	r3, r3, #1
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d007      	beq.n	8011406 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	3301      	adds	r3, #1
 80113fa:	613b      	str	r3, [r7, #16]
 80113fc:	693a      	ldr	r2, [r7, #16]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	429a      	cmp	r2, r3
 8011402:	d102      	bne.n	801140a <dir_alloc+0x8e>
 8011404:	e00c      	b.n	8011420 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011406:	2300      	movs	r3, #0
 8011408:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801140a:	2101      	movs	r1, #1
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff fee0 	bl	80111d2 <dir_next>
 8011412:	4603      	mov	r3, r0
 8011414:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011416:	7dfb      	ldrb	r3, [r7, #23]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d0c2      	beq.n	80113a2 <dir_alloc+0x26>
 801141c:	e000      	b.n	8011420 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 801141e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011420:	7dfb      	ldrb	r3, [r7, #23]
 8011422:	2b04      	cmp	r3, #4
 8011424:	d101      	bne.n	801142a <dir_alloc+0xae>
 8011426:	2307      	movs	r3, #7
 8011428:	75fb      	strb	r3, [r7, #23]
	return res;
 801142a:	7dfb      	ldrb	r3, [r7, #23]
}
 801142c:	4618      	mov	r0, r3
 801142e:	3718      	adds	r7, #24
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	331a      	adds	r3, #26
 8011442:	4618      	mov	r0, r3
 8011444:	f7fe fc32 	bl	800fcac <ld_word>
 8011448:	4603      	mov	r3, r0
 801144a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	2b03      	cmp	r3, #3
 8011452:	d109      	bne.n	8011468 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	3314      	adds	r3, #20
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe fc27 	bl	800fcac <ld_word>
 801145e:	4603      	mov	r3, r0
 8011460:	041b      	lsls	r3, r3, #16
 8011462:	68fa      	ldr	r2, [r7, #12]
 8011464:	4313      	orrs	r3, r2
 8011466:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011468:	68fb      	ldr	r3, [r7, #12]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b084      	sub	sp, #16
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	60b9      	str	r1, [r7, #8]
 801147c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	331a      	adds	r3, #26
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	b292      	uxth	r2, r2
 8011486:	4611      	mov	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f7fe fd26 	bl	800feda <st_word>
	if (fs->fs_type == FS_FAT32) {
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b03      	cmp	r3, #3
 8011494:	d109      	bne.n	80114aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	f103 0214 	add.w	r2, r3, #20
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	0c1b      	lsrs	r3, r3, #16
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	4619      	mov	r1, r3
 80114a4:	4610      	mov	r0, r2
 80114a6:	f7fe fd18 	bl	800feda <st_word>
	}
}
 80114aa:	bf00      	nop
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b087      	sub	sp, #28
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	331a      	adds	r3, #26
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fe fbf2 	bl	800fcac <ld_word>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <cmp_lfn+0x1e>
 80114ce:	2300      	movs	r3, #0
 80114d0:	e059      	b.n	8011586 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80114da:	1e5a      	subs	r2, r3, #1
 80114dc:	4613      	mov	r3, r2
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	4413      	add	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80114e8:	2301      	movs	r3, #1
 80114ea:	81fb      	strh	r3, [r7, #14]
 80114ec:	2300      	movs	r3, #0
 80114ee:	613b      	str	r3, [r7, #16]
 80114f0:	e033      	b.n	801155a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80114f2:	4a27      	ldr	r2, [pc, #156]	@ (8011590 <cmp_lfn+0xdc>)
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	4413      	add	r3, r2
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	461a      	mov	r2, r3
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	4413      	add	r3, r2
 8011500:	4618      	mov	r0, r3
 8011502:	f7fe fbd3 	bl	800fcac <ld_word>
 8011506:	4603      	mov	r3, r0
 8011508:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801150a:	89fb      	ldrh	r3, [r7, #14]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d01a      	beq.n	8011546 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	2bfe      	cmp	r3, #254	@ 0xfe
 8011514:	d812      	bhi.n	801153c <cmp_lfn+0x88>
 8011516:	89bb      	ldrh	r3, [r7, #12]
 8011518:	4618      	mov	r0, r3
 801151a:	f003 fe0d 	bl	8015138 <ff_wtoupper>
 801151e:	4603      	mov	r3, r0
 8011520:	461c      	mov	r4, r3
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	1c5a      	adds	r2, r3, #1
 8011526:	617a      	str	r2, [r7, #20]
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	4413      	add	r3, r2
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	4618      	mov	r0, r3
 8011532:	f003 fe01 	bl	8015138 <ff_wtoupper>
 8011536:	4603      	mov	r3, r0
 8011538:	429c      	cmp	r4, r3
 801153a:	d001      	beq.n	8011540 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801153c:	2300      	movs	r3, #0
 801153e:	e022      	b.n	8011586 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011540:	89bb      	ldrh	r3, [r7, #12]
 8011542:	81fb      	strh	r3, [r7, #14]
 8011544:	e006      	b.n	8011554 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011546:	89bb      	ldrh	r3, [r7, #12]
 8011548:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801154c:	4293      	cmp	r3, r2
 801154e:	d001      	beq.n	8011554 <cmp_lfn+0xa0>
 8011550:	2300      	movs	r3, #0
 8011552:	e018      	b.n	8011586 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	3301      	adds	r3, #1
 8011558:	613b      	str	r3, [r7, #16]
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	2b0c      	cmp	r3, #12
 801155e:	d9c8      	bls.n	80114f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00b      	beq.n	8011584 <cmp_lfn+0xd0>
 801156c:	89fb      	ldrh	r3, [r7, #14]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d008      	beq.n	8011584 <cmp_lfn+0xd0>
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	005b      	lsls	r3, r3, #1
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	4413      	add	r3, r2
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <cmp_lfn+0xd0>
 8011580:	2300      	movs	r3, #0
 8011582:	e000      	b.n	8011586 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011584:	2301      	movs	r3, #1
}
 8011586:	4618      	mov	r0, r3
 8011588:	371c      	adds	r7, #28
 801158a:	46bd      	mov	sp, r7
 801158c:	bd90      	pop	{r4, r7, pc}
 801158e:	bf00      	nop
 8011590:	0801b358 	.word	0x0801b358

08011594 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	331a      	adds	r3, #26
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fe fb82 	bl	800fcac <ld_word>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <pick_lfn+0x1e>
 80115ae:	2300      	movs	r3, #0
 80115b0:	e04d      	b.n	801164e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115ba:	1e5a      	subs	r2, r3, #1
 80115bc:	4613      	mov	r3, r2
 80115be:	005b      	lsls	r3, r3, #1
 80115c0:	4413      	add	r3, r2
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	4413      	add	r3, r2
 80115c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80115c8:	2301      	movs	r3, #1
 80115ca:	81fb      	strh	r3, [r7, #14]
 80115cc:	2300      	movs	r3, #0
 80115ce:	613b      	str	r3, [r7, #16]
 80115d0:	e028      	b.n	8011624 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80115d2:	4a21      	ldr	r2, [pc, #132]	@ (8011658 <pick_lfn+0xc4>)
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	4413      	add	r3, r2
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	461a      	mov	r2, r3
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	4413      	add	r3, r2
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fe fb63 	bl	800fcac <ld_word>
 80115e6:	4603      	mov	r3, r0
 80115e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80115ea:	89fb      	ldrh	r3, [r7, #14]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00f      	beq.n	8011610 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80115f4:	d901      	bls.n	80115fa <pick_lfn+0x66>
 80115f6:	2300      	movs	r3, #0
 80115f8:	e029      	b.n	801164e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80115fa:	89bb      	ldrh	r3, [r7, #12]
 80115fc:	81fb      	strh	r3, [r7, #14]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	1c5a      	adds	r2, r3, #1
 8011602:	617a      	str	r2, [r7, #20]
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	4413      	add	r3, r2
 801160a:	89fa      	ldrh	r2, [r7, #14]
 801160c:	801a      	strh	r2, [r3, #0]
 801160e:	e006      	b.n	801161e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011610:	89bb      	ldrh	r3, [r7, #12]
 8011612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011616:	4293      	cmp	r3, r2
 8011618:	d001      	beq.n	801161e <pick_lfn+0x8a>
 801161a:	2300      	movs	r3, #0
 801161c:	e017      	b.n	801164e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	3301      	adds	r3, #1
 8011622:	613b      	str	r3, [r7, #16]
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	2b0c      	cmp	r3, #12
 8011628:	d9d3      	bls.n	80115d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00a      	beq.n	801164c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2bfe      	cmp	r3, #254	@ 0xfe
 801163a:	d901      	bls.n	8011640 <pick_lfn+0xac>
 801163c:	2300      	movs	r3, #0
 801163e:	e006      	b.n	801164e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	005b      	lsls	r3, r3, #1
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	4413      	add	r3, r2
 8011648:	2200      	movs	r2, #0
 801164a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801164c:	2301      	movs	r3, #1
}
 801164e:	4618      	mov	r0, r3
 8011650:	3718      	adds	r7, #24
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	0801b358 	.word	0x0801b358

0801165c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b088      	sub	sp, #32
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	4611      	mov	r1, r2
 8011668:	461a      	mov	r2, r3
 801166a:	460b      	mov	r3, r1
 801166c:	71fb      	strb	r3, [r7, #7]
 801166e:	4613      	mov	r3, r2
 8011670:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	330d      	adds	r3, #13
 8011676:	79ba      	ldrb	r2, [r7, #6]
 8011678:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	330b      	adds	r3, #11
 801167e:	220f      	movs	r2, #15
 8011680:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	330c      	adds	r3, #12
 8011686:	2200      	movs	r2, #0
 8011688:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	331a      	adds	r3, #26
 801168e:	2100      	movs	r1, #0
 8011690:	4618      	mov	r0, r3
 8011692:	f7fe fc22 	bl	800feda <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011696:	79fb      	ldrb	r3, [r7, #7]
 8011698:	1e5a      	subs	r2, r3, #1
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	4413      	add	r3, r2
 80116a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	82fb      	strh	r3, [r7, #22]
 80116aa:	2300      	movs	r3, #0
 80116ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80116ae:	8afb      	ldrh	r3, [r7, #22]
 80116b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d007      	beq.n	80116c8 <put_lfn+0x6c>
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	61fa      	str	r2, [r7, #28]
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	4413      	add	r3, r2
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80116c8:	4a17      	ldr	r2, [pc, #92]	@ (8011728 <put_lfn+0xcc>)
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	4413      	add	r3, r2
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	461a      	mov	r2, r3
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	4413      	add	r3, r2
 80116d6:	8afa      	ldrh	r2, [r7, #22]
 80116d8:	4611      	mov	r1, r2
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fe fbfd 	bl	800feda <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80116e0:	8afb      	ldrh	r3, [r7, #22]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d102      	bne.n	80116ec <put_lfn+0x90>
 80116e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80116ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	3301      	adds	r3, #1
 80116f0:	61bb      	str	r3, [r7, #24]
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	2b0c      	cmp	r3, #12
 80116f6:	d9da      	bls.n	80116ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80116f8:	8afb      	ldrh	r3, [r7, #22]
 80116fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116fe:	4293      	cmp	r3, r2
 8011700:	d006      	beq.n	8011710 <put_lfn+0xb4>
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	005b      	lsls	r3, r3, #1
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	4413      	add	r3, r2
 801170a:	881b      	ldrh	r3, [r3, #0]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d103      	bne.n	8011718 <put_lfn+0xbc>
 8011710:	79fb      	ldrb	r3, [r7, #7]
 8011712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011716:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	79fa      	ldrb	r2, [r7, #7]
 801171c:	701a      	strb	r2, [r3, #0]
}
 801171e:	bf00      	nop
 8011720:	3720      	adds	r7, #32
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	0801b358 	.word	0x0801b358

0801172c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08c      	sub	sp, #48	@ 0x30
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801173a:	220b      	movs	r2, #11
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7fe fc9a 	bl	8010078 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	2b05      	cmp	r3, #5
 8011748:	d929      	bls.n	801179e <gen_numname+0x72>
		sr = seq;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801174e:	e020      	b.n	8011792 <gen_numname+0x66>
			wc = *lfn++;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	1c9a      	adds	r2, r3, #2
 8011754:	607a      	str	r2, [r7, #4]
 8011756:	881b      	ldrh	r3, [r3, #0]
 8011758:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801175a:	2300      	movs	r3, #0
 801175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801175e:	e015      	b.n	801178c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	005a      	lsls	r2, r3, #1
 8011764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011766:	f003 0301 	and.w	r3, r3, #1
 801176a:	4413      	add	r3, r2
 801176c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801176e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011770:	085b      	lsrs	r3, r3, #1
 8011772:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <gen_numname+0x5a>
 801177e:	69fa      	ldr	r2, [r7, #28]
 8011780:	4b30      	ldr	r3, [pc, #192]	@ (8011844 <gen_numname+0x118>)
 8011782:	4053      	eors	r3, r2
 8011784:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011788:	3301      	adds	r3, #1
 801178a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801178e:	2b0f      	cmp	r3, #15
 8011790:	d9e6      	bls.n	8011760 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	881b      	ldrh	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1da      	bne.n	8011750 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801179e:	2307      	movs	r3, #7
 80117a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	f003 030f 	and.w	r3, r3, #15
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	3330      	adds	r3, #48	@ 0x30
 80117ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80117b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80117b6:	2b39      	cmp	r3, #57	@ 0x39
 80117b8:	d904      	bls.n	80117c4 <gen_numname+0x98>
 80117ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80117be:	3307      	adds	r3, #7
 80117c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80117c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c6:	1e5a      	subs	r2, r3, #1
 80117c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80117ca:	3330      	adds	r3, #48	@ 0x30
 80117cc:	443b      	add	r3, r7
 80117ce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80117d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	091b      	lsrs	r3, r3, #4
 80117da:	603b      	str	r3, [r7, #0]
	} while (seq);
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1df      	bne.n	80117a2 <gen_numname+0x76>
	ns[i] = '~';
 80117e2:	f107 0214 	add.w	r2, r7, #20
 80117e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117e8:	4413      	add	r3, r2
 80117ea:	227e      	movs	r2, #126	@ 0x7e
 80117ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80117ee:	2300      	movs	r3, #0
 80117f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80117f2:	e002      	b.n	80117fa <gen_numname+0xce>
 80117f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f6:	3301      	adds	r3, #1
 80117f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80117fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fe:	429a      	cmp	r2, r3
 8011800:	d205      	bcs.n	801180e <gen_numname+0xe2>
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011806:	4413      	add	r3, r2
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	2b20      	cmp	r3, #32
 801180c:	d1f2      	bne.n	80117f4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801180e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011810:	2b07      	cmp	r3, #7
 8011812:	d807      	bhi.n	8011824 <gen_numname+0xf8>
 8011814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	62ba      	str	r2, [r7, #40]	@ 0x28
 801181a:	3330      	adds	r3, #48	@ 0x30
 801181c:	443b      	add	r3, r7
 801181e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011822:	e000      	b.n	8011826 <gen_numname+0xfa>
 8011824:	2120      	movs	r1, #32
 8011826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011828:	1c5a      	adds	r2, r3, #1
 801182a:	627a      	str	r2, [r7, #36]	@ 0x24
 801182c:	68fa      	ldr	r2, [r7, #12]
 801182e:	4413      	add	r3, r2
 8011830:	460a      	mov	r2, r1
 8011832:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011836:	2b07      	cmp	r3, #7
 8011838:	d9e9      	bls.n	801180e <gen_numname+0xe2>
}
 801183a:	bf00      	nop
 801183c:	bf00      	nop
 801183e:	3730      	adds	r7, #48	@ 0x30
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	00011021 	.word	0x00011021

08011848 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011850:	2300      	movs	r3, #0
 8011852:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011854:	230b      	movs	r3, #11
 8011856:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011858:	7bfb      	ldrb	r3, [r7, #15]
 801185a:	b2da      	uxtb	r2, r3
 801185c:	0852      	lsrs	r2, r2, #1
 801185e:	01db      	lsls	r3, r3, #7
 8011860:	4313      	orrs	r3, r2
 8011862:	b2da      	uxtb	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	1c59      	adds	r1, r3, #1
 8011868:	6079      	str	r1, [r7, #4]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	4413      	add	r3, r2
 801186e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	3b01      	subs	r3, #1
 8011874:	60bb      	str	r3, [r7, #8]
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d1ed      	bne.n	8011858 <sum_sfn+0x10>
	return sum;
 801187c:	7bfb      	ldrb	r3, [r7, #15]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3714      	adds	r7, #20
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 801188a:	b480      	push	{r7}
 801188c:	b087      	sub	sp, #28
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	3301      	adds	r3, #1
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	3301      	adds	r3, #1
 801189a:	015b      	lsls	r3, r3, #5
 801189c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 801189e:	2300      	movs	r3, #0
 80118a0:	827b      	strh	r3, [r7, #18]
 80118a2:	2300      	movs	r3, #0
 80118a4:	617b      	str	r3, [r7, #20]
 80118a6:	e015      	b.n	80118d4 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d103      	bne.n	80118b6 <xdir_sum+0x2c>
			i++;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	3301      	adds	r3, #1
 80118b2:	617b      	str	r3, [r7, #20]
 80118b4:	e00b      	b.n	80118ce <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80118b6:	8a7b      	ldrh	r3, [r7, #18]
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	0852      	lsrs	r2, r2, #1
 80118bc:	03db      	lsls	r3, r3, #15
 80118be:	4313      	orrs	r3, r2
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	440a      	add	r2, r1
 80118c8:	7812      	ldrb	r2, [r2, #0]
 80118ca:	4413      	add	r3, r2
 80118cc:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	3301      	adds	r3, #1
 80118d2:	617b      	str	r3, [r7, #20]
 80118d4:	697a      	ldr	r2, [r7, #20]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d3e5      	bcc.n	80118a8 <xdir_sum+0x1e>
		}
	}
	return sum;
 80118dc:	8a7b      	ldrh	r3, [r7, #18]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	371c      	adds	r7, #28
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b084      	sub	sp, #16
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80118f2:	2300      	movs	r3, #0
 80118f4:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80118f6:	e01b      	b.n	8011930 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80118f8:	89bb      	ldrh	r3, [r7, #12]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f003 fc1c 	bl	8015138 <ff_wtoupper>
 8011900:	4603      	mov	r3, r0
 8011902:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011904:	89fb      	ldrh	r3, [r7, #14]
 8011906:	b29a      	uxth	r2, r3
 8011908:	0852      	lsrs	r2, r2, #1
 801190a:	03db      	lsls	r3, r3, #15
 801190c:	4313      	orrs	r3, r2
 801190e:	b29a      	uxth	r2, r3
 8011910:	89bb      	ldrh	r3, [r7, #12]
 8011912:	b2db      	uxtb	r3, r3
 8011914:	b29b      	uxth	r3, r3
 8011916:	4413      	add	r3, r2
 8011918:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 801191a:	89fb      	ldrh	r3, [r7, #14]
 801191c:	b29a      	uxth	r2, r3
 801191e:	0852      	lsrs	r2, r2, #1
 8011920:	03db      	lsls	r3, r3, #15
 8011922:	4313      	orrs	r3, r2
 8011924:	b29a      	uxth	r2, r3
 8011926:	89bb      	ldrh	r3, [r7, #12]
 8011928:	0a1b      	lsrs	r3, r3, #8
 801192a:	b29b      	uxth	r3, r3
 801192c:	4413      	add	r3, r2
 801192e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	1c9a      	adds	r2, r3, #2
 8011934:	607a      	str	r2, [r7, #4]
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	81bb      	strh	r3, [r7, #12]
 801193a:	89bb      	ldrh	r3, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1db      	bne.n	80118f8 <xname_sum+0xe>
	}
	return sum;
 8011940:	89fb      	ldrh	r3, [r7, #14]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 801194a:	b480      	push	{r7}
 801194c:	b083      	sub	sp, #12
 801194e:	af00      	add	r7, sp, #0
 8011950:	4603      	mov	r3, r0
 8011952:	6039      	str	r1, [r7, #0]
 8011954:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	ea4f 0273 	mov.w	r2, r3, ror #1
 801195c:	79fb      	ldrb	r3, [r7, #7]
 801195e:	4413      	add	r3, r2
 8011960:	603b      	str	r3, [r7, #0]
	return sum;
 8011962:	683b      	ldr	r3, [r7, #0]
}
 8011964:	4618      	mov	r0, r3
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b087      	sub	sp, #28
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011988:	4619      	mov	r1, r3
 801198a:	4610      	mov	r0, r2
 801198c:	f7fe fd98 	bl	80104c0 <move_window>
 8011990:	4603      	mov	r3, r0
 8011992:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011994:	7bfb      	ldrb	r3, [r7, #15]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d001      	beq.n	801199e <load_xdir+0x2e>
 801199a:	7bfb      	ldrb	r3, [r7, #15]
 801199c:	e09f      	b.n	8011ade <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b85      	cmp	r3, #133	@ 0x85
 80119a6:	d001      	beq.n	80119ac <load_xdir+0x3c>
 80119a8:	2302      	movs	r3, #2
 80119aa:	e098      	b.n	8011ade <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119b0:	2220      	movs	r2, #32
 80119b2:	4619      	mov	r1, r3
 80119b4:	6938      	ldr	r0, [r7, #16]
 80119b6:	f7fe fb5f 	bl	8010078 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	3301      	adds	r3, #1
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	3301      	adds	r3, #1
 80119c2:	015b      	lsls	r3, r3, #5
 80119c4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	2b5f      	cmp	r3, #95	@ 0x5f
 80119ca:	d903      	bls.n	80119d4 <load_xdir+0x64>
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80119d2:	d901      	bls.n	80119d8 <load_xdir+0x68>
 80119d4:	2302      	movs	r3, #2
 80119d6:	e082      	b.n	8011ade <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80119d8:	2100      	movs	r1, #0
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7ff fbf9 	bl	80111d2 <dir_next>
 80119e0:	4603      	mov	r3, r0
 80119e2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80119e4:	7bfb      	ldrb	r3, [r7, #15]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d001      	beq.n	80119ee <load_xdir+0x7e>
 80119ea:	7bfb      	ldrb	r3, [r7, #15]
 80119ec:	e077      	b.n	8011ade <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119f6:	4619      	mov	r1, r3
 80119f8:	4610      	mov	r0, r2
 80119fa:	f7fe fd61 	bl	80104c0 <move_window>
 80119fe:	4603      	mov	r3, r0
 8011a00:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d001      	beq.n	8011a0c <load_xdir+0x9c>
 8011a08:	7bfb      	ldrb	r3, [r7, #15]
 8011a0a:	e068      	b.n	8011ade <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8011a14:	d001      	beq.n	8011a1a <load_xdir+0xaa>
 8011a16:	2302      	movs	r3, #2
 8011a18:	e061      	b.n	8011ade <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f103 0020 	add.w	r0, r3, #32
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a24:	2220      	movs	r2, #32
 8011a26:	4619      	mov	r1, r3
 8011a28:	f7fe fb26 	bl	8010078 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	3323      	adds	r3, #35	@ 0x23
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	332c      	adds	r3, #44	@ 0x2c
 8011a34:	4a2c      	ldr	r2, [pc, #176]	@ (8011ae8 <load_xdir+0x178>)
 8011a36:	fba2 2303 	umull	r2, r3, r2, r3
 8011a3a:	08db      	lsrs	r3, r3, #3
 8011a3c:	015b      	lsls	r3, r3, #5
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d201      	bcs.n	8011a48 <load_xdir+0xd8>
 8011a44:	2302      	movs	r3, #2
 8011a46:	e04a      	b.n	8011ade <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011a48:	2340      	movs	r3, #64	@ 0x40
 8011a4a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7ff fbbf 	bl	80111d2 <dir_next>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <load_xdir+0xf2>
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
 8011a60:	e03d      	b.n	8011ade <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	f7fe fd27 	bl	80104c0 <move_window>
 8011a72:	4603      	mov	r3, r0
 8011a74:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011a76:	7bfb      	ldrb	r3, [r7, #15]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d001      	beq.n	8011a80 <load_xdir+0x110>
 8011a7c:	7bfb      	ldrb	r3, [r7, #15]
 8011a7e:	e02e      	b.n	8011ade <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	2bc1      	cmp	r3, #193	@ 0xc1
 8011a88:	d001      	beq.n	8011a8e <load_xdir+0x11e>
 8011a8a:	2302      	movs	r3, #2
 8011a8c:	e027      	b.n	8011ade <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8011a94:	d208      	bcs.n	8011aa8 <load_xdir+0x138>
 8011a96:	693a      	ldr	r2, [r7, #16]
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	18d0      	adds	r0, r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aa0:	2220      	movs	r2, #32
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	f7fe fae8 	bl	8010078 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	3320      	adds	r3, #32
 8011aac:	617b      	str	r3, [r7, #20]
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d3ca      	bcc.n	8011a4c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8011abc:	d80e      	bhi.n	8011adc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011abe:	6938      	ldr	r0, [r7, #16]
 8011ac0:	f7ff fee3 	bl	801188a <xdir_sum>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	461c      	mov	r4, r3
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	3302      	adds	r3, #2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fe f8ed 	bl	800fcac <ld_word>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	429c      	cmp	r4, r3
 8011ad6:	d001      	beq.n	8011adc <load_xdir+0x16c>
 8011ad8:	2302      	movs	r3, #2
 8011ada:	e000      	b.n	8011ade <load_xdir+0x16e>
	}
	return FR_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	371c      	adds	r7, #28
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd90      	pop	{r4, r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	88888889 	.word	0x88888889

08011aec <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011aec:	b5b0      	push	{r4, r5, r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011af6:	6839      	ldr	r1, [r7, #0]
 8011af8:	6808      	ldr	r0, [r1, #0]
 8011afa:	6879      	ldr	r1, [r7, #4]
 8011afc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6a08      	ldr	r0, [r1, #32]
 8011b02:	6879      	ldr	r1, [r7, #4]
 8011b04:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011b06:	6839      	ldr	r1, [r7, #0]
 8011b08:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8011b0a:	b2c8      	uxtb	r0, r1
 8011b0c:	6879      	ldr	r1, [r7, #4]
 8011b0e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8011b14:	2000      	movs	r0, #0
 8011b16:	460c      	mov	r4, r1
 8011b18:	4605      	mov	r5, r0
 8011b1a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8011b1e:	2300      	movs	r3, #0
 8011b20:	6879      	ldr	r1, [r7, #4]
 8011b22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b32:	4619      	mov	r1, r3
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7ff fac6 	bl	80110c6 <dir_sdi>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b3e:	7bfb      	ldrb	r3, [r7, #15]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d104      	bne.n	8011b4e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ff13 	bl	8011970 <load_xdir>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3710      	adds	r7, #16
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bdb0      	pop	{r4, r5, r7, pc}

08011b58 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011b58:	b590      	push	{r4, r7, lr}
 8011b5a:	b087      	sub	sp, #28
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	691b      	ldr	r3, [r3, #16]
 8011b66:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	1c9c      	adds	r4, r3, #2
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f7ff fe8c 	bl	801188a <xdir_sum>
 8011b72:	4603      	mov	r3, r0
 8011b74:	4619      	mov	r1, r3
 8011b76:	4620      	mov	r0, r4
 8011b78:	f7fe f9af 	bl	800feda <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7ff fa9a 	bl	80110c6 <dir_sdi>
 8011b92:	4603      	mov	r3, r0
 8011b94:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011b96:	e026      	b.n	8011be6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	f7fe fc8c 	bl	80104c0 <move_window>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011bac:	7dfb      	ldrb	r3, [r7, #23]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d11d      	bne.n	8011bee <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bb6:	2220      	movs	r2, #32
 8011bb8:	68f9      	ldr	r1, [r7, #12]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe fa5c 	bl	8010078 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	613b      	str	r3, [r7, #16]
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d00e      	beq.n	8011bf2 <store_xdir+0x9a>
		dirb += SZDIRE;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	3320      	adds	r3, #32
 8011bd8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011bda:	2100      	movs	r1, #0
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f7ff faf8 	bl	80111d2 <dir_next>
 8011be2:	4603      	mov	r3, r0
 8011be4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011be6:	7dfb      	ldrb	r3, [r7, #23]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d0d5      	beq.n	8011b98 <store_xdir+0x40>
 8011bec:	e002      	b.n	8011bf4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011bee:	bf00      	nop
 8011bf0:	e000      	b.n	8011bf4 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011bf2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011bf4:	7dfb      	ldrb	r3, [r7, #23]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d002      	beq.n	8011c00 <store_xdir+0xa8>
 8011bfa:	7dfb      	ldrb	r3, [r7, #23]
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d101      	bne.n	8011c04 <store_xdir+0xac>
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
 8011c02:	e000      	b.n	8011c06 <store_xdir+0xae>
 8011c04:	2302      	movs	r3, #2
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	371c      	adds	r7, #28
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd90      	pop	{r4, r7, pc}

08011c0e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011c0e:	b590      	push	{r4, r7, lr}
 8011c10:	b085      	sub	sp, #20
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	6078      	str	r0, [r7, #4]
 8011c16:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011c18:	2240      	movs	r2, #64	@ 0x40
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7fe fa4c 	bl	80100ba <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2285      	movs	r2, #133	@ 0x85
 8011c26:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	3320      	adds	r3, #32
 8011c2c:	22c0      	movs	r2, #192	@ 0xc0
 8011c2e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011c30:	2300      	movs	r3, #0
 8011c32:	72bb      	strb	r3, [r7, #10]
 8011c34:	2301      	movs	r3, #1
 8011c36:	72fb      	strb	r3, [r7, #11]
 8011c38:	2301      	movs	r3, #1
 8011c3a:	813b      	strh	r3, [r7, #8]
 8011c3c:	2340      	movs	r3, #64	@ 0x40
 8011c3e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	1c5a      	adds	r2, r3, #1
 8011c44:	60fa      	str	r2, [r7, #12]
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	4413      	add	r3, r2
 8011c4a:	22c1      	movs	r2, #193	@ 0xc1
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	1c5a      	adds	r2, r3, #1
 8011c52:	60fa      	str	r2, [r7, #12]
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	4413      	add	r3, r2
 8011c58:	2200      	movs	r2, #0
 8011c5a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011c5c:	893b      	ldrh	r3, [r7, #8]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d00b      	beq.n	8011c7a <create_xdir+0x6c>
 8011c62:	7abb      	ldrb	r3, [r7, #10]
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	4413      	add	r3, r2
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	813b      	strh	r3, [r7, #8]
 8011c6e:	893b      	ldrh	r3, [r7, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d002      	beq.n	8011c7a <create_xdir+0x6c>
 8011c74:	7abb      	ldrb	r3, [r7, #10]
 8011c76:	3301      	adds	r3, #1
 8011c78:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	4413      	add	r3, r2
 8011c80:	893a      	ldrh	r2, [r7, #8]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe f928 	bl	800feda <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	60fb      	str	r3, [r7, #12]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	f003 031f 	and.w	r3, r3, #31
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1e0      	bne.n	8011c5c <create_xdir+0x4e>
		nb++;
 8011c9a:	7afb      	ldrb	r3, [r7, #11]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011ca0:	7abb      	ldrb	r3, [r7, #10]
 8011ca2:	005b      	lsls	r3, r3, #1
 8011ca4:	683a      	ldr	r2, [r7, #0]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	881b      	ldrh	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1c8      	bne.n	8011c40 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3323      	adds	r3, #35	@ 0x23
 8011cb2:	7aba      	ldrb	r2, [r7, #10]
 8011cb4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	7afa      	ldrb	r2, [r7, #11]
 8011cbc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8011cc4:	6838      	ldr	r0, [r7, #0]
 8011cc6:	f7ff fe10 	bl	80118ea <xname_sum>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	4619      	mov	r1, r3
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f7fe f903 	bl	800feda <st_word>
}
 8011cd4:	bf00      	nop
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd90      	pop	{r4, r7, pc}

08011cdc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011ce6:	2304      	movs	r3, #4
 8011ce8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011cf0:	23ff      	movs	r3, #255	@ 0xff
 8011cf2:	757b      	strb	r3, [r7, #21]
 8011cf4:	23ff      	movs	r3, #255	@ 0xff
 8011cf6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011cf8:	e09f      	b.n	8011e3a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cfe:	4619      	mov	r1, r3
 8011d00:	6938      	ldr	r0, [r7, #16]
 8011d02:	f7fe fbdd 	bl	80104c0 <move_window>
 8011d06:	4603      	mov	r3, r0
 8011d08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f040 809a 	bne.w	8011e46 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011d1a:	7dbb      	ldrb	r3, [r7, #22]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d102      	bne.n	8011d26 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011d20:	2304      	movs	r3, #4
 8011d22:	75fb      	strb	r3, [r7, #23]
 8011d24:	e096      	b.n	8011e54 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	2b04      	cmp	r3, #4
 8011d2c:	d118      	bne.n	8011d60 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011d2e:	7dbb      	ldrb	r3, [r7, #22]
 8011d30:	2b85      	cmp	r3, #133	@ 0x85
 8011d32:	d179      	bne.n	8011e28 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff fe17 	bl	8011970 <load_xdir>
 8011d42:	4603      	mov	r3, r0
 8011d44:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d17e      	bne.n	8011e4a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	691b      	ldr	r3, [r3, #16]
 8011d50:	3304      	adds	r3, #4
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	719a      	strb	r2, [r3, #6]
					}
					break;
 8011d5e:	e074      	b.n	8011e4a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d64:	330b      	adds	r3, #11
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d6c:	73fb      	strb	r3, [r7, #15]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	7bfa      	ldrb	r2, [r7, #15]
 8011d72:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011d74:	7dbb      	ldrb	r3, [r7, #22]
 8011d76:	2be5      	cmp	r3, #229	@ 0xe5
 8011d78:	d00e      	beq.n	8011d98 <dir_read+0xbc>
 8011d7a:	7dbb      	ldrb	r3, [r7, #22]
 8011d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d7e:	d00b      	beq.n	8011d98 <dir_read+0xbc>
 8011d80:	7bfb      	ldrb	r3, [r7, #15]
 8011d82:	f023 0320 	bic.w	r3, r3, #32
 8011d86:	2b08      	cmp	r3, #8
 8011d88:	bf0c      	ite	eq
 8011d8a:	2301      	moveq	r3, #1
 8011d8c:	2300      	movne	r3, #0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	461a      	mov	r2, r3
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d002      	beq.n	8011d9e <dir_read+0xc2>
				ord = 0xFF;
 8011d98:	23ff      	movs	r3, #255	@ 0xff
 8011d9a:	757b      	strb	r3, [r7, #21]
 8011d9c:	e044      	b.n	8011e28 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011d9e:	7bfb      	ldrb	r3, [r7, #15]
 8011da0:	2b0f      	cmp	r3, #15
 8011da2:	d12f      	bne.n	8011e04 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011da4:	7dbb      	ldrb	r3, [r7, #22]
 8011da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d00d      	beq.n	8011dca <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011db2:	7b5b      	ldrb	r3, [r3, #13]
 8011db4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011db6:	7dbb      	ldrb	r3, [r7, #22]
 8011db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011dbc:	75bb      	strb	r3, [r7, #22]
 8011dbe:	7dbb      	ldrb	r3, [r7, #22]
 8011dc0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011dca:	7dba      	ldrb	r2, [r7, #22]
 8011dcc:	7d7b      	ldrb	r3, [r7, #21]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d115      	bne.n	8011dfe <dir_read+0x122>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011dd6:	330d      	adds	r3, #13
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	7d3a      	ldrb	r2, [r7, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d10e      	bne.n	8011dfe <dir_read+0x122>
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	68da      	ldr	r2, [r3, #12]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011de8:	4619      	mov	r1, r3
 8011dea:	4610      	mov	r0, r2
 8011dec:	f7ff fbd2 	bl	8011594 <pick_lfn>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d003      	beq.n	8011dfe <dir_read+0x122>
 8011df6:	7d7b      	ldrb	r3, [r7, #21]
 8011df8:	3b01      	subs	r3, #1
 8011dfa:	b2db      	uxtb	r3, r3
 8011dfc:	e000      	b.n	8011e00 <dir_read+0x124>
 8011dfe:	23ff      	movs	r3, #255	@ 0xff
 8011e00:	757b      	strb	r3, [r7, #21]
 8011e02:	e011      	b.n	8011e28 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011e04:	7d7b      	ldrb	r3, [r7, #21]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d109      	bne.n	8011e1e <dir_read+0x142>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7ff fd1a 	bl	8011848 <sum_sfn>
 8011e14:	4603      	mov	r3, r0
 8011e16:	461a      	mov	r2, r3
 8011e18:	7d3b      	ldrb	r3, [r7, #20]
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	d017      	beq.n	8011e4e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f04f 32ff 	mov.w	r2, #4294967295
 8011e24:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8011e26:	e012      	b.n	8011e4e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011e28:	2100      	movs	r1, #0
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff f9d1 	bl	80111d2 <dir_next>
 8011e30:	4603      	mov	r3, r0
 8011e32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e34:	7dfb      	ldrb	r3, [r7, #23]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d10b      	bne.n	8011e52 <dir_read+0x176>
	while (dp->sect) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f47f af5b 	bne.w	8011cfa <dir_read+0x1e>
 8011e44:	e006      	b.n	8011e54 <dir_read+0x178>
		if (res != FR_OK) break;
 8011e46:	bf00      	nop
 8011e48:	e004      	b.n	8011e54 <dir_read+0x178>
					break;
 8011e4a:	bf00      	nop
 8011e4c:	e002      	b.n	8011e54 <dir_read+0x178>
					break;
 8011e4e:	bf00      	nop
 8011e50:	e000      	b.n	8011e54 <dir_read+0x178>
		if (res != FR_OK) break;
 8011e52:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011e54:	7dfb      	ldrb	r3, [r7, #23]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <dir_read+0x184>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3718      	adds	r7, #24
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}

08011e6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011e6a:	b590      	push	{r4, r7, lr}
 8011e6c:	b089      	sub	sp, #36	@ 0x24
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011e78:	2100      	movs	r1, #0
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ff f923 	bl	80110c6 <dir_sdi>
 8011e80:	4603      	mov	r3, r0
 8011e82:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8011e84:	7ffb      	ldrb	r3, [r7, #31]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d001      	beq.n	8011e8e <dir_find+0x24>
 8011e8a:	7ffb      	ldrb	r3, [r7, #31]
 8011e8c:	e113      	b.n	80120b6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	d165      	bne.n	8011f62 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7ff fd25 	bl	80118ea <xname_sum>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011ea4:	e050      	b.n	8011f48 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	691b      	ldr	r3, [r3, #16]
 8011eaa:	3324      	adds	r3, #36	@ 0x24
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fd fefd 	bl	800fcac <ld_word>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	893b      	ldrh	r3, [r7, #8]
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d144      	bne.n	8011f46 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	691b      	ldr	r3, [r3, #16]
 8011ec0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8011ec4:	76fb      	strb	r3, [r7, #27]
 8011ec6:	2340      	movs	r3, #64	@ 0x40
 8011ec8:	617b      	str	r3, [r7, #20]
 8011eca:	2300      	movs	r3, #0
 8011ecc:	613b      	str	r3, [r7, #16]
 8011ece:	e029      	b.n	8011f24 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	f003 031f 	and.w	r3, r3, #31
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <dir_find+0x76>
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	3302      	adds	r3, #2
 8011ede:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	691a      	ldr	r2, [r3, #16]
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	4413      	add	r3, r2
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fd fedf 	bl	800fcac <ld_word>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f003 f921 	bl	8015138 <ff_wtoupper>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	461c      	mov	r4, r3
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	68da      	ldr	r2, [r3, #12]
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	4413      	add	r3, r2
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f003 f916 	bl	8015138 <ff_wtoupper>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	429c      	cmp	r4, r3
 8011f10:	d10c      	bne.n	8011f2c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011f12:	7efb      	ldrb	r3, [r7, #27]
 8011f14:	3b01      	subs	r3, #1
 8011f16:	76fb      	strb	r3, [r7, #27]
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	3302      	adds	r3, #2
 8011f1c:	617b      	str	r3, [r7, #20]
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	3301      	adds	r3, #1
 8011f22:	613b      	str	r3, [r7, #16]
 8011f24:	7efb      	ldrb	r3, [r7, #27]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1d2      	bne.n	8011ed0 <dir_find+0x66>
 8011f2a:	e000      	b.n	8011f2e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011f2c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011f2e:	7efb      	ldrb	r3, [r7, #27]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d109      	bne.n	8011f48 <dir_find+0xde>
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	68da      	ldr	r2, [r3, #12]
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	4413      	add	r3, r2
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00b      	beq.n	8011f5c <dir_find+0xf2>
 8011f44:	e000      	b.n	8011f48 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8011f46:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011f48:	2100      	movs	r1, #0
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7ff fec6 	bl	8011cdc <dir_read>
 8011f50:	4603      	mov	r3, r0
 8011f52:	77fb      	strb	r3, [r7, #31]
 8011f54:	7ffb      	ldrb	r3, [r7, #31]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d0a5      	beq.n	8011ea6 <dir_find+0x3c>
 8011f5a:	e000      	b.n	8011f5e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011f5c:	bf00      	nop
		}
		return res;
 8011f5e:	7ffb      	ldrb	r3, [r7, #31]
 8011f60:	e0a9      	b.n	80120b6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011f62:	23ff      	movs	r3, #255	@ 0xff
 8011f64:	773b      	strb	r3, [r7, #28]
 8011f66:	7f3b      	ldrb	r3, [r7, #28]
 8011f68:	777b      	strb	r3, [r7, #29]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f70:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f76:	4619      	mov	r1, r3
 8011f78:	68f8      	ldr	r0, [r7, #12]
 8011f7a:	f7fe faa1 	bl	80104c0 <move_window>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8011f82:	7ffb      	ldrb	r3, [r7, #31]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f040 8090 	bne.w	80120aa <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f92:	7fbb      	ldrb	r3, [r7, #30]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d102      	bne.n	8011f9e <dir_find+0x134>
 8011f98:	2304      	movs	r3, #4
 8011f9a:	77fb      	strb	r3, [r7, #31]
 8011f9c:	e08a      	b.n	80120b4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fa2:	330b      	adds	r3, #11
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011faa:	72fb      	strb	r3, [r7, #11]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	7afa      	ldrb	r2, [r7, #11]
 8011fb0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011fb2:	7fbb      	ldrb	r3, [r7, #30]
 8011fb4:	2be5      	cmp	r3, #229	@ 0xe5
 8011fb6:	d007      	beq.n	8011fc8 <dir_find+0x15e>
 8011fb8:	7afb      	ldrb	r3, [r7, #11]
 8011fba:	f003 0308 	and.w	r3, r3, #8
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d009      	beq.n	8011fd6 <dir_find+0x16c>
 8011fc2:	7afb      	ldrb	r3, [r7, #11]
 8011fc4:	2b0f      	cmp	r3, #15
 8011fc6:	d006      	beq.n	8011fd6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011fc8:	23ff      	movs	r3, #255	@ 0xff
 8011fca:	777b      	strb	r3, [r7, #29]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011fd4:	e05e      	b.n	8012094 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011fd6:	7afb      	ldrb	r3, [r7, #11]
 8011fd8:	2b0f      	cmp	r3, #15
 8011fda:	d136      	bne.n	801204a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8011fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d154      	bne.n	8012094 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011fea:	7fbb      	ldrb	r3, [r7, #30]
 8011fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00d      	beq.n	8012010 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ff8:	7b5b      	ldrb	r3, [r3, #13]
 8011ffa:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011ffc:	7fbb      	ldrb	r3, [r7, #30]
 8011ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012002:	77bb      	strb	r3, [r7, #30]
 8012004:	7fbb      	ldrb	r3, [r7, #30]
 8012006:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012010:	7fba      	ldrb	r2, [r7, #30]
 8012012:	7f7b      	ldrb	r3, [r7, #29]
 8012014:	429a      	cmp	r2, r3
 8012016:	d115      	bne.n	8012044 <dir_find+0x1da>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801201c:	330d      	adds	r3, #13
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	7f3a      	ldrb	r2, [r7, #28]
 8012022:	429a      	cmp	r2, r3
 8012024:	d10e      	bne.n	8012044 <dir_find+0x1da>
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	68da      	ldr	r2, [r3, #12]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801202e:	4619      	mov	r1, r3
 8012030:	4610      	mov	r0, r2
 8012032:	f7ff fa3f 	bl	80114b4 <cmp_lfn>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d003      	beq.n	8012044 <dir_find+0x1da>
 801203c:	7f7b      	ldrb	r3, [r7, #29]
 801203e:	3b01      	subs	r3, #1
 8012040:	b2db      	uxtb	r3, r3
 8012042:	e000      	b.n	8012046 <dir_find+0x1dc>
 8012044:	23ff      	movs	r3, #255	@ 0xff
 8012046:	777b      	strb	r3, [r7, #29]
 8012048:	e024      	b.n	8012094 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801204a:	7f7b      	ldrb	r3, [r7, #29]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d109      	bne.n	8012064 <dir_find+0x1fa>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012054:	4618      	mov	r0, r3
 8012056:	f7ff fbf7 	bl	8011848 <sum_sfn>
 801205a:	4603      	mov	r3, r0
 801205c:	461a      	mov	r2, r3
 801205e:	7f3b      	ldrb	r3, [r7, #28]
 8012060:	4293      	cmp	r3, r2
 8012062:	d024      	beq.n	80120ae <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 801206a:	f003 0301 	and.w	r3, r3, #1
 801206e:	2b00      	cmp	r3, #0
 8012070:	d10a      	bne.n	8012088 <dir_find+0x21e>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	3340      	adds	r3, #64	@ 0x40
 801207a:	220b      	movs	r2, #11
 801207c:	4619      	mov	r1, r3
 801207e:	f7fe f837 	bl	80100f0 <mem_cmp>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d014      	beq.n	80120b2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012088:	23ff      	movs	r3, #255	@ 0xff
 801208a:	777b      	strb	r3, [r7, #29]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f04f 32ff 	mov.w	r2, #4294967295
 8012092:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012094:	2100      	movs	r1, #0
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff f89b 	bl	80111d2 <dir_next>
 801209c:	4603      	mov	r3, r0
 801209e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80120a0:	7ffb      	ldrb	r3, [r7, #31]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f43f af65 	beq.w	8011f72 <dir_find+0x108>
 80120a8:	e004      	b.n	80120b4 <dir_find+0x24a>
		if (res != FR_OK) break;
 80120aa:	bf00      	nop
 80120ac:	e002      	b.n	80120b4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80120ae:	bf00      	nop
 80120b0:	e000      	b.n	80120b4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80120b2:	bf00      	nop

	return res;
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3724      	adds	r7, #36	@ 0x24
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd90      	pop	{r4, r7, pc}
	...

080120c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80120c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80120c4:	b0a0      	sub	sp, #128	@ 0x80
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80120d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <dir_register+0x22>
 80120de:	2306      	movs	r3, #6
 80120e0:	e18e      	b.n	8012400 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80120e2:	2300      	movs	r3, #0
 80120e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80120e6:	e002      	b.n	80120ee <dir_register+0x2e>
 80120e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80120ea:	3301      	adds	r3, #1
 80120ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80120ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120f0:	68da      	ldr	r2, [r3, #12]
 80120f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80120f4:	005b      	lsls	r3, r3, #1
 80120f6:	4413      	add	r3, r2
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d1f4      	bne.n	80120e8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80120fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	2b04      	cmp	r3, #4
 8012104:	f040 809f 	bne.w	8012246 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801210a:	330e      	adds	r3, #14
 801210c:	4aa2      	ldr	r2, [pc, #648]	@ (8012398 <dir_register+0x2d8>)
 801210e:	fba2 2303 	umull	r2, r3, r2, r3
 8012112:	08db      	lsrs	r3, r3, #3
 8012114:	3302      	adds	r3, #2
 8012116:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8012118:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ff f92e 	bl	801137c <dir_alloc>
 8012120:	4603      	mov	r3, r0
 8012122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8012126:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801212a:	2b00      	cmp	r3, #0
 801212c:	d002      	beq.n	8012134 <dir_register+0x74>
 801212e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012132:	e165      	b.n	8012400 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801213a:	3b01      	subs	r3, #1
 801213c:	015b      	lsls	r3, r3, #5
 801213e:	1ad2      	subs	r2, r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	689b      	ldr	r3, [r3, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d072      	beq.n	8012232 <dir_register+0x172>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	79db      	ldrb	r3, [r3, #7]
 8012150:	f003 0304 	and.w	r3, r3, #4
 8012154:	2b00      	cmp	r3, #0
 8012156:	d06c      	beq.n	8012232 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801215e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012160:	8949      	ldrh	r1, [r1, #10]
 8012162:	0249      	lsls	r1, r1, #9
 8012164:	2000      	movs	r0, #0
 8012166:	460c      	mov	r4, r1
 8012168:	4605      	mov	r5, r0
 801216a:	eb12 0804 	adds.w	r8, r2, r4
 801216e:	eb43 0905 	adc.w	r9, r3, r5
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	f7fe fd4a 	bl	8010c14 <fill_first_frag>
 8012180:	4603      	mov	r3, r0
 8012182:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012186:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801218a:	2b00      	cmp	r3, #0
 801218c:	d002      	beq.n	8012194 <dir_register+0xd4>
 801218e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012192:	e135      	b.n	8012400 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801219a:	f04f 32ff 	mov.w	r2, #4294967295
 801219e:	4619      	mov	r1, r3
 80121a0:	f7fe fd67 	bl	8010c72 <fill_last_frag>
 80121a4:	4603      	mov	r3, r0
 80121a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80121aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <dir_register+0xf8>
 80121b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80121b6:	e123      	b.n	8012400 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	f107 0308 	add.w	r3, r7, #8
 80121be:	4611      	mov	r1, r2
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff fc93 	bl	8011aec <load_obj_dir>
 80121c6:	4603      	mov	r3, r0
 80121c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80121cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d002      	beq.n	80121da <dir_register+0x11a>
 80121d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80121d8:	e112      	b.n	8012400 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80121da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80121e8:	4608      	mov	r0, r1
 80121ea:	f7fd febd 	bl	800ff68 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80121ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121f0:	691b      	ldr	r3, [r3, #16]
 80121f2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80121fc:	4608      	mov	r0, r1
 80121fe:	f7fd feb3 	bl	800ff68 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	79da      	ldrb	r2, [r3, #7]
 8012206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	3321      	adds	r3, #33	@ 0x21
 801220c:	f042 0201 	orr.w	r2, r2, #1
 8012210:	b2d2      	uxtb	r2, r2
 8012212:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8012214:	f107 0308 	add.w	r3, r7, #8
 8012218:	4618      	mov	r0, r3
 801221a:	f7ff fc9d 	bl	8011b58 <store_xdir>
 801221e:	4603      	mov	r3, r0
 8012220:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012224:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <dir_register+0x172>
 801222c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012230:	e0e6      	b.n	8012400 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8012232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012234:	691a      	ldr	r2, [r3, #16]
 8012236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	4619      	mov	r1, r3
 801223c:	4610      	mov	r0, r2
 801223e:	f7ff fce6 	bl	8011c0e <create_xdir>
		return FR_OK;
 8012242:	2300      	movs	r3, #0
 8012244:	e0dc      	b.n	8012400 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801224c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012250:	220c      	movs	r2, #12
 8012252:	4618      	mov	r0, r3
 8012254:	f7fd ff10 	bl	8010078 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012258:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801225c:	f003 0301 	and.w	r3, r3, #1
 8012260:	2b00      	cmp	r3, #0
 8012262:	d033      	beq.n	80122cc <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2240      	movs	r2, #64	@ 0x40
 8012268:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 801226c:	2301      	movs	r3, #1
 801226e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012270:	e016      	b.n	80122a0 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801227a:	68da      	ldr	r2, [r3, #12]
 801227c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8012280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012282:	f7ff fa53 	bl	801172c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7ff fdef 	bl	8011e6a <dir_find>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8012292:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012296:	2b00      	cmp	r3, #0
 8012298:	d106      	bne.n	80122a8 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 801229a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801229c:	3301      	adds	r3, #1
 801229e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80122a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122a2:	2b63      	cmp	r3, #99	@ 0x63
 80122a4:	d9e5      	bls.n	8012272 <dir_register+0x1b2>
 80122a6:	e000      	b.n	80122aa <dir_register+0x1ea>
			if (res != FR_OK) break;
 80122a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80122aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122ac:	2b64      	cmp	r3, #100	@ 0x64
 80122ae:	d101      	bne.n	80122b4 <dir_register+0x1f4>
 80122b0:	2307      	movs	r3, #7
 80122b2:	e0a5      	b.n	8012400 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80122b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122b8:	2b04      	cmp	r3, #4
 80122ba:	d002      	beq.n	80122c2 <dir_register+0x202>
 80122bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122c0:	e09e      	b.n	8012400 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80122c2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80122cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80122d0:	f003 0302 	and.w	r3, r3, #2
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d007      	beq.n	80122e8 <dir_register+0x228>
 80122d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122da:	330c      	adds	r3, #12
 80122dc:	4a2f      	ldr	r2, [pc, #188]	@ (801239c <dir_register+0x2dc>)
 80122de:	fba2 2303 	umull	r2, r3, r2, r3
 80122e2:	089b      	lsrs	r3, r3, #2
 80122e4:	3301      	adds	r3, #1
 80122e6:	e000      	b.n	80122ea <dir_register+0x22a>
 80122e8:	2301      	movs	r3, #1
 80122ea:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80122ec:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ff f844 	bl	801137c <dir_alloc>
 80122f4:	4603      	mov	r3, r0
 80122f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80122fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d14f      	bne.n	80123a2 <dir_register+0x2e2>
 8012302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012304:	3b01      	subs	r3, #1
 8012306:	673b      	str	r3, [r7, #112]	@ 0x70
 8012308:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801230a:	2b00      	cmp	r3, #0
 801230c:	d049      	beq.n	80123a2 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012314:	015b      	lsls	r3, r3, #5
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7fe fed3 	bl	80110c6 <dir_sdi>
 8012320:	4603      	mov	r3, r0
 8012322:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8012326:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801232a:	2b00      	cmp	r3, #0
 801232c:	d139      	bne.n	80123a2 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	3340      	adds	r3, #64	@ 0x40
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff fa88 	bl	8011848 <sum_sfn>
 8012338:	4603      	mov	r3, r0
 801233a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012342:	4619      	mov	r1, r3
 8012344:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012346:	f7fe f8bb 	bl	80104c0 <move_window>
 801234a:	4603      	mov	r3, r0
 801234c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8012350:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012354:	2b00      	cmp	r3, #0
 8012356:	d123      	bne.n	80123a0 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801235a:	68d8      	ldr	r0, [r3, #12]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8012360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012362:	b2da      	uxtb	r2, r3
 8012364:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8012368:	f7ff f978 	bl	801165c <put_lfn>
				fs->wflag = 1;
 801236c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801236e:	2201      	movs	r2, #1
 8012370:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012372:	2100      	movs	r1, #0
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7fe ff2c 	bl	80111d2 <dir_next>
 801237a:	4603      	mov	r3, r0
 801237c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8012380:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10c      	bne.n	80123a2 <dir_register+0x2e2>
 8012388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801238a:	3b01      	subs	r3, #1
 801238c:	673b      	str	r3, [r7, #112]	@ 0x70
 801238e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1d4      	bne.n	801233e <dir_register+0x27e>
 8012394:	e005      	b.n	80123a2 <dir_register+0x2e2>
 8012396:	bf00      	nop
 8012398:	88888889 	.word	0x88888889
 801239c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80123a0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80123a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d128      	bne.n	80123fc <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123ae:	4619      	mov	r1, r3
 80123b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80123b2:	f7fe f885 	bl	80104c0 <move_window>
 80123b6:	4603      	mov	r3, r0
 80123b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 80123bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d11b      	bne.n	80123fc <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123c8:	2220      	movs	r2, #32
 80123ca:	2100      	movs	r1, #0
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fd fe74 	bl	80100ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3340      	adds	r3, #64	@ 0x40
 80123da:	220b      	movs	r2, #11
 80123dc:	4619      	mov	r1, r3
 80123de:	f7fd fe4b 	bl	8010078 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123ec:	330c      	adds	r3, #12
 80123ee:	f002 0218 	and.w	r2, r2, #24
 80123f2:	b2d2      	uxtb	r2, r2
 80123f4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80123f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123f8:	2201      	movs	r2, #1
 80123fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80123fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8012400:	4618      	mov	r0, r3
 8012402:	3780      	adds	r7, #128	@ 0x80
 8012404:	46bd      	mov	sp, r7
 8012406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801240a:	bf00      	nop

0801240c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b08a      	sub	sp, #40	@ 0x28
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	613b      	str	r3, [r7, #16]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	60fb      	str	r3, [r7, #12]
 8012424:	2300      	movs	r3, #0
 8012426:	617b      	str	r3, [r7, #20]
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	61ba      	str	r2, [r7, #24]
 8012432:	693a      	ldr	r2, [r7, #16]
 8012434:	4413      	add	r3, r2
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801243a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801243c:	2b1f      	cmp	r3, #31
 801243e:	d940      	bls.n	80124c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012440:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012442:	2b2f      	cmp	r3, #47	@ 0x2f
 8012444:	d006      	beq.n	8012454 <create_name+0x48>
 8012446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012448:	2b5c      	cmp	r3, #92	@ 0x5c
 801244a:	d110      	bne.n	801246e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801244c:	e002      	b.n	8012454 <create_name+0x48>
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	3301      	adds	r3, #1
 8012452:	61bb      	str	r3, [r7, #24]
 8012454:	693a      	ldr	r2, [r7, #16]
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	4413      	add	r3, r2
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	2b2f      	cmp	r3, #47	@ 0x2f
 801245e:	d0f6      	beq.n	801244e <create_name+0x42>
 8012460:	693a      	ldr	r2, [r7, #16]
 8012462:	69bb      	ldr	r3, [r7, #24]
 8012464:	4413      	add	r3, r2
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b5c      	cmp	r3, #92	@ 0x5c
 801246a:	d0f0      	beq.n	801244e <create_name+0x42>
			break;
 801246c:	e02a      	b.n	80124c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	2bfe      	cmp	r3, #254	@ 0xfe
 8012472:	d901      	bls.n	8012478 <create_name+0x6c>
 8012474:	2306      	movs	r3, #6
 8012476:	e17d      	b.n	8012774 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801247a:	b2db      	uxtb	r3, r3
 801247c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801247e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012480:	2101      	movs	r1, #1
 8012482:	4618      	mov	r0, r3
 8012484:	f002 fe1c 	bl	80150c0 <ff_convert>
 8012488:	4603      	mov	r3, r0
 801248a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801248c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <create_name+0x8a>
 8012492:	2306      	movs	r3, #6
 8012494:	e16e      	b.n	8012774 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012498:	2b7f      	cmp	r3, #127	@ 0x7f
 801249a:	d809      	bhi.n	80124b0 <create_name+0xa4>
 801249c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801249e:	4619      	mov	r1, r3
 80124a0:	488d      	ldr	r0, [pc, #564]	@ (80126d8 <create_name+0x2cc>)
 80124a2:	f7fd fe4c 	bl	801013e <chk_chr>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <create_name+0xa4>
 80124ac:	2306      	movs	r3, #6
 80124ae:	e161      	b.n	8012774 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	1c5a      	adds	r2, r3, #1
 80124b4:	617a      	str	r2, [r7, #20]
 80124b6:	005b      	lsls	r3, r3, #1
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4413      	add	r3, r2
 80124bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80124be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80124c0:	e7b4      	b.n	801242c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80124c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80124c4:	693a      	ldr	r2, [r7, #16]
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	441a      	add	r2, r3
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80124ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80124d0:	2b1f      	cmp	r3, #31
 80124d2:	d801      	bhi.n	80124d8 <create_name+0xcc>
 80124d4:	2304      	movs	r3, #4
 80124d6:	e000      	b.n	80124da <create_name+0xce>
 80124d8:	2300      	movs	r3, #0
 80124da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80124de:	e011      	b.n	8012504 <create_name+0xf8>
		w = lfn[di - 1];
 80124e0:	697a      	ldr	r2, [r7, #20]
 80124e2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80124e6:	4413      	add	r3, r2
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	4413      	add	r3, r2
 80124ee:	881b      	ldrh	r3, [r3, #0]
 80124f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80124f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80124f4:	2b20      	cmp	r3, #32
 80124f6:	d002      	beq.n	80124fe <create_name+0xf2>
 80124f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80124fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80124fc:	d106      	bne.n	801250c <create_name+0x100>
		di--;
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	3b01      	subs	r3, #1
 8012502:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1ea      	bne.n	80124e0 <create_name+0xd4>
 801250a:	e000      	b.n	801250e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801250c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	005b      	lsls	r3, r3, #1
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	4413      	add	r3, r2
 8012516:	2200      	movs	r2, #0
 8012518:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d101      	bne.n	8012524 <create_name+0x118>
 8012520:	2306      	movs	r3, #6
 8012522:	e127      	b.n	8012774 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3340      	adds	r3, #64	@ 0x40
 8012528:	220b      	movs	r2, #11
 801252a:	2120      	movs	r1, #32
 801252c:	4618      	mov	r0, r3
 801252e:	f7fd fdc4 	bl	80100ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012532:	2300      	movs	r3, #0
 8012534:	61bb      	str	r3, [r7, #24]
 8012536:	e002      	b.n	801253e <create_name+0x132>
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	3301      	adds	r3, #1
 801253c:	61bb      	str	r3, [r7, #24]
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	4413      	add	r3, r2
 8012546:	881b      	ldrh	r3, [r3, #0]
 8012548:	2b20      	cmp	r3, #32
 801254a:	d0f5      	beq.n	8012538 <create_name+0x12c>
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	005b      	lsls	r3, r3, #1
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	4413      	add	r3, r2
 8012554:	881b      	ldrh	r3, [r3, #0]
 8012556:	2b2e      	cmp	r3, #46	@ 0x2e
 8012558:	d0ee      	beq.n	8012538 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d009      	beq.n	8012574 <create_name+0x168>
 8012560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012564:	f043 0303 	orr.w	r3, r3, #3
 8012568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801256c:	e002      	b.n	8012574 <create_name+0x168>
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	3b01      	subs	r3, #1
 8012572:	617b      	str	r3, [r7, #20]
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d009      	beq.n	801258e <create_name+0x182>
 801257a:	697a      	ldr	r2, [r7, #20]
 801257c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012580:	4413      	add	r3, r2
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	68fa      	ldr	r2, [r7, #12]
 8012586:	4413      	add	r3, r2
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	2b2e      	cmp	r3, #46	@ 0x2e
 801258c:	d1ef      	bne.n	801256e <create_name+0x162>

	i = b = 0; ni = 8;
 801258e:	2300      	movs	r3, #0
 8012590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012594:	2300      	movs	r3, #0
 8012596:	623b      	str	r3, [r7, #32]
 8012598:	2308      	movs	r3, #8
 801259a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	61ba      	str	r2, [r7, #24]
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	4413      	add	r3, r2
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80125ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 8090 	beq.w	80126d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80125b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125b6:	2b20      	cmp	r3, #32
 80125b8:	d006      	beq.n	80125c8 <create_name+0x1bc>
 80125ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80125be:	d10a      	bne.n	80125d6 <create_name+0x1ca>
 80125c0:	69ba      	ldr	r2, [r7, #24]
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d006      	beq.n	80125d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80125c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125cc:	f043 0303 	orr.w	r3, r3, #3
 80125d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80125d4:	e07d      	b.n	80126d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80125d6:	6a3a      	ldr	r2, [r7, #32]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d203      	bcs.n	80125e6 <create_name+0x1da>
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d123      	bne.n	801262e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	2b0b      	cmp	r3, #11
 80125ea:	d106      	bne.n	80125fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80125ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125f0:	f043 0303 	orr.w	r3, r3, #3
 80125f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80125f8:	e075      	b.n	80126e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80125fa:	69ba      	ldr	r2, [r7, #24]
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d005      	beq.n	801260e <create_name+0x202>
 8012602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012606:	f043 0303 	orr.w	r3, r3, #3
 801260a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	429a      	cmp	r2, r3
 8012614:	d866      	bhi.n	80126e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	61bb      	str	r3, [r7, #24]
 801261a:	2308      	movs	r3, #8
 801261c:	623b      	str	r3, [r7, #32]
 801261e:	230b      	movs	r3, #11
 8012620:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012622:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012626:	009b      	lsls	r3, r3, #2
 8012628:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801262c:	e051      	b.n	80126d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801262e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012630:	2b7f      	cmp	r3, #127	@ 0x7f
 8012632:	d914      	bls.n	801265e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012636:	2100      	movs	r1, #0
 8012638:	4618      	mov	r0, r3
 801263a:	f002 fd41 	bl	80150c0 <ff_convert>
 801263e:	4603      	mov	r3, r0
 8012640:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012644:	2b00      	cmp	r3, #0
 8012646:	d004      	beq.n	8012652 <create_name+0x246>
 8012648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801264a:	3b80      	subs	r3, #128	@ 0x80
 801264c:	4a23      	ldr	r2, [pc, #140]	@ (80126dc <create_name+0x2d0>)
 801264e:	5cd3      	ldrb	r3, [r2, r3]
 8012650:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012656:	f043 0302 	orr.w	r3, r3, #2
 801265a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801265e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012660:	2b00      	cmp	r3, #0
 8012662:	d007      	beq.n	8012674 <create_name+0x268>
 8012664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012666:	4619      	mov	r1, r3
 8012668:	481d      	ldr	r0, [pc, #116]	@ (80126e0 <create_name+0x2d4>)
 801266a:	f7fd fd68 	bl	801013e <chk_chr>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012674:	235f      	movs	r3, #95	@ 0x5f
 8012676:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801267c:	f043 0303 	orr.w	r3, r3, #3
 8012680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012684:	e01b      	b.n	80126be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012688:	2b40      	cmp	r3, #64	@ 0x40
 801268a:	d909      	bls.n	80126a0 <create_name+0x294>
 801268c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801268e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012690:	d806      	bhi.n	80126a0 <create_name+0x294>
					b |= 2;
 8012692:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012696:	f043 0302 	orr.w	r3, r3, #2
 801269a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801269e:	e00e      	b.n	80126be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80126a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126a2:	2b60      	cmp	r3, #96	@ 0x60
 80126a4:	d90b      	bls.n	80126be <create_name+0x2b2>
 80126a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80126aa:	d808      	bhi.n	80126be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80126ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80126b0:	f043 0301 	orr.w	r3, r3, #1
 80126b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80126b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126ba:	3b20      	subs	r3, #32
 80126bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	1c5a      	adds	r2, r3, #1
 80126c2:	623a      	str	r2, [r7, #32]
 80126c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80126c6:	b2d1      	uxtb	r1, r2
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	4413      	add	r3, r2
 80126cc:	460a      	mov	r2, r1
 80126ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 80126d2:	e763      	b.n	801259c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80126d4:	bf00      	nop
 80126d6:	e006      	b.n	80126e6 <create_name+0x2da>
 80126d8:	0801a940 	.word	0x0801a940
 80126dc:	0801b2d8 	.word	0x0801b2d8
 80126e0:	0801a94c 	.word	0x0801a94c
			if (si > di) break;			/* No extension */
 80126e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126ec:	2be5      	cmp	r3, #229	@ 0xe5
 80126ee:	d103      	bne.n	80126f8 <create_name+0x2ec>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2205      	movs	r2, #5
 80126f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	2b08      	cmp	r3, #8
 80126fc:	d104      	bne.n	8012708 <create_name+0x2fc>
 80126fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012708:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801270c:	f003 030c 	and.w	r3, r3, #12
 8012710:	2b0c      	cmp	r3, #12
 8012712:	d005      	beq.n	8012720 <create_name+0x314>
 8012714:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012718:	f003 0303 	and.w	r3, r3, #3
 801271c:	2b03      	cmp	r3, #3
 801271e:	d105      	bne.n	801272c <create_name+0x320>
 8012720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012724:	f043 0302 	orr.w	r3, r3, #2
 8012728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801272c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012730:	f003 0302 	and.w	r3, r3, #2
 8012734:	2b00      	cmp	r3, #0
 8012736:	d117      	bne.n	8012768 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801273c:	f003 0303 	and.w	r3, r3, #3
 8012740:	2b01      	cmp	r3, #1
 8012742:	d105      	bne.n	8012750 <create_name+0x344>
 8012744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012748:	f043 0310 	orr.w	r3, r3, #16
 801274c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012750:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012754:	f003 030c 	and.w	r3, r3, #12
 8012758:	2b04      	cmp	r3, #4
 801275a:	d105      	bne.n	8012768 <create_name+0x35c>
 801275c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012760:	f043 0308 	orr.w	r3, r3, #8
 8012764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801276e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8012772:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012774:	4618      	mov	r0, r3
 8012776:	3728      	adds	r7, #40	@ 0x28
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012790:	e002      	b.n	8012798 <follow_path+0x1c>
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b2f      	cmp	r3, #47	@ 0x2f
 801279e:	d0f8      	beq.n	8012792 <follow_path+0x16>
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80127a6:	d0f4      	beq.n	8012792 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	2200      	movs	r2, #0
 80127ac:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	2200      	movs	r2, #0
 80127b2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	2b1f      	cmp	r3, #31
 80127ba:	d80a      	bhi.n	80127d2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2280      	movs	r2, #128	@ 0x80
 80127c0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 80127c4:	2100      	movs	r1, #0
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7fe fc7d 	bl	80110c6 <dir_sdi>
 80127cc:	4603      	mov	r3, r0
 80127ce:	75fb      	strb	r3, [r7, #23]
 80127d0:	e078      	b.n	80128c4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80127d2:	463b      	mov	r3, r7
 80127d4:	4619      	mov	r1, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7ff fe18 	bl	801240c <create_name>
 80127dc:	4603      	mov	r3, r0
 80127de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d169      	bne.n	80128ba <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7ff fb3f 	bl	8011e6a <dir_find>
 80127ec:	4603      	mov	r3, r0
 80127ee:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80127f6:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80127f8:	7dfb      	ldrb	r3, [r7, #23]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00a      	beq.n	8012814 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	2b04      	cmp	r3, #4
 8012802:	d15c      	bne.n	80128be <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012804:	7afb      	ldrb	r3, [r7, #11]
 8012806:	f003 0304 	and.w	r3, r3, #4
 801280a:	2b00      	cmp	r3, #0
 801280c:	d157      	bne.n	80128be <follow_path+0x142>
 801280e:	2305      	movs	r3, #5
 8012810:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012812:	e054      	b.n	80128be <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	f003 0304 	and.w	r3, r3, #4
 801281a:	2b00      	cmp	r3, #0
 801281c:	d151      	bne.n	80128c2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	799b      	ldrb	r3, [r3, #6]
 8012822:	f003 0310 	and.w	r3, r3, #16
 8012826:	2b00      	cmp	r3, #0
 8012828:	d102      	bne.n	8012830 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801282a:	2305      	movs	r3, #5
 801282c:	75fb      	strb	r3, [r7, #23]
 801282e:	e049      	b.n	80128c4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b04      	cmp	r3, #4
 8012836:	d130      	bne.n	801289a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	689a      	ldr	r2, [r3, #8]
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012846:	4613      	mov	r3, r2
 8012848:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801284c:	693a      	ldr	r2, [r7, #16]
 801284e:	79d2      	ldrb	r2, [r2, #7]
 8012850:	431a      	orrs	r2, r3
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	3334      	adds	r3, #52	@ 0x34
 8012864:	4618      	mov	r0, r3
 8012866:	f7fd fa3a 	bl	800fcde <ld_dword>
 801286a:	4602      	mov	r2, r0
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	691b      	ldr	r3, [r3, #16]
 8012874:	3321      	adds	r3, #33	@ 0x21
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	f003 0302 	and.w	r3, r3, #2
 801287c:	b2da      	uxtb	r2, r3
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	3338      	adds	r3, #56	@ 0x38
 8012888:	4618      	mov	r0, r3
 801288a:	f7fd fa4b 	bl	800fd24 <ld_qword>
 801288e:	4602      	mov	r2, r0
 8012890:	460b      	mov	r3, r1
 8012892:	6939      	ldr	r1, [r7, #16]
 8012894:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012898:	e79b      	b.n	80127d2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128a8:	4413      	add	r3, r2
 80128aa:	4619      	mov	r1, r3
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f7fe fdc1 	bl	8011434 <ld_clust>
 80128b2:	4602      	mov	r2, r0
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80128b8:	e78b      	b.n	80127d2 <follow_path+0x56>
			if (res != FR_OK) break;
 80128ba:	bf00      	nop
 80128bc:	e002      	b.n	80128c4 <follow_path+0x148>
				break;
 80128be:	bf00      	nop
 80128c0:	e000      	b.n	80128c4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80128c2:	bf00      	nop
			}
		}
	}

	return res;
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80128ce:	b480      	push	{r7}
 80128d0:	b087      	sub	sp, #28
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80128d6:	f04f 33ff 	mov.w	r3, #4294967295
 80128da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d031      	beq.n	8012948 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	e002      	b.n	80128f2 <get_ldnumber+0x24>
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	3301      	adds	r3, #1
 80128f0:	617b      	str	r3, [r7, #20]
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	2b1f      	cmp	r3, #31
 80128f8:	d903      	bls.n	8012902 <get_ldnumber+0x34>
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8012900:	d1f4      	bne.n	80128ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b3a      	cmp	r3, #58	@ 0x3a
 8012908:	d11c      	bne.n	8012944 <get_ldnumber+0x76>
			tp = *path;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	1c5a      	adds	r2, r3, #1
 8012914:	60fa      	str	r2, [r7, #12]
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	3b30      	subs	r3, #48	@ 0x30
 801291a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	2b09      	cmp	r3, #9
 8012920:	d80e      	bhi.n	8012940 <get_ldnumber+0x72>
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	429a      	cmp	r2, r3
 8012928:	d10a      	bne.n	8012940 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d107      	bne.n	8012940 <get_ldnumber+0x72>
					vol = (int)i;
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	3301      	adds	r3, #1
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	697a      	ldr	r2, [r7, #20]
 801293e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	e002      	b.n	801294a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012944:	2300      	movs	r3, #0
 8012946:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012948:	693b      	ldr	r3, [r7, #16]
}
 801294a:	4618      	mov	r0, r3
 801294c:	371c      	adds	r7, #28
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
	...

08012958 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2200      	movs	r2, #0
 8012966:	70da      	strb	r2, [r3, #3]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f04f 32ff 	mov.w	r2, #4294967295
 801296e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012970:	6839      	ldr	r1, [r7, #0]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7fd fda4 	bl	80104c0 <move_window>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d001      	beq.n	8012982 <check_fs+0x2a>
 801297e:	2304      	movs	r3, #4
 8012980:	e044      	b.n	8012a0c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	333c      	adds	r3, #60	@ 0x3c
 8012986:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801298a:	4618      	mov	r0, r3
 801298c:	f7fd f98e 	bl	800fcac <ld_word>
 8012990:	4603      	mov	r3, r0
 8012992:	461a      	mov	r2, r3
 8012994:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012998:	429a      	cmp	r2, r3
 801299a:	d001      	beq.n	80129a0 <check_fs+0x48>
 801299c:	2303      	movs	r3, #3
 801299e:	e035      	b.n	8012a0c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80129a6:	2be9      	cmp	r3, #233	@ 0xe9
 80129a8:	d009      	beq.n	80129be <check_fs+0x66>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80129b0:	2beb      	cmp	r3, #235	@ 0xeb
 80129b2:	d11e      	bne.n	80129f2 <check_fs+0x9a>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80129ba:	2b90      	cmp	r3, #144	@ 0x90
 80129bc:	d119      	bne.n	80129f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	333c      	adds	r3, #60	@ 0x3c
 80129c2:	3336      	adds	r3, #54	@ 0x36
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fd f98a 	bl	800fcde <ld_dword>
 80129ca:	4603      	mov	r3, r0
 80129cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80129d0:	4a10      	ldr	r2, [pc, #64]	@ (8012a14 <check_fs+0xbc>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d101      	bne.n	80129da <check_fs+0x82>
 80129d6:	2300      	movs	r3, #0
 80129d8:	e018      	b.n	8012a0c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	333c      	adds	r3, #60	@ 0x3c
 80129de:	3352      	adds	r3, #82	@ 0x52
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fd f97c 	bl	800fcde <ld_dword>
 80129e6:	4603      	mov	r3, r0
 80129e8:	4a0b      	ldr	r2, [pc, #44]	@ (8012a18 <check_fs+0xc0>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d101      	bne.n	80129f2 <check_fs+0x9a>
 80129ee:	2300      	movs	r3, #0
 80129f0:	e00c      	b.n	8012a0c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	333c      	adds	r3, #60	@ 0x3c
 80129f6:	220b      	movs	r2, #11
 80129f8:	4908      	ldr	r1, [pc, #32]	@ (8012a1c <check_fs+0xc4>)
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7fd fb78 	bl	80100f0 <mem_cmp>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <check_fs+0xb2>
 8012a06:	2301      	movs	r3, #1
 8012a08:	e000      	b.n	8012a0c <check_fs+0xb4>
#endif
	return 2;
 8012a0a:	2302      	movs	r3, #2
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	00544146 	.word	0x00544146
 8012a18:	33544146 	.word	0x33544146
 8012a1c:	0801a954 	.word	0x0801a954

08012a20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a24:	b09c      	sub	sp, #112	@ 0x70
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	61f8      	str	r0, [r7, #28]
 8012a2a:	61b9      	str	r1, [r7, #24]
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	2200      	movs	r2, #0
 8012a34:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012a36:	69f8      	ldr	r0, [r7, #28]
 8012a38:	f7ff ff49 	bl	80128ce <get_ldnumber>
 8012a3c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	da01      	bge.n	8012a48 <find_volume+0x28>
 8012a44:	230b      	movs	r3, #11
 8012a46:	e339      	b.n	80130bc <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012a48:	4a9d      	ldr	r2, [pc, #628]	@ (8012cc0 <find_volume+0x2a0>)
 8012a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a50:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d101      	bne.n	8012a5c <find_volume+0x3c>
 8012a58:	230c      	movs	r3, #12
 8012a5a:	e32f      	b.n	80130bc <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 8012a5c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012a5e:	f7fd fb89 	bl	8010174 <lock_fs>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <find_volume+0x4c>
 8012a68:	230f      	movs	r3, #15
 8012a6a:	e327      	b.n	80130bc <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a70:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	f023 0301 	bic.w	r3, r3, #1
 8012a78:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d01a      	beq.n	8012ab8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 8012a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a84:	785b      	ldrb	r3, [r3, #1]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fd f870 	bl	800fb6c <disk_status>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012a92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10c      	bne.n	8012ab8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012a9e:	7dfb      	ldrb	r3, [r7, #23]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d007      	beq.n	8012ab4 <find_volume+0x94>
 8012aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012aa8:	f003 0304 	and.w	r3, r3, #4
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d001      	beq.n	8012ab4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8012ab0:	230a      	movs	r3, #10
 8012ab2:	e303      	b.n	80130bc <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	e301      	b.n	80130bc <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aba:	2200      	movs	r2, #0
 8012abc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ac0:	b2da      	uxtb	r2, r3
 8012ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ac4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ac8:	785b      	ldrb	r3, [r3, #1]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7fd f868 	bl	800fba0 <disk_initialize>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ad6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012ada:	f003 0301 	and.w	r3, r3, #1
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	e2ea      	b.n	80130bc <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ae6:	7dfb      	ldrb	r3, [r7, #23]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d007      	beq.n	8012afc <find_volume+0xdc>
 8012aec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012af0:	f003 0304 	and.w	r3, r3, #4
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8012af8:	230a      	movs	r3, #10
 8012afa:	e2df      	b.n	80130bc <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012afc:	2300      	movs	r3, #0
 8012afe:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012b00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012b02:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012b04:	f7ff ff28 	bl	8012958 <check_fs>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012b0e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012b12:	2b02      	cmp	r3, #2
 8012b14:	d14d      	bne.n	8012bb2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b16:	2300      	movs	r3, #0
 8012b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b1a:	e020      	b.n	8012b5e <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b1e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b24:	011b      	lsls	r3, r3, #4
 8012b26:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012b2a:	4413      	add	r3, r2
 8012b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b30:	3304      	adds	r3, #4
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d006      	beq.n	8012b46 <find_volume+0x126>
 8012b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b3a:	3308      	adds	r3, #8
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fd f8ce 	bl	800fcde <ld_dword>
 8012b42:	4602      	mov	r2, r0
 8012b44:	e000      	b.n	8012b48 <find_volume+0x128>
 8012b46:	2200      	movs	r2, #0
 8012b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	3360      	adds	r3, #96	@ 0x60
 8012b4e:	f107 0110 	add.w	r1, r7, #16
 8012b52:	440b      	add	r3, r1
 8012b54:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b60:	2b03      	cmp	r3, #3
 8012b62:	d9db      	bls.n	8012b1c <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012b64:	2300      	movs	r3, #0
 8012b66:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8012b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d002      	beq.n	8012b74 <find_volume+0x154>
 8012b6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b70:	3b01      	subs	r3, #1
 8012b72:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	3360      	adds	r3, #96	@ 0x60
 8012b7a:	f107 0210 	add.w	r2, r7, #16
 8012b7e:	4413      	add	r3, r2
 8012b80:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012b84:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d005      	beq.n	8012b98 <find_volume+0x178>
 8012b8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012b8e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012b90:	f7ff fee2 	bl	8012958 <check_fs>
 8012b94:	4603      	mov	r3, r0
 8012b96:	e000      	b.n	8012b9a <find_volume+0x17a>
 8012b98:	2303      	movs	r3, #3
 8012b9a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012b9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012ba2:	2b01      	cmp	r3, #1
 8012ba4:	d905      	bls.n	8012bb2 <find_volume+0x192>
 8012ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ba8:	3301      	adds	r3, #1
 8012baa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bae:	2b03      	cmp	r3, #3
 8012bb0:	d9e0      	bls.n	8012b74 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012bb6:	2b04      	cmp	r3, #4
 8012bb8:	d101      	bne.n	8012bbe <find_volume+0x19e>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e27e      	b.n	80130bc <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d901      	bls.n	8012bca <find_volume+0x1aa>
 8012bc6:	230d      	movs	r3, #13
 8012bc8:	e278      	b.n	80130bc <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012bca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	f040 80fa 	bne.w	8012dc8 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012bd4:	230b      	movs	r3, #11
 8012bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012bd8:	e002      	b.n	8012be0 <find_volume+0x1c0>
 8012bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bdc:	3301      	adds	r3, #1
 8012bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012be2:	2b3f      	cmp	r3, #63	@ 0x3f
 8012be4:	d806      	bhi.n	8012bf4 <find_volume+0x1d4>
 8012be6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bea:	4413      	add	r3, r2
 8012bec:	333c      	adds	r3, #60	@ 0x3c
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d0f2      	beq.n	8012bda <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8012bf8:	d801      	bhi.n	8012bfe <find_volume+0x1de>
 8012bfa:	230d      	movs	r3, #13
 8012bfc:	e25e      	b.n	80130bc <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c00:	333c      	adds	r3, #60	@ 0x3c
 8012c02:	3368      	adds	r3, #104	@ 0x68
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fd f851 	bl	800fcac <ld_word>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c10:	d001      	beq.n	8012c16 <find_volume+0x1f6>
 8012c12:	230d      	movs	r3, #13
 8012c14:	e252      	b.n	80130bc <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c18:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8012c1c:	2b09      	cmp	r3, #9
 8012c1e:	d001      	beq.n	8012c24 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 8012c20:	230d      	movs	r3, #13
 8012c22:	e24b      	b.n	80130bc <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8012c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c26:	333c      	adds	r3, #60	@ 0x3c
 8012c28:	3348      	adds	r3, #72	@ 0x48
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fd f87a 	bl	800fd24 <ld_qword>
 8012c30:	4602      	mov	r2, r0
 8012c32:	460b      	mov	r3, r1
 8012c34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012c36:	2000      	movs	r0, #0
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	68b9      	ldr	r1, [r7, #8]
 8012c3e:	1851      	adds	r1, r2, r1
 8012c40:	6039      	str	r1, [r7, #0]
 8012c42:	68f9      	ldr	r1, [r7, #12]
 8012c44:	eb43 0101 	adc.w	r1, r3, r1
 8012c48:	6079      	str	r1, [r7, #4]
 8012c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012c52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d301      	bcc.n	8012c5e <find_volume+0x23e>
 8012c5a:	230d      	movs	r3, #13
 8012c5c:	e22e      	b.n	80130bc <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8012c5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c60:	333c      	adds	r3, #60	@ 0x3c
 8012c62:	3354      	adds	r3, #84	@ 0x54
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fd f83a 	bl	800fcde <ld_dword>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c6e:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c72:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8012c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c78:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8012c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c7c:	789b      	ldrb	r3, [r3, #2]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d001      	beq.n	8012c86 <find_volume+0x266>
 8012c82:	230d      	movs	r3, #13
 8012c84:	e21a      	b.n	80130bc <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8012c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c88:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4093      	lsls	r3, r2
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c96:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8012c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c9a:	895b      	ldrh	r3, [r3, #10]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d101      	bne.n	8012ca4 <find_volume+0x284>
 8012ca0:	230d      	movs	r3, #13
 8012ca2:	e20b      	b.n	80130bc <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8012ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ca6:	333c      	adds	r3, #60	@ 0x3c
 8012ca8:	335c      	adds	r3, #92	@ 0x5c
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fd f817 	bl	800fcde <ld_dword>
 8012cb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8012cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cb4:	4a03      	ldr	r2, [pc, #12]	@ (8012cc4 <find_volume+0x2a4>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d906      	bls.n	8012cc8 <find_volume+0x2a8>
 8012cba:	230d      	movs	r3, #13
 8012cbc:	e1fe      	b.n	80130bc <find_volume+0x69c>
 8012cbe:	bf00      	nop
 8012cc0:	24001bc8 	.word	0x24001bc8
 8012cc4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8012cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cca:	1c9a      	adds	r2, r3, #2
 8012ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cce:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012cd4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8012cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cd8:	333c      	adds	r3, #60	@ 0x3c
 8012cda:	3358      	adds	r3, #88	@ 0x58
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fc fffe 	bl	800fcde <ld_dword>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ce6:	441a      	add	r2, r3
 8012ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cea:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8012cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cee:	333c      	adds	r3, #60	@ 0x3c
 8012cf0:	3350      	adds	r3, #80	@ 0x50
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7fc fff3 	bl	800fcde <ld_dword>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012cfc:	441a      	add	r2, r3
 8012cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d00:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8012d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d06:	2200      	movs	r2, #0
 8012d08:	469a      	mov	sl, r3
 8012d0a:	4693      	mov	fp, r2
 8012d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d0e:	895b      	ldrh	r3, [r3, #10]
 8012d10:	461a      	mov	r2, r3
 8012d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d14:	fb02 f303 	mul.w	r3, r2, r3
 8012d18:	2200      	movs	r2, #0
 8012d1a:	4698      	mov	r8, r3
 8012d1c:	4691      	mov	r9, r2
 8012d1e:	eb1a 0408 	adds.w	r4, sl, r8
 8012d22:	eb4b 0509 	adc.w	r5, fp, r9
 8012d26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8012d2a:	42a2      	cmp	r2, r4
 8012d2c:	41ab      	sbcs	r3, r5
 8012d2e:	d201      	bcs.n	8012d34 <find_volume+0x314>
 8012d30:	230d      	movs	r3, #13
 8012d32:	e1c3      	b.n	80130bc <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8012d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d36:	333c      	adds	r3, #60	@ 0x3c
 8012d38:	3360      	adds	r3, #96	@ 0x60
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fc ffcf 	bl	800fcde <ld_dword>
 8012d40:	4602      	mov	r2, r0
 8012d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d44:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8012d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012d4e:	f7fd fc53 	bl	80105f8 <clust2sect>
 8012d52:	4603      	mov	r3, r0
 8012d54:	4619      	mov	r1, r3
 8012d56:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012d58:	f7fd fbb2 	bl	80104c0 <move_window>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d001      	beq.n	8012d66 <find_volume+0x346>
 8012d62:	2301      	movs	r3, #1
 8012d64:	e1aa      	b.n	80130bc <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012d66:	2300      	movs	r3, #0
 8012d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012d6a:	e015      	b.n	8012d98 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012d6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d70:	4413      	add	r3, r2
 8012d72:	333c      	adds	r3, #60	@ 0x3c
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2b81      	cmp	r3, #129	@ 0x81
 8012d78:	d10b      	bne.n	8012d92 <find_volume+0x372>
 8012d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d7c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d82:	3314      	adds	r3, #20
 8012d84:	4413      	add	r3, r2
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fc ffa9 	bl	800fcde <ld_dword>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b02      	cmp	r3, #2
 8012d90:	d007      	beq.n	8012da2 <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d94:	3320      	adds	r3, #32
 8012d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d9e:	d3e5      	bcc.n	8012d6c <find_volume+0x34c>
 8012da0:	e000      	b.n	8012da4 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012da2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8012da4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012daa:	d101      	bne.n	8012db0 <find_volume+0x390>
 8012dac:	230d      	movs	r3, #13
 8012dae:	e185      	b.n	80130bc <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012db2:	f04f 32ff 	mov.w	r2, #4294967295
 8012db6:	61da      	str	r2, [r3, #28]
 8012db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dba:	69da      	ldr	r2, [r3, #28]
 8012dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dbe:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8012dc0:	2304      	movs	r3, #4
 8012dc2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8012dc6:	e167      	b.n	8013098 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dca:	333c      	adds	r3, #60	@ 0x3c
 8012dcc:	330b      	adds	r3, #11
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fc ff6c 	bl	800fcac <ld_word>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dda:	d001      	beq.n	8012de0 <find_volume+0x3c0>
 8012ddc:	230d      	movs	r3, #13
 8012dde:	e16d      	b.n	80130bc <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012de2:	333c      	adds	r3, #60	@ 0x3c
 8012de4:	3316      	adds	r3, #22
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fc ff60 	bl	800fcac <ld_word>
 8012dec:	4603      	mov	r3, r0
 8012dee:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <find_volume+0x3e4>
 8012df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012df8:	333c      	adds	r3, #60	@ 0x3c
 8012dfa:	3324      	adds	r3, #36	@ 0x24
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fc ff6e 	bl	800fcde <ld_dword>
 8012e02:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 8012e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012e08:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e0c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8012e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e16:	789b      	ldrb	r3, [r3, #2]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d005      	beq.n	8012e28 <find_volume+0x408>
 8012e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e1e:	789b      	ldrb	r3, [r3, #2]
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d001      	beq.n	8012e28 <find_volume+0x408>
 8012e24:	230d      	movs	r3, #13
 8012e26:	e149      	b.n	80130bc <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e2a:	789b      	ldrb	r3, [r3, #2]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012e30:	fb02 f303 	mul.w	r3, r2, r3
 8012e34:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e38:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e44:	895b      	ldrh	r3, [r3, #10]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d008      	beq.n	8012e5c <find_volume+0x43c>
 8012e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e4c:	895b      	ldrh	r3, [r3, #10]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e52:	895b      	ldrh	r3, [r3, #10]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	4013      	ands	r3, r2
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <find_volume+0x440>
 8012e5c:	230d      	movs	r3, #13
 8012e5e:	e12d      	b.n	80130bc <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e62:	333c      	adds	r3, #60	@ 0x3c
 8012e64:	3311      	adds	r3, #17
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fc ff20 	bl	800fcac <ld_word>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	461a      	mov	r2, r3
 8012e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	f003 030f 	and.w	r3, r3, #15
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <find_volume+0x466>
 8012e82:	230d      	movs	r3, #13
 8012e84:	e11a      	b.n	80130bc <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e88:	333c      	adds	r3, #60	@ 0x3c
 8012e8a:	3313      	adds	r3, #19
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fc ff0d 	bl	800fcac <ld_word>
 8012e92:	4603      	mov	r3, r0
 8012e94:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d106      	bne.n	8012eaa <find_volume+0x48a>
 8012e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e9e:	333c      	adds	r3, #60	@ 0x3c
 8012ea0:	3320      	adds	r3, #32
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fc ff1b 	bl	800fcde <ld_dword>
 8012ea8:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eac:	333c      	adds	r3, #60	@ 0x3c
 8012eae:	330e      	adds	r3, #14
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fc fefb 	bl	800fcac <ld_word>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d101      	bne.n	8012ec8 <find_volume+0x4a8>
 8012ec4:	230d      	movs	r3, #13
 8012ec6:	e0f9      	b.n	80130bc <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012ec8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ece:	4413      	add	r3, r2
 8012ed0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ed2:	8912      	ldrh	r2, [r2, #8]
 8012ed4:	0912      	lsrs	r2, r2, #4
 8012ed6:	b292      	uxth	r2, r2
 8012ed8:	4413      	add	r3, r2
 8012eda:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012edc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d201      	bcs.n	8012ee8 <find_volume+0x4c8>
 8012ee4:	230d      	movs	r3, #13
 8012ee6:	e0e9      	b.n	80130bc <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012ee8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ef0:	8952      	ldrh	r2, [r2, #10]
 8012ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d101      	bne.n	8012f02 <find_volume+0x4e2>
 8012efe:	230d      	movs	r3, #13
 8012f00:	e0dc      	b.n	80130bc <find_volume+0x69c>
		fmt = FS_FAT32;
 8012f02:	2303      	movs	r3, #3
 8012f04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f0a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d802      	bhi.n	8012f18 <find_volume+0x4f8>
 8012f12:	2302      	movs	r3, #2
 8012f14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f1a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d802      	bhi.n	8012f28 <find_volume+0x508>
 8012f22:	2301      	movs	r3, #1
 8012f24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f2a:	1c9a      	adds	r2, r3, #2
 8012f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f2e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8012f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012f34:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012f36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012f3c:	441a      	add	r2, r3
 8012f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f40:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8012f42:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f46:	441a      	add	r2, r3
 8012f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f4a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8012f4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012f50:	2b03      	cmp	r3, #3
 8012f52:	d11e      	bne.n	8012f92 <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f56:	333c      	adds	r3, #60	@ 0x3c
 8012f58:	332a      	adds	r3, #42	@ 0x2a
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fc fea6 	bl	800fcac <ld_word>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d001      	beq.n	8012f6a <find_volume+0x54a>
 8012f66:	230d      	movs	r3, #13
 8012f68:	e0a8      	b.n	80130bc <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f6c:	891b      	ldrh	r3, [r3, #8]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <find_volume+0x556>
 8012f72:	230d      	movs	r3, #13
 8012f74:	e0a2      	b.n	80130bc <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f78:	333c      	adds	r3, #60	@ 0x3c
 8012f7a:	332c      	adds	r3, #44	@ 0x2c
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fc feae 	bl	800fcde <ld_dword>
 8012f82:	4602      	mov	r2, r0
 8012f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f86:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f8a:	6a1b      	ldr	r3, [r3, #32]
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f90:	e01f      	b.n	8012fd2 <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f94:	891b      	ldrh	r3, [r3, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d101      	bne.n	8012f9e <find_volume+0x57e>
 8012f9a:	230d      	movs	r3, #13
 8012f9c:	e08e      	b.n	80130bc <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012fa4:	441a      	add	r2, r3
 8012fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fa8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012faa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d103      	bne.n	8012fba <find_volume+0x59a>
 8012fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	e00a      	b.n	8012fd0 <find_volume+0x5b0>
 8012fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	085a      	lsrs	r2, r3, #1
 8012fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fc8:	6a1b      	ldr	r3, [r3, #32]
 8012fca:	f003 0301 	and.w	r3, r3, #1
 8012fce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fd8:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8012fdc:	0a5b      	lsrs	r3, r3, #9
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d201      	bcs.n	8012fe6 <find_volume+0x5c6>
 8012fe2:	230d      	movs	r3, #13
 8012fe4:	e06a      	b.n	80130bc <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8012fec:	61da      	str	r2, [r3, #28]
 8012fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ff0:	69da      	ldr	r2, [r3, #28]
 8012ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ff4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8012ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ff8:	2280      	movs	r2, #128	@ 0x80
 8012ffa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012ffc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013000:	2b03      	cmp	r3, #3
 8013002:	d149      	bne.n	8013098 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013006:	333c      	adds	r3, #60	@ 0x3c
 8013008:	3330      	adds	r3, #48	@ 0x30
 801300a:	4618      	mov	r0, r3
 801300c:	f7fc fe4e 	bl	800fcac <ld_word>
 8013010:	4603      	mov	r3, r0
 8013012:	2b01      	cmp	r3, #1
 8013014:	d140      	bne.n	8013098 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013018:	3301      	adds	r3, #1
 801301a:	4619      	mov	r1, r3
 801301c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801301e:	f7fd fa4f 	bl	80104c0 <move_window>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d137      	bne.n	8013098 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 8013028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801302a:	2200      	movs	r2, #0
 801302c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801302e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013030:	333c      	adds	r3, #60	@ 0x3c
 8013032:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013036:	4618      	mov	r0, r3
 8013038:	f7fc fe38 	bl	800fcac <ld_word>
 801303c:	4603      	mov	r3, r0
 801303e:	461a      	mov	r2, r3
 8013040:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013044:	429a      	cmp	r2, r3
 8013046:	d127      	bne.n	8013098 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801304a:	333c      	adds	r3, #60	@ 0x3c
 801304c:	4618      	mov	r0, r3
 801304e:	f7fc fe46 	bl	800fcde <ld_dword>
 8013052:	4603      	mov	r3, r0
 8013054:	4a1c      	ldr	r2, [pc, #112]	@ (80130c8 <find_volume+0x6a8>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d11e      	bne.n	8013098 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801305a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801305c:	333c      	adds	r3, #60	@ 0x3c
 801305e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013062:	4618      	mov	r0, r3
 8013064:	f7fc fe3b 	bl	800fcde <ld_dword>
 8013068:	4603      	mov	r3, r0
 801306a:	4a18      	ldr	r2, [pc, #96]	@ (80130cc <find_volume+0x6ac>)
 801306c:	4293      	cmp	r3, r2
 801306e:	d113      	bne.n	8013098 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013072:	333c      	adds	r3, #60	@ 0x3c
 8013074:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013078:	4618      	mov	r0, r3
 801307a:	f7fc fe30 	bl	800fcde <ld_dword>
 801307e:	4602      	mov	r2, r0
 8013080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013082:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013086:	333c      	adds	r3, #60	@ 0x3c
 8013088:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801308c:	4618      	mov	r0, r3
 801308e:	f7fc fe26 	bl	800fcde <ld_dword>
 8013092:	4602      	mov	r2, r0
 8013094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013096:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801309a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 801309e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80130a0:	4b0b      	ldr	r3, [pc, #44]	@ (80130d0 <find_volume+0x6b0>)
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	3301      	adds	r3, #1
 80130a6:	b29a      	uxth	r2, r3
 80130a8:	4b09      	ldr	r3, [pc, #36]	@ (80130d0 <find_volume+0x6b0>)
 80130aa:	801a      	strh	r2, [r3, #0]
 80130ac:	4b08      	ldr	r3, [pc, #32]	@ (80130d0 <find_volume+0x6b0>)
 80130ae:	881a      	ldrh	r2, [r3, #0]
 80130b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80130b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80130b6:	f7fd f99b 	bl	80103f0 <clear_lock>
#endif
	return FR_OK;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3770      	adds	r7, #112	@ 0x70
 80130c0:	46bd      	mov	sp, r7
 80130c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130c6:	bf00      	nop
 80130c8:	41615252 	.word	0x41615252
 80130cc:	61417272 	.word	0x61417272
 80130d0:	24001bcc 	.word	0x24001bcc

080130d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80130de:	2309      	movs	r3, #9
 80130e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d02e      	beq.n	8013146 <validate+0x72>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d02a      	beq.n	8013146 <validate+0x72>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d025      	beq.n	8013146 <validate+0x72>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	889a      	ldrh	r2, [r3, #4]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	88db      	ldrh	r3, [r3, #6]
 8013104:	429a      	cmp	r2, r3
 8013106:	d11e      	bne.n	8013146 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4618      	mov	r0, r3
 801310e:	f7fd f831 	bl	8010174 <lock_fs>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d014      	beq.n	8013142 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	785b      	ldrb	r3, [r3, #1]
 801311e:	4618      	mov	r0, r3
 8013120:	f7fc fd24 	bl	800fb6c <disk_status>
 8013124:	4603      	mov	r3, r0
 8013126:	f003 0301 	and.w	r3, r3, #1
 801312a:	2b00      	cmp	r3, #0
 801312c:	d102      	bne.n	8013134 <validate+0x60>
				res = FR_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	73fb      	strb	r3, [r7, #15]
 8013132:	e008      	b.n	8013146 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2100      	movs	r1, #0
 801313a:	4618      	mov	r0, r3
 801313c:	f7fd f830 	bl	80101a0 <unlock_fs>
 8013140:	e001      	b.n	8013146 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013142:	230f      	movs	r3, #15
 8013144:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d102      	bne.n	8013152 <validate+0x7e>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	e000      	b.n	8013154 <validate+0x80>
 8013152:	2300      	movs	r3, #0
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	6013      	str	r3, [r2, #0]
	return res;
 8013158:	7bfb      	ldrb	r3, [r7, #15]
}
 801315a:	4618      	mov	r0, r3
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
	...

08013164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b088      	sub	sp, #32
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	4613      	mov	r3, r2
 8013170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013176:	f107 0310 	add.w	r3, r7, #16
 801317a:	4618      	mov	r0, r3
 801317c:	f7ff fba7 	bl	80128ce <get_ldnumber>
 8013180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	2b00      	cmp	r3, #0
 8013186:	da01      	bge.n	801318c <f_mount+0x28>
 8013188:	230b      	movs	r3, #11
 801318a:	e048      	b.n	801321e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801318c:	4a26      	ldr	r2, [pc, #152]	@ (8013228 <f_mount+0xc4>)
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00f      	beq.n	80131bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801319c:	69b8      	ldr	r0, [r7, #24]
 801319e:	f7fd f927 	bl	80103f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f002 f86b 	bl	8015282 <ff_del_syncobj>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <f_mount+0x52>
 80131b2:	2302      	movs	r3, #2
 80131b4:	e033      	b.n	801321e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	2200      	movs	r2, #0
 80131ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00f      	beq.n	80131e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	3314      	adds	r3, #20
 80131d0:	4619      	mov	r1, r3
 80131d2:	4610      	mov	r0, r2
 80131d4:	f002 f83a 	bl	801524c <ff_cre_syncobj>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d101      	bne.n	80131e2 <f_mount+0x7e>
 80131de:	2302      	movs	r3, #2
 80131e0:	e01d      	b.n	801321e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80131e2:	68fa      	ldr	r2, [r7, #12]
 80131e4:	4910      	ldr	r1, [pc, #64]	@ (8013228 <f_mount+0xc4>)
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <f_mount+0x94>
 80131f2:	79fb      	ldrb	r3, [r7, #7]
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d001      	beq.n	80131fc <f_mount+0x98>
 80131f8:	2300      	movs	r3, #0
 80131fa:	e010      	b.n	801321e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80131fc:	f107 010c 	add.w	r1, r7, #12
 8013200:	f107 0308 	add.w	r3, r7, #8
 8013204:	2200      	movs	r2, #0
 8013206:	4618      	mov	r0, r3
 8013208:	f7ff fc0a 	bl	8012a20 <find_volume>
 801320c:	4603      	mov	r3, r0
 801320e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	7dfa      	ldrb	r2, [r7, #23]
 8013214:	4611      	mov	r1, r2
 8013216:	4618      	mov	r0, r3
 8013218:	f7fc ffc2 	bl	80101a0 <unlock_fs>
 801321c:	7dfb      	ldrb	r3, [r7, #23]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	24001bc8 	.word	0x24001bc8

0801322c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013230:	b0a8      	sub	sp, #160	@ 0xa0
 8013232:	af00      	add	r7, sp, #0
 8013234:	61f8      	str	r0, [r7, #28]
 8013236:	61b9      	str	r1, [r7, #24]
 8013238:	4613      	mov	r3, r2
 801323a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <f_open+0x1a>
 8013242:	2309      	movs	r3, #9
 8013244:	e2d3      	b.n	80137ee <f_open+0x5c2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013246:	7dfb      	ldrb	r3, [r7, #23]
 8013248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801324c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 801324e:	7dfa      	ldrb	r2, [r7, #23]
 8013250:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8013254:	f107 0318 	add.w	r3, r7, #24
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff fbe1 	bl	8012a20 <find_volume>
 801325e:	4603      	mov	r3, r0
 8013260:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 8013264:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013268:	2b00      	cmp	r3, #0
 801326a:	f040 82b0 	bne.w	80137ce <f_open+0x5a2>
		dj.obj.fs = fs;
 801326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013270:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 8013272:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 8013276:	f002 f830 	bl	80152da <ff_memalloc>
 801327a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 801327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <f_open+0x68>
 8013286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013288:	2111      	movs	r1, #17
 801328a:	4618      	mov	r0, r3
 801328c:	f7fc ff88 	bl	80101a0 <unlock_fs>
 8013290:	2311      	movs	r3, #17
 8013292:	e2ac      	b.n	80137ee <f_open+0x5c2>
 8013294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013296:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801329a:	60da      	str	r2, [r3, #12]
 801329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80132a2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80132a6:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80132a8:	69ba      	ldr	r2, [r7, #24]
 80132aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80132ae:	4611      	mov	r1, r2
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7ff fa63 	bl	801277c <follow_path>
 80132b6:	4603      	mov	r3, r0
 80132b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80132bc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d118      	bne.n	80132f6 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80132c4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80132c8:	b25b      	sxtb	r3, r3
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	da03      	bge.n	80132d6 <f_open+0xaa>
				res = FR_INVALID_NAME;
 80132ce:	2306      	movs	r3, #6
 80132d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80132d4:	e00f      	b.n	80132f6 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132d6:	7dfb      	ldrb	r3, [r7, #23]
 80132d8:	2b01      	cmp	r3, #1
 80132da:	bf8c      	ite	hi
 80132dc:	2301      	movhi	r3, #1
 80132de:	2300      	movls	r3, #0
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	461a      	mov	r2, r3
 80132e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80132e8:	4611      	mov	r1, r2
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fc ff74 	bl	80101d8 <chk_lock>
 80132f0:	4603      	mov	r3, r0
 80132f2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80132f6:	7dfb      	ldrb	r3, [r7, #23]
 80132f8:	f003 031c 	and.w	r3, r3, #28
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 8115 	beq.w	801352c <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 8013302:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013306:	2b00      	cmp	r3, #0
 8013308:	d017      	beq.n	801333a <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801330a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801330e:	2b04      	cmp	r3, #4
 8013310:	d10e      	bne.n	8013330 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013312:	f7fc ffbd 	bl	8010290 <enq_lock>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d006      	beq.n	801332a <f_open+0xfe>
 801331c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013320:	4618      	mov	r0, r3
 8013322:	f7fe fecd 	bl	80120c0 <dir_register>
 8013326:	4603      	mov	r3, r0
 8013328:	e000      	b.n	801332c <f_open+0x100>
 801332a:	2312      	movs	r3, #18
 801332c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013330:	7dfb      	ldrb	r3, [r7, #23]
 8013332:	f043 0308 	orr.w	r3, r3, #8
 8013336:	75fb      	strb	r3, [r7, #23]
 8013338:	e011      	b.n	801335e <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801333a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801333e:	f003 0311 	and.w	r3, r3, #17
 8013342:	2b00      	cmp	r3, #0
 8013344:	d003      	beq.n	801334e <f_open+0x122>
					res = FR_DENIED;
 8013346:	2307      	movs	r3, #7
 8013348:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801334c:	e007      	b.n	801335e <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801334e:	7dfb      	ldrb	r3, [r7, #23]
 8013350:	f003 0304 	and.w	r3, r3, #4
 8013354:	2b00      	cmp	r3, #0
 8013356:	d002      	beq.n	801335e <f_open+0x132>
 8013358:	2308      	movs	r3, #8
 801335a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801335e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013362:	2b00      	cmp	r3, #0
 8013364:	f040 80fe 	bne.w	8013564 <f_open+0x338>
 8013368:	7dfb      	ldrb	r3, [r7, #23]
 801336a:	f003 0308 	and.w	r3, r3, #8
 801336e:	2b00      	cmp	r3, #0
 8013370:	f000 80f8 	beq.w	8013564 <f_open+0x338>
				dw = GET_FATTIME();
 8013374:	f7fc f9a4 	bl	800f6c0 <get_fattime>
 8013378:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	2b04      	cmp	r3, #4
 8013382:	f040 8084 	bne.w	801348e <f_open+0x262>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8013386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801338e:	691b      	ldr	r3, [r3, #16]
 8013390:	3334      	adds	r3, #52	@ 0x34
 8013392:	4618      	mov	r0, r3
 8013394:	f7fc fca3 	bl	800fcde <ld_dword>
 8013398:	4602      	mov	r2, r0
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a0:	691b      	ldr	r3, [r3, #16]
 80133a2:	3338      	adds	r3, #56	@ 0x38
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fc fcbd 	bl	800fd24 <ld_qword>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	69f9      	ldr	r1, [r7, #28]
 80133b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80133b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133b6:	691b      	ldr	r3, [r3, #16]
 80133b8:	3321      	adds	r3, #33	@ 0x21
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	f003 0302 	and.w	r3, r3, #2
 80133c0:	b2da      	uxtb	r2, r3
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	2200      	movs	r2, #0
 80133ca:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80133cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	3308      	adds	r3, #8
 80133d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fc fd9a 	bl	800ff10 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80133dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133de:	691b      	ldr	r3, [r3, #16]
 80133e0:	3314      	adds	r3, #20
 80133e2:	2200      	movs	r2, #0
 80133e4:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80133e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	330c      	adds	r3, #12
 80133ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fc fd8d 	bl	800ff10 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80133f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	3315      	adds	r3, #21
 80133fc:	2200      	movs	r2, #0
 80133fe:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8013400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	3304      	adds	r3, #4
 8013406:	2220      	movs	r2, #32
 8013408:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 801340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	3334      	adds	r3, #52	@ 0x34
 8013410:	2100      	movs	r1, #0
 8013412:	4618      	mov	r0, r3
 8013414:	f7fc fd7c 	bl	800ff10 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8013418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013420:	f04f 0200 	mov.w	r2, #0
 8013424:	f04f 0300 	mov.w	r3, #0
 8013428:	4608      	mov	r0, r1
 801342a:	f7fc fd9d 	bl	800ff68 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8013436:	f04f 0200 	mov.w	r2, #0
 801343a:	f04f 0300 	mov.w	r3, #0
 801343e:	4608      	mov	r0, r1
 8013440:	f7fc fd92 	bl	800ff68 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8013444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	3321      	adds	r3, #33	@ 0x21
 801344a:	2201      	movs	r2, #1
 801344c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801344e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe fb80 	bl	8011b58 <store_xdir>
 8013458:	4603      	mov	r3, r0
 801345a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 801345e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013462:	2b00      	cmp	r3, #0
 8013464:	d17e      	bne.n	8013564 <f_open+0x338>
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d07a      	beq.n	8013564 <f_open+0x338>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801346e:	69f8      	ldr	r0, [r7, #28]
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	2200      	movs	r2, #0
 8013476:	4619      	mov	r1, r3
 8013478:	f7fd fc2c 	bl	8010cd4 <remove_chain>
 801347c:	4603      	mov	r3, r0
 801347e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	689a      	ldr	r2, [r3, #8]
 8013486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013488:	3a01      	subs	r2, #1
 801348a:	619a      	str	r2, [r3, #24]
 801348c:	e06a      	b.n	8013564 <f_open+0x338>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801348e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013490:	330e      	adds	r3, #14
 8013492:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013496:	4618      	mov	r0, r3
 8013498:	f7fc fd3a 	bl	800ff10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801349c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801349e:	3316      	adds	r3, #22
 80134a0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7fc fd33 	bl	800ff10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80134aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134ac:	330b      	adds	r3, #11
 80134ae:	2220      	movs	r2, #32
 80134b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80134b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80134b6:	4611      	mov	r1, r2
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fd ffbb 	bl	8011434 <ld_clust>
 80134be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80134c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80134c6:	2200      	movs	r2, #0
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fd ffd2 	bl	8011472 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80134ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134d0:	331c      	adds	r3, #28
 80134d2:	2100      	movs	r1, #0
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fc fd1b 	bl	800ff10 <st_dword>
					fs->wflag = 1;
 80134da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134dc:	2201      	movs	r2, #1
 80134de:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80134e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d03d      	beq.n	8013564 <f_open+0x338>
						dw = fs->winsect;
 80134e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 80134f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80134f4:	2200      	movs	r2, #0
 80134f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fd fbea 	bl	8010cd4 <remove_chain>
 8013500:	4603      	mov	r3, r0
 8013502:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 8013506:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801350a:	2b00      	cmp	r3, #0
 801350c:	d12a      	bne.n	8013564 <f_open+0x338>
							res = move_window(fs, dw);
 801350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013510:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013514:	4618      	mov	r0, r3
 8013516:	f7fc ffd3 	bl	80104c0 <move_window>
 801351a:	4603      	mov	r3, r0
 801351c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013522:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013526:	3a01      	subs	r2, #1
 8013528:	619a      	str	r2, [r3, #24]
 801352a:	e01b      	b.n	8013564 <f_open+0x338>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801352c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013530:	2b00      	cmp	r3, #0
 8013532:	d117      	bne.n	8013564 <f_open+0x338>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013534:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013538:	f003 0310 	and.w	r3, r3, #16
 801353c:	2b00      	cmp	r3, #0
 801353e:	d003      	beq.n	8013548 <f_open+0x31c>
					res = FR_NO_FILE;
 8013540:	2304      	movs	r3, #4
 8013542:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013546:	e00d      	b.n	8013564 <f_open+0x338>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013548:	7dfb      	ldrb	r3, [r7, #23]
 801354a:	f003 0302 	and.w	r3, r3, #2
 801354e:	2b00      	cmp	r3, #0
 8013550:	d008      	beq.n	8013564 <f_open+0x338>
 8013552:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013556:	f003 0301 	and.w	r3, r3, #1
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <f_open+0x338>
						res = FR_DENIED;
 801355e:	2307      	movs	r3, #7
 8013560:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013564:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013568:	2b00      	cmp	r3, #0
 801356a:	d126      	bne.n	80135ba <f_open+0x38e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801356c:	7dfb      	ldrb	r3, [r7, #23]
 801356e:	f003 0308 	and.w	r3, r3, #8
 8013572:	2b00      	cmp	r3, #0
 8013574:	d003      	beq.n	801357e <f_open+0x352>
				mode |= FA_MODIFIED;
 8013576:	7dfb      	ldrb	r3, [r7, #23]
 8013578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801357c:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013582:	69fb      	ldr	r3, [r7, #28]
 8013584:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8013586:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801358c:	7dfb      	ldrb	r3, [r7, #23]
 801358e:	2b01      	cmp	r3, #1
 8013590:	bf8c      	ite	hi
 8013592:	2301      	movhi	r3, #1
 8013594:	2300      	movls	r3, #0
 8013596:	b2db      	uxtb	r3, r3
 8013598:	461a      	mov	r2, r3
 801359a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801359e:	4611      	mov	r1, r2
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fc fe97 	bl	80102d4 <inc_lock>
 80135a6:	4602      	mov	r2, r0
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <f_open+0x38e>
 80135b4:	2302      	movs	r3, #2
 80135b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80135ba:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f040 8101 	bne.w	80137c6 <f_open+0x59a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80135c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	2b04      	cmp	r3, #4
 80135ca:	d12d      	bne.n	8013628 <f_open+0x3fc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80135cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80135d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80135d6:	4613      	mov	r3, r2
 80135d8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80135dc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80135e0:	431a      	orrs	r2, r3
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80135e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80135ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ee:	691b      	ldr	r3, [r3, #16]
 80135f0:	3334      	adds	r3, #52	@ 0x34
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fc fb73 	bl	800fcde <ld_dword>
 80135f8:	4602      	mov	r2, r0
 80135fa:	69fb      	ldr	r3, [r7, #28]
 80135fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80135fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013600:	691b      	ldr	r3, [r3, #16]
 8013602:	3338      	adds	r3, #56	@ 0x38
 8013604:	4618      	mov	r0, r3
 8013606:	f7fc fb8d 	bl	800fd24 <ld_qword>
 801360a:	4602      	mov	r2, r0
 801360c:	460b      	mov	r3, r1
 801360e:	69f9      	ldr	r1, [r7, #28]
 8013610:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013616:	691b      	ldr	r3, [r3, #16]
 8013618:	3321      	adds	r3, #33	@ 0x21
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f003 0302 	and.w	r3, r3, #2
 8013620:	b2da      	uxtb	r2, r3
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	71da      	strb	r2, [r3, #7]
 8013626:	e016      	b.n	8013656 <f_open+0x42a>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f7fd ff00 	bl	8011434 <ld_clust>
 8013634:	4602      	mov	r2, r0
 8013636:	69fb      	ldr	r3, [r7, #28]
 8013638:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801363a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801363c:	331c      	adds	r3, #28
 801363e:	4618      	mov	r0, r3
 8013640:	f7fc fb4d 	bl	800fcde <ld_dword>
 8013644:	4603      	mov	r3, r0
 8013646:	2200      	movs	r2, #0
 8013648:	60bb      	str	r3, [r7, #8]
 801364a:	60fa      	str	r2, [r7, #12]
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013652:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	2200      	movs	r2, #0
 801365a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	88da      	ldrh	r2, [r3, #6]
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	7dfa      	ldrb	r2, [r7, #23]
 801366e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	2200      	movs	r2, #0
 8013676:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	2200      	movs	r2, #0
 801367e:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013680:	69f9      	ldr	r1, [r7, #28]
 8013682:	f04f 0200 	mov.w	r2, #0
 8013686:	f04f 0300 	mov.w	r3, #0
 801368a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801368e:	69fb      	ldr	r3, [r7, #28]
 8013690:	3354      	adds	r3, #84	@ 0x54
 8013692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013696:	2100      	movs	r1, #0
 8013698:	4618      	mov	r0, r3
 801369a:	f7fc fd0e 	bl	80100ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801369e:	7dfb      	ldrb	r3, [r7, #23]
 80136a0:	f003 0320 	and.w	r3, r3, #32
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f000 808e 	beq.w	80137c6 <f_open+0x59a>
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80136b0:	4313      	orrs	r3, r2
 80136b2:	f000 8088 	beq.w	80137c6 <f_open+0x59a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80136bc:	69f9      	ldr	r1, [r7, #28]
 80136be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80136c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c4:	895b      	ldrh	r3, [r3, #10]
 80136c6:	025b      	lsls	r3, r3, #9
 80136c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80136da:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80136de:	e027      	b.n	8013730 <f_open+0x504>
					clst = get_fat(&fp->obj, clst);
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fc ffa6 	bl	8010638 <get_fat>
 80136ec:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 80136f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d802      	bhi.n	80136fe <f_open+0x4d2>
 80136f8:	2302      	movs	r3, #2
 80136fa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80136fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013706:	d102      	bne.n	801370e <f_open+0x4e2>
 8013708:	2301      	movs	r3, #1
 801370a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801370e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013712:	2200      	movs	r2, #0
 8013714:	469a      	mov	sl, r3
 8013716:	4693      	mov	fp, r2
 8013718:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801371c:	ebb2 010a 	subs.w	r1, r2, sl
 8013720:	6039      	str	r1, [r7, #0]
 8013722:	eb63 030b 	sbc.w	r3, r3, fp
 8013726:	607b      	str	r3, [r7, #4]
 8013728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801372c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8013730:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <f_open+0x522>
 8013738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801373c:	2200      	movs	r2, #0
 801373e:	4698      	mov	r8, r3
 8013740:	4691      	mov	r9, r2
 8013742:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8013746:	4590      	cmp	r8, r2
 8013748:	eb79 0303 	sbcs.w	r3, r9, r3
 801374c:	d3c8      	bcc.n	80136e0 <f_open+0x4b4>
				}
				fp->clust = clst;
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013754:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013756:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801375a:	2b00      	cmp	r3, #0
 801375c:	d133      	bne.n	80137c6 <f_open+0x59a>
 801375e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8013762:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8013766:	2500      	movs	r5, #0
 8013768:	ea54 0305 	orrs.w	r3, r4, r5
 801376c:	d02b      	beq.n	80137c6 <f_open+0x59a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013770:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8013774:	4618      	mov	r0, r3
 8013776:	f7fc ff3f 	bl	80105f8 <clust2sect>
 801377a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801377c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801377e:	2b00      	cmp	r3, #0
 8013780:	d103      	bne.n	801378a <f_open+0x55e>
						res = FR_INT_ERR;
 8013782:	2302      	movs	r3, #2
 8013784:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013788:	e01d      	b.n	80137c6 <f_open+0x59a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801378a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 801378e:	f04f 0200 	mov.w	r2, #0
 8013792:	f04f 0300 	mov.w	r3, #0
 8013796:	0a42      	lsrs	r2, r0, #9
 8013798:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801379c:	0a4b      	lsrs	r3, r1, #9
 801379e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80137a0:	441a      	add	r2, r3
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80137a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a8:	7858      	ldrb	r0, [r3, #1]
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80137b4:	2301      	movs	r3, #1
 80137b6:	f7fc fa1b 	bl	800fbf0 <disk_read>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d002      	beq.n	80137c6 <f_open+0x59a>
 80137c0:	2301      	movs	r3, #1
 80137c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 80137c6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80137ca:	f001 fd92 	bl	80152f2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137ce:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d002      	beq.n	80137dc <f_open+0x5b0>
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	2200      	movs	r2, #0
 80137da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137de:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80137e2:	4611      	mov	r1, r2
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fc fcdb 	bl	80101a0 <unlock_fs>
 80137ea:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	37a0      	adds	r7, #160	@ 0xa0
 80137f2:	46bd      	mov	sp, r7
 80137f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080137f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	b08d      	sub	sp, #52	@ 0x34
 80137fe:	af00      	add	r7, sp, #0
 8013800:	60f8      	str	r0, [r7, #12]
 8013802:	60b9      	str	r1, [r7, #8]
 8013804:	607a      	str	r2, [r7, #4]
 8013806:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2200      	movs	r2, #0
 8013810:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f107 0210 	add.w	r2, r7, #16
 8013818:	4611      	mov	r1, r2
 801381a:	4618      	mov	r0, r3
 801381c:	f7ff fc5a 	bl	80130d4 <validate>
 8013820:	4603      	mov	r3, r0
 8013822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801382a:	2b00      	cmp	r3, #0
 801382c:	d108      	bne.n	8013840 <f_write+0x48>
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801383c:	2b00      	cmp	r3, #0
 801383e:	d009      	beq.n	8013854 <f_write+0x5c>
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013846:	4611      	mov	r1, r2
 8013848:	4618      	mov	r0, r3
 801384a:	f7fc fca9 	bl	80101a0 <unlock_fs>
 801384e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013852:	e1af      	b.n	8013bb4 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801385a:	f003 0302 	and.w	r3, r3, #2
 801385e:	2b00      	cmp	r3, #0
 8013860:	d106      	bne.n	8013870 <f_write+0x78>
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	2107      	movs	r1, #7
 8013866:	4618      	mov	r0, r3
 8013868:	f7fc fc9a 	bl	80101a0 <unlock_fs>
 801386c:	2307      	movs	r3, #7
 801386e:	e1a1      	b.n	8013bb4 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b04      	cmp	r3, #4
 8013876:	f000 8188 	beq.w	8013b8a <f_write+0x392>
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	18d1      	adds	r1, r2, r3
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801388a:	4613      	mov	r3, r2
 801388c:	4299      	cmp	r1, r3
 801388e:	f080 817c 	bcs.w	8013b8a <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013898:	4613      	mov	r3, r2
 801389a:	43db      	mvns	r3, r3
 801389c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801389e:	e174      	b.n	8013b8a <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80138a6:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80138aa:	2500      	movs	r5, #0
 80138ac:	ea54 0305 	orrs.w	r3, r4, r5
 80138b0:	f040 8119 	bne.w	8013ae6 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80138ba:	f04f 0200 	mov.w	r2, #0
 80138be:	f04f 0300 	mov.w	r3, #0
 80138c2:	0a42      	lsrs	r2, r0, #9
 80138c4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80138c8:	0a4b      	lsrs	r3, r1, #9
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	895b      	ldrh	r3, [r3, #10]
 80138ce:	3b01      	subs	r3, #1
 80138d0:	4013      	ands	r3, r2
 80138d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d150      	bne.n	801397c <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80138e0:	4313      	orrs	r3, r2
 80138e2:	d10c      	bne.n	80138fe <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	689b      	ldr	r3, [r3, #8]
 80138e8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80138ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d11a      	bne.n	8013926 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2100      	movs	r1, #0
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7fd faa1 	bl	8010e3c <create_chain>
 80138fa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80138fc:	e013      	b.n	8013926 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013902:	2b00      	cmp	r3, #0
 8013904:	d007      	beq.n	8013916 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7fd fb96 	bl	801103e <clmt_clust>
 8013912:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013914:	e007      	b.n	8013926 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801391c:	4619      	mov	r1, r3
 801391e:	4610      	mov	r0, r2
 8013920:	f7fd fa8c 	bl	8010e3c <create_chain>
 8013924:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013928:	2b00      	cmp	r3, #0
 801392a:	f000 8133 	beq.w	8013b94 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013930:	2b01      	cmp	r3, #1
 8013932:	d10a      	bne.n	801394a <f_write+0x152>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2202      	movs	r2, #2
 8013938:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	2102      	movs	r1, #2
 8013940:	4618      	mov	r0, r3
 8013942:	f7fc fc2d 	bl	80101a0 <unlock_fs>
 8013946:	2302      	movs	r3, #2
 8013948:	e134      	b.n	8013bb4 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013950:	d10a      	bne.n	8013968 <f_write+0x170>
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2201      	movs	r2, #1
 8013956:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2101      	movs	r1, #1
 801395e:	4618      	mov	r0, r3
 8013960:	f7fc fc1e 	bl	80101a0 <unlock_fs>
 8013964:	2301      	movs	r3, #1
 8013966:	e125      	b.n	8013bb4 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801396c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d102      	bne.n	801397c <f_write+0x184>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801397a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013982:	b25b      	sxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	da20      	bge.n	80139ca <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	7858      	ldrb	r0, [r3, #1]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013996:	2301      	movs	r3, #1
 8013998:	f7fc f94a 	bl	800fc30 <disk_write>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00a      	beq.n	80139b8 <f_write+0x1c0>
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2201      	movs	r2, #1
 80139a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	2101      	movs	r1, #1
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fc fbf6 	bl	80101a0 <unlock_fs>
 80139b4:	2301      	movs	r3, #1
 80139b6:	e0fd      	b.n	8013bb4 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80139be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139c2:	b2da      	uxtb	r2, r3
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139d0:	4619      	mov	r1, r3
 80139d2:	4610      	mov	r0, r2
 80139d4:	f7fc fe10 	bl	80105f8 <clust2sect>
 80139d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d10a      	bne.n	80139f6 <f_write+0x1fe>
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2202      	movs	r2, #2
 80139e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	2102      	movs	r1, #2
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7fc fbd7 	bl	80101a0 <unlock_fs>
 80139f2:	2302      	movs	r3, #2
 80139f4:	e0de      	b.n	8013bb4 <f_write+0x3bc>
			sect += csect;
 80139f6:	697a      	ldr	r2, [r7, #20]
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	4413      	add	r3, r2
 80139fc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	0a5b      	lsrs	r3, r3, #9
 8013a02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013a04:	6a3b      	ldr	r3, [r7, #32]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d044      	beq.n	8013a94 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013a0a:	69ba      	ldr	r2, [r7, #24]
 8013a0c:	6a3b      	ldr	r3, [r7, #32]
 8013a0e:	4413      	add	r3, r2
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	8952      	ldrh	r2, [r2, #10]
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d905      	bls.n	8013a24 <f_write+0x22c>
					cc = fs->csize - csect;
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	895b      	ldrh	r3, [r3, #10]
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	7858      	ldrb	r0, [r3, #1]
 8013a28:	6a3b      	ldr	r3, [r7, #32]
 8013a2a:	697a      	ldr	r2, [r7, #20]
 8013a2c:	69f9      	ldr	r1, [r7, #28]
 8013a2e:	f7fc f8ff 	bl	800fc30 <disk_write>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d00a      	beq.n	8013a4e <f_write+0x256>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	2101      	movs	r1, #1
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7fc fbab 	bl	80101a0 <unlock_fs>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e0b2      	b.n	8013bb4 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	6a3a      	ldr	r2, [r7, #32]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d917      	bls.n	8013a8c <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	025b      	lsls	r3, r3, #9
 8013a6c:	69fa      	ldr	r2, [r7, #28]
 8013a6e:	4413      	add	r3, r2
 8013a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a74:	4619      	mov	r1, r3
 8013a76:	f7fc faff 	bl	8010078 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a84:	b2da      	uxtb	r2, r3
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013a8c:	6a3b      	ldr	r3, [r7, #32]
 8013a8e:	025b      	lsls	r3, r3, #9
 8013a90:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013a92:	e04f      	b.n	8013b34 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a98:	697a      	ldr	r2, [r7, #20]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d020      	beq.n	8013ae0 <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013aaa:	4290      	cmp	r0, r2
 8013aac:	eb71 0303 	sbcs.w	r3, r1, r3
 8013ab0:	d216      	bcs.n	8013ae0 <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	7858      	ldrb	r0, [r3, #1]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013abc:	2301      	movs	r3, #1
 8013abe:	697a      	ldr	r2, [r7, #20]
 8013ac0:	f7fc f896 	bl	800fbf0 <disk_read>
 8013ac4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00a      	beq.n	8013ae0 <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2201      	movs	r2, #1
 8013ace:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7fc fb62 	bl	80101a0 <unlock_fs>
 8013adc:	2301      	movs	r3, #1
 8013ade:	e069      	b.n	8013bb4 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	697a      	ldr	r2, [r7, #20]
 8013ae4:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013aec:	4613      	mov	r3, r2
 8013aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013af2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013af6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d901      	bls.n	8013b04 <f_write+0x30c>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013b10:	4613      	mov	r3, r2
 8013b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b16:	440b      	add	r3, r1
 8013b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b1a:	69f9      	ldr	r1, [r7, #28]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fc faab 	bl	8010078 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013b2c:	b2da      	uxtb	r2, r3
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013b34:	69fa      	ldr	r2, [r7, #28]
 8013b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b38:	4413      	add	r3, r2
 8013b3a:	61fb      	str	r3, [r7, #28]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b44:	2000      	movs	r0, #0
 8013b46:	4688      	mov	r8, r1
 8013b48:	4681      	mov	r9, r0
 8013b4a:	eb12 0a08 	adds.w	sl, r2, r8
 8013b4e:	eb43 0b09 	adc.w	fp, r3, r9
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013b5e:	68f9      	ldr	r1, [r7, #12]
 8013b60:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8013b64:	4282      	cmp	r2, r0
 8013b66:	eb73 0601 	sbcs.w	r6, r3, r1
 8013b6a:	d201      	bcs.n	8013b70 <f_write+0x378>
 8013b6c:	4602      	mov	r2, r0
 8013b6e:	460b      	mov	r3, r1
 8013b70:	68f9      	ldr	r1, [r7, #12]
 8013b72:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b7c:	441a      	add	r2, r3
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f47f ae87 	bne.w	80138a0 <f_write+0xa8>
 8013b92:	e000      	b.n	8013b96 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b94:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2100      	movs	r1, #0
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7fc faf7 	bl	80101a0 <unlock_fs>
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3734      	adds	r7, #52	@ 0x34
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013bbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013bbe:	b580      	push	{r7, lr}
 8013bc0:	b09c      	sub	sp, #112	@ 0x70
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8013bcc:	4611      	mov	r1, r2
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7ff fa80 	bl	80130d4 <validate>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8013bda:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f040 8123 	bne.w	8013e2a <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f000 811b 	beq.w	8013e2a <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bfa:	b25b      	sxtb	r3, r3
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	da1c      	bge.n	8013c3a <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c02:	7858      	ldrb	r0, [r3, #1]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013c0e:	2301      	movs	r3, #1
 8013c10:	f7fc f80e 	bl	800fc30 <disk_write>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d006      	beq.n	8013c28 <f_sync+0x6a>
 8013c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c1c:	2101      	movs	r1, #1
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fc fabe 	bl	80101a0 <unlock_fs>
 8013c24:	2301      	movs	r3, #1
 8013c26:	e109      	b.n	8013e3c <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c3a:	f7fb fd41 	bl	800f6c0 <get_fattime>
 8013c3e:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	2b04      	cmp	r3, #4
 8013c46:	f040 80a5 	bne.w	8013d94 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fc ffe1 	bl	8010c14 <fill_first_frag>
 8013c52:	4603      	mov	r3, r0
 8013c54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8013c58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d10a      	bne.n	8013c76 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c66:	f04f 32ff 	mov.w	r2, #4294967295
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	f7fd f801 	bl	8010c72 <fill_last_frag>
 8013c70:	4603      	mov	r3, r0
 8013c72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 8013c76:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	f040 80d5 	bne.w	8013e2a <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8013c80:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 8013c84:	f001 fb29 	bl	80152da <ff_memalloc>
 8013c88:	6638      	str	r0, [r7, #96]	@ 0x60
 8013c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d106      	bne.n	8013c9e <f_sync+0xe0>
 8013c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c92:	2111      	movs	r1, #17
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7fc fa83 	bl	80101a0 <unlock_fs>
 8013c9a:	2311      	movs	r3, #17
 8013c9c:	e0ce      	b.n	8013e3c <f_sync+0x27e>
 8013c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013ca2:	60da      	str	r2, [r3, #12]
 8013ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ca6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013ca8:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8013cac:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	f107 0308 	add.w	r3, r7, #8
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fd ff18 	bl	8011aec <load_obj_dir>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 8013cc2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d160      	bne.n	8013d8c <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8013cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ccc:	691b      	ldr	r3, [r3, #16]
 8013cce:	3304      	adds	r3, #4
 8013cd0:	781a      	ldrb	r2, [r3, #0]
 8013cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cd4:	691b      	ldr	r3, [r3, #16]
 8013cd6:	3304      	adds	r3, #4
 8013cd8:	f042 0220 	orr.w	r2, r2, #32
 8013cdc:	b2d2      	uxtb	r2, r2
 8013cde:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	79da      	ldrb	r2, [r3, #7]
 8013ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ce6:	691b      	ldr	r3, [r3, #16]
 8013ce8:	3321      	adds	r3, #33	@ 0x21
 8013cea:	f042 0201 	orr.w	r2, r2, #1
 8013cee:	b2d2      	uxtb	r2, r2
 8013cf0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8013cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cf4:	691b      	ldr	r3, [r3, #16]
 8013cf6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	689b      	ldr	r3, [r3, #8]
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4610      	mov	r0, r2
 8013d02:	f7fc f905 	bl	800ff10 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8013d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d08:	691b      	ldr	r3, [r3, #16]
 8013d0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013d14:	4608      	mov	r0, r1
 8013d16:	f7fc f927 	bl	800ff68 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8013d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d1c:	691b      	ldr	r3, [r3, #16]
 8013d1e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013d28:	4608      	mov	r0, r1
 8013d2a:	f7fc f91d 	bl	800ff68 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8013d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	330c      	adds	r3, #12
 8013d34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fc f8ea 	bl	800ff10 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8013d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d3e:	691b      	ldr	r3, [r3, #16]
 8013d40:	3315      	adds	r3, #21
 8013d42:	2200      	movs	r2, #0
 8013d44:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8013d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d48:	691b      	ldr	r3, [r3, #16]
 8013d4a:	3310      	adds	r3, #16
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fc f8de 	bl	800ff10 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8013d54:	f107 0308 	add.w	r3, r7, #8
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fd fefd 	bl	8011b58 <store_xdir>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8013d64:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10f      	bne.n	8013d8c <f_sync+0x1ce>
							res = sync_fs(fs);
 8013d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fc fbd4 	bl	801051c <sync_fs>
 8013d74:	4603      	mov	r3, r0
 8013d76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d84:	b2da      	uxtb	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 8013d8c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013d8e:	f001 fab0 	bl	80152f2 <ff_memfree>
 8013d92:	e04a      	b.n	8013e2a <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	4610      	mov	r0, r2
 8013d9e:	f7fc fb8f 	bl	80104c0 <move_window>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8013da8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d13c      	bne.n	8013e2a <f_sync+0x26c>
					dir = fp->dir_ptr;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013db4:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013db8:	330b      	adds	r3, #11
 8013dba:	781a      	ldrb	r2, [r3, #0]
 8013dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013dbe:	330b      	adds	r3, #11
 8013dc0:	f042 0220 	orr.w	r2, r2, #32
 8013dc4:	b2d2      	uxtb	r2, r2
 8013dc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6818      	ldr	r0, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	689b      	ldr	r3, [r3, #8]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013dd4:	f7fd fb4d 	bl	8011472 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013dda:	f103 001c 	add.w	r0, r3, #28
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013de4:	4613      	mov	r3, r2
 8013de6:	4619      	mov	r1, r3
 8013de8:	f7fc f892 	bl	800ff10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013dee:	3316      	adds	r3, #22
 8013df0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7fc f88c 	bl	800ff10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013dfa:	3312      	adds	r3, #18
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fc f86b 	bl	800feda <st_word>
					fs->wflag = 1;
 8013e04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e06:	2201      	movs	r2, #1
 8013e08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7fc fb85 	bl	801051c <sync_fs>
 8013e12:	4603      	mov	r3, r0
 8013e14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e22:	b2da      	uxtb	r2, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e2c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8013e30:	4611      	mov	r1, r2
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7fc f9b4 	bl	80101a0 <unlock_fs>
 8013e38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3770      	adds	r7, #112	@ 0x70
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8013e44:	b590      	push	{r4, r7, lr}
 8013e46:	b0a9      	sub	sp, #164	@ 0xa4
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	607a      	str	r2, [r7, #4]
 8013e4e:	603b      	str	r3, [r7, #0]
 8013e50:	460b      	mov	r3, r1
 8013e52:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8013e54:	2301      	movs	r3, #1
 8013e56:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8013e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013e5c:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8013e5e:	f107 030c 	add.w	r3, r7, #12
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe fd33 	bl	80128ce <get_ldnumber>
 8013e68:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	da02      	bge.n	8013e76 <f_mkfs+0x32>
 8013e70:	230b      	movs	r3, #11
 8013e72:	f001 b8c3 	b.w	8014ffc <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8013e76:	4a9b      	ldr	r2, [pc, #620]	@ (80140e4 <f_mkfs+0x2a0>)
 8013e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d005      	beq.n	8013e8e <f_mkfs+0x4a>
 8013e82:	4a98      	ldr	r2, [pc, #608]	@ (80140e4 <f_mkfs+0x2a0>)
 8013e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8013e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e90:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013e94:	2300      	movs	r3, #0
 8013e96:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8013e9a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fb fe7e 	bl	800fba0 <disk_initialize>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013eaa:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8013eae:	f003 0301 	and.w	r3, r3, #1
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d002      	beq.n	8013ebc <f_mkfs+0x78>
 8013eb6:	2303      	movs	r3, #3
 8013eb8:	f001 b8a0 	b.w	8014ffc <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013ebc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8013ec0:	f003 0304 	and.w	r3, r3, #4
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d002      	beq.n	8013ece <f_mkfs+0x8a>
 8013ec8:	230a      	movs	r3, #10
 8013eca:	f001 b897 	b.w	8014ffc <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013ece:	f107 0220 	add.w	r2, r7, #32
 8013ed2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8013ed6:	2103      	movs	r1, #3
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fb fec9 	bl	800fc70 <disk_ioctl>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d10c      	bne.n	8013efe <f_mkfs+0xba>
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d009      	beq.n	8013efe <f_mkfs+0xba>
 8013eea:	6a3b      	ldr	r3, [r7, #32]
 8013eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013ef0:	d805      	bhi.n	8013efe <f_mkfs+0xba>
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	1e5a      	subs	r2, r3, #1
 8013ef6:	6a3b      	ldr	r3, [r7, #32]
 8013ef8:	4013      	ands	r3, r2
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d001      	beq.n	8013f02 <f_mkfs+0xbe>
 8013efe:	2301      	movs	r3, #1
 8013f00:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013f06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d004      	beq.n	8013f1a <f_mkfs+0xd6>
 8013f10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d309      	bcc.n	8013f2e <f_mkfs+0xea>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f20:	d805      	bhi.n	8013f2e <f_mkfs+0xea>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	1e5a      	subs	r2, r3, #1
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4013      	ands	r3, r2
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d002      	beq.n	8013f34 <f_mkfs+0xf0>
 8013f2e:	2313      	movs	r3, #19
 8013f30:	f001 b864 	b.w	8014ffc <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 8013f34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f3e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8013f44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8013f52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f58:	fb02 f303 	mul.w	r3, r2, r3
 8013f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 8013f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d102      	bne.n	8013f6a <f_mkfs+0x126>
 8013f64:	230e      	movs	r3, #14
 8013f66:	f001 b849 	b.w	8014ffc <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8013f6a:	f107 021c 	add.w	r2, r7, #28
 8013f6e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8013f72:	2101      	movs	r1, #1
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fb fe7b 	bl	800fc70 <disk_ioctl>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d002      	beq.n	8013f86 <f_mkfs+0x142>
 8013f80:	2301      	movs	r3, #1
 8013f82:	f001 b83b 	b.w	8014ffc <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8013f86:	7afb      	ldrb	r3, [r7, #11]
 8013f88:	f003 0308 	and.w	r3, r3, #8
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d001      	beq.n	8013f94 <f_mkfs+0x150>
 8013f90:	2300      	movs	r3, #0
 8013f92:	e000      	b.n	8013f96 <f_mkfs+0x152>
 8013f94:	233f      	movs	r3, #63	@ 0x3f
 8013f96:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d902      	bls.n	8013fa6 <f_mkfs+0x162>
 8013fa0:	230e      	movs	r3, #14
 8013fa2:	f001 b82b 	b.w	8014ffc <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8013fb2:	d802      	bhi.n	8013fba <f_mkfs+0x176>
 8013fb4:	230e      	movs	r3, #14
 8013fb6:	f001 b821 	b.w	8014ffc <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 8013fba:	7afb      	ldrb	r3, [r7, #11]
 8013fbc:	f003 0304 	and.w	r3, r3, #4
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00f      	beq.n	8013fe4 <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 8013fc4:	7afb      	ldrb	r3, [r7, #11]
 8013fc6:	f003 0307 	and.w	r3, r3, #7
 8013fca:	2b04      	cmp	r3, #4
 8013fcc:	d006      	beq.n	8013fdc <f_mkfs+0x198>
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013fd4:	d202      	bcs.n	8013fdc <f_mkfs+0x198>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b80      	cmp	r3, #128	@ 0x80
 8013fda:	d903      	bls.n	8013fe4 <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 8013fdc:	2304      	movs	r3, #4
 8013fde:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8013fe2:	e023      	b.n	801402c <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2b80      	cmp	r3, #128	@ 0x80
 8013fe8:	d902      	bls.n	8013ff0 <f_mkfs+0x1ac>
 8013fea:	2313      	movs	r3, #19
 8013fec:	f001 b806 	b.w	8014ffc <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013ff0:	7afb      	ldrb	r3, [r7, #11]
 8013ff2:	f003 0302 	and.w	r3, r3, #2
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00d      	beq.n	8014016 <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013ffa:	7afb      	ldrb	r3, [r7, #11]
 8013ffc:	f003 0307 	and.w	r3, r3, #7
 8014000:	2b02      	cmp	r3, #2
 8014002:	d004      	beq.n	801400e <f_mkfs+0x1ca>
 8014004:	7afb      	ldrb	r3, [r7, #11]
 8014006:	f003 0301 	and.w	r3, r3, #1
 801400a:	2b00      	cmp	r3, #0
 801400c:	d103      	bne.n	8014016 <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 801400e:	2303      	movs	r3, #3
 8014010:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014014:	e00a      	b.n	801402c <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8014016:	7afb      	ldrb	r3, [r7, #11]
 8014018:	f003 0301 	and.w	r3, r3, #1
 801401c:	2b00      	cmp	r3, #0
 801401e:	d102      	bne.n	8014026 <f_mkfs+0x1e2>
 8014020:	2313      	movs	r3, #19
 8014022:	f000 bfeb 	b.w	8014ffc <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 8014026:	2302      	movs	r3, #2
 8014028:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 801402c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014030:	2b04      	cmp	r3, #4
 8014032:	f040 842b 	bne.w	801488c <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801403c:	d202      	bcs.n	8014044 <f_mkfs+0x200>
 801403e:	230e      	movs	r3, #14
 8014040:	f000 bfdc 	b.w	8014ffc <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d10e      	bne.n	8014068 <f_mkfs+0x224>
			au = 8;
 801404a:	2308      	movs	r3, #8
 801404c:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014054:	d301      	bcc.n	801405a <f_mkfs+0x216>
 8014056:	2340      	movs	r3, #64	@ 0x40
 8014058:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014060:	d302      	bcc.n	8014068 <f_mkfs+0x224>
 8014062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014066:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8014068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801406a:	3320      	adds	r3, #32
 801406c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 8014070:	69fa      	ldr	r2, [r7, #28]
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	fbb2 f3f3 	udiv	r3, r2, r3
 8014078:	3302      	adds	r3, #2
 801407a:	009a      	lsls	r2, r3, #2
 801407c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014080:	4413      	add	r3, r2
 8014082:	1e5a      	subs	r2, r3, #1
 8014084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014088:	fbb2 f3f3 	udiv	r3, r2, r3
 801408c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 8014090:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014094:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014098:	441a      	add	r2, r3
 801409a:	6a3b      	ldr	r3, [r7, #32]
 801409c:	4413      	add	r3, r2
 801409e:	1e5a      	subs	r2, r3, #1
 80140a0:	6a3b      	ldr	r3, [r7, #32]
 80140a2:	425b      	negs	r3, r3
 80140a4:	4013      	ands	r3, r2
 80140a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	085b      	lsrs	r3, r3, #1
 80140ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d302      	bcc.n	80140b8 <f_mkfs+0x274>
 80140b2:	230e      	movs	r3, #14
 80140b4:	f000 bfa2 	b.w	8014ffc <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 80140b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140bc:	1ad2      	subs	r2, r2, r3
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	441a      	add	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80140c8:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 80140ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140cc:	2b0f      	cmp	r3, #15
 80140ce:	d802      	bhi.n	80140d6 <f_mkfs+0x292>
 80140d0:	230e      	movs	r3, #14
 80140d2:	f000 bf93 	b.w	8014ffc <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 80140d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d8:	4a03      	ldr	r2, [pc, #12]	@ (80140e8 <f_mkfs+0x2a4>)
 80140da:	4293      	cmp	r3, r2
 80140dc:	d906      	bls.n	80140ec <f_mkfs+0x2a8>
 80140de:	230e      	movs	r3, #14
 80140e0:	f000 bf8c 	b.w	8014ffc <f_mkfs+0x11b8>
 80140e4:	24001bc8 	.word	0x24001bc8
 80140e8:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 80140ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ee:	3307      	adds	r3, #7
 80140f0:	08db      	lsrs	r3, r3, #3
 80140f2:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 80140f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	fb03 f202 	mul.w	r2, r3, r2
 80140fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014100:	4413      	add	r3, r2
 8014102:	1e5a      	subs	r2, r3, #1
 8014104:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014108:	6879      	ldr	r1, [r7, #4]
 801410a:	fb01 f303 	mul.w	r3, r1, r3
 801410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014112:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	fb02 f303 	mul.w	r3, r2, r3
 801411c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801411e:	4413      	add	r3, r2
 8014120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 8014124:	2300      	movs	r3, #0
 8014126:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 8014128:	2300      	movs	r3, #0
 801412a:	677b      	str	r3, [r7, #116]	@ 0x74
 801412c:	2300      	movs	r3, #0
 801412e:	663b      	str	r3, [r7, #96]	@ 0x60
 8014130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014132:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014136:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801413a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801413e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 8014140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014142:	2b00      	cmp	r3, #0
 8014144:	d003      	beq.n	801414e <f_mkfs+0x30a>
 8014146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014148:	2b01      	cmp	r3, #1
 801414a:	d040      	beq.n	80141ce <f_mkfs+0x38a>
 801414c:	e04f      	b.n	80141ee <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 801414e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014152:	4618      	mov	r0, r3
 8014154:	f000 fff0 	bl	8015138 <ff_wtoupper>
 8014158:	4603      	mov	r3, r0
 801415a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 801415e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014162:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014166:	429a      	cmp	r2, r3
 8014168:	d005      	beq.n	8014176 <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 801416a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801416e:	3301      	adds	r3, #1
 8014170:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8014174:	e049      	b.n	801420a <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8014176:	2301      	movs	r3, #1
 8014178:	663b      	str	r3, [r7, #96]	@ 0x60
 801417a:	e002      	b.n	8014182 <f_mkfs+0x33e>
 801417c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801417e:	3301      	adds	r3, #1
 8014180:	663b      	str	r3, [r7, #96]	@ 0x60
 8014182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014184:	b29a      	uxth	r2, r3
 8014186:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801418a:	4413      	add	r3, r2
 801418c:	b29b      	uxth	r3, r3
 801418e:	2b00      	cmp	r3, #0
 8014190:	d011      	beq.n	80141b6 <f_mkfs+0x372>
 8014192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014194:	b29a      	uxth	r2, r3
 8014196:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801419a:	4413      	add	r3, r2
 801419c:	b29c      	uxth	r4, r3
 801419e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80141a6:	4413      	add	r3, r2
 80141a8:	b29b      	uxth	r3, r3
 80141aa:	4618      	mov	r0, r3
 80141ac:	f000 ffc4 	bl	8015138 <ff_wtoupper>
 80141b0:	4603      	mov	r3, r0
 80141b2:	429c      	cmp	r4, r3
 80141b4:	d0e2      	beq.n	801417c <f_mkfs+0x338>
				if (j >= 128) {
 80141b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80141ba:	d906      	bls.n	80141ca <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 80141bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80141c0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80141c4:	2302      	movs	r3, #2
 80141c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80141c8:	e01f      	b.n	801420a <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 80141ca:	2301      	movs	r3, #1
 80141cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 80141ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80141d2:	1c5a      	adds	r2, r3, #1
 80141d4:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 80141d8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 80141dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141de:	3b01      	subs	r3, #1
 80141e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80141e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d10f      	bne.n	8014208 <f_mkfs+0x3c4>
 80141e8:	2300      	movs	r3, #0
 80141ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 80141ec:	e00c      	b.n	8014208 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 80141ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141f0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80141f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80141fc:	4413      	add	r3, r2
 80141fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 8014202:	2300      	movs	r3, #0
 8014204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014206:	e000      	b.n	801420a <f_mkfs+0x3c6>
				break;
 8014208:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 801420a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801420c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801420e:	4413      	add	r3, r2
 8014210:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014214:	b2d2      	uxtb	r2, r2
 8014216:	701a      	strb	r2, [r3, #0]
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801421c:	4618      	mov	r0, r3
 801421e:	f7fd fb94 	bl	801194a <xsum32>
 8014222:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8014224:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8014228:	0a1b      	lsrs	r3, r3, #8
 801422a:	b299      	uxth	r1, r3
 801422c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801422e:	3301      	adds	r3, #1
 8014230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014232:	4413      	add	r3, r2
 8014234:	b2ca      	uxtb	r2, r1
 8014236:	701a      	strb	r2, [r3, #0]
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801423c:	4618      	mov	r0, r3
 801423e:	f7fd fb84 	bl	801194a <xsum32>
 8014242:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 8014244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014246:	3302      	adds	r3, #2
 8014248:	67bb      	str	r3, [r7, #120]	@ 0x78
 801424a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801424c:	3302      	adds	r3, #2
 801424e:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 8014250:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8014254:	2b00      	cmp	r3, #0
 8014256:	d003      	beq.n	8014260 <f_mkfs+0x41c>
 8014258:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801425c:	429a      	cmp	r2, r3
 801425e:	d122      	bne.n	80142a6 <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 8014260:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014266:	4413      	add	r3, r2
 8014268:	1e5a      	subs	r2, r3, #1
 801426a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8014276:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801427a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801427e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014282:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014284:	f7fb fcd4 	bl	800fc30 <disk_write>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d002      	beq.n	8014294 <f_mkfs+0x450>
 801428e:	2301      	movs	r3, #1
 8014290:	f000 beb4 	b.w	8014ffc <f_mkfs+0x11b8>
				sect += n; i = 0;
 8014294:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801429c:	4413      	add	r3, r2
 801429e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80142a2:	2300      	movs	r3, #0
 80142a4:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 80142a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f47f af48 	bne.w	8014140 <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 80142b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	fb03 f202 	mul.w	r2, r3, r2
 80142ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80142bc:	4413      	add	r3, r2
 80142be:	1e5a      	subs	r2, r3, #1
 80142c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	fb01 f303 	mul.w	r3, r1, r3
 80142ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80142ce:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 80142d0:	2301      	movs	r3, #1
 80142d2:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 80142d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80142da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80142de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e0:	4413      	add	r3, r2
 80142e2:	1e5a      	subs	r2, r3, #1
 80142e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80142e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80142ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 80142f0:	693a      	ldr	r2, [r7, #16]
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	441a      	add	r2, r3
 80142f6:	69bb      	ldr	r3, [r7, #24]
 80142f8:	4413      	add	r3, r2
 80142fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 80142fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80142fe:	2100      	movs	r1, #0
 8014300:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014302:	f7fb feda 	bl	80100ba <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 8014306:	2300      	movs	r3, #0
 8014308:	67bb      	str	r3, [r7, #120]	@ 0x78
 801430a:	e009      	b.n	8014320 <f_mkfs+0x4dc>
 801430c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801430e:	1c5a      	adds	r2, r3, #1
 8014310:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014314:	4413      	add	r3, r2
 8014316:	22ff      	movs	r2, #255	@ 0xff
 8014318:	701a      	strb	r2, [r3, #0]
 801431a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801431c:	3b08      	subs	r3, #8
 801431e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014322:	2b07      	cmp	r3, #7
 8014324:	d903      	bls.n	801432e <f_mkfs+0x4ea>
 8014326:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801432a:	429a      	cmp	r2, r3
 801432c:	d3ee      	bcc.n	801430c <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 801432e:	2301      	movs	r3, #1
 8014330:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8014334:	e013      	b.n	801435e <f_mkfs+0x51a>
 8014336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801433a:	4413      	add	r3, r2
 801433c:	7819      	ldrb	r1, [r3, #0]
 801433e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014342:	4413      	add	r3, r2
 8014344:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8014348:	430a      	orrs	r2, r1
 801434a:	b2d2      	uxtb	r2, r2
 801434c:	701a      	strb	r2, [r3, #0]
 801434e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8014352:	005b      	lsls	r3, r3, #1
 8014354:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8014358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801435a:	3b01      	subs	r3, #1
 801435c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801435e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014360:	2b00      	cmp	r3, #0
 8014362:	d003      	beq.n	801436c <f_mkfs+0x528>
 8014364:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014368:	429a      	cmp	r2, r3
 801436a:	d3e4      	bcc.n	8014336 <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 801436c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014372:	4293      	cmp	r3, r2
 8014374:	bf28      	it	cs
 8014376:	4613      	movcs	r3, r2
 8014378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 801437c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014384:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801438a:	f7fb fc51 	bl	800fc30 <disk_write>
 801438e:	4603      	mov	r3, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	d002      	beq.n	801439a <f_mkfs+0x556>
 8014394:	2301      	movs	r3, #1
 8014396:	f000 be31 	b.w	8014ffc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 801439a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801439e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143a2:	4413      	add	r3, r2
 80143a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80143a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80143ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80143b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d19e      	bne.n	80142fc <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 80143be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80143c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80143c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 80143ce:	2300      	movs	r3, #0
 80143d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80143d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80143d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143d8:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 80143da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80143dc:	2100      	movs	r1, #0
 80143de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80143e0:	f7fb fe6b 	bl	80100ba <mem_set>
 80143e4:	2300      	movs	r3, #0
 80143e6:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 80143e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d134      	bne.n	8014458 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 80143ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80143f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80143f2:	4413      	add	r3, r2
 80143f4:	f06f 0107 	mvn.w	r1, #7
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fb fd89 	bl	800ff10 <st_dword>
 80143fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014400:	3304      	adds	r3, #4
 8014402:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014406:	3301      	adds	r3, #1
 8014408:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 801440a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801440c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801440e:	4413      	add	r3, r2
 8014410:	f04f 31ff 	mov.w	r1, #4294967295
 8014414:	4618      	mov	r0, r3
 8014416:	f7fb fd7b 	bl	800ff10 <st_dword>
 801441a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801441c:	3304      	adds	r3, #4
 801441e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014422:	3301      	adds	r3, #1
 8014424:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 8014426:	e017      	b.n	8014458 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 8014428:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801442a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801442c:	441a      	add	r2, r3
 801442e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014430:	2b01      	cmp	r3, #1
 8014432:	d902      	bls.n	801443a <f_mkfs+0x5f6>
 8014434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014436:	3301      	adds	r3, #1
 8014438:	e001      	b.n	801443e <f_mkfs+0x5fa>
 801443a:	f04f 33ff 	mov.w	r3, #4294967295
 801443e:	4619      	mov	r1, r3
 8014440:	4610      	mov	r0, r2
 8014442:	f7fb fd65 	bl	800ff10 <st_dword>
					i += 4; cl++; nb--;
 8014446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014448:	3304      	adds	r3, #4
 801444a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801444c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801444e:	3301      	adds	r3, #1
 8014450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014454:	3b01      	subs	r3, #1
 8014456:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 8014458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801445a:	2b00      	cmp	r3, #0
 801445c:	d003      	beq.n	8014466 <f_mkfs+0x622>
 801445e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014462:	429a      	cmp	r2, r3
 8014464:	d3e0      	bcc.n	8014428 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 8014466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014468:	2b00      	cmp	r3, #0
 801446a:	d10b      	bne.n	8014484 <f_mkfs+0x640>
 801446c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801446e:	2b02      	cmp	r3, #2
 8014470:	d808      	bhi.n	8014484 <f_mkfs+0x640>
 8014472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014474:	1c5a      	adds	r2, r3, #1
 8014476:	663a      	str	r2, [r7, #96]	@ 0x60
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	33a0      	adds	r3, #160	@ 0xa0
 801447c:	443b      	add	r3, r7
 801447e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8014482:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 8014484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014486:	2b00      	cmp	r3, #0
 8014488:	d003      	beq.n	8014492 <f_mkfs+0x64e>
 801448a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801448c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448e:	429a      	cmp	r2, r3
 8014490:	d3e2      	bcc.n	8014458 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8014492:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014498:	4293      	cmp	r3, r2
 801449a:	bf28      	it	cs
 801449c:	4613      	movcs	r3, r2
 801449e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 80144a2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80144a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80144ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80144b0:	f7fb fbbe 	bl	800fc30 <disk_write>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d002      	beq.n	80144c0 <f_mkfs+0x67c>
 80144ba:	2301      	movs	r3, #1
 80144bc:	f000 bd9e 	b.w	8014ffc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 80144c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80144c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144c8:	4413      	add	r3, r2
 80144ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80144ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80144d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144d6:	1ad3      	subs	r3, r2, r3
 80144d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80144dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f47f af7a 	bne.w	80143da <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 80144e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144e8:	2100      	movs	r1, #0
 80144ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80144ec:	f7fb fde5 	bl	80100ba <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 80144f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144f2:	2283      	movs	r2, #131	@ 0x83
 80144f4:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 80144f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144f8:	3320      	adds	r3, #32
 80144fa:	2281      	movs	r2, #129	@ 0x81
 80144fc:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 80144fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014500:	3334      	adds	r3, #52	@ 0x34
 8014502:	2102      	movs	r1, #2
 8014504:	4618      	mov	r0, r3
 8014506:	f7fb fd03 	bl	800ff10 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 801450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801450c:	3338      	adds	r3, #56	@ 0x38
 801450e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014510:	4618      	mov	r0, r3
 8014512:	f7fb fcfd 	bl	800ff10 <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 8014516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014518:	3340      	adds	r3, #64	@ 0x40
 801451a:	2282      	movs	r2, #130	@ 0x82
 801451c:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 801451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014520:	3344      	adds	r3, #68	@ 0x44
 8014522:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014524:	4618      	mov	r0, r3
 8014526:	f7fb fcf3 	bl	800ff10 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 801452a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801452c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	3302      	adds	r3, #2
 8014534:	4619      	mov	r1, r3
 8014536:	4610      	mov	r0, r2
 8014538:	f7fb fcea 	bl	800ff10 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 801453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801453e:	3358      	adds	r3, #88	@ 0x58
 8014540:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8014542:	4618      	mov	r0, r3
 8014544:	f7fb fce4 	bl	800ff10 <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 8014548:	693a      	ldr	r2, [r7, #16]
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	4413      	add	r3, r2
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	fb02 f303 	mul.w	r3, r2, r3
 8014554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014556:	4413      	add	r3, r2
 8014558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014562:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014568:	4293      	cmp	r3, r2
 801456a:	bf28      	it	cs
 801456c:	4613      	movcs	r3, r2
 801456e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8014572:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801457a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801457e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014580:	f7fb fb56 	bl	800fc30 <disk_write>
 8014584:	4603      	mov	r3, r0
 8014586:	2b00      	cmp	r3, #0
 8014588:	d002      	beq.n	8014590 <f_mkfs+0x74c>
 801458a:	2301      	movs	r3, #1
 801458c:	f000 bd36 	b.w	8014ffc <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 8014590:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014594:	461a      	mov	r2, r3
 8014596:	2100      	movs	r1, #0
 8014598:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801459a:	f7fb fd8e 	bl	80100ba <mem_set>
			sect += n; nsect -= n;
 801459e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80145a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145a6:	4413      	add	r3, r2
 80145a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80145ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80145b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 80145ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1cf      	bne.n	8014562 <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 80145c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 80145c8:	2300      	movs	r3, #0
 80145ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80145ce:	e157      	b.n	8014880 <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 80145d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80145d4:	461a      	mov	r2, r3
 80145d6:	2100      	movs	r1, #0
 80145d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80145da:	f7fb fd6e 	bl	80100ba <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 80145de:	220b      	movs	r2, #11
 80145e0:	49b5      	ldr	r1, [pc, #724]	@ (80148b8 <f_mkfs+0xa74>)
 80145e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80145e4:	f7fb fd48 	bl	8010078 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 80145e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145ea:	3340      	adds	r3, #64	@ 0x40
 80145ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fb fc8e 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 80145f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145f6:	3348      	adds	r3, #72	@ 0x48
 80145f8:	69fa      	ldr	r2, [r7, #28]
 80145fa:	4611      	mov	r1, r2
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fb fc87 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 8014602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014604:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8014608:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801460e:	1ad3      	subs	r3, r2, r3
 8014610:	4619      	mov	r1, r3
 8014612:	f7fb fc7d 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 8014616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014618:	3354      	adds	r3, #84	@ 0x54
 801461a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801461e:	4618      	mov	r0, r3
 8014620:	f7fb fc76 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 8014624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014626:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801462a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801462c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	4619      	mov	r1, r3
 8014632:	f7fb fc6d 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 8014636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014638:	335c      	adds	r3, #92	@ 0x5c
 801463a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801463c:	4618      	mov	r0, r3
 801463e:	f7fb fc67 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 8014642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014644:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8014648:	693a      	ldr	r2, [r7, #16]
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	4413      	add	r3, r2
 801464e:	3302      	adds	r3, #2
 8014650:	4619      	mov	r1, r3
 8014652:	f7fb fc5d 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 8014656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014658:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 801465c:	f7fb f830 	bl	800f6c0 <get_fattime>
 8014660:	4603      	mov	r3, r0
 8014662:	4619      	mov	r1, r3
 8014664:	4620      	mov	r0, r4
 8014666:	f7fb fc53 	bl	800ff10 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 801466a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801466c:	3368      	adds	r3, #104	@ 0x68
 801466e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014672:	4618      	mov	r0, r3
 8014674:	f7fb fc31 	bl	800feda <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 8014678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801467a:	336c      	adds	r3, #108	@ 0x6c
 801467c:	2200      	movs	r2, #0
 801467e:	701a      	strb	r2, [r3, #0]
 8014680:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014686:	e005      	b.n	8014694 <f_mkfs+0x850>
 8014688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801468a:	336c      	adds	r3, #108	@ 0x6c
 801468c:	781a      	ldrb	r2, [r3, #0]
 801468e:	3201      	adds	r2, #1
 8014690:	b2d2      	uxtb	r2, r2
 8014692:	701a      	strb	r2, [r3, #0]
 8014694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014696:	085b      	lsrs	r3, r3, #1
 8014698:	67bb      	str	r3, [r7, #120]	@ 0x78
 801469a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1f3      	bne.n	8014688 <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 80146a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146a2:	336d      	adds	r3, #109	@ 0x6d
 80146a4:	2200      	movs	r2, #0
 80146a6:	701a      	strb	r2, [r3, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80146ac:	e005      	b.n	80146ba <f_mkfs+0x876>
 80146ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146b0:	336d      	adds	r3, #109	@ 0x6d
 80146b2:	781a      	ldrb	r2, [r3, #0]
 80146b4:	3201      	adds	r2, #1
 80146b6:	b2d2      	uxtb	r2, r2
 80146b8:	701a      	strb	r2, [r3, #0]
 80146ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146bc:	085b      	lsrs	r3, r3, #1
 80146be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80146c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d1f3      	bne.n	80146ae <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 80146c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146c8:	336e      	adds	r3, #110	@ 0x6e
 80146ca:	2201      	movs	r2, #1
 80146cc:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 80146ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146d0:	336f      	adds	r3, #111	@ 0x6f
 80146d2:	2280      	movs	r2, #128	@ 0x80
 80146d4:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 80146d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146d8:	3378      	adds	r3, #120	@ 0x78
 80146da:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fb fbfb 	bl	800feda <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 80146e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80146ea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fb fbf3 	bl	800feda <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80146f4:	2300      	movs	r3, #0
 80146f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80146f8:	2300      	movs	r3, #0
 80146fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80146fc:	e014      	b.n	8014728 <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 80146fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014700:	2b6a      	cmp	r3, #106	@ 0x6a
 8014702:	d00e      	beq.n	8014722 <f_mkfs+0x8de>
 8014704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014706:	2b6b      	cmp	r3, #107	@ 0x6b
 8014708:	d00b      	beq.n	8014722 <f_mkfs+0x8de>
 801470a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801470c:	2b70      	cmp	r3, #112	@ 0x70
 801470e:	d008      	beq.n	8014722 <f_mkfs+0x8de>
 8014710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014714:	4413      	add	r3, r2
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801471a:	4618      	mov	r0, r3
 801471c:	f7fd f915 	bl	801194a <xsum32>
 8014720:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8014722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014724:	3301      	adds	r3, #1
 8014726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014728:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801472c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801472e:	429a      	cmp	r2, r3
 8014730:	d3e5      	bcc.n	80146fe <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8014732:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014736:	1c53      	adds	r3, r2, #1
 8014738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801473c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014740:	2301      	movs	r3, #1
 8014742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014744:	f7fb fa74 	bl	800fc30 <disk_write>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d002      	beq.n	8014754 <f_mkfs+0x910>
 801474e:	2301      	movs	r3, #1
 8014750:	f000 bc54 	b.w	8014ffc <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 8014754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014758:	461a      	mov	r2, r3
 801475a:	2100      	movs	r1, #0
 801475c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801475e:	f7fb fcac 	bl	80100ba <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 8014762:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014766:	3b02      	subs	r3, #2
 8014768:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801476a:	4413      	add	r3, r2
 801476c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014770:	4618      	mov	r0, r3
 8014772:	f7fb fbb2 	bl	800feda <st_word>
			for (j = 1; j < 9; j++) {
 8014776:	2301      	movs	r3, #1
 8014778:	663b      	str	r3, [r7, #96]	@ 0x60
 801477a:	e026      	b.n	80147ca <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 801477c:	2300      	movs	r3, #0
 801477e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014780:	e00a      	b.n	8014798 <f_mkfs+0x954>
 8014782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801478a:	4413      	add	r3, r2
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014790:	4618      	mov	r0, r3
 8014792:	f7fd f8da 	bl	801194a <xsum32>
 8014796:	6738      	str	r0, [r7, #112]	@ 0x70
 8014798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801479c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801479e:	429a      	cmp	r2, r3
 80147a0:	d3ef      	bcc.n	8014782 <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 80147a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80147a6:	1c53      	adds	r3, r2, #1
 80147a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80147ac:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80147b0:	2301      	movs	r3, #1
 80147b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80147b4:	f7fb fa3c 	bl	800fc30 <disk_write>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d002      	beq.n	80147c4 <f_mkfs+0x980>
 80147be:	2301      	movs	r3, #1
 80147c0:	f000 bc1c 	b.w	8014ffc <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 80147c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80147c6:	3301      	adds	r3, #1
 80147c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80147ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80147cc:	2b08      	cmp	r3, #8
 80147ce:	d9d5      	bls.n	801477c <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 80147d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80147d4:	461a      	mov	r2, r3
 80147d6:	2100      	movs	r1, #0
 80147d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80147da:	f7fb fc6e 	bl	80100ba <mem_set>
			for ( ; j < 11; j++) {
 80147de:	e025      	b.n	801482c <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 80147e0:	2300      	movs	r3, #0
 80147e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80147e4:	e00a      	b.n	80147fc <f_mkfs+0x9b8>
 80147e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147e8:	1c5a      	adds	r2, r3, #1
 80147ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80147ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80147ee:	4413      	add	r3, r2
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7fd f8a8 	bl	801194a <xsum32>
 80147fa:	6738      	str	r0, [r7, #112]	@ 0x70
 80147fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014800:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014802:	429a      	cmp	r2, r3
 8014804:	d3ef      	bcc.n	80147e6 <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8014806:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801480a:	1c53      	adds	r3, r2, #1
 801480c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014810:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014814:	2301      	movs	r3, #1
 8014816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014818:	f7fb fa0a 	bl	800fc30 <disk_write>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d001      	beq.n	8014826 <f_mkfs+0x9e2>
 8014822:	2301      	movs	r3, #1
 8014824:	e3ea      	b.n	8014ffc <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 8014826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014828:	3301      	adds	r3, #1
 801482a:	663b      	str	r3, [r7, #96]	@ 0x60
 801482c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801482e:	2b0a      	cmp	r3, #10
 8014830:	d9d6      	bls.n	80147e0 <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 8014832:	2300      	movs	r3, #0
 8014834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014836:	e009      	b.n	801484c <f_mkfs+0xa08>
 8014838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801483a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801483c:	4413      	add	r3, r2
 801483e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014840:	4618      	mov	r0, r3
 8014842:	f7fb fb65 	bl	800ff10 <st_dword>
 8014846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014848:	3304      	adds	r3, #4
 801484a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801484c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014850:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014852:	429a      	cmp	r2, r3
 8014854:	d3f0      	bcc.n	8014838 <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8014856:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801485a:	1c53      	adds	r3, r2, #1
 801485c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014860:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014864:	2301      	movs	r3, #1
 8014866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014868:	f7fb f9e2 	bl	800fc30 <disk_write>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <f_mkfs+0xa32>
 8014872:	2301      	movs	r3, #1
 8014874:	e3c2      	b.n	8014ffc <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 8014876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801487a:	3301      	adds	r3, #1
 801487c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014884:	2b01      	cmp	r3, #1
 8014886:	f67f aea3 	bls.w	80145d0 <f_mkfs+0x78c>
 801488a:	e324      	b.n	8014ed6 <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014892:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014896:	2b03      	cmp	r3, #3
 8014898:	d14a      	bne.n	8014930 <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 801489a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d123      	bne.n	80148ea <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80148a2:	69fb      	ldr	r3, [r7, #28]
 80148a4:	0c5b      	lsrs	r3, r3, #17
 80148a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80148aa:	2300      	movs	r3, #0
 80148ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80148ae:	2301      	movs	r3, #1
 80148b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80148b4:	e00a      	b.n	80148cc <f_mkfs+0xa88>
 80148b6:	bf00      	nop
 80148b8:	0801a954 	.word	0x0801a954
 80148bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80148be:	3301      	adds	r3, #1
 80148c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80148c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80148cc:	4aa0      	ldr	r2, [pc, #640]	@ (8014b50 <f_mkfs+0xd0c>)
 80148ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80148d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d008      	beq.n	80148ea <f_mkfs+0xaa6>
 80148d8:	4a9d      	ldr	r2, [pc, #628]	@ (8014b50 <f_mkfs+0xd0c>)
 80148da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80148dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148e0:	461a      	mov	r2, r3
 80148e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d2e8      	bcs.n	80148bc <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80148ea:	69fa      	ldr	r2, [r7, #28]
 80148ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80148f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80148f4:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80148f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148f8:	3302      	adds	r3, #2
 80148fa:	009a      	lsls	r2, r3, #2
 80148fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014900:	4413      	add	r3, r2
 8014902:	1e5a      	subs	r2, r3, #1
 8014904:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014908:	fbb2 f3f3 	udiv	r3, r2, r3
 801490c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 8014910:	2320      	movs	r3, #32
 8014912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 8014916:	2300      	movs	r3, #0
 8014918:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801491c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014920:	4293      	cmp	r3, r2
 8014922:	d903      	bls.n	801492c <f_mkfs+0xae8>
 8014924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014926:	4a8b      	ldr	r2, [pc, #556]	@ (8014b54 <f_mkfs+0xd10>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d959      	bls.n	80149e0 <f_mkfs+0xb9c>
 801492c:	230e      	movs	r3, #14
 801492e:	e365      	b.n	8014ffc <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014934:	2b00      	cmp	r3, #0
 8014936:	d120      	bne.n	801497a <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8014938:	69fb      	ldr	r3, [r7, #28]
 801493a:	0b1b      	lsrs	r3, r3, #12
 801493c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014940:	2300      	movs	r3, #0
 8014942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014944:	2301      	movs	r3, #1
 8014946:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801494a:	e007      	b.n	801495c <f_mkfs+0xb18>
 801494c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801494e:	3301      	adds	r3, #1
 8014950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014952:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014956:	005b      	lsls	r3, r3, #1
 8014958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801495c:	4a7e      	ldr	r2, [pc, #504]	@ (8014b58 <f_mkfs+0xd14>)
 801495e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d008      	beq.n	801497a <f_mkfs+0xb36>
 8014968:	4a7b      	ldr	r2, [pc, #492]	@ (8014b58 <f_mkfs+0xd14>)
 801496a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801496c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014970:	461a      	mov	r2, r3
 8014972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014976:	4293      	cmp	r3, r2
 8014978:	d2e8      	bcs.n	801494c <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 801497a:	69fa      	ldr	r2, [r7, #28]
 801497c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014980:	fbb2 f3f3 	udiv	r3, r2, r3
 8014984:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 8014986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014988:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801498c:	4293      	cmp	r3, r2
 801498e:	d905      	bls.n	801499c <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014992:	3302      	adds	r3, #2
 8014994:	005b      	lsls	r3, r3, #1
 8014996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801499a:	e00b      	b.n	80149b4 <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 801499c:	2301      	movs	r3, #1
 801499e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80149a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	3301      	adds	r3, #1
 80149ac:	085b      	lsrs	r3, r3, #1
 80149ae:	3303      	adds	r3, #3
 80149b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80149b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80149b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80149bc:	4413      	add	r3, r2
 80149be:	1e5a      	subs	r2, r3, #1
 80149c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80149c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80149c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 80149cc:	2301      	movs	r3, #1
 80149ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80149d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149d4:	015a      	lsls	r2, r3, #5
 80149d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80149da:	fbb2 f3f3 	udiv	r3, r2, r3
 80149de:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80149e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80149e6:	4413      	add	r3, r2
 80149e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80149ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80149f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80149f2:	fb03 f202 	mul.w	r2, r3, r2
 80149f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80149fa:	4413      	add	r3, r2
 80149fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80149fe:	4413      	add	r3, r2
 8014a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014a02:	6a3a      	ldr	r2, [r7, #32]
 8014a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a06:	4413      	add	r3, r2
 8014a08:	1e5a      	subs	r2, r3, #1
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	425b      	negs	r3, r3
 8014a0e:	401a      	ands	r2, r3
 8014a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014a18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014a1c:	2b03      	cmp	r3, #3
 8014a1e:	d10e      	bne.n	8014a3e <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 8014a20:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a28:	4413      	add	r3, r2
 8014a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014a2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a36:	4413      	add	r3, r2
 8014a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014a3c:	e009      	b.n	8014a52 <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014a3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014a56:	011a      	lsls	r2, r3, #4
 8014a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a5a:	441a      	add	r2, r3
 8014a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a5e:	1ad2      	subs	r2, r2, r3
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d901      	bls.n	8014a6a <f_mkfs+0xc26>
 8014a66:	230e      	movs	r3, #14
 8014a68:	e2c8      	b.n	8014ffc <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014a6a:	69fa      	ldr	r2, [r7, #28]
 8014a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014a70:	1ad2      	subs	r2, r2, r3
 8014a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014a78:	fb01 f303 	mul.w	r3, r1, r3
 8014a7c:	1ad2      	subs	r2, r2, r3
 8014a7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014a80:	1ad2      	subs	r2, r2, r3
 8014a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a8a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 8014a8c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014a90:	2b03      	cmp	r3, #3
 8014a92:	d110      	bne.n	8014ab6 <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a96:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	d80b      	bhi.n	8014ab6 <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d106      	bne.n	8014ab2 <f_mkfs+0xc6e>
 8014aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014aa8:	085b      	lsrs	r3, r3, #1
 8014aaa:	607b      	str	r3, [r7, #4]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d148      	bne.n	8014b44 <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 8014ab2:	230e      	movs	r3, #14
 8014ab4:	e2a2      	b.n	8014ffc <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 8014ab6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	d137      	bne.n	8014b2e <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d921      	bls.n	8014b0c <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d109      	bne.n	8014ae2 <f_mkfs+0xc9e>
 8014ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	2b40      	cmp	r3, #64	@ 0x40
 8014ad6:	d804      	bhi.n	8014ae2 <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	607b      	str	r3, [r7, #4]
 8014ae0:	e035      	b.n	8014b4e <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 8014ae2:	7afb      	ldrb	r3, [r7, #11]
 8014ae4:	f003 0302 	and.w	r3, r3, #2
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d003      	beq.n	8014af4 <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014aec:	2303      	movs	r3, #3
 8014aee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014af2:	e02c      	b.n	8014b4e <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d106      	bne.n	8014b08 <f_mkfs+0xcc4>
 8014afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014afe:	005b      	lsls	r3, r3, #1
 8014b00:	607b      	str	r3, [r7, #4]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b80      	cmp	r3, #128	@ 0x80
 8014b06:	d91f      	bls.n	8014b48 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 8014b08:	230e      	movs	r3, #14
 8014b0a:	e277      	b.n	8014ffc <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d80b      	bhi.n	8014b2e <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d106      	bne.n	8014b2a <f_mkfs+0xce6>
 8014b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	607b      	str	r3, [r7, #4]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b80      	cmp	r3, #128	@ 0x80
 8014b28:	d910      	bls.n	8014b4c <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 8014b2a:	230e      	movs	r3, #14
 8014b2c:	e266      	b.n	8014ffc <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014b2e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d112      	bne.n	8014b5c <f_mkfs+0xd18>
 8014b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b38:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d90d      	bls.n	8014b5c <f_mkfs+0xd18>
 8014b40:	230e      	movs	r3, #14
 8014b42:	e25b      	b.n	8014ffc <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014b44:	bf00      	nop
 8014b46:	e6a1      	b.n	801488c <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b48:	bf00      	nop
 8014b4a:	e69f      	b.n	801488c <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b4c:	bf00      	nop
			pau = au;
 8014b4e:	e69d      	b.n	801488c <f_mkfs+0xa48>
 8014b50:	0801b368 	.word	0x0801b368
 8014b54:	0ffffff5 	.word	0x0ffffff5
 8014b58:	0801b378 	.word	0x0801b378

			/* Ok, it is the valid cluster configuration */
			break;
 8014b5c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8014b5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b62:	461a      	mov	r2, r3
 8014b64:	2100      	movs	r1, #0
 8014b66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014b68:	f7fb faa7 	bl	80100ba <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014b6c:	220b      	movs	r2, #11
 8014b6e:	49be      	ldr	r1, [pc, #760]	@ (8014e68 <f_mkfs+0x1024>)
 8014b70:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014b72:	f7fb fa81 	bl	8010078 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b78:	330b      	adds	r3, #11
 8014b7a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014b7e:	4611      	mov	r1, r2
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7fb f9aa 	bl	800feda <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b88:	330d      	adds	r3, #13
 8014b8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014b8e:	b2d2      	uxtb	r2, r2
 8014b90:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b94:	330e      	adds	r3, #14
 8014b96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014b9a:	b292      	uxth	r2, r2
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fb f99b 	bl	800feda <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ba6:	3310      	adds	r3, #16
 8014ba8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014baa:	b2d2      	uxtb	r2, r2
 8014bac:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bb0:	f103 0211 	add.w	r2, r3, #17
 8014bb4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014bb8:	2b03      	cmp	r3, #3
 8014bba:	d002      	beq.n	8014bc2 <f_mkfs+0xd7e>
 8014bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	e000      	b.n	8014bc4 <f_mkfs+0xd80>
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f7fb f987 	bl	800feda <st_word>
		if (sz_vol < 0x10000) {
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014bd2:	d208      	bcs.n	8014be6 <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bd6:	3313      	adds	r3, #19
 8014bd8:	69fa      	ldr	r2, [r7, #28]
 8014bda:	b292      	uxth	r2, r2
 8014bdc:	4611      	mov	r1, r2
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fb f97b 	bl	800feda <st_word>
 8014be4:	e006      	b.n	8014bf4 <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014be8:	3320      	adds	r3, #32
 8014bea:	69fa      	ldr	r2, [r7, #28]
 8014bec:	4611      	mov	r1, r2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fb f98e 	bl	800ff10 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bf6:	3315      	adds	r3, #21
 8014bf8:	22f8      	movs	r2, #248	@ 0xf8
 8014bfa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bfe:	3318      	adds	r3, #24
 8014c00:	213f      	movs	r1, #63	@ 0x3f
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7fb f969 	bl	800feda <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c0a:	331a      	adds	r3, #26
 8014c0c:	21ff      	movs	r1, #255	@ 0xff
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7fb f963 	bl	800feda <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c16:	331c      	adds	r3, #28
 8014c18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7fb f978 	bl	800ff10 <st_dword>
		if (fmt == FS_FAT32) {
 8014c20:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014c24:	2b03      	cmp	r3, #3
 8014c26:	d132      	bne.n	8014c8e <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c2a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014c2e:	f7fa fd47 	bl	800f6c0 <get_fattime>
 8014c32:	4603      	mov	r3, r0
 8014c34:	4619      	mov	r1, r3
 8014c36:	4620      	mov	r0, r4
 8014c38:	f7fb f96a 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c3e:	3324      	adds	r3, #36	@ 0x24
 8014c40:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7fb f963 	bl	800ff10 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c4c:	332c      	adds	r3, #44	@ 0x2c
 8014c4e:	2102      	movs	r1, #2
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fb f95d 	bl	800ff10 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c58:	3330      	adds	r3, #48	@ 0x30
 8014c5a:	2101      	movs	r1, #1
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7fb f93c 	bl	800feda <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c64:	3332      	adds	r3, #50	@ 0x32
 8014c66:	2106      	movs	r1, #6
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fb f936 	bl	800feda <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c70:	3340      	adds	r3, #64	@ 0x40
 8014c72:	2280      	movs	r2, #128	@ 0x80
 8014c74:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c78:	3342      	adds	r3, #66	@ 0x42
 8014c7a:	2229      	movs	r2, #41	@ 0x29
 8014c7c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c80:	3347      	adds	r3, #71	@ 0x47
 8014c82:	2213      	movs	r2, #19
 8014c84:	4979      	ldr	r1, [pc, #484]	@ (8014e6c <f_mkfs+0x1028>)
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7fb f9f6 	bl	8010078 <mem_cpy>
 8014c8c:	e021      	b.n	8014cd2 <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c90:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014c94:	f7fa fd14 	bl	800f6c0 <get_fattime>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f7fb f937 	bl	800ff10 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ca4:	3316      	adds	r3, #22
 8014ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014caa:	b292      	uxth	r2, r2
 8014cac:	4611      	mov	r1, r2
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fb f913 	bl	800feda <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cb6:	3324      	adds	r3, #36	@ 0x24
 8014cb8:	2280      	movs	r2, #128	@ 0x80
 8014cba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cbe:	3326      	adds	r3, #38	@ 0x26
 8014cc0:	2229      	movs	r2, #41	@ 0x29
 8014cc2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cc6:	332b      	adds	r3, #43	@ 0x2b
 8014cc8:	2213      	movs	r2, #19
 8014cca:	4969      	ldr	r1, [pc, #420]	@ (8014e70 <f_mkfs+0x102c>)
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fb f9d3 	bl	8010078 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014cd8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7fb f8fc 	bl	800feda <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014ce2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014cec:	f7fa ffa0 	bl	800fc30 <disk_write>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d001      	beq.n	8014cfa <f_mkfs+0xeb6>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e180      	b.n	8014ffc <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014cfa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014cfe:	2b03      	cmp	r3, #3
 8014d00:	d141      	bne.n	8014d86 <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d04:	1d9a      	adds	r2, r3, #6
 8014d06:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014d0e:	f7fa ff8f 	bl	800fc30 <disk_write>
			mem_set(buf, 0, ss);
 8014d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014d16:	461a      	mov	r2, r3
 8014d18:	2100      	movs	r1, #0
 8014d1a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014d1c:	f7fb f9cd 	bl	80100ba <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014d20:	4954      	ldr	r1, [pc, #336]	@ (8014e74 <f_mkfs+0x1030>)
 8014d22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014d24:	f7fb f8f4 	bl	800ff10 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d2a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014d2e:	4952      	ldr	r1, [pc, #328]	@ (8014e78 <f_mkfs+0x1034>)
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7fb f8ed 	bl	800ff10 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d38:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3e:	3b01      	subs	r3, #1
 8014d40:	4619      	mov	r1, r3
 8014d42:	4610      	mov	r0, r2
 8014d44:	f7fb f8e4 	bl	800ff10 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d4a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014d4e:	2102      	movs	r1, #2
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7fb f8dd 	bl	800ff10 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d58:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014d5c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7fb f8ba 	bl	800feda <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d68:	1dda      	adds	r2, r3, #7
 8014d6a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014d6e:	2301      	movs	r3, #1
 8014d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014d72:	f7fa ff5d 	bl	800fc30 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d78:	1c5a      	adds	r2, r3, #1
 8014d7a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014d7e:	2301      	movs	r3, #1
 8014d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014d82:	f7fa ff55 	bl	800fc30 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014d86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d88:	2100      	movs	r1, #0
 8014d8a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014d8c:	f7fb f995 	bl	80100ba <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014d98:	2300      	movs	r3, #0
 8014d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014d9c:	e059      	b.n	8014e52 <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 8014d9e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014da2:	2b03      	cmp	r3, #3
 8014da4:	d113      	bne.n	8014dce <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014da6:	f06f 0107 	mvn.w	r1, #7
 8014daa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014dac:	f7fb f8b0 	bl	800ff10 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014db2:	3304      	adds	r3, #4
 8014db4:	f04f 31ff 	mov.w	r1, #4294967295
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7fb f8a9 	bl	800ff10 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dc0:	3308      	adds	r3, #8
 8014dc2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7fb f8a2 	bl	800ff10 <st_dword>
 8014dcc:	e00b      	b.n	8014de6 <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014dce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d101      	bne.n	8014dda <f_mkfs+0xf96>
 8014dd6:	4b29      	ldr	r3, [pc, #164]	@ (8014e7c <f_mkfs+0x1038>)
 8014dd8:	e001      	b.n	8014dde <f_mkfs+0xf9a>
 8014dda:	f06f 0307 	mvn.w	r3, #7
 8014dde:	4619      	mov	r1, r3
 8014de0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014de2:	f7fb f895 	bl	800ff10 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014dee:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014df4:	4293      	cmp	r3, r2
 8014df6:	bf28      	it	cs
 8014df8:	4613      	movcs	r3, r2
 8014dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014dfe:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e06:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e0c:	f7fa ff10 	bl	800fc30 <disk_write>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d001      	beq.n	8014e1a <f_mkfs+0xfd6>
 8014e16:	2301      	movs	r3, #1
 8014e18:	e0f0      	b.n	8014ffc <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 8014e1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014e1e:	461a      	mov	r2, r3
 8014e20:	2100      	movs	r1, #0
 8014e22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014e24:	f7fb f949 	bl	80100ba <mem_set>
				sect += n; nsect -= n;
 8014e28:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e30:	4413      	add	r3, r2
 8014e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014e36:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 8014e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d1d0      	bne.n	8014dee <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e4e:	3301      	adds	r3, #1
 8014e50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014e52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d3a1      	bcc.n	8014d9e <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014e5a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014e5e:	2b03      	cmp	r3, #3
 8014e60:	d10e      	bne.n	8014e80 <f_mkfs+0x103c>
 8014e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014e66:	e00c      	b.n	8014e82 <f_mkfs+0x103e>
 8014e68:	0801a960 	.word	0x0801a960
 8014e6c:	0801a96c 	.word	0x0801a96c
 8014e70:	0801a980 	.word	0x0801a980
 8014e74:	41615252 	.word	0x41615252
 8014e78:	61417272 	.word	0x61417272
 8014e7c:	00fffff8 	.word	0x00fffff8
 8014e80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014e86:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	bf28      	it	cs
 8014e90:	4613      	movcs	r3, r2
 8014e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014e96:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014ea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ea4:	f7fa fec4 	bl	800fc30 <disk_write>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d001      	beq.n	8014eb2 <f_mkfs+0x106e>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e0a4      	b.n	8014ffc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8014eb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8014eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014eba:	4413      	add	r3, r2
 8014ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014ec0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8014ece:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1d7      	bne.n	8014e86 <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 8014ed6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014eda:	2b04      	cmp	r3, #4
 8014edc:	d103      	bne.n	8014ee6 <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 8014ede:	2307      	movs	r3, #7
 8014ee0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014ee4:	e018      	b.n	8014f18 <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 8014ee6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014eea:	2b03      	cmp	r3, #3
 8014eec:	d103      	bne.n	8014ef6 <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 8014eee:	230c      	movs	r3, #12
 8014ef0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014ef4:	e010      	b.n	8014f18 <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014efc:	d303      	bcc.n	8014f06 <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014efe:	2306      	movs	r3, #6
 8014f00:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014f04:	e008      	b.n	8014f18 <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014f06:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014f0a:	2b02      	cmp	r3, #2
 8014f0c:	d101      	bne.n	8014f12 <f_mkfs+0x10ce>
 8014f0e:	2304      	movs	r3, #4
 8014f10:	e000      	b.n	8014f14 <f_mkfs+0x10d0>
 8014f12:	2301      	movs	r3, #1
 8014f14:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014f18:	7afb      	ldrb	r3, [r7, #11]
 8014f1a:	f003 0308 	and.w	r3, r3, #8
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d15f      	bne.n	8014fe2 <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 8014f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014f26:	461a      	mov	r2, r3
 8014f28:	2100      	movs	r1, #0
 8014f2a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014f2c:	f7fb f8c5 	bl	80100ba <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f32:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014f36:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fa ffcd 	bl	800feda <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f42:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014f46:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f50:	3301      	adds	r3, #1
 8014f52:	2201      	movs	r2, #1
 8014f54:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f58:	3302      	adds	r3, #2
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f60:	3303      	adds	r3, #3
 8014f62:	2200      	movs	r2, #0
 8014f64:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f68:	3304      	adds	r3, #4
 8014f6a:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8014f6e:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014f70:	69fa      	ldr	r2, [r7, #28]
 8014f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f74:	441a      	add	r2, r3
 8014f76:	4b23      	ldr	r3, [pc, #140]	@ (8015004 <f_mkfs+0x11c0>)
 8014f78:	fba3 1302 	umull	r1, r3, r3, r2
 8014f7c:	1ad2      	subs	r2, r2, r3
 8014f7e:	0852      	lsrs	r2, r2, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	0b5b      	lsrs	r3, r3, #13
 8014f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 8014f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8a:	3305      	adds	r3, #5
 8014f8c:	22fe      	movs	r2, #254	@ 0xfe
 8014f8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014f94:	089b      	lsrs	r3, r3, #2
 8014f96:	b2da      	uxtb	r2, r3
 8014f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9a:	3306      	adds	r3, #6
 8014f9c:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014fa0:	b2d2      	uxtb	r2, r2
 8014fa2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa6:	3307      	adds	r3, #7
 8014fa8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014fac:	b2d2      	uxtb	r2, r2
 8014fae:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb2:	3308      	adds	r3, #8
 8014fb4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fa ffaa 	bl	800ff10 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fbe:	330c      	adds	r3, #12
 8014fc0:	69fa      	ldr	r2, [r7, #28]
 8014fc2:	4611      	mov	r1, r2
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7fa ffa3 	bl	800ff10 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014fca:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8014fce:	2301      	movs	r3, #1
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014fd4:	f7fa fe2c 	bl	800fc30 <disk_write>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d001      	beq.n	8014fe2 <f_mkfs+0x119e>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	e00c      	b.n	8014ffc <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014fe2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	2100      	movs	r1, #0
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fa fe40 	bl	800fc70 <disk_ioctl>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d001      	beq.n	8014ffa <f_mkfs+0x11b6>
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	e000      	b.n	8014ffc <f_mkfs+0x11b8>

	return FR_OK;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	37a4      	adds	r7, #164	@ 0xa4
 8015000:	46bd      	mov	sp, r7
 8015002:	bd90      	pop	{r4, r7, pc}
 8015004:	0515565b 	.word	0x0515565b

08015008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015008:	b480      	push	{r7}
 801500a:	b087      	sub	sp, #28
 801500c:	af00      	add	r7, sp, #0
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	4613      	mov	r3, r2
 8015014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015016:	2301      	movs	r3, #1
 8015018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801501a:	2300      	movs	r3, #0
 801501c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801501e:	4b1f      	ldr	r3, [pc, #124]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015020:	7a5b      	ldrb	r3, [r3, #9]
 8015022:	b2db      	uxtb	r3, r3
 8015024:	2b00      	cmp	r3, #0
 8015026:	d131      	bne.n	801508c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015028:	4b1c      	ldr	r3, [pc, #112]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 801502a:	7a5b      	ldrb	r3, [r3, #9]
 801502c:	b2db      	uxtb	r3, r3
 801502e:	461a      	mov	r2, r3
 8015030:	4b1a      	ldr	r3, [pc, #104]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015032:	2100      	movs	r1, #0
 8015034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015036:	4b19      	ldr	r3, [pc, #100]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015038:	7a5b      	ldrb	r3, [r3, #9]
 801503a:	b2db      	uxtb	r3, r3
 801503c:	4a17      	ldr	r2, [pc, #92]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	4413      	add	r3, r2
 8015042:	68fa      	ldr	r2, [r7, #12]
 8015044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015046:	4b15      	ldr	r3, [pc, #84]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015048:	7a5b      	ldrb	r3, [r3, #9]
 801504a:	b2db      	uxtb	r3, r3
 801504c:	461a      	mov	r2, r3
 801504e:	4b13      	ldr	r3, [pc, #76]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015050:	4413      	add	r3, r2
 8015052:	79fa      	ldrb	r2, [r7, #7]
 8015054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015056:	4b11      	ldr	r3, [pc, #68]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015058:	7a5b      	ldrb	r3, [r3, #9]
 801505a:	b2db      	uxtb	r3, r3
 801505c:	1c5a      	adds	r2, r3, #1
 801505e:	b2d1      	uxtb	r1, r2
 8015060:	4a0e      	ldr	r2, [pc, #56]	@ (801509c <FATFS_LinkDriverEx+0x94>)
 8015062:	7251      	strb	r1, [r2, #9]
 8015064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015066:	7dbb      	ldrb	r3, [r7, #22]
 8015068:	3330      	adds	r3, #48	@ 0x30
 801506a:	b2da      	uxtb	r2, r3
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	3301      	adds	r3, #1
 8015074:	223a      	movs	r2, #58	@ 0x3a
 8015076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	3302      	adds	r3, #2
 801507c:	222f      	movs	r2, #47	@ 0x2f
 801507e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	3303      	adds	r3, #3
 8015084:	2200      	movs	r2, #0
 8015086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015088:	2300      	movs	r3, #0
 801508a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801508c:	7dfb      	ldrb	r3, [r7, #23]
}
 801508e:	4618      	mov	r0, r3
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	24001bf0 	.word	0x24001bf0

080150a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80150aa:	2200      	movs	r2, #0
 80150ac:	6839      	ldr	r1, [r7, #0]
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f7ff ffaa 	bl	8015008 <FATFS_LinkDriverEx>
 80150b4:	4603      	mov	r3, r0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
	...

080150c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b085      	sub	sp, #20
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	4603      	mov	r3, r0
 80150c8:	6039      	str	r1, [r7, #0]
 80150ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80150cc:	88fb      	ldrh	r3, [r7, #6]
 80150ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80150d0:	d802      	bhi.n	80150d8 <ff_convert+0x18>
		c = chr;
 80150d2:	88fb      	ldrh	r3, [r7, #6]
 80150d4:	81fb      	strh	r3, [r7, #14]
 80150d6:	e025      	b.n	8015124 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d00b      	beq.n	80150f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80150de:	88fb      	ldrh	r3, [r7, #6]
 80150e0:	2bff      	cmp	r3, #255	@ 0xff
 80150e2:	d805      	bhi.n	80150f0 <ff_convert+0x30>
 80150e4:	88fb      	ldrh	r3, [r7, #6]
 80150e6:	3b80      	subs	r3, #128	@ 0x80
 80150e8:	4a12      	ldr	r2, [pc, #72]	@ (8015134 <ff_convert+0x74>)
 80150ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150ee:	e000      	b.n	80150f2 <ff_convert+0x32>
 80150f0:	2300      	movs	r3, #0
 80150f2:	81fb      	strh	r3, [r7, #14]
 80150f4:	e016      	b.n	8015124 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80150f6:	2300      	movs	r3, #0
 80150f8:	81fb      	strh	r3, [r7, #14]
 80150fa:	e009      	b.n	8015110 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80150fc:	89fb      	ldrh	r3, [r7, #14]
 80150fe:	4a0d      	ldr	r2, [pc, #52]	@ (8015134 <ff_convert+0x74>)
 8015100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015104:	88fa      	ldrh	r2, [r7, #6]
 8015106:	429a      	cmp	r2, r3
 8015108:	d006      	beq.n	8015118 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801510a:	89fb      	ldrh	r3, [r7, #14]
 801510c:	3301      	adds	r3, #1
 801510e:	81fb      	strh	r3, [r7, #14]
 8015110:	89fb      	ldrh	r3, [r7, #14]
 8015112:	2b7f      	cmp	r3, #127	@ 0x7f
 8015114:	d9f2      	bls.n	80150fc <ff_convert+0x3c>
 8015116:	e000      	b.n	801511a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015118:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801511a:	89fb      	ldrh	r3, [r7, #14]
 801511c:	3380      	adds	r3, #128	@ 0x80
 801511e:	b29b      	uxth	r3, r3
 8015120:	b2db      	uxtb	r3, r3
 8015122:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015124:	89fb      	ldrh	r3, [r7, #14]
}
 8015126:	4618      	mov	r0, r3
 8015128:	3714      	adds	r7, #20
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
 8015134:	0801b388 	.word	0x0801b388

08015138 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015138:	b480      	push	{r7}
 801513a:	b087      	sub	sp, #28
 801513c:	af00      	add	r7, sp, #0
 801513e:	4603      	mov	r3, r0
 8015140:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015142:	88fb      	ldrh	r3, [r7, #6]
 8015144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015148:	d201      	bcs.n	801514e <ff_wtoupper+0x16>
 801514a:	4b3e      	ldr	r3, [pc, #248]	@ (8015244 <ff_wtoupper+0x10c>)
 801514c:	e000      	b.n	8015150 <ff_wtoupper+0x18>
 801514e:	4b3e      	ldr	r3, [pc, #248]	@ (8015248 <ff_wtoupper+0x110>)
 8015150:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	1c9a      	adds	r2, r3, #2
 8015156:	617a      	str	r2, [r7, #20]
 8015158:	881b      	ldrh	r3, [r3, #0]
 801515a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801515c:	8a7b      	ldrh	r3, [r7, #18]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d068      	beq.n	8015234 <ff_wtoupper+0xfc>
 8015162:	88fa      	ldrh	r2, [r7, #6]
 8015164:	8a7b      	ldrh	r3, [r7, #18]
 8015166:	429a      	cmp	r2, r3
 8015168:	d364      	bcc.n	8015234 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	1c9a      	adds	r2, r3, #2
 801516e:	617a      	str	r2, [r7, #20]
 8015170:	881b      	ldrh	r3, [r3, #0]
 8015172:	823b      	strh	r3, [r7, #16]
 8015174:	8a3b      	ldrh	r3, [r7, #16]
 8015176:	0a1b      	lsrs	r3, r3, #8
 8015178:	81fb      	strh	r3, [r7, #14]
 801517a:	8a3b      	ldrh	r3, [r7, #16]
 801517c:	b2db      	uxtb	r3, r3
 801517e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015180:	88fa      	ldrh	r2, [r7, #6]
 8015182:	8a79      	ldrh	r1, [r7, #18]
 8015184:	8a3b      	ldrh	r3, [r7, #16]
 8015186:	440b      	add	r3, r1
 8015188:	429a      	cmp	r2, r3
 801518a:	da49      	bge.n	8015220 <ff_wtoupper+0xe8>
			switch (cmd) {
 801518c:	89fb      	ldrh	r3, [r7, #14]
 801518e:	2b08      	cmp	r3, #8
 8015190:	d84f      	bhi.n	8015232 <ff_wtoupper+0xfa>
 8015192:	a201      	add	r2, pc, #4	@ (adr r2, 8015198 <ff_wtoupper+0x60>)
 8015194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015198:	080151bd 	.word	0x080151bd
 801519c:	080151cf 	.word	0x080151cf
 80151a0:	080151e5 	.word	0x080151e5
 80151a4:	080151ed 	.word	0x080151ed
 80151a8:	080151f5 	.word	0x080151f5
 80151ac:	080151fd 	.word	0x080151fd
 80151b0:	08015205 	.word	0x08015205
 80151b4:	0801520d 	.word	0x0801520d
 80151b8:	08015215 	.word	0x08015215
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80151bc:	88fa      	ldrh	r2, [r7, #6]
 80151be:	8a7b      	ldrh	r3, [r7, #18]
 80151c0:	1ad3      	subs	r3, r2, r3
 80151c2:	005b      	lsls	r3, r3, #1
 80151c4:	697a      	ldr	r2, [r7, #20]
 80151c6:	4413      	add	r3, r2
 80151c8:	881b      	ldrh	r3, [r3, #0]
 80151ca:	80fb      	strh	r3, [r7, #6]
 80151cc:	e027      	b.n	801521e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80151ce:	88fa      	ldrh	r2, [r7, #6]
 80151d0:	8a7b      	ldrh	r3, [r7, #18]
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	f003 0301 	and.w	r3, r3, #1
 80151da:	b29b      	uxth	r3, r3
 80151dc:	88fa      	ldrh	r2, [r7, #6]
 80151de:	1ad3      	subs	r3, r2, r3
 80151e0:	80fb      	strh	r3, [r7, #6]
 80151e2:	e01c      	b.n	801521e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80151e4:	88fb      	ldrh	r3, [r7, #6]
 80151e6:	3b10      	subs	r3, #16
 80151e8:	80fb      	strh	r3, [r7, #6]
 80151ea:	e018      	b.n	801521e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80151ec:	88fb      	ldrh	r3, [r7, #6]
 80151ee:	3b20      	subs	r3, #32
 80151f0:	80fb      	strh	r3, [r7, #6]
 80151f2:	e014      	b.n	801521e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80151f4:	88fb      	ldrh	r3, [r7, #6]
 80151f6:	3b30      	subs	r3, #48	@ 0x30
 80151f8:	80fb      	strh	r3, [r7, #6]
 80151fa:	e010      	b.n	801521e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80151fc:	88fb      	ldrh	r3, [r7, #6]
 80151fe:	3b1a      	subs	r3, #26
 8015200:	80fb      	strh	r3, [r7, #6]
 8015202:	e00c      	b.n	801521e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015204:	88fb      	ldrh	r3, [r7, #6]
 8015206:	3308      	adds	r3, #8
 8015208:	80fb      	strh	r3, [r7, #6]
 801520a:	e008      	b.n	801521e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801520c:	88fb      	ldrh	r3, [r7, #6]
 801520e:	3b50      	subs	r3, #80	@ 0x50
 8015210:	80fb      	strh	r3, [r7, #6]
 8015212:	e004      	b.n	801521e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015214:	88fb      	ldrh	r3, [r7, #6]
 8015216:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801521a:	80fb      	strh	r3, [r7, #6]
 801521c:	bf00      	nop
			}
			break;
 801521e:	e008      	b.n	8015232 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015220:	89fb      	ldrh	r3, [r7, #14]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d195      	bne.n	8015152 <ff_wtoupper+0x1a>
 8015226:	8a3b      	ldrh	r3, [r7, #16]
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	697a      	ldr	r2, [r7, #20]
 801522c:	4413      	add	r3, r2
 801522e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015230:	e78f      	b.n	8015152 <ff_wtoupper+0x1a>
			break;
 8015232:	bf00      	nop
	}

	return chr;
 8015234:	88fb      	ldrh	r3, [r7, #6]
}
 8015236:	4618      	mov	r0, r3
 8015238:	371c      	adds	r7, #28
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	0801b488 	.word	0x0801b488
 8015248:	0801b67c 	.word	0x0801b67c

0801524c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	4603      	mov	r3, r0
 8015254:	6039      	str	r1, [r7, #0]
 8015256:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015258:	2200      	movs	r2, #0
 801525a:	2101      	movs	r1, #1
 801525c:	2001      	movs	r0, #1
 801525e:	f000 f9fd 	bl	801565c <osSemaphoreNew>
 8015262:	4602      	mov	r2, r0
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	bf14      	ite	ne
 8015270:	2301      	movne	r3, #1
 8015272:	2300      	moveq	r3, #0
 8015274:	b2db      	uxtb	r3, r3
 8015276:	60fb      	str	r3, [r7, #12]

    return ret;
 8015278:	68fb      	ldr	r3, [r7, #12]
}
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b082      	sub	sp, #8
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f000 fb06 	bl	801589c <osSemaphoreDelete>
#endif
    return 1;
 8015290:	2301      	movs	r3, #1
}
 8015292:	4618      	mov	r0, r3
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}

0801529a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801529a:	b580      	push	{r7, lr}
 801529c:	b084      	sub	sp, #16
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80152a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f000 fa60 	bl	8015770 <osSemaphoreAcquire>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d101      	bne.n	80152ba <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80152b6:	2301      	movs	r3, #1
 80152b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80152ba:	68fb      	ldr	r3, [r7, #12]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}

080152c4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f000 faa1 	bl	8015814 <osSemaphoreRelease>
#endif
}
 80152d2:	bf00      	nop
 80152d4:	3708      	adds	r7, #8
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}

080152da <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f003 fd0a 	bl	8018cfc <pvPortMalloc>
 80152e8:	4603      	mov	r3, r0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b082      	sub	sp, #8
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f003 fdcc 	bl	8018e98 <vPortFree>
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <__NVIC_SetPriority>:
{
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	4603      	mov	r3, r0
 8015310:	6039      	str	r1, [r7, #0]
 8015312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015318:	2b00      	cmp	r3, #0
 801531a:	db0a      	blt.n	8015332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	b2da      	uxtb	r2, r3
 8015320:	490c      	ldr	r1, [pc, #48]	@ (8015354 <__NVIC_SetPriority+0x4c>)
 8015322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015326:	0112      	lsls	r2, r2, #4
 8015328:	b2d2      	uxtb	r2, r2
 801532a:	440b      	add	r3, r1
 801532c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015330:	e00a      	b.n	8015348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	b2da      	uxtb	r2, r3
 8015336:	4908      	ldr	r1, [pc, #32]	@ (8015358 <__NVIC_SetPriority+0x50>)
 8015338:	88fb      	ldrh	r3, [r7, #6]
 801533a:	f003 030f 	and.w	r3, r3, #15
 801533e:	3b04      	subs	r3, #4
 8015340:	0112      	lsls	r2, r2, #4
 8015342:	b2d2      	uxtb	r2, r2
 8015344:	440b      	add	r3, r1
 8015346:	761a      	strb	r2, [r3, #24]
}
 8015348:	bf00      	nop
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr
 8015354:	e000e100 	.word	0xe000e100
 8015358:	e000ed00 	.word	0xe000ed00

0801535c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801535c:	b580      	push	{r7, lr}
 801535e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015360:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <SysTick_Handler+0x1c>)
 8015362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015364:	f002 fc5a 	bl	8017c1c <xTaskGetSchedulerState>
 8015368:	4603      	mov	r3, r0
 801536a:	2b01      	cmp	r3, #1
 801536c:	d001      	beq.n	8015372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801536e:	f003 fc33 	bl	8018bd8 <xPortSysTickHandler>
  }
}
 8015372:	bf00      	nop
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	e000e010 	.word	0xe000e010

0801537c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015380:	2100      	movs	r1, #0
 8015382:	f06f 0004 	mvn.w	r0, #4
 8015386:	f7ff ffbf 	bl	8015308 <__NVIC_SetPriority>
#endif
}
 801538a:	bf00      	nop
 801538c:	bd80      	pop	{r7, pc}
	...

08015390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015396:	f3ef 8305 	mrs	r3, IPSR
 801539a:	603b      	str	r3, [r7, #0]
  return(result);
 801539c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d003      	beq.n	80153aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80153a2:	f06f 0305 	mvn.w	r3, #5
 80153a6:	607b      	str	r3, [r7, #4]
 80153a8:	e00c      	b.n	80153c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80153aa:	4b0a      	ldr	r3, [pc, #40]	@ (80153d4 <osKernelInitialize+0x44>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d105      	bne.n	80153be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80153b2:	4b08      	ldr	r3, [pc, #32]	@ (80153d4 <osKernelInitialize+0x44>)
 80153b4:	2201      	movs	r2, #1
 80153b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80153b8:	2300      	movs	r3, #0
 80153ba:	607b      	str	r3, [r7, #4]
 80153bc:	e002      	b.n	80153c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80153be:	f04f 33ff 	mov.w	r3, #4294967295
 80153c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80153c4:	687b      	ldr	r3, [r7, #4]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	24001bfc 	.word	0x24001bfc

080153d8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80153de:	f002 fc1d 	bl	8017c1c <xTaskGetSchedulerState>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d004      	beq.n	80153f2 <osKernelGetState+0x1a>
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d105      	bne.n	80153f8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80153ec:	2302      	movs	r3, #2
 80153ee:	607b      	str	r3, [r7, #4]
      break;
 80153f0:	e00c      	b.n	801540c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80153f2:	2303      	movs	r3, #3
 80153f4:	607b      	str	r3, [r7, #4]
      break;
 80153f6:	e009      	b.n	801540c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80153f8:	4b07      	ldr	r3, [pc, #28]	@ (8015418 <osKernelGetState+0x40>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	2b01      	cmp	r3, #1
 80153fe:	d102      	bne.n	8015406 <osKernelGetState+0x2e>
        state = osKernelReady;
 8015400:	2301      	movs	r3, #1
 8015402:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015404:	e001      	b.n	801540a <osKernelGetState+0x32>
        state = osKernelInactive;
 8015406:	2300      	movs	r3, #0
 8015408:	607b      	str	r3, [r7, #4]
      break;
 801540a:	bf00      	nop
  }

  return (state);
 801540c:	687b      	ldr	r3, [r7, #4]
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	24001bfc 	.word	0x24001bfc

0801541c <osKernelStart>:

osStatus_t osKernelStart (void) {
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015422:	f3ef 8305 	mrs	r3, IPSR
 8015426:	603b      	str	r3, [r7, #0]
  return(result);
 8015428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801542a:	2b00      	cmp	r3, #0
 801542c:	d003      	beq.n	8015436 <osKernelStart+0x1a>
    stat = osErrorISR;
 801542e:	f06f 0305 	mvn.w	r3, #5
 8015432:	607b      	str	r3, [r7, #4]
 8015434:	e010      	b.n	8015458 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015436:	4b0b      	ldr	r3, [pc, #44]	@ (8015464 <osKernelStart+0x48>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	2b01      	cmp	r3, #1
 801543c:	d109      	bne.n	8015452 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801543e:	f7ff ff9d 	bl	801537c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015442:	4b08      	ldr	r3, [pc, #32]	@ (8015464 <osKernelStart+0x48>)
 8015444:	2202      	movs	r2, #2
 8015446:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015448:	f001 ff62 	bl	8017310 <vTaskStartScheduler>
      stat = osOK;
 801544c:	2300      	movs	r3, #0
 801544e:	607b      	str	r3, [r7, #4]
 8015450:	e002      	b.n	8015458 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015452:	f04f 33ff 	mov.w	r3, #4294967295
 8015456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015458:	687b      	ldr	r3, [r7, #4]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	24001bfc 	.word	0x24001bfc

08015468 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801546e:	f3ef 8305 	mrs	r3, IPSR
 8015472:	603b      	str	r3, [r7, #0]
  return(result);
 8015474:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015476:	2b00      	cmp	r3, #0
 8015478:	d003      	beq.n	8015482 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801547a:	f002 f875 	bl	8017568 <xTaskGetTickCountFromISR>
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	e002      	b.n	8015488 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8015482:	f002 f861 	bl	8017548 <xTaskGetTickCount>
 8015486:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015488:	687b      	ldr	r3, [r7, #4]
}
 801548a:	4618      	mov	r0, r3
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015492:	b580      	push	{r7, lr}
 8015494:	b08e      	sub	sp, #56	@ 0x38
 8015496:	af04      	add	r7, sp, #16
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801549e:	2300      	movs	r3, #0
 80154a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154a2:	f3ef 8305 	mrs	r3, IPSR
 80154a6:	617b      	str	r3, [r7, #20]
  return(result);
 80154a8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d17e      	bne.n	80155ac <osThreadNew+0x11a>
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d07b      	beq.n	80155ac <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80154b4:	2380      	movs	r3, #128	@ 0x80
 80154b6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80154b8:	2318      	movs	r3, #24
 80154ba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80154bc:	2300      	movs	r3, #0
 80154be:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80154c0:	f04f 33ff 	mov.w	r3, #4294967295
 80154c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d045      	beq.n	8015558 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d002      	beq.n	80154da <osThreadNew+0x48>
        name = attr->name;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	699b      	ldr	r3, [r3, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d002      	beq.n	80154e8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	699b      	ldr	r3, [r3, #24]
 80154e6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d008      	beq.n	8015500 <osThreadNew+0x6e>
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	2b38      	cmp	r3, #56	@ 0x38
 80154f2:	d805      	bhi.n	8015500 <osThreadNew+0x6e>
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	f003 0301 	and.w	r3, r3, #1
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d001      	beq.n	8015504 <osThreadNew+0x72>
        return (NULL);
 8015500:	2300      	movs	r3, #0
 8015502:	e054      	b.n	80155ae <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	695b      	ldr	r3, [r3, #20]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d003      	beq.n	8015514 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	695b      	ldr	r3, [r3, #20]
 8015510:	089b      	lsrs	r3, r3, #2
 8015512:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	689b      	ldr	r3, [r3, #8]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d00e      	beq.n	801553a <osThreadNew+0xa8>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	2ba7      	cmp	r3, #167	@ 0xa7
 8015522:	d90a      	bls.n	801553a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015528:	2b00      	cmp	r3, #0
 801552a:	d006      	beq.n	801553a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	695b      	ldr	r3, [r3, #20]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d002      	beq.n	801553a <osThreadNew+0xa8>
        mem = 1;
 8015534:	2301      	movs	r3, #1
 8015536:	61bb      	str	r3, [r7, #24]
 8015538:	e010      	b.n	801555c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d10c      	bne.n	801555c <osThreadNew+0xca>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d108      	bne.n	801555c <osThreadNew+0xca>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d104      	bne.n	801555c <osThreadNew+0xca>
          mem = 0;
 8015552:	2300      	movs	r3, #0
 8015554:	61bb      	str	r3, [r7, #24]
 8015556:	e001      	b.n	801555c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015558:	2300      	movs	r3, #0
 801555a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	2b01      	cmp	r3, #1
 8015560:	d110      	bne.n	8015584 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801556a:	9202      	str	r2, [sp, #8]
 801556c:	9301      	str	r3, [sp, #4]
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	6a3a      	ldr	r2, [r7, #32]
 8015576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f001 fbf9 	bl	8016d70 <xTaskCreateStatic>
 801557e:	4603      	mov	r3, r0
 8015580:	613b      	str	r3, [r7, #16]
 8015582:	e013      	b.n	80155ac <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015584:	69bb      	ldr	r3, [r7, #24]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d110      	bne.n	80155ac <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801558a:	6a3b      	ldr	r3, [r7, #32]
 801558c:	b29a      	uxth	r2, r3
 801558e:	f107 0310 	add.w	r3, r7, #16
 8015592:	9301      	str	r3, [sp, #4]
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f001 fc47 	bl	8016e30 <xTaskCreate>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d001      	beq.n	80155ac <osThreadNew+0x11a>
            hTask = NULL;
 80155a8:	2300      	movs	r3, #0
 80155aa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80155ac:	693b      	ldr	r3, [r7, #16]
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3728      	adds	r7, #40	@ 0x28
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b082      	sub	sp, #8
 80155ba:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80155bc:	f002 fb1e 	bl	8017bfc <xTaskGetCurrentTaskHandle>
 80155c0:	6078      	str	r0, [r7, #4]

  return (id);
 80155c2:	687b      	ldr	r3, [r7, #4]
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3708      	adds	r7, #8
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}

080155cc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b086      	sub	sp, #24
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155d8:	f3ef 8305 	mrs	r3, IPSR
 80155dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80155de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d003      	beq.n	80155ec <osThreadTerminate+0x20>
    stat = osErrorISR;
 80155e4:	f06f 0305 	mvn.w	r3, #5
 80155e8:	617b      	str	r3, [r7, #20]
 80155ea:	e017      	b.n	801561c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80155ec:	693b      	ldr	r3, [r7, #16]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d103      	bne.n	80155fa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80155f2:	f06f 0303 	mvn.w	r3, #3
 80155f6:	617b      	str	r3, [r7, #20]
 80155f8:	e010      	b.n	801561c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80155fa:	6938      	ldr	r0, [r7, #16]
 80155fc:	f001 fe20 	bl	8017240 <eTaskGetState>
 8015600:	4603      	mov	r3, r0
 8015602:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015604:	7bfb      	ldrb	r3, [r7, #15]
 8015606:	2b04      	cmp	r3, #4
 8015608:	d005      	beq.n	8015616 <osThreadTerminate+0x4a>
      stat = osOK;
 801560a:	2300      	movs	r3, #0
 801560c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 801560e:	6938      	ldr	r0, [r7, #16]
 8015610:	f001 fd6c 	bl	80170ec <vTaskDelete>
 8015614:	e002      	b.n	801561c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015616:	f06f 0302 	mvn.w	r3, #2
 801561a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801561c:	697b      	ldr	r3, [r7, #20]
}
 801561e:	4618      	mov	r0, r3
 8015620:	3718      	adds	r7, #24
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015626:	b580      	push	{r7, lr}
 8015628:	b084      	sub	sp, #16
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801562e:	f3ef 8305 	mrs	r3, IPSR
 8015632:	60bb      	str	r3, [r7, #8]
  return(result);
 8015634:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015636:	2b00      	cmp	r3, #0
 8015638:	d003      	beq.n	8015642 <osDelay+0x1c>
    stat = osErrorISR;
 801563a:	f06f 0305 	mvn.w	r3, #5
 801563e:	60fb      	str	r3, [r7, #12]
 8015640:	e007      	b.n	8015652 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015642:	2300      	movs	r3, #0
 8015644:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d002      	beq.n	8015652 <osDelay+0x2c>
      vTaskDelay(ticks);
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f001 fdc1 	bl	80171d4 <vTaskDelay>
    }
  }

  return (stat);
 8015652:	68fb      	ldr	r3, [r7, #12]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3710      	adds	r7, #16
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801565c:	b580      	push	{r7, lr}
 801565e:	b08a      	sub	sp, #40	@ 0x28
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015668:	2300      	movs	r3, #0
 801566a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801566c:	f3ef 8305 	mrs	r3, IPSR
 8015670:	613b      	str	r3, [r7, #16]
  return(result);
 8015672:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015674:	2b00      	cmp	r3, #0
 8015676:	d175      	bne.n	8015764 <osSemaphoreNew+0x108>
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d072      	beq.n	8015764 <osSemaphoreNew+0x108>
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	429a      	cmp	r2, r3
 8015684:	d86e      	bhi.n	8015764 <osSemaphoreNew+0x108>
    mem = -1;
 8015686:	f04f 33ff 	mov.w	r3, #4294967295
 801568a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d015      	beq.n	80156be <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	689b      	ldr	r3, [r3, #8]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d006      	beq.n	80156a8 <osSemaphoreNew+0x4c>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	68db      	ldr	r3, [r3, #12]
 801569e:	2b4f      	cmp	r3, #79	@ 0x4f
 80156a0:	d902      	bls.n	80156a8 <osSemaphoreNew+0x4c>
        mem = 1;
 80156a2:	2301      	movs	r3, #1
 80156a4:	61bb      	str	r3, [r7, #24]
 80156a6:	e00c      	b.n	80156c2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	689b      	ldr	r3, [r3, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d108      	bne.n	80156c2 <osSemaphoreNew+0x66>
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d104      	bne.n	80156c2 <osSemaphoreNew+0x66>
          mem = 0;
 80156b8:	2300      	movs	r3, #0
 80156ba:	61bb      	str	r3, [r7, #24]
 80156bc:	e001      	b.n	80156c2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80156be:	2300      	movs	r3, #0
 80156c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156c8:	d04c      	beq.n	8015764 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d128      	bne.n	8015722 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	2b01      	cmp	r3, #1
 80156d4:	d10a      	bne.n	80156ec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	689b      	ldr	r3, [r3, #8]
 80156da:	2203      	movs	r2, #3
 80156dc:	9200      	str	r2, [sp, #0]
 80156de:	2200      	movs	r2, #0
 80156e0:	2100      	movs	r1, #0
 80156e2:	2001      	movs	r0, #1
 80156e4:	f000 fb82 	bl	8015dec <xQueueGenericCreateStatic>
 80156e8:	61f8      	str	r0, [r7, #28]
 80156ea:	e005      	b.n	80156f8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80156ec:	2203      	movs	r2, #3
 80156ee:	2100      	movs	r1, #0
 80156f0:	2001      	movs	r0, #1
 80156f2:	f000 fbf8 	bl	8015ee6 <xQueueGenericCreate>
 80156f6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d022      	beq.n	8015744 <osSemaphoreNew+0xe8>
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d01f      	beq.n	8015744 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015704:	2300      	movs	r3, #0
 8015706:	2200      	movs	r2, #0
 8015708:	2100      	movs	r1, #0
 801570a:	69f8      	ldr	r0, [r7, #28]
 801570c:	f000 fcb8 	bl	8016080 <xQueueGenericSend>
 8015710:	4603      	mov	r3, r0
 8015712:	2b01      	cmp	r3, #1
 8015714:	d016      	beq.n	8015744 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015716:	69f8      	ldr	r0, [r7, #28]
 8015718:	f001 f956 	bl	80169c8 <vQueueDelete>
            hSemaphore = NULL;
 801571c:	2300      	movs	r3, #0
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	e010      	b.n	8015744 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	2b01      	cmp	r3, #1
 8015726:	d108      	bne.n	801573a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	689b      	ldr	r3, [r3, #8]
 801572c:	461a      	mov	r2, r3
 801572e:	68b9      	ldr	r1, [r7, #8]
 8015730:	68f8      	ldr	r0, [r7, #12]
 8015732:	f000 fc36 	bl	8015fa2 <xQueueCreateCountingSemaphoreStatic>
 8015736:	61f8      	str	r0, [r7, #28]
 8015738:	e004      	b.n	8015744 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801573a:	68b9      	ldr	r1, [r7, #8]
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f000 fc69 	bl	8016014 <xQueueCreateCountingSemaphore>
 8015742:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015744:	69fb      	ldr	r3, [r7, #28]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00c      	beq.n	8015764 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d003      	beq.n	8015758 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	617b      	str	r3, [r7, #20]
 8015756:	e001      	b.n	801575c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015758:	2300      	movs	r3, #0
 801575a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801575c:	6979      	ldr	r1, [r7, #20]
 801575e:	69f8      	ldr	r0, [r7, #28]
 8015760:	f001 fa7e 	bl	8016c60 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015764:	69fb      	ldr	r3, [r7, #28]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3720      	adds	r7, #32
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
	...

08015770 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801577e:	2300      	movs	r3, #0
 8015780:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d103      	bne.n	8015790 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015788:	f06f 0303 	mvn.w	r3, #3
 801578c:	617b      	str	r3, [r7, #20]
 801578e:	e039      	b.n	8015804 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015790:	f3ef 8305 	mrs	r3, IPSR
 8015794:	60fb      	str	r3, [r7, #12]
  return(result);
 8015796:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015798:	2b00      	cmp	r3, #0
 801579a:	d022      	beq.n	80157e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d003      	beq.n	80157aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80157a2:	f06f 0303 	mvn.w	r3, #3
 80157a6:	617b      	str	r3, [r7, #20]
 80157a8:	e02c      	b.n	8015804 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80157aa:	2300      	movs	r3, #0
 80157ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80157ae:	f107 0308 	add.w	r3, r7, #8
 80157b2:	461a      	mov	r2, r3
 80157b4:	2100      	movs	r1, #0
 80157b6:	6938      	ldr	r0, [r7, #16]
 80157b8:	f001 f884 	bl	80168c4 <xQueueReceiveFromISR>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d003      	beq.n	80157ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80157c2:	f06f 0302 	mvn.w	r3, #2
 80157c6:	617b      	str	r3, [r7, #20]
 80157c8:	e01c      	b.n	8015804 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d019      	beq.n	8015804 <osSemaphoreAcquire+0x94>
 80157d0:	4b0f      	ldr	r3, [pc, #60]	@ (8015810 <osSemaphoreAcquire+0xa0>)
 80157d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157d6:	601a      	str	r2, [r3, #0]
 80157d8:	f3bf 8f4f 	dsb	sy
 80157dc:	f3bf 8f6f 	isb	sy
 80157e0:	e010      	b.n	8015804 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80157e2:	6839      	ldr	r1, [r7, #0]
 80157e4:	6938      	ldr	r0, [r7, #16]
 80157e6:	f000 ff5d 	bl	80166a4 <xQueueSemaphoreTake>
 80157ea:	4603      	mov	r3, r0
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d009      	beq.n	8015804 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d003      	beq.n	80157fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80157f6:	f06f 0301 	mvn.w	r3, #1
 80157fa:	617b      	str	r3, [r7, #20]
 80157fc:	e002      	b.n	8015804 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80157fe:	f06f 0302 	mvn.w	r3, #2
 8015802:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015804:	697b      	ldr	r3, [r7, #20]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3718      	adds	r7, #24
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	e000ed04 	.word	0xe000ed04

08015814 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015814:	b580      	push	{r7, lr}
 8015816:	b086      	sub	sp, #24
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015820:	2300      	movs	r3, #0
 8015822:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d103      	bne.n	8015832 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801582a:	f06f 0303 	mvn.w	r3, #3
 801582e:	617b      	str	r3, [r7, #20]
 8015830:	e02c      	b.n	801588c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015832:	f3ef 8305 	mrs	r3, IPSR
 8015836:	60fb      	str	r3, [r7, #12]
  return(result);
 8015838:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801583a:	2b00      	cmp	r3, #0
 801583c:	d01a      	beq.n	8015874 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801583e:	2300      	movs	r3, #0
 8015840:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015842:	f107 0308 	add.w	r3, r7, #8
 8015846:	4619      	mov	r1, r3
 8015848:	6938      	ldr	r0, [r7, #16]
 801584a:	f000 fdb9 	bl	80163c0 <xQueueGiveFromISR>
 801584e:	4603      	mov	r3, r0
 8015850:	2b01      	cmp	r3, #1
 8015852:	d003      	beq.n	801585c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015854:	f06f 0302 	mvn.w	r3, #2
 8015858:	617b      	str	r3, [r7, #20]
 801585a:	e017      	b.n	801588c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d014      	beq.n	801588c <osSemaphoreRelease+0x78>
 8015862:	4b0d      	ldr	r3, [pc, #52]	@ (8015898 <osSemaphoreRelease+0x84>)
 8015864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015868:	601a      	str	r2, [r3, #0]
 801586a:	f3bf 8f4f 	dsb	sy
 801586e:	f3bf 8f6f 	isb	sy
 8015872:	e00b      	b.n	801588c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015874:	2300      	movs	r3, #0
 8015876:	2200      	movs	r2, #0
 8015878:	2100      	movs	r1, #0
 801587a:	6938      	ldr	r0, [r7, #16]
 801587c:	f000 fc00 	bl	8016080 <xQueueGenericSend>
 8015880:	4603      	mov	r3, r0
 8015882:	2b01      	cmp	r3, #1
 8015884:	d002      	beq.n	801588c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015886:	f06f 0302 	mvn.w	r3, #2
 801588a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801588c:	697b      	ldr	r3, [r7, #20]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3718      	adds	r7, #24
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	e000ed04 	.word	0xe000ed04

0801589c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801589c:	b580      	push	{r7, lr}
 801589e:	b086      	sub	sp, #24
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158a8:	f3ef 8305 	mrs	r3, IPSR
 80158ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80158ae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d003      	beq.n	80158bc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80158b4:	f06f 0305 	mvn.w	r3, #5
 80158b8:	617b      	str	r3, [r7, #20]
 80158ba:	e00e      	b.n	80158da <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d103      	bne.n	80158ca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80158c2:	f06f 0303 	mvn.w	r3, #3
 80158c6:	617b      	str	r3, [r7, #20]
 80158c8:	e007      	b.n	80158da <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80158ca:	6938      	ldr	r0, [r7, #16]
 80158cc:	f001 f9f2 	bl	8016cb4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80158d0:	2300      	movs	r3, #0
 80158d2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80158d4:	6938      	ldr	r0, [r7, #16]
 80158d6:	f001 f877 	bl	80169c8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80158da:	697b      	ldr	r3, [r7, #20]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3718      	adds	r7, #24
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b08a      	sub	sp, #40	@ 0x28
 80158e8:	af02      	add	r7, sp, #8
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80158f0:	2300      	movs	r3, #0
 80158f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158f4:	f3ef 8305 	mrs	r3, IPSR
 80158f8:	613b      	str	r3, [r7, #16]
  return(result);
 80158fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d15f      	bne.n	80159c0 <osMessageQueueNew+0xdc>
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d05c      	beq.n	80159c0 <osMessageQueueNew+0xdc>
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d059      	beq.n	80159c0 <osMessageQueueNew+0xdc>
    mem = -1;
 801590c:	f04f 33ff 	mov.w	r3, #4294967295
 8015910:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d029      	beq.n	801596c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	689b      	ldr	r3, [r3, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d012      	beq.n	8015946 <osMessageQueueNew+0x62>
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	2b4f      	cmp	r3, #79	@ 0x4f
 8015926:	d90e      	bls.n	8015946 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00a      	beq.n	8015946 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	695a      	ldr	r2, [r3, #20]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	68b9      	ldr	r1, [r7, #8]
 8015938:	fb01 f303 	mul.w	r3, r1, r3
 801593c:	429a      	cmp	r2, r3
 801593e:	d302      	bcc.n	8015946 <osMessageQueueNew+0x62>
        mem = 1;
 8015940:	2301      	movs	r3, #1
 8015942:	61bb      	str	r3, [r7, #24]
 8015944:	e014      	b.n	8015970 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	689b      	ldr	r3, [r3, #8]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d110      	bne.n	8015970 <osMessageQueueNew+0x8c>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	68db      	ldr	r3, [r3, #12]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10c      	bne.n	8015970 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801595a:	2b00      	cmp	r3, #0
 801595c:	d108      	bne.n	8015970 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	695b      	ldr	r3, [r3, #20]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d104      	bne.n	8015970 <osMessageQueueNew+0x8c>
          mem = 0;
 8015966:	2300      	movs	r3, #0
 8015968:	61bb      	str	r3, [r7, #24]
 801596a:	e001      	b.n	8015970 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	2b01      	cmp	r3, #1
 8015974:	d10b      	bne.n	801598e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	691a      	ldr	r2, [r3, #16]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	689b      	ldr	r3, [r3, #8]
 801597e:	2100      	movs	r1, #0
 8015980:	9100      	str	r1, [sp, #0]
 8015982:	68b9      	ldr	r1, [r7, #8]
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f000 fa31 	bl	8015dec <xQueueGenericCreateStatic>
 801598a:	61f8      	str	r0, [r7, #28]
 801598c:	e008      	b.n	80159a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d105      	bne.n	80159a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015994:	2200      	movs	r2, #0
 8015996:	68b9      	ldr	r1, [r7, #8]
 8015998:	68f8      	ldr	r0, [r7, #12]
 801599a:	f000 faa4 	bl	8015ee6 <xQueueGenericCreate>
 801599e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80159a0:	69fb      	ldr	r3, [r7, #28]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00c      	beq.n	80159c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d003      	beq.n	80159b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	617b      	str	r3, [r7, #20]
 80159b2:	e001      	b.n	80159b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80159b4:	2300      	movs	r3, #0
 80159b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80159b8:	6979      	ldr	r1, [r7, #20]
 80159ba:	69f8      	ldr	r0, [r7, #28]
 80159bc:	f001 f950 	bl	8016c60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80159c0:	69fb      	ldr	r3, [r7, #28]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3720      	adds	r7, #32
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
	...

080159cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b088      	sub	sp, #32
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	603b      	str	r3, [r7, #0]
 80159d8:	4613      	mov	r3, r2
 80159da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80159e0:	2300      	movs	r3, #0
 80159e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159e4:	f3ef 8305 	mrs	r3, IPSR
 80159e8:	617b      	str	r3, [r7, #20]
  return(result);
 80159ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d028      	beq.n	8015a42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80159f0:	69bb      	ldr	r3, [r7, #24]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d005      	beq.n	8015a02 <osMessageQueuePut+0x36>
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d002      	beq.n	8015a02 <osMessageQueuePut+0x36>
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d003      	beq.n	8015a0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015a02:	f06f 0303 	mvn.w	r3, #3
 8015a06:	61fb      	str	r3, [r7, #28]
 8015a08:	e038      	b.n	8015a7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015a0e:	f107 0210 	add.w	r2, r7, #16
 8015a12:	2300      	movs	r3, #0
 8015a14:	68b9      	ldr	r1, [r7, #8]
 8015a16:	69b8      	ldr	r0, [r7, #24]
 8015a18:	f000 fc34 	bl	8016284 <xQueueGenericSendFromISR>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b01      	cmp	r3, #1
 8015a20:	d003      	beq.n	8015a2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015a22:	f06f 0302 	mvn.w	r3, #2
 8015a26:	61fb      	str	r3, [r7, #28]
 8015a28:	e028      	b.n	8015a7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d025      	beq.n	8015a7c <osMessageQueuePut+0xb0>
 8015a30:	4b15      	ldr	r3, [pc, #84]	@ (8015a88 <osMessageQueuePut+0xbc>)
 8015a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a36:	601a      	str	r2, [r3, #0]
 8015a38:	f3bf 8f4f 	dsb	sy
 8015a3c:	f3bf 8f6f 	isb	sy
 8015a40:	e01c      	b.n	8015a7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015a42:	69bb      	ldr	r3, [r7, #24]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d002      	beq.n	8015a4e <osMessageQueuePut+0x82>
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d103      	bne.n	8015a56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015a4e:	f06f 0303 	mvn.w	r3, #3
 8015a52:	61fb      	str	r3, [r7, #28]
 8015a54:	e012      	b.n	8015a7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015a56:	2300      	movs	r3, #0
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	68b9      	ldr	r1, [r7, #8]
 8015a5c:	69b8      	ldr	r0, [r7, #24]
 8015a5e:	f000 fb0f 	bl	8016080 <xQueueGenericSend>
 8015a62:	4603      	mov	r3, r0
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d009      	beq.n	8015a7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d003      	beq.n	8015a76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015a6e:	f06f 0301 	mvn.w	r3, #1
 8015a72:	61fb      	str	r3, [r7, #28]
 8015a74:	e002      	b.n	8015a7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015a76:	f06f 0302 	mvn.w	r3, #2
 8015a7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015a7c:	69fb      	ldr	r3, [r7, #28]
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3720      	adds	r7, #32
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	e000ed04 	.word	0xe000ed04

08015a8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b088      	sub	sp, #32
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
 8015a98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015aa2:	f3ef 8305 	mrs	r3, IPSR
 8015aa6:	617b      	str	r3, [r7, #20]
  return(result);
 8015aa8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d028      	beq.n	8015b00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d005      	beq.n	8015ac0 <osMessageQueueGet+0x34>
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d002      	beq.n	8015ac0 <osMessageQueueGet+0x34>
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d003      	beq.n	8015ac8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015ac0:	f06f 0303 	mvn.w	r3, #3
 8015ac4:	61fb      	str	r3, [r7, #28]
 8015ac6:	e037      	b.n	8015b38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015acc:	f107 0310 	add.w	r3, r7, #16
 8015ad0:	461a      	mov	r2, r3
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	69b8      	ldr	r0, [r7, #24]
 8015ad6:	f000 fef5 	bl	80168c4 <xQueueReceiveFromISR>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d003      	beq.n	8015ae8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015ae0:	f06f 0302 	mvn.w	r3, #2
 8015ae4:	61fb      	str	r3, [r7, #28]
 8015ae6:	e027      	b.n	8015b38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d024      	beq.n	8015b38 <osMessageQueueGet+0xac>
 8015aee:	4b15      	ldr	r3, [pc, #84]	@ (8015b44 <osMessageQueueGet+0xb8>)
 8015af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015af4:	601a      	str	r2, [r3, #0]
 8015af6:	f3bf 8f4f 	dsb	sy
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	e01b      	b.n	8015b38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <osMessageQueueGet+0x80>
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d103      	bne.n	8015b14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015b0c:	f06f 0303 	mvn.w	r3, #3
 8015b10:	61fb      	str	r3, [r7, #28]
 8015b12:	e011      	b.n	8015b38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015b14:	683a      	ldr	r2, [r7, #0]
 8015b16:	68b9      	ldr	r1, [r7, #8]
 8015b18:	69b8      	ldr	r0, [r7, #24]
 8015b1a:	f000 fce1 	bl	80164e0 <xQueueReceive>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d009      	beq.n	8015b38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d003      	beq.n	8015b32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015b2a:	f06f 0301 	mvn.w	r3, #1
 8015b2e:	61fb      	str	r3, [r7, #28]
 8015b30:	e002      	b.n	8015b38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015b32:	f06f 0302 	mvn.w	r3, #2
 8015b36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015b38:	69fb      	ldr	r3, [r7, #28]
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3720      	adds	r7, #32
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	e000ed04 	.word	0xe000ed04

08015b48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015b48:	b480      	push	{r7}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	60f8      	str	r0, [r7, #12]
 8015b50:	60b9      	str	r1, [r7, #8]
 8015b52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	4a07      	ldr	r2, [pc, #28]	@ (8015b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8015b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	4a06      	ldr	r2, [pc, #24]	@ (8015b78 <vApplicationGetIdleTaskMemory+0x30>)
 8015b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2280      	movs	r2, #128	@ 0x80
 8015b64:	601a      	str	r2, [r3, #0]
}
 8015b66:	bf00      	nop
 8015b68:	3714      	adds	r7, #20
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b70:	4770      	bx	lr
 8015b72:	bf00      	nop
 8015b74:	24001c00 	.word	0x24001c00
 8015b78:	24001ca8 	.word	0x24001ca8

08015b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015b7c:	b480      	push	{r7}
 8015b7e:	b085      	sub	sp, #20
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	60f8      	str	r0, [r7, #12]
 8015b84:	60b9      	str	r1, [r7, #8]
 8015b86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	4a07      	ldr	r2, [pc, #28]	@ (8015ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8015b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015b8e:	68bb      	ldr	r3, [r7, #8]
 8015b90:	4a06      	ldr	r2, [pc, #24]	@ (8015bac <vApplicationGetTimerTaskMemory+0x30>)
 8015b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015b9a:	601a      	str	r2, [r3, #0]
}
 8015b9c:	bf00      	nop
 8015b9e:	3714      	adds	r7, #20
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr
 8015ba8:	24001ea8 	.word	0x24001ea8
 8015bac:	24001f50 	.word	0x24001f50

08015bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f103 0208 	add.w	r2, r3, #8
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8015bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f103 0208 	add.w	r2, r3, #8
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f103 0208 	add.w	r2, r3, #8
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2200      	movs	r2, #0
 8015be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015be4:	bf00      	nop
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015bfe:	bf00      	nop
 8015c00:	370c      	adds	r7, #12
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr

08015c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015c0a:	b480      	push	{r7}
 8015c0c:	b085      	sub	sp, #20
 8015c0e:	af00      	add	r7, sp, #0
 8015c10:	6078      	str	r0, [r7, #4]
 8015c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	68fa      	ldr	r2, [r7, #12]
 8015c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	689a      	ldr	r2, [r3, #8]
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	689b      	ldr	r3, [r3, #8]
 8015c2c:	683a      	ldr	r2, [r7, #0]
 8015c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	683a      	ldr	r2, [r7, #0]
 8015c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	687a      	ldr	r2, [r7, #4]
 8015c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	1c5a      	adds	r2, r3, #1
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	601a      	str	r2, [r3, #0]
}
 8015c46:	bf00      	nop
 8015c48:	3714      	adds	r7, #20
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c50:	4770      	bx	lr

08015c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015c52:	b480      	push	{r7}
 8015c54:	b085      	sub	sp, #20
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	6078      	str	r0, [r7, #4]
 8015c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c68:	d103      	bne.n	8015c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	691b      	ldr	r3, [r3, #16]
 8015c6e:	60fb      	str	r3, [r7, #12]
 8015c70:	e00c      	b.n	8015c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	3308      	adds	r3, #8
 8015c76:	60fb      	str	r3, [r7, #12]
 8015c78:	e002      	b.n	8015c80 <vListInsert+0x2e>
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	685b      	ldr	r3, [r3, #4]
 8015c7e:	60fb      	str	r3, [r7, #12]
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	68ba      	ldr	r2, [r7, #8]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d2f6      	bcs.n	8015c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	685a      	ldr	r2, [r3, #4]
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	683a      	ldr	r2, [r7, #0]
 8015c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	68fa      	ldr	r2, [r7, #12]
 8015ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	683a      	ldr	r2, [r7, #0]
 8015ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	1c5a      	adds	r2, r3, #1
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	601a      	str	r2, [r3, #0]
}
 8015cb8:	bf00      	nop
 8015cba:	3714      	adds	r7, #20
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b085      	sub	sp, #20
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	691b      	ldr	r3, [r3, #16]
 8015cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	6892      	ldr	r2, [r2, #8]
 8015cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	6852      	ldr	r2, [r2, #4]
 8015ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d103      	bne.n	8015cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	689a      	ldr	r2, [r3, #8]
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	1e5a      	subs	r2, r3, #1
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3714      	adds	r7, #20
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10b      	bne.n	8015d44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015d3e:	bf00      	nop
 8015d40:	bf00      	nop
 8015d42:	e7fd      	b.n	8015d40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015d44:	f002 feb8 	bl	8018ab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d50:	68f9      	ldr	r1, [r7, #12]
 8015d52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015d54:	fb01 f303 	mul.w	r3, r1, r3
 8015d58:	441a      	add	r2, r3
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2200      	movs	r2, #0
 8015d62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681a      	ldr	r2, [r3, #0]
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d74:	3b01      	subs	r3, #1
 8015d76:	68f9      	ldr	r1, [r7, #12]
 8015d78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015d7a:	fb01 f303 	mul.w	r3, r1, r3
 8015d7e:	441a      	add	r2, r3
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	22ff      	movs	r2, #255	@ 0xff
 8015d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	22ff      	movs	r2, #255	@ 0xff
 8015d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d114      	bne.n	8015dc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	691b      	ldr	r3, [r3, #16]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d01a      	beq.n	8015dd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	3310      	adds	r3, #16
 8015da6:	4618      	mov	r0, r3
 8015da8:	f001 fd62 	bl	8017870 <xTaskRemoveFromEventList>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d012      	beq.n	8015dd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015db2:	4b0d      	ldr	r3, [pc, #52]	@ (8015de8 <xQueueGenericReset+0xd0>)
 8015db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015db8:	601a      	str	r2, [r3, #0]
 8015dba:	f3bf 8f4f 	dsb	sy
 8015dbe:	f3bf 8f6f 	isb	sy
 8015dc2:	e009      	b.n	8015dd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	3310      	adds	r3, #16
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7ff fef1 	bl	8015bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	3324      	adds	r3, #36	@ 0x24
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7ff feec 	bl	8015bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015dd8:	f002 fea0 	bl	8018b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015ddc:	2301      	movs	r3, #1
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3710      	adds	r7, #16
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	e000ed04 	.word	0xe000ed04

08015dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b08e      	sub	sp, #56	@ 0x38
 8015df0:	af02      	add	r7, sp, #8
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10b      	bne.n	8015e18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015e12:	bf00      	nop
 8015e14:	bf00      	nop
 8015e16:	e7fd      	b.n	8015e14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10b      	bne.n	8015e36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8015e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e22:	f383 8811 	msr	BASEPRI, r3
 8015e26:	f3bf 8f6f 	isb	sy
 8015e2a:	f3bf 8f4f 	dsb	sy
 8015e2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015e30:	bf00      	nop
 8015e32:	bf00      	nop
 8015e34:	e7fd      	b.n	8015e32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d002      	beq.n	8015e42 <xQueueGenericCreateStatic+0x56>
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d001      	beq.n	8015e46 <xQueueGenericCreateStatic+0x5a>
 8015e42:	2301      	movs	r3, #1
 8015e44:	e000      	b.n	8015e48 <xQueueGenericCreateStatic+0x5c>
 8015e46:	2300      	movs	r3, #0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d10b      	bne.n	8015e64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8015e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e50:	f383 8811 	msr	BASEPRI, r3
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	f3bf 8f4f 	dsb	sy
 8015e5c:	623b      	str	r3, [r7, #32]
}
 8015e5e:	bf00      	nop
 8015e60:	bf00      	nop
 8015e62:	e7fd      	b.n	8015e60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d102      	bne.n	8015e70 <xQueueGenericCreateStatic+0x84>
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <xQueueGenericCreateStatic+0x88>
 8015e70:	2301      	movs	r3, #1
 8015e72:	e000      	b.n	8015e76 <xQueueGenericCreateStatic+0x8a>
 8015e74:	2300      	movs	r3, #0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d10b      	bne.n	8015e92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	61fb      	str	r3, [r7, #28]
}
 8015e8c:	bf00      	nop
 8015e8e:	bf00      	nop
 8015e90:	e7fd      	b.n	8015e8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015e92:	2350      	movs	r3, #80	@ 0x50
 8015e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	2b50      	cmp	r3, #80	@ 0x50
 8015e9a:	d00b      	beq.n	8015eb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8015e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ea0:	f383 8811 	msr	BASEPRI, r3
 8015ea4:	f3bf 8f6f 	isb	sy
 8015ea8:	f3bf 8f4f 	dsb	sy
 8015eac:	61bb      	str	r3, [r7, #24]
}
 8015eae:	bf00      	nop
 8015eb0:	bf00      	nop
 8015eb2:	e7fd      	b.n	8015eb0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015eb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00d      	beq.n	8015edc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ec8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ece:	9300      	str	r3, [sp, #0]
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	68b9      	ldr	r1, [r7, #8]
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f000 f840 	bl	8015f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3730      	adds	r7, #48	@ 0x30
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b08a      	sub	sp, #40	@ 0x28
 8015eea:	af02      	add	r7, sp, #8
 8015eec:	60f8      	str	r0, [r7, #12]
 8015eee:	60b9      	str	r1, [r7, #8]
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d10b      	bne.n	8015f12 <xQueueGenericCreate+0x2c>
	__asm volatile
 8015efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015efe:	f383 8811 	msr	BASEPRI, r3
 8015f02:	f3bf 8f6f 	isb	sy
 8015f06:	f3bf 8f4f 	dsb	sy
 8015f0a:	613b      	str	r3, [r7, #16]
}
 8015f0c:	bf00      	nop
 8015f0e:	bf00      	nop
 8015f10:	e7fd      	b.n	8015f0e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	68ba      	ldr	r2, [r7, #8]
 8015f16:	fb02 f303 	mul.w	r3, r2, r3
 8015f1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	3350      	adds	r3, #80	@ 0x50
 8015f20:	4618      	mov	r0, r3
 8015f22:	f002 feeb 	bl	8018cfc <pvPortMalloc>
 8015f26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d011      	beq.n	8015f52 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015f2e:	69bb      	ldr	r3, [r7, #24]
 8015f30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	3350      	adds	r3, #80	@ 0x50
 8015f36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015f40:	79fa      	ldrb	r2, [r7, #7]
 8015f42:	69bb      	ldr	r3, [r7, #24]
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	4613      	mov	r3, r2
 8015f48:	697a      	ldr	r2, [r7, #20]
 8015f4a:	68b9      	ldr	r1, [r7, #8]
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f000 f805 	bl	8015f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015f52:	69bb      	ldr	r3, [r7, #24]
	}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3720      	adds	r7, #32
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d103      	bne.n	8015f78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015f70:	69bb      	ldr	r3, [r7, #24]
 8015f72:	69ba      	ldr	r2, [r7, #24]
 8015f74:	601a      	str	r2, [r3, #0]
 8015f76:	e002      	b.n	8015f7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015f78:	69bb      	ldr	r3, [r7, #24]
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	68fa      	ldr	r2, [r7, #12]
 8015f82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	68ba      	ldr	r2, [r7, #8]
 8015f88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015f8a:	2101      	movs	r1, #1
 8015f8c:	69b8      	ldr	r0, [r7, #24]
 8015f8e:	f7ff fec3 	bl	8015d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	78fa      	ldrb	r2, [r7, #3]
 8015f96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015f9a:	bf00      	nop
 8015f9c:	3710      	adds	r7, #16
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}

08015fa2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015fa2:	b580      	push	{r7, lr}
 8015fa4:	b08a      	sub	sp, #40	@ 0x28
 8015fa6:	af02      	add	r7, sp, #8
 8015fa8:	60f8      	str	r0, [r7, #12]
 8015faa:	60b9      	str	r1, [r7, #8]
 8015fac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d10b      	bne.n	8015fcc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8015fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fb8:	f383 8811 	msr	BASEPRI, r3
 8015fbc:	f3bf 8f6f 	isb	sy
 8015fc0:	f3bf 8f4f 	dsb	sy
 8015fc4:	61bb      	str	r3, [r7, #24]
}
 8015fc6:	bf00      	nop
 8015fc8:	bf00      	nop
 8015fca:	e7fd      	b.n	8015fc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015fcc:	68ba      	ldr	r2, [r7, #8]
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	429a      	cmp	r2, r3
 8015fd2:	d90b      	bls.n	8015fec <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8015fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fd8:	f383 8811 	msr	BASEPRI, r3
 8015fdc:	f3bf 8f6f 	isb	sy
 8015fe0:	f3bf 8f4f 	dsb	sy
 8015fe4:	617b      	str	r3, [r7, #20]
}
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	e7fd      	b.n	8015fe8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015fec:	2302      	movs	r3, #2
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	68f8      	ldr	r0, [r7, #12]
 8015ff8:	f7ff fef8 	bl	8015dec <xQueueGenericCreateStatic>
 8015ffc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d002      	beq.n	801600a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	68ba      	ldr	r2, [r7, #8]
 8016008:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801600a:	69fb      	ldr	r3, [r7, #28]
	}
 801600c:	4618      	mov	r0, r3
 801600e:	3720      	adds	r7, #32
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
 801601c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d10b      	bne.n	801603c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8016024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016028:	f383 8811 	msr	BASEPRI, r3
 801602c:	f3bf 8f6f 	isb	sy
 8016030:	f3bf 8f4f 	dsb	sy
 8016034:	613b      	str	r3, [r7, #16]
}
 8016036:	bf00      	nop
 8016038:	bf00      	nop
 801603a:	e7fd      	b.n	8016038 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801603c:	683a      	ldr	r2, [r7, #0]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	429a      	cmp	r2, r3
 8016042:	d90b      	bls.n	801605c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8016044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016048:	f383 8811 	msr	BASEPRI, r3
 801604c:	f3bf 8f6f 	isb	sy
 8016050:	f3bf 8f4f 	dsb	sy
 8016054:	60fb      	str	r3, [r7, #12]
}
 8016056:	bf00      	nop
 8016058:	bf00      	nop
 801605a:	e7fd      	b.n	8016058 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801605c:	2202      	movs	r2, #2
 801605e:	2100      	movs	r1, #0
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f7ff ff40 	bl	8015ee6 <xQueueGenericCreate>
 8016066:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d002      	beq.n	8016074 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	683a      	ldr	r2, [r7, #0]
 8016072:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016074:	697b      	ldr	r3, [r7, #20]
	}
 8016076:	4618      	mov	r0, r3
 8016078:	3718      	adds	r7, #24
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
	...

08016080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b08e      	sub	sp, #56	@ 0x38
 8016084:	af00      	add	r7, sp, #0
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
 801608c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801608e:	2300      	movs	r3, #0
 8016090:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016098:	2b00      	cmp	r3, #0
 801609a:	d10b      	bne.n	80160b4 <xQueueGenericSend+0x34>
	__asm volatile
 801609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160a0:	f383 8811 	msr	BASEPRI, r3
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	f3bf 8f4f 	dsb	sy
 80160ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80160ae:	bf00      	nop
 80160b0:	bf00      	nop
 80160b2:	e7fd      	b.n	80160b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d103      	bne.n	80160c2 <xQueueGenericSend+0x42>
 80160ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d101      	bne.n	80160c6 <xQueueGenericSend+0x46>
 80160c2:	2301      	movs	r3, #1
 80160c4:	e000      	b.n	80160c8 <xQueueGenericSend+0x48>
 80160c6:	2300      	movs	r3, #0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10b      	bne.n	80160e4 <xQueueGenericSend+0x64>
	__asm volatile
 80160cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160d0:	f383 8811 	msr	BASEPRI, r3
 80160d4:	f3bf 8f6f 	isb	sy
 80160d8:	f3bf 8f4f 	dsb	sy
 80160dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80160de:	bf00      	nop
 80160e0:	bf00      	nop
 80160e2:	e7fd      	b.n	80160e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	2b02      	cmp	r3, #2
 80160e8:	d103      	bne.n	80160f2 <xQueueGenericSend+0x72>
 80160ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160ee:	2b01      	cmp	r3, #1
 80160f0:	d101      	bne.n	80160f6 <xQueueGenericSend+0x76>
 80160f2:	2301      	movs	r3, #1
 80160f4:	e000      	b.n	80160f8 <xQueueGenericSend+0x78>
 80160f6:	2300      	movs	r3, #0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d10b      	bne.n	8016114 <xQueueGenericSend+0x94>
	__asm volatile
 80160fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016100:	f383 8811 	msr	BASEPRI, r3
 8016104:	f3bf 8f6f 	isb	sy
 8016108:	f3bf 8f4f 	dsb	sy
 801610c:	623b      	str	r3, [r7, #32]
}
 801610e:	bf00      	nop
 8016110:	bf00      	nop
 8016112:	e7fd      	b.n	8016110 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016114:	f001 fd82 	bl	8017c1c <xTaskGetSchedulerState>
 8016118:	4603      	mov	r3, r0
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <xQueueGenericSend+0xa4>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <xQueueGenericSend+0xa8>
 8016124:	2301      	movs	r3, #1
 8016126:	e000      	b.n	801612a <xQueueGenericSend+0xaa>
 8016128:	2300      	movs	r3, #0
 801612a:	2b00      	cmp	r3, #0
 801612c:	d10b      	bne.n	8016146 <xQueueGenericSend+0xc6>
	__asm volatile
 801612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016132:	f383 8811 	msr	BASEPRI, r3
 8016136:	f3bf 8f6f 	isb	sy
 801613a:	f3bf 8f4f 	dsb	sy
 801613e:	61fb      	str	r3, [r7, #28]
}
 8016140:	bf00      	nop
 8016142:	bf00      	nop
 8016144:	e7fd      	b.n	8016142 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016146:	f002 fcb7 	bl	8018ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801614c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016152:	429a      	cmp	r2, r3
 8016154:	d302      	bcc.n	801615c <xQueueGenericSend+0xdc>
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	2b02      	cmp	r3, #2
 801615a:	d129      	bne.n	80161b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801615c:	683a      	ldr	r2, [r7, #0]
 801615e:	68b9      	ldr	r1, [r7, #8]
 8016160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016162:	f000 fc6d 	bl	8016a40 <prvCopyDataToQueue>
 8016166:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616c:	2b00      	cmp	r3, #0
 801616e:	d010      	beq.n	8016192 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016172:	3324      	adds	r3, #36	@ 0x24
 8016174:	4618      	mov	r0, r3
 8016176:	f001 fb7b 	bl	8017870 <xTaskRemoveFromEventList>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	d013      	beq.n	80161a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016180:	4b3f      	ldr	r3, [pc, #252]	@ (8016280 <xQueueGenericSend+0x200>)
 8016182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016186:	601a      	str	r2, [r3, #0]
 8016188:	f3bf 8f4f 	dsb	sy
 801618c:	f3bf 8f6f 	isb	sy
 8016190:	e00a      	b.n	80161a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016194:	2b00      	cmp	r3, #0
 8016196:	d007      	beq.n	80161a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016198:	4b39      	ldr	r3, [pc, #228]	@ (8016280 <xQueueGenericSend+0x200>)
 801619a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801619e:	601a      	str	r2, [r3, #0]
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80161a8:	f002 fcb8 	bl	8018b1c <vPortExitCritical>
				return pdPASS;
 80161ac:	2301      	movs	r3, #1
 80161ae:	e063      	b.n	8016278 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d103      	bne.n	80161be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80161b6:	f002 fcb1 	bl	8018b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80161ba:	2300      	movs	r3, #0
 80161bc:	e05c      	b.n	8016278 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80161be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d106      	bne.n	80161d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80161c4:	f107 0314 	add.w	r3, r7, #20
 80161c8:	4618      	mov	r0, r3
 80161ca:	f001 fbb5 	bl	8017938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80161ce:	2301      	movs	r3, #1
 80161d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80161d2:	f002 fca3 	bl	8018b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80161d6:	f001 f90b 	bl	80173f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80161da:	f002 fc6d 	bl	8018ab8 <vPortEnterCritical>
 80161de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80161e4:	b25b      	sxtb	r3, r3
 80161e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ea:	d103      	bne.n	80161f4 <xQueueGenericSend+0x174>
 80161ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ee:	2200      	movs	r2, #0
 80161f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80161f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80161fa:	b25b      	sxtb	r3, r3
 80161fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016200:	d103      	bne.n	801620a <xQueueGenericSend+0x18a>
 8016202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016204:	2200      	movs	r2, #0
 8016206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801620a:	f002 fc87 	bl	8018b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801620e:	1d3a      	adds	r2, r7, #4
 8016210:	f107 0314 	add.w	r3, r7, #20
 8016214:	4611      	mov	r1, r2
 8016216:	4618      	mov	r0, r3
 8016218:	f001 fba4 	bl	8017964 <xTaskCheckForTimeOut>
 801621c:	4603      	mov	r3, r0
 801621e:	2b00      	cmp	r3, #0
 8016220:	d124      	bne.n	801626c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016224:	f000 fd04 	bl	8016c30 <prvIsQueueFull>
 8016228:	4603      	mov	r3, r0
 801622a:	2b00      	cmp	r3, #0
 801622c:	d018      	beq.n	8016260 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016230:	3310      	adds	r3, #16
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	4611      	mov	r1, r2
 8016236:	4618      	mov	r0, r3
 8016238:	f001 fac8 	bl	80177cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801623c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801623e:	f000 fc8f 	bl	8016b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016242:	f001 f8e3 	bl	801740c <xTaskResumeAll>
 8016246:	4603      	mov	r3, r0
 8016248:	2b00      	cmp	r3, #0
 801624a:	f47f af7c 	bne.w	8016146 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801624e:	4b0c      	ldr	r3, [pc, #48]	@ (8016280 <xQueueGenericSend+0x200>)
 8016250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016254:	601a      	str	r2, [r3, #0]
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	f3bf 8f6f 	isb	sy
 801625e:	e772      	b.n	8016146 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016262:	f000 fc7d 	bl	8016b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016266:	f001 f8d1 	bl	801740c <xTaskResumeAll>
 801626a:	e76c      	b.n	8016146 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801626c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801626e:	f000 fc77 	bl	8016b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016272:	f001 f8cb 	bl	801740c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016278:	4618      	mov	r0, r3
 801627a:	3738      	adds	r7, #56	@ 0x38
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}
 8016280:	e000ed04 	.word	0xe000ed04

08016284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b090      	sub	sp, #64	@ 0x40
 8016288:	af00      	add	r7, sp, #0
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	607a      	str	r2, [r7, #4]
 8016290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8016296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016298:	2b00      	cmp	r3, #0
 801629a:	d10b      	bne.n	80162b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162a0:	f383 8811 	msr	BASEPRI, r3
 80162a4:	f3bf 8f6f 	isb	sy
 80162a8:	f3bf 8f4f 	dsb	sy
 80162ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80162ae:	bf00      	nop
 80162b0:	bf00      	nop
 80162b2:	e7fd      	b.n	80162b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d103      	bne.n	80162c2 <xQueueGenericSendFromISR+0x3e>
 80162ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d101      	bne.n	80162c6 <xQueueGenericSendFromISR+0x42>
 80162c2:	2301      	movs	r3, #1
 80162c4:	e000      	b.n	80162c8 <xQueueGenericSendFromISR+0x44>
 80162c6:	2300      	movs	r3, #0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d10b      	bne.n	80162e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80162cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162d0:	f383 8811 	msr	BASEPRI, r3
 80162d4:	f3bf 8f6f 	isb	sy
 80162d8:	f3bf 8f4f 	dsb	sy
 80162dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80162de:	bf00      	nop
 80162e0:	bf00      	nop
 80162e2:	e7fd      	b.n	80162e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d103      	bne.n	80162f2 <xQueueGenericSendFromISR+0x6e>
 80162ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d101      	bne.n	80162f6 <xQueueGenericSendFromISR+0x72>
 80162f2:	2301      	movs	r3, #1
 80162f4:	e000      	b.n	80162f8 <xQueueGenericSendFromISR+0x74>
 80162f6:	2300      	movs	r3, #0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d10b      	bne.n	8016314 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80162fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016300:	f383 8811 	msr	BASEPRI, r3
 8016304:	f3bf 8f6f 	isb	sy
 8016308:	f3bf 8f4f 	dsb	sy
 801630c:	623b      	str	r3, [r7, #32]
}
 801630e:	bf00      	nop
 8016310:	bf00      	nop
 8016312:	e7fd      	b.n	8016310 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016314:	f002 fcb0 	bl	8018c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016318:	f3ef 8211 	mrs	r2, BASEPRI
 801631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016320:	f383 8811 	msr	BASEPRI, r3
 8016324:	f3bf 8f6f 	isb	sy
 8016328:	f3bf 8f4f 	dsb	sy
 801632c:	61fa      	str	r2, [r7, #28]
 801632e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016330:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016332:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801633a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801633c:	429a      	cmp	r2, r3
 801633e:	d302      	bcc.n	8016346 <xQueueGenericSendFromISR+0xc2>
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	2b02      	cmp	r3, #2
 8016344:	d12f      	bne.n	80163a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801634c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016356:	683a      	ldr	r2, [r7, #0]
 8016358:	68b9      	ldr	r1, [r7, #8]
 801635a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801635c:	f000 fb70 	bl	8016a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016360:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8016364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016368:	d112      	bne.n	8016390 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801636e:	2b00      	cmp	r3, #0
 8016370:	d016      	beq.n	80163a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016374:	3324      	adds	r3, #36	@ 0x24
 8016376:	4618      	mov	r0, r3
 8016378:	f001 fa7a 	bl	8017870 <xTaskRemoveFromEventList>
 801637c:	4603      	mov	r3, r0
 801637e:	2b00      	cmp	r3, #0
 8016380:	d00e      	beq.n	80163a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00b      	beq.n	80163a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2201      	movs	r2, #1
 801638c:	601a      	str	r2, [r3, #0]
 801638e:	e007      	b.n	80163a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016390:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016394:	3301      	adds	r3, #1
 8016396:	b2db      	uxtb	r3, r3
 8016398:	b25a      	sxtb	r2, r3
 801639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801639c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80163a0:	2301      	movs	r3, #1
 80163a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80163a4:	e001      	b.n	80163aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80163a6:	2300      	movs	r3, #0
 80163a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80163aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80163ae:	697b      	ldr	r3, [r7, #20]
 80163b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80163b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3740      	adds	r7, #64	@ 0x40
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b08e      	sub	sp, #56	@ 0x38
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80163ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d10b      	bne.n	80163ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 80163d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163d8:	f383 8811 	msr	BASEPRI, r3
 80163dc:	f3bf 8f6f 	isb	sy
 80163e0:	f3bf 8f4f 	dsb	sy
 80163e4:	623b      	str	r3, [r7, #32]
}
 80163e6:	bf00      	nop
 80163e8:	bf00      	nop
 80163ea:	e7fd      	b.n	80163e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80163ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d00b      	beq.n	801640c <xQueueGiveFromISR+0x4c>
	__asm volatile
 80163f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f8:	f383 8811 	msr	BASEPRI, r3
 80163fc:	f3bf 8f6f 	isb	sy
 8016400:	f3bf 8f4f 	dsb	sy
 8016404:	61fb      	str	r3, [r7, #28]
}
 8016406:	bf00      	nop
 8016408:	bf00      	nop
 801640a:	e7fd      	b.n	8016408 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d103      	bne.n	801641c <xQueueGiveFromISR+0x5c>
 8016414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016416:	689b      	ldr	r3, [r3, #8]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d101      	bne.n	8016420 <xQueueGiveFromISR+0x60>
 801641c:	2301      	movs	r3, #1
 801641e:	e000      	b.n	8016422 <xQueueGiveFromISR+0x62>
 8016420:	2300      	movs	r3, #0
 8016422:	2b00      	cmp	r3, #0
 8016424:	d10b      	bne.n	801643e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8016426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801642a:	f383 8811 	msr	BASEPRI, r3
 801642e:	f3bf 8f6f 	isb	sy
 8016432:	f3bf 8f4f 	dsb	sy
 8016436:	61bb      	str	r3, [r7, #24]
}
 8016438:	bf00      	nop
 801643a:	bf00      	nop
 801643c:	e7fd      	b.n	801643a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801643e:	f002 fc1b 	bl	8018c78 <vPortValidateInterruptPriority>
	__asm volatile
 8016442:	f3ef 8211 	mrs	r2, BASEPRI
 8016446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801644a:	f383 8811 	msr	BASEPRI, r3
 801644e:	f3bf 8f6f 	isb	sy
 8016452:	f3bf 8f4f 	dsb	sy
 8016456:	617a      	str	r2, [r7, #20]
 8016458:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801645a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801645c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016462:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801646a:	429a      	cmp	r2, r3
 801646c:	d22b      	bcs.n	80164c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801647a:	1c5a      	adds	r2, r3, #1
 801647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801647e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016480:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016488:	d112      	bne.n	80164b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801648e:	2b00      	cmp	r3, #0
 8016490:	d016      	beq.n	80164c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016494:	3324      	adds	r3, #36	@ 0x24
 8016496:	4618      	mov	r0, r3
 8016498:	f001 f9ea 	bl	8017870 <xTaskRemoveFromEventList>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d00e      	beq.n	80164c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d00b      	beq.n	80164c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	2201      	movs	r2, #1
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	e007      	b.n	80164c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80164b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80164b4:	3301      	adds	r3, #1
 80164b6:	b2db      	uxtb	r3, r3
 80164b8:	b25a      	sxtb	r2, r3
 80164ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80164c0:	2301      	movs	r3, #1
 80164c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80164c4:	e001      	b.n	80164ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80164c6:	2300      	movs	r3, #0
 80164c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80164ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	f383 8811 	msr	BASEPRI, r3
}
 80164d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80164d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80164d8:	4618      	mov	r0, r3
 80164da:	3738      	adds	r7, #56	@ 0x38
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}

080164e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b08c      	sub	sp, #48	@ 0x30
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	60f8      	str	r0, [r7, #12]
 80164e8:	60b9      	str	r1, [r7, #8]
 80164ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80164ec:	2300      	movs	r3, #0
 80164ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80164f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d10b      	bne.n	8016512 <xQueueReceive+0x32>
	__asm volatile
 80164fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164fe:	f383 8811 	msr	BASEPRI, r3
 8016502:	f3bf 8f6f 	isb	sy
 8016506:	f3bf 8f4f 	dsb	sy
 801650a:	623b      	str	r3, [r7, #32]
}
 801650c:	bf00      	nop
 801650e:	bf00      	nop
 8016510:	e7fd      	b.n	801650e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d103      	bne.n	8016520 <xQueueReceive+0x40>
 8016518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801651c:	2b00      	cmp	r3, #0
 801651e:	d101      	bne.n	8016524 <xQueueReceive+0x44>
 8016520:	2301      	movs	r3, #1
 8016522:	e000      	b.n	8016526 <xQueueReceive+0x46>
 8016524:	2300      	movs	r3, #0
 8016526:	2b00      	cmp	r3, #0
 8016528:	d10b      	bne.n	8016542 <xQueueReceive+0x62>
	__asm volatile
 801652a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801652e:	f383 8811 	msr	BASEPRI, r3
 8016532:	f3bf 8f6f 	isb	sy
 8016536:	f3bf 8f4f 	dsb	sy
 801653a:	61fb      	str	r3, [r7, #28]
}
 801653c:	bf00      	nop
 801653e:	bf00      	nop
 8016540:	e7fd      	b.n	801653e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016542:	f001 fb6b 	bl	8017c1c <xTaskGetSchedulerState>
 8016546:	4603      	mov	r3, r0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d102      	bne.n	8016552 <xQueueReceive+0x72>
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d101      	bne.n	8016556 <xQueueReceive+0x76>
 8016552:	2301      	movs	r3, #1
 8016554:	e000      	b.n	8016558 <xQueueReceive+0x78>
 8016556:	2300      	movs	r3, #0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d10b      	bne.n	8016574 <xQueueReceive+0x94>
	__asm volatile
 801655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016560:	f383 8811 	msr	BASEPRI, r3
 8016564:	f3bf 8f6f 	isb	sy
 8016568:	f3bf 8f4f 	dsb	sy
 801656c:	61bb      	str	r3, [r7, #24]
}
 801656e:	bf00      	nop
 8016570:	bf00      	nop
 8016572:	e7fd      	b.n	8016570 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016574:	f002 faa0 	bl	8018ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801657c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016580:	2b00      	cmp	r3, #0
 8016582:	d01f      	beq.n	80165c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016584:	68b9      	ldr	r1, [r7, #8]
 8016586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016588:	f000 fac4 	bl	8016b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801658e:	1e5a      	subs	r2, r3, #1
 8016590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016592:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016596:	691b      	ldr	r3, [r3, #16]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d00f      	beq.n	80165bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801659e:	3310      	adds	r3, #16
 80165a0:	4618      	mov	r0, r3
 80165a2:	f001 f965 	bl	8017870 <xTaskRemoveFromEventList>
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d007      	beq.n	80165bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80165ac:	4b3c      	ldr	r3, [pc, #240]	@ (80166a0 <xQueueReceive+0x1c0>)
 80165ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165b2:	601a      	str	r2, [r3, #0]
 80165b4:	f3bf 8f4f 	dsb	sy
 80165b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80165bc:	f002 faae 	bl	8018b1c <vPortExitCritical>
				return pdPASS;
 80165c0:	2301      	movs	r3, #1
 80165c2:	e069      	b.n	8016698 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d103      	bne.n	80165d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80165ca:	f002 faa7 	bl	8018b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e062      	b.n	8016698 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80165d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d106      	bne.n	80165e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80165d8:	f107 0310 	add.w	r3, r7, #16
 80165dc:	4618      	mov	r0, r3
 80165de:	f001 f9ab 	bl	8017938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80165e2:	2301      	movs	r3, #1
 80165e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80165e6:	f002 fa99 	bl	8018b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80165ea:	f000 ff01 	bl	80173f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80165ee:	f002 fa63 	bl	8018ab8 <vPortEnterCritical>
 80165f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80165f8:	b25b      	sxtb	r3, r3
 80165fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165fe:	d103      	bne.n	8016608 <xQueueReceive+0x128>
 8016600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016602:	2200      	movs	r2, #0
 8016604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801660a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801660e:	b25b      	sxtb	r3, r3
 8016610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016614:	d103      	bne.n	801661e <xQueueReceive+0x13e>
 8016616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016618:	2200      	movs	r2, #0
 801661a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801661e:	f002 fa7d 	bl	8018b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016622:	1d3a      	adds	r2, r7, #4
 8016624:	f107 0310 	add.w	r3, r7, #16
 8016628:	4611      	mov	r1, r2
 801662a:	4618      	mov	r0, r3
 801662c:	f001 f99a 	bl	8017964 <xTaskCheckForTimeOut>
 8016630:	4603      	mov	r3, r0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d123      	bne.n	801667e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016638:	f000 fae4 	bl	8016c04 <prvIsQueueEmpty>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d017      	beq.n	8016672 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016644:	3324      	adds	r3, #36	@ 0x24
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	4611      	mov	r1, r2
 801664a:	4618      	mov	r0, r3
 801664c:	f001 f8be 	bl	80177cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016652:	f000 fa85 	bl	8016b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016656:	f000 fed9 	bl	801740c <xTaskResumeAll>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d189      	bne.n	8016574 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8016660:	4b0f      	ldr	r3, [pc, #60]	@ (80166a0 <xQueueReceive+0x1c0>)
 8016662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016666:	601a      	str	r2, [r3, #0]
 8016668:	f3bf 8f4f 	dsb	sy
 801666c:	f3bf 8f6f 	isb	sy
 8016670:	e780      	b.n	8016574 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016674:	f000 fa74 	bl	8016b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016678:	f000 fec8 	bl	801740c <xTaskResumeAll>
 801667c:	e77a      	b.n	8016574 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801667e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016680:	f000 fa6e 	bl	8016b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016684:	f000 fec2 	bl	801740c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801668a:	f000 fabb 	bl	8016c04 <prvIsQueueEmpty>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	f43f af6f 	beq.w	8016574 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016696:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016698:	4618      	mov	r0, r3
 801669a:	3730      	adds	r7, #48	@ 0x30
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	e000ed04 	.word	0xe000ed04

080166a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b08e      	sub	sp, #56	@ 0x38
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80166ae:	2300      	movs	r3, #0
 80166b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80166b6:	2300      	movs	r3, #0
 80166b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80166ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d10b      	bne.n	80166d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166c4:	f383 8811 	msr	BASEPRI, r3
 80166c8:	f3bf 8f6f 	isb	sy
 80166cc:	f3bf 8f4f 	dsb	sy
 80166d0:	623b      	str	r3, [r7, #32]
}
 80166d2:	bf00      	nop
 80166d4:	bf00      	nop
 80166d6:	e7fd      	b.n	80166d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80166d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d00b      	beq.n	80166f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80166e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166e4:	f383 8811 	msr	BASEPRI, r3
 80166e8:	f3bf 8f6f 	isb	sy
 80166ec:	f3bf 8f4f 	dsb	sy
 80166f0:	61fb      	str	r3, [r7, #28]
}
 80166f2:	bf00      	nop
 80166f4:	bf00      	nop
 80166f6:	e7fd      	b.n	80166f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80166f8:	f001 fa90 	bl	8017c1c <xTaskGetSchedulerState>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d102      	bne.n	8016708 <xQueueSemaphoreTake+0x64>
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d101      	bne.n	801670c <xQueueSemaphoreTake+0x68>
 8016708:	2301      	movs	r3, #1
 801670a:	e000      	b.n	801670e <xQueueSemaphoreTake+0x6a>
 801670c:	2300      	movs	r3, #0
 801670e:	2b00      	cmp	r3, #0
 8016710:	d10b      	bne.n	801672a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8016712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016716:	f383 8811 	msr	BASEPRI, r3
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	f3bf 8f4f 	dsb	sy
 8016722:	61bb      	str	r3, [r7, #24]
}
 8016724:	bf00      	nop
 8016726:	bf00      	nop
 8016728:	e7fd      	b.n	8016726 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801672a:	f002 f9c5 	bl	8018ab8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016732:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016736:	2b00      	cmp	r3, #0
 8016738:	d024      	beq.n	8016784 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801673c:	1e5a      	subs	r2, r3, #1
 801673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016740:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d104      	bne.n	8016754 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801674a:	f001 fbe1 	bl	8017f10 <pvTaskIncrementMutexHeldCount>
 801674e:	4602      	mov	r2, r0
 8016750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016752:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016756:	691b      	ldr	r3, [r3, #16]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d00f      	beq.n	801677c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801675e:	3310      	adds	r3, #16
 8016760:	4618      	mov	r0, r3
 8016762:	f001 f885 	bl	8017870 <xTaskRemoveFromEventList>
 8016766:	4603      	mov	r3, r0
 8016768:	2b00      	cmp	r3, #0
 801676a:	d007      	beq.n	801677c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801676c:	4b54      	ldr	r3, [pc, #336]	@ (80168c0 <xQueueSemaphoreTake+0x21c>)
 801676e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016772:	601a      	str	r2, [r3, #0]
 8016774:	f3bf 8f4f 	dsb	sy
 8016778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801677c:	f002 f9ce 	bl	8018b1c <vPortExitCritical>
				return pdPASS;
 8016780:	2301      	movs	r3, #1
 8016782:	e098      	b.n	80168b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016784:	683b      	ldr	r3, [r7, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d112      	bne.n	80167b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00b      	beq.n	80167a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8016790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016794:	f383 8811 	msr	BASEPRI, r3
 8016798:	f3bf 8f6f 	isb	sy
 801679c:	f3bf 8f4f 	dsb	sy
 80167a0:	617b      	str	r3, [r7, #20]
}
 80167a2:	bf00      	nop
 80167a4:	bf00      	nop
 80167a6:	e7fd      	b.n	80167a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80167a8:	f002 f9b8 	bl	8018b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80167ac:	2300      	movs	r3, #0
 80167ae:	e082      	b.n	80168b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80167b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d106      	bne.n	80167c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80167b6:	f107 030c 	add.w	r3, r7, #12
 80167ba:	4618      	mov	r0, r3
 80167bc:	f001 f8bc 	bl	8017938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80167c0:	2301      	movs	r3, #1
 80167c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80167c4:	f002 f9aa 	bl	8018b1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80167c8:	f000 fe12 	bl	80173f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80167cc:	f002 f974 	bl	8018ab8 <vPortEnterCritical>
 80167d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80167d6:	b25b      	sxtb	r3, r3
 80167d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167dc:	d103      	bne.n	80167e6 <xQueueSemaphoreTake+0x142>
 80167de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e0:	2200      	movs	r2, #0
 80167e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80167e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80167ec:	b25b      	sxtb	r3, r3
 80167ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167f2:	d103      	bne.n	80167fc <xQueueSemaphoreTake+0x158>
 80167f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f6:	2200      	movs	r2, #0
 80167f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80167fc:	f002 f98e 	bl	8018b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016800:	463a      	mov	r2, r7
 8016802:	f107 030c 	add.w	r3, r7, #12
 8016806:	4611      	mov	r1, r2
 8016808:	4618      	mov	r0, r3
 801680a:	f001 f8ab 	bl	8017964 <xTaskCheckForTimeOut>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d132      	bne.n	801687a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016814:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016816:	f000 f9f5 	bl	8016c04 <prvIsQueueEmpty>
 801681a:	4603      	mov	r3, r0
 801681c:	2b00      	cmp	r3, #0
 801681e:	d026      	beq.n	801686e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d109      	bne.n	801683c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8016828:	f002 f946 	bl	8018ab8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801682c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	4618      	mov	r0, r3
 8016832:	f001 fa11 	bl	8017c58 <xTaskPriorityInherit>
 8016836:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8016838:	f002 f970 	bl	8018b1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801683e:	3324      	adds	r3, #36	@ 0x24
 8016840:	683a      	ldr	r2, [r7, #0]
 8016842:	4611      	mov	r1, r2
 8016844:	4618      	mov	r0, r3
 8016846:	f000 ffc1 	bl	80177cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801684a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801684c:	f000 f988 	bl	8016b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016850:	f000 fddc 	bl	801740c <xTaskResumeAll>
 8016854:	4603      	mov	r3, r0
 8016856:	2b00      	cmp	r3, #0
 8016858:	f47f af67 	bne.w	801672a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801685c:	4b18      	ldr	r3, [pc, #96]	@ (80168c0 <xQueueSemaphoreTake+0x21c>)
 801685e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016862:	601a      	str	r2, [r3, #0]
 8016864:	f3bf 8f4f 	dsb	sy
 8016868:	f3bf 8f6f 	isb	sy
 801686c:	e75d      	b.n	801672a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801686e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016870:	f000 f976 	bl	8016b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016874:	f000 fdca 	bl	801740c <xTaskResumeAll>
 8016878:	e757      	b.n	801672a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801687a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801687c:	f000 f970 	bl	8016b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016880:	f000 fdc4 	bl	801740c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016884:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016886:	f000 f9bd 	bl	8016c04 <prvIsQueueEmpty>
 801688a:	4603      	mov	r3, r0
 801688c:	2b00      	cmp	r3, #0
 801688e:	f43f af4c 	beq.w	801672a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016894:	2b00      	cmp	r3, #0
 8016896:	d00d      	beq.n	80168b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8016898:	f002 f90e 	bl	8018ab8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801689c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801689e:	f000 f8b7 	bl	8016a10 <prvGetDisinheritPriorityAfterTimeout>
 80168a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80168a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a6:	689b      	ldr	r3, [r3, #8]
 80168a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80168aa:	4618      	mov	r0, r3
 80168ac:	f001 faac 	bl	8017e08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80168b0:	f002 f934 	bl	8018b1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80168b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3738      	adds	r7, #56	@ 0x38
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	e000ed04 	.word	0xe000ed04

080168c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b08e      	sub	sp, #56	@ 0x38
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80168d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d10b      	bne.n	80168f2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80168da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168de:	f383 8811 	msr	BASEPRI, r3
 80168e2:	f3bf 8f6f 	isb	sy
 80168e6:	f3bf 8f4f 	dsb	sy
 80168ea:	623b      	str	r3, [r7, #32]
}
 80168ec:	bf00      	nop
 80168ee:	bf00      	nop
 80168f0:	e7fd      	b.n	80168ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d103      	bne.n	8016900 <xQueueReceiveFromISR+0x3c>
 80168f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d101      	bne.n	8016904 <xQueueReceiveFromISR+0x40>
 8016900:	2301      	movs	r3, #1
 8016902:	e000      	b.n	8016906 <xQueueReceiveFromISR+0x42>
 8016904:	2300      	movs	r3, #0
 8016906:	2b00      	cmp	r3, #0
 8016908:	d10b      	bne.n	8016922 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801690a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801690e:	f383 8811 	msr	BASEPRI, r3
 8016912:	f3bf 8f6f 	isb	sy
 8016916:	f3bf 8f4f 	dsb	sy
 801691a:	61fb      	str	r3, [r7, #28]
}
 801691c:	bf00      	nop
 801691e:	bf00      	nop
 8016920:	e7fd      	b.n	801691e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016922:	f002 f9a9 	bl	8018c78 <vPortValidateInterruptPriority>
	__asm volatile
 8016926:	f3ef 8211 	mrs	r2, BASEPRI
 801692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801692e:	f383 8811 	msr	BASEPRI, r3
 8016932:	f3bf 8f6f 	isb	sy
 8016936:	f3bf 8f4f 	dsb	sy
 801693a:	61ba      	str	r2, [r7, #24]
 801693c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801693e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016940:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016946:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801694a:	2b00      	cmp	r3, #0
 801694c:	d02f      	beq.n	80169ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016958:	68b9      	ldr	r1, [r7, #8]
 801695a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801695c:	f000 f8da 	bl	8016b14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016962:	1e5a      	subs	r2, r3, #1
 8016964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016966:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016968:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016970:	d112      	bne.n	8016998 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016974:	691b      	ldr	r3, [r3, #16]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d016      	beq.n	80169a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801697c:	3310      	adds	r3, #16
 801697e:	4618      	mov	r0, r3
 8016980:	f000 ff76 	bl	8017870 <xTaskRemoveFromEventList>
 8016984:	4603      	mov	r3, r0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d00e      	beq.n	80169a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00b      	beq.n	80169a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2201      	movs	r2, #1
 8016994:	601a      	str	r2, [r3, #0]
 8016996:	e007      	b.n	80169a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801699c:	3301      	adds	r3, #1
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	b25a      	sxtb	r2, r3
 80169a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80169a8:	2301      	movs	r3, #1
 80169aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80169ac:	e001      	b.n	80169b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80169ae:	2300      	movs	r3, #0
 80169b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80169b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	f383 8811 	msr	BASEPRI, r3
}
 80169bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80169be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3738      	adds	r7, #56	@ 0x38
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}

080169c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b084      	sub	sp, #16
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d10b      	bne.n	80169f2 <vQueueDelete+0x2a>
	__asm volatile
 80169da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169de:	f383 8811 	msr	BASEPRI, r3
 80169e2:	f3bf 8f6f 	isb	sy
 80169e6:	f3bf 8f4f 	dsb	sy
 80169ea:	60bb      	str	r3, [r7, #8]
}
 80169ec:	bf00      	nop
 80169ee:	bf00      	nop
 80169f0:	e7fd      	b.n	80169ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f000 f95e 	bl	8016cb4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d102      	bne.n	8016a08 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8016a02:	68f8      	ldr	r0, [r7, #12]
 8016a04:	f002 fa48 	bl	8018e98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016a08:	bf00      	nop
 8016a0a:	3710      	adds	r7, #16
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016a10:	b480      	push	{r7}
 8016a12:	b085      	sub	sp, #20
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d006      	beq.n	8016a2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8016a2a:	60fb      	str	r3, [r7, #12]
 8016a2c:	e001      	b.n	8016a32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016a32:	68fb      	ldr	r3, [r7, #12]
	}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3714      	adds	r7, #20
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b086      	sub	sp, #24
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	60f8      	str	r0, [r7, #12]
 8016a48:	60b9      	str	r1, [r7, #8]
 8016a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d10d      	bne.n	8016a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d14d      	bne.n	8016b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	689b      	ldr	r3, [r3, #8]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f001 f95c 	bl	8017d28 <xTaskPriorityDisinherit>
 8016a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	2200      	movs	r2, #0
 8016a76:	609a      	str	r2, [r3, #8]
 8016a78:	e043      	b.n	8016b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d119      	bne.n	8016ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	6858      	ldr	r0, [r3, #4]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a88:	461a      	mov	r2, r3
 8016a8a:	68b9      	ldr	r1, [r7, #8]
 8016a8c:	f003 f8c7 	bl	8019c1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	685a      	ldr	r2, [r3, #4]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a98:	441a      	add	r2, r3
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	685a      	ldr	r2, [r3, #4]
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	689b      	ldr	r3, [r3, #8]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d32b      	bcc.n	8016b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	605a      	str	r2, [r3, #4]
 8016ab2:	e026      	b.n	8016b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	68d8      	ldr	r0, [r3, #12]
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016abc:	461a      	mov	r2, r3
 8016abe:	68b9      	ldr	r1, [r7, #8]
 8016ac0:	f003 f8ad 	bl	8019c1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	68da      	ldr	r2, [r3, #12]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016acc:	425b      	negs	r3, r3
 8016ace:	441a      	add	r2, r3
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	68da      	ldr	r2, [r3, #12]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d207      	bcs.n	8016af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	689a      	ldr	r2, [r3, #8]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ae8:	425b      	negs	r3, r3
 8016aea:	441a      	add	r2, r3
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	d105      	bne.n	8016b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d002      	beq.n	8016b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	3b01      	subs	r3, #1
 8016b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	1c5a      	adds	r2, r3, #1
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016b0a:	697b      	ldr	r3, [r7, #20]
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3718      	adds	r7, #24
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d018      	beq.n	8016b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	68da      	ldr	r2, [r3, #12]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b2e:	441a      	add	r2, r3
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	68da      	ldr	r2, [r3, #12]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	689b      	ldr	r3, [r3, #8]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d303      	bcc.n	8016b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681a      	ldr	r2, [r3, #0]
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	68d9      	ldr	r1, [r3, #12]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b50:	461a      	mov	r2, r3
 8016b52:	6838      	ldr	r0, [r7, #0]
 8016b54:	f003 f863 	bl	8019c1e <memcpy>
	}
}
 8016b58:	bf00      	nop
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016b68:	f001 ffa6 	bl	8018ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016b74:	e011      	b.n	8016b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d012      	beq.n	8016ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	3324      	adds	r3, #36	@ 0x24
 8016b82:	4618      	mov	r0, r3
 8016b84:	f000 fe74 	bl	8017870 <xTaskRemoveFromEventList>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d001      	beq.n	8016b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016b8e:	f000 ff4d 	bl	8017a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
 8016b94:	3b01      	subs	r3, #1
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	dce9      	bgt.n	8016b76 <prvUnlockQueue+0x16>
 8016ba2:	e000      	b.n	8016ba6 <prvUnlockQueue+0x46>
					break;
 8016ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	22ff      	movs	r2, #255	@ 0xff
 8016baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8016bae:	f001 ffb5 	bl	8018b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016bb2:	f001 ff81 	bl	8018ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016bbe:	e011      	b.n	8016be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	691b      	ldr	r3, [r3, #16]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d012      	beq.n	8016bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	3310      	adds	r3, #16
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f000 fe4f 	bl	8017870 <xTaskRemoveFromEventList>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d001      	beq.n	8016bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016bd8:	f000 ff28 	bl	8017a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016bdc:	7bbb      	ldrb	r3, [r7, #14]
 8016bde:	3b01      	subs	r3, #1
 8016be0:	b2db      	uxtb	r3, r3
 8016be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	dce9      	bgt.n	8016bc0 <prvUnlockQueue+0x60>
 8016bec:	e000      	b.n	8016bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	22ff      	movs	r2, #255	@ 0xff
 8016bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8016bf8:	f001 ff90 	bl	8018b1c <vPortExitCritical>
}
 8016bfc:	bf00      	nop
 8016bfe:	3710      	adds	r7, #16
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}

08016c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b084      	sub	sp, #16
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016c0c:	f001 ff54 	bl	8018ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d102      	bne.n	8016c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	e001      	b.n	8016c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016c22:	f001 ff7b 	bl	8018b1c <vPortExitCritical>

	return xReturn;
 8016c26:	68fb      	ldr	r3, [r7, #12]
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3710      	adds	r7, #16
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b084      	sub	sp, #16
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016c38:	f001 ff3e 	bl	8018ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d102      	bne.n	8016c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016c48:	2301      	movs	r3, #1
 8016c4a:	60fb      	str	r3, [r7, #12]
 8016c4c:	e001      	b.n	8016c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016c4e:	2300      	movs	r3, #0
 8016c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016c52:	f001 ff63 	bl	8018b1c <vPortExitCritical>

	return xReturn;
 8016c56:	68fb      	ldr	r3, [r7, #12]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3710      	adds	r7, #16
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016c60:	b480      	push	{r7}
 8016c62:	b085      	sub	sp, #20
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	60fb      	str	r3, [r7, #12]
 8016c6e:	e014      	b.n	8016c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016c70:	4a0f      	ldr	r2, [pc, #60]	@ (8016cb0 <vQueueAddToRegistry+0x50>)
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d10b      	bne.n	8016c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016c7c:	490c      	ldr	r1, [pc, #48]	@ (8016cb0 <vQueueAddToRegistry+0x50>)
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	683a      	ldr	r2, [r7, #0]
 8016c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016c86:	4a0a      	ldr	r2, [pc, #40]	@ (8016cb0 <vQueueAddToRegistry+0x50>)
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	4413      	add	r3, r2
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016c92:	e006      	b.n	8016ca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	3301      	adds	r3, #1
 8016c98:	60fb      	str	r3, [r7, #12]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	2b07      	cmp	r3, #7
 8016c9e:	d9e7      	bls.n	8016c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016ca0:	bf00      	nop
 8016ca2:	bf00      	nop
 8016ca4:	3714      	adds	r7, #20
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cac:	4770      	bx	lr
 8016cae:	bf00      	nop
 8016cb0:	24002350 	.word	0x24002350

08016cb4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
 8016cc0:	e016      	b.n	8016cf0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016cc2:	4a10      	ldr	r2, [pc, #64]	@ (8016d04 <vQueueUnregisterQueue+0x50>)
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	4413      	add	r3, r2
 8016cca:	685b      	ldr	r3, [r3, #4]
 8016ccc:	687a      	ldr	r2, [r7, #4]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d10b      	bne.n	8016cea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8016d04 <vQueueUnregisterQueue+0x50>)
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2100      	movs	r1, #0
 8016cd8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016cdc:	4a09      	ldr	r2, [pc, #36]	@ (8016d04 <vQueueUnregisterQueue+0x50>)
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	00db      	lsls	r3, r3, #3
 8016ce2:	4413      	add	r3, r2
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	605a      	str	r2, [r3, #4]
				break;
 8016ce8:	e006      	b.n	8016cf8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	3301      	adds	r3, #1
 8016cee:	60fb      	str	r3, [r7, #12]
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2b07      	cmp	r3, #7
 8016cf4:	d9e5      	bls.n	8016cc2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016cf6:	bf00      	nop
 8016cf8:	bf00      	nop
 8016cfa:	3714      	adds	r7, #20
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr
 8016d04:	24002350 	.word	0x24002350

08016d08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016d18:	f001 fece 	bl	8018ab8 <vPortEnterCritical>
 8016d1c:	697b      	ldr	r3, [r7, #20]
 8016d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016d22:	b25b      	sxtb	r3, r3
 8016d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d28:	d103      	bne.n	8016d32 <vQueueWaitForMessageRestricted+0x2a>
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016d38:	b25b      	sxtb	r3, r3
 8016d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d3e:	d103      	bne.n	8016d48 <vQueueWaitForMessageRestricted+0x40>
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	2200      	movs	r2, #0
 8016d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016d48:	f001 fee8 	bl	8018b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d106      	bne.n	8016d62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	3324      	adds	r3, #36	@ 0x24
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	68b9      	ldr	r1, [r7, #8]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f000 fd5b 	bl	8017818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016d62:	6978      	ldr	r0, [r7, #20]
 8016d64:	f7ff fefc 	bl	8016b60 <prvUnlockQueue>
	}
 8016d68:	bf00      	nop
 8016d6a:	3718      	adds	r7, #24
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}

08016d70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b08e      	sub	sp, #56	@ 0x38
 8016d74:	af04      	add	r7, sp, #16
 8016d76:	60f8      	str	r0, [r7, #12]
 8016d78:	60b9      	str	r1, [r7, #8]
 8016d7a:	607a      	str	r2, [r7, #4]
 8016d7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10b      	bne.n	8016d9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8016d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d88:	f383 8811 	msr	BASEPRI, r3
 8016d8c:	f3bf 8f6f 	isb	sy
 8016d90:	f3bf 8f4f 	dsb	sy
 8016d94:	623b      	str	r3, [r7, #32]
}
 8016d96:	bf00      	nop
 8016d98:	bf00      	nop
 8016d9a:	e7fd      	b.n	8016d98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d10b      	bne.n	8016dba <xTaskCreateStatic+0x4a>
	__asm volatile
 8016da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016da6:	f383 8811 	msr	BASEPRI, r3
 8016daa:	f3bf 8f6f 	isb	sy
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	61fb      	str	r3, [r7, #28]
}
 8016db4:	bf00      	nop
 8016db6:	bf00      	nop
 8016db8:	e7fd      	b.n	8016db6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016dba:	23a8      	movs	r3, #168	@ 0xa8
 8016dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	2ba8      	cmp	r3, #168	@ 0xa8
 8016dc2:	d00b      	beq.n	8016ddc <xTaskCreateStatic+0x6c>
	__asm volatile
 8016dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dc8:	f383 8811 	msr	BASEPRI, r3
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	f3bf 8f4f 	dsb	sy
 8016dd4:	61bb      	str	r3, [r7, #24]
}
 8016dd6:	bf00      	nop
 8016dd8:	bf00      	nop
 8016dda:	e7fd      	b.n	8016dd8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ddc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d01e      	beq.n	8016e22 <xTaskCreateStatic+0xb2>
 8016de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d01b      	beq.n	8016e22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016df2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df6:	2202      	movs	r2, #2
 8016df8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	9303      	str	r3, [sp, #12]
 8016e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e02:	9302      	str	r3, [sp, #8]
 8016e04:	f107 0314 	add.w	r3, r7, #20
 8016e08:	9301      	str	r3, [sp, #4]
 8016e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e0c:	9300      	str	r3, [sp, #0]
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	68b9      	ldr	r1, [r7, #8]
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f000 f851 	bl	8016ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016e1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016e1c:	f000 f8f6 	bl	801700c <prvAddNewTaskToReadyList>
 8016e20:	e001      	b.n	8016e26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8016e22:	2300      	movs	r3, #0
 8016e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016e26:	697b      	ldr	r3, [r7, #20]
	}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3728      	adds	r7, #40	@ 0x28
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b08c      	sub	sp, #48	@ 0x30
 8016e34:	af04      	add	r7, sp, #16
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	603b      	str	r3, [r7, #0]
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016e40:	88fb      	ldrh	r3, [r7, #6]
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	4618      	mov	r0, r3
 8016e46:	f001 ff59 	bl	8018cfc <pvPortMalloc>
 8016e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00e      	beq.n	8016e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016e52:	20a8      	movs	r0, #168	@ 0xa8
 8016e54:	f001 ff52 	bl	8018cfc <pvPortMalloc>
 8016e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d003      	beq.n	8016e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	697a      	ldr	r2, [r7, #20]
 8016e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8016e66:	e005      	b.n	8016e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016e68:	6978      	ldr	r0, [r7, #20]
 8016e6a:	f002 f815 	bl	8018e98 <vPortFree>
 8016e6e:	e001      	b.n	8016e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016e70:	2300      	movs	r3, #0
 8016e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d017      	beq.n	8016eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016e7a:	69fb      	ldr	r3, [r7, #28]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016e82:	88fa      	ldrh	r2, [r7, #6]
 8016e84:	2300      	movs	r3, #0
 8016e86:	9303      	str	r3, [sp, #12]
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	9302      	str	r3, [sp, #8]
 8016e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8e:	9301      	str	r3, [sp, #4]
 8016e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e92:	9300      	str	r3, [sp, #0]
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	68b9      	ldr	r1, [r7, #8]
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f000 f80f 	bl	8016ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016e9e:	69f8      	ldr	r0, [r7, #28]
 8016ea0:	f000 f8b4 	bl	801700c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	61bb      	str	r3, [r7, #24]
 8016ea8:	e002      	b.n	8016eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8016eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	3720      	adds	r7, #32
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
	...

08016ebc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b088      	sub	sp, #32
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ecc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	21a5      	movs	r1, #165	@ 0xa5
 8016ed6:	f002 fdc9 	bl	8019a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016ede:	6879      	ldr	r1, [r7, #4]
 8016ee0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016ee4:	440b      	add	r3, r1
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	4413      	add	r3, r2
 8016eea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016eec:	69bb      	ldr	r3, [r7, #24]
 8016eee:	f023 0307 	bic.w	r3, r3, #7
 8016ef2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ef4:	69bb      	ldr	r3, [r7, #24]
 8016ef6:	f003 0307 	and.w	r3, r3, #7
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d00b      	beq.n	8016f16 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8016efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f02:	f383 8811 	msr	BASEPRI, r3
 8016f06:	f3bf 8f6f 	isb	sy
 8016f0a:	f3bf 8f4f 	dsb	sy
 8016f0e:	617b      	str	r3, [r7, #20]
}
 8016f10:	bf00      	nop
 8016f12:	bf00      	nop
 8016f14:	e7fd      	b.n	8016f12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d01f      	beq.n	8016f5c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	61fb      	str	r3, [r7, #28]
 8016f20:	e012      	b.n	8016f48 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016f22:	68ba      	ldr	r2, [r7, #8]
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	4413      	add	r3, r2
 8016f28:	7819      	ldrb	r1, [r3, #0]
 8016f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	4413      	add	r3, r2
 8016f30:	3334      	adds	r3, #52	@ 0x34
 8016f32:	460a      	mov	r2, r1
 8016f34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016f36:	68ba      	ldr	r2, [r7, #8]
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	4413      	add	r3, r2
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d006      	beq.n	8016f50 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016f42:	69fb      	ldr	r3, [r7, #28]
 8016f44:	3301      	adds	r3, #1
 8016f46:	61fb      	str	r3, [r7, #28]
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	2b0f      	cmp	r3, #15
 8016f4c:	d9e9      	bls.n	8016f22 <prvInitialiseNewTask+0x66>
 8016f4e:	e000      	b.n	8016f52 <prvInitialiseNewTask+0x96>
			{
				break;
 8016f50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f54:	2200      	movs	r2, #0
 8016f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016f5a:	e003      	b.n	8016f64 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f5e:	2200      	movs	r2, #0
 8016f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f66:	2b37      	cmp	r3, #55	@ 0x37
 8016f68:	d901      	bls.n	8016f6e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016f6a:	2337      	movs	r3, #55	@ 0x37
 8016f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f82:	3304      	adds	r3, #4
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7fe fe33 	bl	8015bf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f8c:	3318      	adds	r3, #24
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7fe fe2e 	bl	8015bf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016fa8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fac:	2200      	movs	r2, #0
 8016fae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fbc:	3354      	adds	r3, #84	@ 0x54
 8016fbe:	224c      	movs	r2, #76	@ 0x4c
 8016fc0:	2100      	movs	r1, #0
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f002 fd52 	bl	8019a6c <memset>
 8016fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fca:	4a0d      	ldr	r2, [pc, #52]	@ (8017000 <prvInitialiseNewTask+0x144>)
 8016fcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8016fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8017004 <prvInitialiseNewTask+0x148>)
 8016fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8017008 <prvInitialiseNewTask+0x14c>)
 8016fd8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016fda:	683a      	ldr	r2, [r7, #0]
 8016fdc:	68f9      	ldr	r1, [r7, #12]
 8016fde:	69b8      	ldr	r0, [r7, #24]
 8016fe0:	f001 fc3a 	bl	8018858 <pxPortInitialiseStack>
 8016fe4:	4602      	mov	r2, r0
 8016fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fe8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d002      	beq.n	8016ff6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ff6:	bf00      	nop
 8016ff8:	3720      	adds	r7, #32
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	240229e4 	.word	0x240229e4
 8017004:	24022a4c 	.word	0x24022a4c
 8017008:	24022ab4 	.word	0x24022ab4

0801700c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b082      	sub	sp, #8
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017014:	f001 fd50 	bl	8018ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017018:	4b2d      	ldr	r3, [pc, #180]	@ (80170d0 <prvAddNewTaskToReadyList+0xc4>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	3301      	adds	r3, #1
 801701e:	4a2c      	ldr	r2, [pc, #176]	@ (80170d0 <prvAddNewTaskToReadyList+0xc4>)
 8017020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017022:	4b2c      	ldr	r3, [pc, #176]	@ (80170d4 <prvAddNewTaskToReadyList+0xc8>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d109      	bne.n	801703e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801702a:	4a2a      	ldr	r2, [pc, #168]	@ (80170d4 <prvAddNewTaskToReadyList+0xc8>)
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017030:	4b27      	ldr	r3, [pc, #156]	@ (80170d0 <prvAddNewTaskToReadyList+0xc4>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d110      	bne.n	801705a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017038:	f000 fd1c 	bl	8017a74 <prvInitialiseTaskLists>
 801703c:	e00d      	b.n	801705a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801703e:	4b26      	ldr	r3, [pc, #152]	@ (80170d8 <prvAddNewTaskToReadyList+0xcc>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d109      	bne.n	801705a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017046:	4b23      	ldr	r3, [pc, #140]	@ (80170d4 <prvAddNewTaskToReadyList+0xc8>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017050:	429a      	cmp	r2, r3
 8017052:	d802      	bhi.n	801705a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017054:	4a1f      	ldr	r2, [pc, #124]	@ (80170d4 <prvAddNewTaskToReadyList+0xc8>)
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801705a:	4b20      	ldr	r3, [pc, #128]	@ (80170dc <prvAddNewTaskToReadyList+0xd0>)
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	3301      	adds	r3, #1
 8017060:	4a1e      	ldr	r2, [pc, #120]	@ (80170dc <prvAddNewTaskToReadyList+0xd0>)
 8017062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017064:	4b1d      	ldr	r3, [pc, #116]	@ (80170dc <prvAddNewTaskToReadyList+0xd0>)
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017070:	4b1b      	ldr	r3, [pc, #108]	@ (80170e0 <prvAddNewTaskToReadyList+0xd4>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	429a      	cmp	r2, r3
 8017076:	d903      	bls.n	8017080 <prvAddNewTaskToReadyList+0x74>
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801707c:	4a18      	ldr	r2, [pc, #96]	@ (80170e0 <prvAddNewTaskToReadyList+0xd4>)
 801707e:	6013      	str	r3, [r2, #0]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017084:	4613      	mov	r3, r2
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	4413      	add	r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	4a15      	ldr	r2, [pc, #84]	@ (80170e4 <prvAddNewTaskToReadyList+0xd8>)
 801708e:	441a      	add	r2, r3
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	3304      	adds	r3, #4
 8017094:	4619      	mov	r1, r3
 8017096:	4610      	mov	r0, r2
 8017098:	f7fe fdb7 	bl	8015c0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801709c:	f001 fd3e 	bl	8018b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80170a0:	4b0d      	ldr	r3, [pc, #52]	@ (80170d8 <prvAddNewTaskToReadyList+0xcc>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d00e      	beq.n	80170c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80170a8:	4b0a      	ldr	r3, [pc, #40]	@ (80170d4 <prvAddNewTaskToReadyList+0xc8>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d207      	bcs.n	80170c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80170b6:	4b0c      	ldr	r3, [pc, #48]	@ (80170e8 <prvAddNewTaskToReadyList+0xdc>)
 80170b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170bc:	601a      	str	r2, [r3, #0]
 80170be:	f3bf 8f4f 	dsb	sy
 80170c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80170c6:	bf00      	nop
 80170c8:	3708      	adds	r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	24002864 	.word	0x24002864
 80170d4:	24002390 	.word	0x24002390
 80170d8:	24002870 	.word	0x24002870
 80170dc:	24002880 	.word	0x24002880
 80170e0:	2400286c 	.word	0x2400286c
 80170e4:	24002394 	.word	0x24002394
 80170e8:	e000ed04 	.word	0xe000ed04

080170ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b084      	sub	sp, #16
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80170f4:	f001 fce0 	bl	8018ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d102      	bne.n	8017104 <vTaskDelete+0x18>
 80170fe:	4b2d      	ldr	r3, [pc, #180]	@ (80171b4 <vTaskDelete+0xc8>)
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	e000      	b.n	8017106 <vTaskDelete+0x1a>
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	3304      	adds	r3, #4
 801710c:	4618      	mov	r0, r3
 801710e:	f7fe fdd9 	bl	8015cc4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017116:	2b00      	cmp	r3, #0
 8017118:	d004      	beq.n	8017124 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	3318      	adds	r3, #24
 801711e:	4618      	mov	r0, r3
 8017120:	f7fe fdd0 	bl	8015cc4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017124:	4b24      	ldr	r3, [pc, #144]	@ (80171b8 <vTaskDelete+0xcc>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	3301      	adds	r3, #1
 801712a:	4a23      	ldr	r2, [pc, #140]	@ (80171b8 <vTaskDelete+0xcc>)
 801712c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801712e:	4b21      	ldr	r3, [pc, #132]	@ (80171b4 <vTaskDelete+0xc8>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	68fa      	ldr	r2, [r7, #12]
 8017134:	429a      	cmp	r2, r3
 8017136:	d10b      	bne.n	8017150 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	3304      	adds	r3, #4
 801713c:	4619      	mov	r1, r3
 801713e:	481f      	ldr	r0, [pc, #124]	@ (80171bc <vTaskDelete+0xd0>)
 8017140:	f7fe fd63 	bl	8015c0a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017144:	4b1e      	ldr	r3, [pc, #120]	@ (80171c0 <vTaskDelete+0xd4>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	3301      	adds	r3, #1
 801714a:	4a1d      	ldr	r2, [pc, #116]	@ (80171c0 <vTaskDelete+0xd4>)
 801714c:	6013      	str	r3, [r2, #0]
 801714e:	e009      	b.n	8017164 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017150:	4b1c      	ldr	r3, [pc, #112]	@ (80171c4 <vTaskDelete+0xd8>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	3b01      	subs	r3, #1
 8017156:	4a1b      	ldr	r2, [pc, #108]	@ (80171c4 <vTaskDelete+0xd8>)
 8017158:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801715a:	68f8      	ldr	r0, [r7, #12]
 801715c:	f000 fcf8 	bl	8017b50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017160:	f000 fd2c 	bl	8017bbc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017164:	f001 fcda 	bl	8018b1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017168:	4b17      	ldr	r3, [pc, #92]	@ (80171c8 <vTaskDelete+0xdc>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d01c      	beq.n	80171aa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8017170:	4b10      	ldr	r3, [pc, #64]	@ (80171b4 <vTaskDelete+0xc8>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	429a      	cmp	r2, r3
 8017178:	d117      	bne.n	80171aa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801717a:	4b14      	ldr	r3, [pc, #80]	@ (80171cc <vTaskDelete+0xe0>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00b      	beq.n	801719a <vTaskDelete+0xae>
	__asm volatile
 8017182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017186:	f383 8811 	msr	BASEPRI, r3
 801718a:	f3bf 8f6f 	isb	sy
 801718e:	f3bf 8f4f 	dsb	sy
 8017192:	60bb      	str	r3, [r7, #8]
}
 8017194:	bf00      	nop
 8017196:	bf00      	nop
 8017198:	e7fd      	b.n	8017196 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801719a:	4b0d      	ldr	r3, [pc, #52]	@ (80171d0 <vTaskDelete+0xe4>)
 801719c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171a0:	601a      	str	r2, [r3, #0]
 80171a2:	f3bf 8f4f 	dsb	sy
 80171a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80171aa:	bf00      	nop
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	24002390 	.word	0x24002390
 80171b8:	24002880 	.word	0x24002880
 80171bc:	24002838 	.word	0x24002838
 80171c0:	2400284c 	.word	0x2400284c
 80171c4:	24002864 	.word	0x24002864
 80171c8:	24002870 	.word	0x24002870
 80171cc:	2400288c 	.word	0x2400288c
 80171d0:	e000ed04 	.word	0xe000ed04

080171d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b084      	sub	sp, #16
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80171dc:	2300      	movs	r3, #0
 80171de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d018      	beq.n	8017218 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80171e6:	4b14      	ldr	r3, [pc, #80]	@ (8017238 <vTaskDelay+0x64>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d00b      	beq.n	8017206 <vTaskDelay+0x32>
	__asm volatile
 80171ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171f2:	f383 8811 	msr	BASEPRI, r3
 80171f6:	f3bf 8f6f 	isb	sy
 80171fa:	f3bf 8f4f 	dsb	sy
 80171fe:	60bb      	str	r3, [r7, #8]
}
 8017200:	bf00      	nop
 8017202:	bf00      	nop
 8017204:	e7fd      	b.n	8017202 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017206:	f000 f8f3 	bl	80173f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801720a:	2100      	movs	r1, #0
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f000 ff75 	bl	80180fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017212:	f000 f8fb 	bl	801740c <xTaskResumeAll>
 8017216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d107      	bne.n	801722e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801721e:	4b07      	ldr	r3, [pc, #28]	@ (801723c <vTaskDelay+0x68>)
 8017220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017224:	601a      	str	r2, [r3, #0]
 8017226:	f3bf 8f4f 	dsb	sy
 801722a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801722e:	bf00      	nop
 8017230:	3710      	adds	r7, #16
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
 8017236:	bf00      	nop
 8017238:	2400288c 	.word	0x2400288c
 801723c:	e000ed04 	.word	0xe000ed04

08017240 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017240:	b580      	push	{r7, lr}
 8017242:	b088      	sub	sp, #32
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801724c:	69bb      	ldr	r3, [r7, #24]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d10b      	bne.n	801726a <eTaskGetState+0x2a>
	__asm volatile
 8017252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017256:	f383 8811 	msr	BASEPRI, r3
 801725a:	f3bf 8f6f 	isb	sy
 801725e:	f3bf 8f4f 	dsb	sy
 8017262:	60bb      	str	r3, [r7, #8]
}
 8017264:	bf00      	nop
 8017266:	bf00      	nop
 8017268:	e7fd      	b.n	8017266 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801726a:	4b24      	ldr	r3, [pc, #144]	@ (80172fc <eTaskGetState+0xbc>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	69ba      	ldr	r2, [r7, #24]
 8017270:	429a      	cmp	r2, r3
 8017272:	d102      	bne.n	801727a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017274:	2300      	movs	r3, #0
 8017276:	77fb      	strb	r3, [r7, #31]
 8017278:	e03a      	b.n	80172f0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801727a:	f001 fc1d 	bl	8018ab8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	695b      	ldr	r3, [r3, #20]
 8017282:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017284:	4b1e      	ldr	r3, [pc, #120]	@ (8017300 <eTaskGetState+0xc0>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801728a:	4b1e      	ldr	r3, [pc, #120]	@ (8017304 <eTaskGetState+0xc4>)
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8017290:	f001 fc44 	bl	8018b1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8017294:	697a      	ldr	r2, [r7, #20]
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	429a      	cmp	r2, r3
 801729a:	d003      	beq.n	80172a4 <eTaskGetState+0x64>
 801729c:	697a      	ldr	r2, [r7, #20]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d102      	bne.n	80172aa <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80172a4:	2302      	movs	r3, #2
 80172a6:	77fb      	strb	r3, [r7, #31]
 80172a8:	e022      	b.n	80172f0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	4a16      	ldr	r2, [pc, #88]	@ (8017308 <eTaskGetState+0xc8>)
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d112      	bne.n	80172d8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80172b2:	69bb      	ldr	r3, [r7, #24]
 80172b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d10b      	bne.n	80172d2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	2b01      	cmp	r3, #1
 80172c4:	d102      	bne.n	80172cc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80172c6:	2302      	movs	r3, #2
 80172c8:	77fb      	strb	r3, [r7, #31]
 80172ca:	e011      	b.n	80172f0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80172cc:	2303      	movs	r3, #3
 80172ce:	77fb      	strb	r3, [r7, #31]
 80172d0:	e00e      	b.n	80172f0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80172d2:	2302      	movs	r3, #2
 80172d4:	77fb      	strb	r3, [r7, #31]
 80172d6:	e00b      	b.n	80172f0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	4a0c      	ldr	r2, [pc, #48]	@ (801730c <eTaskGetState+0xcc>)
 80172dc:	4293      	cmp	r3, r2
 80172de:	d002      	beq.n	80172e6 <eTaskGetState+0xa6>
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d102      	bne.n	80172ec <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80172e6:	2304      	movs	r3, #4
 80172e8:	77fb      	strb	r3, [r7, #31]
 80172ea:	e001      	b.n	80172f0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80172ec:	2301      	movs	r3, #1
 80172ee:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80172f0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80172f2:	4618      	mov	r0, r3
 80172f4:	3720      	adds	r7, #32
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	bf00      	nop
 80172fc:	24002390 	.word	0x24002390
 8017300:	2400281c 	.word	0x2400281c
 8017304:	24002820 	.word	0x24002820
 8017308:	24002850 	.word	0x24002850
 801730c:	24002838 	.word	0x24002838

08017310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b08a      	sub	sp, #40	@ 0x28
 8017314:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017316:	2300      	movs	r3, #0
 8017318:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801731a:	2300      	movs	r3, #0
 801731c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801731e:	463a      	mov	r2, r7
 8017320:	1d39      	adds	r1, r7, #4
 8017322:	f107 0308 	add.w	r3, r7, #8
 8017326:	4618      	mov	r0, r3
 8017328:	f7fe fc0e 	bl	8015b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801732c:	6839      	ldr	r1, [r7, #0]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	9202      	str	r2, [sp, #8]
 8017334:	9301      	str	r3, [sp, #4]
 8017336:	2300      	movs	r3, #0
 8017338:	9300      	str	r3, [sp, #0]
 801733a:	2300      	movs	r3, #0
 801733c:	460a      	mov	r2, r1
 801733e:	4924      	ldr	r1, [pc, #144]	@ (80173d0 <vTaskStartScheduler+0xc0>)
 8017340:	4824      	ldr	r0, [pc, #144]	@ (80173d4 <vTaskStartScheduler+0xc4>)
 8017342:	f7ff fd15 	bl	8016d70 <xTaskCreateStatic>
 8017346:	4603      	mov	r3, r0
 8017348:	4a23      	ldr	r2, [pc, #140]	@ (80173d8 <vTaskStartScheduler+0xc8>)
 801734a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801734c:	4b22      	ldr	r3, [pc, #136]	@ (80173d8 <vTaskStartScheduler+0xc8>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d002      	beq.n	801735a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017354:	2301      	movs	r3, #1
 8017356:	617b      	str	r3, [r7, #20]
 8017358:	e001      	b.n	801735e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801735a:	2300      	movs	r3, #0
 801735c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	2b01      	cmp	r3, #1
 8017362:	d102      	bne.n	801736a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017364:	f000 ff1e 	bl	80181a4 <xTimerCreateTimerTask>
 8017368:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	2b01      	cmp	r3, #1
 801736e:	d11b      	bne.n	80173a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8017370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017374:	f383 8811 	msr	BASEPRI, r3
 8017378:	f3bf 8f6f 	isb	sy
 801737c:	f3bf 8f4f 	dsb	sy
 8017380:	613b      	str	r3, [r7, #16]
}
 8017382:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017384:	4b15      	ldr	r3, [pc, #84]	@ (80173dc <vTaskStartScheduler+0xcc>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	3354      	adds	r3, #84	@ 0x54
 801738a:	4a15      	ldr	r2, [pc, #84]	@ (80173e0 <vTaskStartScheduler+0xd0>)
 801738c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801738e:	4b15      	ldr	r3, [pc, #84]	@ (80173e4 <vTaskStartScheduler+0xd4>)
 8017390:	f04f 32ff 	mov.w	r2, #4294967295
 8017394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017396:	4b14      	ldr	r3, [pc, #80]	@ (80173e8 <vTaskStartScheduler+0xd8>)
 8017398:	2201      	movs	r2, #1
 801739a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801739c:	4b13      	ldr	r3, [pc, #76]	@ (80173ec <vTaskStartScheduler+0xdc>)
 801739e:	2200      	movs	r2, #0
 80173a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80173a2:	f001 fae5 	bl	8018970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80173a6:	e00f      	b.n	80173c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173ae:	d10b      	bne.n	80173c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80173b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173b4:	f383 8811 	msr	BASEPRI, r3
 80173b8:	f3bf 8f6f 	isb	sy
 80173bc:	f3bf 8f4f 	dsb	sy
 80173c0:	60fb      	str	r3, [r7, #12]
}
 80173c2:	bf00      	nop
 80173c4:	bf00      	nop
 80173c6:	e7fd      	b.n	80173c4 <vTaskStartScheduler+0xb4>
}
 80173c8:	bf00      	nop
 80173ca:	3718      	adds	r7, #24
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	0801a994 	.word	0x0801a994
 80173d4:	08017a45 	.word	0x08017a45
 80173d8:	24002888 	.word	0x24002888
 80173dc:	24002390 	.word	0x24002390
 80173e0:	24000028 	.word	0x24000028
 80173e4:	24002884 	.word	0x24002884
 80173e8:	24002870 	.word	0x24002870
 80173ec:	24002868 	.word	0x24002868

080173f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80173f0:	b480      	push	{r7}
 80173f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80173f4:	4b04      	ldr	r3, [pc, #16]	@ (8017408 <vTaskSuspendAll+0x18>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	3301      	adds	r3, #1
 80173fa:	4a03      	ldr	r2, [pc, #12]	@ (8017408 <vTaskSuspendAll+0x18>)
 80173fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80173fe:	bf00      	nop
 8017400:	46bd      	mov	sp, r7
 8017402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017406:	4770      	bx	lr
 8017408:	2400288c 	.word	0x2400288c

0801740c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b084      	sub	sp, #16
 8017410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017412:	2300      	movs	r3, #0
 8017414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017416:	2300      	movs	r3, #0
 8017418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801741a:	4b42      	ldr	r3, [pc, #264]	@ (8017524 <xTaskResumeAll+0x118>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d10b      	bne.n	801743a <xTaskResumeAll+0x2e>
	__asm volatile
 8017422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017426:	f383 8811 	msr	BASEPRI, r3
 801742a:	f3bf 8f6f 	isb	sy
 801742e:	f3bf 8f4f 	dsb	sy
 8017432:	603b      	str	r3, [r7, #0]
}
 8017434:	bf00      	nop
 8017436:	bf00      	nop
 8017438:	e7fd      	b.n	8017436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801743a:	f001 fb3d 	bl	8018ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801743e:	4b39      	ldr	r3, [pc, #228]	@ (8017524 <xTaskResumeAll+0x118>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	3b01      	subs	r3, #1
 8017444:	4a37      	ldr	r2, [pc, #220]	@ (8017524 <xTaskResumeAll+0x118>)
 8017446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017448:	4b36      	ldr	r3, [pc, #216]	@ (8017524 <xTaskResumeAll+0x118>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d162      	bne.n	8017516 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017450:	4b35      	ldr	r3, [pc, #212]	@ (8017528 <xTaskResumeAll+0x11c>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d05e      	beq.n	8017516 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017458:	e02f      	b.n	80174ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801745a:	4b34      	ldr	r3, [pc, #208]	@ (801752c <xTaskResumeAll+0x120>)
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	3318      	adds	r3, #24
 8017466:	4618      	mov	r0, r3
 8017468:	f7fe fc2c 	bl	8015cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	3304      	adds	r3, #4
 8017470:	4618      	mov	r0, r3
 8017472:	f7fe fc27 	bl	8015cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801747a:	4b2d      	ldr	r3, [pc, #180]	@ (8017530 <xTaskResumeAll+0x124>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	429a      	cmp	r2, r3
 8017480:	d903      	bls.n	801748a <xTaskResumeAll+0x7e>
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017486:	4a2a      	ldr	r2, [pc, #168]	@ (8017530 <xTaskResumeAll+0x124>)
 8017488:	6013      	str	r3, [r2, #0]
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801748e:	4613      	mov	r3, r2
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	4413      	add	r3, r2
 8017494:	009b      	lsls	r3, r3, #2
 8017496:	4a27      	ldr	r2, [pc, #156]	@ (8017534 <xTaskResumeAll+0x128>)
 8017498:	441a      	add	r2, r3
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	3304      	adds	r3, #4
 801749e:	4619      	mov	r1, r3
 80174a0:	4610      	mov	r0, r2
 80174a2:	f7fe fbb2 	bl	8015c0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80174aa:	4b23      	ldr	r3, [pc, #140]	@ (8017538 <xTaskResumeAll+0x12c>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174b0:	429a      	cmp	r2, r3
 80174b2:	d302      	bcc.n	80174ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80174b4:	4b21      	ldr	r3, [pc, #132]	@ (801753c <xTaskResumeAll+0x130>)
 80174b6:	2201      	movs	r2, #1
 80174b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80174ba:	4b1c      	ldr	r3, [pc, #112]	@ (801752c <xTaskResumeAll+0x120>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d1cb      	bne.n	801745a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d001      	beq.n	80174cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80174c8:	f000 fb78 	bl	8017bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80174cc:	4b1c      	ldr	r3, [pc, #112]	@ (8017540 <xTaskResumeAll+0x134>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d010      	beq.n	80174fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80174d8:	f000 f858 	bl	801758c <xTaskIncrementTick>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d002      	beq.n	80174e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80174e2:	4b16      	ldr	r3, [pc, #88]	@ (801753c <xTaskResumeAll+0x130>)
 80174e4:	2201      	movs	r2, #1
 80174e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	3b01      	subs	r3, #1
 80174ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d1f1      	bne.n	80174d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80174f4:	4b12      	ldr	r3, [pc, #72]	@ (8017540 <xTaskResumeAll+0x134>)
 80174f6:	2200      	movs	r2, #0
 80174f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80174fa:	4b10      	ldr	r3, [pc, #64]	@ (801753c <xTaskResumeAll+0x130>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d009      	beq.n	8017516 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017502:	2301      	movs	r3, #1
 8017504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017506:	4b0f      	ldr	r3, [pc, #60]	@ (8017544 <xTaskResumeAll+0x138>)
 8017508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801750c:	601a      	str	r2, [r3, #0]
 801750e:	f3bf 8f4f 	dsb	sy
 8017512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017516:	f001 fb01 	bl	8018b1c <vPortExitCritical>

	return xAlreadyYielded;
 801751a:	68bb      	ldr	r3, [r7, #8]
}
 801751c:	4618      	mov	r0, r3
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	2400288c 	.word	0x2400288c
 8017528:	24002864 	.word	0x24002864
 801752c:	24002824 	.word	0x24002824
 8017530:	2400286c 	.word	0x2400286c
 8017534:	24002394 	.word	0x24002394
 8017538:	24002390 	.word	0x24002390
 801753c:	24002878 	.word	0x24002878
 8017540:	24002874 	.word	0x24002874
 8017544:	e000ed04 	.word	0xe000ed04

08017548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801754e:	4b05      	ldr	r3, [pc, #20]	@ (8017564 <xTaskGetTickCount+0x1c>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017554:	687b      	ldr	r3, [r7, #4]
}
 8017556:	4618      	mov	r0, r3
 8017558:	370c      	adds	r7, #12
 801755a:	46bd      	mov	sp, r7
 801755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017560:	4770      	bx	lr
 8017562:	bf00      	nop
 8017564:	24002868 	.word	0x24002868

08017568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801756e:	f001 fb83 	bl	8018c78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017572:	2300      	movs	r3, #0
 8017574:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017576:	4b04      	ldr	r3, [pc, #16]	@ (8017588 <xTaskGetTickCountFromISR+0x20>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801757c:	683b      	ldr	r3, [r7, #0]
}
 801757e:	4618      	mov	r0, r3
 8017580:	3708      	adds	r7, #8
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
 8017586:	bf00      	nop
 8017588:	24002868 	.word	0x24002868

0801758c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b086      	sub	sp, #24
 8017590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017592:	2300      	movs	r3, #0
 8017594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017596:	4b4f      	ldr	r3, [pc, #316]	@ (80176d4 <xTaskIncrementTick+0x148>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	2b00      	cmp	r3, #0
 801759c:	f040 8090 	bne.w	80176c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80175a0:	4b4d      	ldr	r3, [pc, #308]	@ (80176d8 <xTaskIncrementTick+0x14c>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	3301      	adds	r3, #1
 80175a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80175a8:	4a4b      	ldr	r2, [pc, #300]	@ (80176d8 <xTaskIncrementTick+0x14c>)
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d121      	bne.n	80175f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80175b4:	4b49      	ldr	r3, [pc, #292]	@ (80176dc <xTaskIncrementTick+0x150>)
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d00b      	beq.n	80175d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80175be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175c2:	f383 8811 	msr	BASEPRI, r3
 80175c6:	f3bf 8f6f 	isb	sy
 80175ca:	f3bf 8f4f 	dsb	sy
 80175ce:	603b      	str	r3, [r7, #0]
}
 80175d0:	bf00      	nop
 80175d2:	bf00      	nop
 80175d4:	e7fd      	b.n	80175d2 <xTaskIncrementTick+0x46>
 80175d6:	4b41      	ldr	r3, [pc, #260]	@ (80176dc <xTaskIncrementTick+0x150>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	60fb      	str	r3, [r7, #12]
 80175dc:	4b40      	ldr	r3, [pc, #256]	@ (80176e0 <xTaskIncrementTick+0x154>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	4a3e      	ldr	r2, [pc, #248]	@ (80176dc <xTaskIncrementTick+0x150>)
 80175e2:	6013      	str	r3, [r2, #0]
 80175e4:	4a3e      	ldr	r2, [pc, #248]	@ (80176e0 <xTaskIncrementTick+0x154>)
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	6013      	str	r3, [r2, #0]
 80175ea:	4b3e      	ldr	r3, [pc, #248]	@ (80176e4 <xTaskIncrementTick+0x158>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	3301      	adds	r3, #1
 80175f0:	4a3c      	ldr	r2, [pc, #240]	@ (80176e4 <xTaskIncrementTick+0x158>)
 80175f2:	6013      	str	r3, [r2, #0]
 80175f4:	f000 fae2 	bl	8017bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80175f8:	4b3b      	ldr	r3, [pc, #236]	@ (80176e8 <xTaskIncrementTick+0x15c>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	693a      	ldr	r2, [r7, #16]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d349      	bcc.n	8017696 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017602:	4b36      	ldr	r3, [pc, #216]	@ (80176dc <xTaskIncrementTick+0x150>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d104      	bne.n	8017616 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801760c:	4b36      	ldr	r3, [pc, #216]	@ (80176e8 <xTaskIncrementTick+0x15c>)
 801760e:	f04f 32ff 	mov.w	r2, #4294967295
 8017612:	601a      	str	r2, [r3, #0]
					break;
 8017614:	e03f      	b.n	8017696 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017616:	4b31      	ldr	r3, [pc, #196]	@ (80176dc <xTaskIncrementTick+0x150>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017626:	693a      	ldr	r2, [r7, #16]
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	429a      	cmp	r2, r3
 801762c:	d203      	bcs.n	8017636 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801762e:	4a2e      	ldr	r2, [pc, #184]	@ (80176e8 <xTaskIncrementTick+0x15c>)
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017634:	e02f      	b.n	8017696 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	3304      	adds	r3, #4
 801763a:	4618      	mov	r0, r3
 801763c:	f7fe fb42 	bl	8015cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017644:	2b00      	cmp	r3, #0
 8017646:	d004      	beq.n	8017652 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	3318      	adds	r3, #24
 801764c:	4618      	mov	r0, r3
 801764e:	f7fe fb39 	bl	8015cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017652:	68bb      	ldr	r3, [r7, #8]
 8017654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017656:	4b25      	ldr	r3, [pc, #148]	@ (80176ec <xTaskIncrementTick+0x160>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	429a      	cmp	r2, r3
 801765c:	d903      	bls.n	8017666 <xTaskIncrementTick+0xda>
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017662:	4a22      	ldr	r2, [pc, #136]	@ (80176ec <xTaskIncrementTick+0x160>)
 8017664:	6013      	str	r3, [r2, #0]
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801766a:	4613      	mov	r3, r2
 801766c:	009b      	lsls	r3, r3, #2
 801766e:	4413      	add	r3, r2
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	4a1f      	ldr	r2, [pc, #124]	@ (80176f0 <xTaskIncrementTick+0x164>)
 8017674:	441a      	add	r2, r3
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	3304      	adds	r3, #4
 801767a:	4619      	mov	r1, r3
 801767c:	4610      	mov	r0, r2
 801767e:	f7fe fac4 	bl	8015c0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017686:	4b1b      	ldr	r3, [pc, #108]	@ (80176f4 <xTaskIncrementTick+0x168>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801768c:	429a      	cmp	r2, r3
 801768e:	d3b8      	bcc.n	8017602 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017690:	2301      	movs	r3, #1
 8017692:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017694:	e7b5      	b.n	8017602 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017696:	4b17      	ldr	r3, [pc, #92]	@ (80176f4 <xTaskIncrementTick+0x168>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801769c:	4914      	ldr	r1, [pc, #80]	@ (80176f0 <xTaskIncrementTick+0x164>)
 801769e:	4613      	mov	r3, r2
 80176a0:	009b      	lsls	r3, r3, #2
 80176a2:	4413      	add	r3, r2
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	440b      	add	r3, r1
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2b01      	cmp	r3, #1
 80176ac:	d901      	bls.n	80176b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80176ae:	2301      	movs	r3, #1
 80176b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80176b2:	4b11      	ldr	r3, [pc, #68]	@ (80176f8 <xTaskIncrementTick+0x16c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d007      	beq.n	80176ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80176ba:	2301      	movs	r3, #1
 80176bc:	617b      	str	r3, [r7, #20]
 80176be:	e004      	b.n	80176ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80176c0:	4b0e      	ldr	r3, [pc, #56]	@ (80176fc <xTaskIncrementTick+0x170>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	3301      	adds	r3, #1
 80176c6:	4a0d      	ldr	r2, [pc, #52]	@ (80176fc <xTaskIncrementTick+0x170>)
 80176c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80176ca:	697b      	ldr	r3, [r7, #20]
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3718      	adds	r7, #24
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	2400288c 	.word	0x2400288c
 80176d8:	24002868 	.word	0x24002868
 80176dc:	2400281c 	.word	0x2400281c
 80176e0:	24002820 	.word	0x24002820
 80176e4:	2400287c 	.word	0x2400287c
 80176e8:	24002884 	.word	0x24002884
 80176ec:	2400286c 	.word	0x2400286c
 80176f0:	24002394 	.word	0x24002394
 80176f4:	24002390 	.word	0x24002390
 80176f8:	24002878 	.word	0x24002878
 80176fc:	24002874 	.word	0x24002874

08017700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017700:	b480      	push	{r7}
 8017702:	b085      	sub	sp, #20
 8017704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017706:	4b2b      	ldr	r3, [pc, #172]	@ (80177b4 <vTaskSwitchContext+0xb4>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d003      	beq.n	8017716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801770e:	4b2a      	ldr	r3, [pc, #168]	@ (80177b8 <vTaskSwitchContext+0xb8>)
 8017710:	2201      	movs	r2, #1
 8017712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017714:	e047      	b.n	80177a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8017716:	4b28      	ldr	r3, [pc, #160]	@ (80177b8 <vTaskSwitchContext+0xb8>)
 8017718:	2200      	movs	r2, #0
 801771a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801771c:	4b27      	ldr	r3, [pc, #156]	@ (80177bc <vTaskSwitchContext+0xbc>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	60fb      	str	r3, [r7, #12]
 8017722:	e011      	b.n	8017748 <vTaskSwitchContext+0x48>
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d10b      	bne.n	8017742 <vTaskSwitchContext+0x42>
	__asm volatile
 801772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801772e:	f383 8811 	msr	BASEPRI, r3
 8017732:	f3bf 8f6f 	isb	sy
 8017736:	f3bf 8f4f 	dsb	sy
 801773a:	607b      	str	r3, [r7, #4]
}
 801773c:	bf00      	nop
 801773e:	bf00      	nop
 8017740:	e7fd      	b.n	801773e <vTaskSwitchContext+0x3e>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	3b01      	subs	r3, #1
 8017746:	60fb      	str	r3, [r7, #12]
 8017748:	491d      	ldr	r1, [pc, #116]	@ (80177c0 <vTaskSwitchContext+0xc0>)
 801774a:	68fa      	ldr	r2, [r7, #12]
 801774c:	4613      	mov	r3, r2
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	4413      	add	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	440b      	add	r3, r1
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d0e3      	beq.n	8017724 <vTaskSwitchContext+0x24>
 801775c:	68fa      	ldr	r2, [r7, #12]
 801775e:	4613      	mov	r3, r2
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	4413      	add	r3, r2
 8017764:	009b      	lsls	r3, r3, #2
 8017766:	4a16      	ldr	r2, [pc, #88]	@ (80177c0 <vTaskSwitchContext+0xc0>)
 8017768:	4413      	add	r3, r2
 801776a:	60bb      	str	r3, [r7, #8]
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	685a      	ldr	r2, [r3, #4]
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	605a      	str	r2, [r3, #4]
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	685a      	ldr	r2, [r3, #4]
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	3308      	adds	r3, #8
 801777e:	429a      	cmp	r2, r3
 8017780:	d104      	bne.n	801778c <vTaskSwitchContext+0x8c>
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	685a      	ldr	r2, [r3, #4]
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	605a      	str	r2, [r3, #4]
 801778c:	68bb      	ldr	r3, [r7, #8]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	68db      	ldr	r3, [r3, #12]
 8017792:	4a0c      	ldr	r2, [pc, #48]	@ (80177c4 <vTaskSwitchContext+0xc4>)
 8017794:	6013      	str	r3, [r2, #0]
 8017796:	4a09      	ldr	r2, [pc, #36]	@ (80177bc <vTaskSwitchContext+0xbc>)
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801779c:	4b09      	ldr	r3, [pc, #36]	@ (80177c4 <vTaskSwitchContext+0xc4>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	3354      	adds	r3, #84	@ 0x54
 80177a2:	4a09      	ldr	r2, [pc, #36]	@ (80177c8 <vTaskSwitchContext+0xc8>)
 80177a4:	6013      	str	r3, [r2, #0]
}
 80177a6:	bf00      	nop
 80177a8:	3714      	adds	r7, #20
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr
 80177b2:	bf00      	nop
 80177b4:	2400288c 	.word	0x2400288c
 80177b8:	24002878 	.word	0x24002878
 80177bc:	2400286c 	.word	0x2400286c
 80177c0:	24002394 	.word	0x24002394
 80177c4:	24002390 	.word	0x24002390
 80177c8:	24000028 	.word	0x24000028

080177cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d10b      	bne.n	80177f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80177dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177e0:	f383 8811 	msr	BASEPRI, r3
 80177e4:	f3bf 8f6f 	isb	sy
 80177e8:	f3bf 8f4f 	dsb	sy
 80177ec:	60fb      	str	r3, [r7, #12]
}
 80177ee:	bf00      	nop
 80177f0:	bf00      	nop
 80177f2:	e7fd      	b.n	80177f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80177f4:	4b07      	ldr	r3, [pc, #28]	@ (8017814 <vTaskPlaceOnEventList+0x48>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	3318      	adds	r3, #24
 80177fa:	4619      	mov	r1, r3
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f7fe fa28 	bl	8015c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017802:	2101      	movs	r1, #1
 8017804:	6838      	ldr	r0, [r7, #0]
 8017806:	f000 fc79 	bl	80180fc <prvAddCurrentTaskToDelayedList>
}
 801780a:	bf00      	nop
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	24002390 	.word	0x24002390

08017818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017818:	b580      	push	{r7, lr}
 801781a:	b086      	sub	sp, #24
 801781c:	af00      	add	r7, sp, #0
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d10b      	bne.n	8017842 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801782e:	f383 8811 	msr	BASEPRI, r3
 8017832:	f3bf 8f6f 	isb	sy
 8017836:	f3bf 8f4f 	dsb	sy
 801783a:	617b      	str	r3, [r7, #20]
}
 801783c:	bf00      	nop
 801783e:	bf00      	nop
 8017840:	e7fd      	b.n	801783e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017842:	4b0a      	ldr	r3, [pc, #40]	@ (801786c <vTaskPlaceOnEventListRestricted+0x54>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	3318      	adds	r3, #24
 8017848:	4619      	mov	r1, r3
 801784a:	68f8      	ldr	r0, [r7, #12]
 801784c:	f7fe f9dd 	bl	8015c0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d002      	beq.n	801785c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8017856:	f04f 33ff 	mov.w	r3, #4294967295
 801785a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801785c:	6879      	ldr	r1, [r7, #4]
 801785e:	68b8      	ldr	r0, [r7, #8]
 8017860:	f000 fc4c 	bl	80180fc <prvAddCurrentTaskToDelayedList>
	}
 8017864:	bf00      	nop
 8017866:	3718      	adds	r7, #24
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}
 801786c:	24002390 	.word	0x24002390

08017870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b086      	sub	sp, #24
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d10b      	bne.n	801789e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8017886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801788a:	f383 8811 	msr	BASEPRI, r3
 801788e:	f3bf 8f6f 	isb	sy
 8017892:	f3bf 8f4f 	dsb	sy
 8017896:	60fb      	str	r3, [r7, #12]
}
 8017898:	bf00      	nop
 801789a:	bf00      	nop
 801789c:	e7fd      	b.n	801789a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	3318      	adds	r3, #24
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7fe fa0e 	bl	8015cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178a8:	4b1d      	ldr	r3, [pc, #116]	@ (8017920 <xTaskRemoveFromEventList+0xb0>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d11d      	bne.n	80178ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	3304      	adds	r3, #4
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7fe fa05 	bl	8015cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80178be:	4b19      	ldr	r3, [pc, #100]	@ (8017924 <xTaskRemoveFromEventList+0xb4>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d903      	bls.n	80178ce <xTaskRemoveFromEventList+0x5e>
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80178ca:	4a16      	ldr	r2, [pc, #88]	@ (8017924 <xTaskRemoveFromEventList+0xb4>)
 80178cc:	6013      	str	r3, [r2, #0]
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80178d2:	4613      	mov	r3, r2
 80178d4:	009b      	lsls	r3, r3, #2
 80178d6:	4413      	add	r3, r2
 80178d8:	009b      	lsls	r3, r3, #2
 80178da:	4a13      	ldr	r2, [pc, #76]	@ (8017928 <xTaskRemoveFromEventList+0xb8>)
 80178dc:	441a      	add	r2, r3
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	3304      	adds	r3, #4
 80178e2:	4619      	mov	r1, r3
 80178e4:	4610      	mov	r0, r2
 80178e6:	f7fe f990 	bl	8015c0a <vListInsertEnd>
 80178ea:	e005      	b.n	80178f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80178ec:	693b      	ldr	r3, [r7, #16]
 80178ee:	3318      	adds	r3, #24
 80178f0:	4619      	mov	r1, r3
 80178f2:	480e      	ldr	r0, [pc, #56]	@ (801792c <xTaskRemoveFromEventList+0xbc>)
 80178f4:	f7fe f989 	bl	8015c0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80178fc:	4b0c      	ldr	r3, [pc, #48]	@ (8017930 <xTaskRemoveFromEventList+0xc0>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017902:	429a      	cmp	r2, r3
 8017904:	d905      	bls.n	8017912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017906:	2301      	movs	r3, #1
 8017908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801790a:	4b0a      	ldr	r3, [pc, #40]	@ (8017934 <xTaskRemoveFromEventList+0xc4>)
 801790c:	2201      	movs	r2, #1
 801790e:	601a      	str	r2, [r3, #0]
 8017910:	e001      	b.n	8017916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8017912:	2300      	movs	r3, #0
 8017914:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017916:	697b      	ldr	r3, [r7, #20]
}
 8017918:	4618      	mov	r0, r3
 801791a:	3718      	adds	r7, #24
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}
 8017920:	2400288c 	.word	0x2400288c
 8017924:	2400286c 	.word	0x2400286c
 8017928:	24002394 	.word	0x24002394
 801792c:	24002824 	.word	0x24002824
 8017930:	24002390 	.word	0x24002390
 8017934:	24002878 	.word	0x24002878

08017938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017938:	b480      	push	{r7}
 801793a:	b083      	sub	sp, #12
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017940:	4b06      	ldr	r3, [pc, #24]	@ (801795c <vTaskInternalSetTimeOutState+0x24>)
 8017942:	681a      	ldr	r2, [r3, #0]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017948:	4b05      	ldr	r3, [pc, #20]	@ (8017960 <vTaskInternalSetTimeOutState+0x28>)
 801794a:	681a      	ldr	r2, [r3, #0]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	605a      	str	r2, [r3, #4]
}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	2400287c 	.word	0x2400287c
 8017960:	24002868 	.word	0x24002868

08017964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b088      	sub	sp, #32
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
 801796c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d10b      	bne.n	801798c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8017974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017978:	f383 8811 	msr	BASEPRI, r3
 801797c:	f3bf 8f6f 	isb	sy
 8017980:	f3bf 8f4f 	dsb	sy
 8017984:	613b      	str	r3, [r7, #16]
}
 8017986:	bf00      	nop
 8017988:	bf00      	nop
 801798a:	e7fd      	b.n	8017988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d10b      	bne.n	80179aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8017992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017996:	f383 8811 	msr	BASEPRI, r3
 801799a:	f3bf 8f6f 	isb	sy
 801799e:	f3bf 8f4f 	dsb	sy
 80179a2:	60fb      	str	r3, [r7, #12]
}
 80179a4:	bf00      	nop
 80179a6:	bf00      	nop
 80179a8:	e7fd      	b.n	80179a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80179aa:	f001 f885 	bl	8018ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80179ae:	4b1d      	ldr	r3, [pc, #116]	@ (8017a24 <xTaskCheckForTimeOut+0xc0>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	69ba      	ldr	r2, [r7, #24]
 80179ba:	1ad3      	subs	r3, r2, r3
 80179bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179c6:	d102      	bne.n	80179ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80179c8:	2300      	movs	r3, #0
 80179ca:	61fb      	str	r3, [r7, #28]
 80179cc:	e023      	b.n	8017a16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	4b15      	ldr	r3, [pc, #84]	@ (8017a28 <xTaskCheckForTimeOut+0xc4>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d007      	beq.n	80179ea <xTaskCheckForTimeOut+0x86>
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	69ba      	ldr	r2, [r7, #24]
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d302      	bcc.n	80179ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80179e4:	2301      	movs	r3, #1
 80179e6:	61fb      	str	r3, [r7, #28]
 80179e8:	e015      	b.n	8017a16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	697a      	ldr	r2, [r7, #20]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d20b      	bcs.n	8017a0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80179f4:	683b      	ldr	r3, [r7, #0]
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	1ad2      	subs	r2, r2, r3
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f7ff ff99 	bl	8017938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017a06:	2300      	movs	r3, #0
 8017a08:	61fb      	str	r3, [r7, #28]
 8017a0a:	e004      	b.n	8017a16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	2200      	movs	r2, #0
 8017a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017a12:	2301      	movs	r3, #1
 8017a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017a16:	f001 f881 	bl	8018b1c <vPortExitCritical>

	return xReturn;
 8017a1a:	69fb      	ldr	r3, [r7, #28]
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3720      	adds	r7, #32
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	24002868 	.word	0x24002868
 8017a28:	2400287c 	.word	0x2400287c

08017a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017a2c:	b480      	push	{r7}
 8017a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017a30:	4b03      	ldr	r3, [pc, #12]	@ (8017a40 <vTaskMissedYield+0x14>)
 8017a32:	2201      	movs	r2, #1
 8017a34:	601a      	str	r2, [r3, #0]
}
 8017a36:	bf00      	nop
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3e:	4770      	bx	lr
 8017a40:	24002878 	.word	0x24002878

08017a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017a4c:	f000 f852 	bl	8017af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017a50:	4b06      	ldr	r3, [pc, #24]	@ (8017a6c <prvIdleTask+0x28>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d9f9      	bls.n	8017a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017a58:	4b05      	ldr	r3, [pc, #20]	@ (8017a70 <prvIdleTask+0x2c>)
 8017a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a5e:	601a      	str	r2, [r3, #0]
 8017a60:	f3bf 8f4f 	dsb	sy
 8017a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017a68:	e7f0      	b.n	8017a4c <prvIdleTask+0x8>
 8017a6a:	bf00      	nop
 8017a6c:	24002394 	.word	0x24002394
 8017a70:	e000ed04 	.word	0xe000ed04

08017a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	607b      	str	r3, [r7, #4]
 8017a7e:	e00c      	b.n	8017a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017a80:	687a      	ldr	r2, [r7, #4]
 8017a82:	4613      	mov	r3, r2
 8017a84:	009b      	lsls	r3, r3, #2
 8017a86:	4413      	add	r3, r2
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	4a12      	ldr	r2, [pc, #72]	@ (8017ad4 <prvInitialiseTaskLists+0x60>)
 8017a8c:	4413      	add	r3, r2
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f7fe f88e 	bl	8015bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	3301      	adds	r3, #1
 8017a98:	607b      	str	r3, [r7, #4]
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2b37      	cmp	r3, #55	@ 0x37
 8017a9e:	d9ef      	bls.n	8017a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017aa0:	480d      	ldr	r0, [pc, #52]	@ (8017ad8 <prvInitialiseTaskLists+0x64>)
 8017aa2:	f7fe f885 	bl	8015bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017aa6:	480d      	ldr	r0, [pc, #52]	@ (8017adc <prvInitialiseTaskLists+0x68>)
 8017aa8:	f7fe f882 	bl	8015bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017aac:	480c      	ldr	r0, [pc, #48]	@ (8017ae0 <prvInitialiseTaskLists+0x6c>)
 8017aae:	f7fe f87f 	bl	8015bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017ab2:	480c      	ldr	r0, [pc, #48]	@ (8017ae4 <prvInitialiseTaskLists+0x70>)
 8017ab4:	f7fe f87c 	bl	8015bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017ab8:	480b      	ldr	r0, [pc, #44]	@ (8017ae8 <prvInitialiseTaskLists+0x74>)
 8017aba:	f7fe f879 	bl	8015bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017abe:	4b0b      	ldr	r3, [pc, #44]	@ (8017aec <prvInitialiseTaskLists+0x78>)
 8017ac0:	4a05      	ldr	r2, [pc, #20]	@ (8017ad8 <prvInitialiseTaskLists+0x64>)
 8017ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8017af0 <prvInitialiseTaskLists+0x7c>)
 8017ac6:	4a05      	ldr	r2, [pc, #20]	@ (8017adc <prvInitialiseTaskLists+0x68>)
 8017ac8:	601a      	str	r2, [r3, #0]
}
 8017aca:	bf00      	nop
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	24002394 	.word	0x24002394
 8017ad8:	240027f4 	.word	0x240027f4
 8017adc:	24002808 	.word	0x24002808
 8017ae0:	24002824 	.word	0x24002824
 8017ae4:	24002838 	.word	0x24002838
 8017ae8:	24002850 	.word	0x24002850
 8017aec:	2400281c 	.word	0x2400281c
 8017af0:	24002820 	.word	0x24002820

08017af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017afa:	e019      	b.n	8017b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017afc:	f000 ffdc 	bl	8018ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b00:	4b10      	ldr	r3, [pc, #64]	@ (8017b44 <prvCheckTasksWaitingTermination+0x50>)
 8017b02:	68db      	ldr	r3, [r3, #12]
 8017b04:	68db      	ldr	r3, [r3, #12]
 8017b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	3304      	adds	r3, #4
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fe f8d9 	bl	8015cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017b12:	4b0d      	ldr	r3, [pc, #52]	@ (8017b48 <prvCheckTasksWaitingTermination+0x54>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	3b01      	subs	r3, #1
 8017b18:	4a0b      	ldr	r2, [pc, #44]	@ (8017b48 <prvCheckTasksWaitingTermination+0x54>)
 8017b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8017b4c <prvCheckTasksWaitingTermination+0x58>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	3b01      	subs	r3, #1
 8017b22:	4a0a      	ldr	r2, [pc, #40]	@ (8017b4c <prvCheckTasksWaitingTermination+0x58>)
 8017b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017b26:	f000 fff9 	bl	8018b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f000 f810 	bl	8017b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b30:	4b06      	ldr	r3, [pc, #24]	@ (8017b4c <prvCheckTasksWaitingTermination+0x58>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1e1      	bne.n	8017afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017b38:	bf00      	nop
 8017b3a:	bf00      	nop
 8017b3c:	3708      	adds	r7, #8
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}
 8017b42:	bf00      	nop
 8017b44:	24002838 	.word	0x24002838
 8017b48:	24002864 	.word	0x24002864
 8017b4c:	2400284c 	.word	0x2400284c

08017b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	3354      	adds	r3, #84	@ 0x54
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f001 ff9d 	bl	8019a9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d108      	bne.n	8017b7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b70:	4618      	mov	r0, r3
 8017b72:	f001 f991 	bl	8018e98 <vPortFree>
				vPortFree( pxTCB );
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f001 f98e 	bl	8018e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017b7c:	e019      	b.n	8017bb2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d103      	bne.n	8017b90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f001 f985 	bl	8018e98 <vPortFree>
	}
 8017b8e:	e010      	b.n	8017bb2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017b96:	2b02      	cmp	r3, #2
 8017b98:	d00b      	beq.n	8017bb2 <prvDeleteTCB+0x62>
	__asm volatile
 8017b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b9e:	f383 8811 	msr	BASEPRI, r3
 8017ba2:	f3bf 8f6f 	isb	sy
 8017ba6:	f3bf 8f4f 	dsb	sy
 8017baa:	60fb      	str	r3, [r7, #12]
}
 8017bac:	bf00      	nop
 8017bae:	bf00      	nop
 8017bb0:	e7fd      	b.n	8017bae <prvDeleteTCB+0x5e>
	}
 8017bb2:	bf00      	nop
 8017bb4:	3710      	adds	r7, #16
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
	...

08017bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b083      	sub	sp, #12
 8017bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8017bf4 <prvResetNextTaskUnblockTime+0x38>)
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d104      	bne.n	8017bd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8017bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8017bce:	f04f 32ff 	mov.w	r2, #4294967295
 8017bd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017bd4:	e008      	b.n	8017be8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bd6:	4b07      	ldr	r3, [pc, #28]	@ (8017bf4 <prvResetNextTaskUnblockTime+0x38>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	68db      	ldr	r3, [r3, #12]
 8017bdc:	68db      	ldr	r3, [r3, #12]
 8017bde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	685b      	ldr	r3, [r3, #4]
 8017be4:	4a04      	ldr	r2, [pc, #16]	@ (8017bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8017be6:	6013      	str	r3, [r2, #0]
}
 8017be8:	bf00      	nop
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr
 8017bf4:	2400281c 	.word	0x2400281c
 8017bf8:	24002884 	.word	0x24002884

08017bfc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017c02:	4b05      	ldr	r3, [pc, #20]	@ (8017c18 <xTaskGetCurrentTaskHandle+0x1c>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017c08:	687b      	ldr	r3, [r7, #4]
	}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	370c      	adds	r7, #12
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c14:	4770      	bx	lr
 8017c16:	bf00      	nop
 8017c18:	24002390 	.word	0x24002390

08017c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b083      	sub	sp, #12
 8017c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017c22:	4b0b      	ldr	r3, [pc, #44]	@ (8017c50 <xTaskGetSchedulerState+0x34>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d102      	bne.n	8017c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	607b      	str	r3, [r7, #4]
 8017c2e:	e008      	b.n	8017c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c30:	4b08      	ldr	r3, [pc, #32]	@ (8017c54 <xTaskGetSchedulerState+0x38>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d102      	bne.n	8017c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017c38:	2302      	movs	r3, #2
 8017c3a:	607b      	str	r3, [r7, #4]
 8017c3c:	e001      	b.n	8017c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017c42:	687b      	ldr	r3, [r7, #4]
	}
 8017c44:	4618      	mov	r0, r3
 8017c46:	370c      	adds	r7, #12
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4e:	4770      	bx	lr
 8017c50:	24002870 	.word	0x24002870
 8017c54:	2400288c 	.word	0x2400288c

08017c58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017c64:	2300      	movs	r3, #0
 8017c66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d051      	beq.n	8017d12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c72:	4b2a      	ldr	r3, [pc, #168]	@ (8017d1c <xTaskPriorityInherit+0xc4>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d241      	bcs.n	8017d00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	699b      	ldr	r3, [r3, #24]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	db06      	blt.n	8017c92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c84:	4b25      	ldr	r3, [pc, #148]	@ (8017d1c <xTaskPriorityInherit+0xc4>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	6959      	ldr	r1, [r3, #20]
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c9a:	4613      	mov	r3, r2
 8017c9c:	009b      	lsls	r3, r3, #2
 8017c9e:	4413      	add	r3, r2
 8017ca0:	009b      	lsls	r3, r3, #2
 8017ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8017d20 <xTaskPriorityInherit+0xc8>)
 8017ca4:	4413      	add	r3, r2
 8017ca6:	4299      	cmp	r1, r3
 8017ca8:	d122      	bne.n	8017cf0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	3304      	adds	r3, #4
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fe f808 	bl	8015cc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017cb4:	4b19      	ldr	r3, [pc, #100]	@ (8017d1c <xTaskPriorityInherit+0xc4>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cc2:	4b18      	ldr	r3, [pc, #96]	@ (8017d24 <xTaskPriorityInherit+0xcc>)
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d903      	bls.n	8017cd2 <xTaskPriorityInherit+0x7a>
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cce:	4a15      	ldr	r2, [pc, #84]	@ (8017d24 <xTaskPriorityInherit+0xcc>)
 8017cd0:	6013      	str	r3, [r2, #0]
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	009b      	lsls	r3, r3, #2
 8017cda:	4413      	add	r3, r2
 8017cdc:	009b      	lsls	r3, r3, #2
 8017cde:	4a10      	ldr	r2, [pc, #64]	@ (8017d20 <xTaskPriorityInherit+0xc8>)
 8017ce0:	441a      	add	r2, r3
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	3304      	adds	r3, #4
 8017ce6:	4619      	mov	r1, r3
 8017ce8:	4610      	mov	r0, r2
 8017cea:	f7fd ff8e 	bl	8015c0a <vListInsertEnd>
 8017cee:	e004      	b.n	8017cfa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8017d1c <xTaskPriorityInherit+0xc4>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	60fb      	str	r3, [r7, #12]
 8017cfe:	e008      	b.n	8017d12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017d04:	4b05      	ldr	r3, [pc, #20]	@ (8017d1c <xTaskPriorityInherit+0xc4>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d201      	bcs.n	8017d12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017d12:	68fb      	ldr	r3, [r7, #12]
	}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}
 8017d1c:	24002390 	.word	0x24002390
 8017d20:	24002394 	.word	0x24002394
 8017d24:	2400286c 	.word	0x2400286c

08017d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b086      	sub	sp, #24
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017d34:	2300      	movs	r3, #0
 8017d36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d058      	beq.n	8017df0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8017dfc <xTaskPriorityDisinherit+0xd4>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	693a      	ldr	r2, [r7, #16]
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d00b      	beq.n	8017d60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d4c:	f383 8811 	msr	BASEPRI, r3
 8017d50:	f3bf 8f6f 	isb	sy
 8017d54:	f3bf 8f4f 	dsb	sy
 8017d58:	60fb      	str	r3, [r7, #12]
}
 8017d5a:	bf00      	nop
 8017d5c:	bf00      	nop
 8017d5e:	e7fd      	b.n	8017d5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017d60:	693b      	ldr	r3, [r7, #16]
 8017d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d10b      	bne.n	8017d80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8017d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d6c:	f383 8811 	msr	BASEPRI, r3
 8017d70:	f3bf 8f6f 	isb	sy
 8017d74:	f3bf 8f4f 	dsb	sy
 8017d78:	60bb      	str	r3, [r7, #8]
}
 8017d7a:	bf00      	nop
 8017d7c:	bf00      	nop
 8017d7e:	e7fd      	b.n	8017d7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d84:	1e5a      	subs	r2, r3, #1
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d02c      	beq.n	8017df0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017d96:	693b      	ldr	r3, [r7, #16]
 8017d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d128      	bne.n	8017df0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	3304      	adds	r3, #4
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fd ff8e 	bl	8015cc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017da8:	693b      	ldr	r3, [r7, #16]
 8017daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017db4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8017e00 <xTaskPriorityDisinherit+0xd8>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	d903      	bls.n	8017dd0 <xTaskPriorityDisinherit+0xa8>
 8017dc8:	693b      	ldr	r3, [r7, #16]
 8017dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8017e00 <xTaskPriorityDisinherit+0xd8>)
 8017dce:	6013      	str	r3, [r2, #0]
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	009b      	lsls	r3, r3, #2
 8017dd8:	4413      	add	r3, r2
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	4a09      	ldr	r2, [pc, #36]	@ (8017e04 <xTaskPriorityDisinherit+0xdc>)
 8017dde:	441a      	add	r2, r3
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	3304      	adds	r3, #4
 8017de4:	4619      	mov	r1, r3
 8017de6:	4610      	mov	r0, r2
 8017de8:	f7fd ff0f 	bl	8015c0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017dec:	2301      	movs	r3, #1
 8017dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017df0:	697b      	ldr	r3, [r7, #20]
	}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3718      	adds	r7, #24
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	24002390 	.word	0x24002390
 8017e00:	2400286c 	.word	0x2400286c
 8017e04:	24002394 	.word	0x24002394

08017e08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b088      	sub	sp, #32
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017e16:	2301      	movs	r3, #1
 8017e18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d06c      	beq.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d10b      	bne.n	8017e40 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8017e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e2c:	f383 8811 	msr	BASEPRI, r3
 8017e30:	f3bf 8f6f 	isb	sy
 8017e34:	f3bf 8f4f 	dsb	sy
 8017e38:	60fb      	str	r3, [r7, #12]
}
 8017e3a:	bf00      	nop
 8017e3c:	bf00      	nop
 8017e3e:	e7fd      	b.n	8017e3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d902      	bls.n	8017e50 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	61fb      	str	r3, [r7, #28]
 8017e4e:	e002      	b.n	8017e56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017e50:	69bb      	ldr	r3, [r7, #24]
 8017e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e5a:	69fa      	ldr	r2, [r7, #28]
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d04c      	beq.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017e60:	69bb      	ldr	r3, [r7, #24]
 8017e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e64:	697a      	ldr	r2, [r7, #20]
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d147      	bne.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017e6a:	4b26      	ldr	r3, [pc, #152]	@ (8017f04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	69ba      	ldr	r2, [r7, #24]
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d10b      	bne.n	8017e8c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8017e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e78:	f383 8811 	msr	BASEPRI, r3
 8017e7c:	f3bf 8f6f 	isb	sy
 8017e80:	f3bf 8f4f 	dsb	sy
 8017e84:	60bb      	str	r3, [r7, #8]
}
 8017e86:	bf00      	nop
 8017e88:	bf00      	nop
 8017e8a:	e7fd      	b.n	8017e88 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	69fa      	ldr	r2, [r7, #28]
 8017e96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017e98:	69bb      	ldr	r3, [r7, #24]
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	db04      	blt.n	8017eaa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	6959      	ldr	r1, [r3, #20]
 8017eae:	693a      	ldr	r2, [r7, #16]
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	009b      	lsls	r3, r3, #2
 8017eb4:	4413      	add	r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	4a13      	ldr	r2, [pc, #76]	@ (8017f08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017eba:	4413      	add	r3, r2
 8017ebc:	4299      	cmp	r1, r3
 8017ebe:	d11c      	bne.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017ec0:	69bb      	ldr	r3, [r7, #24]
 8017ec2:	3304      	adds	r3, #4
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7fd fefd 	bl	8015cc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017eca:	69bb      	ldr	r3, [r7, #24]
 8017ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ece:	4b0f      	ldr	r3, [pc, #60]	@ (8017f0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d903      	bls.n	8017ede <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eda:	4a0c      	ldr	r2, [pc, #48]	@ (8017f0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017edc:	6013      	str	r3, [r2, #0]
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	4413      	add	r3, r2
 8017ee8:	009b      	lsls	r3, r3, #2
 8017eea:	4a07      	ldr	r2, [pc, #28]	@ (8017f08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017eec:	441a      	add	r2, r3
 8017eee:	69bb      	ldr	r3, [r7, #24]
 8017ef0:	3304      	adds	r3, #4
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7fd fe88 	bl	8015c0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017efa:	bf00      	nop
 8017efc:	3720      	adds	r7, #32
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	24002390 	.word	0x24002390
 8017f08:	24002394 	.word	0x24002394
 8017f0c:	2400286c 	.word	0x2400286c

08017f10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017f10:	b480      	push	{r7}
 8017f12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017f14:	4b07      	ldr	r3, [pc, #28]	@ (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d004      	beq.n	8017f26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017f1c:	4b05      	ldr	r3, [pc, #20]	@ (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f22:	3201      	adds	r2, #1
 8017f24:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8017f26:	4b03      	ldr	r3, [pc, #12]	@ (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f28:	681b      	ldr	r3, [r3, #0]
	}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr
 8017f34:	24002390 	.word	0x24002390

08017f38 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8017f42:	f000 fdb9 	bl	8018ab8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8017f46:	4b20      	ldr	r3, [pc, #128]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d113      	bne.n	8017f7a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017f52:	4b1d      	ldr	r3, [pc, #116]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	2201      	movs	r2, #1
 8017f58:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d00b      	beq.n	8017f7a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f62:	2101      	movs	r1, #1
 8017f64:	6838      	ldr	r0, [r7, #0]
 8017f66:	f000 f8c9 	bl	80180fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017f6a:	4b18      	ldr	r3, [pc, #96]	@ (8017fcc <ulTaskNotifyTake+0x94>)
 8017f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f70:	601a      	str	r2, [r3, #0]
 8017f72:	f3bf 8f4f 	dsb	sy
 8017f76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017f7a:	f000 fdcf 	bl	8018b1c <vPortExitCritical>

		taskENTER_CRITICAL();
 8017f7e:	f000 fd9b 	bl	8018ab8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8017f82:	4b11      	ldr	r3, [pc, #68]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017f8a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d00e      	beq.n	8017fb0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d005      	beq.n	8017fa4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017f98:	4b0b      	ldr	r3, [pc, #44]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8017fa2:	e005      	b.n	8017fb0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017fa4:	4b08      	ldr	r3, [pc, #32]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	68fa      	ldr	r2, [r7, #12]
 8017faa:	3a01      	subs	r2, #1
 8017fac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017fb0:	4b05      	ldr	r3, [pc, #20]	@ (8017fc8 <ulTaskNotifyTake+0x90>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8017fba:	f000 fdaf 	bl	8018b1c <vPortExitCritical>

		return ulReturn;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
	}
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	3710      	adds	r7, #16
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bd80      	pop	{r7, pc}
 8017fc8:	24002390 	.word	0x24002390
 8017fcc:	e000ed04 	.word	0xe000ed04

08017fd0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b08a      	sub	sp, #40	@ 0x28
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
 8017fd8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d10b      	bne.n	8017ff8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8017fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fe4:	f383 8811 	msr	BASEPRI, r3
 8017fe8:	f3bf 8f6f 	isb	sy
 8017fec:	f3bf 8f4f 	dsb	sy
 8017ff0:	61bb      	str	r3, [r7, #24]
}
 8017ff2:	bf00      	nop
 8017ff4:	bf00      	nop
 8017ff6:	e7fd      	b.n	8017ff4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ff8:	f000 fe3e 	bl	8018c78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8018000:	f3ef 8211 	mrs	r2, BASEPRI
 8018004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018008:	f383 8811 	msr	BASEPRI, r3
 801800c:	f3bf 8f6f 	isb	sy
 8018010:	f3bf 8f4f 	dsb	sy
 8018014:	617a      	str	r2, [r7, #20]
 8018016:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018018:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801801a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801801e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8018022:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018026:	2202      	movs	r2, #2
 8018028:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 801802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801802e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018032:	1c5a      	adds	r2, r3, #1
 8018034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018036:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801803a:	7ffb      	ldrb	r3, [r7, #31]
 801803c:	2b01      	cmp	r3, #1
 801803e:	d147      	bne.n	80180d0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018044:	2b00      	cmp	r3, #0
 8018046:	d00b      	beq.n	8018060 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8018048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801804c:	f383 8811 	msr	BASEPRI, r3
 8018050:	f3bf 8f6f 	isb	sy
 8018054:	f3bf 8f4f 	dsb	sy
 8018058:	60fb      	str	r3, [r7, #12]
}
 801805a:	bf00      	nop
 801805c:	bf00      	nop
 801805e:	e7fd      	b.n	801805c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018060:	4b20      	ldr	r3, [pc, #128]	@ (80180e4 <vTaskNotifyGiveFromISR+0x114>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d11d      	bne.n	80180a4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806a:	3304      	adds	r3, #4
 801806c:	4618      	mov	r0, r3
 801806e:	f7fd fe29 	bl	8015cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018076:	4b1c      	ldr	r3, [pc, #112]	@ (80180e8 <vTaskNotifyGiveFromISR+0x118>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d903      	bls.n	8018086 <vTaskNotifyGiveFromISR+0xb6>
 801807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018082:	4a19      	ldr	r2, [pc, #100]	@ (80180e8 <vTaskNotifyGiveFromISR+0x118>)
 8018084:	6013      	str	r3, [r2, #0]
 8018086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801808a:	4613      	mov	r3, r2
 801808c:	009b      	lsls	r3, r3, #2
 801808e:	4413      	add	r3, r2
 8018090:	009b      	lsls	r3, r3, #2
 8018092:	4a16      	ldr	r2, [pc, #88]	@ (80180ec <vTaskNotifyGiveFromISR+0x11c>)
 8018094:	441a      	add	r2, r3
 8018096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018098:	3304      	adds	r3, #4
 801809a:	4619      	mov	r1, r3
 801809c:	4610      	mov	r0, r2
 801809e:	f7fd fdb4 	bl	8015c0a <vListInsertEnd>
 80180a2:	e005      	b.n	80180b0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80180a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a6:	3318      	adds	r3, #24
 80180a8:	4619      	mov	r1, r3
 80180aa:	4811      	ldr	r0, [pc, #68]	@ (80180f0 <vTaskNotifyGiveFromISR+0x120>)
 80180ac:	f7fd fdad 	bl	8015c0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80180b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180b4:	4b0f      	ldr	r3, [pc, #60]	@ (80180f4 <vTaskNotifyGiveFromISR+0x124>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d908      	bls.n	80180d0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80180be:	683b      	ldr	r3, [r7, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d002      	beq.n	80180ca <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	2201      	movs	r2, #1
 80180c8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80180ca:	4b0b      	ldr	r3, [pc, #44]	@ (80180f8 <vTaskNotifyGiveFromISR+0x128>)
 80180cc:	2201      	movs	r2, #1
 80180ce:	601a      	str	r2, [r3, #0]
 80180d0:	6a3b      	ldr	r3, [r7, #32]
 80180d2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	f383 8811 	msr	BASEPRI, r3
}
 80180da:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80180dc:	bf00      	nop
 80180de:	3728      	adds	r7, #40	@ 0x28
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	2400288c 	.word	0x2400288c
 80180e8:	2400286c 	.word	0x2400286c
 80180ec:	24002394 	.word	0x24002394
 80180f0:	24002824 	.word	0x24002824
 80180f4:	24002390 	.word	0x24002390
 80180f8:	24002878 	.word	0x24002878

080180fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b084      	sub	sp, #16
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
 8018104:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018106:	4b21      	ldr	r3, [pc, #132]	@ (801818c <prvAddCurrentTaskToDelayedList+0x90>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801810c:	4b20      	ldr	r3, [pc, #128]	@ (8018190 <prvAddCurrentTaskToDelayedList+0x94>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	3304      	adds	r3, #4
 8018112:	4618      	mov	r0, r3
 8018114:	f7fd fdd6 	bl	8015cc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801811e:	d10a      	bne.n	8018136 <prvAddCurrentTaskToDelayedList+0x3a>
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d007      	beq.n	8018136 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018126:	4b1a      	ldr	r3, [pc, #104]	@ (8018190 <prvAddCurrentTaskToDelayedList+0x94>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	3304      	adds	r3, #4
 801812c:	4619      	mov	r1, r3
 801812e:	4819      	ldr	r0, [pc, #100]	@ (8018194 <prvAddCurrentTaskToDelayedList+0x98>)
 8018130:	f7fd fd6b 	bl	8015c0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018134:	e026      	b.n	8018184 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018136:	68fa      	ldr	r2, [r7, #12]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	4413      	add	r3, r2
 801813c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801813e:	4b14      	ldr	r3, [pc, #80]	@ (8018190 <prvAddCurrentTaskToDelayedList+0x94>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	68ba      	ldr	r2, [r7, #8]
 8018144:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018146:	68ba      	ldr	r2, [r7, #8]
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	429a      	cmp	r2, r3
 801814c:	d209      	bcs.n	8018162 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801814e:	4b12      	ldr	r3, [pc, #72]	@ (8018198 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	4b0f      	ldr	r3, [pc, #60]	@ (8018190 <prvAddCurrentTaskToDelayedList+0x94>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	3304      	adds	r3, #4
 8018158:	4619      	mov	r1, r3
 801815a:	4610      	mov	r0, r2
 801815c:	f7fd fd79 	bl	8015c52 <vListInsert>
}
 8018160:	e010      	b.n	8018184 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018162:	4b0e      	ldr	r3, [pc, #56]	@ (801819c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	4b0a      	ldr	r3, [pc, #40]	@ (8018190 <prvAddCurrentTaskToDelayedList+0x94>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	3304      	adds	r3, #4
 801816c:	4619      	mov	r1, r3
 801816e:	4610      	mov	r0, r2
 8018170:	f7fd fd6f 	bl	8015c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018174:	4b0a      	ldr	r3, [pc, #40]	@ (80181a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	68ba      	ldr	r2, [r7, #8]
 801817a:	429a      	cmp	r2, r3
 801817c:	d202      	bcs.n	8018184 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801817e:	4a08      	ldr	r2, [pc, #32]	@ (80181a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	6013      	str	r3, [r2, #0]
}
 8018184:	bf00      	nop
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}
 801818c:	24002868 	.word	0x24002868
 8018190:	24002390 	.word	0x24002390
 8018194:	24002850 	.word	0x24002850
 8018198:	24002820 	.word	0x24002820
 801819c:	2400281c 	.word	0x2400281c
 80181a0:	24002884 	.word	0x24002884

080181a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b08a      	sub	sp, #40	@ 0x28
 80181a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80181aa:	2300      	movs	r3, #0
 80181ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80181ae:	f000 fb13 	bl	80187d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80181b2:	4b1d      	ldr	r3, [pc, #116]	@ (8018228 <xTimerCreateTimerTask+0x84>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d021      	beq.n	80181fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80181ba:	2300      	movs	r3, #0
 80181bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80181be:	2300      	movs	r3, #0
 80181c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80181c2:	1d3a      	adds	r2, r7, #4
 80181c4:	f107 0108 	add.w	r1, r7, #8
 80181c8:	f107 030c 	add.w	r3, r7, #12
 80181cc:	4618      	mov	r0, r3
 80181ce:	f7fd fcd5 	bl	8015b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80181d2:	6879      	ldr	r1, [r7, #4]
 80181d4:	68bb      	ldr	r3, [r7, #8]
 80181d6:	68fa      	ldr	r2, [r7, #12]
 80181d8:	9202      	str	r2, [sp, #8]
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	2302      	movs	r3, #2
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	2300      	movs	r3, #0
 80181e2:	460a      	mov	r2, r1
 80181e4:	4911      	ldr	r1, [pc, #68]	@ (801822c <xTimerCreateTimerTask+0x88>)
 80181e6:	4812      	ldr	r0, [pc, #72]	@ (8018230 <xTimerCreateTimerTask+0x8c>)
 80181e8:	f7fe fdc2 	bl	8016d70 <xTaskCreateStatic>
 80181ec:	4603      	mov	r3, r0
 80181ee:	4a11      	ldr	r2, [pc, #68]	@ (8018234 <xTimerCreateTimerTask+0x90>)
 80181f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80181f2:	4b10      	ldr	r3, [pc, #64]	@ (8018234 <xTimerCreateTimerTask+0x90>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d001      	beq.n	80181fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80181fa:	2301      	movs	r3, #1
 80181fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d10b      	bne.n	801821c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8018204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018208:	f383 8811 	msr	BASEPRI, r3
 801820c:	f3bf 8f6f 	isb	sy
 8018210:	f3bf 8f4f 	dsb	sy
 8018214:	613b      	str	r3, [r7, #16]
}
 8018216:	bf00      	nop
 8018218:	bf00      	nop
 801821a:	e7fd      	b.n	8018218 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801821c:	697b      	ldr	r3, [r7, #20]
}
 801821e:	4618      	mov	r0, r3
 8018220:	3718      	adds	r7, #24
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	240028c0 	.word	0x240028c0
 801822c:	0801a99c 	.word	0x0801a99c
 8018230:	08018371 	.word	0x08018371
 8018234:	240028c4 	.word	0x240028c4

08018238 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b08a      	sub	sp, #40	@ 0x28
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	607a      	str	r2, [r7, #4]
 8018244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018246:	2300      	movs	r3, #0
 8018248:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d10b      	bne.n	8018268 <xTimerGenericCommand+0x30>
	__asm volatile
 8018250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018254:	f383 8811 	msr	BASEPRI, r3
 8018258:	f3bf 8f6f 	isb	sy
 801825c:	f3bf 8f4f 	dsb	sy
 8018260:	623b      	str	r3, [r7, #32]
}
 8018262:	bf00      	nop
 8018264:	bf00      	nop
 8018266:	e7fd      	b.n	8018264 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018268:	4b19      	ldr	r3, [pc, #100]	@ (80182d0 <xTimerGenericCommand+0x98>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d02a      	beq.n	80182c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	2b05      	cmp	r3, #5
 8018280:	dc18      	bgt.n	80182b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018282:	f7ff fccb 	bl	8017c1c <xTaskGetSchedulerState>
 8018286:	4603      	mov	r3, r0
 8018288:	2b02      	cmp	r3, #2
 801828a:	d109      	bne.n	80182a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801828c:	4b10      	ldr	r3, [pc, #64]	@ (80182d0 <xTimerGenericCommand+0x98>)
 801828e:	6818      	ldr	r0, [r3, #0]
 8018290:	f107 0110 	add.w	r1, r7, #16
 8018294:	2300      	movs	r3, #0
 8018296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018298:	f7fd fef2 	bl	8016080 <xQueueGenericSend>
 801829c:	6278      	str	r0, [r7, #36]	@ 0x24
 801829e:	e012      	b.n	80182c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80182a0:	4b0b      	ldr	r3, [pc, #44]	@ (80182d0 <xTimerGenericCommand+0x98>)
 80182a2:	6818      	ldr	r0, [r3, #0]
 80182a4:	f107 0110 	add.w	r1, r7, #16
 80182a8:	2300      	movs	r3, #0
 80182aa:	2200      	movs	r2, #0
 80182ac:	f7fd fee8 	bl	8016080 <xQueueGenericSend>
 80182b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80182b2:	e008      	b.n	80182c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80182b4:	4b06      	ldr	r3, [pc, #24]	@ (80182d0 <xTimerGenericCommand+0x98>)
 80182b6:	6818      	ldr	r0, [r3, #0]
 80182b8:	f107 0110 	add.w	r1, r7, #16
 80182bc:	2300      	movs	r3, #0
 80182be:	683a      	ldr	r2, [r7, #0]
 80182c0:	f7fd ffe0 	bl	8016284 <xQueueGenericSendFromISR>
 80182c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80182c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3728      	adds	r7, #40	@ 0x28
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	240028c0 	.word	0x240028c0

080182d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b088      	sub	sp, #32
 80182d8:	af02      	add	r7, sp, #8
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182de:	4b23      	ldr	r3, [pc, #140]	@ (801836c <prvProcessExpiredTimer+0x98>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	68db      	ldr	r3, [r3, #12]
 80182e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	3304      	adds	r3, #4
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7fd fce9 	bl	8015cc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80182f2:	697b      	ldr	r3, [r7, #20]
 80182f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80182f8:	f003 0304 	and.w	r3, r3, #4
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d023      	beq.n	8018348 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	699a      	ldr	r2, [r3, #24]
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	18d1      	adds	r1, r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	683a      	ldr	r2, [r7, #0]
 801830c:	6978      	ldr	r0, [r7, #20]
 801830e:	f000 f8d5 	bl	80184bc <prvInsertTimerInActiveList>
 8018312:	4603      	mov	r3, r0
 8018314:	2b00      	cmp	r3, #0
 8018316:	d020      	beq.n	801835a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018318:	2300      	movs	r3, #0
 801831a:	9300      	str	r3, [sp, #0]
 801831c:	2300      	movs	r3, #0
 801831e:	687a      	ldr	r2, [r7, #4]
 8018320:	2100      	movs	r1, #0
 8018322:	6978      	ldr	r0, [r7, #20]
 8018324:	f7ff ff88 	bl	8018238 <xTimerGenericCommand>
 8018328:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d114      	bne.n	801835a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8018330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018334:	f383 8811 	msr	BASEPRI, r3
 8018338:	f3bf 8f6f 	isb	sy
 801833c:	f3bf 8f4f 	dsb	sy
 8018340:	60fb      	str	r3, [r7, #12]
}
 8018342:	bf00      	nop
 8018344:	bf00      	nop
 8018346:	e7fd      	b.n	8018344 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801834e:	f023 0301 	bic.w	r3, r3, #1
 8018352:	b2da      	uxtb	r2, r3
 8018354:	697b      	ldr	r3, [r7, #20]
 8018356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	6a1b      	ldr	r3, [r3, #32]
 801835e:	6978      	ldr	r0, [r7, #20]
 8018360:	4798      	blx	r3
}
 8018362:	bf00      	nop
 8018364:	3718      	adds	r7, #24
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	240028b8 	.word	0x240028b8

08018370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b084      	sub	sp, #16
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018378:	f107 0308 	add.w	r3, r7, #8
 801837c:	4618      	mov	r0, r3
 801837e:	f000 f859 	bl	8018434 <prvGetNextExpireTime>
 8018382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	4619      	mov	r1, r3
 8018388:	68f8      	ldr	r0, [r7, #12]
 801838a:	f000 f805 	bl	8018398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801838e:	f000 f8d7 	bl	8018540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018392:	bf00      	nop
 8018394:	e7f0      	b.n	8018378 <prvTimerTask+0x8>
	...

08018398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b084      	sub	sp, #16
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80183a2:	f7ff f825 	bl	80173f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80183a6:	f107 0308 	add.w	r3, r7, #8
 80183aa:	4618      	mov	r0, r3
 80183ac:	f000 f866 	bl	801847c <prvSampleTimeNow>
 80183b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d130      	bne.n	801841a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d10a      	bne.n	80183d4 <prvProcessTimerOrBlockTask+0x3c>
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d806      	bhi.n	80183d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80183c6:	f7ff f821 	bl	801740c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80183ca:	68f9      	ldr	r1, [r7, #12]
 80183cc:	6878      	ldr	r0, [r7, #4]
 80183ce:	f7ff ff81 	bl	80182d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80183d2:	e024      	b.n	801841e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d008      	beq.n	80183ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80183da:	4b13      	ldr	r3, [pc, #76]	@ (8018428 <prvProcessTimerOrBlockTask+0x90>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d101      	bne.n	80183e8 <prvProcessTimerOrBlockTask+0x50>
 80183e4:	2301      	movs	r3, #1
 80183e6:	e000      	b.n	80183ea <prvProcessTimerOrBlockTask+0x52>
 80183e8:	2300      	movs	r3, #0
 80183ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80183ec:	4b0f      	ldr	r3, [pc, #60]	@ (801842c <prvProcessTimerOrBlockTask+0x94>)
 80183ee:	6818      	ldr	r0, [r3, #0]
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	1ad3      	subs	r3, r2, r3
 80183f6:	683a      	ldr	r2, [r7, #0]
 80183f8:	4619      	mov	r1, r3
 80183fa:	f7fe fc85 	bl	8016d08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80183fe:	f7ff f805 	bl	801740c <xTaskResumeAll>
 8018402:	4603      	mov	r3, r0
 8018404:	2b00      	cmp	r3, #0
 8018406:	d10a      	bne.n	801841e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018408:	4b09      	ldr	r3, [pc, #36]	@ (8018430 <prvProcessTimerOrBlockTask+0x98>)
 801840a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801840e:	601a      	str	r2, [r3, #0]
 8018410:	f3bf 8f4f 	dsb	sy
 8018414:	f3bf 8f6f 	isb	sy
}
 8018418:	e001      	b.n	801841e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801841a:	f7fe fff7 	bl	801740c <xTaskResumeAll>
}
 801841e:	bf00      	nop
 8018420:	3710      	adds	r7, #16
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
 8018426:	bf00      	nop
 8018428:	240028bc 	.word	0x240028bc
 801842c:	240028c0 	.word	0x240028c0
 8018430:	e000ed04 	.word	0xe000ed04

08018434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018434:	b480      	push	{r7}
 8018436:	b085      	sub	sp, #20
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801843c:	4b0e      	ldr	r3, [pc, #56]	@ (8018478 <prvGetNextExpireTime+0x44>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d101      	bne.n	801844a <prvGetNextExpireTime+0x16>
 8018446:	2201      	movs	r2, #1
 8018448:	e000      	b.n	801844c <prvGetNextExpireTime+0x18>
 801844a:	2200      	movs	r2, #0
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d105      	bne.n	8018464 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018458:	4b07      	ldr	r3, [pc, #28]	@ (8018478 <prvGetNextExpireTime+0x44>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	60fb      	str	r3, [r7, #12]
 8018462:	e001      	b.n	8018468 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018464:	2300      	movs	r3, #0
 8018466:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018468:	68fb      	ldr	r3, [r7, #12]
}
 801846a:	4618      	mov	r0, r3
 801846c:	3714      	adds	r7, #20
 801846e:	46bd      	mov	sp, r7
 8018470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018474:	4770      	bx	lr
 8018476:	bf00      	nop
 8018478:	240028b8 	.word	0x240028b8

0801847c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b084      	sub	sp, #16
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018484:	f7ff f860 	bl	8017548 <xTaskGetTickCount>
 8018488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801848a:	4b0b      	ldr	r3, [pc, #44]	@ (80184b8 <prvSampleTimeNow+0x3c>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	68fa      	ldr	r2, [r7, #12]
 8018490:	429a      	cmp	r2, r3
 8018492:	d205      	bcs.n	80184a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018494:	f000 f93a 	bl	801870c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2201      	movs	r2, #1
 801849c:	601a      	str	r2, [r3, #0]
 801849e:	e002      	b.n	80184a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2200      	movs	r2, #0
 80184a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80184a6:	4a04      	ldr	r2, [pc, #16]	@ (80184b8 <prvSampleTimeNow+0x3c>)
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80184ac:	68fb      	ldr	r3, [r7, #12]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3710      	adds	r7, #16
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	240028c8 	.word	0x240028c8

080184bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b086      	sub	sp, #24
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	607a      	str	r2, [r7, #4]
 80184c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80184ca:	2300      	movs	r3, #0
 80184cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	68ba      	ldr	r2, [r7, #8]
 80184d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	68fa      	ldr	r2, [r7, #12]
 80184d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80184da:	68ba      	ldr	r2, [r7, #8]
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	429a      	cmp	r2, r3
 80184e0:	d812      	bhi.n	8018508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	1ad2      	subs	r2, r2, r3
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	699b      	ldr	r3, [r3, #24]
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d302      	bcc.n	80184f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80184f0:	2301      	movs	r3, #1
 80184f2:	617b      	str	r3, [r7, #20]
 80184f4:	e01b      	b.n	801852e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80184f6:	4b10      	ldr	r3, [pc, #64]	@ (8018538 <prvInsertTimerInActiveList+0x7c>)
 80184f8:	681a      	ldr	r2, [r3, #0]
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	3304      	adds	r3, #4
 80184fe:	4619      	mov	r1, r3
 8018500:	4610      	mov	r0, r2
 8018502:	f7fd fba6 	bl	8015c52 <vListInsert>
 8018506:	e012      	b.n	801852e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018508:	687a      	ldr	r2, [r7, #4]
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	429a      	cmp	r2, r3
 801850e:	d206      	bcs.n	801851e <prvInsertTimerInActiveList+0x62>
 8018510:	68ba      	ldr	r2, [r7, #8]
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	429a      	cmp	r2, r3
 8018516:	d302      	bcc.n	801851e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018518:	2301      	movs	r3, #1
 801851a:	617b      	str	r3, [r7, #20]
 801851c:	e007      	b.n	801852e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801851e:	4b07      	ldr	r3, [pc, #28]	@ (801853c <prvInsertTimerInActiveList+0x80>)
 8018520:	681a      	ldr	r2, [r3, #0]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	3304      	adds	r3, #4
 8018526:	4619      	mov	r1, r3
 8018528:	4610      	mov	r0, r2
 801852a:	f7fd fb92 	bl	8015c52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801852e:	697b      	ldr	r3, [r7, #20]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3718      	adds	r7, #24
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	240028bc 	.word	0x240028bc
 801853c:	240028b8 	.word	0x240028b8

08018540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b08e      	sub	sp, #56	@ 0x38
 8018544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018546:	e0ce      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	2b00      	cmp	r3, #0
 801854c:	da19      	bge.n	8018582 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801854e:	1d3b      	adds	r3, r7, #4
 8018550:	3304      	adds	r3, #4
 8018552:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018556:	2b00      	cmp	r3, #0
 8018558:	d10b      	bne.n	8018572 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801855e:	f383 8811 	msr	BASEPRI, r3
 8018562:	f3bf 8f6f 	isb	sy
 8018566:	f3bf 8f4f 	dsb	sy
 801856a:	61fb      	str	r3, [r7, #28]
}
 801856c:	bf00      	nop
 801856e:	bf00      	nop
 8018570:	e7fd      	b.n	801856e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018578:	6850      	ldr	r0, [r2, #4]
 801857a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801857c:	6892      	ldr	r2, [r2, #8]
 801857e:	4611      	mov	r1, r2
 8018580:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	2b00      	cmp	r3, #0
 8018586:	f2c0 80ae 	blt.w	80186e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018590:	695b      	ldr	r3, [r3, #20]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d004      	beq.n	80185a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018598:	3304      	adds	r3, #4
 801859a:	4618      	mov	r0, r3
 801859c:	f7fd fb92 	bl	8015cc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80185a0:	463b      	mov	r3, r7
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7ff ff6a 	bl	801847c <prvSampleTimeNow>
 80185a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	2b09      	cmp	r3, #9
 80185ae:	f200 8097 	bhi.w	80186e0 <prvProcessReceivedCommands+0x1a0>
 80185b2:	a201      	add	r2, pc, #4	@ (adr r2, 80185b8 <prvProcessReceivedCommands+0x78>)
 80185b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185b8:	080185e1 	.word	0x080185e1
 80185bc:	080185e1 	.word	0x080185e1
 80185c0:	080185e1 	.word	0x080185e1
 80185c4:	08018657 	.word	0x08018657
 80185c8:	0801866b 	.word	0x0801866b
 80185cc:	080186b7 	.word	0x080186b7
 80185d0:	080185e1 	.word	0x080185e1
 80185d4:	080185e1 	.word	0x080185e1
 80185d8:	08018657 	.word	0x08018657
 80185dc:	0801866b 	.word	0x0801866b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80185e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80185e6:	f043 0301 	orr.w	r3, r3, #1
 80185ea:	b2da      	uxtb	r2, r3
 80185ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80185f2:	68ba      	ldr	r2, [r7, #8]
 80185f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185f6:	699b      	ldr	r3, [r3, #24]
 80185f8:	18d1      	adds	r1, r2, r3
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018600:	f7ff ff5c 	bl	80184bc <prvInsertTimerInActiveList>
 8018604:	4603      	mov	r3, r0
 8018606:	2b00      	cmp	r3, #0
 8018608:	d06c      	beq.n	80186e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801860c:	6a1b      	ldr	r3, [r3, #32]
 801860e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018610:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018618:	f003 0304 	and.w	r3, r3, #4
 801861c:	2b00      	cmp	r3, #0
 801861e:	d061      	beq.n	80186e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018620:	68ba      	ldr	r2, [r7, #8]
 8018622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018624:	699b      	ldr	r3, [r3, #24]
 8018626:	441a      	add	r2, r3
 8018628:	2300      	movs	r3, #0
 801862a:	9300      	str	r3, [sp, #0]
 801862c:	2300      	movs	r3, #0
 801862e:	2100      	movs	r1, #0
 8018630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018632:	f7ff fe01 	bl	8018238 <xTimerGenericCommand>
 8018636:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018638:	6a3b      	ldr	r3, [r7, #32]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d152      	bne.n	80186e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018642:	f383 8811 	msr	BASEPRI, r3
 8018646:	f3bf 8f6f 	isb	sy
 801864a:	f3bf 8f4f 	dsb	sy
 801864e:	61bb      	str	r3, [r7, #24]
}
 8018650:	bf00      	nop
 8018652:	bf00      	nop
 8018654:	e7fd      	b.n	8018652 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801865c:	f023 0301 	bic.w	r3, r3, #1
 8018660:	b2da      	uxtb	r2, r3
 8018662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018664:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018668:	e03d      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801866c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018670:	f043 0301 	orr.w	r3, r3, #1
 8018674:	b2da      	uxtb	r2, r3
 8018676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018680:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018684:	699b      	ldr	r3, [r3, #24]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d10b      	bne.n	80186a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801868a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801868e:	f383 8811 	msr	BASEPRI, r3
 8018692:	f3bf 8f6f 	isb	sy
 8018696:	f3bf 8f4f 	dsb	sy
 801869a:	617b      	str	r3, [r7, #20]
}
 801869c:	bf00      	nop
 801869e:	bf00      	nop
 80186a0:	e7fd      	b.n	801869e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80186a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186a4:	699a      	ldr	r2, [r3, #24]
 80186a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a8:	18d1      	adds	r1, r2, r3
 80186aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80186b0:	f7ff ff04 	bl	80184bc <prvInsertTimerInActiveList>
					break;
 80186b4:	e017      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80186b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80186bc:	f003 0302 	and.w	r3, r3, #2
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d103      	bne.n	80186cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80186c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80186c6:	f000 fbe7 	bl	8018e98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80186ca:	e00c      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80186cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80186d2:	f023 0301 	bic.w	r3, r3, #1
 80186d6:	b2da      	uxtb	r2, r3
 80186d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80186de:	e002      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80186e0:	bf00      	nop
 80186e2:	e000      	b.n	80186e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80186e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80186e6:	4b08      	ldr	r3, [pc, #32]	@ (8018708 <prvProcessReceivedCommands+0x1c8>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	1d39      	adds	r1, r7, #4
 80186ec:	2200      	movs	r2, #0
 80186ee:	4618      	mov	r0, r3
 80186f0:	f7fd fef6 	bl	80164e0 <xQueueReceive>
 80186f4:	4603      	mov	r3, r0
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	f47f af26 	bne.w	8018548 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80186fc:	bf00      	nop
 80186fe:	bf00      	nop
 8018700:	3730      	adds	r7, #48	@ 0x30
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	240028c0 	.word	0x240028c0

0801870c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b088      	sub	sp, #32
 8018710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018712:	e049      	b.n	80187a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018714:	4b2e      	ldr	r3, [pc, #184]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	68db      	ldr	r3, [r3, #12]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801871e:	4b2c      	ldr	r3, [pc, #176]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	3304      	adds	r3, #4
 801872c:	4618      	mov	r0, r3
 801872e:	f7fd fac9 	bl	8015cc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	6a1b      	ldr	r3, [r3, #32]
 8018736:	68f8      	ldr	r0, [r7, #12]
 8018738:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018740:	f003 0304 	and.w	r3, r3, #4
 8018744:	2b00      	cmp	r3, #0
 8018746:	d02f      	beq.n	80187a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	699b      	ldr	r3, [r3, #24]
 801874c:	693a      	ldr	r2, [r7, #16]
 801874e:	4413      	add	r3, r2
 8018750:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018752:	68ba      	ldr	r2, [r7, #8]
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	429a      	cmp	r2, r3
 8018758:	d90e      	bls.n	8018778 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	68ba      	ldr	r2, [r7, #8]
 801875e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	68fa      	ldr	r2, [r7, #12]
 8018764:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018766:	4b1a      	ldr	r3, [pc, #104]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 8018768:	681a      	ldr	r2, [r3, #0]
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	3304      	adds	r3, #4
 801876e:	4619      	mov	r1, r3
 8018770:	4610      	mov	r0, r2
 8018772:	f7fd fa6e 	bl	8015c52 <vListInsert>
 8018776:	e017      	b.n	80187a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018778:	2300      	movs	r3, #0
 801877a:	9300      	str	r3, [sp, #0]
 801877c:	2300      	movs	r3, #0
 801877e:	693a      	ldr	r2, [r7, #16]
 8018780:	2100      	movs	r1, #0
 8018782:	68f8      	ldr	r0, [r7, #12]
 8018784:	f7ff fd58 	bl	8018238 <xTimerGenericCommand>
 8018788:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d10b      	bne.n	80187a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8018790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018794:	f383 8811 	msr	BASEPRI, r3
 8018798:	f3bf 8f6f 	isb	sy
 801879c:	f3bf 8f4f 	dsb	sy
 80187a0:	603b      	str	r3, [r7, #0]
}
 80187a2:	bf00      	nop
 80187a4:	bf00      	nop
 80187a6:	e7fd      	b.n	80187a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80187a8:	4b09      	ldr	r3, [pc, #36]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d1b0      	bne.n	8018714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80187b2:	4b07      	ldr	r3, [pc, #28]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80187b8:	4b06      	ldr	r3, [pc, #24]	@ (80187d4 <prvSwitchTimerLists+0xc8>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	4a04      	ldr	r2, [pc, #16]	@ (80187d0 <prvSwitchTimerLists+0xc4>)
 80187be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80187c0:	4a04      	ldr	r2, [pc, #16]	@ (80187d4 <prvSwitchTimerLists+0xc8>)
 80187c2:	697b      	ldr	r3, [r7, #20]
 80187c4:	6013      	str	r3, [r2, #0]
}
 80187c6:	bf00      	nop
 80187c8:	3718      	adds	r7, #24
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	240028b8 	.word	0x240028b8
 80187d4:	240028bc 	.word	0x240028bc

080187d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80187de:	f000 f96b 	bl	8018ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80187e2:	4b15      	ldr	r3, [pc, #84]	@ (8018838 <prvCheckForValidListAndQueue+0x60>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d120      	bne.n	801882c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80187ea:	4814      	ldr	r0, [pc, #80]	@ (801883c <prvCheckForValidListAndQueue+0x64>)
 80187ec:	f7fd f9e0 	bl	8015bb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80187f0:	4813      	ldr	r0, [pc, #76]	@ (8018840 <prvCheckForValidListAndQueue+0x68>)
 80187f2:	f7fd f9dd 	bl	8015bb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80187f6:	4b13      	ldr	r3, [pc, #76]	@ (8018844 <prvCheckForValidListAndQueue+0x6c>)
 80187f8:	4a10      	ldr	r2, [pc, #64]	@ (801883c <prvCheckForValidListAndQueue+0x64>)
 80187fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80187fc:	4b12      	ldr	r3, [pc, #72]	@ (8018848 <prvCheckForValidListAndQueue+0x70>)
 80187fe:	4a10      	ldr	r2, [pc, #64]	@ (8018840 <prvCheckForValidListAndQueue+0x68>)
 8018800:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018802:	2300      	movs	r3, #0
 8018804:	9300      	str	r3, [sp, #0]
 8018806:	4b11      	ldr	r3, [pc, #68]	@ (801884c <prvCheckForValidListAndQueue+0x74>)
 8018808:	4a11      	ldr	r2, [pc, #68]	@ (8018850 <prvCheckForValidListAndQueue+0x78>)
 801880a:	2110      	movs	r1, #16
 801880c:	200a      	movs	r0, #10
 801880e:	f7fd faed 	bl	8015dec <xQueueGenericCreateStatic>
 8018812:	4603      	mov	r3, r0
 8018814:	4a08      	ldr	r2, [pc, #32]	@ (8018838 <prvCheckForValidListAndQueue+0x60>)
 8018816:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018818:	4b07      	ldr	r3, [pc, #28]	@ (8018838 <prvCheckForValidListAndQueue+0x60>)
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d005      	beq.n	801882c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018820:	4b05      	ldr	r3, [pc, #20]	@ (8018838 <prvCheckForValidListAndQueue+0x60>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	490b      	ldr	r1, [pc, #44]	@ (8018854 <prvCheckForValidListAndQueue+0x7c>)
 8018826:	4618      	mov	r0, r3
 8018828:	f7fe fa1a 	bl	8016c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801882c:	f000 f976 	bl	8018b1c <vPortExitCritical>
}
 8018830:	bf00      	nop
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	240028c0 	.word	0x240028c0
 801883c:	24002890 	.word	0x24002890
 8018840:	240028a4 	.word	0x240028a4
 8018844:	240028b8 	.word	0x240028b8
 8018848:	240028bc 	.word	0x240028bc
 801884c:	2400296c 	.word	0x2400296c
 8018850:	240028cc 	.word	0x240028cc
 8018854:	0801a9a4 	.word	0x0801a9a4

08018858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018858:	b480      	push	{r7}
 801885a:	b085      	sub	sp, #20
 801885c:	af00      	add	r7, sp, #0
 801885e:	60f8      	str	r0, [r7, #12]
 8018860:	60b9      	str	r1, [r7, #8]
 8018862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	3b04      	subs	r3, #4
 8018868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	3b04      	subs	r3, #4
 8018876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	f023 0201 	bic.w	r2, r3, #1
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	3b04      	subs	r3, #4
 8018886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018888:	4a0c      	ldr	r2, [pc, #48]	@ (80188bc <pxPortInitialiseStack+0x64>)
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	3b14      	subs	r3, #20
 8018892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018894:	687a      	ldr	r2, [r7, #4]
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	3b04      	subs	r3, #4
 801889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	f06f 0202 	mvn.w	r2, #2
 80188a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	3b20      	subs	r3, #32
 80188ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80188ae:	68fb      	ldr	r3, [r7, #12]
}
 80188b0:	4618      	mov	r0, r3
 80188b2:	3714      	adds	r7, #20
 80188b4:	46bd      	mov	sp, r7
 80188b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ba:	4770      	bx	lr
 80188bc:	080188c1 	.word	0x080188c1

080188c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80188c0:	b480      	push	{r7}
 80188c2:	b085      	sub	sp, #20
 80188c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80188c6:	2300      	movs	r3, #0
 80188c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80188ca:	4b13      	ldr	r3, [pc, #76]	@ (8018918 <prvTaskExitError+0x58>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188d2:	d00b      	beq.n	80188ec <prvTaskExitError+0x2c>
	__asm volatile
 80188d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188d8:	f383 8811 	msr	BASEPRI, r3
 80188dc:	f3bf 8f6f 	isb	sy
 80188e0:	f3bf 8f4f 	dsb	sy
 80188e4:	60fb      	str	r3, [r7, #12]
}
 80188e6:	bf00      	nop
 80188e8:	bf00      	nop
 80188ea:	e7fd      	b.n	80188e8 <prvTaskExitError+0x28>
	__asm volatile
 80188ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188f0:	f383 8811 	msr	BASEPRI, r3
 80188f4:	f3bf 8f6f 	isb	sy
 80188f8:	f3bf 8f4f 	dsb	sy
 80188fc:	60bb      	str	r3, [r7, #8]
}
 80188fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018900:	bf00      	nop
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d0fc      	beq.n	8018902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018908:	bf00      	nop
 801890a:	bf00      	nop
 801890c:	3714      	adds	r7, #20
 801890e:	46bd      	mov	sp, r7
 8018910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018914:	4770      	bx	lr
 8018916:	bf00      	nop
 8018918:	24000018 	.word	0x24000018
 801891c:	00000000 	.word	0x00000000

08018920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018920:	4b07      	ldr	r3, [pc, #28]	@ (8018940 <pxCurrentTCBConst2>)
 8018922:	6819      	ldr	r1, [r3, #0]
 8018924:	6808      	ldr	r0, [r1, #0]
 8018926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892a:	f380 8809 	msr	PSP, r0
 801892e:	f3bf 8f6f 	isb	sy
 8018932:	f04f 0000 	mov.w	r0, #0
 8018936:	f380 8811 	msr	BASEPRI, r0
 801893a:	4770      	bx	lr
 801893c:	f3af 8000 	nop.w

08018940 <pxCurrentTCBConst2>:
 8018940:	24002390 	.word	0x24002390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018944:	bf00      	nop
 8018946:	bf00      	nop

08018948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018948:	4808      	ldr	r0, [pc, #32]	@ (801896c <prvPortStartFirstTask+0x24>)
 801894a:	6800      	ldr	r0, [r0, #0]
 801894c:	6800      	ldr	r0, [r0, #0]
 801894e:	f380 8808 	msr	MSP, r0
 8018952:	f04f 0000 	mov.w	r0, #0
 8018956:	f380 8814 	msr	CONTROL, r0
 801895a:	b662      	cpsie	i
 801895c:	b661      	cpsie	f
 801895e:	f3bf 8f4f 	dsb	sy
 8018962:	f3bf 8f6f 	isb	sy
 8018966:	df00      	svc	0
 8018968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801896a:	bf00      	nop
 801896c:	e000ed08 	.word	0xe000ed08

08018970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b086      	sub	sp, #24
 8018974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018976:	4b47      	ldr	r3, [pc, #284]	@ (8018a94 <xPortStartScheduler+0x124>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	4a47      	ldr	r2, [pc, #284]	@ (8018a98 <xPortStartScheduler+0x128>)
 801897c:	4293      	cmp	r3, r2
 801897e:	d10b      	bne.n	8018998 <xPortStartScheduler+0x28>
	__asm volatile
 8018980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018984:	f383 8811 	msr	BASEPRI, r3
 8018988:	f3bf 8f6f 	isb	sy
 801898c:	f3bf 8f4f 	dsb	sy
 8018990:	60fb      	str	r3, [r7, #12]
}
 8018992:	bf00      	nop
 8018994:	bf00      	nop
 8018996:	e7fd      	b.n	8018994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018998:	4b3e      	ldr	r3, [pc, #248]	@ (8018a94 <xPortStartScheduler+0x124>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	4a3f      	ldr	r2, [pc, #252]	@ (8018a9c <xPortStartScheduler+0x12c>)
 801899e:	4293      	cmp	r3, r2
 80189a0:	d10b      	bne.n	80189ba <xPortStartScheduler+0x4a>
	__asm volatile
 80189a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189a6:	f383 8811 	msr	BASEPRI, r3
 80189aa:	f3bf 8f6f 	isb	sy
 80189ae:	f3bf 8f4f 	dsb	sy
 80189b2:	613b      	str	r3, [r7, #16]
}
 80189b4:	bf00      	nop
 80189b6:	bf00      	nop
 80189b8:	e7fd      	b.n	80189b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80189ba:	4b39      	ldr	r3, [pc, #228]	@ (8018aa0 <xPortStartScheduler+0x130>)
 80189bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	781b      	ldrb	r3, [r3, #0]
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	22ff      	movs	r2, #255	@ 0xff
 80189ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	781b      	ldrb	r3, [r3, #0]
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80189d4:	78fb      	ldrb	r3, [r7, #3]
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80189dc:	b2da      	uxtb	r2, r3
 80189de:	4b31      	ldr	r3, [pc, #196]	@ (8018aa4 <xPortStartScheduler+0x134>)
 80189e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80189e2:	4b31      	ldr	r3, [pc, #196]	@ (8018aa8 <xPortStartScheduler+0x138>)
 80189e4:	2207      	movs	r2, #7
 80189e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80189e8:	e009      	b.n	80189fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80189ea:	4b2f      	ldr	r3, [pc, #188]	@ (8018aa8 <xPortStartScheduler+0x138>)
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	3b01      	subs	r3, #1
 80189f0:	4a2d      	ldr	r2, [pc, #180]	@ (8018aa8 <xPortStartScheduler+0x138>)
 80189f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80189f4:	78fb      	ldrb	r3, [r7, #3]
 80189f6:	b2db      	uxtb	r3, r3
 80189f8:	005b      	lsls	r3, r3, #1
 80189fa:	b2db      	uxtb	r3, r3
 80189fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80189fe:	78fb      	ldrb	r3, [r7, #3]
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a06:	2b80      	cmp	r3, #128	@ 0x80
 8018a08:	d0ef      	beq.n	80189ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018a0a:	4b27      	ldr	r3, [pc, #156]	@ (8018aa8 <xPortStartScheduler+0x138>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	f1c3 0307 	rsb	r3, r3, #7
 8018a12:	2b04      	cmp	r3, #4
 8018a14:	d00b      	beq.n	8018a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8018a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a1a:	f383 8811 	msr	BASEPRI, r3
 8018a1e:	f3bf 8f6f 	isb	sy
 8018a22:	f3bf 8f4f 	dsb	sy
 8018a26:	60bb      	str	r3, [r7, #8]
}
 8018a28:	bf00      	nop
 8018a2a:	bf00      	nop
 8018a2c:	e7fd      	b.n	8018a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8018aa8 <xPortStartScheduler+0x138>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	021b      	lsls	r3, r3, #8
 8018a34:	4a1c      	ldr	r2, [pc, #112]	@ (8018aa8 <xPortStartScheduler+0x138>)
 8018a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018a38:	4b1b      	ldr	r3, [pc, #108]	@ (8018aa8 <xPortStartScheduler+0x138>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018a40:	4a19      	ldr	r2, [pc, #100]	@ (8018aa8 <xPortStartScheduler+0x138>)
 8018a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	b2da      	uxtb	r2, r3
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018a4c:	4b17      	ldr	r3, [pc, #92]	@ (8018aac <xPortStartScheduler+0x13c>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a16      	ldr	r2, [pc, #88]	@ (8018aac <xPortStartScheduler+0x13c>)
 8018a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018a58:	4b14      	ldr	r3, [pc, #80]	@ (8018aac <xPortStartScheduler+0x13c>)
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	4a13      	ldr	r2, [pc, #76]	@ (8018aac <xPortStartScheduler+0x13c>)
 8018a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018a64:	f000 f8da 	bl	8018c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018a68:	4b11      	ldr	r3, [pc, #68]	@ (8018ab0 <xPortStartScheduler+0x140>)
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018a6e:	f000 f8f9 	bl	8018c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018a72:	4b10      	ldr	r3, [pc, #64]	@ (8018ab4 <xPortStartScheduler+0x144>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	4a0f      	ldr	r2, [pc, #60]	@ (8018ab4 <xPortStartScheduler+0x144>)
 8018a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018a7e:	f7ff ff63 	bl	8018948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018a82:	f7fe fe3d 	bl	8017700 <vTaskSwitchContext>
	prvTaskExitError();
 8018a86:	f7ff ff1b 	bl	80188c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018a8a:	2300      	movs	r3, #0
}
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3718      	adds	r7, #24
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}
 8018a94:	e000ed00 	.word	0xe000ed00
 8018a98:	410fc271 	.word	0x410fc271
 8018a9c:	410fc270 	.word	0x410fc270
 8018aa0:	e000e400 	.word	0xe000e400
 8018aa4:	240029bc 	.word	0x240029bc
 8018aa8:	240029c0 	.word	0x240029c0
 8018aac:	e000ed20 	.word	0xe000ed20
 8018ab0:	24000018 	.word	0x24000018
 8018ab4:	e000ef34 	.word	0xe000ef34

08018ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b083      	sub	sp, #12
 8018abc:	af00      	add	r7, sp, #0
	__asm volatile
 8018abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ac2:	f383 8811 	msr	BASEPRI, r3
 8018ac6:	f3bf 8f6f 	isb	sy
 8018aca:	f3bf 8f4f 	dsb	sy
 8018ace:	607b      	str	r3, [r7, #4]
}
 8018ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018ad2:	4b10      	ldr	r3, [pc, #64]	@ (8018b14 <vPortEnterCritical+0x5c>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8018b14 <vPortEnterCritical+0x5c>)
 8018ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018adc:	4b0d      	ldr	r3, [pc, #52]	@ (8018b14 <vPortEnterCritical+0x5c>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d110      	bne.n	8018b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8018b18 <vPortEnterCritical+0x60>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	b2db      	uxtb	r3, r3
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d00b      	beq.n	8018b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8018aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018af2:	f383 8811 	msr	BASEPRI, r3
 8018af6:	f3bf 8f6f 	isb	sy
 8018afa:	f3bf 8f4f 	dsb	sy
 8018afe:	603b      	str	r3, [r7, #0]
}
 8018b00:	bf00      	nop
 8018b02:	bf00      	nop
 8018b04:	e7fd      	b.n	8018b02 <vPortEnterCritical+0x4a>
	}
}
 8018b06:	bf00      	nop
 8018b08:	370c      	adds	r7, #12
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b10:	4770      	bx	lr
 8018b12:	bf00      	nop
 8018b14:	24000018 	.word	0x24000018
 8018b18:	e000ed04 	.word	0xe000ed04

08018b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018b22:	4b12      	ldr	r3, [pc, #72]	@ (8018b6c <vPortExitCritical+0x50>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d10b      	bne.n	8018b42 <vPortExitCritical+0x26>
	__asm volatile
 8018b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b2e:	f383 8811 	msr	BASEPRI, r3
 8018b32:	f3bf 8f6f 	isb	sy
 8018b36:	f3bf 8f4f 	dsb	sy
 8018b3a:	607b      	str	r3, [r7, #4]
}
 8018b3c:	bf00      	nop
 8018b3e:	bf00      	nop
 8018b40:	e7fd      	b.n	8018b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018b42:	4b0a      	ldr	r3, [pc, #40]	@ (8018b6c <vPortExitCritical+0x50>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	3b01      	subs	r3, #1
 8018b48:	4a08      	ldr	r2, [pc, #32]	@ (8018b6c <vPortExitCritical+0x50>)
 8018b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018b4c:	4b07      	ldr	r3, [pc, #28]	@ (8018b6c <vPortExitCritical+0x50>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d105      	bne.n	8018b60 <vPortExitCritical+0x44>
 8018b54:	2300      	movs	r3, #0
 8018b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	f383 8811 	msr	BASEPRI, r3
}
 8018b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018b60:	bf00      	nop
 8018b62:	370c      	adds	r7, #12
 8018b64:	46bd      	mov	sp, r7
 8018b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6a:	4770      	bx	lr
 8018b6c:	24000018 	.word	0x24000018

08018b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018b70:	f3ef 8009 	mrs	r0, PSP
 8018b74:	f3bf 8f6f 	isb	sy
 8018b78:	4b15      	ldr	r3, [pc, #84]	@ (8018bd0 <pxCurrentTCBConst>)
 8018b7a:	681a      	ldr	r2, [r3, #0]
 8018b7c:	f01e 0f10 	tst.w	lr, #16
 8018b80:	bf08      	it	eq
 8018b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8a:	6010      	str	r0, [r2, #0]
 8018b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018b94:	f380 8811 	msr	BASEPRI, r0
 8018b98:	f3bf 8f4f 	dsb	sy
 8018b9c:	f3bf 8f6f 	isb	sy
 8018ba0:	f7fe fdae 	bl	8017700 <vTaskSwitchContext>
 8018ba4:	f04f 0000 	mov.w	r0, #0
 8018ba8:	f380 8811 	msr	BASEPRI, r0
 8018bac:	bc09      	pop	{r0, r3}
 8018bae:	6819      	ldr	r1, [r3, #0]
 8018bb0:	6808      	ldr	r0, [r1, #0]
 8018bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb6:	f01e 0f10 	tst.w	lr, #16
 8018bba:	bf08      	it	eq
 8018bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018bc0:	f380 8809 	msr	PSP, r0
 8018bc4:	f3bf 8f6f 	isb	sy
 8018bc8:	4770      	bx	lr
 8018bca:	bf00      	nop
 8018bcc:	f3af 8000 	nop.w

08018bd0 <pxCurrentTCBConst>:
 8018bd0:	24002390 	.word	0x24002390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018bd4:	bf00      	nop
 8018bd6:	bf00      	nop

08018bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8018bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018be2:	f383 8811 	msr	BASEPRI, r3
 8018be6:	f3bf 8f6f 	isb	sy
 8018bea:	f3bf 8f4f 	dsb	sy
 8018bee:	607b      	str	r3, [r7, #4]
}
 8018bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018bf2:	f7fe fccb 	bl	801758c <xTaskIncrementTick>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d003      	beq.n	8018c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018bfc:	4b06      	ldr	r3, [pc, #24]	@ (8018c18 <xPortSysTickHandler+0x40>)
 8018bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c02:	601a      	str	r2, [r3, #0]
 8018c04:	2300      	movs	r3, #0
 8018c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	f383 8811 	msr	BASEPRI, r3
}
 8018c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018c10:	bf00      	nop
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	e000ed04 	.word	0xe000ed04

08018c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c20:	4b0b      	ldr	r3, [pc, #44]	@ (8018c50 <vPortSetupTimerInterrupt+0x34>)
 8018c22:	2200      	movs	r2, #0
 8018c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018c26:	4b0b      	ldr	r3, [pc, #44]	@ (8018c54 <vPortSetupTimerInterrupt+0x38>)
 8018c28:	2200      	movs	r2, #0
 8018c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8018c58 <vPortSetupTimerInterrupt+0x3c>)
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	4a0a      	ldr	r2, [pc, #40]	@ (8018c5c <vPortSetupTimerInterrupt+0x40>)
 8018c32:	fba2 2303 	umull	r2, r3, r2, r3
 8018c36:	099b      	lsrs	r3, r3, #6
 8018c38:	4a09      	ldr	r2, [pc, #36]	@ (8018c60 <vPortSetupTimerInterrupt+0x44>)
 8018c3a:	3b01      	subs	r3, #1
 8018c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c3e:	4b04      	ldr	r3, [pc, #16]	@ (8018c50 <vPortSetupTimerInterrupt+0x34>)
 8018c40:	2207      	movs	r2, #7
 8018c42:	601a      	str	r2, [r3, #0]
}
 8018c44:	bf00      	nop
 8018c46:	46bd      	mov	sp, r7
 8018c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4c:	4770      	bx	lr
 8018c4e:	bf00      	nop
 8018c50:	e000e010 	.word	0xe000e010
 8018c54:	e000e018 	.word	0xe000e018
 8018c58:	24000008 	.word	0x24000008
 8018c5c:	10624dd3 	.word	0x10624dd3
 8018c60:	e000e014 	.word	0xe000e014

08018c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018c74 <vPortEnableVFP+0x10>
 8018c68:	6801      	ldr	r1, [r0, #0]
 8018c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018c6e:	6001      	str	r1, [r0, #0]
 8018c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018c72:	bf00      	nop
 8018c74:	e000ed88 	.word	0xe000ed88

08018c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018c78:	b480      	push	{r7}
 8018c7a:	b085      	sub	sp, #20
 8018c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018c7e:	f3ef 8305 	mrs	r3, IPSR
 8018c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2b0f      	cmp	r3, #15
 8018c88:	d915      	bls.n	8018cb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018c8a:	4a18      	ldr	r2, [pc, #96]	@ (8018cec <vPortValidateInterruptPriority+0x74>)
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	4413      	add	r3, r2
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018c94:	4b16      	ldr	r3, [pc, #88]	@ (8018cf0 <vPortValidateInterruptPriority+0x78>)
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	7afa      	ldrb	r2, [r7, #11]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d20b      	bcs.n	8018cb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8018c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ca2:	f383 8811 	msr	BASEPRI, r3
 8018ca6:	f3bf 8f6f 	isb	sy
 8018caa:	f3bf 8f4f 	dsb	sy
 8018cae:	607b      	str	r3, [r7, #4]
}
 8018cb0:	bf00      	nop
 8018cb2:	bf00      	nop
 8018cb4:	e7fd      	b.n	8018cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8018cf4 <vPortValidateInterruptPriority+0x7c>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8018cf8 <vPortValidateInterruptPriority+0x80>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d90b      	bls.n	8018cde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8018cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cca:	f383 8811 	msr	BASEPRI, r3
 8018cce:	f3bf 8f6f 	isb	sy
 8018cd2:	f3bf 8f4f 	dsb	sy
 8018cd6:	603b      	str	r3, [r7, #0]
}
 8018cd8:	bf00      	nop
 8018cda:	bf00      	nop
 8018cdc:	e7fd      	b.n	8018cda <vPortValidateInterruptPriority+0x62>
	}
 8018cde:	bf00      	nop
 8018ce0:	3714      	adds	r7, #20
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce8:	4770      	bx	lr
 8018cea:	bf00      	nop
 8018cec:	e000e3f0 	.word	0xe000e3f0
 8018cf0:	240029bc 	.word	0x240029bc
 8018cf4:	e000ed0c 	.word	0xe000ed0c
 8018cf8:	240029c0 	.word	0x240029c0

08018cfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b08a      	sub	sp, #40	@ 0x28
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018d04:	2300      	movs	r3, #0
 8018d06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018d08:	f7fe fb72 	bl	80173f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8018e80 <pvPortMalloc+0x184>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d101      	bne.n	8018d18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018d14:	f000 f924 	bl	8018f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018d18:	4b5a      	ldr	r3, [pc, #360]	@ (8018e84 <pvPortMalloc+0x188>)
 8018d1a:	681a      	ldr	r2, [r3, #0]
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	4013      	ands	r3, r2
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	f040 8095 	bne.w	8018e50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d01e      	beq.n	8018d6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8018d2c:	2208      	movs	r2, #8
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	4413      	add	r3, r2
 8018d32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f003 0307 	and.w	r3, r3, #7
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d015      	beq.n	8018d6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f023 0307 	bic.w	r3, r3, #7
 8018d44:	3308      	adds	r3, #8
 8018d46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f003 0307 	and.w	r3, r3, #7
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d00b      	beq.n	8018d6a <pvPortMalloc+0x6e>
	__asm volatile
 8018d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d56:	f383 8811 	msr	BASEPRI, r3
 8018d5a:	f3bf 8f6f 	isb	sy
 8018d5e:	f3bf 8f4f 	dsb	sy
 8018d62:	617b      	str	r3, [r7, #20]
}
 8018d64:	bf00      	nop
 8018d66:	bf00      	nop
 8018d68:	e7fd      	b.n	8018d66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d06f      	beq.n	8018e50 <pvPortMalloc+0x154>
 8018d70:	4b45      	ldr	r3, [pc, #276]	@ (8018e88 <pvPortMalloc+0x18c>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d86a      	bhi.n	8018e50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018d7a:	4b44      	ldr	r3, [pc, #272]	@ (8018e8c <pvPortMalloc+0x190>)
 8018d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018d7e:	4b43      	ldr	r3, [pc, #268]	@ (8018e8c <pvPortMalloc+0x190>)
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d84:	e004      	b.n	8018d90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d92:	685b      	ldr	r3, [r3, #4]
 8018d94:	687a      	ldr	r2, [r7, #4]
 8018d96:	429a      	cmp	r2, r3
 8018d98:	d903      	bls.n	8018da2 <pvPortMalloc+0xa6>
 8018d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d1f1      	bne.n	8018d86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018da2:	4b37      	ldr	r3, [pc, #220]	@ (8018e80 <pvPortMalloc+0x184>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d051      	beq.n	8018e50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018dac:	6a3b      	ldr	r3, [r7, #32]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2208      	movs	r2, #8
 8018db2:	4413      	add	r3, r2
 8018db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	6a3b      	ldr	r3, [r7, #32]
 8018dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dc0:	685a      	ldr	r2, [r3, #4]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	1ad2      	subs	r2, r2, r3
 8018dc6:	2308      	movs	r3, #8
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d920      	bls.n	8018e10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	4413      	add	r3, r2
 8018dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018dd6:	69bb      	ldr	r3, [r7, #24]
 8018dd8:	f003 0307 	and.w	r3, r3, #7
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00b      	beq.n	8018df8 <pvPortMalloc+0xfc>
	__asm volatile
 8018de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018de4:	f383 8811 	msr	BASEPRI, r3
 8018de8:	f3bf 8f6f 	isb	sy
 8018dec:	f3bf 8f4f 	dsb	sy
 8018df0:	613b      	str	r3, [r7, #16]
}
 8018df2:	bf00      	nop
 8018df4:	bf00      	nop
 8018df6:	e7fd      	b.n	8018df4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dfa:	685a      	ldr	r2, [r3, #4]
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	1ad2      	subs	r2, r2, r3
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e06:	687a      	ldr	r2, [r7, #4]
 8018e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018e0a:	69b8      	ldr	r0, [r7, #24]
 8018e0c:	f000 f90a 	bl	8019024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e10:	4b1d      	ldr	r3, [pc, #116]	@ (8018e88 <pvPortMalloc+0x18c>)
 8018e12:	681a      	ldr	r2, [r3, #0]
 8018e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e16:	685b      	ldr	r3, [r3, #4]
 8018e18:	1ad3      	subs	r3, r2, r3
 8018e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8018e88 <pvPortMalloc+0x18c>)
 8018e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8018e88 <pvPortMalloc+0x18c>)
 8018e20:	681a      	ldr	r2, [r3, #0]
 8018e22:	4b1b      	ldr	r3, [pc, #108]	@ (8018e90 <pvPortMalloc+0x194>)
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d203      	bcs.n	8018e32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018e2a:	4b17      	ldr	r3, [pc, #92]	@ (8018e88 <pvPortMalloc+0x18c>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	4a18      	ldr	r2, [pc, #96]	@ (8018e90 <pvPortMalloc+0x194>)
 8018e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e34:	685a      	ldr	r2, [r3, #4]
 8018e36:	4b13      	ldr	r3, [pc, #76]	@ (8018e84 <pvPortMalloc+0x188>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	431a      	orrs	r2, r3
 8018e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e42:	2200      	movs	r2, #0
 8018e44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018e46:	4b13      	ldr	r3, [pc, #76]	@ (8018e94 <pvPortMalloc+0x198>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	4a11      	ldr	r2, [pc, #68]	@ (8018e94 <pvPortMalloc+0x198>)
 8018e4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018e50:	f7fe fadc 	bl	801740c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e54:	69fb      	ldr	r3, [r7, #28]
 8018e56:	f003 0307 	and.w	r3, r3, #7
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00b      	beq.n	8018e76 <pvPortMalloc+0x17a>
	__asm volatile
 8018e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	60fb      	str	r3, [r7, #12]
}
 8018e70:	bf00      	nop
 8018e72:	bf00      	nop
 8018e74:	e7fd      	b.n	8018e72 <pvPortMalloc+0x176>
	return pvReturn;
 8018e76:	69fb      	ldr	r3, [r7, #28]
}
 8018e78:	4618      	mov	r0, r3
 8018e7a:	3728      	adds	r7, #40	@ 0x28
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	bd80      	pop	{r7, pc}
 8018e80:	240229cc 	.word	0x240229cc
 8018e84:	240229e0 	.word	0x240229e0
 8018e88:	240229d0 	.word	0x240229d0
 8018e8c:	240229c4 	.word	0x240229c4
 8018e90:	240229d4 	.word	0x240229d4
 8018e94:	240229d8 	.word	0x240229d8

08018e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b086      	sub	sp, #24
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d04f      	beq.n	8018f4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018eaa:	2308      	movs	r3, #8
 8018eac:	425b      	negs	r3, r3
 8018eae:	697a      	ldr	r2, [r7, #20]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	685a      	ldr	r2, [r3, #4]
 8018ebc:	4b25      	ldr	r3, [pc, #148]	@ (8018f54 <vPortFree+0xbc>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4013      	ands	r3, r2
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d10b      	bne.n	8018ede <vPortFree+0x46>
	__asm volatile
 8018ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eca:	f383 8811 	msr	BASEPRI, r3
 8018ece:	f3bf 8f6f 	isb	sy
 8018ed2:	f3bf 8f4f 	dsb	sy
 8018ed6:	60fb      	str	r3, [r7, #12]
}
 8018ed8:	bf00      	nop
 8018eda:	bf00      	nop
 8018edc:	e7fd      	b.n	8018eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018ede:	693b      	ldr	r3, [r7, #16]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d00b      	beq.n	8018efe <vPortFree+0x66>
	__asm volatile
 8018ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eea:	f383 8811 	msr	BASEPRI, r3
 8018eee:	f3bf 8f6f 	isb	sy
 8018ef2:	f3bf 8f4f 	dsb	sy
 8018ef6:	60bb      	str	r3, [r7, #8]
}
 8018ef8:	bf00      	nop
 8018efa:	bf00      	nop
 8018efc:	e7fd      	b.n	8018efa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	685a      	ldr	r2, [r3, #4]
 8018f02:	4b14      	ldr	r3, [pc, #80]	@ (8018f54 <vPortFree+0xbc>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	4013      	ands	r3, r2
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d01e      	beq.n	8018f4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d11a      	bne.n	8018f4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	685a      	ldr	r2, [r3, #4]
 8018f18:	4b0e      	ldr	r3, [pc, #56]	@ (8018f54 <vPortFree+0xbc>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	43db      	mvns	r3, r3
 8018f1e:	401a      	ands	r2, r3
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018f24:	f7fe fa64 	bl	80173f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	685a      	ldr	r2, [r3, #4]
 8018f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8018f58 <vPortFree+0xc0>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4413      	add	r3, r2
 8018f32:	4a09      	ldr	r2, [pc, #36]	@ (8018f58 <vPortFree+0xc0>)
 8018f34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f36:	6938      	ldr	r0, [r7, #16]
 8018f38:	f000 f874 	bl	8019024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018f3c:	4b07      	ldr	r3, [pc, #28]	@ (8018f5c <vPortFree+0xc4>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	3301      	adds	r3, #1
 8018f42:	4a06      	ldr	r2, [pc, #24]	@ (8018f5c <vPortFree+0xc4>)
 8018f44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018f46:	f7fe fa61 	bl	801740c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018f4a:	bf00      	nop
 8018f4c:	3718      	adds	r7, #24
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop
 8018f54:	240229e0 	.word	0x240229e0
 8018f58:	240229d0 	.word	0x240229d0
 8018f5c:	240229dc 	.word	0x240229dc

08018f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018f60:	b480      	push	{r7}
 8018f62:	b085      	sub	sp, #20
 8018f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018f66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8018f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018f6c:	4b27      	ldr	r3, [pc, #156]	@ (801900c <prvHeapInit+0xac>)
 8018f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f003 0307 	and.w	r3, r3, #7
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00c      	beq.n	8018f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	3307      	adds	r3, #7
 8018f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	f023 0307 	bic.w	r3, r3, #7
 8018f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018f88:	68ba      	ldr	r2, [r7, #8]
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	1ad3      	subs	r3, r2, r3
 8018f8e:	4a1f      	ldr	r2, [pc, #124]	@ (801900c <prvHeapInit+0xac>)
 8018f90:	4413      	add	r3, r2
 8018f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018f98:	4a1d      	ldr	r2, [pc, #116]	@ (8019010 <prvHeapInit+0xb0>)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8019010 <prvHeapInit+0xb0>)
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	68ba      	ldr	r2, [r7, #8]
 8018fa8:	4413      	add	r3, r2
 8018faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018fac:	2208      	movs	r2, #8
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	1a9b      	subs	r3, r3, r2
 8018fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	f023 0307 	bic.w	r3, r3, #7
 8018fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	4a15      	ldr	r2, [pc, #84]	@ (8019014 <prvHeapInit+0xb4>)
 8018fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018fc2:	4b14      	ldr	r3, [pc, #80]	@ (8019014 <prvHeapInit+0xb4>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018fca:	4b12      	ldr	r3, [pc, #72]	@ (8019014 <prvHeapInit+0xb4>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	68fa      	ldr	r2, [r7, #12]
 8018fda:	1ad2      	subs	r2, r2, r3
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8019014 <prvHeapInit+0xb4>)
 8018fe2:	681a      	ldr	r2, [r3, #0]
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	4a0a      	ldr	r2, [pc, #40]	@ (8019018 <prvHeapInit+0xb8>)
 8018fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	685b      	ldr	r3, [r3, #4]
 8018ff4:	4a09      	ldr	r2, [pc, #36]	@ (801901c <prvHeapInit+0xbc>)
 8018ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ff8:	4b09      	ldr	r3, [pc, #36]	@ (8019020 <prvHeapInit+0xc0>)
 8018ffa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018ffe:	601a      	str	r2, [r3, #0]
}
 8019000:	bf00      	nop
 8019002:	3714      	adds	r7, #20
 8019004:	46bd      	mov	sp, r7
 8019006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900a:	4770      	bx	lr
 801900c:	240029c4 	.word	0x240029c4
 8019010:	240229c4 	.word	0x240229c4
 8019014:	240229cc 	.word	0x240229cc
 8019018:	240229d4 	.word	0x240229d4
 801901c:	240229d0 	.word	0x240229d0
 8019020:	240229e0 	.word	0x240229e0

08019024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019024:	b480      	push	{r7}
 8019026:	b085      	sub	sp, #20
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801902c:	4b28      	ldr	r3, [pc, #160]	@ (80190d0 <prvInsertBlockIntoFreeList+0xac>)
 801902e:	60fb      	str	r3, [r7, #12]
 8019030:	e002      	b.n	8019038 <prvInsertBlockIntoFreeList+0x14>
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	60fb      	str	r3, [r7, #12]
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	687a      	ldr	r2, [r7, #4]
 801903e:	429a      	cmp	r2, r3
 8019040:	d8f7      	bhi.n	8019032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	68ba      	ldr	r2, [r7, #8]
 801904c:	4413      	add	r3, r2
 801904e:	687a      	ldr	r2, [r7, #4]
 8019050:	429a      	cmp	r2, r3
 8019052:	d108      	bne.n	8019066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	685a      	ldr	r2, [r3, #4]
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	441a      	add	r2, r3
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	68ba      	ldr	r2, [r7, #8]
 8019070:	441a      	add	r2, r3
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	429a      	cmp	r2, r3
 8019078:	d118      	bne.n	80190ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681a      	ldr	r2, [r3, #0]
 801907e:	4b15      	ldr	r3, [pc, #84]	@ (80190d4 <prvInsertBlockIntoFreeList+0xb0>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	429a      	cmp	r2, r3
 8019084:	d00d      	beq.n	80190a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	685a      	ldr	r2, [r3, #4]
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	441a      	add	r2, r3
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	601a      	str	r2, [r3, #0]
 80190a0:	e008      	b.n	80190b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80190a2:	4b0c      	ldr	r3, [pc, #48]	@ (80190d4 <prvInsertBlockIntoFreeList+0xb0>)
 80190a4:	681a      	ldr	r2, [r3, #0]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	601a      	str	r2, [r3, #0]
 80190aa:	e003      	b.n	80190b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681a      	ldr	r2, [r3, #0]
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80190b4:	68fa      	ldr	r2, [r7, #12]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	429a      	cmp	r2, r3
 80190ba:	d002      	beq.n	80190c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80190c2:	bf00      	nop
 80190c4:	3714      	adds	r7, #20
 80190c6:	46bd      	mov	sp, r7
 80190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190cc:	4770      	bx	lr
 80190ce:	bf00      	nop
 80190d0:	240229c4 	.word	0x240229c4
 80190d4:	240229cc 	.word	0x240229cc

080190d8 <asm330lhh_read_reg>:
 * @param  len   number of consecutive register to read
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len) {
 80190d8:	b590      	push	{r4, r7, lr}
 80190da:	b087      	sub	sp, #28
 80190dc:	af00      	add	r7, sp, #0
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	607a      	str	r2, [r7, #4]
 80190e2:	461a      	mov	r2, r3
 80190e4:	460b      	mov	r3, r1
 80190e6:	72fb      	strb	r3, [r7, #11]
 80190e8:	4613      	mov	r3, r2
 80190ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d102      	bne.n	80190f8 <asm330lhh_read_reg+0x20>
    return -1;
 80190f2:	f04f 33ff 	mov.w	r3, #4294967295
 80190f6:	e009      	b.n	801910c <asm330lhh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	685c      	ldr	r4, [r3, #4]
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	68d8      	ldr	r0, [r3, #12]
 8019100:	893b      	ldrh	r3, [r7, #8]
 8019102:	7af9      	ldrb	r1, [r7, #11]
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	47a0      	blx	r4
 8019108:	6178      	str	r0, [r7, #20]

  return ret;
 801910a:	697b      	ldr	r3, [r7, #20]
}
 801910c:	4618      	mov	r0, r3
 801910e:	371c      	adds	r7, #28
 8019110:	46bd      	mov	sp, r7
 8019112:	bd90      	pop	{r4, r7, pc}

08019114 <asm330lhh_write_reg>:
 * @param  len   number of consecutive register to write
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t __weak asm330lhh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len) {
 8019114:	b590      	push	{r4, r7, lr}
 8019116:	b087      	sub	sp, #28
 8019118:	af00      	add	r7, sp, #0
 801911a:	60f8      	str	r0, [r7, #12]
 801911c:	607a      	str	r2, [r7, #4]
 801911e:	461a      	mov	r2, r3
 8019120:	460b      	mov	r3, r1
 8019122:	72fb      	strb	r3, [r7, #11]
 8019124:	4613      	mov	r3, r2
 8019126:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) {
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d102      	bne.n	8019134 <asm330lhh_write_reg+0x20>
    return -1;
 801912e:	f04f 33ff 	mov.w	r3, #4294967295
 8019132:	e009      	b.n	8019148 <asm330lhh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	681c      	ldr	r4, [r3, #0]
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	68d8      	ldr	r0, [r3, #12]
 801913c:	893b      	ldrh	r3, [r7, #8]
 801913e:	7af9      	ldrb	r1, [r7, #11]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	47a0      	blx	r4
 8019144:	6178      	str	r0, [r7, #20]

  return ret;
 8019146:	697b      	ldr	r3, [r7, #20]
}
 8019148:	4618      	mov	r0, r3
 801914a:	371c      	adds	r7, #28
 801914c:	46bd      	mov	sp, r7
 801914e:	bd90      	pop	{r4, r7, pc}

08019150 <asm330lhh_xl_full_scale_set>:
 * @param  val    Change the values of fs_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_xl_t val) {
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	460b      	mov	r3, r1
 801915a:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 801915c:	f107 0208 	add.w	r2, r7, #8
 8019160:	2301      	movs	r3, #1
 8019162:	2110      	movs	r1, #16
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f7ff ffb7 	bl	80190d8 <asm330lhh_read_reg>
 801916a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d10f      	bne.n	8019192 <asm330lhh_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8019172:	78fb      	ldrb	r3, [r7, #3]
 8019174:	f003 0303 	and.w	r3, r3, #3
 8019178:	b2da      	uxtb	r2, r3
 801917a:	7a3b      	ldrb	r3, [r7, #8]
 801917c:	f362 0383 	bfi	r3, r2, #2, #2
 8019180:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8019182:	f107 0208 	add.w	r2, r7, #8
 8019186:	2301      	movs	r3, #1
 8019188:	2110      	movs	r1, #16
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f7ff ffc2 	bl	8019114 <asm330lhh_write_reg>
 8019190:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8019192:	68fb      	ldr	r3, [r7, #12]
}
 8019194:	4618      	mov	r0, r3
 8019196:	3710      	adds	r7, #16
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}

0801919c <asm330lhh_xl_data_rate_set>:
 * @param  val    Change the values of odr_xl in reg CTRL1_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_xl_t val) {
 801919c:	b580      	push	{r7, lr}
 801919e:	b084      	sub	sp, #16
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
 80191a4:	460b      	mov	r3, r1
 80191a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_xl_t odr_xl = val;
 80191a8:	78fb      	ldrb	r3, [r7, #3]
 80191aa:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret = 0;
 80191ac:	2300      	movs	r3, #0
 80191ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d107      	bne.n	80191c6 <asm330lhh_xl_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80191b6:	f107 0208 	add.w	r2, r7, #8
 80191ba:	2301      	movs	r3, #1
 80191bc:	2110      	movs	r1, #16
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f7ff ff8a 	bl	80190d8 <asm330lhh_read_reg>
 80191c4:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d10f      	bne.n	80191ec <asm330lhh_xl_data_rate_set+0x50>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80191cc:	7afb      	ldrb	r3, [r7, #11]
 80191ce:	f003 030f 	and.w	r3, r3, #15
 80191d2:	b2da      	uxtb	r2, r3
 80191d4:	7a3b      	ldrb	r3, [r7, #8]
 80191d6:	f362 1307 	bfi	r3, r2, #4, #4
 80191da:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80191dc:	f107 0208 	add.w	r2, r7, #8
 80191e0:	2301      	movs	r3, #1
 80191e2:	2110      	movs	r1, #16
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f7ff ff95 	bl	8019114 <asm330lhh_write_reg>
 80191ea:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80191ec:	68fb      	ldr	r3, [r7, #12]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}

080191f6 <asm330lhh_gy_full_scale_set>:
 * @param  val    Change the values of fs_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                    asm330lhh_fs_g_t val) {
 80191f6:	b580      	push	{r7, lr}
 80191f8:	b084      	sub	sp, #16
 80191fa:	af00      	add	r7, sp, #0
 80191fc:	6078      	str	r0, [r7, #4]
 80191fe:	460b      	mov	r3, r1
 8019200:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019202:	f107 0208 	add.w	r2, r7, #8
 8019206:	2301      	movs	r3, #1
 8019208:	2111      	movs	r1, #17
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	f7ff ff64 	bl	80190d8 <asm330lhh_read_reg>
 8019210:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d10f      	bne.n	8019238 <asm330lhh_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8019218:	78fb      	ldrb	r3, [r7, #3]
 801921a:	f003 030f 	and.w	r3, r3, #15
 801921e:	b2da      	uxtb	r2, r3
 8019220:	7a3b      	ldrb	r3, [r7, #8]
 8019222:	f362 0303 	bfi	r3, r2, #0, #4
 8019226:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019228:	f107 0208 	add.w	r2, r7, #8
 801922c:	2301      	movs	r3, #1
 801922e:	2111      	movs	r1, #17
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f7ff ff6f 	bl	8019114 <asm330lhh_write_reg>
 8019236:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019238:	68fb      	ldr	r3, [r7, #12]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3710      	adds	r7, #16
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <asm330lhh_gy_data_rate_set>:
 * @param  val    Change the values of odr_g in reg CTRL2_G
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                   asm330lhh_odr_g_t val) {
 8019242:	b580      	push	{r7, lr}
 8019244:	b084      	sub	sp, #16
 8019246:	af00      	add	r7, sp, #0
 8019248:	6078      	str	r0, [r7, #4]
 801924a:	460b      	mov	r3, r1
 801924c:	70fb      	strb	r3, [r7, #3]
  asm330lhh_odr_g_t odr_gy = val;
 801924e:	78fb      	ldrb	r3, [r7, #3]
 8019250:	72fb      	strb	r3, [r7, #11]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret = 0;
 8019252:	2300      	movs	r3, #0
 8019254:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d107      	bne.n	801926c <asm330lhh_gy_data_rate_set+0x2a>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 801925c:	f107 0208 	add.w	r2, r7, #8
 8019260:	2301      	movs	r3, #1
 8019262:	2111      	movs	r1, #17
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f7ff ff37 	bl	80190d8 <asm330lhh_read_reg>
 801926a:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d10f      	bne.n	8019292 <asm330lhh_gy_data_rate_set+0x50>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8019272:	7afb      	ldrb	r3, [r7, #11]
 8019274:	f003 030f 	and.w	r3, r3, #15
 8019278:	b2da      	uxtb	r2, r3
 801927a:	7a3b      	ldrb	r3, [r7, #8]
 801927c:	f362 1307 	bfi	r3, r2, #4, #4
 8019280:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8019282:	f107 0208 	add.w	r2, r7, #8
 8019286:	2301      	movs	r3, #1
 8019288:	2111      	movs	r1, #17
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f7ff ff42 	bl	8019114 <asm330lhh_write_reg>
 8019290:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019292:	68fb      	ldr	r3, [r7, #12]
}
 8019294:	4618      	mov	r0, r3
 8019296:	3710      	adds	r7, #16
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}

0801929c <asm330lhh_block_data_update_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of bdu in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val) {
 801929c:	b580      	push	{r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	460b      	mov	r3, r1
 80192a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80192a8:	f107 0208 	add.w	r2, r7, #8
 80192ac:	2301      	movs	r3, #1
 80192ae:	2112      	movs	r1, #18
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f7ff ff11 	bl	80190d8 <asm330lhh_read_reg>
 80192b6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d10f      	bne.n	80192de <asm330lhh_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80192be:	78fb      	ldrb	r3, [r7, #3]
 80192c0:	f003 0301 	and.w	r3, r3, #1
 80192c4:	b2da      	uxtb	r2, r3
 80192c6:	7a3b      	ldrb	r3, [r7, #8]
 80192c8:	f362 1386 	bfi	r3, r2, #6, #1
 80192cc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80192ce:	f107 0208 	add.w	r2, r7, #8
 80192d2:	2301      	movs	r3, #1
 80192d4:	2112      	movs	r1, #18
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f7ff ff1c 	bl	8019114 <asm330lhh_write_reg>
 80192dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80192de:	68fb      	ldr	r3, [r7, #12]
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	3710      	adds	r7, #16
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}

080192e8 <asm330lhh_angular_rate_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b086      	sub	sp, #24
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
 80192f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_G, buff, 6);
 80192f2:	f107 020c 	add.w	r2, r7, #12
 80192f6:	2306      	movs	r3, #6
 80192f8:	2122      	movs	r1, #34	@ 0x22
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f7ff feec 	bl	80190d8 <asm330lhh_read_reg>
 8019300:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 8019302:	7b7b      	ldrb	r3, [r7, #13]
 8019304:	b21a      	sxth	r2, r3
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019310:	b29b      	uxth	r3, r3
 8019312:	021b      	lsls	r3, r3, #8
 8019314:	b29b      	uxth	r3, r3
 8019316:	7b3a      	ldrb	r2, [r7, #12]
 8019318:	4413      	add	r3, r2
 801931a:	b29b      	uxth	r3, r3
 801931c:	b21a      	sxth	r2, r3
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8019322:	7bfa      	ldrb	r2, [r7, #15]
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	3302      	adds	r3, #2
 8019328:	b212      	sxth	r2, r2
 801932a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	3302      	adds	r3, #2
 8019330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019334:	b29b      	uxth	r3, r3
 8019336:	021b      	lsls	r3, r3, #8
 8019338:	b29b      	uxth	r3, r3
 801933a:	7bba      	ldrb	r2, [r7, #14]
 801933c:	4413      	add	r3, r2
 801933e:	b29a      	uxth	r2, r3
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	3302      	adds	r3, #2
 8019344:	b212      	sxth	r2, r2
 8019346:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8019348:	7c7a      	ldrb	r2, [r7, #17]
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	3304      	adds	r3, #4
 801934e:	b212      	sxth	r2, r2
 8019350:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	3304      	adds	r3, #4
 8019356:	f9b3 3000 	ldrsh.w	r3, [r3]
 801935a:	b29b      	uxth	r3, r3
 801935c:	021b      	lsls	r3, r3, #8
 801935e:	b29b      	uxth	r3, r3
 8019360:	7c3a      	ldrb	r2, [r7, #16]
 8019362:	4413      	add	r3, r2
 8019364:	b29a      	uxth	r2, r3
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	3304      	adds	r3, #4
 801936a:	b212      	sxth	r2, r2
 801936c:	801a      	strh	r2, [r3, #0]

  return ret;
 801936e:	697b      	ldr	r3, [r7, #20]
}
 8019370:	4618      	mov	r0, r3
 8019372:	3718      	adds	r7, #24
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <asm330lhh_acceleration_raw_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val) {
 8019378:	b580      	push	{r7, lr}
 801937a:	b086      	sub	sp, #24
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_A, buff, 6);
 8019382:	f107 020c 	add.w	r2, r7, #12
 8019386:	2306      	movs	r3, #6
 8019388:	2128      	movs	r1, #40	@ 0x28
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7ff fea4 	bl	80190d8 <asm330lhh_read_reg>
 8019390:	6178      	str	r0, [r7, #20]

  val[0] = (int16_t)buff[1];
 8019392:	7b7b      	ldrb	r3, [r7, #13]
 8019394:	b21a      	sxth	r2, r3
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 801939a:	683b      	ldr	r3, [r7, #0]
 801939c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	021b      	lsls	r3, r3, #8
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	7b3a      	ldrb	r2, [r7, #12]
 80193a8:	4413      	add	r3, r2
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	b21a      	sxth	r2, r3
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80193b2:	7bfa      	ldrb	r2, [r7, #15]
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	3302      	adds	r3, #2
 80193b8:	b212      	sxth	r2, r2
 80193ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	3302      	adds	r3, #2
 80193c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193c4:	b29b      	uxth	r3, r3
 80193c6:	021b      	lsls	r3, r3, #8
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	7bba      	ldrb	r2, [r7, #14]
 80193cc:	4413      	add	r3, r2
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	3302      	adds	r3, #2
 80193d4:	b212      	sxth	r2, r2
 80193d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80193d8:	7c7a      	ldrb	r2, [r7, #17]
 80193da:	683b      	ldr	r3, [r7, #0]
 80193dc:	3304      	adds	r3, #4
 80193de:	b212      	sxth	r2, r2
 80193e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	3304      	adds	r3, #4
 80193e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	021b      	lsls	r3, r3, #8
 80193ee:	b29b      	uxth	r3, r3
 80193f0:	7c3a      	ldrb	r2, [r7, #16]
 80193f2:	4413      	add	r3, r2
 80193f4:	b29a      	uxth	r2, r3
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	3304      	adds	r3, #4
 80193fa:	b212      	sxth	r2, r2
 80193fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80193fe:	697b      	ldr	r3, [r7, #20]
}
 8019400:	4618      	mov	r0, r3
 8019402:	3718      	adds	r7, #24
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <asm330lhh_device_conf_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of device_conf in reg CTRL9_XL
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_conf_set(const stmdev_ctx_t *ctx, uint8_t val) {
 8019408:	b580      	push	{r7, lr}
 801940a:	b084      	sub	sp, #16
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	460b      	mov	r3, r1
 8019412:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8019414:	f107 0208 	add.w	r2, r7, #8
 8019418:	2301      	movs	r3, #1
 801941a:	2118      	movs	r1, #24
 801941c:	6878      	ldr	r0, [r7, #4]
 801941e:	f7ff fe5b 	bl	80190d8 <asm330lhh_read_reg>
 8019422:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d10f      	bne.n	801944a <asm330lhh_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 801942a:	78fb      	ldrb	r3, [r7, #3]
 801942c:	f003 0301 	and.w	r3, r3, #1
 8019430:	b2da      	uxtb	r2, r3
 8019432:	7a3b      	ldrb	r3, [r7, #8]
 8019434:	f362 0341 	bfi	r3, r2, #1, #1
 8019438:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 801943a:	f107 0208 	add.w	r2, r7, #8
 801943e:	2301      	movs	r3, #1
 8019440:	2118      	movs	r1, #24
 8019442:	6878      	ldr	r0, [r7, #4]
 8019444:	f7ff fe66 	bl	8019114 <asm330lhh_write_reg>
 8019448:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801944a:	68fb      	ldr	r3, [r7, #12]
}
 801944c:	4618      	mov	r0, r3
 801944e:	3710      	adds	r7, #16
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}

08019454 <asm330lhh_data_ready_mode_set>:
 *                reg COUNTER_BDR_REG1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_data_ready_mode_set(const stmdev_ctx_t *ctx,
                                      asm330lhh_dataready_pulsed_t val) {
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	460b      	mov	r3, r1
 801945e:	70fb      	strb	r3, [r7, #3]
  asm330lhh_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 8019460:	f107 0208 	add.w	r2, r7, #8
 8019464:	2301      	movs	r3, #1
 8019466:	210b      	movs	r1, #11
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f7ff fe35 	bl	80190d8 <asm330lhh_read_reg>
 801946e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0) {
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d10f      	bne.n	8019496 <asm330lhh_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 8019476:	78fb      	ldrb	r3, [r7, #3]
 8019478:	f003 0301 	and.w	r3, r3, #1
 801947c:	b2da      	uxtb	r2, r3
 801947e:	7a3b      	ldrb	r3, [r7, #8]
 8019480:	f362 13c7 	bfi	r3, r2, #7, #1
 8019484:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_COUNTER_BDR_REG1,
 8019486:	f107 0208 	add.w	r2, r7, #8
 801948a:	2301      	movs	r3, #1
 801948c:	210b      	movs	r1, #11
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	f7ff fe40 	bl	8019114 <asm330lhh_write_reg>
 8019494:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&counter_bdr_reg1, 1);
  }
  return ret;
 8019496:	68fb      	ldr	r3, [r7, #12]
}
 8019498:	4618      	mov	r0, r3
 801949a:	3710      	adds	r7, #16
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}

080194a0 <asm330lhh_device_id_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  buff   Buffer that stores data read
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff) {
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b084      	sub	sp, #16
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
 80194a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = asm330lhh_read_reg(ctx, ASM330LHH_WHO_AM_I, buff, 1);
 80194aa:	2301      	movs	r3, #1
 80194ac:	683a      	ldr	r2, [r7, #0]
 80194ae:	210f      	movs	r1, #15
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	f7ff fe11 	bl	80190d8 <asm330lhh_read_reg>
 80194b6:	60f8      	str	r0, [r7, #12]
  return ret;
 80194b8:	68fb      	ldr	r3, [r7, #12]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3710      	adds	r7, #16
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}

080194c2 <asm330lhh_reset_set>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_set(const stmdev_ctx_t *ctx, uint8_t val) {
 80194c2:	b580      	push	{r7, lr}
 80194c4:	b084      	sub	sp, #16
 80194c6:	af00      	add	r7, sp, #0
 80194c8:	6078      	str	r0, [r7, #4]
 80194ca:	460b      	mov	r3, r1
 80194cc:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80194ce:	f107 0208 	add.w	r2, r7, #8
 80194d2:	2301      	movs	r3, #1
 80194d4:	2112      	movs	r1, #18
 80194d6:	6878      	ldr	r0, [r7, #4]
 80194d8:	f7ff fdfe 	bl	80190d8 <asm330lhh_read_reg>
 80194dc:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d10f      	bne.n	8019504 <asm330lhh_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 80194e4:	78fb      	ldrb	r3, [r7, #3]
 80194e6:	f003 0301 	and.w	r3, r3, #1
 80194ea:	b2da      	uxtb	r2, r3
 80194ec:	7a3b      	ldrb	r3, [r7, #8]
 80194ee:	f362 0300 	bfi	r3, r2, #0, #1
 80194f2:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80194f4:	f107 0208 	add.w	r2, r7, #8
 80194f8:	2301      	movs	r3, #1
 80194fa:	2112      	movs	r1, #18
 80194fc:	6878      	ldr	r0, [r7, #4]
 80194fe:	f7ff fe09 	bl	8019114 <asm330lhh_write_reg>
 8019502:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8019504:	68fb      	ldr	r3, [r7, #12]
}
 8019506:	4618      	mov	r0, r3
 8019508:	3710      	adds	r7, #16
 801950a:	46bd      	mov	sp, r7
 801950c:	bd80      	pop	{r7, pc}

0801950e <asm330lhh_reset_get>:
 * @param  ctx    Read / write interface definitions.(ptr)
 * @param  val    Change the values of sw_reset in reg CTRL3_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t asm330lhh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val) {
 801950e:	b580      	push	{r7, lr}
 8019510:	b084      	sub	sp, #16
 8019512:	af00      	add	r7, sp, #0
 8019514:	6078      	str	r0, [r7, #4]
 8019516:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8019518:	f107 0208 	add.w	r2, r7, #8
 801951c:	2301      	movs	r3, #1
 801951e:	2112      	movs	r1, #18
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f7ff fdd9 	bl	80190d8 <asm330lhh_read_reg>
 8019526:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8019528:	7a3b      	ldrb	r3, [r7, #8]
 801952a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801952e:	b2db      	uxtb	r3, r3
 8019530:	461a      	mov	r2, r3
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	701a      	strb	r2, [r3, #0]

  return ret;
 8019536:	68fb      	ldr	r3, [r7, #12]
}
 8019538:	4618      	mov	r0, r3
 801953a:	3710      	adds	r7, #16
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <asm330lhh_pin_int1_route_set>:
 *                  MD1_CFG, EMB_FUNC_INT1, FSM_INT1_A,
 *                  FSM_INT1_B
 *
 */
int32_t asm330lhh_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                     asm330lhh_pin_int1_route_t *val) {
 8019540:	b580      	push	{r7, lr}
 8019542:	b084      	sub	sp, #16
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	6039      	str	r1, [r7, #0]
  asm330lhh_int_cfg1_t int_cfg1;
  int32_t ret;

  ret =
      asm330lhh_write_reg(ctx, ASM330LHH_MD1_CFG, (uint8_t *)&val->md1_cfg, 1);
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	1c5a      	adds	r2, r3, #1
 801954e:	2301      	movs	r3, #1
 8019550:	215e      	movs	r1, #94	@ 0x5e
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f7ff fdde 	bl	8019114 <asm330lhh_write_reg>
 8019558:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d107      	bne.n	8019570 <asm330lhh_pin_int1_route_set+0x30>
    ret = asm330lhh_read_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 8019560:	f107 0208 	add.w	r2, r7, #8
 8019564:	2301      	movs	r3, #1
 8019566:	2158      	movs	r1, #88	@ 0x58
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7ff fdb5 	bl	80190d8 <asm330lhh_read_reg>
 801956e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d16a      	bne.n	801964c <asm330lhh_pin_int1_route_set+0x10c>
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	781b      	ldrb	r3, [r3, #0]
 801957a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801957e:	b2da      	uxtb	r2, r3
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	781b      	ldrb	r3, [r3, #0]
 8019584:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019588:	b2db      	uxtb	r3, r3
 801958a:	4313      	orrs	r3, r2
 801958c:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019596:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 8019598:	4313      	orrs	r3, r2
 801959a:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80195a4:	b2db      	uxtb	r3, r3
 80195a6:	4313      	orrs	r3, r2
 80195a8:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80195b2:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr | val->int1_ctrl.int1_drdy_g |
 80195b4:	4313      	orrs	r3, r2
 80195b6:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80195c0:	b2db      	uxtb	r3, r3
 80195c2:	4313      	orrs	r3, r2
 80195c4:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80195ce:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl | val->int1_ctrl.int1_fifo_full |
 80195d0:	4313      	orrs	r3, r2
 80195d2:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	4313      	orrs	r3, r2
 80195e0:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	785b      	ldrb	r3, [r3, #1]
 80195e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80195ea:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr | val->int1_ctrl.int1_fifo_th |
 80195ec:	4313      	orrs	r3, r2
 80195ee:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	785b      	ldrb	r3, [r3, #1]
 80195f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80195f8:	b2db      	uxtb	r3, r3
 80195fa:	4313      	orrs	r3, r2
 80195fc:	b2da      	uxtb	r2, r3
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	785b      	ldrb	r3, [r3, #1]
 8019602:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019606:	b2db      	uxtb	r3, r3
 8019608:	4313      	orrs	r3, r2
 801960a:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE) {
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	785b      	ldrb	r3, [r3, #1]
 8019610:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8019614:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d | val->md1_cfg.int1_ff | val->md1_cfg.int1_wu |
 8019616:	4313      	orrs	r3, r2
 8019618:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag | val->int1_ctrl.int1_boot |
 801961a:	2b00      	cmp	r3, #0
 801961c:	d00a      	beq.n	8019634 <asm330lhh_pin_int1_route_set+0xf4>
      int_cfg1.interrupts_enable = PROPERTY_ENABLE;
 801961e:	7a3b      	ldrb	r3, [r7, #8]
 8019620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019624:	723b      	strb	r3, [r7, #8]
      asm330lhh_write_reg(ctx, ASM330LHH_INT1_CTRL, (uint8_t *)&val->int1_ctrl,
 8019626:	683a      	ldr	r2, [r7, #0]
 8019628:	2301      	movs	r3, #1
 801962a:	210d      	movs	r1, #13
 801962c:	6878      	ldr	r0, [r7, #4]
 801962e:	f7ff fd71 	bl	8019114 <asm330lhh_write_reg>
 8019632:	e003      	b.n	801963c <asm330lhh_pin_int1_route_set+0xfc>
                          1);
    } else {
      int_cfg1.interrupts_enable = PROPERTY_DISABLE;
 8019634:	7a3b      	ldrb	r3, [r7, #8]
 8019636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801963a:	723b      	strb	r3, [r7, #8]
    }
    ret = asm330lhh_write_reg(ctx, ASM330LHH_INT_CFG1, (uint8_t *)&int_cfg1, 1);
 801963c:	f107 0208 	add.w	r2, r7, #8
 8019640:	2301      	movs	r3, #1
 8019642:	2158      	movs	r1, #88	@ 0x58
 8019644:	6878      	ldr	r0, [r7, #4]
 8019646:	f7ff fd65 	bl	8019114 <asm330lhh_write_reg>
 801964a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 801964c:	68fb      	ldr	r3, [r7, #12]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3710      	adds	r7, #16
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
	...

08019658 <std>:
 8019658:	2300      	movs	r3, #0
 801965a:	b510      	push	{r4, lr}
 801965c:	4604      	mov	r4, r0
 801965e:	e9c0 3300 	strd	r3, r3, [r0]
 8019662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019666:	6083      	str	r3, [r0, #8]
 8019668:	8181      	strh	r1, [r0, #12]
 801966a:	6643      	str	r3, [r0, #100]	@ 0x64
 801966c:	81c2      	strh	r2, [r0, #14]
 801966e:	6183      	str	r3, [r0, #24]
 8019670:	4619      	mov	r1, r3
 8019672:	2208      	movs	r2, #8
 8019674:	305c      	adds	r0, #92	@ 0x5c
 8019676:	f000 f9f9 	bl	8019a6c <memset>
 801967a:	4b0d      	ldr	r3, [pc, #52]	@ (80196b0 <std+0x58>)
 801967c:	6263      	str	r3, [r4, #36]	@ 0x24
 801967e:	4b0d      	ldr	r3, [pc, #52]	@ (80196b4 <std+0x5c>)
 8019680:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019682:	4b0d      	ldr	r3, [pc, #52]	@ (80196b8 <std+0x60>)
 8019684:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019686:	4b0d      	ldr	r3, [pc, #52]	@ (80196bc <std+0x64>)
 8019688:	6323      	str	r3, [r4, #48]	@ 0x30
 801968a:	4b0d      	ldr	r3, [pc, #52]	@ (80196c0 <std+0x68>)
 801968c:	6224      	str	r4, [r4, #32]
 801968e:	429c      	cmp	r4, r3
 8019690:	d006      	beq.n	80196a0 <std+0x48>
 8019692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019696:	4294      	cmp	r4, r2
 8019698:	d002      	beq.n	80196a0 <std+0x48>
 801969a:	33d0      	adds	r3, #208	@ 0xd0
 801969c:	429c      	cmp	r4, r3
 801969e:	d105      	bne.n	80196ac <std+0x54>
 80196a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80196a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196a8:	f000 bab6 	b.w	8019c18 <__retarget_lock_init_recursive>
 80196ac:	bd10      	pop	{r4, pc}
 80196ae:	bf00      	nop
 80196b0:	080198bd 	.word	0x080198bd
 80196b4:	080198df 	.word	0x080198df
 80196b8:	08019917 	.word	0x08019917
 80196bc:	0801993b 	.word	0x0801993b
 80196c0:	240229e4 	.word	0x240229e4

080196c4 <stdio_exit_handler>:
 80196c4:	4a02      	ldr	r2, [pc, #8]	@ (80196d0 <stdio_exit_handler+0xc>)
 80196c6:	4903      	ldr	r1, [pc, #12]	@ (80196d4 <stdio_exit_handler+0x10>)
 80196c8:	4803      	ldr	r0, [pc, #12]	@ (80196d8 <stdio_exit_handler+0x14>)
 80196ca:	f000 b869 	b.w	80197a0 <_fwalk_sglue>
 80196ce:	bf00      	nop
 80196d0:	2400001c 	.word	0x2400001c
 80196d4:	0801a4d1 	.word	0x0801a4d1
 80196d8:	2400002c 	.word	0x2400002c

080196dc <cleanup_stdio>:
 80196dc:	6841      	ldr	r1, [r0, #4]
 80196de:	4b0c      	ldr	r3, [pc, #48]	@ (8019710 <cleanup_stdio+0x34>)
 80196e0:	4299      	cmp	r1, r3
 80196e2:	b510      	push	{r4, lr}
 80196e4:	4604      	mov	r4, r0
 80196e6:	d001      	beq.n	80196ec <cleanup_stdio+0x10>
 80196e8:	f000 fef2 	bl	801a4d0 <_fflush_r>
 80196ec:	68a1      	ldr	r1, [r4, #8]
 80196ee:	4b09      	ldr	r3, [pc, #36]	@ (8019714 <cleanup_stdio+0x38>)
 80196f0:	4299      	cmp	r1, r3
 80196f2:	d002      	beq.n	80196fa <cleanup_stdio+0x1e>
 80196f4:	4620      	mov	r0, r4
 80196f6:	f000 feeb 	bl	801a4d0 <_fflush_r>
 80196fa:	68e1      	ldr	r1, [r4, #12]
 80196fc:	4b06      	ldr	r3, [pc, #24]	@ (8019718 <cleanup_stdio+0x3c>)
 80196fe:	4299      	cmp	r1, r3
 8019700:	d004      	beq.n	801970c <cleanup_stdio+0x30>
 8019702:	4620      	mov	r0, r4
 8019704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019708:	f000 bee2 	b.w	801a4d0 <_fflush_r>
 801970c:	bd10      	pop	{r4, pc}
 801970e:	bf00      	nop
 8019710:	240229e4 	.word	0x240229e4
 8019714:	24022a4c 	.word	0x24022a4c
 8019718:	24022ab4 	.word	0x24022ab4

0801971c <global_stdio_init.part.0>:
 801971c:	b510      	push	{r4, lr}
 801971e:	4b0b      	ldr	r3, [pc, #44]	@ (801974c <global_stdio_init.part.0+0x30>)
 8019720:	4c0b      	ldr	r4, [pc, #44]	@ (8019750 <global_stdio_init.part.0+0x34>)
 8019722:	4a0c      	ldr	r2, [pc, #48]	@ (8019754 <global_stdio_init.part.0+0x38>)
 8019724:	601a      	str	r2, [r3, #0]
 8019726:	4620      	mov	r0, r4
 8019728:	2200      	movs	r2, #0
 801972a:	2104      	movs	r1, #4
 801972c:	f7ff ff94 	bl	8019658 <std>
 8019730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019734:	2201      	movs	r2, #1
 8019736:	2109      	movs	r1, #9
 8019738:	f7ff ff8e 	bl	8019658 <std>
 801973c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019740:	2202      	movs	r2, #2
 8019742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019746:	2112      	movs	r1, #18
 8019748:	f7ff bf86 	b.w	8019658 <std>
 801974c:	24022b1c 	.word	0x24022b1c
 8019750:	240229e4 	.word	0x240229e4
 8019754:	080196c5 	.word	0x080196c5

08019758 <__sfp_lock_acquire>:
 8019758:	4801      	ldr	r0, [pc, #4]	@ (8019760 <__sfp_lock_acquire+0x8>)
 801975a:	f000 ba5e 	b.w	8019c1a <__retarget_lock_acquire_recursive>
 801975e:	bf00      	nop
 8019760:	24022b25 	.word	0x24022b25

08019764 <__sfp_lock_release>:
 8019764:	4801      	ldr	r0, [pc, #4]	@ (801976c <__sfp_lock_release+0x8>)
 8019766:	f000 ba59 	b.w	8019c1c <__retarget_lock_release_recursive>
 801976a:	bf00      	nop
 801976c:	24022b25 	.word	0x24022b25

08019770 <__sinit>:
 8019770:	b510      	push	{r4, lr}
 8019772:	4604      	mov	r4, r0
 8019774:	f7ff fff0 	bl	8019758 <__sfp_lock_acquire>
 8019778:	6a23      	ldr	r3, [r4, #32]
 801977a:	b11b      	cbz	r3, 8019784 <__sinit+0x14>
 801977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019780:	f7ff bff0 	b.w	8019764 <__sfp_lock_release>
 8019784:	4b04      	ldr	r3, [pc, #16]	@ (8019798 <__sinit+0x28>)
 8019786:	6223      	str	r3, [r4, #32]
 8019788:	4b04      	ldr	r3, [pc, #16]	@ (801979c <__sinit+0x2c>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d1f5      	bne.n	801977c <__sinit+0xc>
 8019790:	f7ff ffc4 	bl	801971c <global_stdio_init.part.0>
 8019794:	e7f2      	b.n	801977c <__sinit+0xc>
 8019796:	bf00      	nop
 8019798:	080196dd 	.word	0x080196dd
 801979c:	24022b1c 	.word	0x24022b1c

080197a0 <_fwalk_sglue>:
 80197a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197a4:	4607      	mov	r7, r0
 80197a6:	4688      	mov	r8, r1
 80197a8:	4614      	mov	r4, r2
 80197aa:	2600      	movs	r6, #0
 80197ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80197b0:	f1b9 0901 	subs.w	r9, r9, #1
 80197b4:	d505      	bpl.n	80197c2 <_fwalk_sglue+0x22>
 80197b6:	6824      	ldr	r4, [r4, #0]
 80197b8:	2c00      	cmp	r4, #0
 80197ba:	d1f7      	bne.n	80197ac <_fwalk_sglue+0xc>
 80197bc:	4630      	mov	r0, r6
 80197be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197c2:	89ab      	ldrh	r3, [r5, #12]
 80197c4:	2b01      	cmp	r3, #1
 80197c6:	d907      	bls.n	80197d8 <_fwalk_sglue+0x38>
 80197c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197cc:	3301      	adds	r3, #1
 80197ce:	d003      	beq.n	80197d8 <_fwalk_sglue+0x38>
 80197d0:	4629      	mov	r1, r5
 80197d2:	4638      	mov	r0, r7
 80197d4:	47c0      	blx	r8
 80197d6:	4306      	orrs	r6, r0
 80197d8:	3568      	adds	r5, #104	@ 0x68
 80197da:	e7e9      	b.n	80197b0 <_fwalk_sglue+0x10>

080197dc <iprintf>:
 80197dc:	b40f      	push	{r0, r1, r2, r3}
 80197de:	b507      	push	{r0, r1, r2, lr}
 80197e0:	4906      	ldr	r1, [pc, #24]	@ (80197fc <iprintf+0x20>)
 80197e2:	ab04      	add	r3, sp, #16
 80197e4:	6808      	ldr	r0, [r1, #0]
 80197e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80197ea:	6881      	ldr	r1, [r0, #8]
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	f000 fb47 	bl	8019e80 <_vfiprintf_r>
 80197f2:	b003      	add	sp, #12
 80197f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80197f8:	b004      	add	sp, #16
 80197fa:	4770      	bx	lr
 80197fc:	24000028 	.word	0x24000028

08019800 <_puts_r>:
 8019800:	6a03      	ldr	r3, [r0, #32]
 8019802:	b570      	push	{r4, r5, r6, lr}
 8019804:	6884      	ldr	r4, [r0, #8]
 8019806:	4605      	mov	r5, r0
 8019808:	460e      	mov	r6, r1
 801980a:	b90b      	cbnz	r3, 8019810 <_puts_r+0x10>
 801980c:	f7ff ffb0 	bl	8019770 <__sinit>
 8019810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019812:	07db      	lsls	r3, r3, #31
 8019814:	d405      	bmi.n	8019822 <_puts_r+0x22>
 8019816:	89a3      	ldrh	r3, [r4, #12]
 8019818:	0598      	lsls	r0, r3, #22
 801981a:	d402      	bmi.n	8019822 <_puts_r+0x22>
 801981c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801981e:	f000 f9fc 	bl	8019c1a <__retarget_lock_acquire_recursive>
 8019822:	89a3      	ldrh	r3, [r4, #12]
 8019824:	0719      	lsls	r1, r3, #28
 8019826:	d502      	bpl.n	801982e <_puts_r+0x2e>
 8019828:	6923      	ldr	r3, [r4, #16]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d135      	bne.n	801989a <_puts_r+0x9a>
 801982e:	4621      	mov	r1, r4
 8019830:	4628      	mov	r0, r5
 8019832:	f000 f8c5 	bl	80199c0 <__swsetup_r>
 8019836:	b380      	cbz	r0, 801989a <_puts_r+0x9a>
 8019838:	f04f 35ff 	mov.w	r5, #4294967295
 801983c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801983e:	07da      	lsls	r2, r3, #31
 8019840:	d405      	bmi.n	801984e <_puts_r+0x4e>
 8019842:	89a3      	ldrh	r3, [r4, #12]
 8019844:	059b      	lsls	r3, r3, #22
 8019846:	d402      	bmi.n	801984e <_puts_r+0x4e>
 8019848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801984a:	f000 f9e7 	bl	8019c1c <__retarget_lock_release_recursive>
 801984e:	4628      	mov	r0, r5
 8019850:	bd70      	pop	{r4, r5, r6, pc}
 8019852:	2b00      	cmp	r3, #0
 8019854:	da04      	bge.n	8019860 <_puts_r+0x60>
 8019856:	69a2      	ldr	r2, [r4, #24]
 8019858:	429a      	cmp	r2, r3
 801985a:	dc17      	bgt.n	801988c <_puts_r+0x8c>
 801985c:	290a      	cmp	r1, #10
 801985e:	d015      	beq.n	801988c <_puts_r+0x8c>
 8019860:	6823      	ldr	r3, [r4, #0]
 8019862:	1c5a      	adds	r2, r3, #1
 8019864:	6022      	str	r2, [r4, #0]
 8019866:	7019      	strb	r1, [r3, #0]
 8019868:	68a3      	ldr	r3, [r4, #8]
 801986a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801986e:	3b01      	subs	r3, #1
 8019870:	60a3      	str	r3, [r4, #8]
 8019872:	2900      	cmp	r1, #0
 8019874:	d1ed      	bne.n	8019852 <_puts_r+0x52>
 8019876:	2b00      	cmp	r3, #0
 8019878:	da11      	bge.n	801989e <_puts_r+0x9e>
 801987a:	4622      	mov	r2, r4
 801987c:	210a      	movs	r1, #10
 801987e:	4628      	mov	r0, r5
 8019880:	f000 f85f 	bl	8019942 <__swbuf_r>
 8019884:	3001      	adds	r0, #1
 8019886:	d0d7      	beq.n	8019838 <_puts_r+0x38>
 8019888:	250a      	movs	r5, #10
 801988a:	e7d7      	b.n	801983c <_puts_r+0x3c>
 801988c:	4622      	mov	r2, r4
 801988e:	4628      	mov	r0, r5
 8019890:	f000 f857 	bl	8019942 <__swbuf_r>
 8019894:	3001      	adds	r0, #1
 8019896:	d1e7      	bne.n	8019868 <_puts_r+0x68>
 8019898:	e7ce      	b.n	8019838 <_puts_r+0x38>
 801989a:	3e01      	subs	r6, #1
 801989c:	e7e4      	b.n	8019868 <_puts_r+0x68>
 801989e:	6823      	ldr	r3, [r4, #0]
 80198a0:	1c5a      	adds	r2, r3, #1
 80198a2:	6022      	str	r2, [r4, #0]
 80198a4:	220a      	movs	r2, #10
 80198a6:	701a      	strb	r2, [r3, #0]
 80198a8:	e7ee      	b.n	8019888 <_puts_r+0x88>
	...

080198ac <puts>:
 80198ac:	4b02      	ldr	r3, [pc, #8]	@ (80198b8 <puts+0xc>)
 80198ae:	4601      	mov	r1, r0
 80198b0:	6818      	ldr	r0, [r3, #0]
 80198b2:	f7ff bfa5 	b.w	8019800 <_puts_r>
 80198b6:	bf00      	nop
 80198b8:	24000028 	.word	0x24000028

080198bc <__sread>:
 80198bc:	b510      	push	{r4, lr}
 80198be:	460c      	mov	r4, r1
 80198c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198c4:	f000 f95a 	bl	8019b7c <_read_r>
 80198c8:	2800      	cmp	r0, #0
 80198ca:	bfab      	itete	ge
 80198cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80198ce:	89a3      	ldrhlt	r3, [r4, #12]
 80198d0:	181b      	addge	r3, r3, r0
 80198d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80198d6:	bfac      	ite	ge
 80198d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80198da:	81a3      	strhlt	r3, [r4, #12]
 80198dc:	bd10      	pop	{r4, pc}

080198de <__swrite>:
 80198de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198e2:	461f      	mov	r7, r3
 80198e4:	898b      	ldrh	r3, [r1, #12]
 80198e6:	05db      	lsls	r3, r3, #23
 80198e8:	4605      	mov	r5, r0
 80198ea:	460c      	mov	r4, r1
 80198ec:	4616      	mov	r6, r2
 80198ee:	d505      	bpl.n	80198fc <__swrite+0x1e>
 80198f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198f4:	2302      	movs	r3, #2
 80198f6:	2200      	movs	r2, #0
 80198f8:	f000 f92e 	bl	8019b58 <_lseek_r>
 80198fc:	89a3      	ldrh	r3, [r4, #12]
 80198fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019906:	81a3      	strh	r3, [r4, #12]
 8019908:	4632      	mov	r2, r6
 801990a:	463b      	mov	r3, r7
 801990c:	4628      	mov	r0, r5
 801990e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019912:	f000 b945 	b.w	8019ba0 <_write_r>

08019916 <__sseek>:
 8019916:	b510      	push	{r4, lr}
 8019918:	460c      	mov	r4, r1
 801991a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801991e:	f000 f91b 	bl	8019b58 <_lseek_r>
 8019922:	1c43      	adds	r3, r0, #1
 8019924:	89a3      	ldrh	r3, [r4, #12]
 8019926:	bf15      	itete	ne
 8019928:	6560      	strne	r0, [r4, #84]	@ 0x54
 801992a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801992e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019932:	81a3      	strheq	r3, [r4, #12]
 8019934:	bf18      	it	ne
 8019936:	81a3      	strhne	r3, [r4, #12]
 8019938:	bd10      	pop	{r4, pc}

0801993a <__sclose>:
 801993a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801993e:	f000 b89d 	b.w	8019a7c <_close_r>

08019942 <__swbuf_r>:
 8019942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019944:	460e      	mov	r6, r1
 8019946:	4614      	mov	r4, r2
 8019948:	4605      	mov	r5, r0
 801994a:	b118      	cbz	r0, 8019954 <__swbuf_r+0x12>
 801994c:	6a03      	ldr	r3, [r0, #32]
 801994e:	b90b      	cbnz	r3, 8019954 <__swbuf_r+0x12>
 8019950:	f7ff ff0e 	bl	8019770 <__sinit>
 8019954:	69a3      	ldr	r3, [r4, #24]
 8019956:	60a3      	str	r3, [r4, #8]
 8019958:	89a3      	ldrh	r3, [r4, #12]
 801995a:	071a      	lsls	r2, r3, #28
 801995c:	d501      	bpl.n	8019962 <__swbuf_r+0x20>
 801995e:	6923      	ldr	r3, [r4, #16]
 8019960:	b943      	cbnz	r3, 8019974 <__swbuf_r+0x32>
 8019962:	4621      	mov	r1, r4
 8019964:	4628      	mov	r0, r5
 8019966:	f000 f82b 	bl	80199c0 <__swsetup_r>
 801996a:	b118      	cbz	r0, 8019974 <__swbuf_r+0x32>
 801996c:	f04f 37ff 	mov.w	r7, #4294967295
 8019970:	4638      	mov	r0, r7
 8019972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019974:	6823      	ldr	r3, [r4, #0]
 8019976:	6922      	ldr	r2, [r4, #16]
 8019978:	1a98      	subs	r0, r3, r2
 801997a:	6963      	ldr	r3, [r4, #20]
 801997c:	b2f6      	uxtb	r6, r6
 801997e:	4283      	cmp	r3, r0
 8019980:	4637      	mov	r7, r6
 8019982:	dc05      	bgt.n	8019990 <__swbuf_r+0x4e>
 8019984:	4621      	mov	r1, r4
 8019986:	4628      	mov	r0, r5
 8019988:	f000 fda2 	bl	801a4d0 <_fflush_r>
 801998c:	2800      	cmp	r0, #0
 801998e:	d1ed      	bne.n	801996c <__swbuf_r+0x2a>
 8019990:	68a3      	ldr	r3, [r4, #8]
 8019992:	3b01      	subs	r3, #1
 8019994:	60a3      	str	r3, [r4, #8]
 8019996:	6823      	ldr	r3, [r4, #0]
 8019998:	1c5a      	adds	r2, r3, #1
 801999a:	6022      	str	r2, [r4, #0]
 801999c:	701e      	strb	r6, [r3, #0]
 801999e:	6962      	ldr	r2, [r4, #20]
 80199a0:	1c43      	adds	r3, r0, #1
 80199a2:	429a      	cmp	r2, r3
 80199a4:	d004      	beq.n	80199b0 <__swbuf_r+0x6e>
 80199a6:	89a3      	ldrh	r3, [r4, #12]
 80199a8:	07db      	lsls	r3, r3, #31
 80199aa:	d5e1      	bpl.n	8019970 <__swbuf_r+0x2e>
 80199ac:	2e0a      	cmp	r6, #10
 80199ae:	d1df      	bne.n	8019970 <__swbuf_r+0x2e>
 80199b0:	4621      	mov	r1, r4
 80199b2:	4628      	mov	r0, r5
 80199b4:	f000 fd8c 	bl	801a4d0 <_fflush_r>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	d0d9      	beq.n	8019970 <__swbuf_r+0x2e>
 80199bc:	e7d6      	b.n	801996c <__swbuf_r+0x2a>
	...

080199c0 <__swsetup_r>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4b29      	ldr	r3, [pc, #164]	@ (8019a68 <__swsetup_r+0xa8>)
 80199c4:	4605      	mov	r5, r0
 80199c6:	6818      	ldr	r0, [r3, #0]
 80199c8:	460c      	mov	r4, r1
 80199ca:	b118      	cbz	r0, 80199d4 <__swsetup_r+0x14>
 80199cc:	6a03      	ldr	r3, [r0, #32]
 80199ce:	b90b      	cbnz	r3, 80199d4 <__swsetup_r+0x14>
 80199d0:	f7ff fece 	bl	8019770 <__sinit>
 80199d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199d8:	0719      	lsls	r1, r3, #28
 80199da:	d422      	bmi.n	8019a22 <__swsetup_r+0x62>
 80199dc:	06da      	lsls	r2, r3, #27
 80199de:	d407      	bmi.n	80199f0 <__swsetup_r+0x30>
 80199e0:	2209      	movs	r2, #9
 80199e2:	602a      	str	r2, [r5, #0]
 80199e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199e8:	81a3      	strh	r3, [r4, #12]
 80199ea:	f04f 30ff 	mov.w	r0, #4294967295
 80199ee:	e033      	b.n	8019a58 <__swsetup_r+0x98>
 80199f0:	0758      	lsls	r0, r3, #29
 80199f2:	d512      	bpl.n	8019a1a <__swsetup_r+0x5a>
 80199f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80199f6:	b141      	cbz	r1, 8019a0a <__swsetup_r+0x4a>
 80199f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80199fc:	4299      	cmp	r1, r3
 80199fe:	d002      	beq.n	8019a06 <__swsetup_r+0x46>
 8019a00:	4628      	mov	r0, r5
 8019a02:	f000 f91b 	bl	8019c3c <_free_r>
 8019a06:	2300      	movs	r3, #0
 8019a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a0a:	89a3      	ldrh	r3, [r4, #12]
 8019a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019a10:	81a3      	strh	r3, [r4, #12]
 8019a12:	2300      	movs	r3, #0
 8019a14:	6063      	str	r3, [r4, #4]
 8019a16:	6923      	ldr	r3, [r4, #16]
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	89a3      	ldrh	r3, [r4, #12]
 8019a1c:	f043 0308 	orr.w	r3, r3, #8
 8019a20:	81a3      	strh	r3, [r4, #12]
 8019a22:	6923      	ldr	r3, [r4, #16]
 8019a24:	b94b      	cbnz	r3, 8019a3a <__swsetup_r+0x7a>
 8019a26:	89a3      	ldrh	r3, [r4, #12]
 8019a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a30:	d003      	beq.n	8019a3a <__swsetup_r+0x7a>
 8019a32:	4621      	mov	r1, r4
 8019a34:	4628      	mov	r0, r5
 8019a36:	f000 fd99 	bl	801a56c <__smakebuf_r>
 8019a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a3e:	f013 0201 	ands.w	r2, r3, #1
 8019a42:	d00a      	beq.n	8019a5a <__swsetup_r+0x9a>
 8019a44:	2200      	movs	r2, #0
 8019a46:	60a2      	str	r2, [r4, #8]
 8019a48:	6962      	ldr	r2, [r4, #20]
 8019a4a:	4252      	negs	r2, r2
 8019a4c:	61a2      	str	r2, [r4, #24]
 8019a4e:	6922      	ldr	r2, [r4, #16]
 8019a50:	b942      	cbnz	r2, 8019a64 <__swsetup_r+0xa4>
 8019a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019a56:	d1c5      	bne.n	80199e4 <__swsetup_r+0x24>
 8019a58:	bd38      	pop	{r3, r4, r5, pc}
 8019a5a:	0799      	lsls	r1, r3, #30
 8019a5c:	bf58      	it	pl
 8019a5e:	6962      	ldrpl	r2, [r4, #20]
 8019a60:	60a2      	str	r2, [r4, #8]
 8019a62:	e7f4      	b.n	8019a4e <__swsetup_r+0x8e>
 8019a64:	2000      	movs	r0, #0
 8019a66:	e7f7      	b.n	8019a58 <__swsetup_r+0x98>
 8019a68:	24000028 	.word	0x24000028

08019a6c <memset>:
 8019a6c:	4402      	add	r2, r0
 8019a6e:	4603      	mov	r3, r0
 8019a70:	4293      	cmp	r3, r2
 8019a72:	d100      	bne.n	8019a76 <memset+0xa>
 8019a74:	4770      	bx	lr
 8019a76:	f803 1b01 	strb.w	r1, [r3], #1
 8019a7a:	e7f9      	b.n	8019a70 <memset+0x4>

08019a7c <_close_r>:
 8019a7c:	b538      	push	{r3, r4, r5, lr}
 8019a7e:	4d06      	ldr	r5, [pc, #24]	@ (8019a98 <_close_r+0x1c>)
 8019a80:	2300      	movs	r3, #0
 8019a82:	4604      	mov	r4, r0
 8019a84:	4608      	mov	r0, r1
 8019a86:	602b      	str	r3, [r5, #0]
 8019a88:	f7e8 fb07 	bl	800209a <_close>
 8019a8c:	1c43      	adds	r3, r0, #1
 8019a8e:	d102      	bne.n	8019a96 <_close_r+0x1a>
 8019a90:	682b      	ldr	r3, [r5, #0]
 8019a92:	b103      	cbz	r3, 8019a96 <_close_r+0x1a>
 8019a94:	6023      	str	r3, [r4, #0]
 8019a96:	bd38      	pop	{r3, r4, r5, pc}
 8019a98:	24022b20 	.word	0x24022b20

08019a9c <_reclaim_reent>:
 8019a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8019b54 <_reclaim_reent+0xb8>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	4283      	cmp	r3, r0
 8019aa2:	b570      	push	{r4, r5, r6, lr}
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	d053      	beq.n	8019b50 <_reclaim_reent+0xb4>
 8019aa8:	69c3      	ldr	r3, [r0, #28]
 8019aaa:	b31b      	cbz	r3, 8019af4 <_reclaim_reent+0x58>
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	b163      	cbz	r3, 8019aca <_reclaim_reent+0x2e>
 8019ab0:	2500      	movs	r5, #0
 8019ab2:	69e3      	ldr	r3, [r4, #28]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	5959      	ldr	r1, [r3, r5]
 8019ab8:	b9b1      	cbnz	r1, 8019ae8 <_reclaim_reent+0x4c>
 8019aba:	3504      	adds	r5, #4
 8019abc:	2d80      	cmp	r5, #128	@ 0x80
 8019abe:	d1f8      	bne.n	8019ab2 <_reclaim_reent+0x16>
 8019ac0:	69e3      	ldr	r3, [r4, #28]
 8019ac2:	4620      	mov	r0, r4
 8019ac4:	68d9      	ldr	r1, [r3, #12]
 8019ac6:	f000 f8b9 	bl	8019c3c <_free_r>
 8019aca:	69e3      	ldr	r3, [r4, #28]
 8019acc:	6819      	ldr	r1, [r3, #0]
 8019ace:	b111      	cbz	r1, 8019ad6 <_reclaim_reent+0x3a>
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f000 f8b3 	bl	8019c3c <_free_r>
 8019ad6:	69e3      	ldr	r3, [r4, #28]
 8019ad8:	689d      	ldr	r5, [r3, #8]
 8019ada:	b15d      	cbz	r5, 8019af4 <_reclaim_reent+0x58>
 8019adc:	4629      	mov	r1, r5
 8019ade:	4620      	mov	r0, r4
 8019ae0:	682d      	ldr	r5, [r5, #0]
 8019ae2:	f000 f8ab 	bl	8019c3c <_free_r>
 8019ae6:	e7f8      	b.n	8019ada <_reclaim_reent+0x3e>
 8019ae8:	680e      	ldr	r6, [r1, #0]
 8019aea:	4620      	mov	r0, r4
 8019aec:	f000 f8a6 	bl	8019c3c <_free_r>
 8019af0:	4631      	mov	r1, r6
 8019af2:	e7e1      	b.n	8019ab8 <_reclaim_reent+0x1c>
 8019af4:	6961      	ldr	r1, [r4, #20]
 8019af6:	b111      	cbz	r1, 8019afe <_reclaim_reent+0x62>
 8019af8:	4620      	mov	r0, r4
 8019afa:	f000 f89f 	bl	8019c3c <_free_r>
 8019afe:	69e1      	ldr	r1, [r4, #28]
 8019b00:	b111      	cbz	r1, 8019b08 <_reclaim_reent+0x6c>
 8019b02:	4620      	mov	r0, r4
 8019b04:	f000 f89a 	bl	8019c3c <_free_r>
 8019b08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019b0a:	b111      	cbz	r1, 8019b12 <_reclaim_reent+0x76>
 8019b0c:	4620      	mov	r0, r4
 8019b0e:	f000 f895 	bl	8019c3c <_free_r>
 8019b12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b14:	b111      	cbz	r1, 8019b1c <_reclaim_reent+0x80>
 8019b16:	4620      	mov	r0, r4
 8019b18:	f000 f890 	bl	8019c3c <_free_r>
 8019b1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019b1e:	b111      	cbz	r1, 8019b26 <_reclaim_reent+0x8a>
 8019b20:	4620      	mov	r0, r4
 8019b22:	f000 f88b 	bl	8019c3c <_free_r>
 8019b26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019b28:	b111      	cbz	r1, 8019b30 <_reclaim_reent+0x94>
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	f000 f886 	bl	8019c3c <_free_r>
 8019b30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019b32:	b111      	cbz	r1, 8019b3a <_reclaim_reent+0x9e>
 8019b34:	4620      	mov	r0, r4
 8019b36:	f000 f881 	bl	8019c3c <_free_r>
 8019b3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019b3c:	b111      	cbz	r1, 8019b44 <_reclaim_reent+0xa8>
 8019b3e:	4620      	mov	r0, r4
 8019b40:	f000 f87c 	bl	8019c3c <_free_r>
 8019b44:	6a23      	ldr	r3, [r4, #32]
 8019b46:	b11b      	cbz	r3, 8019b50 <_reclaim_reent+0xb4>
 8019b48:	4620      	mov	r0, r4
 8019b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b4e:	4718      	bx	r3
 8019b50:	bd70      	pop	{r4, r5, r6, pc}
 8019b52:	bf00      	nop
 8019b54:	24000028 	.word	0x24000028

08019b58 <_lseek_r>:
 8019b58:	b538      	push	{r3, r4, r5, lr}
 8019b5a:	4d07      	ldr	r5, [pc, #28]	@ (8019b78 <_lseek_r+0x20>)
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	4608      	mov	r0, r1
 8019b60:	4611      	mov	r1, r2
 8019b62:	2200      	movs	r2, #0
 8019b64:	602a      	str	r2, [r5, #0]
 8019b66:	461a      	mov	r2, r3
 8019b68:	f7e8 fabe 	bl	80020e8 <_lseek>
 8019b6c:	1c43      	adds	r3, r0, #1
 8019b6e:	d102      	bne.n	8019b76 <_lseek_r+0x1e>
 8019b70:	682b      	ldr	r3, [r5, #0]
 8019b72:	b103      	cbz	r3, 8019b76 <_lseek_r+0x1e>
 8019b74:	6023      	str	r3, [r4, #0]
 8019b76:	bd38      	pop	{r3, r4, r5, pc}
 8019b78:	24022b20 	.word	0x24022b20

08019b7c <_read_r>:
 8019b7c:	b538      	push	{r3, r4, r5, lr}
 8019b7e:	4d07      	ldr	r5, [pc, #28]	@ (8019b9c <_read_r+0x20>)
 8019b80:	4604      	mov	r4, r0
 8019b82:	4608      	mov	r0, r1
 8019b84:	4611      	mov	r1, r2
 8019b86:	2200      	movs	r2, #0
 8019b88:	602a      	str	r2, [r5, #0]
 8019b8a:	461a      	mov	r2, r3
 8019b8c:	f7e8 fa4c 	bl	8002028 <_read>
 8019b90:	1c43      	adds	r3, r0, #1
 8019b92:	d102      	bne.n	8019b9a <_read_r+0x1e>
 8019b94:	682b      	ldr	r3, [r5, #0]
 8019b96:	b103      	cbz	r3, 8019b9a <_read_r+0x1e>
 8019b98:	6023      	str	r3, [r4, #0]
 8019b9a:	bd38      	pop	{r3, r4, r5, pc}
 8019b9c:	24022b20 	.word	0x24022b20

08019ba0 <_write_r>:
 8019ba0:	b538      	push	{r3, r4, r5, lr}
 8019ba2:	4d07      	ldr	r5, [pc, #28]	@ (8019bc0 <_write_r+0x20>)
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	4608      	mov	r0, r1
 8019ba8:	4611      	mov	r1, r2
 8019baa:	2200      	movs	r2, #0
 8019bac:	602a      	str	r2, [r5, #0]
 8019bae:	461a      	mov	r2, r3
 8019bb0:	f7e8 fa57 	bl	8002062 <_write>
 8019bb4:	1c43      	adds	r3, r0, #1
 8019bb6:	d102      	bne.n	8019bbe <_write_r+0x1e>
 8019bb8:	682b      	ldr	r3, [r5, #0]
 8019bba:	b103      	cbz	r3, 8019bbe <_write_r+0x1e>
 8019bbc:	6023      	str	r3, [r4, #0]
 8019bbe:	bd38      	pop	{r3, r4, r5, pc}
 8019bc0:	24022b20 	.word	0x24022b20

08019bc4 <__errno>:
 8019bc4:	4b01      	ldr	r3, [pc, #4]	@ (8019bcc <__errno+0x8>)
 8019bc6:	6818      	ldr	r0, [r3, #0]
 8019bc8:	4770      	bx	lr
 8019bca:	bf00      	nop
 8019bcc:	24000028 	.word	0x24000028

08019bd0 <__libc_init_array>:
 8019bd0:	b570      	push	{r4, r5, r6, lr}
 8019bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8019c08 <__libc_init_array+0x38>)
 8019bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8019c0c <__libc_init_array+0x3c>)
 8019bd6:	1b64      	subs	r4, r4, r5
 8019bd8:	10a4      	asrs	r4, r4, #2
 8019bda:	2600      	movs	r6, #0
 8019bdc:	42a6      	cmp	r6, r4
 8019bde:	d109      	bne.n	8019bf4 <__libc_init_array+0x24>
 8019be0:	4d0b      	ldr	r5, [pc, #44]	@ (8019c10 <__libc_init_array+0x40>)
 8019be2:	4c0c      	ldr	r4, [pc, #48]	@ (8019c14 <__libc_init_array+0x44>)
 8019be4:	f000 fd30 	bl	801a648 <_init>
 8019be8:	1b64      	subs	r4, r4, r5
 8019bea:	10a4      	asrs	r4, r4, #2
 8019bec:	2600      	movs	r6, #0
 8019bee:	42a6      	cmp	r6, r4
 8019bf0:	d105      	bne.n	8019bfe <__libc_init_array+0x2e>
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bf8:	4798      	blx	r3
 8019bfa:	3601      	adds	r6, #1
 8019bfc:	e7ee      	b.n	8019bdc <__libc_init_array+0xc>
 8019bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c02:	4798      	blx	r3
 8019c04:	3601      	adds	r6, #1
 8019c06:	e7f2      	b.n	8019bee <__libc_init_array+0x1e>
 8019c08:	0801b774 	.word	0x0801b774
 8019c0c:	0801b774 	.word	0x0801b774
 8019c10:	0801b774 	.word	0x0801b774
 8019c14:	0801b778 	.word	0x0801b778

08019c18 <__retarget_lock_init_recursive>:
 8019c18:	4770      	bx	lr

08019c1a <__retarget_lock_acquire_recursive>:
 8019c1a:	4770      	bx	lr

08019c1c <__retarget_lock_release_recursive>:
 8019c1c:	4770      	bx	lr

08019c1e <memcpy>:
 8019c1e:	440a      	add	r2, r1
 8019c20:	4291      	cmp	r1, r2
 8019c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c26:	d100      	bne.n	8019c2a <memcpy+0xc>
 8019c28:	4770      	bx	lr
 8019c2a:	b510      	push	{r4, lr}
 8019c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c34:	4291      	cmp	r1, r2
 8019c36:	d1f9      	bne.n	8019c2c <memcpy+0xe>
 8019c38:	bd10      	pop	{r4, pc}
	...

08019c3c <_free_r>:
 8019c3c:	b538      	push	{r3, r4, r5, lr}
 8019c3e:	4605      	mov	r5, r0
 8019c40:	2900      	cmp	r1, #0
 8019c42:	d041      	beq.n	8019cc8 <_free_r+0x8c>
 8019c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c48:	1f0c      	subs	r4, r1, #4
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	bfb8      	it	lt
 8019c4e:	18e4      	addlt	r4, r4, r3
 8019c50:	f000 f8e0 	bl	8019e14 <__malloc_lock>
 8019c54:	4a1d      	ldr	r2, [pc, #116]	@ (8019ccc <_free_r+0x90>)
 8019c56:	6813      	ldr	r3, [r2, #0]
 8019c58:	b933      	cbnz	r3, 8019c68 <_free_r+0x2c>
 8019c5a:	6063      	str	r3, [r4, #4]
 8019c5c:	6014      	str	r4, [r2, #0]
 8019c5e:	4628      	mov	r0, r5
 8019c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c64:	f000 b8dc 	b.w	8019e20 <__malloc_unlock>
 8019c68:	42a3      	cmp	r3, r4
 8019c6a:	d908      	bls.n	8019c7e <_free_r+0x42>
 8019c6c:	6820      	ldr	r0, [r4, #0]
 8019c6e:	1821      	adds	r1, r4, r0
 8019c70:	428b      	cmp	r3, r1
 8019c72:	bf01      	itttt	eq
 8019c74:	6819      	ldreq	r1, [r3, #0]
 8019c76:	685b      	ldreq	r3, [r3, #4]
 8019c78:	1809      	addeq	r1, r1, r0
 8019c7a:	6021      	streq	r1, [r4, #0]
 8019c7c:	e7ed      	b.n	8019c5a <_free_r+0x1e>
 8019c7e:	461a      	mov	r2, r3
 8019c80:	685b      	ldr	r3, [r3, #4]
 8019c82:	b10b      	cbz	r3, 8019c88 <_free_r+0x4c>
 8019c84:	42a3      	cmp	r3, r4
 8019c86:	d9fa      	bls.n	8019c7e <_free_r+0x42>
 8019c88:	6811      	ldr	r1, [r2, #0]
 8019c8a:	1850      	adds	r0, r2, r1
 8019c8c:	42a0      	cmp	r0, r4
 8019c8e:	d10b      	bne.n	8019ca8 <_free_r+0x6c>
 8019c90:	6820      	ldr	r0, [r4, #0]
 8019c92:	4401      	add	r1, r0
 8019c94:	1850      	adds	r0, r2, r1
 8019c96:	4283      	cmp	r3, r0
 8019c98:	6011      	str	r1, [r2, #0]
 8019c9a:	d1e0      	bne.n	8019c5e <_free_r+0x22>
 8019c9c:	6818      	ldr	r0, [r3, #0]
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	6053      	str	r3, [r2, #4]
 8019ca2:	4408      	add	r0, r1
 8019ca4:	6010      	str	r0, [r2, #0]
 8019ca6:	e7da      	b.n	8019c5e <_free_r+0x22>
 8019ca8:	d902      	bls.n	8019cb0 <_free_r+0x74>
 8019caa:	230c      	movs	r3, #12
 8019cac:	602b      	str	r3, [r5, #0]
 8019cae:	e7d6      	b.n	8019c5e <_free_r+0x22>
 8019cb0:	6820      	ldr	r0, [r4, #0]
 8019cb2:	1821      	adds	r1, r4, r0
 8019cb4:	428b      	cmp	r3, r1
 8019cb6:	bf04      	itt	eq
 8019cb8:	6819      	ldreq	r1, [r3, #0]
 8019cba:	685b      	ldreq	r3, [r3, #4]
 8019cbc:	6063      	str	r3, [r4, #4]
 8019cbe:	bf04      	itt	eq
 8019cc0:	1809      	addeq	r1, r1, r0
 8019cc2:	6021      	streq	r1, [r4, #0]
 8019cc4:	6054      	str	r4, [r2, #4]
 8019cc6:	e7ca      	b.n	8019c5e <_free_r+0x22>
 8019cc8:	bd38      	pop	{r3, r4, r5, pc}
 8019cca:	bf00      	nop
 8019ccc:	24022b2c 	.word	0x24022b2c

08019cd0 <sbrk_aligned>:
 8019cd0:	b570      	push	{r4, r5, r6, lr}
 8019cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8019d10 <sbrk_aligned+0x40>)
 8019cd4:	460c      	mov	r4, r1
 8019cd6:	6831      	ldr	r1, [r6, #0]
 8019cd8:	4605      	mov	r5, r0
 8019cda:	b911      	cbnz	r1, 8019ce2 <sbrk_aligned+0x12>
 8019cdc:	f000 fca4 	bl	801a628 <_sbrk_r>
 8019ce0:	6030      	str	r0, [r6, #0]
 8019ce2:	4621      	mov	r1, r4
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	f000 fc9f 	bl	801a628 <_sbrk_r>
 8019cea:	1c43      	adds	r3, r0, #1
 8019cec:	d103      	bne.n	8019cf6 <sbrk_aligned+0x26>
 8019cee:	f04f 34ff 	mov.w	r4, #4294967295
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	bd70      	pop	{r4, r5, r6, pc}
 8019cf6:	1cc4      	adds	r4, r0, #3
 8019cf8:	f024 0403 	bic.w	r4, r4, #3
 8019cfc:	42a0      	cmp	r0, r4
 8019cfe:	d0f8      	beq.n	8019cf2 <sbrk_aligned+0x22>
 8019d00:	1a21      	subs	r1, r4, r0
 8019d02:	4628      	mov	r0, r5
 8019d04:	f000 fc90 	bl	801a628 <_sbrk_r>
 8019d08:	3001      	adds	r0, #1
 8019d0a:	d1f2      	bne.n	8019cf2 <sbrk_aligned+0x22>
 8019d0c:	e7ef      	b.n	8019cee <sbrk_aligned+0x1e>
 8019d0e:	bf00      	nop
 8019d10:	24022b28 	.word	0x24022b28

08019d14 <_malloc_r>:
 8019d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d18:	1ccd      	adds	r5, r1, #3
 8019d1a:	f025 0503 	bic.w	r5, r5, #3
 8019d1e:	3508      	adds	r5, #8
 8019d20:	2d0c      	cmp	r5, #12
 8019d22:	bf38      	it	cc
 8019d24:	250c      	movcc	r5, #12
 8019d26:	2d00      	cmp	r5, #0
 8019d28:	4606      	mov	r6, r0
 8019d2a:	db01      	blt.n	8019d30 <_malloc_r+0x1c>
 8019d2c:	42a9      	cmp	r1, r5
 8019d2e:	d904      	bls.n	8019d3a <_malloc_r+0x26>
 8019d30:	230c      	movs	r3, #12
 8019d32:	6033      	str	r3, [r6, #0]
 8019d34:	2000      	movs	r0, #0
 8019d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019e10 <_malloc_r+0xfc>
 8019d3e:	f000 f869 	bl	8019e14 <__malloc_lock>
 8019d42:	f8d8 3000 	ldr.w	r3, [r8]
 8019d46:	461c      	mov	r4, r3
 8019d48:	bb44      	cbnz	r4, 8019d9c <_malloc_r+0x88>
 8019d4a:	4629      	mov	r1, r5
 8019d4c:	4630      	mov	r0, r6
 8019d4e:	f7ff ffbf 	bl	8019cd0 <sbrk_aligned>
 8019d52:	1c43      	adds	r3, r0, #1
 8019d54:	4604      	mov	r4, r0
 8019d56:	d158      	bne.n	8019e0a <_malloc_r+0xf6>
 8019d58:	f8d8 4000 	ldr.w	r4, [r8]
 8019d5c:	4627      	mov	r7, r4
 8019d5e:	2f00      	cmp	r7, #0
 8019d60:	d143      	bne.n	8019dea <_malloc_r+0xd6>
 8019d62:	2c00      	cmp	r4, #0
 8019d64:	d04b      	beq.n	8019dfe <_malloc_r+0xea>
 8019d66:	6823      	ldr	r3, [r4, #0]
 8019d68:	4639      	mov	r1, r7
 8019d6a:	4630      	mov	r0, r6
 8019d6c:	eb04 0903 	add.w	r9, r4, r3
 8019d70:	f000 fc5a 	bl	801a628 <_sbrk_r>
 8019d74:	4581      	cmp	r9, r0
 8019d76:	d142      	bne.n	8019dfe <_malloc_r+0xea>
 8019d78:	6821      	ldr	r1, [r4, #0]
 8019d7a:	1a6d      	subs	r5, r5, r1
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	4630      	mov	r0, r6
 8019d80:	f7ff ffa6 	bl	8019cd0 <sbrk_aligned>
 8019d84:	3001      	adds	r0, #1
 8019d86:	d03a      	beq.n	8019dfe <_malloc_r+0xea>
 8019d88:	6823      	ldr	r3, [r4, #0]
 8019d8a:	442b      	add	r3, r5
 8019d8c:	6023      	str	r3, [r4, #0]
 8019d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8019d92:	685a      	ldr	r2, [r3, #4]
 8019d94:	bb62      	cbnz	r2, 8019df0 <_malloc_r+0xdc>
 8019d96:	f8c8 7000 	str.w	r7, [r8]
 8019d9a:	e00f      	b.n	8019dbc <_malloc_r+0xa8>
 8019d9c:	6822      	ldr	r2, [r4, #0]
 8019d9e:	1b52      	subs	r2, r2, r5
 8019da0:	d420      	bmi.n	8019de4 <_malloc_r+0xd0>
 8019da2:	2a0b      	cmp	r2, #11
 8019da4:	d917      	bls.n	8019dd6 <_malloc_r+0xc2>
 8019da6:	1961      	adds	r1, r4, r5
 8019da8:	42a3      	cmp	r3, r4
 8019daa:	6025      	str	r5, [r4, #0]
 8019dac:	bf18      	it	ne
 8019dae:	6059      	strne	r1, [r3, #4]
 8019db0:	6863      	ldr	r3, [r4, #4]
 8019db2:	bf08      	it	eq
 8019db4:	f8c8 1000 	streq.w	r1, [r8]
 8019db8:	5162      	str	r2, [r4, r5]
 8019dba:	604b      	str	r3, [r1, #4]
 8019dbc:	4630      	mov	r0, r6
 8019dbe:	f000 f82f 	bl	8019e20 <__malloc_unlock>
 8019dc2:	f104 000b 	add.w	r0, r4, #11
 8019dc6:	1d23      	adds	r3, r4, #4
 8019dc8:	f020 0007 	bic.w	r0, r0, #7
 8019dcc:	1ac2      	subs	r2, r0, r3
 8019dce:	bf1c      	itt	ne
 8019dd0:	1a1b      	subne	r3, r3, r0
 8019dd2:	50a3      	strne	r3, [r4, r2]
 8019dd4:	e7af      	b.n	8019d36 <_malloc_r+0x22>
 8019dd6:	6862      	ldr	r2, [r4, #4]
 8019dd8:	42a3      	cmp	r3, r4
 8019dda:	bf0c      	ite	eq
 8019ddc:	f8c8 2000 	streq.w	r2, [r8]
 8019de0:	605a      	strne	r2, [r3, #4]
 8019de2:	e7eb      	b.n	8019dbc <_malloc_r+0xa8>
 8019de4:	4623      	mov	r3, r4
 8019de6:	6864      	ldr	r4, [r4, #4]
 8019de8:	e7ae      	b.n	8019d48 <_malloc_r+0x34>
 8019dea:	463c      	mov	r4, r7
 8019dec:	687f      	ldr	r7, [r7, #4]
 8019dee:	e7b6      	b.n	8019d5e <_malloc_r+0x4a>
 8019df0:	461a      	mov	r2, r3
 8019df2:	685b      	ldr	r3, [r3, #4]
 8019df4:	42a3      	cmp	r3, r4
 8019df6:	d1fb      	bne.n	8019df0 <_malloc_r+0xdc>
 8019df8:	2300      	movs	r3, #0
 8019dfa:	6053      	str	r3, [r2, #4]
 8019dfc:	e7de      	b.n	8019dbc <_malloc_r+0xa8>
 8019dfe:	230c      	movs	r3, #12
 8019e00:	6033      	str	r3, [r6, #0]
 8019e02:	4630      	mov	r0, r6
 8019e04:	f000 f80c 	bl	8019e20 <__malloc_unlock>
 8019e08:	e794      	b.n	8019d34 <_malloc_r+0x20>
 8019e0a:	6005      	str	r5, [r0, #0]
 8019e0c:	e7d6      	b.n	8019dbc <_malloc_r+0xa8>
 8019e0e:	bf00      	nop
 8019e10:	24022b2c 	.word	0x24022b2c

08019e14 <__malloc_lock>:
 8019e14:	4801      	ldr	r0, [pc, #4]	@ (8019e1c <__malloc_lock+0x8>)
 8019e16:	f7ff bf00 	b.w	8019c1a <__retarget_lock_acquire_recursive>
 8019e1a:	bf00      	nop
 8019e1c:	24022b24 	.word	0x24022b24

08019e20 <__malloc_unlock>:
 8019e20:	4801      	ldr	r0, [pc, #4]	@ (8019e28 <__malloc_unlock+0x8>)
 8019e22:	f7ff befb 	b.w	8019c1c <__retarget_lock_release_recursive>
 8019e26:	bf00      	nop
 8019e28:	24022b24 	.word	0x24022b24

08019e2c <__sfputc_r>:
 8019e2c:	6893      	ldr	r3, [r2, #8]
 8019e2e:	3b01      	subs	r3, #1
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	b410      	push	{r4}
 8019e34:	6093      	str	r3, [r2, #8]
 8019e36:	da08      	bge.n	8019e4a <__sfputc_r+0x1e>
 8019e38:	6994      	ldr	r4, [r2, #24]
 8019e3a:	42a3      	cmp	r3, r4
 8019e3c:	db01      	blt.n	8019e42 <__sfputc_r+0x16>
 8019e3e:	290a      	cmp	r1, #10
 8019e40:	d103      	bne.n	8019e4a <__sfputc_r+0x1e>
 8019e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e46:	f7ff bd7c 	b.w	8019942 <__swbuf_r>
 8019e4a:	6813      	ldr	r3, [r2, #0]
 8019e4c:	1c58      	adds	r0, r3, #1
 8019e4e:	6010      	str	r0, [r2, #0]
 8019e50:	7019      	strb	r1, [r3, #0]
 8019e52:	4608      	mov	r0, r1
 8019e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e58:	4770      	bx	lr

08019e5a <__sfputs_r>:
 8019e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5c:	4606      	mov	r6, r0
 8019e5e:	460f      	mov	r7, r1
 8019e60:	4614      	mov	r4, r2
 8019e62:	18d5      	adds	r5, r2, r3
 8019e64:	42ac      	cmp	r4, r5
 8019e66:	d101      	bne.n	8019e6c <__sfputs_r+0x12>
 8019e68:	2000      	movs	r0, #0
 8019e6a:	e007      	b.n	8019e7c <__sfputs_r+0x22>
 8019e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e70:	463a      	mov	r2, r7
 8019e72:	4630      	mov	r0, r6
 8019e74:	f7ff ffda 	bl	8019e2c <__sfputc_r>
 8019e78:	1c43      	adds	r3, r0, #1
 8019e7a:	d1f3      	bne.n	8019e64 <__sfputs_r+0xa>
 8019e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e80 <_vfiprintf_r>:
 8019e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e84:	460d      	mov	r5, r1
 8019e86:	b09d      	sub	sp, #116	@ 0x74
 8019e88:	4614      	mov	r4, r2
 8019e8a:	4698      	mov	r8, r3
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	b118      	cbz	r0, 8019e98 <_vfiprintf_r+0x18>
 8019e90:	6a03      	ldr	r3, [r0, #32]
 8019e92:	b90b      	cbnz	r3, 8019e98 <_vfiprintf_r+0x18>
 8019e94:	f7ff fc6c 	bl	8019770 <__sinit>
 8019e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e9a:	07d9      	lsls	r1, r3, #31
 8019e9c:	d405      	bmi.n	8019eaa <_vfiprintf_r+0x2a>
 8019e9e:	89ab      	ldrh	r3, [r5, #12]
 8019ea0:	059a      	lsls	r2, r3, #22
 8019ea2:	d402      	bmi.n	8019eaa <_vfiprintf_r+0x2a>
 8019ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019ea6:	f7ff feb8 	bl	8019c1a <__retarget_lock_acquire_recursive>
 8019eaa:	89ab      	ldrh	r3, [r5, #12]
 8019eac:	071b      	lsls	r3, r3, #28
 8019eae:	d501      	bpl.n	8019eb4 <_vfiprintf_r+0x34>
 8019eb0:	692b      	ldr	r3, [r5, #16]
 8019eb2:	b99b      	cbnz	r3, 8019edc <_vfiprintf_r+0x5c>
 8019eb4:	4629      	mov	r1, r5
 8019eb6:	4630      	mov	r0, r6
 8019eb8:	f7ff fd82 	bl	80199c0 <__swsetup_r>
 8019ebc:	b170      	cbz	r0, 8019edc <_vfiprintf_r+0x5c>
 8019ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ec0:	07dc      	lsls	r4, r3, #31
 8019ec2:	d504      	bpl.n	8019ece <_vfiprintf_r+0x4e>
 8019ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ec8:	b01d      	add	sp, #116	@ 0x74
 8019eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ece:	89ab      	ldrh	r3, [r5, #12]
 8019ed0:	0598      	lsls	r0, r3, #22
 8019ed2:	d4f7      	bmi.n	8019ec4 <_vfiprintf_r+0x44>
 8019ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019ed6:	f7ff fea1 	bl	8019c1c <__retarget_lock_release_recursive>
 8019eda:	e7f3      	b.n	8019ec4 <_vfiprintf_r+0x44>
 8019edc:	2300      	movs	r3, #0
 8019ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ee0:	2320      	movs	r3, #32
 8019ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019eea:	2330      	movs	r3, #48	@ 0x30
 8019eec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a09c <_vfiprintf_r+0x21c>
 8019ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ef4:	f04f 0901 	mov.w	r9, #1
 8019ef8:	4623      	mov	r3, r4
 8019efa:	469a      	mov	sl, r3
 8019efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f00:	b10a      	cbz	r2, 8019f06 <_vfiprintf_r+0x86>
 8019f02:	2a25      	cmp	r2, #37	@ 0x25
 8019f04:	d1f9      	bne.n	8019efa <_vfiprintf_r+0x7a>
 8019f06:	ebba 0b04 	subs.w	fp, sl, r4
 8019f0a:	d00b      	beq.n	8019f24 <_vfiprintf_r+0xa4>
 8019f0c:	465b      	mov	r3, fp
 8019f0e:	4622      	mov	r2, r4
 8019f10:	4629      	mov	r1, r5
 8019f12:	4630      	mov	r0, r6
 8019f14:	f7ff ffa1 	bl	8019e5a <__sfputs_r>
 8019f18:	3001      	adds	r0, #1
 8019f1a:	f000 80a7 	beq.w	801a06c <_vfiprintf_r+0x1ec>
 8019f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f20:	445a      	add	r2, fp
 8019f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f24:	f89a 3000 	ldrb.w	r3, [sl]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	f000 809f 	beq.w	801a06c <_vfiprintf_r+0x1ec>
 8019f2e:	2300      	movs	r3, #0
 8019f30:	f04f 32ff 	mov.w	r2, #4294967295
 8019f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f38:	f10a 0a01 	add.w	sl, sl, #1
 8019f3c:	9304      	str	r3, [sp, #16]
 8019f3e:	9307      	str	r3, [sp, #28]
 8019f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8019f46:	4654      	mov	r4, sl
 8019f48:	2205      	movs	r2, #5
 8019f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f4e:	4853      	ldr	r0, [pc, #332]	@ (801a09c <_vfiprintf_r+0x21c>)
 8019f50:	f7e6 f9c6 	bl	80002e0 <memchr>
 8019f54:	9a04      	ldr	r2, [sp, #16]
 8019f56:	b9d8      	cbnz	r0, 8019f90 <_vfiprintf_r+0x110>
 8019f58:	06d1      	lsls	r1, r2, #27
 8019f5a:	bf44      	itt	mi
 8019f5c:	2320      	movmi	r3, #32
 8019f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f62:	0713      	lsls	r3, r2, #28
 8019f64:	bf44      	itt	mi
 8019f66:	232b      	movmi	r3, #43	@ 0x2b
 8019f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8019f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f72:	d015      	beq.n	8019fa0 <_vfiprintf_r+0x120>
 8019f74:	9a07      	ldr	r2, [sp, #28]
 8019f76:	4654      	mov	r4, sl
 8019f78:	2000      	movs	r0, #0
 8019f7a:	f04f 0c0a 	mov.w	ip, #10
 8019f7e:	4621      	mov	r1, r4
 8019f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f84:	3b30      	subs	r3, #48	@ 0x30
 8019f86:	2b09      	cmp	r3, #9
 8019f88:	d94b      	bls.n	801a022 <_vfiprintf_r+0x1a2>
 8019f8a:	b1b0      	cbz	r0, 8019fba <_vfiprintf_r+0x13a>
 8019f8c:	9207      	str	r2, [sp, #28]
 8019f8e:	e014      	b.n	8019fba <_vfiprintf_r+0x13a>
 8019f90:	eba0 0308 	sub.w	r3, r0, r8
 8019f94:	fa09 f303 	lsl.w	r3, r9, r3
 8019f98:	4313      	orrs	r3, r2
 8019f9a:	9304      	str	r3, [sp, #16]
 8019f9c:	46a2      	mov	sl, r4
 8019f9e:	e7d2      	b.n	8019f46 <_vfiprintf_r+0xc6>
 8019fa0:	9b03      	ldr	r3, [sp, #12]
 8019fa2:	1d19      	adds	r1, r3, #4
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	9103      	str	r1, [sp, #12]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	bfbb      	ittet	lt
 8019fac:	425b      	neglt	r3, r3
 8019fae:	f042 0202 	orrlt.w	r2, r2, #2
 8019fb2:	9307      	strge	r3, [sp, #28]
 8019fb4:	9307      	strlt	r3, [sp, #28]
 8019fb6:	bfb8      	it	lt
 8019fb8:	9204      	strlt	r2, [sp, #16]
 8019fba:	7823      	ldrb	r3, [r4, #0]
 8019fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fbe:	d10a      	bne.n	8019fd6 <_vfiprintf_r+0x156>
 8019fc0:	7863      	ldrb	r3, [r4, #1]
 8019fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8019fc4:	d132      	bne.n	801a02c <_vfiprintf_r+0x1ac>
 8019fc6:	9b03      	ldr	r3, [sp, #12]
 8019fc8:	1d1a      	adds	r2, r3, #4
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	9203      	str	r2, [sp, #12]
 8019fce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019fd2:	3402      	adds	r4, #2
 8019fd4:	9305      	str	r3, [sp, #20]
 8019fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a0ac <_vfiprintf_r+0x22c>
 8019fda:	7821      	ldrb	r1, [r4, #0]
 8019fdc:	2203      	movs	r2, #3
 8019fde:	4650      	mov	r0, sl
 8019fe0:	f7e6 f97e 	bl	80002e0 <memchr>
 8019fe4:	b138      	cbz	r0, 8019ff6 <_vfiprintf_r+0x176>
 8019fe6:	9b04      	ldr	r3, [sp, #16]
 8019fe8:	eba0 000a 	sub.w	r0, r0, sl
 8019fec:	2240      	movs	r2, #64	@ 0x40
 8019fee:	4082      	lsls	r2, r0
 8019ff0:	4313      	orrs	r3, r2
 8019ff2:	3401      	adds	r4, #1
 8019ff4:	9304      	str	r3, [sp, #16]
 8019ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ffa:	4829      	ldr	r0, [pc, #164]	@ (801a0a0 <_vfiprintf_r+0x220>)
 8019ffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a000:	2206      	movs	r2, #6
 801a002:	f7e6 f96d 	bl	80002e0 <memchr>
 801a006:	2800      	cmp	r0, #0
 801a008:	d03f      	beq.n	801a08a <_vfiprintf_r+0x20a>
 801a00a:	4b26      	ldr	r3, [pc, #152]	@ (801a0a4 <_vfiprintf_r+0x224>)
 801a00c:	bb1b      	cbnz	r3, 801a056 <_vfiprintf_r+0x1d6>
 801a00e:	9b03      	ldr	r3, [sp, #12]
 801a010:	3307      	adds	r3, #7
 801a012:	f023 0307 	bic.w	r3, r3, #7
 801a016:	3308      	adds	r3, #8
 801a018:	9303      	str	r3, [sp, #12]
 801a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a01c:	443b      	add	r3, r7
 801a01e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a020:	e76a      	b.n	8019ef8 <_vfiprintf_r+0x78>
 801a022:	fb0c 3202 	mla	r2, ip, r2, r3
 801a026:	460c      	mov	r4, r1
 801a028:	2001      	movs	r0, #1
 801a02a:	e7a8      	b.n	8019f7e <_vfiprintf_r+0xfe>
 801a02c:	2300      	movs	r3, #0
 801a02e:	3401      	adds	r4, #1
 801a030:	9305      	str	r3, [sp, #20]
 801a032:	4619      	mov	r1, r3
 801a034:	f04f 0c0a 	mov.w	ip, #10
 801a038:	4620      	mov	r0, r4
 801a03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a03e:	3a30      	subs	r2, #48	@ 0x30
 801a040:	2a09      	cmp	r2, #9
 801a042:	d903      	bls.n	801a04c <_vfiprintf_r+0x1cc>
 801a044:	2b00      	cmp	r3, #0
 801a046:	d0c6      	beq.n	8019fd6 <_vfiprintf_r+0x156>
 801a048:	9105      	str	r1, [sp, #20]
 801a04a:	e7c4      	b.n	8019fd6 <_vfiprintf_r+0x156>
 801a04c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a050:	4604      	mov	r4, r0
 801a052:	2301      	movs	r3, #1
 801a054:	e7f0      	b.n	801a038 <_vfiprintf_r+0x1b8>
 801a056:	ab03      	add	r3, sp, #12
 801a058:	9300      	str	r3, [sp, #0]
 801a05a:	462a      	mov	r2, r5
 801a05c:	4b12      	ldr	r3, [pc, #72]	@ (801a0a8 <_vfiprintf_r+0x228>)
 801a05e:	a904      	add	r1, sp, #16
 801a060:	4630      	mov	r0, r6
 801a062:	f3af 8000 	nop.w
 801a066:	4607      	mov	r7, r0
 801a068:	1c78      	adds	r0, r7, #1
 801a06a:	d1d6      	bne.n	801a01a <_vfiprintf_r+0x19a>
 801a06c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a06e:	07d9      	lsls	r1, r3, #31
 801a070:	d405      	bmi.n	801a07e <_vfiprintf_r+0x1fe>
 801a072:	89ab      	ldrh	r3, [r5, #12]
 801a074:	059a      	lsls	r2, r3, #22
 801a076:	d402      	bmi.n	801a07e <_vfiprintf_r+0x1fe>
 801a078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a07a:	f7ff fdcf 	bl	8019c1c <__retarget_lock_release_recursive>
 801a07e:	89ab      	ldrh	r3, [r5, #12]
 801a080:	065b      	lsls	r3, r3, #25
 801a082:	f53f af1f 	bmi.w	8019ec4 <_vfiprintf_r+0x44>
 801a086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a088:	e71e      	b.n	8019ec8 <_vfiprintf_r+0x48>
 801a08a:	ab03      	add	r3, sp, #12
 801a08c:	9300      	str	r3, [sp, #0]
 801a08e:	462a      	mov	r2, r5
 801a090:	4b05      	ldr	r3, [pc, #20]	@ (801a0a8 <_vfiprintf_r+0x228>)
 801a092:	a904      	add	r1, sp, #16
 801a094:	4630      	mov	r0, r6
 801a096:	f000 f879 	bl	801a18c <_printf_i>
 801a09a:	e7e4      	b.n	801a066 <_vfiprintf_r+0x1e6>
 801a09c:	0801b738 	.word	0x0801b738
 801a0a0:	0801b742 	.word	0x0801b742
 801a0a4:	00000000 	.word	0x00000000
 801a0a8:	08019e5b 	.word	0x08019e5b
 801a0ac:	0801b73e 	.word	0x0801b73e

0801a0b0 <_printf_common>:
 801a0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0b4:	4616      	mov	r6, r2
 801a0b6:	4698      	mov	r8, r3
 801a0b8:	688a      	ldr	r2, [r1, #8]
 801a0ba:	690b      	ldr	r3, [r1, #16]
 801a0bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	bfb8      	it	lt
 801a0c4:	4613      	movlt	r3, r2
 801a0c6:	6033      	str	r3, [r6, #0]
 801a0c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a0cc:	4607      	mov	r7, r0
 801a0ce:	460c      	mov	r4, r1
 801a0d0:	b10a      	cbz	r2, 801a0d6 <_printf_common+0x26>
 801a0d2:	3301      	adds	r3, #1
 801a0d4:	6033      	str	r3, [r6, #0]
 801a0d6:	6823      	ldr	r3, [r4, #0]
 801a0d8:	0699      	lsls	r1, r3, #26
 801a0da:	bf42      	ittt	mi
 801a0dc:	6833      	ldrmi	r3, [r6, #0]
 801a0de:	3302      	addmi	r3, #2
 801a0e0:	6033      	strmi	r3, [r6, #0]
 801a0e2:	6825      	ldr	r5, [r4, #0]
 801a0e4:	f015 0506 	ands.w	r5, r5, #6
 801a0e8:	d106      	bne.n	801a0f8 <_printf_common+0x48>
 801a0ea:	f104 0a19 	add.w	sl, r4, #25
 801a0ee:	68e3      	ldr	r3, [r4, #12]
 801a0f0:	6832      	ldr	r2, [r6, #0]
 801a0f2:	1a9b      	subs	r3, r3, r2
 801a0f4:	42ab      	cmp	r3, r5
 801a0f6:	dc26      	bgt.n	801a146 <_printf_common+0x96>
 801a0f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a0fc:	6822      	ldr	r2, [r4, #0]
 801a0fe:	3b00      	subs	r3, #0
 801a100:	bf18      	it	ne
 801a102:	2301      	movne	r3, #1
 801a104:	0692      	lsls	r2, r2, #26
 801a106:	d42b      	bmi.n	801a160 <_printf_common+0xb0>
 801a108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a10c:	4641      	mov	r1, r8
 801a10e:	4638      	mov	r0, r7
 801a110:	47c8      	blx	r9
 801a112:	3001      	adds	r0, #1
 801a114:	d01e      	beq.n	801a154 <_printf_common+0xa4>
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	6922      	ldr	r2, [r4, #16]
 801a11a:	f003 0306 	and.w	r3, r3, #6
 801a11e:	2b04      	cmp	r3, #4
 801a120:	bf02      	ittt	eq
 801a122:	68e5      	ldreq	r5, [r4, #12]
 801a124:	6833      	ldreq	r3, [r6, #0]
 801a126:	1aed      	subeq	r5, r5, r3
 801a128:	68a3      	ldr	r3, [r4, #8]
 801a12a:	bf0c      	ite	eq
 801a12c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a130:	2500      	movne	r5, #0
 801a132:	4293      	cmp	r3, r2
 801a134:	bfc4      	itt	gt
 801a136:	1a9b      	subgt	r3, r3, r2
 801a138:	18ed      	addgt	r5, r5, r3
 801a13a:	2600      	movs	r6, #0
 801a13c:	341a      	adds	r4, #26
 801a13e:	42b5      	cmp	r5, r6
 801a140:	d11a      	bne.n	801a178 <_printf_common+0xc8>
 801a142:	2000      	movs	r0, #0
 801a144:	e008      	b.n	801a158 <_printf_common+0xa8>
 801a146:	2301      	movs	r3, #1
 801a148:	4652      	mov	r2, sl
 801a14a:	4641      	mov	r1, r8
 801a14c:	4638      	mov	r0, r7
 801a14e:	47c8      	blx	r9
 801a150:	3001      	adds	r0, #1
 801a152:	d103      	bne.n	801a15c <_printf_common+0xac>
 801a154:	f04f 30ff 	mov.w	r0, #4294967295
 801a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a15c:	3501      	adds	r5, #1
 801a15e:	e7c6      	b.n	801a0ee <_printf_common+0x3e>
 801a160:	18e1      	adds	r1, r4, r3
 801a162:	1c5a      	adds	r2, r3, #1
 801a164:	2030      	movs	r0, #48	@ 0x30
 801a166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a16a:	4422      	add	r2, r4
 801a16c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a174:	3302      	adds	r3, #2
 801a176:	e7c7      	b.n	801a108 <_printf_common+0x58>
 801a178:	2301      	movs	r3, #1
 801a17a:	4622      	mov	r2, r4
 801a17c:	4641      	mov	r1, r8
 801a17e:	4638      	mov	r0, r7
 801a180:	47c8      	blx	r9
 801a182:	3001      	adds	r0, #1
 801a184:	d0e6      	beq.n	801a154 <_printf_common+0xa4>
 801a186:	3601      	adds	r6, #1
 801a188:	e7d9      	b.n	801a13e <_printf_common+0x8e>
	...

0801a18c <_printf_i>:
 801a18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a190:	7e0f      	ldrb	r7, [r1, #24]
 801a192:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a194:	2f78      	cmp	r7, #120	@ 0x78
 801a196:	4691      	mov	r9, r2
 801a198:	4680      	mov	r8, r0
 801a19a:	460c      	mov	r4, r1
 801a19c:	469a      	mov	sl, r3
 801a19e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a1a2:	d807      	bhi.n	801a1b4 <_printf_i+0x28>
 801a1a4:	2f62      	cmp	r7, #98	@ 0x62
 801a1a6:	d80a      	bhi.n	801a1be <_printf_i+0x32>
 801a1a8:	2f00      	cmp	r7, #0
 801a1aa:	f000 80d1 	beq.w	801a350 <_printf_i+0x1c4>
 801a1ae:	2f58      	cmp	r7, #88	@ 0x58
 801a1b0:	f000 80b8 	beq.w	801a324 <_printf_i+0x198>
 801a1b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a1b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a1bc:	e03a      	b.n	801a234 <_printf_i+0xa8>
 801a1be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a1c2:	2b15      	cmp	r3, #21
 801a1c4:	d8f6      	bhi.n	801a1b4 <_printf_i+0x28>
 801a1c6:	a101      	add	r1, pc, #4	@ (adr r1, 801a1cc <_printf_i+0x40>)
 801a1c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a1cc:	0801a225 	.word	0x0801a225
 801a1d0:	0801a239 	.word	0x0801a239
 801a1d4:	0801a1b5 	.word	0x0801a1b5
 801a1d8:	0801a1b5 	.word	0x0801a1b5
 801a1dc:	0801a1b5 	.word	0x0801a1b5
 801a1e0:	0801a1b5 	.word	0x0801a1b5
 801a1e4:	0801a239 	.word	0x0801a239
 801a1e8:	0801a1b5 	.word	0x0801a1b5
 801a1ec:	0801a1b5 	.word	0x0801a1b5
 801a1f0:	0801a1b5 	.word	0x0801a1b5
 801a1f4:	0801a1b5 	.word	0x0801a1b5
 801a1f8:	0801a337 	.word	0x0801a337
 801a1fc:	0801a263 	.word	0x0801a263
 801a200:	0801a2f1 	.word	0x0801a2f1
 801a204:	0801a1b5 	.word	0x0801a1b5
 801a208:	0801a1b5 	.word	0x0801a1b5
 801a20c:	0801a359 	.word	0x0801a359
 801a210:	0801a1b5 	.word	0x0801a1b5
 801a214:	0801a263 	.word	0x0801a263
 801a218:	0801a1b5 	.word	0x0801a1b5
 801a21c:	0801a1b5 	.word	0x0801a1b5
 801a220:	0801a2f9 	.word	0x0801a2f9
 801a224:	6833      	ldr	r3, [r6, #0]
 801a226:	1d1a      	adds	r2, r3, #4
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	6032      	str	r2, [r6, #0]
 801a22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a234:	2301      	movs	r3, #1
 801a236:	e09c      	b.n	801a372 <_printf_i+0x1e6>
 801a238:	6833      	ldr	r3, [r6, #0]
 801a23a:	6820      	ldr	r0, [r4, #0]
 801a23c:	1d19      	adds	r1, r3, #4
 801a23e:	6031      	str	r1, [r6, #0]
 801a240:	0606      	lsls	r6, r0, #24
 801a242:	d501      	bpl.n	801a248 <_printf_i+0xbc>
 801a244:	681d      	ldr	r5, [r3, #0]
 801a246:	e003      	b.n	801a250 <_printf_i+0xc4>
 801a248:	0645      	lsls	r5, r0, #25
 801a24a:	d5fb      	bpl.n	801a244 <_printf_i+0xb8>
 801a24c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a250:	2d00      	cmp	r5, #0
 801a252:	da03      	bge.n	801a25c <_printf_i+0xd0>
 801a254:	232d      	movs	r3, #45	@ 0x2d
 801a256:	426d      	negs	r5, r5
 801a258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a25c:	4858      	ldr	r0, [pc, #352]	@ (801a3c0 <_printf_i+0x234>)
 801a25e:	230a      	movs	r3, #10
 801a260:	e011      	b.n	801a286 <_printf_i+0xfa>
 801a262:	6821      	ldr	r1, [r4, #0]
 801a264:	6833      	ldr	r3, [r6, #0]
 801a266:	0608      	lsls	r0, r1, #24
 801a268:	f853 5b04 	ldr.w	r5, [r3], #4
 801a26c:	d402      	bmi.n	801a274 <_printf_i+0xe8>
 801a26e:	0649      	lsls	r1, r1, #25
 801a270:	bf48      	it	mi
 801a272:	b2ad      	uxthmi	r5, r5
 801a274:	2f6f      	cmp	r7, #111	@ 0x6f
 801a276:	4852      	ldr	r0, [pc, #328]	@ (801a3c0 <_printf_i+0x234>)
 801a278:	6033      	str	r3, [r6, #0]
 801a27a:	bf14      	ite	ne
 801a27c:	230a      	movne	r3, #10
 801a27e:	2308      	moveq	r3, #8
 801a280:	2100      	movs	r1, #0
 801a282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a286:	6866      	ldr	r6, [r4, #4]
 801a288:	60a6      	str	r6, [r4, #8]
 801a28a:	2e00      	cmp	r6, #0
 801a28c:	db05      	blt.n	801a29a <_printf_i+0x10e>
 801a28e:	6821      	ldr	r1, [r4, #0]
 801a290:	432e      	orrs	r6, r5
 801a292:	f021 0104 	bic.w	r1, r1, #4
 801a296:	6021      	str	r1, [r4, #0]
 801a298:	d04b      	beq.n	801a332 <_printf_i+0x1a6>
 801a29a:	4616      	mov	r6, r2
 801a29c:	fbb5 f1f3 	udiv	r1, r5, r3
 801a2a0:	fb03 5711 	mls	r7, r3, r1, r5
 801a2a4:	5dc7      	ldrb	r7, [r0, r7]
 801a2a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a2aa:	462f      	mov	r7, r5
 801a2ac:	42bb      	cmp	r3, r7
 801a2ae:	460d      	mov	r5, r1
 801a2b0:	d9f4      	bls.n	801a29c <_printf_i+0x110>
 801a2b2:	2b08      	cmp	r3, #8
 801a2b4:	d10b      	bne.n	801a2ce <_printf_i+0x142>
 801a2b6:	6823      	ldr	r3, [r4, #0]
 801a2b8:	07df      	lsls	r7, r3, #31
 801a2ba:	d508      	bpl.n	801a2ce <_printf_i+0x142>
 801a2bc:	6923      	ldr	r3, [r4, #16]
 801a2be:	6861      	ldr	r1, [r4, #4]
 801a2c0:	4299      	cmp	r1, r3
 801a2c2:	bfde      	ittt	le
 801a2c4:	2330      	movle	r3, #48	@ 0x30
 801a2c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a2ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a2ce:	1b92      	subs	r2, r2, r6
 801a2d0:	6122      	str	r2, [r4, #16]
 801a2d2:	f8cd a000 	str.w	sl, [sp]
 801a2d6:	464b      	mov	r3, r9
 801a2d8:	aa03      	add	r2, sp, #12
 801a2da:	4621      	mov	r1, r4
 801a2dc:	4640      	mov	r0, r8
 801a2de:	f7ff fee7 	bl	801a0b0 <_printf_common>
 801a2e2:	3001      	adds	r0, #1
 801a2e4:	d14a      	bne.n	801a37c <_printf_i+0x1f0>
 801a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ea:	b004      	add	sp, #16
 801a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f0:	6823      	ldr	r3, [r4, #0]
 801a2f2:	f043 0320 	orr.w	r3, r3, #32
 801a2f6:	6023      	str	r3, [r4, #0]
 801a2f8:	4832      	ldr	r0, [pc, #200]	@ (801a3c4 <_printf_i+0x238>)
 801a2fa:	2778      	movs	r7, #120	@ 0x78
 801a2fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a300:	6823      	ldr	r3, [r4, #0]
 801a302:	6831      	ldr	r1, [r6, #0]
 801a304:	061f      	lsls	r7, r3, #24
 801a306:	f851 5b04 	ldr.w	r5, [r1], #4
 801a30a:	d402      	bmi.n	801a312 <_printf_i+0x186>
 801a30c:	065f      	lsls	r7, r3, #25
 801a30e:	bf48      	it	mi
 801a310:	b2ad      	uxthmi	r5, r5
 801a312:	6031      	str	r1, [r6, #0]
 801a314:	07d9      	lsls	r1, r3, #31
 801a316:	bf44      	itt	mi
 801a318:	f043 0320 	orrmi.w	r3, r3, #32
 801a31c:	6023      	strmi	r3, [r4, #0]
 801a31e:	b11d      	cbz	r5, 801a328 <_printf_i+0x19c>
 801a320:	2310      	movs	r3, #16
 801a322:	e7ad      	b.n	801a280 <_printf_i+0xf4>
 801a324:	4826      	ldr	r0, [pc, #152]	@ (801a3c0 <_printf_i+0x234>)
 801a326:	e7e9      	b.n	801a2fc <_printf_i+0x170>
 801a328:	6823      	ldr	r3, [r4, #0]
 801a32a:	f023 0320 	bic.w	r3, r3, #32
 801a32e:	6023      	str	r3, [r4, #0]
 801a330:	e7f6      	b.n	801a320 <_printf_i+0x194>
 801a332:	4616      	mov	r6, r2
 801a334:	e7bd      	b.n	801a2b2 <_printf_i+0x126>
 801a336:	6833      	ldr	r3, [r6, #0]
 801a338:	6825      	ldr	r5, [r4, #0]
 801a33a:	6961      	ldr	r1, [r4, #20]
 801a33c:	1d18      	adds	r0, r3, #4
 801a33e:	6030      	str	r0, [r6, #0]
 801a340:	062e      	lsls	r6, r5, #24
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	d501      	bpl.n	801a34a <_printf_i+0x1be>
 801a346:	6019      	str	r1, [r3, #0]
 801a348:	e002      	b.n	801a350 <_printf_i+0x1c4>
 801a34a:	0668      	lsls	r0, r5, #25
 801a34c:	d5fb      	bpl.n	801a346 <_printf_i+0x1ba>
 801a34e:	8019      	strh	r1, [r3, #0]
 801a350:	2300      	movs	r3, #0
 801a352:	6123      	str	r3, [r4, #16]
 801a354:	4616      	mov	r6, r2
 801a356:	e7bc      	b.n	801a2d2 <_printf_i+0x146>
 801a358:	6833      	ldr	r3, [r6, #0]
 801a35a:	1d1a      	adds	r2, r3, #4
 801a35c:	6032      	str	r2, [r6, #0]
 801a35e:	681e      	ldr	r6, [r3, #0]
 801a360:	6862      	ldr	r2, [r4, #4]
 801a362:	2100      	movs	r1, #0
 801a364:	4630      	mov	r0, r6
 801a366:	f7e5 ffbb 	bl	80002e0 <memchr>
 801a36a:	b108      	cbz	r0, 801a370 <_printf_i+0x1e4>
 801a36c:	1b80      	subs	r0, r0, r6
 801a36e:	6060      	str	r0, [r4, #4]
 801a370:	6863      	ldr	r3, [r4, #4]
 801a372:	6123      	str	r3, [r4, #16]
 801a374:	2300      	movs	r3, #0
 801a376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a37a:	e7aa      	b.n	801a2d2 <_printf_i+0x146>
 801a37c:	6923      	ldr	r3, [r4, #16]
 801a37e:	4632      	mov	r2, r6
 801a380:	4649      	mov	r1, r9
 801a382:	4640      	mov	r0, r8
 801a384:	47d0      	blx	sl
 801a386:	3001      	adds	r0, #1
 801a388:	d0ad      	beq.n	801a2e6 <_printf_i+0x15a>
 801a38a:	6823      	ldr	r3, [r4, #0]
 801a38c:	079b      	lsls	r3, r3, #30
 801a38e:	d413      	bmi.n	801a3b8 <_printf_i+0x22c>
 801a390:	68e0      	ldr	r0, [r4, #12]
 801a392:	9b03      	ldr	r3, [sp, #12]
 801a394:	4298      	cmp	r0, r3
 801a396:	bfb8      	it	lt
 801a398:	4618      	movlt	r0, r3
 801a39a:	e7a6      	b.n	801a2ea <_printf_i+0x15e>
 801a39c:	2301      	movs	r3, #1
 801a39e:	4632      	mov	r2, r6
 801a3a0:	4649      	mov	r1, r9
 801a3a2:	4640      	mov	r0, r8
 801a3a4:	47d0      	blx	sl
 801a3a6:	3001      	adds	r0, #1
 801a3a8:	d09d      	beq.n	801a2e6 <_printf_i+0x15a>
 801a3aa:	3501      	adds	r5, #1
 801a3ac:	68e3      	ldr	r3, [r4, #12]
 801a3ae:	9903      	ldr	r1, [sp, #12]
 801a3b0:	1a5b      	subs	r3, r3, r1
 801a3b2:	42ab      	cmp	r3, r5
 801a3b4:	dcf2      	bgt.n	801a39c <_printf_i+0x210>
 801a3b6:	e7eb      	b.n	801a390 <_printf_i+0x204>
 801a3b8:	2500      	movs	r5, #0
 801a3ba:	f104 0619 	add.w	r6, r4, #25
 801a3be:	e7f5      	b.n	801a3ac <_printf_i+0x220>
 801a3c0:	0801b749 	.word	0x0801b749
 801a3c4:	0801b75a 	.word	0x0801b75a

0801a3c8 <__sflush_r>:
 801a3c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3d0:	0716      	lsls	r6, r2, #28
 801a3d2:	4605      	mov	r5, r0
 801a3d4:	460c      	mov	r4, r1
 801a3d6:	d454      	bmi.n	801a482 <__sflush_r+0xba>
 801a3d8:	684b      	ldr	r3, [r1, #4]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	dc02      	bgt.n	801a3e4 <__sflush_r+0x1c>
 801a3de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	dd48      	ble.n	801a476 <__sflush_r+0xae>
 801a3e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a3e6:	2e00      	cmp	r6, #0
 801a3e8:	d045      	beq.n	801a476 <__sflush_r+0xae>
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a3f0:	682f      	ldr	r7, [r5, #0]
 801a3f2:	6a21      	ldr	r1, [r4, #32]
 801a3f4:	602b      	str	r3, [r5, #0]
 801a3f6:	d030      	beq.n	801a45a <__sflush_r+0x92>
 801a3f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a3fa:	89a3      	ldrh	r3, [r4, #12]
 801a3fc:	0759      	lsls	r1, r3, #29
 801a3fe:	d505      	bpl.n	801a40c <__sflush_r+0x44>
 801a400:	6863      	ldr	r3, [r4, #4]
 801a402:	1ad2      	subs	r2, r2, r3
 801a404:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a406:	b10b      	cbz	r3, 801a40c <__sflush_r+0x44>
 801a408:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a40a:	1ad2      	subs	r2, r2, r3
 801a40c:	2300      	movs	r3, #0
 801a40e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a410:	6a21      	ldr	r1, [r4, #32]
 801a412:	4628      	mov	r0, r5
 801a414:	47b0      	blx	r6
 801a416:	1c43      	adds	r3, r0, #1
 801a418:	89a3      	ldrh	r3, [r4, #12]
 801a41a:	d106      	bne.n	801a42a <__sflush_r+0x62>
 801a41c:	6829      	ldr	r1, [r5, #0]
 801a41e:	291d      	cmp	r1, #29
 801a420:	d82b      	bhi.n	801a47a <__sflush_r+0xb2>
 801a422:	4a2a      	ldr	r2, [pc, #168]	@ (801a4cc <__sflush_r+0x104>)
 801a424:	40ca      	lsrs	r2, r1
 801a426:	07d6      	lsls	r6, r2, #31
 801a428:	d527      	bpl.n	801a47a <__sflush_r+0xb2>
 801a42a:	2200      	movs	r2, #0
 801a42c:	6062      	str	r2, [r4, #4]
 801a42e:	04d9      	lsls	r1, r3, #19
 801a430:	6922      	ldr	r2, [r4, #16]
 801a432:	6022      	str	r2, [r4, #0]
 801a434:	d504      	bpl.n	801a440 <__sflush_r+0x78>
 801a436:	1c42      	adds	r2, r0, #1
 801a438:	d101      	bne.n	801a43e <__sflush_r+0x76>
 801a43a:	682b      	ldr	r3, [r5, #0]
 801a43c:	b903      	cbnz	r3, 801a440 <__sflush_r+0x78>
 801a43e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a442:	602f      	str	r7, [r5, #0]
 801a444:	b1b9      	cbz	r1, 801a476 <__sflush_r+0xae>
 801a446:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a44a:	4299      	cmp	r1, r3
 801a44c:	d002      	beq.n	801a454 <__sflush_r+0x8c>
 801a44e:	4628      	mov	r0, r5
 801a450:	f7ff fbf4 	bl	8019c3c <_free_r>
 801a454:	2300      	movs	r3, #0
 801a456:	6363      	str	r3, [r4, #52]	@ 0x34
 801a458:	e00d      	b.n	801a476 <__sflush_r+0xae>
 801a45a:	2301      	movs	r3, #1
 801a45c:	4628      	mov	r0, r5
 801a45e:	47b0      	blx	r6
 801a460:	4602      	mov	r2, r0
 801a462:	1c50      	adds	r0, r2, #1
 801a464:	d1c9      	bne.n	801a3fa <__sflush_r+0x32>
 801a466:	682b      	ldr	r3, [r5, #0]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d0c6      	beq.n	801a3fa <__sflush_r+0x32>
 801a46c:	2b1d      	cmp	r3, #29
 801a46e:	d001      	beq.n	801a474 <__sflush_r+0xac>
 801a470:	2b16      	cmp	r3, #22
 801a472:	d11e      	bne.n	801a4b2 <__sflush_r+0xea>
 801a474:	602f      	str	r7, [r5, #0]
 801a476:	2000      	movs	r0, #0
 801a478:	e022      	b.n	801a4c0 <__sflush_r+0xf8>
 801a47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a47e:	b21b      	sxth	r3, r3
 801a480:	e01b      	b.n	801a4ba <__sflush_r+0xf2>
 801a482:	690f      	ldr	r7, [r1, #16]
 801a484:	2f00      	cmp	r7, #0
 801a486:	d0f6      	beq.n	801a476 <__sflush_r+0xae>
 801a488:	0793      	lsls	r3, r2, #30
 801a48a:	680e      	ldr	r6, [r1, #0]
 801a48c:	bf08      	it	eq
 801a48e:	694b      	ldreq	r3, [r1, #20]
 801a490:	600f      	str	r7, [r1, #0]
 801a492:	bf18      	it	ne
 801a494:	2300      	movne	r3, #0
 801a496:	eba6 0807 	sub.w	r8, r6, r7
 801a49a:	608b      	str	r3, [r1, #8]
 801a49c:	f1b8 0f00 	cmp.w	r8, #0
 801a4a0:	dde9      	ble.n	801a476 <__sflush_r+0xae>
 801a4a2:	6a21      	ldr	r1, [r4, #32]
 801a4a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a4a6:	4643      	mov	r3, r8
 801a4a8:	463a      	mov	r2, r7
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	47b0      	blx	r6
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	dc08      	bgt.n	801a4c4 <__sflush_r+0xfc>
 801a4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4ba:	81a3      	strh	r3, [r4, #12]
 801a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c4:	4407      	add	r7, r0
 801a4c6:	eba8 0800 	sub.w	r8, r8, r0
 801a4ca:	e7e7      	b.n	801a49c <__sflush_r+0xd4>
 801a4cc:	20400001 	.word	0x20400001

0801a4d0 <_fflush_r>:
 801a4d0:	b538      	push	{r3, r4, r5, lr}
 801a4d2:	690b      	ldr	r3, [r1, #16]
 801a4d4:	4605      	mov	r5, r0
 801a4d6:	460c      	mov	r4, r1
 801a4d8:	b913      	cbnz	r3, 801a4e0 <_fflush_r+0x10>
 801a4da:	2500      	movs	r5, #0
 801a4dc:	4628      	mov	r0, r5
 801a4de:	bd38      	pop	{r3, r4, r5, pc}
 801a4e0:	b118      	cbz	r0, 801a4ea <_fflush_r+0x1a>
 801a4e2:	6a03      	ldr	r3, [r0, #32]
 801a4e4:	b90b      	cbnz	r3, 801a4ea <_fflush_r+0x1a>
 801a4e6:	f7ff f943 	bl	8019770 <__sinit>
 801a4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d0f3      	beq.n	801a4da <_fflush_r+0xa>
 801a4f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a4f4:	07d0      	lsls	r0, r2, #31
 801a4f6:	d404      	bmi.n	801a502 <_fflush_r+0x32>
 801a4f8:	0599      	lsls	r1, r3, #22
 801a4fa:	d402      	bmi.n	801a502 <_fflush_r+0x32>
 801a4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a4fe:	f7ff fb8c 	bl	8019c1a <__retarget_lock_acquire_recursive>
 801a502:	4628      	mov	r0, r5
 801a504:	4621      	mov	r1, r4
 801a506:	f7ff ff5f 	bl	801a3c8 <__sflush_r>
 801a50a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a50c:	07da      	lsls	r2, r3, #31
 801a50e:	4605      	mov	r5, r0
 801a510:	d4e4      	bmi.n	801a4dc <_fflush_r+0xc>
 801a512:	89a3      	ldrh	r3, [r4, #12]
 801a514:	059b      	lsls	r3, r3, #22
 801a516:	d4e1      	bmi.n	801a4dc <_fflush_r+0xc>
 801a518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a51a:	f7ff fb7f 	bl	8019c1c <__retarget_lock_release_recursive>
 801a51e:	e7dd      	b.n	801a4dc <_fflush_r+0xc>

0801a520 <__swhatbuf_r>:
 801a520:	b570      	push	{r4, r5, r6, lr}
 801a522:	460c      	mov	r4, r1
 801a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a528:	2900      	cmp	r1, #0
 801a52a:	b096      	sub	sp, #88	@ 0x58
 801a52c:	4615      	mov	r5, r2
 801a52e:	461e      	mov	r6, r3
 801a530:	da0d      	bge.n	801a54e <__swhatbuf_r+0x2e>
 801a532:	89a3      	ldrh	r3, [r4, #12]
 801a534:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a538:	f04f 0100 	mov.w	r1, #0
 801a53c:	bf14      	ite	ne
 801a53e:	2340      	movne	r3, #64	@ 0x40
 801a540:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a544:	2000      	movs	r0, #0
 801a546:	6031      	str	r1, [r6, #0]
 801a548:	602b      	str	r3, [r5, #0]
 801a54a:	b016      	add	sp, #88	@ 0x58
 801a54c:	bd70      	pop	{r4, r5, r6, pc}
 801a54e:	466a      	mov	r2, sp
 801a550:	f000 f848 	bl	801a5e4 <_fstat_r>
 801a554:	2800      	cmp	r0, #0
 801a556:	dbec      	blt.n	801a532 <__swhatbuf_r+0x12>
 801a558:	9901      	ldr	r1, [sp, #4]
 801a55a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a55e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a562:	4259      	negs	r1, r3
 801a564:	4159      	adcs	r1, r3
 801a566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a56a:	e7eb      	b.n	801a544 <__swhatbuf_r+0x24>

0801a56c <__smakebuf_r>:
 801a56c:	898b      	ldrh	r3, [r1, #12]
 801a56e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a570:	079d      	lsls	r5, r3, #30
 801a572:	4606      	mov	r6, r0
 801a574:	460c      	mov	r4, r1
 801a576:	d507      	bpl.n	801a588 <__smakebuf_r+0x1c>
 801a578:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a57c:	6023      	str	r3, [r4, #0]
 801a57e:	6123      	str	r3, [r4, #16]
 801a580:	2301      	movs	r3, #1
 801a582:	6163      	str	r3, [r4, #20]
 801a584:	b003      	add	sp, #12
 801a586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a588:	ab01      	add	r3, sp, #4
 801a58a:	466a      	mov	r2, sp
 801a58c:	f7ff ffc8 	bl	801a520 <__swhatbuf_r>
 801a590:	9f00      	ldr	r7, [sp, #0]
 801a592:	4605      	mov	r5, r0
 801a594:	4639      	mov	r1, r7
 801a596:	4630      	mov	r0, r6
 801a598:	f7ff fbbc 	bl	8019d14 <_malloc_r>
 801a59c:	b948      	cbnz	r0, 801a5b2 <__smakebuf_r+0x46>
 801a59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5a2:	059a      	lsls	r2, r3, #22
 801a5a4:	d4ee      	bmi.n	801a584 <__smakebuf_r+0x18>
 801a5a6:	f023 0303 	bic.w	r3, r3, #3
 801a5aa:	f043 0302 	orr.w	r3, r3, #2
 801a5ae:	81a3      	strh	r3, [r4, #12]
 801a5b0:	e7e2      	b.n	801a578 <__smakebuf_r+0xc>
 801a5b2:	89a3      	ldrh	r3, [r4, #12]
 801a5b4:	6020      	str	r0, [r4, #0]
 801a5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a5ba:	81a3      	strh	r3, [r4, #12]
 801a5bc:	9b01      	ldr	r3, [sp, #4]
 801a5be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a5c2:	b15b      	cbz	r3, 801a5dc <__smakebuf_r+0x70>
 801a5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5c8:	4630      	mov	r0, r6
 801a5ca:	f000 f81d 	bl	801a608 <_isatty_r>
 801a5ce:	b128      	cbz	r0, 801a5dc <__smakebuf_r+0x70>
 801a5d0:	89a3      	ldrh	r3, [r4, #12]
 801a5d2:	f023 0303 	bic.w	r3, r3, #3
 801a5d6:	f043 0301 	orr.w	r3, r3, #1
 801a5da:	81a3      	strh	r3, [r4, #12]
 801a5dc:	89a3      	ldrh	r3, [r4, #12]
 801a5de:	431d      	orrs	r5, r3
 801a5e0:	81a5      	strh	r5, [r4, #12]
 801a5e2:	e7cf      	b.n	801a584 <__smakebuf_r+0x18>

0801a5e4 <_fstat_r>:
 801a5e4:	b538      	push	{r3, r4, r5, lr}
 801a5e6:	4d07      	ldr	r5, [pc, #28]	@ (801a604 <_fstat_r+0x20>)
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	4604      	mov	r4, r0
 801a5ec:	4608      	mov	r0, r1
 801a5ee:	4611      	mov	r1, r2
 801a5f0:	602b      	str	r3, [r5, #0]
 801a5f2:	f7e7 fd5e 	bl	80020b2 <_fstat>
 801a5f6:	1c43      	adds	r3, r0, #1
 801a5f8:	d102      	bne.n	801a600 <_fstat_r+0x1c>
 801a5fa:	682b      	ldr	r3, [r5, #0]
 801a5fc:	b103      	cbz	r3, 801a600 <_fstat_r+0x1c>
 801a5fe:	6023      	str	r3, [r4, #0]
 801a600:	bd38      	pop	{r3, r4, r5, pc}
 801a602:	bf00      	nop
 801a604:	24022b20 	.word	0x24022b20

0801a608 <_isatty_r>:
 801a608:	b538      	push	{r3, r4, r5, lr}
 801a60a:	4d06      	ldr	r5, [pc, #24]	@ (801a624 <_isatty_r+0x1c>)
 801a60c:	2300      	movs	r3, #0
 801a60e:	4604      	mov	r4, r0
 801a610:	4608      	mov	r0, r1
 801a612:	602b      	str	r3, [r5, #0]
 801a614:	f7e7 fd5d 	bl	80020d2 <_isatty>
 801a618:	1c43      	adds	r3, r0, #1
 801a61a:	d102      	bne.n	801a622 <_isatty_r+0x1a>
 801a61c:	682b      	ldr	r3, [r5, #0]
 801a61e:	b103      	cbz	r3, 801a622 <_isatty_r+0x1a>
 801a620:	6023      	str	r3, [r4, #0]
 801a622:	bd38      	pop	{r3, r4, r5, pc}
 801a624:	24022b20 	.word	0x24022b20

0801a628 <_sbrk_r>:
 801a628:	b538      	push	{r3, r4, r5, lr}
 801a62a:	4d06      	ldr	r5, [pc, #24]	@ (801a644 <_sbrk_r+0x1c>)
 801a62c:	2300      	movs	r3, #0
 801a62e:	4604      	mov	r4, r0
 801a630:	4608      	mov	r0, r1
 801a632:	602b      	str	r3, [r5, #0]
 801a634:	f7e7 fd66 	bl	8002104 <_sbrk>
 801a638:	1c43      	adds	r3, r0, #1
 801a63a:	d102      	bne.n	801a642 <_sbrk_r+0x1a>
 801a63c:	682b      	ldr	r3, [r5, #0]
 801a63e:	b103      	cbz	r3, 801a642 <_sbrk_r+0x1a>
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	bd38      	pop	{r3, r4, r5, pc}
 801a644:	24022b20 	.word	0x24022b20

0801a648 <_init>:
 801a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64a:	bf00      	nop
 801a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a64e:	bc08      	pop	{r3}
 801a650:	469e      	mov	lr, r3
 801a652:	4770      	bx	lr

0801a654 <_fini>:
 801a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a656:	bf00      	nop
 801a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a65a:	bc08      	pop	{r3}
 801a65c:	469e      	mov	lr, r3
 801a65e:	4770      	bx	lr
